<!-- doc/src/sgml/bgworker.sgml -->

<chapter id="bgworker">
 <title>后台工作者进程</title>

 <indexterm zone="bgworker">
  <primary>后台工作者</primary>
 </indexterm>

 <para>
  PostgreSQL可以被扩展来在独立进程中运行用户提供的代码。这种进程被<command>postgres</command>启动、停止和监控，这使它们的生命期与服务器的状态紧密联系。这些进程具有选项可以挂接上<productname>PostgreSQL</>的共享内存区域，并且可以从内部连接到数据库。它们也可以连续地运行多个事务，就像一个正常的被客户端连接的服务器进程。同样，通过链接到<application>libpq</>，它们可以连接到服务器并像一个正常客户端应用工作。
 </para>

 <warning>
  <para>
   在使用后台工作者进程时具有相当大的鲁棒性和安全性风险，因为它们由<literal>C</>语言编写，对数据具有无限制的访问权。希望使用包括后台工作者进程在内的模块的管理员必须要极度小心。只有仔细审计过的模块才会被允许运行后台工作者进程。
  </para>
 </warning>

 <para>
  通过将模块名放在<varname>shared_preload_libraries</>中，可以在<productname>PostgreSQL</>被启动时初始化后台工作者。一个希望运行后台工作者的模块需要通过在其<function>_PG_init()</>中调用<function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function>来注册它。也可以在系统启动后通过调用函数<function>RegisterDynamicBackgroundWorker(<type>BackgroundWorker
  *worker, BackgroundWorkerHandle **handle</type>)</function>来启动后台工作者。与只能在postmaster内调用的<function>RegisterBackgroundWorker</>不同，必须从一个常规后端调用<function>RegisterDynamicBackgroundWorker</function>。
 </para>

 <para>
<programlisting>
typedef void (*bgworker_main_type)(Datum main_arg);
typedef struct BackgroundWorker
{
    char        bgw_name[BGW_MAXLEN];
    int         bgw_flags;
    BgWorkerStartTime bgw_start_time;
    int         bgw_restart_time;       /* in seconds, or BGW_NEVER_RESTART */
    bgworker_main_type bgw_main;
    char        bgw_library_name[BGW_MAXLEN];   /* only if bgw_main is NULL */
    char        bgw_function_name[BGW_MAXLEN];  /* only if bgw_main is NULL */
    Datum       bgw_main_arg;
    char        bgw_extra[BGW_EXTRALEN];
    int         bgw_notify_pid;
} BackgroundWorker;
</programlisting>
  </para>

  <para>
   <structfield>bgw_name</>是一个用于记录消息、处理列表和类似上下文的字符串。
  </para>

  <para>
   <structfield>bgw_flags</>是一个按位与的位掩码，它用于指示模块想要的能力。可能的值是<literal>BGWORKER_SHMEM_ACCESS</literal>（请求共享内存访问）和<literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal>（要求建立一个数据库连接的能力，通过连接它可以运行事务和查询）。一个使用<literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal>来连接一个数据库的后台工作者也必须使用<literal>BGWORKER_SHMEM_ACCESS</literal>挂接到共享内存，否则工作者启动将会失败。
  </para>

  <para>
   <structfield>bgw_start_time</structfield>是服务器状态，在该状态中<command>postgres</>会启动该进程，它可以是<literal>BgWorkerStart_PostmasterStart</>（在<command>postgres</>本身完成初始化之后立即启动，这种进程不能使用数据库连接）、<literal>BgWorkerStart_ConsistentState</>（当一个热后备中达到一个一致性状态之后立即启动，允许进程连接到数据库并运行只读查询）和<literal>BgWorkerStart_RecoveryFinished</>（在系统进入到正常读写状态后立即启动）之一。注意后两种值在服务器不是一个热后备的情况下是等同的。注意这种设置仅仅表示何时启动进程，当一个不同状态到达时它们不会停止。
  </para>

  <para>
   <structfield>bgw_restart_time</structfield>是在崩溃情况下<command>postgres</command>启动进程之前等待的时间间隔，以秒计。它可以是任何正值，或者<literal>BGW_NEVER_RESTART</literal>，表示在出现崩溃后不重启进程。
  </para>

  <para>
   <structfield>bgw_main</structfield>是进程被启动后要运行的函数指针。该函数必须有一个类型为<type>Datum</>的单一参数并返回<type>void</>。<structfield>bgw_main_arg</structfield>将被传递给它作为它唯一的参数。注意全局变量<literal>MyBgworkerEntry</literal>指向在注册阶段被传递的<structname>BackgroundWorker</structname>结构副本。 <structfield>bgw_main</structfield>可以为NULL，在那时，
   <structfield>bgw_library_name</structfield>和
   <structfield>bgw_function_name</structfield>将被用来确定入口点。这对于在
   postmaster启动后开始的后台工作者很有用，因为这种情况下postmaster并没有载入必需的库。
  </para>

  <para>
   <structfield>bgw_library_name</structfield>是应该在其中定位后台工作者初始入口点的
   库名称。除非<structfield>bgw_main</structfield>为NULL，它将会被忽略。但是如果
   <structfield>bgw_main</structfield>为NULL，则所指的库将被工作者进程动态载入并且
   <structfield>bgw_function_name</structfield>将被用来标识要调用的函数。
  </para>

  <para>
   <structfield>bgw_function_name</structfield>是一个动态载入库中的一个函数名，
   该函数将被用作一个新后台工作者的初始入口点。除非<structfield>bgw_main</structfield>
   为NULL，它将会被忽略。
  </para>

  <para>
    <structfield>bgw_extra</structfield>包含传递到后台工作者的额外数据。不像<structfield>bgw_main_arg</>，
    这个数据不会作为参数传递给工作者的主函数，但是它可以通过<literal>MyBgworkerEntry</literal>被访问，正如上面讨论的。  
  </para>
  
  <para>
   <structfield>bgw_notify_pid</structfield>是一个PostgreSQL后端进程的PID，
   当后台工作者进程启动或者退出时，postmaster会向这个PID所指的进程发送<literal>SIGUSR1</>。
   对于在postmaster启动时注册的工作者，它应该为0；或者注册该工作者的后端不希望等待该工作者
   启动时，它也应该为0。否则，它应该被初始化为<literal>MyProcPid</>。
  </para>

  <para>
   一旦运行起来，
   进程可以通过调用<function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function> 或者<function>BackgroundWorkerInitializeConnectionByOid(<parameter>Oid dboid</parameter>, <parameter>Oid useroid</parameter>)</function>来连接到一个数据库。
   这使得该进程可以使用<literal>SPI</literal>接口运行事务和查询。
   如果<varname>dbname</>为NULL或者<varname>dboid</>是<literal>InvalidOid</>，
   该会话没有连接到任何特定数据库，但共享的目录可以被访问。
   如果<varname>username</>为NULL或者<varname>useroid</>是<literal>InvalidOid</>，
   该进程将以在<command>initdb</>阶段创建的超级用户身份运行。
   后台工作者只能调用这两个函数之一，并且只能调用一次。所以不可能切换数据库。
  </para>

  <para>
   当控制到达<structfield>bgw_main</>函数时，信号初始会被阻塞，并且必须被它解除阻塞。这是为了允许进程自定义它的信号处理器。在新进程中可以通过调用<function>BackgroundWorkerUnblockSignals</>来解除对信号的阻塞，还可以通过调用<function>BackgroundWorkerBlockSignals</>来阻塞信号。
  </para>

  <para>
   如果一个后台工作者的<structfield>bgw_restart_time</structfield>被配置为
   <literal>BGW_NEVER_RESTART</>，或者它退出时的退出码为0，又或者它是被
   <function>TerminateBackgroundWorker</>所终止，它将会被postmaster在退出时自动解除
   注册。否则，它将在等待通过<structfield>bgw_restart_time</>配置的时间段之后被重新启动，
   或者在postmaster因为一次后端失败重新初始化集簇时立刻被重启。需要临时禁止执行的后端应该使用
   可中断的休眠而不是退出，这可以通过调用<function>WaitLatch()</function>实现。
   调用该函数时要确保<literal>WL_POSTMASTER_DEATH</>标志被设置，并且验证在
   <command>postgres</>本身被终止的紧急情况下产生的快速退出返回码。
  </para>

  <para>
   当一个后台工作者是通过<function>RegisterDynamicBackgroundWorker</function>函数
   注册时，后端可以执行该注册以获得有关该工作者的状态信息。希望这样做的后端应该把一个
   <type>BackgroundWorkerHandle *</type>的地址作为第二个参数传递给
   <function>RegisterDynamicBackgroundWorker</function>。如果工作者被成功地注册，
   这个指针将被用一个非透明句柄初始化，它之后会被传递给
   <function>GetBackgroundWorkerPid(<parameter>BackgroundWorkerHandle *</parameter>, <parameter>pid_t *</parameter>)</function>或者
   <function>TerminateBackgroundWorker(<parameter>BackgroundWorkerHandle *</parameter>)</function>。
   <function>GetBackgroundWorkerPid</>可以被用来测试工作者的状态：返回值为
   <literal>BGWH_NOT_YET_STARTED</>表示该工作者还未被postmaster启动；
   <literal>BGWH_STOPPED</literal>表示它已经被启动但是不再运行；
   而<literal>BGWH_STARTED</literal>表示它正在运行。在最后一种情况下，PID也将被通过
   第二个参数返回。
   <function>TerminateBackgroundWorker</>导致postmaster发送<literal>SIGTERM</>
   给工作者（如果它在运行），并且在它不再运行时尽快解除注册。
  </para>

  <para>
   在某些情况下，一个注册后台工作者的进程可能希望等待该工作者启动起来。其实现方式是：把
   <structfield>bgw_notify_pid</structfield>初始化成<literal>MyProcPid</>并且接着
   把注册时得到的<type>BackgroundWorkerHandle *</type>传递给
   <function>WaitForBackgroundWorkerStartup(<parameter>BackgroundWorkerHandle
   *handle</parameter>, <parameter>pid_t *</parameter>)</function>函数。
   这个函数将阻塞直到postmaster已经尝试启动该后台工作者，或者直到postmaster死亡。如果后台
   工作者正在运行，返回值将是<literal>BGWH_STARTED</>，并且其PID将被写入到所提供的地址。
   否则，返回值将是<literal>BGWH_STOPPED</literal>或者
   <literal>BGWH_POSTMASTER_DIED</literal>。
  </para>

  <para>
   <filename>src/test/modules/worker_spi</>模块包含一个工作例子，它证明了一些有用的技术。
  </para>

  <para>
   注册的后台工作者的最大数量由<xref linkend="guc-max-worker-processes">限制。
  </para>
</chapter>

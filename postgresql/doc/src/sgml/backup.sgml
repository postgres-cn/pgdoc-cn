<!-- doc/src/sgml/backup.sgml -->

<chapter id="backup">
 <title>备份和恢复</title>

 <indexterm zone="backup"><primary>backup</></>

 <para>
  由于包含着有价值的数据，<productname>PostgreSQL</>数据库应当被定期地备份。虽然过程相当简
  单，但清晰地理解其底层技术和假设是非常重要的。
 </para>

 <para>
  有三种不同的基本方法来备份<productname>PostgreSQL</>数据：
  <itemizedlist>
   <listitem><para><acronym>SQL</>转储</para></listitem>
   <listitem><para>文件系统级备份File system level backup</para></listitem>
   <listitem><para>连续归档</para></listitem>
  </itemizedlist>
  每一种都有其优缺点，在下面的小节中将分别讨论。
 </para>

 <sect1 id="backup-dump">
  <title><acronym>SQL</>转储</title>

  <para>
   SQL 转储方法的思想是创建一个由SQL命令组成的文件，当把这个文件回馈给服务器时，将重建与转储时状态一样的数据库。 <productname>PostgreSQL</>为这个用途提供了工具程序<xref linkend="app-pgdump">。这条命令的基本用法是：
<synopsis>
pg_dump <replaceable class="parameter">dbname</replaceable> &gt; <replaceable class="parameter">outfile</replaceable>
</synopsis>
   正如你所见，<application>pg_dump</>把结果输出到标准输出。我们后面将看到这样做有什么用处。
   尽管上述命令会创建一个文本文件，<application>pg_dump</>可以用其他格式创建文件以支持并行
   和细粒度的对象恢复控制。
  </para>

  <para>
   <application>pg_dump</>是一个普通的<productname>PostgreSQL</>客户端应用（尽管是个
   相当聪明的东西）。这就意味着你可以在任何可以访问该数据库的远端主机上进行备份工作。但是请记住
   <application>pg_dump</>不会以任何特殊权限运行。具体说来，就是它必须要有你想备份的表的读
   权限，因此为了备份整个数据库你几乎总是必须以一个数据库超级用户来运行它（如果你没有足够的特权
   来备份整个数据库，你仍然可以使用诸如<option>-n <replaceable>schema</replaceable></option>
   或<option>-t <replaceable>table</replaceable></option>选项来备份该数据库中你能够
   访问的部分）。
  </para>

  <para>
   要声明<application>pg_dump</>连接哪个数据库服务器，使用命令行选项<option>-h<replaceable>host</></>和 <option>-p <replaceable>port</></>。 默认主机是本地主机或你的<envar>PGHOST</envar>环境变量指定的主机。 类似地，默认端口是环境变量<envar>PGPORT</envar>或（如果<envar>PGPORT</envar>不存在）内建的默认值。 （服务器通常有相同的默认值，所以还算方便。）
  </para>

  <para>
   和任何其他<productname>PostgreSQL</>客户端应用一样， <application>pg_dump</>默认使用与当前操作系统用户名同名的数据库用户名进行连接。 要使用其他名字，要么声明<option>-U</option>选项，要么设置环境变量<envar>PGUSER</envar>。请注意<application>pg_dump</>的连接也要通过客户认证机制（在<xref linkend="client-authentication">里描述）。
  </para>

  <para>
   <application>pg_dump</>对于其他备份方法的一个重要优势是，<application>pg_dump</>的输出可以很容易地在新版本的<productname>PostgreSQL</>中载入，而文件级备份和连续归档都是极度的服务器版本限定的。<application>pg_dump</>也是唯一可以将一个数据库传送到一个不同机器架构上的方法，例如从一个32位服务器到一个64位服务器。
  </para>

  <para>
   由<application>pg_dump</>创建的备份在内部是一致的， 也就是说，转储表现了<application>pg_dump</>开始运行时刻的数据库快照，且在<application>pg_dump</>运行过程中发生的更新将不会被转储。<application>pg_dump</>工作的时候并不阻塞其他的对数据库的操作。 （但是会阻塞那些需要排它锁的操作，比如大部分形式的<command>ALTER TABLE</command>）
  </para>

  <sect2 id="backup-dump-restore">
   <title>从转储中恢复</title>

   <para>
    <application>pg_dump</>生成的文本文件可以由<application>psql</application>程序读取。 从转储中恢复的常用命令是：
<synopsis>
psql <replaceable class="parameter">dbname</replaceable> &lt; <replaceable class="parameter">infile</replaceable>
</synopsis>
    其中<replaceable class="parameter">infile</replaceable>就是<application>pg_dump</>命令的输出文件。这条命令不会创建数据库<replaceable class="parameter">dbname</replaceable>，你必须在执行<application>psql</application>前自己从<literal>template0</>创建（例如，用命令<literal>createdb -T template0 <replaceable
    class="parameter">dbname</></literal>）。<application>psql</>支持类似<application>pg_dump</>的选项用以指定要连接的数据库服务器和要使用的用户名。 参阅<xref linkend="app-psql">的手册获取更多信息。
    非文本文件转储可以使用<xref linkend="app-pgrestore">工具来恢复。
   </para>

   <para>
    在开始恢复之前，转储库中对象的拥有者以及在其上被授予了权限的用户必须已经存在。如果它们不存在，那么恢复过程将无法将对象创建成具有原来的所属关系以及权限（有时候这就是你所需要的，但通常不是）。
   </para>

   <para>
    默认情况下，<application>psql</>脚本在遇到一个SQL错误后会继续执行。你也许希望在遇到一个SQL错误后让<application>psql</>退出，那么可以设置<literal>ON_ERROR_STOP</>变量来运行<application>psql</application>，这将使<application>psql</application>在遇到SQL错误后退出并返回状态3：
<programlisting>
psql --set ON_ERROR_STOP=on dbname &lt; infile
</programlisting>
    不管怎样，你将只能得到一个部分恢复的数据库。作为另一种选择，你可以指定让整个恢复作为一个单独的事务运行，这样恢复要么完全完成要么完全回滚。这种模式可以通过向<application>psql</>传递<option>-1</>或<option>--single-transaction</>命令行选项来指定。在使用这种模式时，注意即使是很小的一个错误也会导致运行了数小时的恢复被回滚。但是，这仍然比在一个部分恢复后手工清理复杂的数据库要更好。
   </para>

   <para>
    <application>pg_dump</>和<application>psql</>读写管道的能力使得直接从一个服务器转储一个数据库到另一个服务器成为可能，例如：
<programlisting>
pg_dump -h <replaceable>host1</> <replaceable>dbname</> | psql -h <replaceable>host2</> <replaceable>dbname</>
</programlisting>
   </para>

   <important>
    <para>
     <application>pg_dump</>产生的转储是相对于<literal>template0</>。这意味着在<literal>template1</>中加入的任何语言、过程等都会被<application>pg_dump</>转储。结果是，如果在恢复时使用的是一个自定义的<literal>template1</>，你必须从<literal>template0</>创建一个空的数据库，正如上面的例子所示。
    </para>
   </important>

   <para>
    一旦完成恢复，在每个数据库上运行<xref linkend="sql-analyze">是明智的举动，这样优化器就有有用的统计数据了，更多信息参见<xref linkend="vacuum-for-statistics">和<xref linkend="autovacuum">。更多关于如何有效地向<productname>PostgreSQL</>里装载大量数据的建议， 请参考<xref linkend="populate">。
   </para>
  </sect2>

  <sect2 id="backup-dump-all">
   <title>使用<application>pg_dumpall</></title>

   <para>
    <application>pg_dump</>每次只转储一个数据库，而且它不会转储关于角色或表空间（因为它们是集簇范围的）的信息。为了支持方便地转储一个数据库集簇的全部内容，提供了<xref linkend="app-pg-dumpall">程序。<application>pg_dumpall</>备份一个给定集簇中的每一个数据库，并且也保留了集簇范围的数据，如角色和表空间定义。该命令的基本用法是：
<synopsis>
pg_dumpall &gt; <replaceable>outfile</>
</synopsis>
    转储的结果可以使用<application>psql</>恢复：
<synopsis>
psql -f <replaceable class="parameter">infile</replaceable> postgres
</synopsis>
    （实际上，你可以指定恢复到任何已有数据库名，但是如果你正在将转储载入到一个空集簇中则通常要用（<literal>postgres</>）。在恢复一个<application>pg_dumpall</>转储时常常需要具有数据库超级用户访问权限，因为它需要恢复角色和表空间信息。如果你在使用表空间，请确保转储中的表空间路径适合于新的安装。
   </para>

   <para>
    <application>pg_dumpall</>工作时会发出命令重新创建角色、表空间和空数据库，接着为每一个数据库<application>pg_dump</>。这意味着每个数据库自身是一致的，但是不同数据库的快照并不同步。
   </para>

   <para>
    集簇范围的数据可以使用<application>pg_dumpall</>的<option>--globals-only</>选项来单独转储。如果在单个数据库上运行<application>pg_dump</>命令，上述做法对于完全备份整个集簇是必需的。
   </para>
  </sect2>

  <sect2 id="backup-dump-large">
   <title>处理大型数据库</title>

   <para>
    在一些具有最大文件尺寸限制的操作系统上创建大型的<application>pg_dump</>输出文件可能会出现问题。幸运地是，<application>pg_dump</>可以写出到标准输出，因此你可以使用标准Unix工具来处理这种潜在的问题。有几种可能的方法：
   </para>

   <formalpara>
    <title>使用压缩转储。</title>
    <para>
     你可以使用你喜欢的压缩程序，例如<application>gzip</application>：

<programlisting>
pg_dump <replaceable class="parameter">dbname</replaceable> | gzip &gt; <replaceable class="parameter">filename</replaceable>.gz
</programlisting>

     恢复：

<programlisting>
gunzip -c <replaceable class="parameter">filename</replaceable>.gz | psql <replaceable class="parameter">dbname</replaceable>
</programlisting>

     或者：

<programlisting>
cat <replaceable class="parameter">filename</replaceable>.gz | gunzip | psql <replaceable class="parameter">dbname</replaceable>
</programlisting>
    </para>
   </formalpara>

   <formalpara>
    <title>使用<command>split</>。</title>
    <para>
     <command>split</command>命令允许你将输出分割成较小的文件以便能够适应底层文件系统的尺寸要求。例如，让每一块的大小为1兆字节：

<programlisting>
pg_dump <replaceable class="parameter">dbname</replaceable> | split -b 1m - <replaceable class="parameter">filename</replaceable>
</programlisting>

     恢复：

<programlisting>
cat <replaceable class="parameter">filename</replaceable>* | psql <replaceable class="parameter">dbname</replaceable>
</programlisting>
    </para>
   </formalpara>

   <formalpara>
    <title>使用<application>pg_dump</>的自定义转储格式。</title>
    <para>
     如果<productname>PostgreSQL</productname>所在的系统上安装了<application>zlib</>压缩库，自定义转储格式将在写出数据到输出文件时对其压缩。这将产生和使用<command>gzip</command>时差不多大小的转储文件，但是这种方式的一个优势是其中的表可以被有选择地恢复。下面的命令使用自定义转储格式来转储一个数据库：

<programlisting>
pg_dump -Fc <replaceable class="parameter">dbname</replaceable> &gt; <replaceable class="parameter">filename</replaceable>
</programlisting>

     自定义格式的转储不是<application>psql</>的脚本，只能通过<application>pg_restore</>恢复，例如：

<programlisting>
pg_restore -d <replaceable class="parameter">dbname</replaceable> <replaceable class="parameter">filename</replaceable>
</programlisting>

     详情请参阅<xref linkend="app-pgdump">和<xref
     linkend="app-pgrestore">。
    </para>
   </formalpara>

   <para>
    对于非常大型的数据库，你可能需要将<command>split</>配合其他两种方法之一进行使用。
   </para>

   <formalpara>
    <title>使用<application>pg_dump</>的并行转储特性。</title>
    <para>
     为了加快转储一个大型数据库的速度，你可以使用<application>pg_dump</application>的并行模式。它将同时转储多个表。你可以使用<command>-j</command>参数控制并行度。并行转储只支持“目录”归档格式。

<programlisting>
pg_dump -j <replaceable class="parameter">num</replaceable> -F d -f <replaceable class="parameter">out.dir</replaceable> <replaceable class="parameter">dbname</replaceable>
</programlisting>

     你可以使用<command>pg_restore -j</command>来以并行方式恢复一个转储。它只能适合于“自定义”归档或者“目录”归档，但不管归档是否由<command>pg_dump -j</command>创建。
    </para>
   </formalpara>
  </sect2>
 </sect1>

 <sect1 id="backup-file">
  <title>文件系统级别备份</title>

  <para>
   另外一种备份策略是直接复制<productname>PostgreSQL</>用于存储数据库中数据的文件，<xref linkend="creating-cluster">解释了这些文件的位置。你可以采用任何你喜欢的方式进行文件系统备份，例如：

<programlisting>
tar -cf backup.tar /usr/local/pgsql/data
</programlisting>
  </para>

  <para>
   但是这种方法有两个限制，使得这种方法不实用，或者说至少比<application>pg_dump</>方法差：

   <orderedlist>
    <listitem>
     <para>
      为了得到一个可用的备份，数据库服务器<emphasis>必须</>被关闭。例如阻止所有连接的半路措施是<emphasis>不起作用</emphasis>的（部分原因是<command>tar</command>和类似工具无法得到文件系统状态的一个原子的快照，还有服务器内部缓冲的原因）。关于停止服务器的信息可以在<xref linkend="server-shutdown">中找到。不用说，在恢复数据之前你也需要关闭服务器。
     </para>
    </listitem>

    <listitem>
     <para>
      如果你已经深入地了解了数据库的文件系统布局的细节，你可能会有兴趣尝试通过相应的文件或目录来备份或恢复特定的表或数据库。这种方法也<emphasis>不会</>起作用，因为包含在这些文件中的信息只有配合提交日志文件（<filename>pg_clog/*</filename>）才有用，提交日志文件包含了所有事务的提交状态。一个表文件只有和这些信息一起才有用。当然也不可能只恢复一个表及相关的<filename>pg_clog</filename>数据，因为这会导致数据库集簇中所有其他表变得无用。因此文件系统备份值适合于完整地备份或恢复整个数据库集簇。
     </para>
    </listitem>
   </orderedlist>
  </para>

  <para>
   另一种文件系统备份方法是创建一个数据目录的<quote>一致快照</quote>，如果文件系统支持此功能（并且你相信它的实现正确）。典型的过程是创建一个包含数据库的卷的<quote>冻结快照</>，然后从该快照复制整个数据目录（如上，不能是部分复制）到备份设备，最后释放冻结快照。即使在数据库服务器运行时，这种方式也有效。但是，以这种方式创建的备份保存的文件看起来就像数据库没有被正确关闭时的状态。因此，当你从备份数据上启动数据库服务器时，它会认为上一次的服务器实例崩溃了并尝试重放WAL日志。这不是问题，只是需要注意（当然WAL文件必须要包括在备份中）。你可以在拍摄快照之前执行一次<command>CHECKPOINT</command>以便节省恢复时间。
  </para>

  <para>
   如果你的数据库跨越多个文件系统，可能没有任何方式可以对所有卷获得完全同步的冻结快照。例如，如果你的数据文件和WAL日志放置在不同的磁盘上，或者表空间在不同的文件系统中，可能没有办法使用快照备份，因为快照<emphasis>必须</>是同步的。在这些情况下，一定要仔细阅读你的文件系统文档以了解其对一致快照技术的支持。
  </para>

  <para>
   如果没有可能获得同步快照，一种选择是将数据库服务器关闭足够长的时间以建立所有的冻结快照。另一种选择是执行一次连续归档基础备份（<xref linkend="backup-base-backup">），因为这种备份对于备份期间发生的文件系统改变是免疫的。这要求在备份过程中允许连续归档，恢复时使用连续归档恢复（<xref linkend="backup-pitr-recovery">）。
  </para>

  <para>
   还有一种选择是使用<application>rsync</>来执行一次文件系统备份。其做法是先在数据库服务器运行时执行<application>rsync</>，
   然后关闭数据库服务器足够长的时间来执行<command>rsync --checksum</>。（<option>--checksum</>是必要的，因为<command>rsync</>只有1秒的文件修改时间粒度。）
   第二次<application>rsync</>会比第一次快很多，
   因为它只需要传送相对很少的数据，由于服务器是停止的，
   所以最终结果将是一致的。
   这种方法允许在最小停机时间内执行一次文件系统备份。
  </para>

  <para>
   注意一个文件系统备份通常会比一个SQL转储体积更大（例如<application>pg_dump</application>不需要转储索引的内容，而是转储用于重建索引的命令）。但是，做一次文件系统备份可能更快。
  </para>
 </sect1>

 <sect1 id="continuous-archiving"> 
  <title>连续归档和时间点恢复（PITR）</title>

  <indexterm zone="backup">
   <primary>continuous archiving</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>point-in-time recovery</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>PITR</primary>
  </indexterm>

  <para>
   在任何时间，<productname>PostgreSQL</>在数据集簇目录的<filename>pg_xlog/</>子目录下都保持有一个<firstterm>预写式日志</>（WAL）。这个日志存在的目的是为了保证崩溃后的安全：如果系统崩溃，可以<quote>重放</>从最后一次检查点以来的日志项来恢复数据库的一致性。该日志的存在也使得第三种备份数据库的策略变得可能：我们可以把一个文件系统级别的备份和WAL文件的备份结合起来。当需要恢复时，我们先恢复文件系统备份，然后从备份的WAL文件中重放来把系统带到一个当前状态。这种方法比之前的方法管理起来要更复杂，但是有其显著的优点：
  <itemizedlist>
   <listitem>
    <para>
     我们不需要一个完美的一致的文件系统备份作为开始点。备份中的任何内部不一致性将通过日志重放（这和崩溃恢复期间发生的并无显著不同）来修正。因此我们不需要文件系统快照功能，只需要<application>tar</>或一个类似的归档工具。
    </para>
   </listitem>
   <listitem>
    <para>
     由于我们可以结合一个无穷长的WAL文件序列用于重放，可以通过简单地归档WAL文件来达到连续备份。这对于大型数据库特别有用，因为在其中不方便频繁地进行完全备份。
    </para>
   </listitem>
   <listitem>
    <para>
     并不需要一直重放WAL项一直到最后。我们可以在任何点停止重放，并得到一个数据库在当时的一致快照。这样，该技术支持<firstterm>时间点恢复</>：在得到你的基础备份以后，可以将数据库恢复到它在其后任何时间的状态。
    </para>
   </listitem>
   <listitem>
    <para>
     如果我们连续地将一系列WAL文件输送给另一台已经载入了相同基础备份文件的机器，我们就得到了一个<firstterm>热备份</>系统：在任何时间点我们都能提出第二台机器，它差不多是数据库的当前副本。
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <note>
   <para>
    <application>pg_dump</application>和<application>pg_dumpall</application>不会产生文件系统级别的备份，并且不能用于连续归档方案。这类转储是<emphasis>逻辑</>的并且不包含足够的信息用于WAL重放。
   </para>
  </note>

  <para>
   就简单的文件系统备份技术来说，这种方法只能支持整个数据库集簇的恢复，却无法支持其中一个子集的恢复。另外，它需要大量的归档存储：一个基础备份的体积可能很庞大，并且一个繁忙的系统将会产生大量需要被归档的WAL流量。尽管如此，在很多需要高可靠性的情况下，它是首选的备份技术。
  </para>

  <para>
   要使用连续归档（也被很多数据库厂商称为<quote>在线备份</>）成功地恢复，你需要一个从基础备份时间开始的连续的归档WAL文件序列。为了开始，在你建立第一个基础备份<emphasis>之前</>，你应该建立并测试用于归档WAL文件的过程。对应地，我们首先讨论归档WAL文件的机制。
  </para>

  <sect2 id="backup-archiving-wal">
   <title>建立WAL归档</title>

   <para>
    抽象地来说，一个运行中的<productname>PostgreSQL</>系统产生一个无穷长的WAL记录序列。系统从物理上将这个序列划分成WAL <firstterm>段文件</>，通常是每个16MB（段尺寸在构建<productname>PostgreSQL</>时可修改）。段文件会被分配一个数字名称以便反映它在整个抽象WAL序列中的位置。在没有使用WAL归档时，系统通常只创建少量段文件，并且通过重命名不再使用的段文件为更高的段编号来<quote>回收</>它们。系统假设内容位于最后一个检查点之前的段文件是无用的且可以被回收。
   </para>

   <para>
    在归档WAL数据时，我们需要在每一段被填充满时捕捉其内容，并且在段文件被回收重用之前保存该数据。依靠应用和可用的硬件，有很多不同的方法来<quote>保存数据</>：我们可以将段文件拷贝到一个已挂载的位于另一台机器上的NFS目录，或者将它们写出到一个磁带驱动器（确保你有办法标识每个文件的原始文件名），或者将它们批量烧录到CD上，或者其他什么方法。为了向数据库管理员提供灵活性，<productname>PostgreSQL</>不对如何归档做任何假设。取而代之的是，<productname>PostgreSQL</>让管理员声明一个shell命令来拷贝一个完整的段文件到它需要去的地方。 该命令可以简单得就是一个<literal>cp</>，或者它可以调用一个复杂的 shell 脚本 &mdash; 所有都由你决定。
   </para>

   <para>
    要启用WAL归档，需设置<xref linkend="guc-wal-level">配置参数为<literal>archive</>或更高，设置<xref linkend="guc-archive-mode">为<literal>on</>，并且使用<xref linkend="guc-archive-command">配置参数指定一个shell命令。实际上，这些设置总是被放置在<filename>postgresql.conf</filename>文件中。在<varname>archive_command</>中，<literal>%p</>会被将要归档的文件路径所替代，而<literal>%f</>只会被文件名所替代（路径名是相对于当前工作目录而言的，即集簇的数据目录）。如果你需要在命令中嵌入一个真正的<literal>%</>字符，可以使用<literal>%%</>。最简单的命令类似于：
<programlisting>
archive_command = 'test ! -f /mnt/server/archivedir/%f &amp;&amp; cp %p /mnt/server/archivedir/%f'  # Unix
archive_command = 'copy "%p" "C:\\server\\archivedir\\%f"'  # Windows
</programlisting>
    它将把 WAL 段拷贝到目录<filename>/mnt/server/archivedir</>（这个只是一个例子，并非我们建议的方法，可能不能在所有系统上都正确运行）。在<literal>%p</>和<literal>%f</>参数被替换之后，实际被执行的命令看起来可能是：
<programlisting>
test ! -f /mnt/server/archivedir/00000001000000A900000065 &amp;&amp; cp pg_xlog/00000001000000A900000065 /mnt/server/archivedir/00000001000000A900000065
</programlisting>
    对每一个将要被归档的新文件都会生成一个类似的命令。
   </para>

   <para>
    归档命令将在运行<productname>PostgreSQL</>服务器的同一个用户的权限下执行。因为被归档的一系列WAL 文件实际上包含你的数据库里的所有东西，所以你应该确保自己的归档数据不会被别人窥探； 比如，归档到一个没有组或者全局读权限的目录里。
   </para>

   <para>
    有一点很重要：当且仅当归档命令成功时，它才返回零退出。在得到一个零值结果之后，<productname>PostgreSQL</>将假设该文件已经成功归档， 因此它稍后将被删除或者被新的数据覆盖。但是，一个非零值告诉<productname>PostgreSQL</>该文件没有被归档； 因此它会周期性的重试直到成功。
   </para>

   <para>
    归档命令通常应该被设计成拒绝覆盖已经存在的归档文件。这是一个非常重要的安全特性， 可以在管理员操作失误（比如把两个不同的服务器的输出发送到同一个归档目录）的时候保持你的归档的完整性。
   </para>

   <para>
    我们建议你首先要测试你准备使用到归档命令，以保证它实际上不会覆盖现有的文件， <emphasis>并且在这种情况下它返回非零状态</>。以上Unix中的命令例子通过包含一个独立的<command>test</>步骤来保证这一点。在某些Unix平台上，<command>cp</>具有诸如<option>-i</>的开关，可用来更简洁地完成这一切，但是在没有验证返回的退出状态正确之前你不能依赖它们（特别地，GNU的<command>cp</>在使用<option>-i</>时将对已存在的目标文件返回状态零，这并<emphasis>不</>是我们所期望的行为）。
   </para>

   <para>
    在设计你的归档环境时，请考虑一下如果归档命令不停失败会发生什么情况， 因为有些情况要求操作者的干涉，或者是归档空间不够了。 例如，如果你往磁带机上写，但是没有自动换带机，那么就有可能发生这种情况； 如果磁带满了，除非换磁带，否则任何事也做不了。 你应该确保任何错误情况或者任何要求操作员干涉的情况都会被正确报告， 这样才能迅速解决这些问题。否则<filename>pg_xlog/</>目录会不停地被WAL段文件填充， 直到问题解决（如果包含<filename>pg_xlog/</>的文件系统被填满，<productname>PostgreSQL</>将会做一次致命关闭。不会有未提交事务被丢失，但是数据库将会保持离线直到你释放一部分空间）。
   </para>

   <para>
    归档命令的速度并不要紧，只要它能跟上你的服务器生成 WAL 数据的平均速度即可。即使归档进程稍微落后，正常的操作也会继续进行。 如果归档进程慢很多，就会增加灾难发生的时候丢失的数据量。这同时也意味着<filename>pg_xlog/</>目录包含大量未归档的段文件， 并且可能最后超出了可用磁盘空间。我们建议你监控归档进程，确保它是按照你的期望运转的。
   </para>

   <para>
    在写自己的归档命令的时候，你应该假设被归档的文件名最长为64个字符并且可以包含 ASCII 字母、数字以及点的任意组合。 我们不需要保持原始的相对路径（<literal>%p</>），但是有必要保持文件名（<literal>%f</>）。
   </para>

   <para>
    请注意尽管 WAL 归档允许你恢复任何对你的<productname>PostgreSQL</>数据库中数据所做的修改， 但它不会恢复对配置文件的修改（即postgresql.conf、pg_hba.conf 和 pg_ident.conf），因为这些文件都是手工编辑的，而不是通过 SQL 操作来编辑的。 所以你可能会需要把你的配置文件放在一个日常文件系统备份过程可处理的位置。如何重定位配置文件请参阅<xref linkend="runtime-config-file-locations">。
   </para>

   <para>
    归档命令只会为完成的WAL段调用。因此如果你的服务器产生了一点点WAL流量（或者在产生时有宽松的周期），从一个事务完成到它被安全地记录在归档存储中之间将会有较长的延迟。要为未归档数据设置一个年龄限制，你可以设置<xref linkend="guc-archive-timeout">来强制要求服务器按照其设定的频度切换到一个新的WAL段。注意由于强制切换而被归档的文件还是具有和完全归档的文件相同的长度。因此设置一个很短的<varname>archive_timeout</>是很不明智的 &mdash; 它会膨胀你的归档存储。将<varname>archive_timeout</>设置为1分钟左右通常是合理的。
   </para>

   <para>
    同样，如果你希望确保一个刚刚完成的事务能被尽快归档，可以使用<function>pg_switch_xlog</>进行一次手动段切换。其他与WAL管理相关的使用函数在<xref linkend="functions-admin-backup-table">中列出。
   </para>

   <para>
    如<xref linkend="populate-pitr">所述，当<varname>wal_level</>为<literal>minimal</>时，一些SQL命令被优化为避免记录WAL日志。在这些语句的其中之一的执行过程中如果打开了归档或流复制，WAL中将不会包含足够的信息用于归档恢（崩溃恢复不受影响）。出于这个原因，<varname>wal_level</>只能在服务器启动时修改。但是，<varname>archive_command</>可以通过重载配置文件来修改。如果你希望暂时停止归档，一种方式是将<varname>archive_command</>设置为空串（<literal>''</>）。这将导致WAL文件积累在<filename>pg_xlog/</>中，直到一个可用的<varname>archive_command</>被重新建立。
   </para>
  </sect2>

  <sect2 id="backup-base-backup">
   <title> 制作一个基础备份</title>

   <para>
    执行一次基础备份最简单的方法是使用<xref linkend="app-pgbasebackup">工具。它将会以普通文件或一个tar归档的方式创建一个基础备份。如果需要比<xref linkend="app-pgbasebackup">更高的灵活性，你也可以使用低级API（见<xref linkend="backup-lowlevel-base-backup">）来制作一个基础备份。
   </para>

   <para>
    没有必要关心创建一个基础备份所需的时间。但是，如果你正常地运行停用了<varname>full_page_writes</>的服务器，你可能会注意到备份运行时的性能下降，因为<varname>full_page_writes</>在备份模式期间会被实际强制实施。
   </para>

   <para>
    要使用备份，你将需要保留所有在文件系统备份期间及之后生成的WAL段文件。为了便于你做这些，基础备份过程会创建一个<firstterm>备份历史文件</>，它将被立刻存储到WAL归档区域。该文件以文件系统备份中你需要的第一个WAL段文件命名。例如，如果开始的WAL文件是<literal>0000000100001234000055CD</>，则备份历史文件将被命名为<literal>0000000100001234000055CD.007C9330.backup</>.（文件名的第二部分表明WAL文件中的一个准确位置，一般可以被忽略）。一旦你已经安全地归档了文件系统备份和在备份过程中被使用的WAL段文件（如备份历史文件中所指定的） ，所有名字在数字上低于备份历史文件中记录值的已归档WAL段对于恢复文件系统备份就不再需要了，并且可以被删除。但是你应该考虑保持多个备份集以绝对保证你能恢复你的数据。
   </para>

   <para>
    备份历史文件是一个很小的文本文件。它包含你指定给<xref linkend="app-pgbasebackup">的标签字符串，以及备份的起止时间以及起止WAL段。如果你使用该标签来标识相关转储文件，则已归档的历史文件足以说明需要哪个转储文件进行恢复。
   </para>

   <para>
    由于你不得不保存最后一次基础备份之后的所有归档WAL文件，基础备份之间的间隔通常应该根据你希望在归档WAL文件上花费的存储空间来设定。你也应该考虑你准备花多长时间来进行恢复，如果需要恢复 &mdash; 系统将不得不重放所有那些WAL段，如果这些WAL段覆盖了最后一次基础备份以后的很长时间，重放过程将会花费一些时间。
   </para>
  </sect2>

  <sect2 id="backup-lowlevel-base-backup">
   <title>使用低级API制作一个基础备份</title>
   <para>
    使用低级API制作一个基础备份的过程比<xref linkend="app-pgbasebackup">方法要包含更多的步骤，但相对要更简单。很重要的一点是，这些步骤要按照顺序执行，并且在执行下一步之前要验证上一步是否成功。
  <orderedlist>
   <listitem>
    <para>
     确保WAL归档被启用且正在工作。
    </para>
   </listitem>
   <listitem>
    <para>
     作为超级用户连接到数据库并发出以下命令：
<programlisting>
SELECT pg_start_backup('label');
</programlisting>
      这里<literal>label</>是任何你希望用来唯一标识这个备份操作的字符串
      （一个好的习惯是使用你将要放置备份转储文件的完整路径）。
      <function>pg_start_backup</>在集簇目录中创建一个关于备份信息的
      <firstterm>备份标签</>文件，也被称为<filename>backup_label</>，
      其中包括了开始时间和标签字符串。
      该函数还在集簇目录中创建一个名为<filename>tablespace_map</>的<firstterm>表空间映射</>文件，
      记录<filename>pg_tblspc/</>中的表空间符号链接信息，如果存在一个或多个这样的链接的话。
      如果你需要从备份中恢复，这两个文件对备份的完整性是至关重要的，
    </para>

    <para>
     你连接集簇中的哪一个数据库来发出该命令并不重要。你可以忽略函数返回的结果，但是如果它报告一个错误，请在继续之前处理好。
    </para>

    <para>
     默认情况下，<function>pg_start_backup</>会花费很长时间来完成。这是因为它会执行一个检查点，而检查点所需要的I/O在相当一段时间内将会被传播，默认情况下这段时间是内部检查点间隔的一半（参见配置参数<xref linkend="guc-checkpoint-completion-target">）。这通常是你所希望的，因为它能将对查询处理的影响最小化。如果你要尽快开始备份，可使用：
<programlisting>
SELECT pg_start_backup('label', true);
</programlisting>
     这会使检查点尽可能快地被完成。
    </para>
   </listitem>
   <listitem>
    <para>
     使用任何方便的文件系统备份工具执行备份，例如<application>tar</>或<application>cpio</>（不是<application>pg_dump</application>或<application>pg_dumpall</application>）。在此期间，不需要也不值得停止正常的数据库操作。
    </para>
   </listitem>
   <listitem>
    <para>
     再次作为一个超级用户连接到数据库，并且发出以下命令：
<programlisting>
SELECT pg_stop_backup();
</programlisting>
     这将终止备份模式，并且执行一个自动切换到下一个WAL段。进行切换的原因是将在备份期间生成的最新WAL段文件安排为可归档。
    </para>
   </listitem>
   <listitem>
    <para>
     一旦备份期间活动的WAL段文件被归档，你的工作就完成了。<function>pg_stop_backup</>的结果所标识的文件是构成一个完整备份文件组所需的最新段。如果<varname>archive_mode</>被启用，直到最新段被归档<function>pg_stop_backup</>都不会返回。由于你已经配置了<varname>archive_command</>，这些文件的归档过程会自动发生。在大部分情况下这会很快发生，但还是建议你监控你的归档系统来确保不会有延迟。如果归档处理由于归档命令的错误而延迟，它会保持重试直到归档成功和备份完成。如果你希望在<function>pg_stop_backup</>的执行上设置一个时间限制，可对<varname>statement_timeout</varname>设置一个合适的值。
    </para>
   </listitem>
  </orderedlist>
   </para>

   <para>
    如果被拷贝的文件在拷贝过程中发生变化，某些文件系统备份工具会发出警告或错误。在建立一个活动数据库的基础备份时，这种情况是正常的，并非一个错误。然而，你需要确保你能够把它们和真正的错误区分开。例如，某些版本的<application>rsync</>为<quote>消失的源文件</>返回一个独立的退出码，且你可以编写一个驱动脚本来将该退出码接受为一种非错误情况。同样，如果一个文件在被<application>tar</>复制的过程中被截断，某些版本的GNU <application>tar</>会返回一个与致命错误无法区分的错误代码。幸运的是，如果一个文件在备份期间被改变，版本为1.16及其后的GNU <application>tar</>将会退出并返回1，而对于其他错误返回2。在版本1.23及其后的GNU <application>tar</>中，你可以使用警告选项<literal>--warning=no-file-changed
    --warning=no-file-removed</literal>来隐藏相关的警告消息。
   </para>

   <para>
    确认你的备份转储包含数据库集簇目录（例如<filename>/usr/local/pgsql/data</>）下的所有文件。如果你使用了不在此目录下的表空间，注意也把它们包括在内（并且确保你的备份转储将符号链接归档为链接，否则恢复过程将破坏你的表空间）。
   </para>

   <para>
    不过，你可以从备份转储中忽略集簇的<filename>pg_xlog/</>子目录中的文件。这种微小的调整是值得的，因为它降低了恢复时的错误风险。如果<filename>pg_xlog/</>是一个指向位于集簇目录之外其他地方的符号链接就很容易安排了，这是一种出于性能原因的常见设置。你可能也希望排除<filename>postmaster.pid</>和<filename>postmaster.opts</>，它们记录了关于<application>postmaster</>运行的信息，但与最终使用这个备份的<application>postmaster</>无关（这些文件可能会使<application>pg_ctl</>搞混淆）。
   </para>

   <para>
    从备份转储中忽略集簇的<filename>pg_replslot/</>子目录中的文件通常也是个好主意，这样
    主控机上存在的复制槽不会成为备份的一部分。否则，后续用该备份创建一个后备机可能会导致该
    后备机上的WAL文件被无限期保留，并且在启用了热后备反馈的情况下可能导致主控机膨胀，因为使用
    那些复制槽的客户端将继续连接到主控机（而不是后备机）并且继续更新其上的槽。即使该备份是要被
    用来创建一个新的主控机，拷贝复制槽也不是特别有用，因为这些槽的内容在新主控机上线时很可能已
    经过时。
   </para>

   <para>
   还值得注意的是<function>pg_start_backup</>函数在数据库集簇目录中创建
   一个名为<filename>backup_label</>和<filename>tablespace_map</>的文件，
   它会被<function>pg_stop_backup</>移除。
   这个文件当然会被作为你的备份转储文件的一部分归档。
   备份标签文件包含你指定给<function>pg_start_backup</>的标签字符串，
   以及<function>pg_start_backup</>被运行的时刻和起始WAL文件的名字。
   在发生混乱的情况下就可以在备份转储文件中
   查看并准确地决定该转储文件来自于哪个备份会话。
   该表空间映射文件包含符号链接名字，它存在于目录<filename>pg_tblspc/</>中以及
   每个符号链接的完整路径中。
   不过，该文件并不是仅仅为了给你信息，
   它的存在和内容对于系统恢复过程的正确操作是至关重要。
   </para>

   <para>
    在服务器停止时也可以创建一个备份归档。在这种情况下，你显然不能使用<function>pg_start_backup</>或<function>pg_stop_backup</>，并且因此你只能依靠你的自己的策略来跟踪哪个备份转储是哪个，以及相关WAL文件应该回到什么程度。通常最好遵循上面的连续归档过程。
   </para>
  </sect2>

  <sect2 id="backup-pitr-recovery">
   <title>使用一个连续归档备份进行恢复</title>

   <para>
    好，现在最坏的情况发生了，你需要从你的备份进行恢复。这里是其过程：
  <orderedlist>
   <listitem>
    <para>
     如果服务器仍在运行，停止它。
    </para>
   </listitem>
   <listitem>
    <para>
     如果你具有足够的空间，将整个集簇数据目录和表空间复制到一个临时位置，稍后你将用到它们。注意这种预防措施将要求在你的系统上有足够的空闲空间来保留现有数据库的两个拷贝。如果你没有足够的空间，你至少要保存集簇的<filename>pg_xlog</>子目录的内容，因为它可能包含在系统垮掉之前还未被归档的日志。
    </para>
   </listitem>
   <listitem>
    <para>
     移除所有位于集簇数据目录和正在使用的表空间根目录下的文件和子目录。
    </para>
   </listitem>
   <listitem>
    <para>
     从你的文件系统备份中恢复数据库文件。注意它们要使用正确的所有权恢复（数据库系统用户，不是<literal>root</>！）并且使用正确的权限。如果你在使用表空间，你应该验证<filename>pg_tblspc/</>中的符号链接被正确地恢复。
    </para>
   </listitem>
   <listitem>
    <para>
     移除<filename>pg_xlog/</>中的任何文件，这些是来自于文件系统备份而不是当前日志，因此可以被忽略。如果你根本没有归档<filename>pg_xlog/</>，那么以正确的权限重建它。注意如果以前它是一个符号链接，请确保你也以同样的方式重建它。
    </para>
   </listitem>
   <listitem>
    <para>
     如果你有在第2步中保存的未归档WAL段文件，把它们拷贝到<filename>pg_xlog/</>（最好是拷贝而不是移动它们，这样如果在开始恢复后出现问题你任然有未修改的文件）。
    </para>
   </listitem>
   <listitem>
    <para>
     在集簇数据目录中创建一个恢复命令文件<filename>recovery.conf</>（见<xref linkend="recovery-config">）。你可能还想临时修改<filename>pg_hba.conf</>来阻止普通用户在成功恢复之前连接。
    </para>
   </listitem>
   <listitem>
    <para>
     启动服务器。服务器将会进入到恢复模式并且进而根据需要读取归档WAL文件。恢复可能因为一个外部错误而被终止，可以简单地重新启动服务器，这样它将继续恢复。恢复过程结束后，服务器将把<filename>recovery.conf</>重命名为<filename>recovery.done</>（为了阻止以后意外地重新进入恢复模式），并且开始正常数据库操作。
    </para>
   </listitem>
   <listitem>
    <para>
     检查数据库的内容来确保你已经恢复到了期望的状态。如果没有，返回到第1步。如果一切正常，通过恢复<filename>pg_hba.conf</>为正常来允许用户连接。
    </para>
   </listitem>
  </orderedlist>
   </para>

   <para>
    所有这些的关键部分是设置一个恢复配置文件，它描述你希望如何恢复以及恢复要运行到什么程度。你可以使用<filename>recovery.conf.sample</>（通常在安装的<filename>share/</>目录中）作为一个原型。你绝对必须在<filename>recovery.conf</>中指定的是<varname>restore_command</>，它告诉<productname>PostgreSQL</>如何获取归档WAL文件段。与<varname>archive_command</>相似，这也是一个shell命令字符串。它可以包含<literal>%f</>（将被期望的日志文件名替换）和<literal>%p</>（将被日志文件被拷贝的目标路径名替换）。（路径名是相对于当前工作目录的，即集簇的数据目录）。如果你需要在命令中嵌入一个真正的<literal>%</>字符，可以写成<literal>%%</>。最简单的命令类似于：
<programlisting>
restore_command = 'cp /mnt/server/archivedir/%f %p'
</programlisting>
    它将从目录<filename>/mnt/server/archivedir</>中拷贝之前归档的WAL段。当然，你可以使用更复杂的，甚至是一个要求操作者装载合适磁带的shell脚本。
   </para>

   <para>
    重要的是命令在失败时返回非零退出状态。该命令<emphasis>将</>被调用来请求不在归档中的文件，
    在这种情况下它应该返回非零值。这不是一种错误情况。一种例外是该命令被一个信号（除了被用作数
    据库服务器关闭动作一部分的<systemitem>SIGTERM</systemitem>）终止或者被shell的错误
    （例如命令未找到）终止，那样恢复将中止并且服务器将不会启动。
   </para>

   <para>
    并非所有被请求的文件都是WAL段文件，你也许还会请求一些具有<literal>.backup</>或
    <literal>.history</>后缀的文件。还要注意的是，<literal>%p</>路径的基本名字将会和<literal>%f</>
    不同，但不要期望它们可以互换。
   </para>

   <para>
    归档中找不到的WAL段可以在<filename>pg_xlog/</>中看到，这使得可以使用最近未归档的段。但是，在归档中可用的段将会被优先于<filename>pg_xlog/</>中的文件被使用。
   </para>

   <para>
    通常，恢复将会处理完所有可用的WAL段，从而将数据库恢复到当前时间点（或者尽可能接近给定的可
    用WAL段）。因此，一个正常的恢复将会以一个<quote>文件未找到</>消息结束，错误消息的准确文
    本取决于你选择的<varname>restore_command</>。你也可能在恢复的开始看到一个针对名称类
    似于<filename>00000001.history</>文件的错误消息。这也是正常的并且不表示在简单恢复情
    况中的问题，对此的讨论见<xref linkend="backup-timelines">。
   </para>

   <para>
    如果你希望恢复到之前的某个时间点（例如，恢复到幼稚的DBA丢弃了你主要的交易表之前），只需要
    在<filename>recovery.conf</>中指定要求的<link linkend="recovery-target-settings">停止点</link>。你可以使用日期/时间、命名恢复点或一个
    指定事务ID的结束时间来定义停止点（也被称为<quote>恢复目标</>）。在这种写法中，只有日期/时
    间和命名恢复点选项非常有用，因为没有工具可以帮助你准确地确定要用哪个事务ID。
   </para>

   <note>
     <para>
      停止点必须位于基础备份的完成时间之后，即<function>pg_stop_backup</>的完成时间。在备份过程中你不能使用基础备份来恢复（要恢复到这个时间，你必须回到你之前的基础备份并且从这里开始前滚）。
     </para>
   </note>

   <para>
    如果恢复找到被破坏的WAL数据，恢复将会停止于该点并且服务器不会启动。在这种情况下，恢复进程需要从开头重新开始运行，并指定一个在损坏点之前的<quote>恢复目标</>以便恢复能够正常完成。如果恢复由于一个外部原因失败，例如一个系统崩溃或者WAL归档变为不可访问，则该次恢复可以被简单地重启并且它将会从几乎是上次失败的地方继续。恢复重启工作起来很像普通操作时的检查点：服务器周期性地强制把它的所有状态写到磁盘中，然后更新<filename>pg_control</>文件来说明已经处理过的WAL数据，这样它们就不会被再次扫描。
   </para>

  </sect2>

  <sect2 id="backup-timelines">
   <title>时间线</title>

  <indexterm zone="backup">
   <primary>timelines</primary>
  </indexterm>

   <para>
    将数据库恢复到一个之前的时间点的能力带来了一些复杂性，这和有关时间旅行和平行宇宙的科幻小说有些相似。例如，在数据库的最初历史中，假设你在周二晚上5：15时丢弃了一个关键表，但是一直到周三中午才意识到你的错误。不用苦恼，你取出你的备份，恢复到周二晚上5：14的时间点，并上线运行。在数据库宇宙的<emphasis>这个</>历史中，你从没有丢弃该表。但是假设你后来意识到这并非一个好主意，并且想回到最初历史中周三早上的某个时间。你没法这样做，在你的数据库在线运行期间，它重写了某些WAL段文件，而这些文件本来可以将你引向你希望回到的时间。因此，为了避免出现这种状况，你需要将完成时间点恢复后生成的WAL记录序列与初始数据库历史中产生的WAL记录序列区分开来。
   </para>

   <para>
    要解决这个问题，<productname>PostgreSQL</>有一个<firstterm>时间线</>概念。无论何时当一次归档恢复完成，一个新的时间线被创建来标识恢复之后生成的WAL记录序列。时间线ID号是WAL段文件名的一部分，因此一个新的时间线不会重写由之前的时间线生成的WAL数据。实际上可以归档很多不同的时间线。虽然这可能看起来是一个无用的特性，但是它常常扮演救命稻草的角色。考虑到你不太确定需要恢复到哪个时间点的情况，你可能不得不做多次时间点恢复尝试和错误，直到最终找到从旧历史中分支出去的最佳位置。如果没有时间线，该处理将会很快生成一堆不可管理的混乱。而有了时间线，你可以恢复到<emphasis>任何</>之前的状态，包括早先被你放弃的时间线分支中的状态。
   </para>

   <para>
    每次当一个新的时间线被创建，<productname>PostgreSQL</>会创建一个<quote>时间线历史</>文件，它显示了新时间线是什么时候从哪个时间线分支出来的。系统在从一个包含多个时间线的归档中恢复时，这些历史文件对于允许系统选取正确的WAL段文件非常必要。因此，和WAL段文件相似，它们也要被归档到WAL归档区域。历史文件是很小的文本文件，因此将它们无限期地保存起来的代价很小，而且也是很合适的（而段文件都很大）。如果你喜欢，你可以在一个历史文件中增加注释来记录如何和为什么要创建该时间线。当你由于试验的结果拥有了一大堆错综复杂的不同时间线时，这种注释将会特别有价值。
   </para>

   <para>
    恢复的默认行为是沿着相同的时间线进行恢复，该时间线是基础备份创建时的当前时间线。如果你希望恢复到某个子女时间线（即，你希望回到在一次恢复尝试后产生的某个状态），你需要在<filename>recovery.conf</>中指定目标时间线ID。你不能恢复到早于该基础备份之前分支出去的时间线。
   </para>
  </sect2>

  <sect2 id="backup-tips">
   <title>建议和例子</title>

   <para>
    这里将给出一些配置连续归档的建议。
   </para>

    <sect3 id="backup-standalone">
     <title>单机热备份</title>

     <para>
      可以使用<productname>PostgreSQL</>的备份功能来产生单机热备份。这些备份不能被用于时间点恢复，然而备份和恢复时要比使用<application>pg_dump</>转储更快（它们也比<application>pg_dump</>转储更大，所以在某些情况下速度优势可能会被否定）。
     </para>

     <para>
      在基础备份的帮助下，产生一个单机热备份最简单的方式是使用<xref linkend="app-pgbasebackup">工具。如果你在调用它时使用了<literal>-X</>参数，使用该备份所需的所有事务日志将会被自动包含在该备份中，并且恢复该备份也不需要特殊的动作。
     </para>

     <para>
      如果在复制备份文件时需要更多灵活性，也可以使用一个较低层的处理来创建单机热备份。要为低层
      单机热备份做准备，将<varname>wal_level</>设置为<literal>archive</>或更高，
      <varname>archive_mode</>设置为<literal>on</>，并且设置一个<varname>archive_command</>，该命令只当一个<emphasis>开关文件</>存在时执行归档。例如：
<programlisting>
archive_command = 'test ! -f /var/lib/pgsql/backup_in_progress || (test ! -f /var/lib/pgsql/archive/%f &amp;&amp; cp %p /var/lib/pgsql/archive/%f)'
</programlisting>
      该命令在<filename>/var/lib/pgsql/backup_in_progress</>存在时执行归档，否则会安静地返回0值退出状态（让<productname>PostgreSQL</>能回收不需要的WAL文件）。
     </para>

     <para>
      通过这样的准备，可以使用一个如下所示的脚本来建立备份：
<programlisting>
touch /var/lib/pgsql/backup_in_progress
psql -c "select pg_start_backup('hot_backup');"
tar -cf /var/lib/pgsql/backup.tar /var/lib/pgsql/data/
psql -c "select pg_stop_backup();"
rm /var/lib/pgsql/backup_in_progress
tar -rf /var/lib/pgsql/backup.tar /var/lib/pgsql/archive/
</programlisting>
      开关文件<filename>/var/lib/pgsql/backup_in_progress</>首先被创建，这使对于未完成WAL文件的归档操作发生。备份完成之后开关文件会被删除。归档的WAL文件则被加入到备份中，这样基础备份和所有需要的WAL文件都是同一个<application>tar</>文件的组成部分。请记住在你的备份脚本中加入错误处理。
     </para>

    </sect3>

    <sect3 id="compressed-archive-logs">
     <title>压缩的归档日志</title>

     <para>
      如果担心归档存储的尺寸，你可以使用<application>gzip</application>来压缩归档文件：
<programlisting>
archive_command = 'gzip &lt; %p &gt; /var/lib/pgsql/archive/%f'
</programlisting>
      那么在恢复时你将需要使用<application>gunzip</>：
<programlisting>
restore_command = 'gunzip &lt; /mnt/server/archivedir/%f &gt; %p'
</programlisting>
     </para>
    </sect3>

    <sect3 id="backup-scripts">
     <title><varname>archive_command</varname>脚本</title>

     <para>
      很多人选择使用脚本来定义他们的<varname>archive_command</varname>，这样他们的<filename>postgresql.conf</>项看起来非常简单：
<programlisting>
archive_command = 'local_backup_script.sh "%p" "%f"'
</programlisting>
      任何时候如果你希望在归档处理中使用多个命令，明智的方法是使用一个独立的脚本文件。这可以使脚本更为复杂，它可以使用一种流行的脚本语言来编写，例如<application>bash</> 或<application>perl</>。
     </para>

     <para>
      需要在一个脚本内解决的需求例子包括：
      <itemizedlist>
       <listitem>
        <para>
         将数据拷贝到安全的场外数据存储
        </para>
       </listitem>
       <listitem>
        <para>
         批处理WAL文件，这样它们可以每三小时被传输一次，而不是一次一个
        </para>
       </listitem>
       <listitem>
        <para>
         与其他备份和恢复软件交互
        </para>
       </listitem>
       <listitem>
        <para>
         与监控软件交互以报告错误
        </para>
       </listitem>
      </itemizedlist>
     </para>

     <tip>
      <para>
       在使用一个<varname>archive_command</varname>脚本时，最好启用<xref linkend="guc-logging-collector">。任何从该脚本被写到<systemitem>stderr</>的消息将出现在数据库服务器日志中，这允许在复杂配置失败后能更容易被诊断。
      </para>
     </tip>
    </sect3>
  </sect2>

  <sect2 id="continuous-archiving-caveats">
   <title>警告</title>

   <para>
    在编写此文档时，连续归档技术存在一些限制。这可能会在未来的发布中被修复：

  <itemizedlist>
   <listitem>
    <para>
     哈希索引上的操作目前不被WAL记录，因此重放不会更新这些索引。这将意味着任何新的插入都会被索引忽略，被更新的行显然会消失而被删除的行将仍然保留有指针。换句话说，如果你修改了一个具有哈希索引的表，那么你将在一个后备服务器上得到不正确的查询结果。当恢复结束时，推荐你手工<xref linkend="sql-reindex">每一个这样的索引。
    </para>
   </listitem>

   <listitem>
    <para>
     如果一个<xref linkend="sql-createdatabase">命令在基础备份时被执行，然后在基础备份进行时<command>CREATE DATABASE</>所复制的模板数据库被修改，恢复中可能会导致这些修改也被传播到已创建的数据库中。这当然是我们不希望的。为了避免这种风险，最好不要在创建基础备份时修改任何模板数据库。
    </para>
   </listitem>

   <listitem>
    <para>
     <xref linkend="sql-createtablespace">命令会WAL以其字面绝对路径记录，并且因此将在重放时以相同的绝对路径来创建表空间。当日志在一台不同的机器上被重放时，这可能也不是我们希望的。即使日志在同一台机器上被重放也是危险的，就算是恢复到一个新的数据目录重放过程也会覆盖原来表空间的内容。为了避免这种潜在的陷阱，最佳做法是在创建或丢弃表空间后创建一个新的基础备份。
    </para>
   </listitem>
  </itemizedlist>
   </para>

   <para>
    还需要注意的是，默认的<acronym>WAL</acronym>格式相当庞大，因为它包括了很多磁盘页快照。这些页快照被设计用于支持崩溃恢复，因为我们可能需要修复断裂的磁盘页。依靠你的系统硬件和软件，页断裂的风险可能会小到可以忽略，在此种情况下你可以通过使用<xref linkend="guc-full-page-writes">参数关闭页快照来显著降低归档日志的总容量（在这样做之前阅读<xref linkend="wal">中的注解和警告）。关闭页快照并不会阻止使用日志进行PITR操作。一个未来的开发点是通过移除不需要的页拷贝来压缩归档的WAL数据，即使<varname>full_page_writes</>为on。同时，管理员可能希望通过尽可能增大检查点间隔参数来减少WAL中包含的页快照数量。
   </para>
  </sect2>
 </sect1>

</chapter>

<!-- doc/src/sgml/storage.sgml -->

<chapter id="storage">

<title>数据库物理存储</title>

<para>
本章对<productname>PostgreSQL</productname>数据库使用的物理存储格式进行一个概述。
</para>

<sect1 id="storage-file-layout">

<title>数据库文件布局</title>

<para>
本节在文件和目录的层次上描述存储格式。
</para>

<para>
在传统上，数据库集簇所使用的配置和数据文件都被一起存储在集簇的数据目录里， 通常用<varname>PGDATA</>来引用（用的是可以定义它的环境变量的名字）。<varname>PGDATA</>的一个常见位置是 <filename>/var/lib/pgsql/data</>。由不同数据库实例所管理的多个集簇可以在同一台机器上共存。
</para>

<para>
<varname>PGDATA</>目录包含几个子目录以及一些控制文件， 如<xref linkend="pgdata-contents-table">所示。除了这些必要的东西之外，集簇的配置文件<filename>postgresql.conf</filename>、<filename>pg_hba.conf</filename>和<filename>pg_ident.conf</filename>通常都存储在<varname>PGDATA</>中，不过可以把它们放在别的地方。
</para>

<table tocentry="1" id="pgdata-contents-table">
<title><varname>PGDATA</>的内容</title>
<tgroup cols="2">
<thead>
<row>
<entry>
项
</entry>
<entry>描述</entry>
</row>
</thead>

<tbody>

<row>
 <entry><filename>PG_VERSION</></entry>
 <entry>一个包含<productname>PostgreSQL</productname>主版本号的文件</entry>
</row>

<row>
 <entry><filename>base</></entry>
 <entry>包含每个数据库对应的子目录的子目录</entry>
</row>

<row>
 <entry><filename>global</></entry>
 <entry>包含集簇范围的表的子目录，比如<structname>pg_database</></entry>
</row>

<row>
 <entry><filename>pg_clog</></entry>
 <entry>包含事务提交状态数据的子目录</entry>
</row>

<row>
 <entry><filename>pg_dynshmem</></entry>
 <entry>包含被动态共享内存子系统所使用的文件的子目录</entry>
</row>

<row>
 <entry><filename>pg_logical</></entry>
 <entry>包含用于逻辑复制的状态数据的子目录</entry>
</row>

<row>
 <entry><filename>pg_multixact</></entry>
 <entry>包含多事务（multi-transaction）状态数据的子目录（用于共享的行锁）</entry>
</row>

<row>
 <entry><filename>pg_notify</></entry>
 <entry>包含LISTEN/NOTIFY状态数据的子目录</entry>
</row>

<row>
 <entry><filename>pg_replslot</></entry>
 <entry>包含复制槽数据的子目录</entry>
</row>

<row>
 <entry><filename>pg_serial</></entry>
 <entry>包含已提交的可序列化事务信息的子目录</entry>
</row>

<row>
 <entry><filename>pg_snapshots</></entry>
 <entry>包含导出的快照的子目录</entry>
</row>

<row>
 <entry><filename>pg_stat</></entry>
 <entry>包含用于统计子系统的永久文件的子目录</entry>
</row>

<row>
 <entry><filename>pg_stat_tmp</></entry>
 <entry>包含用于统计信息子系统的临时文件的子目录</entry>
</row>

<row>
 <entry><filename>pg_subtrans</></entry>
 <entry>包含子事务状态数据的子目录</entry>
</row>

<row>
 <entry><filename>pg_tblspc</></entry>
 <entry>包含指向表空间的符号链接的子目录</entry>
</row>

<row>
 <entry><filename>pg_twophase</></entry>
 <entry>包含用于预备事务状态文件的子目录</entry>
</row>

<row>
 <entry><filename>pg_xlog</></entry>
 <entry>包含 WAL （预写日志）文件的子目录</entry>
</row>

<row>
 <entry><filename>postgresql.auto.conf</></entry>
 <entry>一个用于存储由<command>ALTER SYSTEM</command>
 设置的配置参数的文件</entry>
</row>

<row>
 <entry><filename>postmaster.opts</></entry>
 <entry>一个记录服务器最后一次启动时使用的命令行参数的文件</entry>
</row>

<row>
 <entry><filename>postmaster.pid</></entry>
 <entry>一个锁文件，记录着当前的 postmaster 进程ID（PID）、集簇数据目录路径、postmaster启动时间戳、端口号、Unix域套接字目录路径（Windows上为空）、第一个可用的listen_address（IP地址或者<literal>*</>，或者为空表示不在TCP上监听）以及共享内存段ID（服务器关闭后该文件不存在）</entry>
</row>

</tbody>
</tgroup>
</table>

<para>
对于集簇里的每个数据库，在<varname>PGDATA</><filename>/base</>里都有一个子目录对应， 子目录的名字为该数据库在 <structname>pg_database</>里的 OID。这个子目录是该数据库文件的缺省位置；特别值得一提的是，该数据库的系统目录存储在此。
</para>

<para>
每个表和索引都存储在独立的文件里。对于普通关系，这些文件以表或索引的<firstterm>filenode</>号命名，它可以在<structname>pg_class</>.<structfield>relfilenode</>中找到。但是对于临时关系，文件名的形式为<literal>t<replaceable>BBB</>_<replaceable>FFF</></>，其中<replaceable>BBB</>是创建该文件的后台的后台ID，<replaceable>FFF</>是文件节点号。在每种情况下，在主文件（a/k/a 主分支）之外，每个表和索引有一个<firstterm>空闲空间映射</>（见<xref
linkend="storage-fsm">），它存储关系中可用空闲空间的信息。空闲空间映射存储在一个文件中，该文件以节点号加上后缀<literal>_fsm</>命名。表还有一个<firstterm>可见性映射</>，存储在一个后缀为<literal>_vm</>的分支中，它用于跟踪哪些页面已知含有非死亡元组。可见性映射将在<xref linkend="storage-vm">中进一步描述。不被日志记录的表和索引还有第三个分支，即初始化分支，它存储在后缀为<literal>_init</literal>的分支中（见<xref linkend="storage-init">）。
</para>

<caution>
<para>
请注意，虽然一个表的文件节点通常和它的 OID 相匹配，但实际上并<emphasis>不</>必须如此； 有些操作，比如 <command>TRUNCATE</>、<command>REINDEX</>、<command>CLUSTER</>以及某些形式的<command>ALTER TABLE</>，都可以改变文件节点而同时保留 OID。我们不应该假设文件节点和表 OID 相同。此外，对于包含<structname>pg_class</>本身在内的特定系统目录，其<structname>pg_class</>.<structfield>relfilenode</>包含0。这些目录的实际文件节点号被存储在一个低层数据结构中，并且可以使用<function>pg_relation_filenode()</>函数获取。
</para>
</caution>

<para>
在表或者索引超过 1GB 之后，它就被划分成1G大小的<firstterm>段</>。 第一个段的文件名和文件节点相同；随后的段被命名为 filenode.1、filenode.2等等。这样的安排避免了在某些有文件大小限制的平台上的问题（实际上，1GB只是默认的段尺寸。段尺寸可以在编译<productname>PostgreSQL</>时使用配置选项<option>--with-segsize</option>进行调整）。原则上，空闲空间映射和可见性映射分支也可以要求多个段，但实际上这很少发生。
</para>

<para>
如果一个表的列中可能存储相当大的项，那么该表就会有个与之相关联的<firstterm>TOAST</>表， 它用于存储无法保留在在表行中的域值的线外存储。如果表有<firstterm>TOAST</>表，该表的<structname>pg_class</>.<structfield>reltoastrelid</>链接到它的<acronym>TOAST</>表。 参阅<xref linkend="storage-toast">获取更多信息。
</para>

<para>
表和索引的内容在<xref linkend="storage-page-layout">中进一步讨论。
</para>

<para>
表空间的情况更复杂些。每个用户定义的表空间都在<varname>PGDATA</><filename>/pg_tblspc</>目录里面有一个符号连接，它指向物理的表空间目录（就是在<command>CREATE TABLESPACE</>命令里指定的那个目录）。这个符号连接是用表空间的 OID 命名的。在物理表空间目录中有一个名称取决于<productname>PostgreSQL</>服务器版本的子目录，例如<literal>PG_9.0_201008051</>（使用该子目录的原因是后续版本的数据库可以使用<command>CREATE TABLESPACE</>指定相同的目录位置而不会造成冲突）。在这个版本相关的子目录中，为每个在这个表空间里有元素的数据库都有一个子目录， 以数据库的OID命名。该目录里的表和索引遵循文件节点命名模式。<literal>pg_default</>不需要通过<filename>pg_tblspc</>来访问，而是对应于<varname>PGDATA</><filename>/base</>。类似地，<literal>pg_global</>表空间也不通过<filename>pg_tblspc</>访问，而是对应于<varname>PGDATA</><filename>/global</>。
</para>

<para>
<function>pg_relation_filepath()</>函数显示任何关系的完整路径（相对于<varname>PGDATA</>）。它可以作为记住上面这么多规则的替代方法。但是记住该函数只给出关系的主分支的第一个段的名称 &mdash; 你也许需要追加一个段号和/或<literal>_fsm</>、<literal>_vm</>或者<literal>_init</>来找到与该关系相关的所有文件。
</para>

<para>
临时文件（用于如排序不能放在内存中的数据等操作）被创建在<varname>PGDATA</><filename>/base/pgsql_tmp</>中，如果临时文件被指定在一个非<literal>pg_default</>表空间中则它们会被创建在该表空间的<filename>pgsql_tmp</>子目录中。临时文件的名称的形式为<filename>pgsql_tmp<replaceable>PPP</>.<replaceable>NNN</></filename>，其中<replaceable>PPP</>是其所属后端的PID，而<replaceable>NNN</>用于区别该后端的不同临时文件。
</para>

</sect1>

<sect1 id="storage-toast">

<title>TOAST</title>

    <indexterm>
     <primary>TOAST</primary>
    </indexterm>
    <indexterm><primary>切片面包</><see>TOAST</></indexterm>

<para>
本节提供<acronym>TOAST</>的概述（超尺寸属性存储技术－The Oversized-Attribute Storage Technique）。
</para>

<para>
<productname>PostgreSQL</productname>使用固定的页面尺寸（通常是8kB)，并且不允许元组跨越多个额页面。因此不可能直接存储非常大的域值。为了克服这个限制，大的域值会被压缩并/或分解成多个物理行。这些处理对用户都是透明的，只是在大部分的后端代码上有一些小的影响。这个技术的昵称是<acronym>TOAST</>（或者<quote>切片面包之后的最好的东西</>）。
</para>

<para>
只有特定的数据类型支持<acronym>TOAST</> &mdash; 我们没必要在那些不可能生成大域值的数据类型上强加这种负担。要支持<acronym>TOAST</>，数据类型必须有变长（<firstterm>varlena</>）的表现形式， 在其中任何存储值的头32位字都包含以字节记的值的总长度（包括长度本身）。<acronym>TOAST</>并不约束剩下的表现形式。所有支持可<acronym>TOAST</>数据类型的C级别的函数都必须仔细处理<acronym>TOAST</>过的输入值（通常是在对一个输入值做任何事情之前，先调用<function>PG_DETOAST_DATUM</>； 但是在某些情况下也存在更高效的方法）。
</para>

<para>
<acronym>TOAST</>占用使用变长类型的长度字的最高两个二进制位（大端法机器上的高位，小端法机器上的低位）， 这样就把任何可TOAST值的逻辑长度限制在1GB（2<superscript>30</> - 1字节）。如果两个位都是零，那么数值是该数据类型一个普通的未TOAST的值，并且长度字的剩余位给出整个数据以字节计的大小（包括长度字）。作为一种特殊情况，如果剩余的字节也都是0（它不可能时一个自包含的长度），该值是一个指向存放在独立TOAST表中的线外数据的指针（TOAST指针的大小由数据的第二个字节给定）。只有单字节头部的值也不会按照任何边界对齐。最后，如果最高位或最低位被清除而另一位被设置，则表示该数据的内容被压缩过并且在使用前必须先解压。在这种情况中长度字的剩余位指出了压缩过的数据的大小，而不是原始数据的大小。注意对于线外数据也可能存在压缩，但是变长数据的头部不会告诉我们压缩是否发生 &mdash; TOAST指针的内容将说明这个问题。
</para>

<para>
如果一个表中有任何一个列是可以<acronym>TOAST</>的， 那么该表将有一个与之关联的<acronym>TOAST</>表，其 OID 存储在表的<structname>pg_class</>.<structfield>reltoastrelid</>项中。线外的被<acronym>TOAST</>过的值保存在<acronym>TOAST</>表里，下文有更详细的描述。
</para>

<para>
这里使用的压缩技术是相当简单并且快速的 LZ 族压缩技术。更多细节请参考<filename>src/backend/utils/adt/pg_lzcompress.c</>。
</para>

<para>
线外值被分裂成（如果压缩过，在压缩之后分裂）最大为<symbol>TOAST_MAX_CHUNK_SIZE</>（默认情况下该值应选为使得四个块（chunk）行能放在一个页面中，这个数值大约为2000 字节）字节的块。每个块都作为独立的行存储在所属表的TOAST表中。每个<acronym>TOAST</>表都有列<structfield>chunk_id</>（一个表示特定的被<acronym>TOAST</>过的数据的OID）、<structfield>chunk_seq</>（一个序列号，存储该块在值中的位置）和一个<structfield>chunk_data</>（该块的实际数据）。在<structfield>chunk_id</>和<structfield>chunk_seq</>上有一个唯一索引， 提供对值的快速检索。因此，一个表示线外<acronym>TOAST</>过的值的指针数据应存储要查看的<acronym>TOAST</>表的OID以及 指定值的OID（它的<structfield>chunk_id</>）。为了方便， 指针数据还存储逻辑数据的尺寸（原始的未压缩的数据长度）以及实际存储的尺寸（如果应用了压缩，则两者不同）。 加上变长数据头部的字节，一个<acronym>TOAST</>指针数据的总尺寸是18字节，不管它代表的值的实际长度是多大。
</para>

<para>
<acronym>TOAST</>代码只有在准备向一个表中存储超过<symbol>TOAST_TUPLE_THRESHOLD</>字节（通常是2kB）的行值的时候才会触发。<acronym>TOAST</>代码将压缩和/或线外存储域值，直到行值比<symbol>TOAST_TUPLE_TARGET</>字节（通常也是2kB）短，或者无法得到更好的结果的时候才停止。在一个 UPDATE 操作过程中，未改变的域的值通常原样保存； 所以，如果 UPDATE 一个带有线外值的行时，假如线外值没有变化，那么将不会产生<acronym>TOAST</>开销。
</para>

<para>
<acronym>TOAST</>代码识别四种不同的存储可<acronym>TOAST</>列的策略：

   <itemizedlist>
    <listitem>
     <para>
      <literal>PLAIN</literal>避免压缩或者线外存储；而且它禁用变长类型的单字节头部。这是不可<acronym>TOAST</>数据类型列的唯一可能的策略。只是对那些不能TOAST的数据类型才有可能。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>EXTENDED</literal>允许压缩和线外存储。这是大多数可<acronym>TOAST</>数据类型的默认策略。 首先将尝试进行压缩，如果行仍然太大，那么则进行线外存储。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>EXTERNAL</literal>允许线外存储，但是不许压缩。使用<literal>EXTERNAL</literal>将令那些在宽<type>text</type>和 <type>bytea</type>列上的子串操作更快（代价是增加了存储空间）， 因此这些操作被优化为只抓取未压缩线外数据中需要的部分。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>MAIN</literal>允许压缩，但不允许线外存储（实际上，在这样的列上仍然会进行线外存储，但只是作为没有办法把行变得足以放入一页的情况下的最后手段）。
     </para>
    </listitem>
   </itemizedlist>

每个可<acronym>TOAST</>的数据类型都为该数据类型的列指定了一个缺省策略， 但是一个给定表的列的存储策略可以用<command>ALTER TABLE SET STORAGE</>修改。
</para>

<para>
这个方法比那些更直接的方法（比如允许行值跨越多个页面）有更多优点。 假设查询通常是用相对比较短的键值进行匹配的，那么执行器的大多数工作都将使用主行项完成。<acronym>TOAST</>过的属性的大值只是在把结果集发送给客户端的时候才被抽出来（如果它被选中）。 因此，主表要小得多，并且它的能放入到共享缓冲区中的行要比没有任何线外存储的方案更多。 排序集也缩小了，并且排序将更多地在内存里完成。一个小测试表明，一个典型的保存 HTML 页面以及它们的 URL 的表占用的存储（包括<acronym>TOAST</>表在内）大约只有裸数据的一半，而主表只包含全部数据的 10%（URL和一些小的 HTML 页面）。与在一个非<acronym>TOAST</>的对照表里面存储（把全部 HTML 页面裁剪成 7Kb 以匹配页面大小）同样的数据相比，运行时没有任何区别。
</para>

</sect1>

<sect1 id="storage-fsm">

<title>空闲空间映射</title>

<indexterm>
 <primary>空闲空间映射</primary>
</indexterm>
<indexterm><primary>FSM</><see>空闲空间映射</></indexterm>

<para>
每一个堆和索引关系（除了哈希索引）都有一个空闲空间映射（FSM）来保持对关系中可用空间的跟踪。它伴随着主关系数据被存储在一个独立的关系分支中，以关系的文件节点号加上一个<literal>_fsm</>后缀命名。例如，如果一个关系的文件节点是12345，那么FSM被存储在一个名为<filename>12345_fsm</>的文件中，该文件与主关系文件在同一个目录中。
</para>

<para>
空闲空间映射被组织成一棵<acronym>FSM</>页面的树。底层<acronym>FSM</>页面存储了在每一个堆（或索引）页面中可用的空闲空间，对于每一个这样的页面使用一个字节来表示。上层<acronym>FSM</>页面则聚集来自于下层页面的信息。
</para>

<para>
在每一个<acronym>FSM</>页面中是一个二叉树，存储在一个数组中，每一个节点一个字节。每个叶节点表示一个堆页面或者一个下层<acronym>FSM</>页面。在每一个非叶节点中存储了它孩子节点中的最大值。因此叶节点中的最大值被存储在根中。
</para>

<para>
关于如何构建、更新和搜索<acronym>FSM</>的更多信息请参考<filename>src/backend/storage/freespace/README</>。<xref linkend="pgfreespacemap">模块可以用来检查存储在空闲空间映射中的信息。
</para>

</sect1>

<sect1 id="storage-vm">

<title>可见性映射</title>

<indexterm>
 <primary>可见性映射</primary>
</indexterm>
<indexterm><primary>VM</><see>可见性映射</></indexterm>

<para>
每一个堆关系都有一个可见性映射（VM）用来跟踪哪些页面只包含已知对所有活动事务可见的元组。它伴随着主关系数据被存储在一个独立的关系分支中，以该关系的文件节点号加上一个<literal>_vm</>后缀来命名。例如，如果一个关系的文件节点为12345，其VM被存储在名为<filename>12345_vm</>的文件中，该文件域主关系文件在同一个目录中。注意索引没有VM。
</para>

<para>
可见性映射仅为每个堆页面存储一个位。一个被设置的位表示在该页面上所有的元组已知对于所有事务都是可见的。这表示该页面不含有任何需要被清理的元组。这些信息也可以被用于<firstterm>index-only scans</>来使用索引元组回答查询。
</para>

<para>
该映射是保守的，我们可以确定不论何时一个位被设置，那就说明条件为真，但是如果一个位没有被设置，它可能为真也可能不为真。可见性映射的位只会被清理操作设置，但是可以被任何在页面上进行的数据修改操作清除。
</para>

</sect1>

<sect1 id="storage-init">

<title>初始化分支</title>

<indexterm>
 <primary>初始化分支</primary>
</indexterm>

<para>
每一个不被日志记录的表以及在这类表上的每一个索引，都有一个初始化分支。初始化分支是一个适当类型的空表或空索引。当一个不被日志记录的表由于崩溃必须被重置为空时，初始化分支被随着主分支复制，而任何其他分支则被擦除（它们会在需要时自动被重建）。
</para>

</sect1>

<sect1 id="storage-page-layout">

<title>数据库页面布局</title>

<para>
本章提供一个<productname>PostgreSQL</productname>的表和索引所使用的页面格式的概述。<footnote>
  <para>
    实际上，索引访问模式并不需要使用这种页面格式。目前所有的索引方法的确都使用这个基本格式， 但索引元页里的数据通常并不遵循项布局规则）。
  </para>
</footnote>
序列和<acronym>TOAST</>表的格式就像一个普通表一样。
</para>

<para>
在下面解释中，假定一个字节包含 8 个位。 另外，项（item）指的是存储在一个页面里的独立数据值。 在一个表里，一个项是一个行；在一个索引里，一个项是一条索引记录。
</para>

<para>
每个表和索引都以一个固定尺寸（通常是 8kB，不过在编译服务器时可以选择其他不同的尺寸）的<firstterm>页面</>数组存储。 在表中，所有页面在逻辑上都相同，所以一个特定的项（行）可以被存储在任何页面里。 在索引里，第一个页面通常保留为<firstterm>元页</>来保存控制信息， 并且依索引访问方法的不同，在索引里可能有不同类型的页面。
</para>

<para>
<xref linkend="page-table">显示一个页面的总体布局。每个页面有五个部分。
</para>

<table tocentry="1" id="page-table">
<title>总体页面布局</title>
<titleabbrev>页面布局</titleabbrev>
<tgroup cols="2">
<thead>
<row>
<entry>
项
</entry>
<entry>描述</entry>
</row>
</thead>

<tbody>

<row>
 <entry>PageHeaderData</entry>
 <entry>24字节长。包含关于页面的一般信息，包括空闲空间指针。</entry>
</row>

<row>
<entry>ItemIdData</entry>
<entry>一个记录（偏移量，长度）对的数组，指向实际项。每个项 4 字节。</entry>
</row>

<row>
<entry>Free space</entry>
<entry>未分配的空间（空闲空间）。新项指针从这个区域的开头开始分配，新项从其结尾开始分配。</entry>
</row>

<row>
<entry>Items</entry>
<entry>实际的项本身。</entry>
</row>

<row>
<entry>Special space</entry>
<entry>索引访问模式相关的数据。不同的索引访问方式存放不同的数据。在普通表中为空。</entry>
</row>

</tbody>
</tgroup>
</table>

 <para>

  每个页面的头24个字节组成页头（PageHeaderData）。它的格式在<xref linkend="pageheaderdata-table">里详细介绍。 头两个字节跟踪与此页面相关的最近的 WAL 项。接下来一个2字节的域包含标志位。此后跟随着三个 2 字节的整数域 （<structfield>pd_lower</structfield>、<structfield>pd_upper</structfield>和<structfield>pd_special</structfield>）。 这些域包含从页面开始位置到未分配空间开头的字节偏移、到未分配空间结尾的字节偏移以及到特殊空间开头的字节偏移。页面头中再接下来的 2 字节（<structfield>pd_pagesize_version</structfield>）存储页面尺寸和一个版本指示器。从<productname>PostgreSQL</productname> 8.3开始的版本号为4；<productname>PostgreSQL</productname> 8.1和8.2使用版本号3；<productname>PostgreSQL</productname> 8.0 使用版本号 2；<productname>PostgreSQL</productname> 7.3 和 7.4 使用版本号 1； 更早的版本使用版本号 0（基本页面布局和头格式在大部分这些版本里都没有改变，但是堆的行头部布局有所变化）。 页面大小主要用于交叉检查；目前在一次安装里，还不能支持多于一种页面大小。最后的域是一个提示，它显示删除该页是否可能获益：它跟踪在页面上最老的未删除的XMAX。

 </para>

 <table tocentry="1" id="pageheaderdata-table">
 <title>PageHeaderData布局</title>
 <titleabbrev>PageHeaderData布局</titleabbrev>
 <tgroup cols="4">
 <thead>
  <row>
   <entry>域</entry>
   <entry>类型</entry>
   <entry>长度</entry>
   <entry>描述</entry>
  </row>
 </thead>
 <tbody>
  <row>
   <entry>pd_lsn</entry>
   <entry>XLogRecPtr</entry>
   <entry>8 bytes</entry>
   <entry>LSN: 最后修改这个页面的 xlog 记录最后一个字节后面的第一个字节</entry>
  </row>
  <row>
   <entry>pd_checksum</entry>
   <entry>uint16</entry>
   <entry>2 bytes</entry>
   <entry>页面校验码</entry>
  </row>
  <row>
   <entry>pd_flags</entry>
   <entry>uint16</entry>
   <entry>2 bytes</entry>
   <entry>标志位</entry>
  </row>
  <row>
   <entry>pd_lower</entry>
   <entry>LocationIndex</entry>
   <entry>2 bytes</entry>
   <entry>到空闲空间开头的偏移量</entry>
  </row>
  <row>
   <entry>pd_upper</entry>
   <entry>LocationIndex</entry>
   <entry>2 bytes</entry>
   <entry>到空闲空间结尾的偏移量</entry>
  </row>
  <row>
   <entry>pd_special</entry>
   <entry>LocationIndex</entry>
   <entry>2 bytes</entry>
   <entry>到特殊空间开头的偏移量</entry>
  </row>
  <row>
   <entry>pd_pagesize_version</entry>
   <entry>uint16</entry>
   <entry>2 bytes</entry>
   <entry>页面大小和布局版本号信息</entry>
  </row>
  <row>
   <entry>pd_prune_xid</entry>
   <entry>TransactionId</entry>
   <entry>4 bytes</entry>
   <entry>页面上最老未删除XMAX，如果没有则为0</entry>
  </row>
 </tbody>
 </tgroup>
 </table>

 <para>
  所有细节都可以在<filename>src/include/storage/bufpage.h</filename>中找到。
 </para>

 <para>

  在页头后面是项标识符（<type>ItemIdData</type>），每个占用四个字节。 一个项标识符包含一个到项开头的字节偏移量（它的长度以字节计）， 以及一些属性位，这些属性位影响对它的解释。 新的项标识符根据需要从未分配空间的开头分配。项标识符的数目可以通过查看<structfield>pd_lower</>来判断，在分配新标识符的时候<structfield>pd_lower</>会增长。因为一个项标识符在被释放前绝对不会移动，所以它的索引可以用于长期地引用一个项， 即使该项本身因为压缩空闲空间在页面内部进行了移动。实际上，<productname>PostgreSQL</productname>创建的每个指向项的指针（<type>ItemPointer</type>，也叫做<type>CTID</type>）都由一个页号和一个项标识符的索引组成。

 </para>

 <para>

  项本身存储在从未分配空间末尾开始从后向前分配的空间里。它们的实际结构取决于表包含的内容。表和序列都使用一种叫做 <type>HeapTupleHeaderData</type>的结构，如下文所述。

 </para>

 <para>

  最后一部分是<quote>特殊部分</quote>，它可以包含访问方法想存放的任何东西。比如，b-tree 索引用它存储指向页面的左右兄妹的链接，以及其他一些和索引结构相关的数据。普通表并不使用这个部分（通过设置<structfield>pd_special</>等于页面大小来表示）。

 </para>

 <para>

  所有表行都用同样方法构造。它们有一个定长的头部（在大多数机器上占据 23 个字节）， 后面跟着一个可选的空值位图、一个可选的对象 ID 域以及用户数据。 该头部在<xref linkend="heaptupleheaderdata-table">里详细描述。实际的用户数据（行的列）从<structfield>t_hoff</>指示的偏移位置开始， 它必须总是该平台的 MAXALIGN 距离的倍数。空值位图只有在<structfield>t_infomask</structfield>中的<firstterm>HEAP_HASNULL</firstterm>位被设置时存在。 如果存在，那么它紧跟在定长的头部后面，并占据足够的字节来容纳每个数据列对应的一个位（也就是说，总共<structfield>t_natts</>位）。 在这个位的列表中，为 1 的位表示非空，而为 0 的位表示空。如果这个位图不存在，那么所有列都被假设为非空的。对象 ID 只有在设置了 <structfield>t_infomask</structfield>里面的<firstterm>HEAP_HASOID</firstterm>位时才存在。 如果存在，它正好出现在<structfield>t_hoff</>边界之前。如果需要对齐<structfield>t_hoff</>使之成为 MAXALIGN 的倍数，那么填充将出现在空值位图和对象 ID 之间（这样也保证了对象 ID 得到恰当的对齐）。

 </para>

 <table tocentry="1" id="heaptupleheaderdata-table">
 <title>HeapTupleHeaderData布局</title>
 <titleabbrev>HeapTupleHeaderData布局</titleabbrev>
 <tgroup cols="4">
 <thead>
  <row>
   <entry>域</entry>
   <entry>类型</entry>
   <entry>长度</entry>
   <entry>描述</entry>
  </row>
 </thead>
 <tbody>
  <row>
   <entry>t_xmin</entry>
   <entry>TransactionId</entry>
   <entry>4 bytes</entry>
   <entry>插入XID标志</entry>
  </row>
  <row>
   <entry>t_xmax</entry>
   <entry>TransactionId</entry>
   <entry>4 bytes</entry>
   <entry>删除XID标志</entry>
  </row>
  <row>
   <entry>t_cid</entry>
   <entry>CommandId</entry>
   <entry>4 bytes</entry>
   <entry>插入和/或删除CID标志（覆盖t_xvac）</entry>
  </row>
  <row>
   <entry>t_xvac</entry>
   <entry>TransactionId</entry>
   <entry>4 bytes</entry>
   <entry>VACUUM操作移动一个行版本的XID</entry>
  </row>
  <row>
   <entry>t_ctid</entry>
   <entry>ItemPointerData</entry>
   <entry>6 bytes</entry>
   <entry>当前版本的TID或者指向更新的行版本</entry>
  </row>
  <row>
   <entry>t_infomask2</entry>
   <entry>uint16</entry>
   <entry>2 bytes</entry>
   <entry>一些属性，加上多个标志位</entry>
  </row>
  <row>
   <entry>t_infomask</entry>
   <entry>uint16</entry>
   <entry>2 bytes</entry>
   <entry>多个标志位</entry>
  </row>
  <row>
   <entry>t_hoff</entry>
   <entry>uint8</entry>
   <entry>1 byte</entry>
   <entry>到用户数据的偏移量</entry>
  </row>
 </tbody>
 </tgroup>
 </table>

 <para>
   所有细节都可以在<filename>src/include/access/htup.h</filename>中找到。
 </para>

 <para>

  只有从其他表里获取了信息之后才能对确切数据进行， 这些信息大多数在<structname>pg_attribute</structname>中。 标识域位置的关键值是<structfield>attlen</structfield>和<structfield>attalign</structfield>。 我们没有办法直接获取某个特定属性，除非它们是定宽并且没有空值。所有这些复杂的操作都封装在函数<firstterm>heap_getattr</firstterm>、<firstterm>fastgetattr</firstterm>和<firstterm>heap_getsysattr</firstterm>中。

 </para>
 <para>

  要读取数据的话，你需要轮流检查每个属性。首先根据空值位图检查该域是否为NULL。 如果是，那么跳到下一个。然后保证你的对齐是正确的。如果域是一个定宽域，那么所有字节都简单地放在其中。 如果它是一个变长域（attlen = -1），那么它就会有点复杂。所有变长数据类型都使用一个通用的头部结构<type>struct varlena</type>， 它包含所存储的值的总长度以及一些标志位。根据标志的不同，数据可能在线内或者是在一个<acronym>TOAST</>中，还可能是压缩的（参阅<xref linkend="storage-toast">）。

 </para>
</sect1>

</chapter>

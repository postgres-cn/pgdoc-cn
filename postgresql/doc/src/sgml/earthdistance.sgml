<!-- doc/src/sgml/earthdistance.sgml -->

<sect1 id="earthdistance" xreflabel="earthdistance">
 <title>earthdistance</title>

 <indexterm zone="earthdistance">
  <primary>earthdistance</primary>
 </indexterm>

 <para>
  <filename>earthdistance</>模块提供两种不同的方法来计算地球表面的大圆距离。第一种要介绍的依赖于<filename>cube</>模块（<emphasis>必须</>在<filename>earthdistance</>之前安装）。第二种基于内建的<type>point</>数据类型，为座标使用精度和纬度。
 </para>

 <para>
  在这个模块中，地球被假定为完美的球型（如果这对你不够精确，你可能希望去看看<application><ulink url="http://postgis.net/">PostGIS</ulink></>项目）。
 </para>

 <sect2>
  <title>基于立方体的地球距离</title>

  <para>
   数据被存储在立方体中，立方体的点（所有的角都一样）使用 3 个座标表示到地球中心的 x、y 和 z 距离。提供了一个<type>cube</>之上的域<type>earth</>，这包括检查值符合这些限制并且合理地接近于地球的真实表面的约束。
  </para>

  <para>
   地球的半径获得自<function>earth()</>函数。其单位是米。但是通过改变这一个函数你能够把该模块改为使用某些其他单位，或者使用一种你认为更合适的不同半径值。
  </para>

  <para>
   这个包也有在天文数据库中的应用。天文学家可能想要改变<function>earth()</>来返回一个<literal>180/pi()</>的半径，这样距离就会是度数。
  </para>

  <para>
   函数也被提供来支持经纬度输入（以度数）、经纬度输出、计算两点间的大圆距离以及容易地指定一个可用于索引搜索的边界框。
  </para>

  <para>
   所提供的函数在<xref linkend="earthdistance-cube-functions">中描述。
  </para>

  <table id="earthdistance-cube-functions">
   <title>基于立方体的地球距离函数</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>函数</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><function>earth()</function><indexterm><primary>earth</primary></indexterm></entry>
      <entry><type>float8</type></entry>
      <entry>返回地球的假定半径。</entry>
     </row>
     <row>
      <entry><function>sec_to_gc(float8)</function><indexterm><primary>sec_to_gc</primary></indexterm></entry>
      <entry><type>float8</type></entry>
      <entry>将地球表面两点间的普通直线（切线）距离转换为它们之间的大圆距离。
      </entry>
     </row>
     <row>
      <entry><function>gc_to_sec(float8)</function><indexterm><primary>gc_to_sec</primary></indexterm></entry>
      <entry><type>float8</type></entry>
      <entry>将地球表面两点间的大圆距离转换为它们之间的普通直线（切线）距离。
      </entry>
     </row>
     <row>
      <entry><function>ll_to_earth(float8, float8)</function><indexterm><primary>ll_to_earth</primary></indexterm></entry>
      <entry><type>earth</type></entry>
      <entry>给定一个地球表面点的维度（参数 1）和精度（参数 2）度数，返回它的位置。
      </entry>
     </row>
     <row>
      <entry><function>latitude(earth)</function><indexterm><primary>latitude</primary></indexterm></entry>
      <entry><type>float8</type></entry>
      <entry>返回一个地球表面点的以度数表示的维度。
      </entry>
     </row>
     <row>
      <entry><function>longitude(earth)</function><indexterm><primary>longitude</primary></indexterm></entry>
      <entry><type>float8</type></entry>
      <entry>返回一个地球表面点的以度数表示的经度。
      </entry>
     </row>
     <row>
      <entry><function>earth_distance(earth, earth)</function><indexterm><primary>earth_distance</primary></indexterm></entry>
      <entry><type>float8</type></entry>
      <entry>返回地球表面上两点间的大圆距离。
      </entry>
     </row>
     <row>
      <entry><function>earth_box(earth, float8)</function><indexterm><primary>earth_box</primary></indexterm></entry>
      <entry><type>cube</type></entry>
      <entry>为一个位置的给定大圆距离范围内的点使用立方体<literal>@&gt;</>操作符返回一个适合于索引搜索的框。这个框中的某些点到该位置的大圆距离会超过指定的大圆距离，因此使用<function>earth_distance</>的第二次检查应该被包括在查询中。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2>
  <title>基于点的地球距离</title>

  <para>
   这个模块的第二部分依赖于将地球位置表示为类型<type>point</>的值，其中第一部分被用来表示经度数，第二部分被用来表示纬度数。点被取做 (longitude, latitude) 并且不能反过来，因为经度更接近直观上的 x 轴，而纬度则接近 y 轴。
  </para>

  <para>
   如<xref linkend="earthdistance-point-operators">所示，这一部分只提供了一个单一操作符。
  </para>

  <table id="earthdistance-point-operators">
   <title>基于点的地球距离操作符</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>操作符</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><type>point</> <literal>&lt;@&gt;</literal> <type>point</></entry>
      <entry><type>float8</type></entry>
      <entry>给定地球表面两点之间的法定英里距离。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   注意和这个模块的基于<type>cube</>的部分不同，这里的单位是被硬编码的：改变<function>earth()</>函数将不会影响这个操作符的结果。
  </para>

  <para>
   经度/纬度表示的一个缺点是你需要小心靠近两极和靠近经度正负 180 度处的边界情况。基于<type>cube</>的表示可以避免这些不连续性。
  </para>

 </sect2>

</sect1>

<!-- doc/src/sgml/sslinfo.sgml -->

<sect1 id="sslinfo" xreflabel="sslinfo">
 <title>sslinfo</title>

 <indexterm zone="sslinfo">
  <primary>sslinfo</primary>
 </indexterm>

 <!--
<para>
  The <filename>sslinfo</> module provides information about the SSL
  certificate that the current client provided when connecting to
  <productname>PostgreSQL</>.  The module is useless (most functions
  will return NULL) if the current connection does not use SSL.
 </para>
-->
<para>
<filename>sslinfo</>模块提供关于连接到<productname>PostgreSQL</>
时当前客户端提供的SSL认证的信息。如果当前连接没有使用SSL，
那么该模块是无用的（大部分函数将返回NULL）。
</para>

 <!--
<para>
  This extension won't build at all unless the installation was
  configured with <literal>&#045;-with-openssl</>.
 </para>
-->
<para>
这个扩展不会建立，除非安装时配置带有<literal>--with-openssl</>。
</para>

 <sect2>
  <!--
  <title>Functions Provided</title>
  -->
  <title>提供的函数</title>

  <variablelist>
   <varlistentry>
    <term>
     <function>ssl_is_used() returns boolean</function>
    <indexterm>
     <primary>ssl_is_used</primary>
    </indexterm>
    </term>
    <listitem>
    <!--
<para>
     Returns TRUE if current connection to server uses SSL, and FALSE
     otherwise.
    </para>
-->
<para>
如果当前到服务器的连接使用了SSL则返回TRUE，否则返回FALSE。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>ssl_version() returns text</function>
    <indexterm>
     <primary>ssl_version</primary>
    </indexterm>
    </term>
    <listitem>
    <!--
<para>
     Returns the name of the protocol used for the SSL connection (e.g. SSLv2,
     SSLv3, or TLSv1).
    </para>
-->
<para>
返回SSL连接使用的协议名（如SSLv2，SSLv3，或TLSv1）
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>ssl_cipher() returns text</function>
    <indexterm>
     <primary>ssl_cipher</primary>
    </indexterm>
    </term>
    <listitem>
    <!--
<para>
     Returns the name of the cipher used for the SSL connection
     (e.g. DHE-RSA-AES256-SHA).
    </para>
-->
<para>
返回SSL连接使用的密码名称（如DHE-RSA-AES256-SHA）。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>ssl_client_cert_present() returns boolean</function>
    <indexterm>
     <primary>ssl_client_cert_present</primary>
    </indexterm>
    </term>
    <listitem>
    <!--
<para>
     Returns TRUE if current client has presented a valid SSL client
     certificate to the server, and FALSE otherwise.  (The server
     might or might not be configured to require a client certificate.)
    </para>
-->
<para>
如果当前客户端提供了一个有效的SSL客户端证书到服务器则返回TRUE，否则返回FALSE。
（服务器可能或可能没有被配置为需要一个客户端证书。）
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>ssl_client_serial() returns numeric</function>
    <indexterm>
     <primary>ssl_client_serial</primary>
    </indexterm>
    </term>
    <listitem>
    <!--
<para>
     Returns serial number of current client certificate.  The combination of
     certificate serial number and certificate issuer is guaranteed to
     uniquely identify a certificate (but not its owner &mdash; the owner
     ought to regularly change his keys, and get new certificates from the
     issuer).
    </para>
-->
<para>
返回当前客户端证书的序列号。证书序列号和证书发行者的组合保证为唯一的标识一个证书
（但不是它的所有者&mdash;所有者应该定期的改变它的秘钥，并从发行者处获得新的证书。）
</para>

    <!--
<para>
     So, if you run your own CA and allow only certificates from this CA to
     be accepted by the server, the serial number is the most reliable (albeit
     not very mnemonic) means to identify a user.
    </para>
-->
<para>
所以，如果你运行自己的CA并且只允许来自这个CA的证书被服务器接受，
那么序列编号是识别一个用户最可靠（虽然不是很帮助记忆）的手段。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>ssl_client_dn() returns text</function>
    <indexterm>
     <primary>ssl_client_dn</primary>
    </indexterm>
    </term>
    <listitem>
    <!--
<para>
     Returns the full subject of the current client certificate, converting
     character data into the current database encoding.  It is assumed that
     if you use non-ASCII characters in the certificate names, your
     database is able to represent these characters, too.  If your database
     uses the SQL_ASCII encoding, non-ASCII characters in the name will be
     represented as UTF-8 sequences.
    </para>
-->
<para>
返回当前客户端认证的全部科目，转换字符数据为当前数据库编码。
假设如果在证书名里使用非ASCII字符，那么数据库也可以表示这些字符。
如果数据库使用SQL_ASCII编码，那么名字中的非ASCII字符将用UTF-8序列表示。
</para>

    <!--
<para>
     The result looks like <literal>/CN=Somebody /C=Some country/O=Some organization</>.
    </para>
-->
<para>
结果看起来像<literal>/CN=Somebody /C=Some country/O=Some organization</>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>ssl_issuer_dn() returns text</function>
    <indexterm>
     <primary>ssl_issuer_dn</primary>
    </indexterm>
    </term>
    <listitem>
    <!--
<para>
     Returns the full issuer name of the current client certificate, converting
     character data into the current database encoding.  Encoding conversions
     are handled the same as for <function>ssl_client_dn</>.
    </para>
-->
<para>
返回当前客户端认证的全部发行者名字，转换字符数据为当前数据库编码。
编码转换的处理和<function>ssl_client_dn</>相同。
</para>
    <!--
<para>
     The combination of the return value of this function with the
     certificate serial number uniquely identifies the certificate.
    </para>
-->
<para>
这个函数的返回值的组合和证书序列编号唯一的标识该证书。
</para>
    <!--
<para>
     This function is really useful only if you have more than one trusted CA
     certificate in your server's <filename>root.crt</> file, or if this CA
     has issued some intermediate certificate authority certificates.
    </para>
-->
<para>
只有你有多于一个信任的CA证书在服务器的<filename>root.crt</>文件时，
或者如果这个CA已经发布了一些中级证书授权证书，这个函数才真正的有用。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>ssl_client_dn_field(fieldname text) returns text</function>
    <indexterm>
     <primary>ssl_client_dn_field</primary>
    </indexterm>
    </term>
    <listitem>
    <!--
<para>
     This function returns the value of the specified field in the
     certificate subject, or NULL if the field is not present.
     Field names are string constants that are
     converted into ASN1 object identifiers using the OpenSSL object
     database.  The following values are acceptable:
    </para>
-->
<para>
这个函数返回证书主题中的指定字段值，或者如果该字段不存在则为NULL。
为字符串常量的字段名转换为使用OpenSSL对象数据库的ASN1对象标识符。
下列的值是可接受的：
</para>
<literallayout class="monospaced">
commonName (alias CN)
surname (alias SN)
name
givenName (alias GN)
countryName (alias C)
localityName (alias L)
stateOrProvinceName (alias ST)
organizationName (alias O)
organizationUnitName (alias OU)
title
description
initials
postalCode
streetAddress
generationQualifier
description
dnQualifier
x500UniqueIdentifier
pseudonym
role
emailAddress
</literallayout>
    <!--
<para>
     All of these fields are optional, except <structfield>commonName</>.
     It depends
     entirely on your CA's policy which of them would be included and which
     wouldn't.  The meaning of these fields, however, is strictly defined by
     the X.500 and X.509 standards, so you cannot just assign arbitrary
     meaning to them.
    </para>
-->
<para>
所有这些字段都是可选的，除了<structfield>commonName</>。
它完全取决于你的证书的政策将包括或不包括。不过，
这些字段的含义严格的由X.500和X.509标准定义，所以不能任意分配它们的含义。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>ssl_issuer_field(fieldname text) returns text</function>
    <indexterm>
     <primary>ssl_issuer_field</primary>
    </indexterm>
    </term>
    <listitem>
    <!--
<para>
     Same as <function>ssl_client_dn_field</>, but for the certificate issuer
     rather than the certificate subject.
    </para>
-->
<para>
和<function>ssl_client_dn_field</>相同，除了是证书发行者而不是证书主题。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
  <!-- 
  <title>Author</title>
  -->
  <title>作者</title>

<para>
   Victor Wagner <email>vitus@cryptocom.ru</email>, Cryptocom LTD
  </para>

  <!--
<para>
   E-Mail of Cryptocom OpenSSL development group:
   <email>openssl@cryptocom.ru</email>
  </para>
-->
<para>
Cryptocom OpenSSL开发团队的E-Mail：<email>openssl@cryptocom.ru</email>
</para>
 </sect2>

</sect1>

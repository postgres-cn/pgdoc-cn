<!-- doc/src/sgml/dfunc.sgml -->

<sect2 id="dfunc">
 <title>编译和链接动态载入的函数</title>

 <para>
  在使用 C 编写的<productname>PostgreSQL</productname>扩展函数之前，必须以一种特殊的方式编译并且链接它们，以便产生一个能被服务器动态载入的文件。简而言之，需要创建一个<firstterm>共享库</firstterm>。<indexterm><primary>共享库</></indexterm>

 </para>

 <para>
  超出本节所含内容之外的信息请参考你的操作系统文档，特别是 C 编译器（<command>cc</command>）和链接编辑器（<command>ld</command>）的手册页。另外，<productname>PostgreSQL</productname>源代码的<filename>contrib</filename>目录中包含了一些可以工作的例子。但是，如果你依靠这些例子，也会使你的模块依赖于<productname>PostgreSQL</productname>源码的可用性。
 </para>

 <para>
  创建共享库通常与链接可执行文件相似：首先源文件被编译成对象文件，然后对象文件被链接起来。对象文件需要被创建为<firstterm>独立位置代码</firstterm>（<acronym>PIC</acronym>），<indexterm><primary>PIC</></>，这在概念上意味着当它们被可执行文件载入时，它们可以被放置在内存中的任意位置（用于可执行文件的对象文件通常不会以那种方式编译）。链接一个共享库的命令会包含特殊标志来把它与链接一个可执行文件区分开（至少在理论上 &mdash; 在某些系统上实际上很丑陋）。
 </para>

 <para>
  在下列例子中，我们假定你的源代码在一个文件<filename>foo.c</filename>中，并且我们将创建一个共享库<filename>foo.so</filename>。除非特别注明，中间的对象文件将被称为<filename>foo.o</filename>。一个共享库能包含多于一个对象文件，但是我们在这里只使用一个。
 </para>

<!--
  Note: Reading GNU Libtool sources is generally a good way of
  figuring out this information.  The methods used within PostgreSQL
  source code are not necessarily ideal.
-->

  <variablelist>
   <varlistentry>
    <term><systemitem class="osname">FreeBSD</>
    <indexterm><primary>FreeBSD</><secondary>共享库</></></term>
    <listitem>
     <para>
      用来创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。要创建共享库，编译器标志是<option>-shared</option>。
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
      这适用于<systemitem class="osname">FreeBSD</>从 3.0 开始的版本。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">HP-UX</>
    <indexterm><primary>HP-UX</><secondary>共享库</></></term>
    <listitem>
     <para>
      该系统编译器创建<acronym>PIC</acronym>的编译器标志是<option>+z</option>。当使用<application>GCC</application>自己的<option>-fpic</option>时。用于共享库的链接器标志是<option>-b</option>。因此：
<programlisting>
cc +z -c foo.c
</programlisting>
      或者：
<programlisting>
gcc -fpic -c foo.c
</programlisting>
      并且然后：
<programlisting>
ld -b -o foo.sl foo.o
</programlisting>
      和大部分其他系统不同，<systemitem class="osname">HP-UX</>为共享库使用扩展<filename>.sl</filename>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Linux</>
    <indexterm><primary>Linux</><secondary>共享库</></></term>
    <listitem>
     <para>
      创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。在某些平台上的某些情况下，如果<option>-fpic</option>不起作用，那么必须使用<option>-fPIC</option>。详情请参考 GCC 手册。创建一个共享库的编译器标志是<option>-shared</option>。一个完整的例子看起来像：
<programlisting>
cc -fpic -c foo.c
cc -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Mac OS X</>
    <indexterm><primary>Mac OS X</><secondary>共享库</></></term>
    <listitem>
     <para>
      这里是一个例子。它假定安装了开发者工具。
<programlisting>
cc -c foo.c
cc -bundle -flat_namespace -undefined suppress -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">NetBSD</>
    <indexterm><primary>NetBSD</><secondary>共享库</></></term>
    <listitem>
     <para>
      创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。对于<acronym>ELF</acronym>系统，带着标志<option>-shared</option>的编译器被用来链接共享库。在旧的非 ELF 系统上，<literal>ld -Bshareable</literal>会被使用。
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">OpenBSD</>
    <indexterm><primary>OpenBSD</><secondary>共享库</></></term>
    <listitem>
     <para>
      创建<acronym>PIC</acronym>的编译器标志是<option>-fpic</option>。<literal>ld -Bshareable</literal>被用来链接共享库。
<programlisting>
gcc -fpic -c foo.c
ld -Bshareable -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">Solaris</>
    <indexterm><primary>Solaris</><secondary>共享库</></></term>
    <listitem>
     <para>
      创建<acronym>PIC</acronym>的编译器标志是<option>-KPIC</option>（用于 Sun 编译器）以及<option>-fpic</option>（用于<application>GCC</>）。要链接共享库，编译器选项对几种编译器都是<option>-G</option>或者是对<application>GCC</>使用<option>-shared</option>。
<programlisting>
cc -KPIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
      or
<programlisting>
gcc -fpic -c foo.c
gcc -G -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><systemitem class="osname">UnixWare</>
    <indexterm><primary>UnixWare</><secondary>共享库</></></term>
    <listitem>
     <para>
      创建<acronym>PIC</acronym>的编译器标志是<option>-KPIC</option>（用于 SCO 编译器）以及<option>-fpic</option>（用于<application>GCC</>）。要链接共享库，编译器选项是<option>-G</option>（用于 SCO 编译器）以及<option>-shared</option>（用于<productname>GCC</productname>）。
<programlisting>
cc -K PIC -c foo.c
cc -G -o foo.so foo.o
</programlisting>
      or
<programlisting>
gcc -fpic -c foo.c
gcc -shared -o foo.so foo.o
</programlisting>
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 <tip>
  <para>
   如果这对你来说太复杂，你应该考虑使用<ulink url="http://www.gnu.org/software/libtool/">
   <productname>GNU Libtool</productname></ulink>，它会用一个统一的接口隐藏平台差异。
  </para>
 </tip>

 <para>
  结果的共享库文件接着就可以被载入到<productname>PostgreSQL</productname>。当把文件名指定给<command>CREATE FUNCTION</command>命令时，必须把共享库文件的名字给它，而不是中间的对象文件。注意系统的标准共享库扩展（通常是<literal>.so</literal>或者<literal>.sl</literal>）在<command>CREATE FUNCTION</command>命令中可以被忽略，并且通常为了最好的可移植性应该被忽略。
 </para>

 <para>
  服务器会期望在哪里寻找共享库文件请参考<xref linkend="xfunc-c-dynload">。
 </para>

<!--
在 AIX 下，对象文件会被正常编译，但是构建共享库需要一系列步骤。首先，创建对象文件：
.nf
cc <other flags> -c foo.c
.fi
你必须接着创建一个符号 \*(lqexports\*(用于对象文件的 rq 文件：
.nf
mkldexport foo.o `pwd` &gt; foo.exp
.fi
最后，你能够创建共享库：
.nf
ld <other flags> -H512 -T512 -o foo.so -e _nostart \e
   -bI:.../lib/postgres.exp -bE:foo.exp foo.o \e
   -lm -lc 2>/dev/null
.fi
  -->

</sect2>

<!-- doc/src/sgml/features.sgml -->

<appendix id="features">
<!--==========================orignal english content==========================
 <title>SQL Conformance</title>
____________________________________________________________________________-->
 <title>SQL 符合性</title>

<!--==========================orignal english content==========================
 <para>
  This section attempts to outline to what extent
  <productname>PostgreSQL</productname> conforms to the current SQL
  standard.  The following information is not a full statement of
  conformance, but it presents the main topics in as much detail as is
  both reasonable and useful for users.
 </para>
____________________________________________________________________________-->
 <para>
  这一节尝试勾勒出<productname>PostgreSQL</productname>与当前 SQL 标准相符合的范围。下面的信息并不是符合性的完整说明，但是它尽可能详细地表达了对用户合理且有用的主要主题。
 </para>

<!--==========================orignal english content==========================
 <para>
  The formal name of the SQL standard is ISO/IEC 9075 <quote>Database
  Language SQL</quote>.  A revised version of the standard is released
  from time to time; the most recent update appearing in 2016.
  The 2016 version is referred to as ISO/IEC 9075:2016, or simply as SQL:2016.
  The versions prior to that were SQL:2008, SQL:2003, SQL:1999, and SQL-92.  Each version
  replaces the previous one, so claims of conformance to earlier
  versions have no official merit.
  <productname>PostgreSQL</productname> development aims for
  conformance with the latest official version of the standard where
  such conformance does not contradict traditional features or common
  sense.  Many of the features required by the SQL
  standard are supported, though sometimes with slightly differing
  syntax or function.  Further moves towards conformance can be
  expected over time.
 </para>
____________________________________________________________________________-->
 <para>
  SQL 标准的正式名称是 ISO/IEC 9075 <quote>数据库语言 SQL</quote>。该标准会不时地发布一个修改的版本，最近一次更新出现在 2016 年。2016年的版本被称为 ISO/IEC 9075:2016，或者简单地为 SQL:2016。之前的版本是 SQL:2011，SQL:2008，SQL:2006，SQL:2003，SQL:1999 和 SQL-92。每一个版本会替换之前的一个版本，因此声称与早前的版本相符合没有意义。<productname>PostgreSQL</productname>的开发希望与该标准的最新官方版本相符，并且这种符合不会与额外特性或尝试相冲突。很多 SQL 标准所要求的特性都被支持，不过有时在语法或函数上有所不同。随着时间的推移，符合性会得到进一步的提高。
 </para>

<!--==========================orignal english content==========================
 <para>
  <acronym>SQL-92</acronym> defined three feature sets for
  conformance: Entry, Intermediate, and Full.  Most database
  management systems claiming <acronym>SQL</acronym> standard
  conformance were conforming at only the Entry level, since the
  entire set of features in the Intermediate and Full levels was
  either too voluminous or in conflict with legacy behaviors.
 </para>
____________________________________________________________________________-->
 <para>
  <acronym>SQL-92</acronym>为符合性定义了三个特性集：入口、中间和完整。大部分号称<acronym>SQL</acronym>标准符合的数据库管理系统只是在入口级别上的符合，因为中间和完整级别的整个特性集合要么太多要么与遗留行为冲突。
 </para>

<!--==========================orignal english content==========================
 <para>
  Starting with <acronym>SQL:1999</acronym>, the SQL standard defines
  a large set of individual features rather than the ineffectively
  broad three levels found in <acronym>SQL-92</acronym>.  A large
  subset of these features represents the <quote>Core</quote>
  features, which every conforming SQL implementation must supply.
  The rest of the features are purely optional.  Some optional
  features are grouped together to form <quote>packages</quote>, which
  SQL implementations can claim conformance to, thus claiming
  conformance to particular groups of features.
 </para>
____________________________________________________________________________-->
 <para>
  从<acronym>SQL:1999</acronym>开始，SQL 标准定义了一个大型的个体特性集合，而没有无用地拓宽<acronym>SQL-92</acronym>中的三个级别。这些特性中的一个大型子集代表<quote>核心</quote>特性，每一个符合 SQL 的实现都必须提供。剩下的特性纯粹是可选的。一些可选的特性被分组到一起形成<quote>包</quote>，SQL 实现可以声称符合它们，因此符合特定的特性组。
 </para>

<!--==========================orignal english content==========================
 <para>
  The standard versions beginning with <acronym>SQL:2003</acronym>
  are also split into a number
  of parts.  Each is known by a shorthand name.  Note that these parts
  are not consecutively numbered.

  <itemizedlist>
   <listitem><para>ISO/IEC 9075-1 Framework (SQL/Framework)</para><indexterm><primary>SQL/Framework</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-2 Foundation (SQL/Foundation)</para><indexterm><primary>SQL/Foundation</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-3 Call Level Interface (SQL/CLI)</para><indexterm><primary>SQL/CLI</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-4 Persistent Stored Modules (SQL/PSM)</para><indexterm><primary>SQL/PSM</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-9 Management of External Data (SQL/MED)</para><indexterm><primary>SQL/MED</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-10 Object Language Bindings (SQL/OLB)</para><indexterm><primary>SQL/OLB</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-11 Information and Definition Schemas (SQL/Schemata)</para><indexterm><primary>SQL/Schemata</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-13 Routines and Types using the Java Language (SQL/JRT)</para><indexterm><primary>SQL/JRT</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-14 XML-related specifications (SQL/XML)</para><indexterm><primary>SQL/XML</primary></indexterm></listitem>
  </itemizedlist>
 </para>
____________________________________________________________________________-->
 <para>
  从<acronym>SQL:2003</acronym>开始的标准版本也被划分成数个部分。每一个部分有一个速记名。注意这些部分不是连续编号。

  <itemizedlist>
   <listitem><para>ISO/IEC 9075-1 Framework (SQL/Framework)</para><indexterm><primary>SQL/Framework</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-2 Foundation (SQL/Foundation)</para><indexterm><primary>SQL/Foundation</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-3 Call Level Interface (SQL/CLI)</para><indexterm><primary>SQL/CLI</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-4 Persistent Stored Modules (SQL/PSM)</para><indexterm><primary>SQL/PSM</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-9 Management of External Data (SQL/MED)</para><indexterm><primary>SQL/MED</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-10 Object Language Bindings (SQL/OLB)</para><indexterm><primary>SQL/OLB</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-11 Information and Definition Schemas (SQL/Schemata)</para><indexterm><primary>SQL/Schemata</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-13 Routines and Types using the Java Language (SQL/JRT)</para><indexterm><primary>SQL/JRT</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-14 XML-related specifications (SQL/XML)</para><indexterm><primary>SQL/XML</primary></indexterm></listitem>
  </itemizedlist>
 </para>

<!--==========================orignal english content==========================
 <para>
  The <productname>PostgreSQL</productname> core covers parts 1, 2, 9,
  11, and 14.  Part 3 is covered by the ODBC driver, and part 13 is
  covered by the PL/Java plug-in, but exact conformance is currently
  not being verified for these components.  There are currently no
  implementations of parts 4 and 10
  for <productname>PostgreSQL</productname>.
 </para>
____________________________________________________________________________-->
 <para>
  <productname>PostgreSQL</productname>核心覆盖了部分 1、2、9、11 和 14。部分 3 被 ODBC 驱动所覆盖，并且部分 13 被 PL/Java 插件所覆盖，但是目前准确的符合性还没有在这些组件上被验证。目前对于<productname>PostgreSQL</productname>没有部分 4 和 10 的实现。
 </para>

<!--==========================orignal english content==========================
 <para>
  PostgreSQL supports most of the major features of SQL:2011.  Out of
  179 mandatory features required for full Core conformance,
  PostgreSQL conforms to at least 160.  In addition, there is a long
  list of supported optional features.  It might be worth noting that at
  the time of writing, no current version of any database management
  system claims full conformance to Core SQL:2011.
 </para>
____________________________________________________________________________-->
 <para>
  PostgreSQL 支持 SQL:2016 的大部分主要特性。在 179 个完整核心符合所要求的强制特性中，PostgreSQL 至少符合 160 个。另外，还有一个受支持的可选特性的长长的列表。值得注意的是，在编写此文档时，还没有任何数据库管理系统的当前版本声称完全符合核心的 SQL:2016。
 </para>

<!--==========================orignal english content==========================
 <para>
  In the following two sections, we provide a list of those features
  that <productname>PostgreSQL</productname> supports, followed by a
  list of the features defined in <acronym>SQL:2011</acronym> which
  are not yet supported in <productname>PostgreSQL</productname>.
  Both of these lists are approximate: There might be minor details that
  are nonconforming for a feature that is listed as supported, and
  large parts of an unsupported feature might in fact be implemented.
  The main body of the documentation always contains the most accurate
  information about what does and does not work.
 </para>
____________________________________________________________________________-->
 <para>
  在下面的两节中，我们提供了一个<productname>PostgreSQL</productname>所支持特性的列表，以及一个在<acronym>SQL:2016</acronym>中定义却还未被<productname>PostgreSQL</productname>支持的特性的列表。这两个列表都是大概的：对于被列为支持的一个特性可能会有少量的细节不符合，而且大部分未被支持的特性可能事实上已经被实现。本文档的主体部分包含了哪些能用哪些不能用的准确信息。
 </para>

 <note>
<!--==========================orignal english content==========================
  <para>
   Feature codes containing a hyphen are subfeatures.  Therefore, if a
   particular subfeature is not supported, the main feature is listed
   as unsupported even if some other subfeatures are supported.
  </para>
____________________________________________________________________________-->
  <para>
   包含一个连字符的特性编码是子特性。因此，如果一个特定的子特性没有被支持，其主特性被列为未支持，即使其他的子特性都已被支持。
  </para>
 </note>

  <sect1 id="features-sql-standard">
<!--==========================orignal english content==========================
   <title>Supported Features</title>
____________________________________________________________________________-->
   <title>已支持特性</title>

<!--==========================orignal english content==========================
   <para>
    <informaltable>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Identifier</entry>
        <entry>Package</entry>
        <entry>Description</entry>
        <entry>Comment</entry>
       </row>
      </thead>

      &features-supported;

     </tgroup>
    </informaltable>
   </para>
____________________________________________________________________________-->
   <para>
    <informaltable>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>标识符</entry>
        <entry>包</entry>
        <entry>描述</entry>
        <entry>注释</entry>
       </row>
      </thead>

      &features-supported;

     </tgroup>
    </informaltable>
   </para>
  </sect1>

  <sect1 id="unsupported-features-sql-standard">
<!--==========================orignal english content==========================
   <title>Unsupported Features</title>
____________________________________________________________________________-->
   <title>未支持特性</title>

<!--==========================orignal english content==========================
   <para>
    The following features defined in <acronym>SQL:2011</acronym> are not
    implemented in this release of
    <productname>PostgreSQL</productname>. In a few cases, equivalent
    functionality is available.

    <informaltable>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Identifier</entry>
        <entry>Package</entry>
        <entry>Description</entry>
        <entry>Comment</entry>
       </row>
      </thead>

      &features-unsupported;

     </tgroup>
    </informaltable>
   </para>
____________________________________________________________________________-->
   <para>
    下列定义在<acronym>SQL:2016</acronym>中的特性还没有在这个<productname>PostgreSQL</productname>发行中被实现。在一些情况中，有等效的功能可用。

    <informaltable>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>标识符</entry>
        <entry>包</entry>
        <entry>描述</entry>
        <entry>注释</entry>
       </row>
      </thead>

      &features-unsupported;

     </tgroup>
    </informaltable>
   </para>
  </sect1>

  <sect1 id="xml-limits-conformance">
   <title>XML对于SQL的限制和符合性/XML</title>

   <indexterm>
    <primary>SQL/XML</primary>
    <secondary>限制和符合性</secondary>
   </indexterm>

   <para>
    ISO/IEC 9075-14中与XML相关的规范进行了重大修订
    (SQL/XML)与SQL:2006一起被引入.
    <productname>PostgreSQL</productname>'s 的XML数据类型和相关函数的实现基本上沿用了2003年的早期版本。有一些借鉴了后来的版本。 特别是:
    <itemizedlist>
     <listitem>
      <para>现行标准提供了一系列可扩展标记语言数据类型，其中将<quote>文档</quote>或<quote>内容</quote>保存在非类型或XML Schema类型的变体，以及类型<type>XML(SEQUENCE)</type>用于保存任意的XML内容片段。
       <productname>PostgreSQL</productname>提供了一个单一的<type>xml</type>类型，可以容纳<quote>文档</quote>或<quote>内容</quote>。 没有相应的标准的<quote>序列</quote>类型。
      </para>
     </listitem>

     <listitem>
      <para>
       <productname>PostgreSQL</productname>提供了两个函数在SQL:2006中引入的，但是在变体中，使用的是XPath 1.0语言，而不是在标准中为其指定的XML查询。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>    本节介绍了一些你可能会遇到的差异。
   </para>

   <sect2 id="functions-xml-limits-xpath1">
    <title>查询只限于XPath 1.0</title>

    <para>
     <productname>PostgreSQL</productname>-指定的函数
     <function>xpath()</function> 和 <function>xpath_exists()</function>使用XPath语言查询XML文档。
     <productname>PostgreSQL</productname>也提供了标准函数中的XPath-only变体<function>XMLEXISTS</function>和
     <function>XMLTABLE</function>, 其中正式采用XQuery语言。所有这些函数
     <productname>PostgreSQL</productname>都依赖于<application>libxml2</application> 库，而这个库仅在XPath 1.0中提供。
    </para>

    <para>在XQuery语言和XPath 2.0及以后的版本之间有很强的联系：任何语法上有效的表达式，在这两个版本中都能成功地执行，都会产生相同的结果（对于包含数字字符引用或预定义的实体引用的表达式会略有不同，
XQuery会用相应的字符替换，而 XPath则不会。)  但这些语言和XPath 1.0之间没有这种联系，它是一种较早的语言，在很多方面都有区别。
    </para>

    <para>有两类限制需要记住：一是对SQL标准中指定的函数从XQuery到XPath的限制，二是对标准和<productname>PostgreSQL</productname>特定函数XPath的限制是1.0版本 。
    </para>

    <sect3>
     <title>XQuery到XPath的限制</title>
     <para>
              除了XPath的特性之外，XQuery的特性还包括:
      <itemizedlist>
       <listitem>
        <para>
         除了所有可能的XPath值之外，XQuery表达式还可以构造和返回新的XML节点。 XPath 可以创建和返回原子类型（数字、字符串等）的值，但只能返回作为表达式输入的文档中已经存在的XML节点。
        </para>
       </listitem>

       <listitem>
        <para>
         XQuery有用于迭代、排序和分组的控制结构。
        </para>
       </listitem>

       <listitem>
        <para>
         XQuery允许声明和使用局部函数。
        </para>
       </listitem>
      </itemizedlist>
     </para>

     <para>
      最近的 XPath 版本开始提供与这些功能重叠的功能（例如函数式的 <function>for-each</function>和<function>sort</function>，匿名函数，以及 <function>parse-xml</function>从字符串中创建节点的<function>parse-xml</function>），但这些功能在 XPath 3.0 之前是不具备的。
     </para>
    </sect3>

    <sect3 id="xml-xpath-1-specifics">
     <title>对XPath的限制为1.0</title>

     <para>
      对于熟悉XQuery和XPath 2.0或更高版本的开发人员来说，XPath 1.0带来了许多不同的地方，需要解决的是:

      <itemizedlist>
       <listitem>
        <para>
         一个XQuery/XPath表达式的基本类型，即 <type>sequence</type>，它可以包含XML节点、原子值或两者，在XPath 1.0中不存在。一个1.0表达式只能产生一个节点集（包含0个或更多的XML节点），或者一个原子值。
        </para>
       </listitem>

       <listitem>
        <para>
          与XQuery/XPath序列不同的是，XPath 1.0节点集没有保证顺序，和任何集一样，不允许同一个项目多次出现。
         <note>
          <para>
           <application>libxml2</application>库似乎总是将节点集返回到<productname>PostgreSQL</productname>的节点集，其成员在输入文档中的相对顺序是一样的。 它的文档并没有承诺这种行为，而且XPath 1.0表达式不能控制它。
          </para>
         </note>
        </para>
       </listitem>

       <listitem>
        <para>
         虽然XQuery/XPath提供了XML Schema中定义的所有类型和许多操作符和函数，但XPath 1.0只有节点集和三种原子类型<type>boolean</type>、<type>double</type>和<type>string</type>。
        </para>
       </listitem>

       <listitem>
        <para>
         XPath 1.0没有条件运算符。一个XQuery/XPath表达式，如<literal>if ( hat ) then hat/@size else "no hat"</literal>没有XPath 1.0的等价物。
        </para>
       </listitem>

       <listitem>
        <para>
         XPath 1.0没有对字符串进行排序比较运算符。<literal>"cat" &lt; "dog"</literal>和<literal>"cat" &gt; "dog"</literal>都是假的，因为每一个都是两个<literal>NaN</literal>的数值比较。相比之下，<literal>=</literal>和<literal>!!=</literal>确实将字符串作为字符串进行比较。
        </para>
       </listitem>

       <listitem>
        <para>
         XPath 1.0模糊了XQuery/XPath定义的<firstterm>值比较</firstterm>和<firstterm>一般比较</firstterm>之间的区别。 <literal>sale/@hatsize = 7</literal>和<literal>sale/@customer = "alice"</literal>都是存在的量化比较，如果有任何<literal>sale</literal>属性的给定值，则为真。但<literal>sale/@taxable = false()</literal>是与整个节点集的<firstterm>有效布尔值</firstterm>的值比较。只有当没有<literal>sale</literal>有一个<literal>taxable</literal>属性时，它才是真值。
        </para>
       </listitem>

       <listitem>
        <para>
         在XQuery/XPath数据模型中，一个<firstterm>文档节点</firstterm>既可以有文档形式（即正好有一个顶层元素，只有注释和处理指令以外的注释和处理指令），也可以有内容形式（放宽了这些限制）。在XPath 1.0中，它的等价物是<firstterm>根节点</firstterm>，只能是文档形式。这也是<type>xml</type>的值被作为 上下文项到任何 <productname>PostgreSQL</productname>的上下文项 基于XPath的函数必须是以文档形式出现。
        </para>
       </listitem>
      </itemizedlist>
     </para>

     <para>
      这里强调的区别并不是全部。在XQuery和XPath的2.0及以后的版本中，有一个XPath 1.0的兼容性模式，W3C列出的 <ulink url='https://www.w3.org/TR/2010/REC-xpath-functions-20101214/#xpath1-compatibility'>函数库变化</ulink>和<ulink url='https://www.w3.org/TR/xpath20/#id-backwards-compatibility'>语言变化</ulink>在该模式下应用的列表提供了一个更完整（但仍然不是详尽的）的差异说明。 兼容性模式不能使后来的语言与XPath 1.0完全等同。
     </para>
    </sect3>

    <sect3 id="functions-xml-limits-casts">
     <title>SQL和XML数据类型和值之间的映射</title>

     <para>
      在SQL:2006及以后的版本中，标准SQL数据类型和XML Schema类型之间的转换方向都被精确地指定了。但是，这些规则都是用XQuery/XPath的类型和语义来表示的，对于XPath 1.0的不同数据模型没有直接应用。
     </para>

     <para>
      当<productname>PostgreSQL</productname>将SQL数据值映射到XML（如<function>xmlelement</function>），或XML映射到SQL（如输出 <function>xmltable</function>的列)，除了少数情况下的  特殊处理，<productname>PostgreSQL</productname>只需假定 XML 数据类型的 XPath 1.0 字符串形式将被视为有效的文本输入形式的SQL数据类型，反之。 该规则的优点是简单，同时对许多数据类型来说，产生的结果与标准中规定的映射类似。
     </para>

     <para>
      如果与其他系统的互操作性是一个问题，对于某些数据类型，可能需要使用数据类型格式化函数（如<xref linkend="function-formatting"/>中的函数）来生成标准映射。
     </para>
    </sect3>
   </sect2>

   <sect2 id="functions-xml-limits-postgresql">
    <title>
     实现中的偶然限制
    </title>

    <para>
     本节涉及的限制并不是<application>libxml2</application>库所固有的，而是适用于<productname>PostgreSQL</productname>中的当前实现。
    </para>

    <sect3>
     <title>仅支持<literal>by VALUE</literal>传递机制</title>。

     <para>
      SQL标准定义了两种<firstterm>传递机制</firstterm>，适用于从SQL向XML函数传递XML参数或接收结果时。<literal>BY REF</literal>，其中一个特定的XML
值保留其节点身份，以及<literal>BY VALUE</literal>，其中传递XML的内容，但不保留节点身份。可以在参数列表之前指定，作为所有参数的默认机制，也可以在任何参数之后指定，以覆盖默认机制。
     </para>

     <para>
      为了说明区别，如果<replaceable>x</replaceable>是一个XML值，那么在SQL:2006环境下的这两个查询将分别产生true和false。

<programlisting>
SELECT XMLQUERY('$a is $b' PASSING BY REF <replaceable>x</replaceable> AS a, <replaceable>x</replaceable> AS b NULL ON EMPTY);
SELECT XMLQUERY('$a is $b' PASSING BY VALUE <replaceable>x</replaceable> AS a, <replaceable>x</replaceable> AS b NULL ON EMPTY);
</programlisting>
     </para>

     <para>
      <productname>PostgreSQL</productname>将在<function>XMLEXISTS</function>或<function>XMLTABLE</function>构造中接受<literal>BY VALUE</literal>或<literal>BY REF</literal>，但它会忽略它们。 <type>xml</type>数据类型持有一个字符串的序列化表示，因此没有节点标识需要保留，并且传递总是有效的<literal>BY VALUE</literal>。
     </para>
    </sect3>

    <sect3>
     <title>不能将命名的参数传递到查询中</title>

     <para>
      基于 XPath 的函数支持传递一个参数作为 XPath 表达式的上下文项，但不支持传递额外的值作为命名参数提供给表达式。
     </para>
    </sect3>

    <sect3>
     <title>无 <type>XML(SEQUENCE)</type>类型</title>类型

     <para>
      <productname>PostgreSQL</productname> <type>xml</type>数据类型只能保存一个值，在<literal>DOCUMENT</literal>或 <literal>CONTENT</literal>形式。 一个XQuery/XPath表达式上下文项必须是一个单一的XML节点或原子值，但XPath 1.0进一步限制它只能是一个XML节点，并且没有允许<literal>CONTENT</literal>的节点类型。 最终的结果是，一个完善的<literal> DOCUMENT </literal>是<productname> PostgreSQL</productname>可以作为XPath上下文项提供的唯一形式的XML值。
     </para>
    </sect3>
   </sect2>
  </sect1>

 </appendix>

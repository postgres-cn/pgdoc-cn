<!-- doc/src/sgml/pageinspect.sgml -->

<sect1 id="pageinspect" xreflabel="pageinspect">
 <title>pageinspect</title>

 <indexterm zone="pageinspect">
  <primary>pageinspect</primary>
 </indexterm>

 <para>
  <filename>pageinspect</>模块提供函数让你从低层次观察数据库页面的内容，这对于调试目的很有用。所有这些函数只能被超级用户使用。
 </para>

 <sect2>
  <title>函数</title>

  <variablelist>
   <varlistentry>
    <term>
     <function>get_raw_page(relname text, fork text, blkno int) 返回 bytea</function>
    <indexterm>
     <primary>get_raw_page</primary>
    </indexterm>
    </term>

    <listitem>
     <para>
      <function>get_raw_page</function>读取提及的关系中的指定块并且以一个<type>bytea</>值的形式返回一个拷贝。这允许得到该块的一个单一的时间一致的拷贝。对于主数据分叉，<replaceable>fork</replaceable>应该是<literal>'main'</literal>，对于空闲空间映射应该是<literal>'fsm'</literal>，对于可见性映射应该是<literal>'vm'</literal>，对于初始化分叉应该是<literal>'init'</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>get_raw_page(relname text, blkno int) 返回 bytea</function>
    </term>

    <listitem>
     <para>
      一个简写版的<function>get_raw_page</function>，用于读取主分叉。等效于<literal>get_raw_page(relname, 'main', blkno)</literal>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>page_header(page bytea) 返回 record</function>
    <indexterm>
     <primary>page_header</primary>
    </indexterm>    
    </term>

    <listitem>
     <para>
      <function>page_header</function>显示所有<productname>PostgreSQL</>堆和索引页面的公共域。
     </para>

     <para>
      用<function>get_raw_page</function>获得的一个页面映像应该作为参数传递。例如：
<screen>
test=# SELECT * FROM page_header(get_raw_page('pg_class', 0));
    lsn    | checksum | flags  | lower | upper | special | pagesize | version | prune_xid
-----------+----------+--------+-------+-------+---------+----------+---------+-----------
 0/24A1B50 |        1 |      1 |   232 |   368 |    8192 |     8192 |       4 |         0
</screen>
      返回的列对应于<structname>PageHeaderData</>结构中的域。详见<filename>src/include/storage/bufpage.h</>。
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>heap_page_items(page bytea) 返回 setof record</function>
    <indexterm>
     <primary>heap_page_items</primary>
    </indexterm>    
    </term>

    <listitem>
     <para>
      <function>heap_page_items</function>显示一个堆页面上所有的行指针。对那些使用中的行指针，元组头部也会被显示。不管元组对于拷贝原始页面时的 MVCC 快照是否可见，它们都会被显示。
     </para>
     <para>
      用<function>get_raw_page</function>获得的一个堆页面映像应该作为参数传递。例如：
<screen>
test=# SELECT * FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      返回的域的解释可见<filename>src/include/storage/itemid.h</>和<filename>src/include/access/htup_details.h</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>bt_metap(relname text) 返回 record</function>
    <indexterm>
     <primary>bt_metap</primary>
    </indexterm>    
    </term>

    <listitem>
     <para>
      <function>bt_metap</function>返回关于一个 B-树索引元页的信息。例如：
<screen>
test=# SELECT * FROM bt_metap('pg_cast_oid_index');
-[ RECORD 1 ]-----
magic     | 340322
version   | 2
root      | 1
level     | 0
fastroot  | 1
fastlevel | 0
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>bt_page_stats(relname text, blkno int) 返回 record</function>
    <indexterm>
     <primary>bt_page_stats</primary>
    </indexterm>    
    </term>

    <listitem>
     <para>
      <function>bt_page_stats</function>返回有关 B-树索引单一页面的总计信息。例如：
<screen>
test=# SELECT * FROM bt_page_stats('pg_cast_oid_index', 1);
-[ RECORD 1 ]-+-----
blkno         | 1
type          | l
live_items    | 256
dead_items    | 0
avg_item_size | 12
page_size     | 8192
free_size     | 4056
btpo_prev     | 0
btpo_next     | 0
btpo          | 0
btpo_flags    | 3
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>bt_page_items(relname text, blkno int) 返回 setof record</function>
    <indexterm>
     <primary>bt_page_items</primary>
    </indexterm>    
    </term>

    <listitem>
     <para>
      <function>bt_page_items</function>返回一个 B-树索引页面上项的所有细节信息。例如：
<screen>
test=# SELECT * FROM bt_page_items('pg_cast_oid_index', 1);
 itemoffset |  ctid   | itemlen | nulls | vars |    data
------------+---------+---------+-------+------+-------------
          1 | (0,1)   |      12 | f     | f    | 23 27 00 00
          2 | (0,2)   |      12 | f     | f    | 24 27 00 00
          3 | (0,3)   |      12 | f     | f    | 25 27 00 00
          4 | (0,4)   |      12 | f     | f    | 26 27 00 00
          5 | (0,5)   |      12 | f     | f    | 27 27 00 00
          6 | (0,6)   |      12 | f     | f    | 28 27 00 00
          7 | (0,7)   |      12 | f     | f    | 29 27 00 00
          8 | (0,8)   |      12 | f     | f    | 2a 27 00 00
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>fsm_page_contents(page bytea) 返回 text</function>
    <indexterm>
     <primary>fsm_page_contents</primary>
    </indexterm>    
    </term>

    <listitem>
     <para>
      <function>fsm_page_contents</function>显示一个 FSM 页面的内部结点结构。输出是一个多行字符串，每一行对应页面中二叉树的一个结点。只有非零节点会被打印。所谓的“next”指针也会被打印，它指向页面中下一个要被返回的槽。
     </para>
     <para>
      关于一个 FSM 页面的结构详见<filename>src/backend/storage/freespace/README</>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

</sect1>

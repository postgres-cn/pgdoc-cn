<!-- doc/src/sgml/maintenance.sgml -->

<chapter id="maintenance">
 <title>日常数据库维护工作</title>

 <indexterm zone="maintenance">
  <primary>维护</primary>
 </indexterm>

 <indexterm zone="maintenance">
  <primary>日常维护</primary>
 </indexterm>

  <para>
   和任何数据库软件一样，<productname>PostgreSQL</>需要定期执行特定的任务来达到最优的性能。这里讨论的任务是<emphasis>必需的</emphasis>，但它们本质上是重复性的并且可以很容易使用<application>cron</application>脚本或Windows的<application>任务计划程序</>等标准工具来自动进行。建立合适的脚本并检查它们是否成功运行是数据库管理员的职责。
  </para>

  <para>
   一个显而易见的维护任务是定期创建数据的后备拷贝。如果没有一个最近的备份，你就不可能在灾难（磁盘失败、或在、错误地删除一个关键表等）后进行恢复。<productname>PostgreSQL</productname>中的备份和恢复机制在<xref linkend="backup">中有详细的介绍。
  </para>

  <para>
   另一种主要类型的维护任务是周期性地<quote>清理</>数据库。该活动在<xref linkend="routine-vacuuming">中讨论。与之相关，更新将被查询规划器使用的统计信息的活动将在<xref linkend="vacuum-for-statistics">中讨论。
  </para>

  <para>
   另一项需要周期性考虑的任务是日志文件管理。这在<xref linkend="logfile-maintenance">中讨论。
  </para>

  <para>
   <ulink
   url="http://bucardo.org/wiki/Check_postgres"><application>check_postgres</></ulink>可用于检测数据库的健康并报告异常情况。<application>check_postgres</>与Nagios和MRTG整合在一起，但也可以被单独运行。
  </para>

  <para>
   相对于其他数据库管理系统，<productname>PostgreSQL</productname>的维护量较低。但是，适当对这些任务加以注意将大有助于愉快和高效地使用该系统。
  </para>

 <sect1 id="routine-vacuuming">
  <title>日常清理</title>

  <indexterm zone="routine-vacuuming">
   <primary>清理</primary>
  </indexterm>

  <para>
   <productname>PostgreSQL</productname>数据库要求周期性的<firstterm>清理</>维护。对于很多安装，让<firstterm>自动清理守护进程</>来执行清理已经足够，如<xref linkend="autovacuum">所述。你可能需要调整其中描述的自动清理参数来获得最佳结果。某些数据库管理员会希望使用手动管理的<command>VACUUM</>命令来对后台进程的活动进行补充或者替换，这通常使用<application>cron</application>或<application>任务计划程序</>脚本来执行。要正确地设置手动管理的清理，最重要的是理解接下来几小节中讨论的问题。依赖自动清理的管理员最好也能略读该内容以帮助他们理解和调整自动清理。
  </para>

  <sect2 id="vacuum-basics">
   <title>清理的基础知识</title>

   <para>
    <productname>PostgreSQL</productname>的<xref linkend="sql-vacuum">命令出于几个原因必须定期处理每一个表：

    <orderedlist>
     <listitem>
      <simpara>恢复或重用被已更新或已删除行所占用的磁盘空间。</simpara>
     </listitem>

     <listitem>
      <simpara>更新被<productname>PostgreSQL</productname>查询规划器使用的数据统计信息。</simpara>
     </listitem>

     <listitem>
      <simpara>更新可见性映射，它可以加速只用索引的扫描。</simpara>
     </listitem>

     <listitem>
      <simpara>保护老旧数据不会由于<firstterm>事务ID回卷</>或<firstterm>多事务ID回卷</>而丢失。</simpara>
     </listitem>
    </orderedlist>

    正如后续小节中解释的，每一个原因都将指示以不同的频率和范围执行<command>VACUUM</>操作。
   </para>

   <para>
    有两种<command>VACUUM</>的变体：标准<command>VACUUM</>和<command>VACUUM FULL</>。<command>VACUUM FULL</>可以收回更多磁盘空间但是运行起来更慢。另外，标准形式的<command>VACUUM</>可以和生产数据库操作并行运行（<command>SELECT</command>、<command>INSERT</command>、<command>UPDATE</command>和<command>DELETE</command>等命令将继续正常工作，但在清理期间你无法使用<command>ALTER TABLE</command>等命令来更新表的定义）。<command>VACUUM FULL</>要求在其工作的表上得到一个排他锁，因此无法和对此表的其他使用并行。因此，通常管理员应该努力使用标准<command>VACUUM</>并且避免<command>VACUUM FULL</>。
   </para>

   <para>
    <command>VACUUM</command>会产生大量I/O流量，这将导致其他活动会话性能变差。可以调整一些配置参数来后台清理活动造成的性能冲击 &mdash; 参阅<xref linkend="runtime-config-resource-vacuum-cost">。
   </para>
  </sect2>

  <sect2 id="vacuum-for-space-recovery">
   <title>恢复磁盘空间</title>

   <indexterm zone="vacuum-for-space-recovery">
    <primary>disk space</primary>
   </indexterm>

   <para>
    在<productname>PostgreSQL</productname>中，一次行的<command>UPDATE</>或<command>DELETE</>不会立即移除该行的旧版本。这种方法对于从多版本并发控制（<acronym>MVCC</>，见<xref linkend="mvcc">）获益是必需的：当旧版本仍可能对其他事务可见时，它不能被删除。但是最后，任何事务都不会再对一个过时的或者被删除的行版本感兴趣。它所占用的空间必须被回收来用于新行，这样可避免磁盘空间需求的无限制增长。这通过运行<command>VACUUM</>完成。
   </para>

   <para>
    <command>VACUUM</command>的标准形式移除表和索引中的死亡行版本并将该空间标记为可在未来重用。不过，它将不会把该空间交还给操作系统，除非在特殊的情况中表尾部的一个或多个页面变成完全空闲并且能够很容易地得到一个排他表锁。相反，<command>VACUUM FULL</>通过把死亡空间之外的内容写成一个完整的新版本表文件来主动紧缩表。这将最小化表的尺寸，但是要花较长的时间。它也需要额外的磁盘空间用于表的新副本，直到操作完成。
   </para>

   <para>
    例行清理的一般目标是多做标准的<command>VACUUM</>来避免需要<command>VACUUM FULL</>。自动清理守护进程尝试这样工作，并且实际上永远不会发出<command>VACUUM FULL</>。在这种方法中，其思想不是让表保持它们的最小尺寸，而是保持磁盘空间使用的稳定状态：每个表占用的空间等于其最小尺寸外加清理之间被用完的空间。尽管<command>VACUUM FULL</>可被用来把一个表收缩回它的最小尺寸并将该磁盘空间交还给操作系统，但是如果该表将在未来再次增长这样就没什么意义。因此，对于维护频繁被更新的表，适度运行标准<command>VACUUM</>运行比少量运行<command>VACUUM FULL</>要更好。
   </para>

   <para>
    一些管理员更喜欢自己计划清理，例如在晚上负载低时做所有的工作。根据一个固定日程来做清理的难点在于，如果一个表有一次预期之外的更新活动尖峰，它可能膨胀得真正需要<command>VACUUM FULL</>来回收空间。使用自动清理守护进程可以减轻这个问题，因为守护进程会根据更新活动动态规划清理操作。除非你的负载是完全可以预估的，完全禁用守护进程是不理智的。一种可能的折中方案是设置守护进程的参数，这样它将只对异常的大量更新活动做出反应，因而保证事情不会失控，而在负载正常时采用有计划的<command>VACUUM</>来做批量工作。
   </para>

   <para>
    对于那些不使用自动清理的用户，一种典型的方法是计划一个数据库范围的<command>VACUUM</>，该操作每天在低使用量时段执行一次，并根据需要辅以在重度更新表上的更频繁的清理（一些有着极高更新率的安装会每几分钟清理一次它们的最繁忙的表）。如果你在一个集簇中有多个数据库，别忘记<command>VACUUM</command>每一个，你会用得上<xref linkend="app-vacuumdb">程序。
   </para>

   <tip>
   <para>
    当一个表因为大量更新或删除活动而包含大量死亡行版本时，纯粹的<command>VACUUM</>可能不能令人满意。如果你有这样一个表并且你需要回收它占用的过量磁盘空间，你将需要使用<command>VACUUM FULL</>，或者<xref linkend="sql-cluster">，或者<xref linkend="sql-altertable">的表重写变体之一。这些命令重写该表的一整个新拷贝并且为它构建新索引。所有这些选项都要求排他锁。注意它们也临时使用大约等于该表尺寸的额外磁盘空间，因为直到新表和索引完成之前旧表和索引都不能被释放。
   </para>
   </tip>

   <tip>
   <para>
    如果你有一个表，它的整个内容会被周期性删除，考虑用<xref linkend="sql-truncate">而不是先用<command>DELETE</command>再用<command>VACUUM</command>。<command>TRUNCATE</command>会立刻移除该表的整个内容，而不需要一次后续的<command>VACUUM</command>或<command>VACUUM FULL</command>来回收现在未被使用的磁盘空间。其缺点是会违背严格的 MVCC 语义。
   </para>
   </tip>
  </sect2>

  <sect2 id="vacuum-for-statistics">
   <title>更新规划器统计信息</title>

   <indexterm zone="vacuum-for-statistics">
    <primary>statistics</primary>
    <secondary>of the planner</secondary>
   </indexterm>

   <indexterm zone="vacuum-for-statistics">
    <primary>ANALYZE</primary>
   </indexterm>

   <para>
    <productname>PostgreSQL</productname>查询规划器依赖于有关表内容的统计信息来为查询产生好的计划。这些统计信息由<xref linkend="sql-analyze">命令收集，它除了直接被调用之外还可以作为<command>VACUUM</>的一个可选步骤被调用。拥有适度准确的统计信息很重要，否则差的计划可能降低数据库性能。
   </para>

   <para>
    自动清理守护进程如果被启用，当一个表的内容被改变得足够多时，它将自动发出<command>ANALYZE</>命令。不过，管理员可能更喜欢依靠手动的<command>ANALYZE</>操作，特别是如果知道一个表上的更新活动将不会影响<quote>感兴趣的</>列的统计信息时。守护进程严格地按照一个被插入或更新行数的函数来计划<command>ANALYZE</>，它不知道那是否将导致有意义的统计信息改变。
   </para>

   <para>
    正如用于空间恢复的清理一样，频繁更新统计信息对重度更新的表更加有用。但即使对于一个重度更新的表，如果该数据的统计分布没有很大改变，也没有必要更新统计信息。一个简单的经验法则是考虑表中列的最大和最小值改变了多少。例如，一个包含行被更新时间的<type>timestamp</type>列将在行被增加和更新时有一直增加的最大值；这样一列将可能需要更频繁的统计更新，而一个包含一个网站上被访问页面 URL 的列则不需要。URL 列可以经常被更改，但是其值的统计分布的变化相对很慢。
   </para>

   <para>
    It is possible to run 可以在指定表上运行<command>ANALYZE</>并且只在表的指定列上运行，因此如果你的应用需要，可以更加频繁地更新某些统计。但实际上，通常只分析整个数据库是最好的，因为它是一种很快的操作。<command>ANALYZE</>对一个表的行使用一种统计的随机采样，而不是读取每一个单一行。
   </para>

   <tip>
    <para>
     尽管对每列的<command>ANALYZE</>频度调整可能不是非常富有成效，你可能会发现值得为每列调整被<command>ANALYZE</>收集统计信息的详细程度。经常在<literal>WHERE</>中被用到的列以及数据分布非常不规则的列可能需要比其他列更细粒度的数据直方图。见<command>ALTER TABLE SET STATISTICS</>，或者使用<xref linkend="guc-default-statistics-target">配置参数改变数据库范围的默认值。
    </para>

    <para>
     还有，默认情况下关于函数的选择度的可用信息是有限的。但是，如果你创建一个使用函数调用的表达式索引，关于该函数的有用的统计信息将被收集，这些信息能够大大提高使用该表达式索引的查询计划的质量。
    </para>
   </tip>

   <tip>
    <para>
     自动清理守护进程不会为外部表发出<command>ANALYZE</>命令，因为无法确定一个合适的频度。如果你的查询需要外部表的统计信息来正确地进行规划，比较好的方式是按照一个合适的时间表在那些表上手工运行<command>ANALYZE</>命令。
    </para>
   </tip>
  </sect2>

  <sect2 id="vacuum-for-visibility-map">
   <title>更新可见性映射</title>

   <para>
    清理机制为每一个表维护着一个<link linkend="storage-vm">可见性映射</>，它被用来跟踪哪些页面只包含对所有活动事务（以及所有未来的事务，直到该页面被再次修改）可见的元组。这样做有两个目的。第一，清理本身可以在下一次运行时跳过这样的页面，因为其中没有什么需要被清除。
   </para>

   <para>
    第二，这允许<productname>PostgreSQL</productname>回答一些只用索引的查询，而不需要引用底层表。因为<productname>PostgreSQL</productname>的索引不包含元组的可见性信息，一次普通的索引扫描会为每一个匹配的索引项获取堆元组，用来检查它是否能被当前事务所见。另一方面，一次<firstterm>只用索引的扫描</>会首先检查可见性映射。如果它了解到在该页面上的所有元组都是可见的，堆获取就可以被跳过。这对大数据集很有用，因为可见性映射可以防止磁盘访问。可见性映射比堆小很多，因此即使堆非常大，可见性映射也可以很容易地被缓存起来。
   </para>
  </sect2>

  <sect2 id="vacuum-for-wraparound">
   <title>防止事务 ID 回卷失败</title>

   <indexterm zone="vacuum-for-wraparound">
    <primary>事务 ID</primary>
    <secondary>回卷</secondary>
   </indexterm>

    <indexterm>
     <primary>回卷</primary>
     <secondary>事务 ID 的</secondary>
    </indexterm>

   <para>
    <productname>PostgreSQL</productname>的 MVCC 事务语义依赖于能够比较事务 ID（<acronym>XID</>）数字：如果一个行版本的插入 XID 大于当前事务的 XID，它就是<quote>属于未来的</>并且不应该对当前事务可见。但是因为事务 ID 的尺寸有限（32位），一个长时间（超过 40 亿个事务）运行的集簇会遭受到<firstterm>事务 ID 回卷</>问题：XID 计数器回卷到 0，并且本来属于过去的事务突然间就变成了属于未来 &mdash; 这意味着它们的输出变成不可见。简而言之，灾难性的数据丢失（实际上数据仍然在那里，但是如果你不能得到它也无济于事）。为了避免发生这种情况，有必要至少每 20 亿个事务就清理每个数据库中的每个表。
   </para>

   <para>
    周期性的清理能够解决该问题的原因是，<command>VACUUM</>会把行标记为
    <emphasis>冻结</>，这表示它们是被一个在足够远的过去提交的事务所插入，
    这样从 MVCC 的角度来看，效果就是该插入事务对所有当前和未来事务来说当然都
    是可见的。<productname>PostgreSQL</productname>保留了一个特殊的 XID 
    （<literal>FrozenTransactionId</>），这个 XID 并不遵循普通 XID 的比较规则
    并且总是被认为比任何普通 XID 要老。普通 XID 使用模-2<superscript>32</>算
    法来比较。这意味着对于每一个普通 XID都有 20 亿个 XID <quote>更老</>并且
    有 20 亿个<quote>更新</>，另一种解释的方法是普通 XID 空间是没有端点的环。
    因此，一旦一个行版本创建时被分配了一个特定的普通 XID，该行版本将成为接下
    来 20 亿个事务的<quote>过去</>（与我们谈论的具体哪个普通 XID 无关）。如
    果在 20 亿个事务之后该行版本仍然存在，它将突然变得好像在未来。要阻止这一切
    发生，被冻结行版本会被看成其插入 XID 为<literal>FrozenTransactionId</>，
    这样它们对所有普通事务来说都是<quote>在过去</>，而不管回卷问题。并且这样
    的行版本将一直有效直到被删除，不管它有多旧。
   </para>

   <para>
    <xref linkend="guc-vacuum-freeze-min-age">控制在其行版本被冻结前一个 XID
    值应该有多老。如果被冻结的行将很快会被再次修改，增加这个设置可以避免不必要
    的工作。但是减少这个设置会增加在表必须再次被清理之前能够流逝的事务数。
   </para>

   <para>
    <command>VACUUM</>通常会跳过不含有任何死亡行版本的页面，但是不会跳过那些含有带旧 XID 值的行版本的页面。要保证所有旧的行版本都已经被冻结，需要对整个表做一次扫描。<xref linkend="guc-vacuum-freeze-table-age">控制<command>VACUUM</>什么时候这样做：如果该表经过<varname>vacuum_freeze_table_age</>减去<varname>vacuum_freeze_min_age</>个事务还没有被完全扫描过，则会强制一次全表清扫。将这个参数设置为 0 将强制<command>VACUUM</>总是扫描所有页面而实际上忽略可见性映射。
   </para>

   <para>
    一个表能保持不被清理的最长时间是 20 亿个事务减去<command>VACUUM</>上次扫描全表时的<varname>vacuum_freeze_min_age</>值。如果它超过该时间没有被清理，可能会导致数据丢失。要保证这不会发生，将在任何包含比<xref linkend="guc-autovacuum-freeze-max-age">配置参数所指定的年龄更老的 XID 的未冻结行的表上调用自动清理（即使自动清理被禁用也会发生）。
   </para>

   <para>
    这意味着如果一个表没有被清理，大约每<varname>autovacuum_freeze_max_age</>减去<varname>vacuum_freeze_min_age</>事务就会在该表上调用一次自动清理。对那些为了空间回收目的而被正常清理的表，这是无关紧要的。然而，对静态表（包括接收插入但没有更新或删除的表）就没有为空间回收而清理的需要，因此尝试在非常大的静态表上强制自动清理的间隔最大化会非常有用。显然我们可以通过增加<varname>autovacuum_freeze_max_age</>或减少<varname>vacuum_freeze_min_age</>来实现此目的。
   </para>

   <para>
    <varname>vacuum_freeze_table_age</>的实际最大值是 0.95 * <varname>autovacuum_freeze_max_age</>，高于它的设置将被上限到最大值。一个高于<varname>autovacuum_freeze_max_age</>的值没有意义，因为不管怎样在那个点上都会触发一次防回卷自动清理，并且 0.95 的乘数为在防回卷自动清理发生之前运行一次手动<command>VACUUM</>留出了一些空间。作为一种经验法则，<command>vacuum_freeze_table_age</>应当被设置成一个低于<varname>autovacuum_freeze_max_age</>的值，留出一个足够的空间让一次被正常调度的<command>VACUUM</>或一次被正常删除和更新活动触发的自动清理可以在这个窗口中被运行。将它设置得太接近可能导致防回卷自动清理，即使该表最近因为回收空间的目的被清理过，而较低的值将导致更频繁的全表扫描。
   </para>

   <para>
    增加<varname>autovacuum_freeze_max_age</>（以及和它一起的<varname>vacuum_freeze_table_age</>）的唯一不足是数据库集簇的<filename>pg_clog</>子目录将占据更多空间，因为它必须存储所有向后<varname>autovacuum_freeze_max_age</>范围内的所有事务的提交状态。提交时为每个事务使用两个二进制位，因此如果<varname>autovacuum_freeze_max_age</>被设置为它的最大允许值 20 亿，<filename>pg_clog</>将会增长到大约 0.5 吉字节。如果这对于你的总数据库尺寸是微小的，我们推荐设置<varname>autovacuum_freeze_max_age</>为它的最大允许值。否则，基于你想要允许<filename>pg_clog</>使用的存储空间大小来设置它（默认情况下 2 亿个事务大约等于<filename>pg_clog</>的 50 MB存储空间）。
   </para>

   <para>
    减小<varname>vacuum_freeze_min_age</>的一个不足之处是它可能导致<command>VACUUM</>做无用的工作：如果该行在被替换成<literal>FrozenXID</>之后很快就被修改（导致该行获得一个新的 XID），那么冻结一个行版本就是浪费时间。因此该设置应该足够大，这样直到行不再可能被修改之前，它们都不会被冻结。
   </para>

   <para>
    为了跟踪一个数据库中最老的未冻结 XID 的年龄，<command>VACUUM</>在系统表<structname>pg_class</>和<structname>pg_database</>中存储 XID 的统计信息。特别地，一个表的<structname>pg_class</>行的<structfield>relfrozenxid</>列包含被该表的上一次全表<command>VACUUM</>所用的冻结截止 XID。该表中所有被有比这个截断 XID 老的普通 XID 的事务插入的行 都确保被冻结。相似地，一个数据库的<structname>pg_database</>行的<structfield>datfrozenxid</>列是出现在该数据库中的未冻结 XID 的下界 &mdash; 它只是数据库中每一个表的<structfield>relfrozenxid</>值的最小值。一种检查这些信息的方便方法是执行这样的查询：

<programlisting>
SELECT c.oid::regclass as table_name,
       greatest(age(c.relfrozenxid),age(t.relfrozenxid)) as age
FROM pg_class c
LEFT JOIN pg_class t ON c.reltoastrelid = t.oid
WHERE c.relkind IN ('r', 'm');

SELECT datname, age(datfrozenxid) FROM pg_database;
</programlisting>

    <literal>age</>列度量从该截断 XID 到当前事务 XID 的事务数。
   </para>

   <para>
    <command>VACUUM</>通常只扫描从上次清理后备修改过的页面，但是只有当全表被扫描时<structfield>relfrozenxid</>才能被推进。当<structfield>relfrozenxid</>比<varname>vacuum_freeze_table_age</>个事务还老时、当<command>VACUUM</>的<literal>FREEZE</>选项被使用时或当所有页面正好要求清理来移除死亡行版本时，全表将被扫描。当<command>VACUUM</>扫描全表时，在它被完成后，<literal>age(relfrozenxid)</>应该比被使用的<varname>vacuum_freeze_min_age</>设置略大（比在<command>VACUUM</>开始后开始的事务数多）。如果在<varname>autovacuum_freeze_max_age</>被达到之前没有全表扫描<command>VACUUM</>在该表上被发出，将很快为该表强制一次自动清理。
   </para>

   <para>
    如果出于某种原因自动清理无法从一个表中清除旧的 XID，当数据库的最旧 XID 和回卷点之间达到 1 千万个事务时，系统将开始发出这样的警告消息：

<programlisting>
WARNING:  database "mydb" must be vacuumed within 177009986 transactions
HINT:  To avoid a database shutdown, execute a database-wide VACUUM in "mydb".
</programlisting>

    （如该示意所建议的，一次手动的<command>VACUUM</>应该会修复该问题；但是注意该次<command>VACUUM</>必须由一个超级用户来执行，否则它将无法处理系统目录并且因而不能推进数据库的<structfield>datfrozenxid</>）。如果这些警告被忽略，一旦距离回滚点只剩下 1 百万个事务时，该系统将会关闭并且拒绝开始任何新的事务：

<programlisting>
ERROR:  database is not accepting commands to avoid wraparound data loss in database "mydb"
HINT:  Stop the postmaster and vacuum that database in single-user mode.
</programlisting>

    这一百万个事务的富余是为了让管理员能通过手动执行所要求的<command>VACUUM</>命令进行恢复而不丢失数据。但是，由于一旦系统进入到安全关闭模式，它将不会执行命令。做这个操作的唯一方法是停止服务器并且以单一用户启动服务器来执行<command>VACUUM</>。单一用户模式中不会强制该关闭模式。关于使用单一用户模式的细节请见<xref linkend="app-postgres">参考页。
   </para>

   <sect3 id="vacuum-for-multixact-wraparound">
    <title>多事务和回卷</title>

    <indexterm>
     <primary>MultiXactId</primary>
    </indexterm>

    <indexterm>
     <primary>wraparound</primary>
     <secondary>of multixact IDs</secondary>
    </indexterm>

    <para>
     <firstterm>Multixact ID</>被用来支持被多个事务锁定的行。由于在一个元组头部
     只有有限的空间可以用来存储锁信息，所以只要有多于一个事务并发地锁住一个行，
     锁信息将使用一个<quote>多个事务 ID</>（或简称多事务 ID）来编码。任何特定
     多事务 ID 中包括的事务 ID 的信息被独立地存储在<filename>pg_multixact</>子目
     录中，并且只有多事务 ID 出现在元组头部的<structfield>xmax</>域中。和事务 ID 
     类似，多事务 ID 也是用一个 32 位计数器实现，并且也采用了相似的存储，这些都要
     求仔细的年龄管理、存储清除和回卷处理。在每个多事务中都有一个独立的存储区域
     保存成员列表，它也使用一个 32 位计数器并且也应被管理。
    </para>

    <para>
     在一次<command>VACUUM</>表扫描（部分或者全部）期间，任何比
     <xref linkend="guc-vacuum-multixact-freeze-min-age">要老的多事务 ID 会被
     替换为一个不同的值，该值可以是零值、一个单一事务 ID 或者一个更新的多事务 ID。
     对于每一个表，<structname>pg_class</>.<structfield>relminmxid</>存储了在
     该表任意元组中仍然存在的最老可能多事务 ID。如果这个值比
     <xref linkend="guc-vacuum-multixact-freeze-table-age">老，
     将强制一次全表扫描。全表<command>VACUUM</>扫描（不管是什么导
     致它们）将为表推进该值。最后，当所有数据库中的所有表被扫描并且它们的最老多事
     务值被推进，较老的多事务的磁盘存储可以被移除。
    </para>

    <para>
     作为一种安全设备，对任何多事务年龄超过
     <xref linkend="guc-autovacuum-multixact-freeze-max-age">的表，
     都将发生一次全表清理扫描。如果已用的成员存储空间超过总量的 50%，全表清理扫描
     也将逐步在所有表上进行，这会从那些具有最老多事务年龄的表开始。即使自动清理被
     在名义上被禁用，这两中类型的全表扫描都将会发生。
    </para>
   </sect3>
  </sect2>

  <sect2 id="autovacuum">
   <title>自动清理后台进程</title>

   <indexterm>
    <primary>自动清理</primary>
    <secondary>一般信息</secondary>
   </indexterm>
   <para>
    <productname>PostgreSQL</productname>有一个可选的但是被高度推荐的特性<firstterm>autovacuum</firstterm>，它的目的是自动执行<command>VACUUM</command>和<command>ANALYZE </command>命令。当它被启用时，自动清理会检查被大量插入、更新或删除元组的表。这些检查会利用统计信息收集功能，因此除非<xref linkend="guc-track-counts">被设置为<literal>true</literal>，自动清理不能被使用。在默认配置下，自动清理是被启用的并且相关配置参数已被正确配置。
   </para>

   <para>
    <quote>自动清理后台进程</>实际上由多个进程组成。有一个称为<firstterm>自动清理启动器</firstterm>的常驻后台进程， 它负责为所有数据库启动<firstterm>自动清理工作者</firstterm>进程。启动器将把工作散布在一段时间上，它每隔<xref linkend="guc-autovacuum-naptime">秒尝试在每个数据库中启动一个工作者（因此，如果安装中有<replaceable>N</>个数据库，则每 <varname>autovacuum_naptime</>/<replaceable>N</>秒将启动一个新的工作者）。在同一时间只允许最多<xref linkend="guc-autovacuum-max-workers">个工作者进程运行。如果有超过<varname>autovacuum_max_workers</>个数据库需要被处理，下一个数据库将在第一个工作者结束后马上被处理。每一个工作者进程将检查其数据库中的每一个表并且在需要时执行<command>VACUUM</>和/或<command>ANALYZE</>。<varname>log_autovacuum_min_duration</varname>可以被用来监控自动清理活动。
   </para>

   <para>
    如果在一小段时间内多个大型表都变得可以被清理，所有的自动清理工作者可能都会被占用来在一段长的时间内清理这些表。这将会造成其他的表和数据库无法被清理，直到一个工作者变得可用。对于一个数据库中的工作者数量并没有限制，但是工作者确实会试图避免重复已经被其他工作者完成的工作。注意运行着的工作者的数量不会被计入<xref linkend="guc-max-connections">或<xref linkend="guc-superuser-reserved-connections">限制。
   </para>

   <para>
    <structfield>relfrozenxid</>值比<xref linkend="guc-autovacuum-freeze-max-age">事务年龄更大的表总是会被清理（这页表示这些表的冻结最大年龄被通过表的存储参数修改过，参见后文）。否则，如果从上次<command>VACUUM</command>以来失效的元组数超过<quote>清理阈值</quote>，表也会被清理。清理阈值定义为：
<programlisting>
清理阈值 = 清理基本阈值 + 清理缩放系数 * 元组数
</programlisting>
    其中清理基本阈值为<xref linkend="guc-autovacuum-vacuum-threshold">，
    清理缩放系数为<xref linkend="guc-autovacuum-vacuum-scale-factor">，
    元组数为<structname>pg_class</structname>.<structfield>reltuples</structfield>。
    失效元组的数量从统计信息收集器获得，它是一个由每个<command>UPDATE</command>和<command>DELETE</command>命令更新的半准确的计数（它只是半准确，是因为在高负载的情况下某些信息可能会丢失）。如果表的<structfield>relfrozenxid</>值比<varname>vacuum_freeze_table_age</>事务年龄更大，整个表将被扫描以冻结旧元组并增长<structfield>relfrozenxid</>，否则只有从上次清理以来被修改的页面会被扫描。
   </para>

   <para>
    对于分析，也使用了一个相似的阈值：
<programlisting>
分析阈值 = 分析基本阈值 + 分析缩放系数 * 元组数
</programlisting>
    该阈值将与自从上次<command>ANALYZE</command>以来被插入、更新或删除的元组数进行比较。
   </para>

   <para>
    临时表不能被自动清理访问。因此，临时表的清理和分析操作必须通过会话期间的SQL命令来执行。
   </para>

   <para>
    默认的阈值和缩放系数都取自于<filename>postgresql.conf</filename>，但是可以为每一个表重写它们，详情参见<xref linkend="sql-createtable-storage-parameters"  endterm="sql-createtable-storage-parameters-title">。如果一个设置被通过存储参数修改，则使用该值，否则使用全局设置。全局设置请参阅<xref linkend="runtime-config-autovacuum">。
   </para>

   <para>
    除了基本阈值和缩放系数，还有6个可以通过表的存储参数设置的自动清理参数。第一个参数是<literal>autovacuum_enabled</>，它可以被设置为<literal>false</literal>来指示自动清理后台进程整个跳过特定的表。在这种情况中自动清理只会在需要防止事务ID回卷时清理该表。另外两个参数是<varname>autovacuum_vacuum_cost_delay</>和<varname>autovacuum_vacuum_cost_limit</>，它们被用来设置表相关的基于代价的清理延迟特性的值（参见<xref linkend="runtime-config-resource-vacuum-cost">）。
    <varname>autovacuum_freeze_min_age</>、
    <varname>autovacuum_freeze_max_age</>和
    <varname>autovacuum_freeze_table_age</>被分别用来设置<xref linkend="guc-vacuum-freeze-min-age">、
    <xref linkend="guc-autovacuum-freeze-max-age">和
    <xref linkend="guc-vacuum-freeze-table-age">的值。
   </para>

   <para>
    当多个工作者运行时，在所有运行着的工作者之间代价延迟参数是
    <quote>平衡的</quote>，这样不管实际运行的工作者数量是多少，
    对于系统的总体 I/O 影响总是相同的。不过，<literal>autovacuum_vacuum_cost_delay</>
    或<literal>autovacuum_vacuum_cost_limit</>被设置的任何正在处理表的工作者不会
    被考虑在均衡算法之中。
   </para>
  </sect2>
 </sect1>


 <sect1 id="routine-reindex">
  <title>日常重索引</title>

  <indexterm zone="routine-reindex">
   <primary>重索引</primary>
  </indexterm>

  <para>
   在某些情况下值得周期性地使用<xref linkend="sql-reindex">命令或一系列独立重构步骤来重建索引。

  </para>

  <para>
   已经完全变成空的B树索引页面被收回重用。但是，还是有一种低效的空间利用的可能性：如果一个页面上除少量索引键之外的全部键被删除，该页面仍然被分配。因此，在这种每个范围中大部分但不是全部键最终被删除的使用模式中，可以看到空间的使用是很差的。对于这样的使用模式，推荐使用定期重索引。
  </para>

  <para>
   对于非B树索引可能的膨胀还没有很好地定量分析。在使用非B树索引时定期监控索引的物理尺寸是个好主意。
  </para>

  <para>
   还有，对于B树索引，一个新建立的索引比更新了多次的索引访问起来要略快， 因为在新建立的索引上，逻辑上相邻的页面通常物理上也相邻（这样的考虑目前并不适用于非B树索引）。仅仅为了提高访问速度也值得定期重索引。
  </para>

  <para>
   <xref linkend="sql-reindex">在所有情况下都可以安全和容易地使用。但是由于该命令要求一个排他表锁，因此更好的方法是用一个由创建和替换步骤组成的序列来执行索引重建。支持带<literal>CONCURRENTLY</>选项的<xref linkend="sql-createindex">的索引类型可以用这种方式重建。如果创建成功并且得到的索引是可用的，则原来的索引可以使用<xref linkend="sql-alterindex">和<xref linkend="sql-dropindex">的命令组合替换成新创建的索引。当一个索引被用于强制唯一性或者其他约束时，可能需要用<xref linkend="sql-altertable">将现有的约束换成由新索引所强制的约束。在使用这种多步重建方法之前应仔细地检查，因为对于哪些索引可以采用这种方法重索引是有限制的，并且出现的错误必须被处理。
  </para>
 </sect1>


 <sect1 id="logfile-maintenance">
  <title>日志文件维护</title>

  <indexterm zone="logfile-maintenance">
   <primary>服务器日志</primary>
   <secondary>日志文件维护</secondary>
  </indexterm>

  <para>
   把数据库服务器的日志输出保存在一个地方是个好主意， 而不是仅仅通过<filename>/dev/null</>丢弃它们。 在进行问题诊断的时候，日志输出是非常宝贵的。不过，日志输出可能很庞大（特别是在比较高的调试级别上）， 因此你不会希望无休止地保存它们。你需要<emphasis>轮转</>日志文件， 这样在一段合理的时间后会开始新的日志文件并且移除旧的。
  </para>

  <para>
   如果你简单地把<command>postgres</command>的<systemitem>stderr</>定向到一个文件中，你会得到日志输出， 但是截断该日志文件的唯一方法是停止并重起服务器。这样做对于开发环境中使用的<productname>PostgreSQL</productname>可能是可接受的，但是你肯定不想在生产环境上这么干。
  </para>

  <para>
   一个更好的办法是把服务器的<systemitem>stderr</>输出发送到某种日志轮转程序里。 我们有一个内建的日志轮转程序，你可以通过在 <filename>postgresql.conf</>里设置配置参数<varname>logging_collector</>为<literal>true</>的办法启用它。该程序的控制参数在 <xref linkend="runtime-config-logging-where">里描述。你也可以使用这种方法把日志数据捕捉成机器可读的<acronym>CSV</>（逗号分隔值）格式。
  </para>

  <para>
   另外，如果在你已经使用的其他服务器软件中有一个外部日志轮转程序，你可能更喜欢使用它。 比如，包含在<productname>Apache</productname>发布里的<application>rotatelogs</application>工具就可以用于<productname>PostgreSQL</productname>。 要这么做，只需要把服务器的<systemitem>stderr</>用管道重定向到要用的程序。 如果你用<command>pg_ctl</>启动服务器，那么<systemitem>stderr</>已经重定向到<systemitem>stdout</>， 因此你只需要一个管道命令，比如：

<programlisting>
pg_ctl start | rotatelogs /var/log/pgsql_log 86400
</programlisting>
  </para>

  <para>
   另外一种生产级的管理日志输出的方法就是把它们发送给<application>syslog</>，让<application>syslog</>处理文件轮转。 要利用这个工具，我们需要设置<filename>postgresql.conf</>里的<varname>log_destination</>配置参数设置为<literal>syslog</>（记录<literal>syslog</>日志）。然后在你想强迫<application>syslog</>守护进程开始写入一个新日志文件的时候， 你就可以发送一个 <literal>SIGHUP</literal>信号给它。 如果你想自动进行日志轮转，可以配置<application>logrotate</application>程序处理 来自<application>syslog</application>的日志文件。
  </para>

  <para>
   不过，在很多系统上，<application>syslog</>不是非常可靠，特别是在面对大量日志消息的情况下； 它可能在你最需要那些消息的时候截断或者丢弃它们。另外，在<productname>Linux</>，<application>syslog</>会把每个消息刷写到磁盘上， 这将导致很差的性能（你可以在<application>syslog</>配置文件里面的文件名开头使用一个<quote><literal>-</></>来禁用这种行为）。
  </para>

  <para>
   请注意上面描述的所有解决方案关注的是在可配置的间隔上开始一个新的日志文件， 但它们并没有处理对旧的、不再需要的日志文件的删除。你可能还需要设置一个批处理任务来定期地删除旧日志文件。 另一种可能的方法是配置日志轮转程序，让它循环地覆盖旧的日志文件。
  </para>

  <para>
   <ulink url="http://dalibo.github.io/pgbadger/"><productname>pgBadger</productname></ulink>是一个外部项目，它可以进行日志文件的深度分析。
   <ulink
   url="http://bucardo.org/wiki/Check_postgres"><productname>check_postgres</productname></ulink>可在重要消息出现在日志文件中时向Nagios提供警告，也可以探测很多其他的特别情况。
  </para>
 </sect1>
</chapter>

<!-- doc/src/sgml/uuid-ossp.sgml -->

<sect1 id="uuid-ossp" xreflabel="uuid-ossp">
 <title>uuid-ossp</title>

 <indexterm zone="uuid-ossp">
  <primary>uuid-ossp</primary>
 </indexterm>

 <para>
  <filename>uuid-ossp</>模块提供函数使用几种标准算法之一产生通用唯一标识符（UUID）。还提供产生某些特殊 UUID 常量的函数。
 </para>

 <sect2>
  <title><literal>uuid-ossp</literal> 函数</title>

  <para>
   <xref linkend="uuid-ossp-functions">展示了可用来产生 UUID 的函数。相关标准 ITU-T Rec. X.667、ISO/IEC 9834-8:2005 以及 RFC 4122 指定了四种用于产生 UUID 的算法，分别用版本号 1、3、4、5 标识（没有版本 2 的算法）。这些算法中的每一个都适合于不同的应用集合。
  </para>

  <table id="uuid-ossp-functions">
   <title>用于 UUID 产生的函数</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>函数</entry>
      <entry>描述</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><function>uuid_generate_v1()</function><indexterm><primary>uuid_generate_v1</primary></indexterm></entry>
      <entry>
       <para>
        这个函数产生一个版本 1 的 UUID。这涉及到计算机的 MAC 地址和一个时间戳。注意这种 UUID 会泄露产生该标识符的计算机标识以及产生的时间，因此它不适合某些对安全性很敏感的应用。
       </para>
      </entry>
     </row>
     <row>
      <entry><function>uuid_generate_v1mc()</function><indexterm><primary>uuid_generate_v1mc</primary></indexterm></entry>
      <entry>
       <para>
        这个函数产生一个版本 1 的 UUID，但是使用一个随机广播 MAC 地址而不是该计算机真实的 MAC 地址。
       </para>
      </entry>
     </row>
     <row>
      <entry><function>uuid_generate_v3(namespace uuid, name text)</function><indexterm><primary>uuid_generate_v3</primary></indexterm></entry>
      <entry>
       <para>
        这个函数使用指定的输入名称在给定的名字空间中产生一个版本 3 的 UUID。该名字空间应该是由<function>uuid_ns_*()</>函数（如<xref linkend="uuid-ossp-constants">所示）产生的特殊常量之一（理论上它可以是任意 UUID）。名称是选择的名字空间中的一个标识符。
       </para>

       <para>
        例如：

<programlisting>
SELECT uuid_generate_v3(uuid_ns_url(), 'http://www.postgresql.org');
</programlisting>

        名称参数将使用 MD5 进行哈希，因此从产生的 UUID 中得不到明文。采用这种方法的 UUID 生成没有随机性并且不涉及依赖于环境的元素，因此是可以重现的。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_generate_v4()</literal></entry>
      <entry>
       <para>
        这个函数产生一个版本 4 的 UUID，它完全从随机数产生。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_generate_v5(namespace uuid, name text)</literal></entry>
      <entry>
       <para>
        这个函数产生一个版本 5 的 UUID，它和版本 3 的 UUID 相似，但是采用的是 SHA-1 作为哈希方法。版本 5 比版本 3 更好，因为 SHA-1 被认为比 MD5 更安全。
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="uuid-ossp-constants">
   <title>返回 UUID 常量的函数</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal>uuid_nil()</literal></entry>
      <entry>
       <para>
        一个<quote>nil</> UUID 常量，它不作为一个真正的 UUID 发生。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_ns_dns()</literal></entry>
      <entry>
       <para>
        为 UUID 指定 DNS 名字空间的常量。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_ns_url()</literal></entry>
      <entry>
       <para>
        为 UUID 指定 URL 名字空间的常量。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_ns_oid()</literal></entry>
      <entry>
       <para>
        为 UUID 指定 ISO 对象标识符（OID） 名字空间的常量（这属于 ASN.1 OID，它与<productname>PostgreSQL</>使用的 OID 无关）。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_ns_x500()</literal></entry>
      <entry>
       <para>
        为 UUID 指定 X.500 可识别名（DN）名字空间的常量。Constant designating the X.500 distinguished name (DN) namespace for
        UUIDs.
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>
 
 <sect2>
  <title>编译<filename>uuid-ossp</></title>

  <para>
   在历史上这个模块依赖于 OSSP UUID 库，这也是这个模块名称的由来。虽然
   现在还能在<ulink url="http://www.ossp.org/pkg/lib/uuid/"></ulink>上
   找到 OSSP UUID 库，但是它已经不再被维护并且越来越难以被一直到新的平台。
   <filename>uuid-ossp</>现在在一些平台上可以脱离 OSSP 库被编译。在
   FreeBSD、NetBSD 和一些其他源自 BSD 的平台上，在核心的<filename>libc</>
   库中已经包括了合适的 UUID 创建函数。在 Linux、OS X和一些其他平台上，
   <filename>libuuid</>库中提供了合适的函数，它最初是来自于
   <literal>e2fsprogs</>项目（不过在现代 Linux 上它被认为是
   <literal>util-linux-ng</>的一部分）。在调用<filename>configure</>时，
   指定<option>--with-uuid=bsd</option>可使用 BSD 的函数，指定
   <option>--with-uuid=e2fs</option>会使用<literal>e2fsprogs</>的
   <filename>libuuid</>，指定<option>--with-uuid=ossp</option>则会
   使用 OSSP UUID 库。在一台特定的机器上可能会存在多种上述的库，因此
   <filename>configure</>不会自动选择其中一个。
  </para>

  <note>
   <para>
    如果你只需要随机生成（版本4）的 UUID，可以考虑使用<xref linkend="pgcrypto">
    模块中的<function>gen_random_uuid()</>函数。
   </para>
  </note>
 </sect2>

 <sect2>
  <title>作者</title>

  <para>
   Peter Eisentraut <email>peter_e@gmx.net</email>
  </para>

 </sect2>

</sect1>

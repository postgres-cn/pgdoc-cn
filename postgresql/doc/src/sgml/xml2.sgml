<!-- doc/src/sgml/xml2.sgml -->

<sect1 id="xml2" xreflabel="xml2">
 <title>xml2</title>

 <indexterm zone="xml2">
  <primary>xml2</primary>
 </indexterm>

 <!--
<para>
  The <filename>xml2</> module provides XPath querying and
  XSLT functionality.
 </para>
-->
<para>
<filename>xml2</>模块提供XPath查询和XSLT功能。
</para>

 <sect2>
  <!-- 
  <title>Deprecation Notice</title>
  -->
  <title>弃用通知</title>

  <!--
<para>
   From <productname>PostgreSQL</> 8.3 on, there is XML-related
   functionality based on the SQL/XML standard in the core server.
   That functionality covers XML syntax checking and XPath queries,
   which is what this module does, and more, but the API is
   not at all compatible.  It is planned that this module will be
   removed in a future version of PostgreSQL in favor of the newer standard API, so
   you are encouraged to try converting your applications.  If you
   find that some of the functionality of this module is not
   available in an adequate form with the newer API, please explain
   your issue to <email>pgsql-hackers@postgresql.org</email> so that the deficiency
   can be addressed.
  </para>
-->
<para>
从<productname>PostgreSQL</> 8.3开始，在内核服务器中有一个基于SQL/XML标准的XML相关的功能。
这个功能包含了XML语法检查和XPath查询，这也是这个模块的包含的，甚至更多，不过API一点也不兼容。
计划在未来的PostgreSQL版本中删除这个模块，支持新的标准的API，所以鼓励你尝试转换你的应用。
如果你发现这个模块的某些功能在一个适当形式的更新的API中不可用，
请解释你的问题到<email>pgsql-hackers@postgresql.org</email>，以便解决这个缺陷。
</para>
 </sect2>

 <sect2>
  <!--
  <title>Description of Functions</title>
  -->
  <title>功能说明</title>

  <!--
<para>
   <xref linkend="xml2-functions-table"> shows the functions provided by this module.
   These functions provide straightforward XML parsing and XPath queries.
   All arguments are of type <type>text</>, so for brevity that is not shown.
  </para>
-->
<para>
<xref linkend="xml2-functions-table">显示了这个模块提供的函数。
这些函数提供了简单的XMP解析和XPath查询。所有参数都是<type>text</>类型的，
所以为了简化没有显示。
</para>

  <table id="xml2-functions-table">
   <!-- 
   <title>Functions</title>
   -->
   <title>函数</title>
   <tgroup cols="3">
   <thead>
     <row>
      <!--
  <entry>Function</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
  -->
  <entry>函数</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <function>
        xml_is_well_formed(document)
       </function>
      </entry>
      <entry>
       <type>bool</type>
      </entry>
      <entry>
       <!--
<para>
        This parses the document text in its parameter and returns true if the
        document is well-formed XML.  (Note: before PostgreSQL 8.2, this
        function was called <function>xml_valid()</>.  That is the wrong name
        since validity and well-formedness have different meanings in XML.
        The old name is still available, but is deprecated.)
       </para>
-->
<para>
解析它的参数中的文件正文，并且如果文件是格式良好的XML则返回真。
（注意：在PostgreSQL 8.2之前，这个函数称为<function>xml_valid()</>。
这是错误的名字，因为在XML中有效性和良构性有不同的含义。
老的名字仍然可用，但是已经废弃了。）
</para>
      </entry>
     </row>
     <row>
      <entry>
        <function>
         xpath_string(document, query)
        </function>
      </entry>
      <entry>
       <type>text</type>
      </entry>
      <entry morerows="2">
       <!--
<para>
        These functions evaluate the XPath query on the supplied document, and
        cast the result to the specified type.
       </para>
-->
<para>
这个函数在提供的文件上评估XPath查询，并转换结果到指定的类型。
</para>
      </entry>
     </row>
     <row>
      <entry>
       <function>
        xpath_number(document, query)
       </function>
      </entry>
      <entry>
       <type>float4</type>
      </entry>
     </row>
     <row>
      <entry>
       <function>
        xpath_bool(document, query)
       </function>
      </entry>
      <entry>
       <type>bool</type>
      </entry>
     </row>
     <row>
      <entry>
        <function>
         xpath_nodeset(document, query, toptag, itemtag)
        </function>
      </entry>
      <entry>
       <type>text</type>
      </entry>
      <entry>
       <!--
<para>
       This evaluates query on document and wraps the result in XML tags. If
       the result is multivalued, the output will look like:
<synopsis>
&lt;toptag&gt;
&lt;itemtag&gt;Value 1 which could be an XML fragment&lt;/itemtag&gt;
&lt;itemtag&gt;Value 2....&lt;/itemtag&gt;
&lt;/toptag&gt;
</synopsis>
        If either <literal>toptag</> or <literal>itemtag</> is an empty string, the relevant tag is omitted.
       </para>
-->
<para>
在文件上评估查询并将结果包装在XML标签中。如果结果是多值的，那么输出将看起来像：
<synopsis>
&lt;toptag&gt;
&lt;itemtag&gt;Value 1 which could be an XML fragment&lt;/itemtag&gt;
&lt;itemtag&gt;Value 2....&lt;/itemtag&gt;
&lt;/toptag&gt;
</synopsis>
如果<literal>toptag</>或<literal>itemtag</>中的任意一个是空字符串，那么省略相关的标签。
</para>
      </entry>
     </row>
     <row>
      <entry>
        <function>
         xpath_nodeset(document, query)
        </function>
      </entry>
      <entry>
       <type>text</type>
      </entry>
      <entry>
       <!--
<para>
        Like <function>xpath_nodeset(document, query, toptag, itemtag)</> but result omits both tags.
       </para>
-->
<para>
类似于<function>xpath_nodeset(document, query, toptag, itemtag)</>，但是结果省略两个标签。
</para>
      </entry>
     </row>
     <row>
      <entry>
        <function>
         xpath_nodeset(document, query, itemtag)
        </function>
      </entry>
      <entry>
       <type>text</type>
      </entry>
      <entry>
       <!--
<para>
        Like <function>xpath_nodeset(document, query, toptag, itemtag)</> but result omits <literal>toptag</literal>.
       </para>
-->
<para>
类似于<function>xpath_nodeset(document, query, toptag, itemtag)</>，但是结果省略<literal>toptag</literal>。
</para>
      </entry>
     </row>
     <row>
      <entry>
        <function>
         xpath_list(document, query, separator)
        </function>
      </entry>
      <entry>
       <type>text</type>
      </entry>
      <entry>
       <!--
<para>
        This function returns multiple values separated by the specified
        separator, for example <literal>Value 1,Value 2,Value 3</> if
        separator is <literal>,</>.
       </para>
-->
<para>
这个函数返回由指定的分隔符分开的多个值，例如如果分隔符是<literal>,</>，
返回值是<literal>Value 1,Value 2,Value 3</>。
</para>
      </entry>
     </row>
     <row>
      <entry>
        <function>
         xpath_list(document, query)
        </function>
      </entry>
      <entry>
       <type>text</type>
      </entry>
      <entry>
       <!--
   This is a wrapper for the above function that uses <literal>,</>
       as the separator.
   -->
   这是一个对于使用<literal>,</>作为分隔符的以上函数的包装器。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title><literal>xpath_table</literal></title>

  <indexterm>
   <primary>xpath_table</primary>
  </indexterm>

<synopsis>
xpath_table(text key, text document, text relation, text xpaths, text criteria) returns setof record
</synopsis>

  <!--
<para>
   <function>xpath_table</> is a table function that evaluates a set of XPath
   queries on each of a set of documents and returns the results as a
   table. The primary key field from the original document table is returned
   as the first column of the result so that the result set
   can readily be used in joins.  The parameters are described in
   <xref linkend="xml2-xpath-table-parameters">.
  </para>
-->
<para>
<function>xpath_table</>是一个表函数，在每一组文档上计算一组XPath查询，
并作为一个表返回结果。原始文档表的主键字段作为结果的第一个字段返回，
因此结果集可以容易的用于连接。参数在<xref linkend="xml2-xpath-table-parameters">中描述。
</para>

  <table id="xml2-xpath-table-parameters">
   <!-- 
   <title><function>xpath_table</function> Parameters</title>
   -->
   <title><function>xpath_table</function> 参数</title>
   <tgroup cols="2">
     <thead>
     <row>
      <!--
  <entry>Parameter</entry>
      <entry>Description</entry>
  -->
  <entry>参数</entry>
      <entry>描述</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><parameter>key</parameter></entry>
      <entry>
       <!--
<para>
        the name of the <quote>key</> field &mdash; this is just a field to be used as
        the first column of the output table, i.e., it identifies the record from
        which each output row came (see note below about multiple values)
       </para>
-->
<para>
<quote>key</>字段的名字&mdash;这只是用作输出表的第一个字段，也就是，
它识别每个传来的输出行的记录（请参见下面关于多行值的注释）
</para>
      </entry>
     </row>
     <row>
      <entry><parameter>document</parameter></entry>
      <entry>
       <!--
<para>
        the name of the field containing the XML document
       </para>
-->
<para>
包含XML文档的字段名
</para>
      </entry>
     </row>
     <row>
      <entry><parameter>relation</parameter></entry>
      <entry>
       <!--
<para>
        the name of the table or view containing the documents
       </para>
-->
<para>
包含文档的表或视图的名字
</para>
      </entry>
     </row>
     <row>
      <entry><parameter>xpaths</parameter></entry>
      <entry>
       <!--
<para>
        one or more XPath expressions, separated by <literal>|</literal>
       </para>
-->
<para>
一个或多个XPath表达式，由<literal>|</literal>分隔
</para>
      </entry>
     </row>
     <row>
      <entry><parameter>criteria</parameter></entry>
      <entry>
       <!--
<para>
        the contents of the WHERE clause. This cannot be omitted, so use
        <literal>true</literal> or <literal>1=1</literal> if you want to
        process all the rows in the relation
       </para>
-->
<para>
WHERE子句的内容。这个不能省略，所以如果你想要在关系中处理所有的行，
那么使用<literal>true</literal>或<literal>1=1</literal>
</para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <!--
<para>
   These parameters (except the XPath strings) are just substituted
   into a plain SQL SELECT statement, so you have some flexibility &mdash; the
   statement is
  </para>
-->
<para>
这些参数（除了XPath字符串）只是代替一个纯SQL SELECT语句，
所以你有一些灵活性&mdash;该语句是
</para>

<para>
   <literal>
    SELECT &lt;key&gt;, &lt;document&gt; FROM &lt;relation&gt; WHERE &lt;criteria&gt;
   </literal>
  </para>

  <!--
<para>
   so those parameters can be <emphasis>anything</> valid in those particular
   locations. The result from this SELECT needs to return exactly two
   columns (which it will unless you try to list multiple fields for key
   or document). Beware that this simplistic approach requires that you
   validate any user-supplied values to avoid SQL injection attacks.
  </para>
-->
<para>
所以这些参数可以是<emphasis>任何</>在这些特定位置的有效值。
这个SELECT的结果需要返回正好两个字段（除非你尝试为key或document列出多个字段）。
注意这个简单的方法需要验证任何用户提供的值，以避免SQL注入攻击。
</para>

<para>
   <!-- 
   The function has to be used in a <literal>FROM</> expression, with an
   <literal>AS</> clause to specify the output columns; for example 
   -->
该函数必须用于<literal>FROM</>表达式中，用一个<literal>AS</>子句指定输出字段；例如
<programlisting>
SELECT * FROM
xpath_table('article_id',
            'article_xml',
            'articles',
            '/article/author|/article/pages|/article/title',
            'date_entered > ''2003-01-01'' ')
AS t(article_id integer, author text, page_count integer, title text);
</programlisting>
<!-- 
   The <literal>AS</> clause defines the names and types of the columns in the
   output table.  The first is the <quote>key</> field and the rest correspond
   to the XPath queries.
   If there are more XPath queries than result columns,
   the extra queries will be ignored. If there are more result columns
   than XPath queries, the extra columns will be NULL. 
-->
<literal>AS</>子句定义输出表中字段的名字和类型。第一个是<quote>key</>字段，
剩余的对应于XPath查询。如果XPath查询多于结果字段，那么额外的查询将被忽略。
如果结果字段多于XPath查询，那么额外的字段将为空。
  </para>

  <!--
<para>
   Notice that this example defines the <structname>page_count</> result
   column as an integer.  The function deals internally with string
   representations, so when you say you want an integer in the output, it will
   take the string representation of the XPath result and use PostgreSQL input
   functions to transform it into an integer (or whatever type the <type>AS</>
   clause requests). An error will result if it can't do this &mdash; for
   example if the result is empty &mdash; so you may wish to just stick to
   <type>text</> as the column type if you think your data has any problems.
  </para>
-->
<para>
请注意，这个示例定义<structname>page_count</>的结果字段为一个整数。
该函数内部处理字符串的表示，所以当你说你在输出中想要一个整数时，
它将接收XPath结果的字符串表示，并使用PostgreSQL输入函数将它转换为一个整数
（或者任何<type>AS</>子句要求的类型）。如果它不能这么做则导致一个错误&mdash;
例如，如果结果为空&mdash;所以如果你认为你的数据有任何问题，
你可能想要坚持<type>text</>作为该字段的类型。
</para>

<para>
<!--
    The calling <command>SELECT</> statement doesn't necessarily have be
   just <literal>SELECT *</> &mdash; it can reference the output
   columns by name or join them to other tables. The function produces a
   virtual table with which you can perform any operation you wish (e.g.
   aggregation, joining, sorting etc). So we could also have:
-->
调用的<command>SELECT</>语句不需要只是<literal>SELECT *</>&mdash;
它可以通过名字或链接输出字段到其他的表引用输出字段。
该函数产生一个虚拟表，用该虚拟表你可以执行任何你想要的操作
（例如，聚合、链接、排序等等）。所以我们也可以将：
<programlisting>
SELECT t.title, p.fullname, p.email
FROM xpath_table('article_id', 'article_xml', 'articles',
                 '/article/title|/article/author/@id',
                 'xpath_string(article_xml,''/article/@date'') > ''2003-03-20'' ')
       AS t(article_id integer, title text, author_id integer),
     tblPeopleInfo AS p
WHERE t.author_id = p.person_id;
</programlisting>
<!--
    as a more complicated example. Of course, you could wrap all
   of this in a view for convenience. 
-->
作为一个更复杂的示例。当然，为了方便，你可以将所有这些包装到一个视图中。
  </para>

  <sect3>
   <!--
   <title>Multivalued Results</title>
   -->
   <title>多值的结果</title>

   <!--
<para>
    The <function>xpath_table</> function assumes that the results of each XPath query
    might be multivalued, so the number of rows returned by the function
    may not be the same as the number of input documents. The first row
    returned contains the first result from each query, the second row the
    second result from each query. If one of the queries has fewer values
    than the others, null values will be returned instead.
   </para>
-->
<para>
<function>xpath_table</>函数假设每个XPath查询的结果可能是多值的，
所以该函数返回的行数可能和输入文档的行数不同。
返回的第一行包含每个查询的第一个结果，第二行包含每个查询的第二个结果。
如果其中的一个查询比其他查询的值少，那么将返回空值。
</para>

<para>
<!-- 
    In some cases, a user will know that a given XPath query will return
    only a single result (perhaps a unique document identifier) &mdash; if used
    alongside an XPath query returning multiple results, the single-valued
    result will appear only on the first row of the result. The solution
    to this is to use the key field as part of a join against a simpler
    XPath query. As an example:
-->
在某些情况下，用户知道一个给定的XPath查询将只返回一个结果（可能是一个唯一文档标识符）&mdash;
如果和返回多个结果的XPath查询一起使用，那么唯一值结果将只在结果的第一行出现。
这个问题的解决方法是使用该关键字段作为一个更简单的XPath查询连接的一部分。
示例：
<programlisting>
CREATE TABLE test (
    id int PRIMARY KEY,
    xml text
);

INSERT INTO test VALUES (1, '&lt;doc num="C1"&gt;
&lt;line num="L1"&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;c&gt;3&lt;/c&gt;&lt;/line&gt;
&lt;line num="L2"&gt;&lt;a&gt;11&lt;/a&gt;&lt;b&gt;22&lt;/b&gt;&lt;c&gt;33&lt;/c&gt;&lt;/line&gt;
&lt;/doc&gt;');

INSERT INTO test VALUES (2, '&lt;doc num="C2"&gt;
&lt;line num="L1"&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/line&gt;
&lt;line num="L2"&gt;&lt;a&gt;111&lt;/a&gt;&lt;b&gt;222&lt;/b&gt;&lt;c&gt;333&lt;/c&gt;&lt;/line&gt;
&lt;/doc&gt;');

SELECT * FROM
  xpath_table('id','xml','test',
              '/doc/@num|/doc/line/@num|/doc/line/a|/doc/line/b|/doc/line/c',
              'true')
  AS t(id int, doc_num varchar(10), line_num varchar(10), val1 int, val2 int, val3 int)
WHERE id = 1 ORDER BY doc_num, line_num

 id | doc_num | line_num | val1 | val2 | val3
----+---------+----------+------+------+------
  1 | C1      | L1       |    1 |    2 |    3
  1 |         | L2       |   11 |   22 |   33
</programlisting>
   </para>

<para>
<!-- 
    To get <literal>doc_num</> on every line, the solution is to use two invocations
    of <function>xpath_table</> and join the results:
-->
要在每个行上获得<literal>doc_num</>，解决方法是使用两个<function>xpath_table</>
的调用并连接结果：
<programlisting>
SELECT t.*,i.doc_num FROM
  xpath_table('id', 'xml', 'test',
              '/doc/line/@num|/doc/line/a|/doc/line/b|/doc/line/c',
              'true')
    AS t(id int, line_num varchar(10), val1 int, val2 int, val3 int),
  xpath_table('id', 'xml', 'test', '/doc/@num', 'true')
    AS i(id int, doc_num varchar(10))
WHERE i.id=t.id AND i.id=1
ORDER BY doc_num, line_num;

 id | line_num | val1 | val2 | val3 | doc_num
----+----------+------+------+------+---------
  1 | L1       |    1 |    2 |    3 | C1
  1 | L2       |   11 |   22 |   33 | C1
(2 rows)
</programlisting>
   </para>
  </sect3>
 </sect2>

 <sect2>
  <!--
  <title>XSLT Functions</title>
  -->
  <title>XSLT 函数</title>

  <!--
<para>
   The following functions are available if libxslt is installed:
  </para>
-->
<para>
如果安装了libxslt，那么下列的函数是可用的：
</para>

  <sect3>
   <title><literal>xslt_process</literal></title>

  <indexterm>
   <primary>xslt_process</primary>
  </indexterm>

<synopsis>
xslt_process(text document, text stylesheet, text paramlist) returns text
</synopsis>

   <!--
<para>
    This function applies the XSL stylesheet to the document and returns
    the transformed result. The <literal>paramlist</> is a list of parameter
    assignments to be used in the transformation, specified in the form
    <literal>a=1,b=2</>. Note that the
    parameter parsing is very simple-minded: parameter values cannot
    contain commas!
   </para>
-->
<para>
这个函数应用XSL样式表到文档并返回转换了的结果。<literal>paramlist</>
是一个在转换中使用的参数分配列表，以格式<literal>a=1,b=2</>指定。
请注意，参数分析是非常简单的：参数值不能包含逗号！
</para>

   <!--
<para>
    There is also a two-parameter version of <function>xslt_process</> which
    does not pass any parameters to the transformation.
   </para>
-->
<para>
也有一个两参数的<function>xslt_process</>版本，不传递任何参数到转换。
</para>
  </sect3>
 </sect2>

 <sect2>
  <!-- 
  <title>Author</title>
  -->
  <title>作者</title>

<para>
   John Gray <email>jgray@azuli.co.uk</email>
  </para>

  <!--
<para>
   Development of this module was sponsored by Torchbox Ltd. (www.torchbox.com).
   It has the same BSD license as PostgreSQL.
  </para>
-->
<para>
这个模块的发展是由Torchbox Ltd. (www.torchbox.com)赞助的。
它和PostgreSQL有一样的BSD许可证。
</para>
 </sect2>

</sect1>

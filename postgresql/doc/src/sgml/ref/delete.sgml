<!--
doc/src/sgml/ref/delete.sgml
PostgreSQL documentation
-->

<refentry id="SQL-DELETE">
 <indexterm zone="sql-delete">
  <primary>DELETE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>DELETE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>DELETE</refname>
  <refpurpose>删除一个表的行</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
DELETE FROM [ ONLY ] <replaceable class="PARAMETER">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    [ USING <replaceable class="PARAMETER">using_list</replaceable> ]
    [ WHERE <replaceable class="PARAMETER">condition</replaceable> | WHERE CURRENT OF <replaceable class="PARAMETER">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>DELETE</command>从指定表中删除满足
   <literal>WHERE</literal>子句的行。如果<literal>WHERE</literal>
   子句没有出现，效果将会是删除表中的所有行。结果是一个合法的空表。
  </para>

   <tip>
    <para>
     <xref linkend="sql-truncate">是一种提供移除表中所有行的快速机制的
     <productname>PostgreSQL</productname>扩展。
    </para>
   </tip>

  <para>
   有两种方式可以使用数据库中其他表中包含的信息来删除一个表的行：
   使用子选择或者在<literal>USING</literal>子句中指定额外的表。
   哪种技术更合适取决于特定的环境。
  </para>

  <para>
   可选的<literal>RETURNING</>子句导致<command>DELETE</>
   基于实际被删除的每一行计算并且返回值。任何使用被删除表列或者
   <literal>USING</literal>中提到的其他表的列的表达式都可以被计算。
   <literal>RETURNING</>列表的语法和<command>SELECT</>的
   输出列表语法相同。
  </para>

  <para>
   要从表中删除行，你必须具有其上的<literal>DELETE</literal>特权，
   以及<literal>USING</literal>子句中任何表以及其值在<replaceable
   class="parameter">condition</replaceable>中被读取的表上的
   <literal>SELECT</literal>特权。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
     <para>
      <literal>WITH</literal>子句允许你指定一个或者多个子查询，在 
      <command>DELETE</>查询中可以用子查询的名字来引用它们。
      详见<xref linkend="queries-with">和<xref linkend="sql-select">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <para>
      要从其中删除行的表名（可以是模式限定的）。如果在表名前指定
      <literal>ONLY</>，只会从提到的表中删除匹配的行。如果没有指定
      <literal>ONLY</>，还会删除该表的任何继承表中的匹配行。可选地，
      可以在表名后面指定<literal>*</>来显式指定要包括继承表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
     <para>
      目标表的一个别名。提供别名时，它会完全隐藏该表的真实名称。例如，
      对于<literal>DELETE FROM foo AS f</>，
      <command>DELETE</command>语句的剩余部分都会用
      <literal>f</>而不是 <literal>foo</>来引用该表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">using_list</replaceable></term>
    <listitem>
     <para>
      一个表表达式的列表，它允许在<literal>WHERE</>条件中出现
      来自其他表的列。这和<command>SELECT</command>语句
      的<xref linkend="sql-from" endterm="sql-from-title">中指定
      的表列表相似。例如，可以指定表的别名。除非想要进行自连接，
      否则不要在<replaceable class="PARAMETER">using_list</replaceable>
      再写上目标表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <para>
      一个返回<type>boolean</type>类型值的表达式。只有让这个
      表达式返回<literal>true</>的行才将被删除。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">cursor_name</replaceable></term>
    <listitem>
     <para>
      要在<literal>WHERE CURRENT OF</>情况中使用的游标
      的名称。最近一次从这个游标中取出的行将被删除。该游标
      必须是<command>DELETE</>的目标表上的非分组查询。
      注意不能在使用<literal>WHERE CURRENT OF</>的同时
      指定一个布尔条件。有关将游标用于
      <literal>WHERE CURRENT OF</>的更多信息请见
      <xref linkend="sql-declare">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_expression</replaceable></term>
    <listitem>
     <para>
      在每一行被删除后，会被<command>DELETE</>计算并且返回的表达式。
      该表达式可以使用<replaceable class="PARAMETER">table_name</replaceable>
      以及<literal>USING</>中的表的任何列。写成<literal>*</>可以返回所有列。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_name</replaceable></term>
    <listitem>
     <para>
      被返回列的名称。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>输出</title>

  <para>
   在成功完成时，一个<command>DELETE</>命令会返回以下形式
   的命令标签：
<screen>
DELETE <replaceable class="parameter">count</replaceable>
</screen>
   <replaceable class="parameter">count</replaceable>是被删除行的数目。
   注意如果有一个<literal>BEFORE DELETE</>触发器抑制删除，那么该数目
   可能小于匹配<replaceable class="parameter">condition</replaceable>
   的行数。如果<replaceable class="parameter">count</replaceable>为 0，
   表示查询没有删除行（这并非一种错误）。
  </para>

  <para>
   如果<command>DELETE</>命令包含<literal>RETURNING</>子句，
   则结果会与包含有<literal>RETURNING</>列表中定义的列和值的
   <command>SELECT</>语句结果相似，这些结果是在被该命令删除的
   行上计算得来。
  </para>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   通过在<literal>USING</literal>子句中指定其他的表，
   <productname>PostgreSQL</productname>允许在
   <literal>WHERE</>条件中引用其他表的列。例如，要
   删除有一个给定制片人制作的所有电影，可以这样做：
<programlisting>
DELETE FROM films USING producers
  WHERE producer_id = producers.id AND producers.name = 'foo';
</programlisting>
   这里实际发生的事情是在<structname>films</>和
   <structname>producers</>之间进行连接，然后删除
   所有成功连接的<structname>films</>行。这种语法不
   属于标准。更标准的方式是：
<programlisting>
DELETE FROM films
  WHERE producer_id IN (SELECT id FROM producers WHERE name = 'foo');
</programlisting>
   在一些情况下，连接形式比子查询形式更容易书写或者执行更快。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   删除所有电影，但音乐剧除外：
<programlisting>
DELETE FROM films WHERE kind &lt;&gt; 'Musical';
</programlisting>
  </para>

  <para>
   清空表<literal>films</literal>：
<programlisting>
DELETE FROM films;
</programlisting>
  </para>

  <para>
   删除已完成的任务，返回被删除行的明细：
<programlisting>
DELETE FROM tasks WHERE status = 'DONE' RETURNING *;
</programlisting>
  </para>

   <para>
   删除<structname>tasks</>中游标<literal>c_tasks</>
   当前位于其上的行：
<programlisting>
DELETE FROM tasks WHERE CURRENT OF c_tasks;
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   这个命令符合<acronym>SQL</acronym>标准，不过
   <literal>USING</literal>和<literal>RETURNING</>子句是
   <productname>PostgreSQL</productname>扩展，在
   <command>DELETE</>中使用<literal>WITH</>也是扩展。
  </para>
 </refsect1>
</refentry>

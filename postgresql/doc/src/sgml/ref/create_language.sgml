<!--
doc/src/sgml/ref/create_language.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATELANGUAGE">
 <indexterm zone="sql-createlanguage">
  <primary>CREATE LANGUAGE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
  <refpurpose>定义一种新的过程语言</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
    HANDLER <replaceable class="parameter">call_handler</replaceable> [ INLINE <replaceable class="parameter">inline_handler</replaceable> ] [ VALIDATOR <replaceable>valfunction</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createlanguage-description">
  <title>描述</title>

  <para>
   <command>CREATE LANGUAGE</command>为一个
   <productname>PostgreSQL</productname>数据库注册一种新的
   过程语言。接着，可以用这种新语言定义函数和触发器过程。
  </para>

  <note>
   <para>
    从<productname>PostgreSQL</productname> 9.1 开始，大多数
    过程语言已经被做成了<quote>扩展</>，并且应该用
    <xref linkend="sql-createextension">而不是
    <command>CREATE LANGUAGE</command>来安装。
    <command>CREATE LANGUAGE</command>的直接使用现在应该
    被限制在扩展安装脚本中。如果在数据库中有一种<quote>裸</>语言（
    可能是一次升级的结果），可以用
    <literal>CREATE EXTENSION <replaceable>langname</> FROM
    unpackaged</literal>把它转换成一个扩展。
   </para>
  </note>

  <para>
   <command>CREATE LANGUAGE</command>实际上把该语言名称与
   负责执行用该语言编写的函数的处理器函数关联在一起。有关语言处理器的
   更多信息可以参考<xref linkend="plhandler">。
  </para>

  <para>
   有两种形式的<command>CREATE LANGUAGE</command>命令。在
   第一种形式中，用户只提供想要的语言的名称。
   <productname>PostgreSQL</productname>服务器会查询
   <link linkend="catalog-pg-pltemplate"><structname>pg_pltemplate</structname></link>系统目录来决定正确的参数。在第二种形式中，用户
   要提供语言参数和语言名称。第二种形式可以被用来创建一种没有定义在
   <structname>pg_pltemplate</>中的语言，但是这种方法被认为即将
   废弃。
  </para>

  <para>
   当服务器在<structname>pg_pltemplate</>目录中为给定的语言名称
   找到一个项时，即使命令中已经包括了语言参数，它也将使用目录中的
   数据。这种行为简化了旧转储文件的载入，旧转储文件很可能包含过时的
   信息。
  </para>

  <para>
   通常，用户必须拥有
   <productname>PostgreSQL</productname>超级用户特权来注册
   一种新的语言。不过，如果该语言被列举在
   <structname>pg_pltemplate</structname>目录中并且被标记为允许
   由数据库拥有者创建（<structfield>tmpldbacreate</>为真），则数据
   库的拥有者可以把新语言注册在数据库中。默认是可信的语言能够由数据
   库拥有者创建，但是超级用户可以通过修改
   <structname>pg_pltemplate</structname>的内容来调整这种行为。
   语言的创建者会成为它的拥有者，并且以后可以删除它、对它重命名或者
   把它赋予给一个新的拥有者。
  </para>

  <para>
   <command>CREATE OR REPLACE LANGUAGE</command>将创建
   或者替换一种现有的定义。如果该语言已经存在，其参数会被根据指定的
   值或者来自<structname>pg_pltemplate</structname>的值更新。但
   该语言的拥有关系和权限设置不会更改，并且任何已有的用该语言编写的
   函数仍然被假定有效。除了创建一种语言的普通特权需求，用户还必须是
   超级用户或者已有语言的拥有者。<literal>REPLACE</>情况主要被用来
   确保该语言存在。如果该语言有一个
   <structname>pg_pltemplate</structname>项，那么
   <literal>REPLACE</>将不会实际更改现有定义的任何东西，除非从该语
   言被创建以来<structname>pg_pltemplate</structname>已经被修改
   过（很少见的情况）。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-parameters">
  <title>参数</title>

   <variablelist>
    <varlistentry>
     <term><literal>TRUSTED</literal></term>

     <listitem>
      <para><literal>TRUSTED</literal>指定该语言不会授予用户不该具有的
      数据访问。如果在注册语言时这个关键词被省略，只有具有
       <productname>PostgreSQL</productname>超级用户特权的用户才能
       使用该语言创建新函数。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <para>
       这是一个噪声词。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">name</replaceable></term>

     <listitem>
      <para>
       新过程语言的名称。该名称必须在该数据库的语言中唯一。
      </para>

      <para>
       为了向后兼容，名称可以用单引号围绕。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>HANDLER</literal> <replaceable class="parameter">call_handler</replaceable></term>

     <listitem>
      <para><replaceable class="parameter">call_handler</replaceable>
       是一个之前注册的函数的名称，它将被调用来执行该过程语言的函数。
       一种过程语言的调用处理器必须以一种编译型语言（如 C）编写并且
       具有版本 1 的调用约定，它必须在
       <productname>PostgreSQL</productname>内注册为一个没有
       参数并且返回<type>language_handler</type>类型的函数。
       <type>language_handler</type>是一种占位符类型， 它被用来
       标识该函数为一个调用处理器。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>INLINE</literal> <replaceable class="parameter">inline_handler</replaceable></term>

     <listitem>
      <para><replaceable class="parameter">inline_handler</replaceable>
       是一个之前注册的函数的名称，它将被调用来执行一个该语言的匿名代码块（
       <xref linkend="sql-do">命令）。如果没有指定
       <replaceable class="parameter">inline_handler</replaceable>函数，则
       该语言不支持匿名代码块。该处理器函数必须接受一个<type>internal</type>
       类型的参数，该参数将是<command>DO</>命令的内部表示，而且它通常
       将返回<type>void</>。该处理器的返回值会被忽略。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>VALIDATOR</literal> <replaceable class="parameter">valfunction</replaceable></term>

     <listitem>
      <para><replaceable class="parameter">valfunction</replaceable> is the
       是一个之前注册的函数的名称，当一个该语言的新函数被创建时会调用该函数来
       验证新函数。如果没有指定验证器函数，那么一个新函数被创建时不会被检查。
       验证器函数必须接受一个<type>oid</type>类型的参数，它将是要被创建的
       函数的 OID，而且它通常将返回<type>void</>。
      </para>

      <para>
       一个验证器函数通常会检查函数体中的语法正确性，但是它也能查看函数的其他
       属性，例如该语言能否处理特定的参数类型。为了发出一个错误，验证器函数应该
       使用<function>ereport()</function>函数。验证器函数的返回值会被忽略。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

  <para>
   如果指定的语言名称在<structname>pg_pltemplate</>中有一项，服务器会忽略
   <literal>TRUSTED</>选项和支持函数的名称。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-notes">
  <title>注解</title>

  <para>
   <xref linkend="app-createlang">程序是
   <command>CREATE LANGUAGE</>命令的一个简单的包装器。它可以从
   shell 命令行轻松地安装过程语言。
  </para>

  <para>
   使用<xref linkend="sql-droplanguage">或者更好的<xref
   linkend="app-droplang">程序来删除过程语言。
  </para>

  <para>
   系统目录<classname>pg_language</classname>（见<xref
   linkend="catalog-pg-language">）记录着有关当前已安装的语言的信息。
   还有，<command>createlang</command>有一个选项可以列出已安装的语言。
  </para>

  <para>
   要以一种过程语言创建函数，用户必须具有对于该语言的
   <literal>USAGE</literal>特权。默认情况下，对于可信语言，
   <literal>USAGE</>被授予给<literal>PUBLIC</>（即所有人）。
   如果需要可以将它收回。
  </para>

  <para>
   过程语言对于单个数据库来说是本地的。但是，一种语言可以被安装在
   <literal>template1</literal>数据库中，这会导致它在所有后续创建的
   数据库中自动变得可用。
  </para>

  <para>
   如果对语言在服务器的<structname>pg_pltemplate</>中没有一项，
   调用处理器函数、内联处理器函数（如果有）以及验证器函数（如果有）
   必须已经存在。但是当有一个那样的项时，这些函数不必已经存在。如果
   它们在数据库中不存在，将自动定义它们（如果安装中实现该语言的共享
   库不可用可能会导致<command>CREATE LANGUAGE</>失败）。
  </para>

  <para>
   在<productname>PostgreSQL</productname> 版本 7.3 之前，需要
   将处理器函数声明为返回占位符类型<type>opaque</>而不是
   <type>language_handler</>。为了支持载入旧的转储文件，
   <command>CREATE LANGUAGE</>将接受被声明为返回
   <type>opaque</>的函数，但是它将发出一个提示并且把该函数的声明
   返回类型改为<type>language_handler</>。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-examples">
  <title>示例</title>

  <para>
   创建任何标准过程语言的最好的方式是：
<programlisting>
CREATE LANGUAGE plperl;
</programlisting>
  </para>

  <para>
   对于<structname>pg_pltemplate</>目录不知道的一种语言，需要这样的命令序列：
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-createlanguage-compat">
  <title>兼容性</title>

  <para>
   <command>CREATE LANGUAGE</command>是一种
   <productname>PostgreSQL</productname>扩展。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterlanguage"></member>
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-droplanguage"></member>
   <member><xref linkend="sql-grant"></member>
   <member><xref linkend="sql-revoke"></member>
   <member><xref linkend="app-createlang"></member>
   <member><xref linkend="app-droplang"></member>
  </simplelist>
 </refsect1>
</refentry>

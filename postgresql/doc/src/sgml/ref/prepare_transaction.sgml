<!--
doc/src/sgml/ref/prepare_transaction.sgml
PostgreSQL documentation
-->

<refentry id="SQL-PREPARE-TRANSACTION">
 <indexterm zone="sql-prepare-transaction">
  <primary>PREPARE TRANSACTION</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>PREPARE TRANSACTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>PREPARE TRANSACTION</refname>
  <refpurpose>为两阶段提交准备当前事务</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
PREPARE TRANSACTION <replaceable class="PARAMETER">transaction_id</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>PREPARE TRANSACTION</command>为两阶段提交准备
   当前事务。在这个命令之后，该事务不再与当前会话关联。相反，它的状态
   被完全存储在磁盘上，并且有很高的可能性它会被提交成功（即便在请求提
   交前发生数据库崩溃）。
  </para>

  <para>
   一旦被准备好，事务稍后就可以分别用
   <xref linkend="sql-commit-prepared">
   或者<xref linkend="sql-rollback-prepared">提交或者回滚。可以从任何
   会话而不仅仅是执行原始事务的会话中发出这些命令。
  </para>

  <para>
   从发出命令的会话的角度来看，<command>PREPARE
   TRANSACTION</command>不像<command>ROLLBACK</>命令：
   在执行它之后，就没有活跃的当前事务，并且该预备事务的效果也不再可见（
   如果该事务被提交，效果将重新变得可见）。
  </para>

  <para>
   如果由于任何原因<command>PREPARE TRANSACTION</command>
   命令失败，它会变成一个<command>ROLLBACK</>：当前事务会被取消。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">transaction_id</replaceable></term>
    <listitem>
     <para>
      一个任意的事务标识符，
      <command>COMMIT PREPARED</>或者<command>ROLLBACK PREPARED</>
      以后将用这个标识符来标识这个事务。该标识符必须写成一个字符串，
      并且长度必须小于 200 字节。它也不能与任何当前已经准备好的事务的标识符相同。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   <command>PREPARE TRANSACTION</>并不是设计为在应用或者交互式
   会话中使用。它的目的是允许一个外部事务管理器在多个数据库或者其他事务性
   来源之间执行原子的全局事务。除非你在编写一个事务管理器，否则你可能不会
   用到<command>PREPARE TRANSACTION</>。
  </para>

  <para>
   这个命令必须在一个事务块中使用。事务块用<xref
   linkend="sql-begin">开始。
  </para>

  <para>
   当前在已经执行过任何涉及到临时表、创建带
   <literal>WITH HOLD</>的游标或者执行
   <command>LISTEN</>或者<command>UNLISTEN</>的
   事务中，不允许<command>PREPARE</>该事务。这些特性与当前会话
   绑定得太过紧密，所以对一个要被准备的事务来说没有什么用处。
  </para>

  <para>
   如果用<command>SET</>（不带<literal>LOCAL</>选项）修改过事务的
   任何运行时参数，这些效果会持续到
   <command>PREPARE TRANSACTION</>之后，并且将不会被后续的任何
   <command>COMMIT PREPARED</command>或
   <command>ROLLBACK PREPARED</command>所影响。因此，在这一
   方面<command>PREPARE TRANSACTION</>的行为更像
   <command>COMMIT</>而不是<command>ROLLBACK</>。
  </para>

  <para>
   所有当前可用的准备好事务被列在<link linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link>系统视图中。
  </para>

  <caution>
   <para>
    让一个事务处于准备好状态太久是不明智的。这将会干扰
    <command>VACUUM</>回收存储的能力，并且在极限情况下可能导致
    数据库关闭以阻止事务 ID 回卷（见<xref
     linkend="vacuum-for-wraparound">）。还要记住，该事务会继续持有
     它已经持有的锁。该特性的设计用法是，只要一个外部事务管理器已经验证
     其他数据库也准备好了要提交，一个准备好的事务将被正常地提交或者回滚。
   </para>

   <para>
    如果没有建立一个外部事务管理器来跟踪准备好的事务并且确保它们被迅速地
    结束，最好禁用准备好事务特性（设置
    <xref linkend="guc-max-prepared-transactions">为零）。这将防止意外
    地创建准备好事务，不然该事务有可能被忘记并且最终导致问题。
   </para>
  </caution>
 </refsect1>

 <refsect1 id="sql-prepare-transaction-examples">
  <title id="sql-prepare-transaction-examples-title">例子</title>
  <para>
   为两阶段提交准备当前事务，使用<literal>foobar</>作为事务标识符：

<programlisting>
PREPARE TRANSACTION 'foobar';
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>PREPARE TRANSACTION</command>是一种
   <productname>PostgreSQL</productname>扩展。其意图是用于
   外部事务管理系统，其中有些已经被标准涵盖（例如 X/Open XA），
   但是那些系统的 SQL 方面未被标准化。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-commit-prepared"></member>
   <member><xref linkend="sql-rollback-prepared"></member>
  </simplelist>
 </refsect1>

</refentry>

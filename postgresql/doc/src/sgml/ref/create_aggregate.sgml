<!--
doc/src/sgml/ref/create_aggregate.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEAGGREGATE">
 <indexterm zone="sql-createaggregate">
  <primary>CREATE AGGREGATE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE AGGREGATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE AGGREGATE</refname>
  <refpurpose>定义一个新的聚集函数</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE AGGREGATE <replaceable class="parameter">name</replaceable> ( [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">arg_data_type</replaceable> [ , ... ] ) (
    SFUNC = <replaceable class="PARAMETER">sfunc</replaceable>,
    STYPE = <replaceable class="PARAMETER">state_data_type</replaceable>
    [ , SSPACE = <replaceable class="PARAMETER">state_data_size</replaceable> ]
    [ , FINALFUNC = <replaceable class="PARAMETER">ffunc</replaceable> ]
    [ , FINALFUNC_EXTRA ]
    [ , INITCOND = <replaceable class="PARAMETER">initial_condition</replaceable> ]
    [ , MSFUNC = <replaceable class="PARAMETER">msfunc</replaceable> ]
    [ , MINVFUNC = <replaceable class="PARAMETER">minvfunc</replaceable> ]
    [ , MSTYPE = <replaceable class="PARAMETER">mstate_data_type</replaceable> ]
    [ , MSSPACE = <replaceable class="PARAMETER">mstate_data_size</replaceable> ]
    [ , MFINALFUNC = <replaceable class="PARAMETER">mffunc</replaceable> ]
    [ , MFINALFUNC_EXTRA ]
    [ , MINITCOND = <replaceable class="PARAMETER">minitial_condition</replaceable> ]
    [ , SORTOP = <replaceable class="PARAMETER">sort_operator</replaceable> ]
)

CREATE AGGREGATE <replaceable class="parameter">name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">arg_data_type</replaceable> [ , ... ] ]
                        ORDER BY [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">arg_data_type</replaceable> [ , ... ] ) (
    SFUNC = <replaceable class="PARAMETER">sfunc</replaceable>,
    STYPE = <replaceable class="PARAMETER">state_data_type</replaceable>
    [ , SSPACE = <replaceable class="PARAMETER">state_data_size</replaceable> ]
    [ , FINALFUNC = <replaceable class="PARAMETER">ffunc</replaceable> ]
    [ , FINALFUNC_EXTRA ]
    [ , INITCOND = <replaceable class="PARAMETER">initial_condition</replaceable> ]
    [ , HYPOTHETICAL ]
)

<phrase>或者旧的语法</phrase>

CREATE AGGREGATE <replaceable class="PARAMETER">name</replaceable> (
    BASETYPE = <replaceable class="PARAMETER">base_type</replaceable>,
    SFUNC = <replaceable class="PARAMETER">sfunc</replaceable>,
    STYPE = <replaceable class="PARAMETER">state_data_type</replaceable>
    [ , SSPACE = <replaceable class="PARAMETER">state_data_size</replaceable> ]
    [ , FINALFUNC = <replaceable class="PARAMETER">ffunc</replaceable> ]
    [ , FINALFUNC_EXTRA ]
    [ , INITCOND = <replaceable class="PARAMETER">initial_condition</replaceable> ]
    [ , MSFUNC = <replaceable class="PARAMETER">msfunc</replaceable> ]
    [ , MINVFUNC = <replaceable class="PARAMETER">minvfunc</replaceable> ]
    [ , MSTYPE = <replaceable class="PARAMETER">mstate_data_type</replaceable> ]
    [ , MSSPACE = <replaceable class="PARAMETER">mstate_data_size</replaceable> ]
    [ , MFINALFUNC = <replaceable class="PARAMETER">mffunc</replaceable> ]
    [ , MFINALFUNC_EXTRA ]
    [ , MINITCOND = <replaceable class="PARAMETER">minitial_condition</replaceable> ]
    [ , SORTOP = <replaceable class="PARAMETER">sort_operator</replaceable> ]
)
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>CREATE AGGREGATE</command>定义一个新的聚集函数。
   在发布中已经包括了一些基本的和常用的聚集函数，它们的文档请见
   <xref linkend="functions-aggregate">。如果要定义一个新类型或者需要
   一个还没有被提供的聚集函数，那么
   <command>CREATE AGGREGATE</command>就可以被用来提供想要
   的特性。
  </para>

  <para>
   如果给定了一个模式名（例如<literal>CREATE AGGREGATE
   myschema.myagg ...</>），那么该聚集会被创建在指定的模式中。否则它
   会被创建在当前模式中。
  </para>

  <para>
   一个聚集函数需要用它的名称和输入数据类型标识。同一个模式中的两个聚集
   可以具有相同的名称，只要它们在不同的输入类型上操作即可。一个聚集的名称
   和输入数据类型必须与同一模式中的每一个普通函数区分开。这种行为与普通函
   数名的重载完全一样（见<xref linkend="sql-createfunction">）。
  </para>

  <para>
   一个简单的聚集函数由一个或者多个普通函数组成：
   一个状态转移函数
   <replaceable class="PARAMETER">sfunc</replaceable>和一个可选的最终
   计算函数
   <replaceable class="PARAMETER">ffunc</replaceable>。
   它们被这样使用：
<programlisting>
<replaceable class="PARAMETER">sfunc</replaceable>( internal-state, next-data-values ) ---> next-internal-state
<replaceable class="PARAMETER">ffunc</replaceable>( internal-state ) ---> aggregate-value
</programlisting>
  </para>

  <para>
   <productname>PostgreSQL</productname>创建一个数据类型
   <replaceable class="PARAMETER">stype</replaceable>的临时变量来
   保持聚集的当前内部状态。对每一个输入行，聚集参数值会被计算并且状态
   转移函数会被调用，它用当前状态值和新参数值计算一个新的内部状态值。
   等所有行都被处理完后，最终函数会被调用一次来计算该聚集的返回值。如果
   没有最终函数，则最终的状态值会被返回。
  </para>

  <para>
   一个聚集函数可以提供一个初始条件，即一个用于内部状态值的初始值。它被
   作为一个类型<type>text</type>的值指定并且存储在数据库中，但是它必须
   是状态值数据类型的一个常量的合法外部表示。如果没有提供，则状态值从空值
   开始。
  </para>

  <para>
   如果状态转移函数被声明为<quote>strict</quote>，那么不能用空值输入来
   调用它。如果有这种转移函数，聚集将按照下面的行为执行。带有任何空值的
   行会被忽略（函数不被调用并且之前的状态值被保持）。如果初始状态值就是
   空值，那么碰到第一个没有空值的行时，状态值会被替换成第一个参数值，并且
   对于每一个后续的没有空值的行都会调用该转移函数。这对实现
   <function>max</function>这样的聚集很方便。注意只有当
   <replaceable class="PARAMETER">state_data_type</replaceable>
   和第一个
   <replaceable class="PARAMETER">arg_data_type</replaceable>相同时，
   这种行为才可用。当这些类型不同时，你必须提供一个非空初始条件或者使用
   一个非严格转移函数。
  </para>

  <para>
   如果状态转移函数不是严格的，那么在碰到每个输入行时都将会调用它，并且
   它必须自行处理空值输入和空状态值。这允许聚集的作者完全控制该聚集如何
   处理空值。
  </para>

  <para>
   如果最终函数被声明为<quote>strict</quote>，那么当最终状态值为空时将
   不会调用它，而是自动地返回一个空结果（当然，这只是严格函数的普通行为）。
   在任何情况下最终函数都可以返回一个空值。例如，<function>avg</function>的最终函数会在看到零个
   输入行时返回空。
  </para>

  <para>
   有时候把最终函数声明成不仅采用状态值还采用对应于聚集输入值的额外参数
   是有用的。这样做的主要原因是，如果最终函数是多态的，那么状态值的数据
   类型将不适合于用来确定结果类型。这些额外的参数总是以 NULL 形式传递
   （因此使用<literal>FINALFUNC_EXTRA</>选项时，最终函数不能是严格的），
   但尽管如此它们都是合法参数。例如，最终函数可以利用
   <function>get_fn_expr_argtype</>来标识当前调用中的实际参数类型。
  </para>

  <para>
   如<xref linkend="xaggr-moving-aggregates">中所述，一个聚集可以
   选择支持<firstterm>移动聚集模式</>。这要求指定
   <literal>MSFUNC</>、<literal>MINVFUNC</>以及
   <literal>MSTYPE</>参数，并且参数<literal>MSPACE</>、
   <literal>MFINALFUNC</>、<literal>MFINALFUNC_EXTRA</>
   和<literal>MINITCOND</>是可选的。除了<literal>MINVFUNC</>，
   这些参数的工作都和对应的不带<literal>M</>的简单聚集参数相似，它们
   定义了定义了包括一个逆向转移函数的聚集的一种独立实现。
  </para>

  <para>
   在参数列表中带有<literal>ORDER BY</literal>的语法会创建一种被称为
   <firstterm>有序集聚集</firstterm>的特殊聚集类型。如果指定了
   <literal>HYPOTHETICAL</>，则会创建一个
   <firstterm>假想集聚集</firstterm>。这些聚集以依赖排序的方法在排好序
   的值上操作，因此指定一个输入排序顺序是调用过程的重要一环。还有，它们
   可以有<firstterm>直接</>参数，这类参数只对每次聚集计算一次，而不是对
   每一个输入行计算一次。假想集聚集是有序集聚集的一个子类，其中一些直接
   参数要求在数量和类型上都匹配被聚集的参数列。这允许这些直接参数的值被
   当做一个附加的<quote>假想</>行被加入到聚集输入行的集合中。
  </para>

  <para>
   行为与<function>MIN</>或<function>MAX</>相似的聚集有时可以通过
   直接查看一个索引而不是扫描每一个输入行来优化。如果这个聚集可以被这样
   优化，请通过指定一个<firstterm>排序操作符</>来指出。基本要求是，该
   聚集必须得出由该操作符产生的排序顺序中的第一个元素，换句话说：
<programlisting>
SELECT agg(col) FROM tab;
</programlisting>
   必须等价于：
<programlisting>
SELECT col FROM tab ORDER BY col USING sortop LIMIT 1;
</programlisting>
   进一步的假定是该聚集忽略空输入，并且当且仅当没有非空输入时它才会返回
   一个空结果。通常，一种数据类型的<literal>&lt;</>操作符是
   <function>MIN</>的合适的排序操作符，而<literal>&gt;</>是
   <function>MAX</>的合适的排序操作符。注意，除非指定的操作符是一个
   B-树索引操作符类的<quote>小于</quote>或者<quote>大于</quote>
   策略成员，优化将永远不会产生实际效果。
  </para>

  <para>
   要能够创建一个聚集函数，你必须具有参数类型、状态类型和返回类型上的
   <literal>USAGE</literal>特权，还有在转换和最终函数上的
   <literal>EXECUTE</literal>特权。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <para>
      要创建的聚集函数的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argmode</replaceable></term>

    <listitem>
     <para>
      一个参数的模式：<literal>IN</>或者<literal>VARIADIC</>（聚集函数
      不支持<literal>OUT</>参数）。如果忽略，默认值是<literal>IN</>。
      只有最后一个参数能被标记为<literal>VARIADIC</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argname</replaceable></term>

    <listitem>
     <para>
      一个参数的名称。当前这只用于文档的目的。如果被忽略，该参数就没有名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">arg_data_type</replaceable></term>
    <listitem>
     <para>
      这个聚集函数操作的一个输入数据类型。要创建一个零参数的聚集函数，可以
      写一个<literal>*</>来替代参数说明的列表（这类聚集的一个例子是
      <function>count(*)</function>）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">base_type</replaceable></term>
    <listitem>
     <para>
      在<command>CREATE AGGREGATE</>的旧语法中，输入数据类型是由
      一个<literal>basetype</>参数指定而不是写在聚集名之后。注意这种语法
      只允许一个输入参数。要用这种语法定义一个零参数的聚集函数，把
      <literal>basetype</>指定为<literal>"ANY"</>（不是<literal>*</>）。
      有序集聚集不能用旧语法定义。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">sfunc</replaceable></term>
    <listitem>
     <para>
      要为每一个输入行调用的状态转移函数名。对于一个正常的
      <replaceable class="PARAMETER">N</>-参数的聚集函数，
      <replaceable class="PARAMETER">sfunc</>必须接收
      <replaceable class="PARAMETER">N</>+1 个参数，
      第一个参数的类型是<replaceable 
      class="PARAMETER">state_data_type</replaceable>而其余的参数匹配
      该聚集被声明的输入数据类型。该函数必须返回一个类型为
      <replaceable class="PARAMETER">state_data_type</replaceable>
      的值。这个函数会采用当前的状态值以及当前的输入数据值，并且返回下一个
      状态值。
     </para>

     <para>
      对于有序集（包括假想集）聚集，状态转移函数只接收当前的状态值和聚集参数，
      但无需直接参数。否则它就和其他转移函数一样了。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">state_data_type</replaceable></term>
    <listitem>
     <para>
      聚集的状态值的数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">state_data_size</replaceable></term>
    <listitem>
     <para>
      聚集的状态值的近似平均尺寸（以字节计）。如果这个参数被忽略或者为零，
      将使用一个基于<replaceable>state_data_type</>的默认估计值。规划器
      使用这个值来估计一个分组聚集查询所需的内存。只有估计哈希表能够放在
      <xref linkend="guc-work-mem">大小的内存中时，规划器才会对这类查询
      使用哈希聚集。因此，对这个参数设置大的值会阻止使用哈希聚集。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">ffunc</replaceable></term>
    <listitem>
     <para>
      最终函数的名称，该函数在所有输入行都被遍历之后被调用来计算聚集的结果。
      对于一个常规聚集，这个函数必须只接受一个类型为<replaceable
      class="PARAMETER">state_data_type</replaceable>的单一参数。该聚集
      的返回数据类型被定义为这个函数的返回类型。如果没有指定
      <replaceable class="PARAMETER">ffunc</replaceable>，则结束状态值
      被用作聚集的结果，并且返回类型为<replaceable
      class="PARAMETER">state_data_type</replaceable>。
     </para>

     <para>
      对于有序集（包括假想集）聚集，最终函数不仅接收最终状态值，还会接收所
      有直接参数的值。
     </para>

     <para>
      如果指定了<literal>FINALFUNC_EXTRA</>，则除了最终状态值和任何直接
      参数之外，最终函数还接收额外的对应于该聚集的常规（聚集）参数的 NULL 值。
      这主要用于在定义了一个多态聚集时允许正确地决定聚集的结果类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">initial_condition</replaceable></term>
    <listitem>
     <para>
      状态值的初始设置。这必须是以数据类型<replaceable
      class="PARAMETER">state_data_type</replaceable>能够接受的形式出现
      的一个字符串常量。如果没有指定，状态值会从空值开始。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">msfunc</replaceable></term>
    <listitem>
     <para>
      前向状态转移函数的名称，在移动聚集模式中会为每个输入行调用这个函数。它
      非常像常规的转移函数，不过它的第一个参数和结果类型是
      <replaceable>mstate_data_type</>，这可能与
      <replaceable>state_data_type</>不同。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">minvfunc</replaceable></term>
    <listitem>
     <para>
      在移动聚集模式中用到的逆向状态转移函数的名称。这个函数与
      <replaceable>msfunc</>具有相同的参数和结果类型，但是它被用于从当前聚集
      状态中移除一个值，而不是向其中增加一个值。逆向转移函数必须具有和前向状态
      转移函数相同的严格性属性。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">mstate_data_type</replaceable></term>
    <listitem>
     <para>
      使用移动聚集模式时，用于聚集状态值的数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">mstate_data_size</replaceable></term>
    <listitem>
     <para>
      使用移动聚集模式时，聚集状态值的近似平均尺寸（以字节计）。它的作用和
      <replaceable>state_data_size</>相同。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">mffunc</replaceable></term>
    <listitem>
     <para>
      使用移动聚集模式时用到的最终函数名称，当所有输入行都被遍历后会调用它来
      计算聚集的结果。它的工作和<replaceable>ffunc</>一样，但是它的第一个参
      数类型是<replaceable>mstate_data_type</>并且额外的空参数要通过书写
      <literal>MFINALFUNC_EXTRA</>来指定。<replaceable>mffunc</>
      或者<replaceable>mstate_data_type</>决定的聚集结果类型必须匹配由聚集
      的常规实现所确定的类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">minitial_condition</replaceable></term>
    <listitem>
     <para>
      使用移动聚集模式时，状态值的初始设置。它的作用和
      <replaceable>initial_condition</>一样。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">sort_operator</replaceable></term>
    <listitem>
     <para>
      一个<function>MIN</>- 类或者<function>MAX</>-类聚集的相关
      排序操作符。这只是一个操作符名称（可能被模式限定）。这个操作符被
      假定为具有和该聚集（必须是一个单一参数的常规聚集）相同的输入数据
      类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>HYPOTHETICAL</literal></term>
    <listitem>
     <para>
      只用于有序集聚集，这个标志指定聚集参数会被根据假想集聚集的要求进行处理：
      即后面的直接参数必须匹配聚集（<literal>WITHIN GROUP</>）参数的数据
      类型。<literal>HYPOTHETICAL</literal>标志在运行时没有任何效果，它只在
      命令解析期间对确定数据类型和聚集参数的排序规则有用。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   <command>CREATE AGGREGATE</command>的参数可以用任意顺序书写，
   而无需遵照以上说明的顺序。
  </para>
 </refsect1>

 <refsect1>
  <title>注解</title>

   <para>
    在指定支持函数名的参数中，如果需要你可以写一个模式名，例如
    <literal>SFUNC = public.sum</>。在这里不能写参数类型 &mdash; 支持函数
    的参数类型是根据其他参数决定的。
   </para>

   <para>
    如果一个聚集支持移动聚集模式，当该聚集被用于一个具有移动帧起点（即帧起点
    模式不是<literal>UNBOUNDED PRECEDING</>）的窗口函数时，它将提升计
    算效率。在概念上，当从底部进入窗口帧时前向转移函数会把输入值加到聚集的状
    态上，而逆向转移函数会在从顶部离开帧时再次移除输入值。因此，当值被移除时，
    它们总是按照被加入的相同顺序被移除。无论何时调用逆向转移函数，它都将因此
    接收最近增加但是还未被移除的参数值。逆向转移函数可以假定在它移除最旧的行
    之后至少有一行保留在当前状态中（当情况不是这样时，窗口函数机制会简单地开
    始一次新的聚集，而不是使用逆向转移函数）。
   </para>

   <para>
    用于移动聚集模式的前向转移函数不允许返回 NULL 作为新的状态值。如果逆向
    转移函数返回 NULL，这表明逆向函数无法为这个特定的输入逆转状态计算，并且
    该聚集计算因此必须从当前帧的开始位置“从零开始”重新被计算。在一些少见的情
    况中，逆转正在计算中的状态值是不切实际的，这种习惯可以允许在此类情形中使用
    移动聚集模式。
   </para>

   <para>
    如果没有提供移动聚集实现，聚集仍然可以被用于移动帧，但是
    只要帧起点移动，<productname>PostgreSQL</productname>都将会重新计算
    整个聚集。注意不管聚集有没有支持移动聚集模式，
    <productname>PostgreSQL</productname>都能处理一个移动帧结束而无需重
    新计算，这可以通过增加新值到聚集状态完成。人们认为最终函数不会破坏聚集的状
    态值，这样即使已经为一组帧边界得到了一个聚集结果值，该聚集也能继续下去。
   </para>

   <para>
    有序集聚集的语法允许为最后一个直接参数以及最后一个聚集（
    <literal>WITHIN GROUP</>）参数指定<literal>VARIADIC</>。但是，当前的
    实现限制只能以两种方式使用<literal>VARIADIC</>。第一种，有续集聚集只能
    使用<literal>VARIADIC "any"</>，不能使用其他可变数组类型。第二种，如果最
    后一个直接参数是<literal>VARIADIC "any"</>，那么只能有一个聚集参数并且它
    也必须是<literal>VARIADIC "any"</>（在系统目录中使用的表示中，这两个参数
    会被合并为一个单一的<literal>VARIADIC "any"</>项，因为
    <structname>pg_proc</>无法表示具有超过一个<literal>VARIADIC</>参数的
    函数）。如果该聚集是一个假想集聚集，匹配<literal>VARIADIC "any"</>参数的
    直接参数就是假想参数。任何在前面的参数表示额外的直接参数，它们不被约束为需
    要匹配聚集参数。
   </para>

   <para>
    当前，有序集聚集无须支持移动聚集模式，因为它们不能被用作窗口函数。
   </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   见<xref linkend="xaggr">。
  </para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>CREATE AGGREGATE</command>是一种
   <productname>PostgreSQL</productname>的语言扩展。SQL 标准没有提供
   用户定义的聚集函数。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alteraggregate"></member>
   <member><xref linkend="sql-dropaggregate"></member>
  </simplelist>
 </refsect1>
</refentry>

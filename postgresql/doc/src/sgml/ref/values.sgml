<!--
doc/src/sgml/ref/values.sgml
PostgreSQL documentation
-->

<refentry id="SQL-VALUES">
 <indexterm zone="sql-values">
  <primary>VALUES</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>VALUES</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>VALUES</refname>
  <refpurpose>计算一个行集合</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
VALUES ( <replaceable class="PARAMETER">expression</replaceable> [, ...] ) [, ...]
    [ ORDER BY <replaceable class="parameter">sort_expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operator</replaceable> ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">count</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">start</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">count</replaceable> ] { ROW | ROWS } ONLY ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>VALUES</command>计算由值表达式指定的一个行值或者
   一组行值。更常见的是把它用来生成一个大型命令内的<quote>常量表</>，
   但是它也可以被独自使用。
  </para>

  <para>
   当多于一行被指定时，所有行都必须具有相同数量的元素。结果表的列数据类型
   由出现在该列的表达式的显式或者推导类型组合决定，决定的规则与
   <literal>UNION</>相同（见<xref linkend="typeconv-union-case">）。
  </para>

  <para>
   在大型的命令中，在语法上允许<command>VALUES</>出现在
   <command>SELECT</>出现的任何地方。因为语法把它当做一个
   <command>SELECT</>，可以为一个<command>VALUES</>
   命令使用<literal>ORDER BY</>、
   <literal>LIMIT</>（或者等效的<literal>FETCH FIRST</literal>）
   以及<literal>OFFSET</>子句。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">expression</replaceable></term>
    <listitem>
     <para>
      要在结果表（行集合）中指定位置计算并且插入的一个常量或者表达式。
      在一个出现于<command>INSERT</>顶层的
      <command>VALUES</>列表中，
      <replaceable class="PARAMETER">expression</replaceable>可以
      被<literal>DEFAULT</literal>替代以表示应该插入目标列的默认值。
      当<command>VALUES</>出现在其他环境中时，不能使用
      <literal>DEFAULT</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">sort_expression</replaceable></term>
    <listitem>
     <para>
      一个指示如何排序结果行的表达式或者整型常量。这个表达式
      可以用<literal>column1</>、<literal>column2</>等来
      引用该<command>VALUES</>结果的列。详见
      <xref linkend="sql-orderby" endterm="sql-orderby-title">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">operator</replaceable></term>
    <listitem>
     <para>
      一个排序操作符。详见
      <xref linkend="sql-orderby" endterm="sql-orderby-title">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">count</replaceable></term>
    <listitem>
     <para>
      要返回的最大行数。详见
      <xref linkend="sql-limit" endterm="sql-limit-title">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">start</replaceable></term>
    <listitem>
     <para>
      开始返回行之前要跳过的行数。详见
      <xref linkend="sql-limit" endterm="sql-limit-title">。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   应该避免具有大量行的<command>VALUES</>列表，否则可能会
   碰到内存不足失败或者很差的性能。出现在<command>INSERT</>
   中的<command>VALUES</>是一种特殊情况（因为想要的列类型
   可以从<command>INSERT</>的目标表得知，并且不需要通过扫描
   该<command>VALUES</>列表来推导），因此它可以处理比其他
   环境中更大的列表。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   一个纯粹的<command>VALUES</>命令：

<programlisting>
VALUES (1, 'one'), (2, 'two'), (3, 'three');
</programlisting>

   这将返回一个具有两列、三行的表。它实际等效于：

<programlisting>
SELECT 1 AS column1, 'one' AS column2
UNION ALL
SELECT 2, 'two'
UNION ALL
SELECT 3, 'three';
</programlisting>

  </para>

  <para>
   更常用地，<command>VALUES</>可以被用在一个大型 SQL 命令中。
   在<command>INSERT</>中最常用：

<programlisting>
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
</programlisting>
  </para>

  <para>
   在<command>INSERT</>的环境中，一个<command>VALUES</>列表
   的项可以是<literal>DEFAULT</literal>来指示应该使用该列的默认值而不是
   指定一个值：

<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'),
    ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama', DEFAULT);
</programlisting>
  </para>

  <para>
   <command>VALUES</>也可以被用在可以写子-<command>SELECT</>
   的地方，例如在一个<literal>FROM</>子句中：

<programlisting>
SELECT f.*
  FROM films f, (VALUES('MGM', 'Horror'), ('UA', 'Sci-Fi')) AS t (studio, kind)
  WHERE f.studio = t.studio AND f.kind = t.kind;

UPDATE employees SET salary = salary * v.increase
  FROM (VALUES(1, 200000, 1.2), (2, 400000, 1.4)) AS v (depno, target, increase)
  WHERE employees.depno = v.depno AND employees.sales &gt;= v.target;
</programlisting>

   注意当<command>VALUES</>被用在一个<literal>FROM</>子句中时，
   需要提供一个<literal>AS</>子句，与<command>SELECT</>相同。
   不需要为所有的列用<literal>AS</>子句指定名称，但是那样做是一种好
   习惯（在<productname>PostgreSQL</productname>中，
   <command>VALUES</>的默认列名是<literal>column1</>、
   <literal>column2</>等，但在其他数据库系统中可能会不同）。
  </para>

  <para>
   当在<command>INSERT</>中使用<command>VALUES</>时，值都会
   被自动地强制为相应目标列的数据类型。当在其他环境中使用时，有必要指定
   正确的数据类型。如果项都是带引号的字符串常量，强制第一个就足以为所有
   项假设数据类型：

<programlisting>
SELECT * FROM machines
WHERE ip_address IN (VALUES('192.168.0.1'::inet), ('192.168.0.10'), ('192.168.1.43'));
</programlisting></para>

  <tip>
   <para>
    对于简单的<literal>IN</>测试，最好使用<literal>IN</>的标量列表形式
    而不是写一个上面那样的<command>VALUES</>查询。标量列表方法的
    书写更少并且常常更加高效。
   </para>
  </tip>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para><command>VALUES</command>符合 SQL 标准。
   <literal>LIMIT</literal>和<literal>OFFSET</literal>是
   <productname>PostgreSQL</productname>扩展，另见
   <xref linkend="sql-select">。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-insert"></member>
   <member><xref linkend="sql-select"></member>
  </simplelist>
 </refsect1>
</refentry>

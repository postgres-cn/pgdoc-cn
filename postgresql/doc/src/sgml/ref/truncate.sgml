<!--
doc/src/sgml/ref/truncate.sgml
PostgreSQL documentation
-->

<refentry id="SQL-TRUNCATE">
 <indexterm zone="sql-truncate">
  <primary>TRUNCATE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>TRUNCATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>TRUNCATE</refname>
  <refpurpose>清空一个表或者一组表</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
TRUNCATE [ TABLE ] [ ONLY ] <replaceable class="PARAMETER">name</replaceable> [ * ] [, ... ]
    [ RESTART IDENTITY | CONTINUE IDENTITY ] [ CASCADE | RESTRICT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>TRUNCATE</command>可以从一组表中快速地移除所有行。
   它具有和在每个表上执行无条件<command>DELETE</command>相同的
   效果，不过它会更快，因为它没有实际扫描表。此外，它会立刻回收磁盘空间，
   而不是要求一个后续的<command>VACUUM</command>操作。在大表上
   它最有用。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <para>
      要截断的表的名字（可以是模式限定的）。如果在表名前指定了
      <literal>ONLY</>，则只会截断该表。如果没有指定<literal>ONLY</>，
      该表及其所有后代表（如果有）都会被截断。可选地，可以在表名后指定
      <literal>*</>来显式地包括后代表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTART IDENTITY</literal></term>
    <listitem>
     <para>
      自动重新开始被截断表的列所拥有的序列。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONTINUE IDENTITY</literal></term>
    <listitem>
     <para>
      不更改序列值。这是默认值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADE</literal></term>
    <listitem>
     <para>
      自动截断所有对任一所提及表有外键引用的表以及任何由于
      <literal>CASCADE</literal>被加入到组中的表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>
    <listitem>
     <para>
      如果任一表上具有来自命令中没有列出的表的外键引用，则拒绝截断。这是默认值。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   要截断一个表，你必须具有其上的<literal>TRUNCATE</literal>特权。
  </para>

  <para>
   <command>TRUNCATE</>在要操作的表上要求一个
   <literal>ACCESS EXCLUSIVE</>锁，这会阻塞所有其他在该表上的
   并发操作。当指定<literal>RESTART IDENTITY</>时，任何需要被
   重新开始的序列也会被排他地锁住。如果要求表上的并发访问，那么
   应该使用<command>DELETE</>命令。
  </para>

  <para>
   <command>TRUNCATE</>不能被用在被其他表外键引用的表上，
   除非那些表也在同一个命令中被阶段。这些情况中的可行性检查将会
   要求表扫描，并且重点不是为了做扫描。<literal>CASCADE</>
   选项可以被用来自动地包括所有依赖表 &mdash; 但使用它时要非常
   小心，否则你可能丢失数据！
  </para>

  <para>
   <command>TRUNCATE</>将不会引发表上可能存在的任何
   <literal>ON DELETE</literal>触发器。但是它将会引发
   <literal>ON TRUNCATE</literal>触发器。如果在这些表的任意一个
   上定义了<literal>ON TRUNCATE</>触发器，那么所有的
   <literal>BEFORE TRUNCATE</literal>触发器将在任何截断发生之前
   被引发，而所有<literal>AFTER TRUNCATE</literal>触发器将在最后
   一次截断完成并且所有序列被重置之后引发。触发器将以表被处理的顺
   序被引发（首先是那些被列在命令中的，然后是由于级联被加入的）。
  </para>

  <warning>
   <para>
    <command>TRUNCATE</>不是 MVCC 安全的（MVCC 的一般性
    信息请见<xref linkend="mvcc">）。截断之后，表将对所有并发事务
    为空，即使这些事务使用在截断发生之前取得的快照也是如此。这只对
    在截断发生之前没有访问被截断表的事务是个问题 &mdash; 任何已经
    访问过的事务将至少持有一个<literal>ACCESS SHARE</literal>锁，
    而这将阻塞<command>TRUNCATE</>直到事务完成。因此截断将
    不会对同一表上的连续查询导致任何明显的表内容不一致，但是它可能
    导致被截断表与数据库中其他表中数据之间的可以看到的不一致。
   </para>
  </warning>

  <para>
   从表中数据的角度来说，<command>TRUNCATE</>是事务安全的：
   如果所在的事务没有提交，阶段将会被安全地回滚。
  </para>

  <para>
   在指定了<literal>RESTART IDENTITY</>时，隐含的
   <command>ALTER SEQUENCE RESTART</>操作也会被事务性地完成。
   也就是说，如果所在事务没有提交，它们也将被回滚。这和
   <command>ALTER SEQUENCE RESTART</>的通常行为不同。注意如果
   事务回滚前在被重启序列上还做了额外的序列操作，这些操作在序列上的效果
   也将被回滚，但是它们在<function>currval()</>上的效果不会被回滚。也就
   是说，在事务之后，<function>currval()</>将继续反映在失败事务内得到的
   最后一个序列值，即使序列本身可能已经不再与此一致。这和失败事务之后
   <function>currval()</>的通常行为类似。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   截断表<literal>bigtable</literal>和
   <literal>fattable</literal>：

<programlisting>
TRUNCATE bigtable, fattable;
</programlisting>
  </para>

  <para>
   做同样的事情，并且还重置任何相关联的序列发生器：

<programlisting>
TRUNCATE bigtable, fattable RESTART IDENTITY;
</programlisting>
  </para>

  <para>
   截断表<literal>othertable</literal>，并且级联地截断任何通过
   外键约束引用<literal>othertable</literal>的表：

<programlisting>
TRUNCATE othertable CASCADE;
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   SQL:2008 标准包括了一个<command>TRUNCATE</command>命令，
   语法是<literal>TRUNCATE TABLE
   <replaceable>tablename</replaceable></literal>。子句
   <literal>CONTINUE IDENTITY</literal>/<literal>RESTART IDENTITY</literal>
   也出现在了该标准中，但是含义有些不同。这个命令的一些并发行为被标准
   留给实现来定义，因此如果必要应该考虑上述注解并且与其他实现进行比较。
  </para>
 </refsect1>
</refentry>

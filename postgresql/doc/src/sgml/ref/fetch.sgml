<!--
doc/src/sgml/ref/fetch.sgml
PostgreSQL documentation
-->

<refentry id="SQL-FETCH">

 <indexterm zone="sql-fetch">
  <primary>FETCH</primary>
 </indexterm>

 <indexterm zone="sql-fetch">
  <primary>cursor</primary>
  <secondary>FETCH</secondary>
 </indexterm>
 <refmeta>
  <refentrytitle>FETCH</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>FETCH</refname>
  <refpurpose>使用游标从查询中检索行</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!-- Note the "direction" bit is also in ref/move.sgml -->
<synopsis>
FETCH [ <replaceable class="PARAMETER">direction</replaceable> [ FROM | IN ] ] <replaceable class="PARAMETER">cursor_name</replaceable>

<phrase>其中 <replaceable class="PARAMETER">direction</replaceable> 可以为空或者以下之一：</phrase>

    NEXT
    PRIOR
    FIRST
    LAST
    ABSOLUTE <replaceable class="PARAMETER">count</replaceable>
    RELATIVE <replaceable class="PARAMETER">count</replaceable>
    <replaceable class="PARAMETER">count</replaceable>
    ALL
    FORWARD
    FORWARD <replaceable class="PARAMETER">count</replaceable>
    FORWARD ALL
    BACKWARD
    BACKWARD <replaceable class="PARAMETER">count</replaceable>
    BACKWARD ALL
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>FETCH</command>从之前创建的一个游标中检索行。
  </para>

  <para>
   游标具有一个相关联的位置，<command>FETCH</>会用到该位置。
   游标位置可能会位于查询结果的第一行之前、结果中任意行之上或者
   结果的最后一行之后。在被创建时，游标被定位在第一行之前。在取出
   一些行后，该游标被定位在最近被取出的行上。如果
   <command>FETCH</>运行超过了可用行的末尾，则该游标会被定位
   在最后一行之后（如果向后取，则是第一行之前）。
   <command>FETCH ALL</>或者<command>FETCH BACKWARD
   ALL</>将总是让游标被定位于最后一行之后或者第一行之前。
  </para>

  <para>
   <literal>NEXT</>、<literal>PRIOR</>、<literal>FIRST</>、
   <literal>LAST</>、<literal>ABSOLUTE</>、<literal>RELATIVE</>
   形式会在适当移动游标后取出一行。如果没有这样一行，将返回一个空
   结果，并且视情况将游标定位在第一行之前或者最后一行之后。
  </para>

  <para>
   使用<literal>FORWARD</>和<literal>BACKWARD</>的形式会在
   向前移动或者向后移动的方向上检索指定数量的行，然后将游标定位在
   最后返回的行上（如果<replaceable
   class="PARAMETER">count</replaceable>超过可用的行数，则定位
   在所有行之后或者之前）。
  </para>

  <para>
   <literal>RELATIVE 0</>、<literal>FORWARD 0</>以及
   <literal>BACKWARD 0</>都会请求检索当前行但不移动游标，也就是
   重新取最近被取出的行。 只要游标没有被定位在第一行之前或者最后一行
   之后，这种操作都会成功，否则不会返回任何行。
  </para>

  <note>
   <para>
    这个页面描述在 SQL 命令层面上对游标的使用。如果想要在
    <application>PL/pgSQL</>函数中使用游标，规则会有所不同
     &mdash; 请见<xref linkend="plpgsql-cursors">。
   </para>
  </note>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">direction</replaceable></term>
    <listitem>
     <para><replaceable class="PARAMETER">direction</replaceable>
     定义获取方向以及要取得的行数。它可以是下列之一：

      <variablelist>
       <varlistentry>
        <term><literal>NEXT</literal></term>
        <listitem>
         <para>
          取出下一行。如果省略<replaceable
          class="PARAMETER">direction</replaceable>，这将是默认值。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>PRIOR</literal></term>
        <listitem>
         <para>
          取出当前位置之前的一行。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>FIRST</literal></term>
        <listitem>
         <para>
          取出该查询的第一行（和<literal>ABSOLUTE 1</literal>相同）。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>LAST</literal></term>
        <listitem>
         <para>
          取出该查询的最后一行（和<literal>ABSOLUTE -1</literal>相同）。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>ABSOLUTE <replaceable class="PARAMETER">count</replaceable></literal></term>
        <listitem>
         <para>
          取出该查询的第<replaceable
          class="PARAMETER">count</replaceable>个行，如果<replaceable
          class="PARAMETER">count</replaceable>为负则是从尾部开始取出
          第<literal>abs(<replaceable
          class="PARAMETER">count</replaceable>)</literal>个行。如果
          <replaceable
          class="PARAMETER">count</replaceable>超出范围，将定位在第一行
          之前或者最后一行之后。特别地，<literal>ABSOLUTE 0</literal>
          会定位在第一行之前。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>RELATIVE <replaceable class="PARAMETER">count</replaceable></literal></term>
        <listitem>
         <para>
          取出第<replaceable
          class="PARAMETER">count</replaceable>个后继行，如果
          <replaceable class="PARAMETER">count</replaceable>为负
          则是取出前面的第<literal>abs(<replaceable
          class="PARAMETER">count</replaceable>)</literal>个行。
          <literal>RELATIVE 0</literal>重新取出当前行（如果有）。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><replaceable class="PARAMETER">count</replaceable></term>
        <listitem>
         <para>
          取出接下来的<replaceable
          class="PARAMETER">count</replaceable>行（和
          <literal>FORWARD <replaceable
          class="PARAMETER">count</replaceable></literal>相同）。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>ALL</literal></term>
        <listitem>
         <para>
          取出所有剩余的行（和<literal>FORWARD ALL</literal>相同）。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>FORWARD</literal></term>
        <listitem>
         <para>
          取出下一行（和<literal>NEXT</literal>相同）。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>FORWARD <replaceable class="PARAMETER">count</replaceable></literal></term>
        <listitem>
         <para>
          取出接下来的<replaceable
          class="PARAMETER">count</replaceable>行。
          <literal>FORWARD 0</literal>重新取出当前行。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>FORWARD ALL</literal></term>
        <listitem>
         <para>
          取出所有剩下的行。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>BACKWARD</literal></term>
        <listitem>
         <para>
          取出当前行前面的一行（和<literal>PRIOR</literal>相同）。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>BACKWARD <replaceable class="PARAMETER">count</replaceable></literal></term>
        <listitem>
         <para>
          取出前面的<replaceable
          class="PARAMETER">count</replaceable>行（反向扫描）。
          <literal>BACKWARD 0</literal>会重新取出当前行。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>BACKWARD ALL</literal></term>
        <listitem>
         <para>
          取出所有当前位置之前的行（反向扫描）。
         </para>
        </listitem>
       </varlistentry>
      </variablelist></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">count</replaceable></term>
    <listitem>
     <para><replaceable class="PARAMETER">count</replaceable>
      是一个可能带有符号的整数常量，它决定要取得的位置或者行数。对于
      <literal>FORWARD</>和<literal>BACKWARD</>情况，指定一个负的
      <replaceable
      class="PARAMETER">count</replaceable>等效于改变
      <literal>FORWARD</>he <literal>BACKWARD</>的意义。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">cursor_name</replaceable></term>
    <listitem>
     <para>
      一个已打开游标的名称。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>输出</title>

  <para>
   如果成功完成，<command>FETCH</>命令返回一个下面形式的命令标签：
<screen>
FETCH <replaceable class="parameter">count</replaceable>
</screen>
   <replaceable class="parameter">count</replaceable>是取得的行数（可能
   为零）。注意在<application>psql</application>中，命令标签将不会实际显示，
   因为<application>psql</application>会显示被取得的行。
  </para>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   如果想要使用<command>FETCH</>的任意变体而不使用带有正计数的
   <command>FETCH NEXT</>或者<command>FETCH FORWARD</>，
   应该用<literal>SCROLL</literal>声明游标。对于简单查询，
   <productname>PostgreSQL</productname>将允许从不带
   <literal>SCROLL</literal>的游标中反向取得行，但最好不要依赖这种行为。
   如果游标被声明为带有<literal>SCROLL</literal>，则不允许反向取得。
  </para>

  <para>
   用<literal>ABSOLUTE</literal>取行并不比用相对移动快多少：不管则样，
   底层实现都必须遍历所有的中间行。用负绝对值获取的情况更糟：必须读到
   查询尾部来找到最后一行，并且接着从那里反向开始遍历。不过，回卷到查询
   的开始（正如<literal>FETCH ABSOLUTE 0</literal>）是很快的。
  </para>

  <para>
   <xref linkend="sql-declare">被用来定义游标。使用
   <xref linkend="sql-move">可改变游标位置而不检索数据。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   下面的例子用一个游标遍历一个表：

<programlisting>
BEGIN WORK;

-- 建立一个游标：
DECLARE liahona SCROLL CURSOR FOR SELECT * FROM films;

-- 在游标 liahona 中取出前 5 行：
FETCH FORWARD 5 FROM liahona;

 code  |          title          | did | date_prod  |   kind   |  len
-------+-------------------------+-----+------------+----------+-------
 BL101 | The Third Man           | 101 | 1949-12-23 | Drama    | 01:44
 BL102 | The African Queen       | 101 | 1951-08-11 | Romantic | 01:43
 JL201 | Une Femme est une Femme | 102 | 1961-03-12 | Romantic | 01:25
 P_301 | Vertigo                 | 103 | 1958-11-14 | Action   | 02:08
 P_302 | Becket                  | 103 | 1964-02-03 | Drama    | 02:28

-- 取出前面一行：
FETCH PRIOR FROM liahona;

 code  |  title  | did | date_prod  |  kind  |  len
-------+---------+-----+------------+--------+-------
 P_301 | Vertigo | 103 | 1958-11-14 | Action | 02:08

-- 关闭游标并且结束事务：
CLOSE liahona;
COMMIT WORK;
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   SQL 标准只定义<command>FETCH</command>在嵌入式 SQL 中使用。
   这里描述的<command>FETCH</command>变体返回数据时就好像数据是
   一个<command>SELECT</command>结果，而不是被放在主变量中。
   除这一点之外，<command>FETCH</command>完全向上兼容于 SQL 标准。
  </para>

  <para>
   涉及<literal>FORWARD</literal>和<literal>BACKWARD</literal>的
   <command>FETCH</command>形式，以及形式<literal>FETCH <replaceable
   class="PARAMETER">count</replaceable></literal>和<literal>FETCH
   ALL</literal>（其中<literal>FORWARD</literal>是隐式的）都是
   <productname>PostgreSQL</productname>扩展。
  </para>

  <para>
   SQL 标准只允许<literal>FROM</>在游标名之前。使用
   <literal>IN</>的选项或者完全省去它们是一种扩展。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-close"></member>
   <member><xref linkend="sql-declare"></member>
   <member><xref linkend="sql-move"></member>
  </simplelist>
 </refsect1>
</refentry>

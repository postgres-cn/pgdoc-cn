<!--
doc/src/sgml/ref/grant.sgml
PostgreSQL documentation
-->

<refentry id="SQL-GRANT">
 <indexterm zone="sql-grant">
  <primary>GRANT</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle>GRANT</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - 语言语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>GRANT</refname>
  <refpurpose>定义访问特权</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] <replaceable class="PARAMETER">table_name</replaceable> [, ...]
         | ALL TABLES IN SCHEMA <replaceable class="PARAMETER">schema_name</replaceable> [, ...] }
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) }
    ON [ TABLE ] <replaceable class="PARAMETER">table_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE <replaceable class="PARAMETER">sequence_name</replaceable> [, ...]
         | ALL SEQUENCES IN SCHEMA <replaceable class="PARAMETER">schema_name</replaceable> [, ...] }
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE <replaceable>database_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN <replaceable>domain_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER <replaceable>fdw_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER <replaceable>server_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
    ON { FUNCTION <replaceable>function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">arg_name</replaceable> ] <replaceable class="parameter">arg_type</replaceable> [, ...] ] ) [, ...]
         | ALL FUNCTIONS IN SCHEMA <replaceable class="PARAMETER">schema_name</replaceable> [, ...] }
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE <replaceable>lang_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT <replaceable class="PARAMETER">loid</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA <replaceable>schema_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE <replaceable>tablespace_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE <replaceable>type_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT <replaceable class="PARAMETER">role_name</replaceable> [, ...] TO <replaceable class="PARAMETER">role_name</replaceable> [, ...] [ WITH ADMIN OPTION ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-grant-description">
  <title>描述</title>

  <para>
   <command>GRANT</command>命令由两种基本的变体：一种授予在一个数据库对象（表、列、视图、外部表、序列、数据库、外部数据包装器、外部服务器、函数、过程语言、模式或表空间）上的特权，另一个授予一个角色中的成员关系。这些变体在很多方面都相似，但是也有很多不同，所以还是得分别描述它们。
  </para>

 <refsect2 id="sql-grant-description-objects">
  <title>在数据库对象上 GRANT</title>

  <para>
   这种<command>GRANT</command>命令的变体将一个数据库对象上的指定特权交给一个或多个角色。如果有一些已经被授予，这些特权会被加入到它们之中。
  </para>

  <para>
   还有一个选项可以授予一个或多个模式中同种类型的所有对象上的特权。这种功能当前只对表、序列和函数支持（但是注意<literal>ALL TABLES</>会被认为是包括视图和外部表）。
  </para>

  <para>
   关键词<literal>PUBLIC</literal>指示特权要被授予给所有角色，包括那些可能稍后会被创建的角色。<literal>PUBLIC</literal>可以被认为是一个被隐式定义的总是包含所有角色的组。任何特定角色都将具有直接授予给它的特权、授予给它作为成员所在的任何角色的特权以及被授予给<literal>PUBLIC</literal>的特权。
  </para>

  <para>
   如果指定了<literal>WITH GRANT OPTION</literal>，特权的接收者可以接着把它授予给其他人。如果没有授权选项，接收者就不能这样做。授权选项不能被授予给<literal>PUBLIC</literal>。
  </para>

  <para>
   没有必要把权限授予给一个对象的拥有者（通常就是创建该对象的用户），因为拥有者默认具有所有的特权（不过拥有者可能为了安全选择撤回一些它所拥有的特权）。
  </para>

  <para>
   删除一个对象或者以任何方式修改其定义的权力是不被当作一个可授予特权的，它被固化在拥有者中，并且不能被授予和撤回（不过，相似地效果可以通过授予或者撤回在拥有该对象的角色中的成员关系来实现，见下文）。拥有者也隐式地拥有该对象的所有授权选项。
  </para>

  <para>
   PostgreSQL 会把某些类型的对象上的默认特权授予给<literal>PUBLIC</literal>。默认在表、列、模式或表空间上不会有特权会被授予给<literal>PUBLIC</literal>。对于其他类型，被授予给<literal>PUBLIC</literal>的默认特权是下面这些：数据库上的<literal>CONNECT</literal>以及<literal>CREATE TEMP TABLE</literal>；函数上的<literal>EXECUTE</literal>特权；语言的<literal>USAGE</literal>特权。当然，对象拥有者可以<command>REVOKE</command>默认和专门授予的特权（为了最好的安全性，应该在创建该对象的同一个事务中发出<command>REVOKE</>，这样其他用户就没有时间窗口使用该对象）。还有，这些初始的默认特权设置可以使用<xref linkend="sql-alterdefaultprivileges">命令修改。
  </para>

  <para>
   可能的特权是：

   <variablelist>
    <varlistentry>
     <term>SELECT</term>
     <listitem>
      <para>
       允许从指定表、视图或序列的任何列或者列出的特定列进行<xref linkend="sql-select">。还允许使用<xref linkend="sql-copy"> TO。在<xref linkend="sql-update">或<xref linkend="sql-delete">中引用已有列值时也需要这个特权。对于序列，这个特权也允许使用<function>currval</function>函数。对于大对象，这个特权允许读取对象。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>INSERT</term>
     <listitem>
      <para>
       允许<xref linkend="sql-insert">一个新行到指定表中。如果列出了特定的列，只有这些列能在<command>INSERT</>命令中被赋值（其他列将因此收到默认值）。还允许<xref linkend="sql-copy"> FROM。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>UPDATE</term>
     <listitem>
      <para>
       允许对指定表、视图或序列的任何列或者列出的特定列进行<xref linkend="sql-update">（实际上，任何非平凡的<command>UPDATE</>命令也会要求<literal>SELECT</>特权，因为它必须引用表列来判断哪些行要被更新或者为列计算新值）。除<literal>SELECT</literal>特权之外，<literal>SELECT ... FOR UPDATE</literal>以及<literal>SELECT ... FOR SHARE</literal>也要求至少一列上的这个特权。对于序列，这个特权允许使用<function>nextval</function>和<function>setval</function>函数。对于大对象，这个特权允许写入或者截断对象。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>DELETE</term>
     <listitem>
      <para>
       允许从指定的表中<xref linkend="sql-delete">一行（实际上，任何非平凡的<command>DELETE</>命令也将要求<literal>SELECT</>特权，因为它必须引用表列来判断要删除哪些行）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>TRUNCATE</term>
     <listitem>
      <para>
       允许在指定的表上<xref linkend="sql-truncate">。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>REFERENCES</term>
     <listitem>
      <para>
       要创建一个外键约束，必须在引用列和被引用列上都有这个特权。这个特权可以为一个表的所有列或者特定的列授予。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>TRIGGER</term>
     <listitem>
      <para>
       允许在指定的表上创建触发器（见<xref linkend="sql-createtrigger">语句）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>CREATE</term>
     <listitem>
      <para>
       对于数据库，允许在其中创建新模式。
      </para>
      <para>
       对于模式，允许在其中创建新的对象。要重命名一个已有对象，你必须拥有该对象<emphasis>并且</>具有所在模式的这个特权。
      </para>
      <para>
       对于表空间，允许在其中创建表、索引和临时文件，并且允许创建使用该表空间作为默认表空间的数据库（注意撤回这个特权将不会更改现有对象的放置位置）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>CONNECT</term>
     <listitem>
      <para>
       允许用户连接到指定数据库。在连接开始时会检查这个特权（除了检查由<filename>pg_hba.conf</>施加的任何限制之外）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>TEMPORARY</term>
     <term>TEMP</term>
     <listitem>
      <para>
       允许在使用指定数据库时创建临时表。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>EXECUTE</term>
     <listitem>
      <para>
       允许使用指定的函数以及使用在该函数之上实现的任何操作符。这是适用于函数的唯一一种特权类型（这种语法也可用于聚集函数）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>USAGE</term>
     <listitem>
      <para>
       对于过程语言，允许使用指定的语言创建函数。这是适用于过程语言的唯一一种特权类型。
      </para>
      <para>
       对于模式，允许访问包含在指定模式中的对象（假定这些对象的拥有特权要求也满足）。本质上这允许被授权者在模式中<quote>查阅</>对象。如果没有这个权限，还是有可能看到对象名称，例如通过查询系统表。还有，在撤回这个权限之后，现有后端可能有语句之前已经执行过这种查阅，因此这不是一种阻止对象访问的完全安全的方法。
      </para>
      <para>
       对于序列，这种特权允许使用<function>currval</function>和<function>nextval</function>函数。
      </para>
      <para>
       对于类型和域，这种特权允许用该类型或域来创建表、函数和其他模式对象（注意这不能控制类型的一般<quote>用法</quote>，例如出现在查询中的该类型的值。它只阻止基于该类型创建对象。该特权的主要目的是控制哪些用户在一个类型上创建了依赖，这能够阻止拥有者以后更改该类型）。
      </para>
      <para>
       对于外部数据包装器，这个特权让被授权者能够使用该外部数据包装器创建新服务器。
      </para>
      <para>
       对于服务器，这个特权让被授权者使用该服务器创建外部表，以及创建、修改或删除与该服务器相关的属于该用户的用户映射。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>ALL PRIVILEGES</term>
     <listitem>
      <para>
       一次授予所有的可用特权。在<productname>PostgreSQL</productname>中，<literal>PRIVILEGES</literal>关键词是可选的，但是在严格的 SQL 中是要求它的。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   其他命令所要求的特权会被列在相应命令的参考页中。
  </para>
 </refsect2>

 <refsect2 id="sql-grant-description-roles">
  <title>角色上的 GRANT</title>

  <para>
   <command>GRANT</command>命令的这种变体把一个角色中的成员关系授予一个或者多个其他角色。一个角色中的成员关系是有意义的，因为它会把授予给一个角色的特权带给该角色的每一个成员。
  </para>

  <para>
   如果指定了<literal>WITH ADMIN OPTION</literal>，成员接着可以把该角色中的成员关系授予给其他用户，也可以撤回该角色中的成员关系。如果没有管理选项，普通用户就不能做这些工作。一个角色不被认为持有自身的<literal>WITH ADMIN OPTION</literal>，但是它可以从一个会话用户匹配该角色的数据库会话中授予或撤回自身中的成员关系。数据库超级用户能够授予或撤回任何角色中任何人的成员关系。具有<literal>CREATEROLE</>特权的角色能够授予或者撤回任何非超级用户角色中的成员关系。
  </para>

  <para>
   和特权的情况不同，一个角色中的成员关系不能被授予<literal>PUBLIC</>。还要注意这种形式的命令不允许噪声词<literal>GROUP</>。
  </para>
 </refsect2>
 </refsect1>


 <refsect1 id="SQL-GRANT-notes">
  <title>注解</title>

   <para>
    <xref linkend="sql-revoke">命令被用来撤回访问特权。
   </para>

   <para>
    从<productname>PostgreSQL</productname> 8.1 开始，用户和组的概念已经被统一到一种单一类型的实体（被称为一个角色）。因此不再需要使用关键词<literal>GROUP</>来标识一个被授权者是一个用户或者一个组。在该命令中仍然允许<literal>GROUP</>，但是它只是一个噪音词而已。
   </para>

   <para>
    如果一个用户持有特定列或者其所在的整个表的特权，该用户可以在该列上执行<command>SELECT</>、<command>INSERT</>等命令。在表层面上授予特权并且然后对一列撤回该特权将不会按照你希望的运作：表级别的授权不会受到列级别操作的影响。
   </para>

   <para>
    当一个对象的非拥有者尝试<command>GRANT</>该对象上的特权，如果该用户在该对象上什么特权都不拥有，该命令将立刻失败。只要有一些特权可用，该命令将继续，但是它将只授予那些用户具有授权选项的特权。如果不持有授权选项，<command>GRANT ALL PRIVILEGES</>形式将发出一个警告消息。而如果不持有命令中特别提到的任何特权的授权选项，其他形式将会发出一个警告（原则上这些语句也适用于对象拥有者，但是由于拥有者总是被视为持有所有授权选项，因此这种情况不会发生）。
   </para>

   <para>
    需要注意的是，数据库超级用户可以访问所有对象而不管对象特权的设置。这可与 Unix 系统中的<literal>root</>权力相提并论。对于<literal>root</>来说，除非绝对必要，使用一个超级用户来操作是不明智的。
   </para>

   <para>
    如果一个超级用户选择发出一个<command>GRANT</>或者<command>REVOKE</>命令，该命令将被执行，好像它是由被影响对象的拥有者发出的一样。特别地，通过这样一个命令授予的特权将好像是由对象拥有者授予的一样（对于角色成员关系，该成员关系好像是由该角色本身授予的一样）。
   </para>

   <para>
    <command>GRANT</>以及<command>REVOKE</>也可以由一个不是受影响对象拥有者的角色完成，不过该角色是拥有该对象的角色的一个成员，或者是在该对象上持有特权的<literal>WITH GRANT OPTION</literal>的角色的一个成员。在这种情况下，特权将被记录为由实际拥有该对象的角色授予或者是由持有特权的<literal>WITH GRANT OPTION</literal>的角色授予。例如，如果表<literal>t1</>被角色<literal>g1</>拥有，<literal>u1</>是它的一个成员，那么<literal>u1</>可以把<literal>t1</>上的特权授予给<literal>u2</>，但是那些特权将好像是直接由<literal>g1</>授予的。角色<literal>g1</>的任何其他成员可以稍后撤回它们。
   </para>

   <para>
    如果执行<command>GRANT</>的角色间接地通过多于一条角色成员关系路径持有所需的特权，将不会指定哪一个包含它的角色将被记录为完成了该授权。在这样的情况中，最好使用<command>SET ROLE</>来成为你想用其做<command>GRANT</>的特定角色。
   </para>

   <para>
    授予一个表上的权限不会自动地扩展权限给该表使用的任何序列，包括绑定在<type>SERIAL</>列上的序列。序列上的权限必须被独立设置。
   </para>

   <para>
    使用<xref linkend="app-psql">的<command>\dp</command>命令可获得表和列上现有的特权的信息。例如：
<programlisting>
=&gt; \dp mytable
                              Access privileges
 Schema |  Name   | Type  |   Access privileges   | Column access privileges 
--------+---------+-------+-----------------------+--------------------------
 public | mytable | table | miriam=arwdDxt/miriam | col1:
                          : =r/miriam             :   miriam_rw=rw/miriam
                          : admin=arw/miriam        
(1 row)
</programlisting>
    <command>\dp</command>显示的项解释如下：
<literallayout class="monospaced">
角色名=xxxx -- 被授予给一个角色的特权
        =xxxx -- 被授予给 PUBLIC 的特权

            r -- SELECT ("读")
            w -- UPDATE ("写")
            a -- INSERT ("追加")
            d -- DELETE
            D -- TRUNCATE
            x -- REFERENCES
            t -- TRIGGER
            X -- EXECUTE
            U -- USAGE
            C -- CREATE
            c -- CONNECT
            T -- TEMPORARY
      arwdDxt -- ALL PRIVILEGES （对于表，对其他对象会变化）
            * -- 用于前述特权的授权选项

        /yyyy -- 授予该特权的角色
</literallayout>

    用户<literal>miriam</>在创建了表<literal>mytable</>并且执行了下面的操作后会看到上述例子的显示：

<programlisting>
GRANT SELECT ON mytable TO PUBLIC;
GRANT SELECT, UPDATE, INSERT ON mytable TO admin;
GRANT SELECT (col1), UPDATE (col1) ON mytable TO miriam_rw;
</programlisting>
   </para>

   <para>
    对于非表对象，有其他的<command>\d</>命令可显示它们的特权。
   </para>

   <para>
    如果一个给定对象的<quote>Access privileges</>列为空，表示该对象具有默认的特权（也就是，它的特权列为空）。默认特权总是包括拥有者的所有特权，并且如前所述根据对象类型可以包括一些<literal>PUBLIC</>的特权。一个对象上的第一个<command>GRANT</>或者<command>REVOKE</>将实例化默认特权（例如，产生<literal>{miriam=arwdDxt/miriam}</>）并且接着为每一个指定请求修改它们。类似地，显示在<quote>Column access privileges</>列中的项只用于带有非默认特权的列（注意，为了这个目的<quote>default privileges</>总是表示该对象类型的内建默认特权）。一个特权已经被一个<command>ALTER DEFAULT PRIVILEGES</>命令影响的对象将与一个显式特权项一起显示，该项包括<command>ALTER</>的效果）。
   </para>

   <para>
    注意拥有者的隐式授权选项没有在访问特权显示中被标出。当授权选项被显式地授予给某人时，只会出现一个<literal>*</>。
   </para>
 </refsect1>

 <refsect1 id="sql-grant-examples">
  <title>例子</title>

  <para>
   把表<literal>films</literal>上的插入特权授予给所有用户：

<programlisting>
GRANT INSERT ON films TO PUBLIC;
</programlisting>
  </para>

  <para>
   把视图<literal>kinds</literal>上的所有可用特权授予给用户<literal>manuel</literal>：

<programlisting>
GRANT ALL PRIVILEGES ON kinds TO manuel;
</programlisting>

   注意虽然上述语句被一个超级用户或者<literal>kinds</literal>的拥有者执行时确实会授予所有特权，但是当由其他人执行时将只会授予那些执行者拥有授权选项的权限。
  </para>

  <para>
   把角色<literal>admins</>中的成员关系授予给用户<literal>joe</>：

<programlisting>
GRANT admins TO joe;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-grant-compatibility">
  <title>兼容性</title>

   <para>
    根据 SQL 标准，<literal>ALL PRIVILEGES</literal>中的<literal>PRIVILEGES</literal>关键词是必须的。SQL 标准不支持在每个命令中设置超过一个对象上的特权。
   </para>

   <para>
    <productname>PostgreSQL</productname>允许一个对象拥有者撤回它拥有的普通特权：例如，一个表拥有者可以通过撤回其自身拥有的<literal>INSERT</>、<literal>UPDATE</>、<literal>DELETE</>和<literal>TRUNCATE</>特权让该表对它自己只读。根据 SQL 标准这是不可能发生的。原因在于<productname>PostgreSQL</productname>认为拥有者的特权是由拥有者授予给它自己的，因此它也能够撤回它们。在 SQL 标准中，拥有者的特权是有一个假设的实体<quote>_SYSTEM</>所授予。由于不是<quote>_SYSTEM</>，拥有者就不能撤回这些权力。
   </para>

   <para>
    根据 SQL 标准，授权选项可以被授予给<literal>PUBLIC</literal>， PostgreSQL 只支持把授权选项授予给角色。
   </para>

   <para>
    SQL 标准提供了其他对象类型上的<literal>USAGE</literal>特权：字符集、排序规则、翻译。
   </para>

   <para>
    在 SQL 标准中，序列只有一个<literal>USAGE</literal>特权，它控制<literal>NEXT VALUE FOR</literal>表达式的使用，该表达式等效于 PostgreSQL 中的函数<function>nextval</function>。序列的特权<literal>SELECT</literal>和<literal>UPDATE</literal>是 PostgreSQL 扩展。应用序列的<literal>USAGE</literal>特权到<literal>currval</literal>函数也是一个 PostgreSQL 扩展（该函数本身也是）。
   </para>

   <para>
    数据库、表空间、模式和语言上的特权都是<productname>PostgreSQL</productname>扩展。
   </para>
 </refsect1>


 <refsect1>
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-revoke"></member>
   <member><xref linkend="sql-alterdefaultprivileges"></member>
  </simplelist>
 </refsect1>

</refentry>

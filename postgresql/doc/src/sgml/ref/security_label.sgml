<!--
doc/src/sgml/ref/security_label.sgml
PostgreSQL documentation
-->

<refentry id="SQL-SECURITY-LABEL">
 <indexterm zone="sql-security-label">
  <primary>SECURITY LABEL</primary>
 </indexterm>
 <refmeta>
  <refentrytitle>SECURITY LABEL</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SECURITY LABEL</refname>
  <!-- 
  <refpurpose>define or change a security label applied to an object</refpurpose> 
  -->
  <refpurpose>定义或改变一个应用于对象的安全标签</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
SECURITY LABEL [ FOR <replaceable class="PARAMETER">provider</replaceable> ] ON
{
  TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  COLUMN <replaceable class="PARAMETER">table_name</replaceable>.<replaceable class="PARAMETER">column_name</replaceable> |
  AGGREGATE <replaceable class="PARAMETER">aggregate_name</replaceable> ( <replaceable>aggregate_signature</replaceable> ) |
  DATABASE <replaceable class="PARAMETER">object_name</replaceable> |
  DOMAIN <replaceable class="PARAMETER">object_name</replaceable> |
  EVENT TRIGGER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN TABLE <replaceable class="PARAMETER">object_name</replaceable>
  FUNCTION <replaceable class="PARAMETER">function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) |
  LARGE OBJECT <replaceable class="PARAMETER">large_object_oid</replaceable> |
  MATERIALIZED VIEW <replaceable class="PARAMETER">object_name</replaceable> |
  [ PROCEDURAL ] LANGUAGE <replaceable class="PARAMETER">object_name</replaceable> |
  ROLE <replaceable class="PARAMETER">object_name</replaceable> |
  SCHEMA <replaceable class="PARAMETER">object_name</replaceable> |
  SEQUENCE <replaceable class="PARAMETER">object_name</replaceable> |
  TABLESPACE <replaceable class="PARAMETER">object_name</replaceable> |
  TYPE <replaceable class="PARAMETER">object_name</replaceable> |
  VIEW <replaceable class="PARAMETER">object_name</replaceable>
} IS '<replaceable class="PARAMETER">label</replaceable>'

<phrase>where <replaceable>aggregate_signature</replaceable> is:</phrase>

* |
[ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] |
[ [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] ] ORDER BY [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>SECURITY LABEL</command> applies a security label to a database
   object.  An arbitrary number of security labels, one per label provider, can
   be associated with a given database object.  Label providers are loadable
   modules which register themselves by using the function
   <function>register_label_provider</>.
  </para>
-->
<para>
<command>SECURITY LABEL</command>为一个数据库对象申请一个安全标签。
每一个标签提供程序的任意数量的安全标签都可以与一个给定的数据库对象关联。
标签提供者是可加载模块，通过使用函数<function>register_label_provider</>记录他们自己。
</para>

  <note>
    <!--
<para>
      <function>register_label_provider</> is not an SQL function; it can
      only be called from C code loaded into the backend.
    </para>
-->
<para>
<function>register_label_provider</>不是SQL函数；只能从C代码存入后端调用。
</para>
  </note>

  <!--
<para>
   The label provider determines whether a given label is valid and whether
   it is permissible to assign that label to a given object.  The meaning of a
   given label is likewise at the discretion of the label provider.
   <productname>PostgreSQL</> places no restrictions on whether or how a
   label provider must interpret security labels; it merely provides a
   mechanism for storing them.  In practice, this facility is intended to allow
   integration with label-based mandatory access control (MAC) systems such as
   <productname>SE-Linux</>.  Such systems make all access control decisions
   based on object labels, rather than traditional discretionary access control
   (DAC) concepts such as users and groups.
  </para>
-->
<para>
标签提供者决定一个给定的标签是否有效，并且是否允许将那个标签分配给一个给定的对象。
给定标签的含义和标签提供者的描述相同。<productname>PostgreSQL</>
不限制标签提供者是否或如何解释安全标签；只是提供过一个存储它们的机制。实际上，
这个便利是为了允许集成基于标签的强制访问控制（MAC）系统，如<productname>SE-Linux</>。
这样的系统使得访问控制决策基于对象标签，而不是传统的自主访问控制（DAC）概念，如用户和组。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">object_name</replaceable></term>
    <term><replaceable class="parameter">table_name.column_name</replaceable></term>
    <term><replaceable class="parameter">aggregate_name</replaceable></term>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the object to be labeled.  Names of tables,
      aggregates, domains, foreign tables, functions, sequences, types, and
      views can be schema-qualified.
     </para>
-->
<para>
有标签的对象的名字。可模式修饰的表、集群、域、外部表、函数、序列、类型和视图的名字。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">provider</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the provider with which this label is to be associated.  The
      named provider must be loaded and must consent to the proposed labeling
      operation.  If exactly one provider is loaded, the provider name may be
      omitted for brevity.
     </para>
-->
<para>
与这个标签相关的提供者的名字。被指名的提供者必须被加载并且必须同意提出的标签操作。
如果只加载了一个提供者，那么为了简洁会省略提供者的名字。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argmode</replaceable></term>

    <listitem>
     <!--
<para>
      The mode of a function or aggregate
      argument: <literal>IN</>, <literal>OUT</>,
      <literal>INOUT</>, or <literal>VARIADIC</>.
      If omitted, the default is <literal>IN</>.
      Note that <command>SECURITY LABEL</command> does not actually
      pay any attention to <literal>OUT</> arguments, since only the input
      arguments are needed to determine the function's identity.
      So it is sufficient to list the <literal>IN</>, <literal>INOUT</>,
      and <literal>VARIADIC</> arguments.
     </para>
-->
<para>
函数或聚合参数的模式：<literal>IN</>, <literal>OUT</>, <literal>INOUT</>, 或 <literal>VARIADIC</>。
如果省略，缺省是<literal>IN</>。请注意，<command>SECURITY LABEL</command>
并不实际注意<literal>OUT</>参数，因为只需要输入参数判断函数的安全。
所以列出<literal>IN</>, <literal>INOUT</>, 和 <literal>VARIADIC</>就足够了。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argname</replaceable></term>

    <listitem>
     <!--
<para>
      The name of a function or aggregate argument.
      Note that <command>SECURITY LABEL</command> does not actually
      pay any attention to argument names, since only the argument data
      types are needed to determine the function's identity.
     </para>
-->
<para>
函数或聚合参数的名字。请注意，<command>SECURITY LABEL</command>
并不实际注意参数名字，因为只需要参数数据类型判断函数的身份。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argtype</replaceable></term>

    <listitem>
     <!--
<para>
      The data type of a function or aggregate argument.
     </para>
-->
<para>
函数或聚合参数的数据类型。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">large_object_oid</replaceable></term>
    <listitem>
     <!--
<para>
      The OID of the large object.
     </para>
-->
<para>
大对象的OID。
</para>
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <!--
<para>
       This is a noise word.
      </para>
-->
<para>
这是一个噪声字。
</para>
     </listitem>
    </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">label</replaceable></term>
    <listitem>
     <!--
<para>
      The new security label, written as a string literal; or <literal>NULL</>
      to drop the security label.
     </para>
-->
<para>
新的安全标签，写作一个字符串；或<literal>NULL</>以删除安全标签。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   The following example shows how the security label of a table might
   be changed.

<programlisting>
SECURITY LABEL FOR selinux ON TABLE mytable IS 'system_u:object_r:sepgsql_table_t:s0';
</programlisting></para>
-->
<para>
下列例子显示了如何改变一个表的安全标签。
<programlisting>
SECURITY LABEL FOR selinux ON TABLE mytable IS 'system_u:object_r:sepgsql_table_t:s0';
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>
  <!--
<para>
   There is no <command>SECURITY LABEL</command> command in the SQL standard.
  </para>
-->
<para>
SQL标准中没有<command>SECURITY LABEL</command>命令。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>
  <simplelist type="inline">
   <member><xref linkend="sepgsql"></member>
   <member><xref linkend="dummy-seclabel"></member>
  </simplelist>
 </refsect1>
</refentry>

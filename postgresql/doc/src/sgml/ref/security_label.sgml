<!--
doc/src/sgml/ref/security_label.sgml
PostgreSQL documentation
-->

<refentry id="SQL-SECURITY-LABEL">
 <indexterm zone="sql-security-label">
  <primary>SECURITY LABEL</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>SECURITY LABEL</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SECURITY LABEL</refname>
  <refpurpose>定义或更改应用到一个对象的安全标签</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
SECURITY LABEL [ FOR <replaceable class="PARAMETER">provider</replaceable> ] ON
{
  TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  COLUMN <replaceable class="PARAMETER">table_name</replaceable>.<replaceable class="PARAMETER">column_name</replaceable> |
  AGGREGATE <replaceable class="PARAMETER">aggregate_name</replaceable> ( <replaceable>aggregate_signature</replaceable> ) |
  DATABASE <replaceable class="PARAMETER">object_name</replaceable> |
  DOMAIN <replaceable class="PARAMETER">object_name</replaceable> |
  EVENT TRIGGER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN TABLE <replaceable class="PARAMETER">object_name</replaceable>
  FUNCTION <replaceable class="PARAMETER">function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) |
  LARGE OBJECT <replaceable class="PARAMETER">large_object_oid</replaceable> |
  MATERIALIZED VIEW <replaceable class="PARAMETER">object_name</replaceable> |
  [ PROCEDURAL ] LANGUAGE <replaceable class="PARAMETER">object_name</replaceable> |
  ROLE <replaceable class="PARAMETER">object_name</replaceable> |
  SCHEMA <replaceable class="PARAMETER">object_name</replaceable> |
  SEQUENCE <replaceable class="PARAMETER">object_name</replaceable> |
  TABLESPACE <replaceable class="PARAMETER">object_name</replaceable> |
  TYPE <replaceable class="PARAMETER">object_name</replaceable> |
  VIEW <replaceable class="PARAMETER">object_name</replaceable>
} IS '<replaceable class="PARAMETER">label</replaceable>'

<phrase>其中 <replaceable>aggregate_signature</replaceable> 是：</phrase>

* |
[ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] |
[ [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] ] ORDER BY [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>SECURITY LABEL</command>对一个数据库对象应用一个安全
   标签。可以把任意数量的安全标签（每个标签提供者对应一个）关联到一个给定
   的数据库对象。标签提供者是使用函数<function>register_label_provider</>
   注册自己的可装载模块。
  </para>

  <note>
    <para>
      <function>register_label_provider</>不是一个 SQL 函数，它只能在被载入
      到后端的 C 代码中调用。
    </para>
  </note>

  <para>
   标签提供者决定一个给定标签是否合法并且它是否可以被分配该标签给一个给定
   对象。一个给定标签的含义也同样由标签提供者判断。
   <productname>PostgreSQL</>没有对一个标签提供者是否必须或者如何解释
   安全标签做出限定，它仅仅只是提供了一种机制来存储它们。实际上，这个功能是
   为了允许与基于标签的强制访问控制（MAC）系统集成（例如
   <productname>SE-Linux</>）。这类系统会基于对象标签而不是传统的自主
   访问控制（DAC）概念（例如用户和组）做出所有访问控制决定。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">object_name</replaceable></term>
    <term><replaceable class="parameter">table_name.column_name</replaceable></term>
    <term><replaceable class="parameter">aggregate_name</replaceable></term>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <para>
      要被贴上标签的对象的名称。表、聚集、域、外部表、函数、序列、类型和视图
      的名称可以是模式限定的。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">provider</replaceable></term>
    <listitem>
     <para>
      这个标签相关联的提供者的名称。所提到的提供者必须已被载入并且必须赞同所提出
      的标签操作。如果正好只载入了一个提供者，可以出于简洁的需要忽略提供者的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argmode</replaceable></term>

    <listitem>
     <para>
      一个函数或者聚集参数的模式：<literal>IN</>、<literal>OUT</>、
      <literal>INOUT</>或者<literal>VARIADIC</>。如果被忽略，默认值会是
      <literal>IN</>。注意<command>SECURITY LABEL</command>并不真正
      关心<literal>OUT</>参数，因为判断函数的身份时只需要输入参数。因此列出
      <literal>IN</>、<literal>INOUT</>和<literal>VARIADIC</>参数足矣。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argname</replaceable></term>

    <listitem>
     <para>
      一个函数或者聚集参数的名称。注意<command>SECURITY LABEL</command>
      并不真正关心参数的名称，因为判断函数的身份时只需要参数的数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argtype</replaceable></term>

    <listitem>
     <para>
      一个函数或聚集参数的数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">large_object_oid</replaceable></term>
    <listitem>
     <para>
      大对象的 OID。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <para>
       这是一个噪声词。
      </para>
     </listitem>
    </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">label</replaceable></term>
    <listitem>
     <para>
      写成一个字符串文本的新安全标签。如果写成<literal>NULL</>表示删除
      原有的安全标签。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   下面的例子展示了如何更改一个表的安全标签。

<programlisting>
SECURITY LABEL FOR selinux ON TABLE mytable IS 'system_u:object_r:sepgsql_table_t:s0';
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>
  <para>
   在 SQL 标准中没有<command>SECURITY LABEL</command>命令。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>
  <simplelist type="inline">
   <member><xref linkend="sepgsql"></member>
   <member><filename>src/test/modules/dummy_seclabel</filename></member>
  </simplelist>
 </refsect1>
</refentry>

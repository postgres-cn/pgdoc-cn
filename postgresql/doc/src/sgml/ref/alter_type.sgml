<!--
doc/src/sgml/ref/alter_type.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERTYPE">
 <indexterm zone="sql-altertype">
  <primary>ALTER TYPE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER TYPE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER TYPE</refname>
  <refpurpose>
   更改一个类型的定义
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> <replaceable class="PARAMETER">action</replaceable> [, ... ]
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> OWNER TO <replaceable class="PARAMETER">new_owner</replaceable>
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> RENAME ATTRIBUTE <replaceable class="PARAMETER">attribute_name</replaceable> TO <replaceable class="PARAMETER">new_attribute_name</replaceable> [ CASCADE | RESTRICT ]
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> RENAME TO <replaceable class="PARAMETER">new_name</replaceable>
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> SET SCHEMA <replaceable class="PARAMETER">new_schema</replaceable>
ALTER TYPE <replaceable class="PARAMETER">name</replaceable> ADD VALUE [ IF NOT EXISTS ] <replaceable class="PARAMETER">new_enum_value</replaceable> [ { BEFORE | AFTER } <replaceable class="PARAMETER">existing_enum_value</replaceable> ]

<phrase>这里<replaceable class="PARAMETER">action</replaceable> 是以下之一：</phrase>

    ADD ATTRIBUTE <replaceable class="PARAMETER">attribute_name</replaceable> <replaceable class="PARAMETER">data_type</replaceable> [ COLLATE <replaceable class="PARAMETER">collation</replaceable> ] [ CASCADE | RESTRICT ]
    DROP ATTRIBUTE [ IF EXISTS ] <replaceable class="PARAMETER">attribute_name</replaceable> [ CASCADE | RESTRICT ]
    ALTER ATTRIBUTE <replaceable class="PARAMETER">attribute_name</replaceable> [ SET DATA ] TYPE <replaceable class="PARAMETER">data_type</replaceable> [ COLLATE <replaceable class="PARAMETER">collation</replaceable> ] [ CASCADE | RESTRICT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>ALTER TYPE</command>更改一种现有类型的定义。
   它有几种形式：

  <variablelist>
   <varlistentry>
    <term><literal>ADD ATTRIBUTE</literal></term>
    <listitem>
     <para>
      这种形式为一种组合类型增加一个新属性，使用的语法和
      <xref linkend="SQL-CREATETYPE">相同。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP ATTRIBUTE [ IF EXISTS ]</literal></term>
    <listitem>
     <para>
      这种形式从一种组合类型删除一个属性。如果指定了
      <literal>IF EXISTS</literal>并且该属性不存在，则不会抛出错误。
      这种情况下会发出一个提示。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET DATA TYPE</literal></term>
    <listitem>
     <para>
      这种形式更改一种组合类型的一个属性类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OWNER</literal></term>
    <listitem>
     <para>
      这种形式更改该类型的拥有者。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME</literal></term>
    <listitem>
     <para>
      这种形式更改该类型的名称或者一种组合类型的一个属性的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET SCHEMA</literal></term>
    <listitem>
     <para>
      这种形式把该类型移动到另一个模式中。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD VALUE [ IF NOT EXISTS ] [ BEFORE | AFTER ]</literal></term>
    <listitem>
     <para>
      这种形式为一种枚举类型增加一个新值。可以用<literal>BEFORE</literal>或者
      <literal>AFTER</literal>一个现有值来指定新值在枚举顺序中的位置。
      否则，新项会被增加在值列表的最后。
     </para>
     <para>
      如果指定了<literal>IF NOT EXISTS</literal>，该类型已经包含新值时不会发生
      错误：会发出一个提示但是不采取其他行动。否则，如果新值已经存在会发生错误。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADE</literal></term>
    <listitem>
     <para>
      自动把该操作传播给使用被修改类型的类型化表及其后代表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>
    <listitem>
     <para>
      如果被修改的类型是一个类型化表的类型，则拒绝该操作。
      这是默认值。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  </para>

  <para>
   <literal>ADD ATTRIBUTE</literal>、<literal>DROP
   ATTRIBUTE</literal>和<literal>ALTER ATTRIBUTE</literal>动作
   可以被整合到一个多个修改组成的列表中，以便被平行应用。例如，
   可以在一个命令中增加多个属性并且/或者修改多个属性的类型。
  </para>

  <para>
   要使用<command>ALTER TYPE</>，你必须拥有该类型。要更改
   一个类型的模式，你还必须拥有新模式上的
   <literal>CREATE</literal>特权。要更改拥有者，你还必须
   是新拥有角色的一个直接或者间接成员，并且该角色必须具有该类型的模式上的
   <literal>CREATE</literal>特权（这些限制强制修改拥有者不能做一些通过删除和重
   建该类型做不到的事情。不过，一个超级用户怎么都能更改任何类型的所有权。）。
   要增加一个属性或者修改一个属性类型，你还必须具有该数据类型上的
   <literal>USAGE</literal>特权。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="PARAMETER">name</replaceable></term>
      <listitem>
       <para>
        要修改的一个现有类型的名称（可能被模式限定）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_name</replaceable></term>
      <listitem>
       <para>
        该类型的新名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_owner</replaceable></term>
      <listitem>
       <para>
        该类型新拥有者的用户名。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_schema</replaceable></term>
      <listitem>
       <para>
        该类型的新模式。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">attribute_name</replaceable></term>
      <listitem>
       <para>
        要增加、修改或者删除的属性名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_attribute_name</replaceable></term>
      <listitem>
       <para>
        要被重命名的属性的新名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">data_type</replaceable></term>
      <listitem>
       <para>
        要增加的属性的数据类型，或者是要修改的属性的新类型。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_enum_value</replaceable></term>
      <listitem>
       <para>
        要被增加到一个枚举类型的值列表的新值。和所有枚举文本一样，
        它需要被引号引用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">existing_enum_value</replaceable></term>
      <listitem>
       <para>
        一个现有枚举值，新值应该被增加在紧接着该枚举值之前或者
        之后的位置上。和所有枚举文本一样，它需要被引号引用。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
  </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   <command>ALTER TYPE ... ADD VALUE</>（增加一个新值到枚举类型的形式）
   不能在一个事务块中执行。
  </para>

  <para>
   涉及到一个新增加枚举值的比较有时会被只涉及原始枚举值的比较更慢。这通常
   只会在利用<literal>BEFORE</literal>或者<literal>AFTER</literal>来把新值的
   排序位置设置为非列表结尾的地方时发生。不过，有时候即使把新值增加到最后时
   也会发生这种情况（如果创建了该枚举类型之后出现过 OID 计数器
   <quote>回卷</>，就会发生这种情况）。这种减速通常不明显，但是如果它确实
   带来了麻烦，通过删除并且重建该枚举类型或者转储并且重载整个数据库可以重新
   得到最优性能。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   要重命名一个数据类型：
<programlisting>
ALTER TYPE electronic_mail RENAME TO email;
</programlisting>
  </para>

  <para>
   把类型<literal>email</literal>的拥有者改为
   <literal>joe</literal>：
<programlisting>
ALTER TYPE email OWNER TO joe;
</programlisting>
  </para>

  <para>
   把类型<literal>email</literal>的模式改为
   <literal>customers</literal>：
<programlisting>
ALTER TYPE email SET SCHEMA customers;
</programlisting>
  </para>

  <para>
   增加一个新属性到一个类型：
<programlisting>
ALTER TYPE compfoo ADD ATTRIBUTE f3 int;
</programlisting>
  </para>

  <para>
   在一个特定的排序位置上为一个枚举类型增加一个新值：
<programlisting>
ALTER TYPE colors ADD VALUE 'orange' AFTER 'red';
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   增加和删除属性的变体是 SQL 标准的一部分，而其他变体是
   PostgreSQL 扩展。
  </para>
 </refsect1>

 <refsect1 id="SQL-ALTERTYPE-see-also">
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createtype"></member>
   <member><xref linkend="sql-droptype"></member>
  </simplelist>
 </refsect1>
</refentry>

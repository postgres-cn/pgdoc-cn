<!--
doc/src/sgml/ref/prepare.sgml
PostgreSQL documentation
-->

<refentry id="SQL-PREPARE">
 <indexterm zone="sql-prepare">
  <primary>PREPARE</primary>
 </indexterm>

 <indexterm zone="sql-prepare">
  <primary>prepared statements</primary>
  <secondary>creating</secondary>
 </indexterm>

 <refmeta>
  <refentrytitle>PREPARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>PREPARE</refname>
  <refpurpose>为执行准备一个语句</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
PREPARE <replaceable class="PARAMETER">name</replaceable> [ ( <replaceable class="PARAMETER">data_type</replaceable> [, ...] ) ] AS <replaceable class="PARAMETER">statement</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>PREPARE</command>创建一个预备语句。预备语句是一种
   服务器端对象，它可以被用来优化性能。当
   <command>PREPARE</command>语句被执行时，指定的语句会被解析、
   分析并且重写。当后续发出一个<command>EXECUTE</command>命令
   时，该预备语句会被规划并且执行。这种工作的划分避免了重复性的解析分析
   工作，不过允许执行计划依赖所提供的特定参数值。
  </para>

  <para>
   预备语句可以接受参数：在执行时会被替换到语句中的值。在创建预备语句时，
   可以用位置引用参数，如<literal>$1</>、<literal>$2</>等。也可以选择性
   地指定参数数据类型的一个列表。当一个参数的数据类型没有被指定或者被声明
   为<literal>unknown</literal>时，其类型会从该参数被使用的环境中推知（
   如果可能）。在执行该语句时，在<command>EXECUTE</command>语句
   中为这些参数指定实际值。更多有关于此的信息可参考<xref
   linkend="sql-execute">。
  </para>

  <para>
   预备语句只在当前数据库会话期间存在。当会话结束时，预备语句会消失，因此
   在重新使用之前必须重新建立它。这也意味着一个预备语句不能被多个数据库客
   户端同时使用。不过，每一个客户端可以创建它们自己的预备语句来使用。预备
   语句可以用<xref linkend="sql-deallocate">命令手工清除。
  </para>

  <para>
   当一个会话要执行大量类似语句时，预备语句能够得到最大性能优势。如果该语
   句很复杂（难于规划或重写），例如，如果查询涉及很
   多表的连接或者要求应用多个规则，性能差异将会特别明显。如果语句相对比较
   容易规划和重写，但是执行起来开销相对较大，那么预备语句的性能优势就不那
   么显著了。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <para>
      给这个特定预备语句的任意名称。它在一个会话中必须唯一并且后续将被
      用来执行或者清除一个之前准备好的语句。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">data_type</replaceable></term>
    <listitem>
     <para>
      预备语句一个参数的数据类型。如果一个特定参数的数据类型没有被
      指定或者被指定为<literal>unknown</literal>，将从该参数被使用
      的环境中推得。要在预备语句本身中引用参数，可以使用
      <literal>$1</literal>、<literal>$2</literal>等。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">statement</replaceable></term>
    <listitem>
     <para>
      任何<command>SELECT</>、<command>INSERT</>、<command>UPDATE</>、
      <command>DELETE</>或者<command>VALUES</>语句。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   如果一个预备语句被执行足够多次，服务器可能最终决定保存并且重用一个一般
   计划而不是每次重新规划。如果预备语句没有参数，这将会立刻发生。否则，只
   有在一般计划不比依赖于特定参数值的计划昂贵太多的时候才会发生。通常，只
   有查询的性能被估计为对提供的特定参数值相当不敏感时才会选择一般计划。
  </para>

  <para>
   要检查被<productname>PostgreSQL</productname>用于一个预备语句的
   查询计划，可以使用<xref linkend="sql-explain">。如果用了一个一般计划，
   它将包含参数符号<literal>$<replaceable>n</></literal>，而一个自定义计
   划将具有替换到其中的当前实参。
  </para>

  <para>
   更多关于查询规划以及<productname>PostgreSQL</productname>为此所
   收集的统计信息的内容，请见<xref linkend="sql-analyze">文档。
  </para>

  <para>
   尽管预备语句主要是为了避免重复对语句进行解析分析以及规划，但是只要
   上一次使用该预备语句后该语句中用到的数据库对象发生了定义性（DDL）改变，
   <productname>PostgreSQL</>将会对该语句强制进行重新分析和重新规划。
   还有，如果<xref linkend="guc-search-path">的值发生变化，也将使用新的
   <varname>search_path</>重新解析该语句（后一种行为是从
   <productname>PostgreSQL</productname> 9.3 开始的新行为）。这些
   规则让预备语句的使用在语义上几乎等效于反复提交相同的查询文本，但是能在
   性能上获利（如果没有对象定义被改变，特别是如果最优计划保持不变时）。该
   语义等价性不完美的一个例子是：如果语句用一个未限定的名称引用表，并且之
   后在<varname>search_path</>中更靠前的模式中创建了一个新的同名表，则
   不会发生自动的重解析，因为该语句使用的对象没有被改变。不过，如果某些其他
   更改造成了重解析，后续使用中都会引用新表。
  </para>

  <para>
   可以通过查询
   <link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>
   系统视图来看到会话中所有可用的预备语句。
  </para>
 </refsect1>

 <refsect1 id="sql-prepare-examples">
  <title id="sql-prepare-examples-title">例子</title>
  <para>
   为一个<command>INSERT</command>语句创建一个预备语句，
   然后执行它：
<programlisting>
PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
  </para>

  <para>
   为一个<command>SELECT</command>语句创建一个预备语句，
   然后执行它：
<programlisting>
PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>

   注意第二个参数的数据类型没有被指定，因此会从使用<literal>$2</>
   的环境中推知。
  </para>
 </refsect1>
 <refsect1>
  <title>兼容性</title>

  <para>
   SQL 标准包括一个<command>PREPARE</command>语句，但是
   它只用于嵌入式 SQL。这个版本的
   <command>PREPARE</command>语句也使用了一种有些不同的
   语法。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-deallocate"></member>
   <member><xref linkend="sql-execute"></member>
  </simplelist>
 </refsect1>
</refentry>

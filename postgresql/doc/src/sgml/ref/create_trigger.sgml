<!--
doc/src/sgml/ref/create_trigger.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATETRIGGER">
 <indexterm zone="sql-createtrigger">
  <primary>CREATE TRIGGER</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle>CREATE TRIGGER</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - 语言语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TRIGGER</refname>
  <refpurpose>定义一个新触发器</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ CONSTRAINT ] TRIGGER <replaceable class="PARAMETER">name</replaceable> { BEFORE | AFTER | INSTEAD OF } { <replaceable class="PARAMETER">event</replaceable> [ OR ... ] }
    ON <replaceable class="PARAMETER">table_name</replaceable>
    [ FROM <replaceable class="parameter">referenced_table_name</replaceable> ]
    [ NOT DEFERRABLE | [ DEFERRABLE ] { INITIALLY IMMEDIATE | INITIALLY DEFERRED } ]
    [ FOR [ EACH ] { ROW | STATEMENT } ]
    [ WHEN ( <replaceable class="parameter">condition</replaceable> ) ]
    EXECUTE PROCEDURE <replaceable class="PARAMETER">function_name</replaceable> ( <replaceable class="PARAMETER">arguments</replaceable> )

<phrase>这里的<replaceable class="parameter">event</replaceable>可以是下列之一：</phrase>

    INSERT
    UPDATE [ OF <replaceable class="parameter">column_name</replaceable> [, ... ] ]
    DELETE
    TRUNCATE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>CREATE TRIGGER</command>创建一个新触发器。该触发器将被关联到指定的表、视图或者外部表并且在特定事件发生时将执行指定的函数<replaceable class="parameter">function_name</replaceable>。
  </para>

  <para>
   该触发器可以被指定为在一行上尝试该操作之前触发（在约束被检查并且<command>INSERT</command>、<command>UPDATE</command>或者<command>DELETE</command>被尝试之前）；也可以在该操作完成之后触发（在约束被检查并且<command>INSERT</command>、<command>UPDATE</command>或者<command>DELETE</command>完成之后）；或者取代该操作（在对一个视图插入、更新或删除的情况中）。如果该触发器在事件之前触发或者取代事件，该触发器可以跳过对当前行的操作或者改变正在被插入的行（只对<command>INSERT</command>以及<command>UPDATE</command>操作）。如果该触发器在事件之后触发，所有更改（包括其他触发器的效果）对该触发器<quote>可见</quote>。
  </para>

  <para>
   一个被标记为<literal>FOR EACH ROW</literal>的触发器会对该操作修改的每一行都调用一次。例如，一个影响 10 行的<command>DELETE</command>将导致在目标关系上的任何<literal>ON DELETE</literal>触发器被独立调用 10 次，也就是为每一个被删除的行调用一次。与此相反，一个被标记为<literal>FOR EACH STATEMENT</literal>的触发器只会为任何给定的操作执行一次，不管该操作修改多少行（特别地，一个修改零行的操作将仍会导致任何可用的<literal>FOR EACH STATEMENT</literal>触发器被执行）。
  </para>

  <para>
   被指定为要触发<literal>INSTEAD OF</>触发器事件的触发器必须被标记为<literal>FOR EACH ROW</>，并且只能被定义在视图上。一个视图上的<literal>BEFORE</>和<literal>AFTER</>触发器必须被标记为<literal>FOR EACH STATEMENT</>。
  </para>

  <para>
   此外，触发器可以被定义成为<command>TRUNCATE</command>触发，但只能是<literal>FOR EACH STATEMENT</literal>。
  </para>

  <para>
   下面的表格总结了哪些触发器类型可以被用在表、视图和外部表上：
  </para>

  <informaltable id="supported-trigger-types">
   <tgroup cols="4">
    <thead>
     <row>
      <entry>何时</entry>
      <entry>事件</entry>
      <entry>行级</entry>
      <entry>语句级</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry align="center" morerows="1"><literal>BEFORE</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <entry align="center">表和外部表</entry>
      <entry align="center">表、视图和外部表</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">表</entry>
     </row>
     <row>
      <entry align="center" morerows="1"><literal>AFTER</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <entry align="center">表和外部表</entry>
      <entry align="center">表、视图和外部表</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">表</entry>
     </row>
     <row>
      <entry align="center" morerows="1"><literal>INSTEAD OF</></entry>
      <entry align="center"><command>INSERT</>/<command>UPDATE</>/<command>DELETE</></entry>
      <entry align="center">视图</entry>
      <entry align="center">&mdash;</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">&mdash;</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

  <para>
   还有，一个触发器定义可以指定一个布尔的<literal>WHEN</>条件，它将被测试来看看该触发器是否应该被触发。在行级触发器中，<literal>WHEN</>条件可以检查该行的列的新旧值。语句级触发器也可以有<literal>WHEN</>条件，尽管该特性对于它们不是很有用（因为条件不能引用表中的任何值）。
  </para>

  <para>
   如果有多个同种触发器被定义为相同事件触发，它们将按照名称的字母表顺序被触发。
  </para>

  <para>
   当<literal>CONSTRAINT</>选项被指定，这个命令会创建一个<firstterm>约束触发器</>。这和一个常规触发器相同，不过触发该触发器的时机可以使用<xref linkend="SQL-SET-CONSTRAINTS">调整。约束触发器必须是表上的<literal>AFTER ROW</>触发器。它们可以在导致触发器事件的语句末尾被引发或者在包含该语句的事务末尾被引发。在后一种情况中，它们被称作是被<firstterm>延迟</>。一个待处理的延迟触发器的引发也可以使用<command>SET CONSTRAINTS</>立即强制发生。当约束触发器实现的约束被违背时，约束触发器应该抛出一个异常。
  </para>

  <para>
   <command>SELECT</command>不修改任何行，因此你无法创建<command>SELECT</command>触发器。规则和视图更适合于那种情况。
  </para>

  <para>
   关于触发器的更多信息请见<xref linkend="triggers">。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
      给新触发器的名称。这必须与同一个表上的任何其他触发器相区别。名称不能是模式限定的 &mdash; 该触发器会继承它所在表的模式。对于一个约束触发器，这也是使用<command>SET CONSTRAINTS</>修改触发器行为时要用到的名字。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BEFORE</literal></term>
    <term><literal>AFTER</literal></term>
    <term><literal>INSTEAD OF</literal></term>
    <listitem>
     <para>
      决定该函数是要在事件之前、之后被调用还是会取代该事件。一个约束触发器也能被指定为<literal>AFTER</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">event</replaceable></term>
    <listitem>
     <para>
      <literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>或者<literal>TRUNCATE</literal>之一，这指定了将要引发该触发器的事件。多个事件可以用<literal>OR</literal>指定。
     </para>

     <para>
      对于<literal>UPDATE</literal>事件，可以使用下面的语法指定一个列的列表：
<synopsis>
UPDATE OF <replaceable>column_name1</replaceable> [, <replaceable>column_name2</replaceable> ... ]
</synopsis>
      只有当至少一个被列出的列出现在<command>UPDATE</>命令的更新目标中时，该触发器才会触发。
     </para>

     <para><literal>INSTEAD OF UPDATE</>事件不支持列的列表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <para>
      要使用该触发器的表、视图或外部表的名称（可能是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">referenced_table_name</replaceable></term>
    <listitem>
     <para>
      约束引用的另一个表的名称（可能是模式限定的）。这个选项被用于外键约束并且不推荐用于一般的目的。这只能为约束触发器指定。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFERRABLE</literal></term>
    <term><literal>NOT DEFERRABLE</literal></term>
    <term><literal>INITIALLY IMMEDIATE</literal></term>
    <term><literal>INITIALLY DEFERRED</literal></term>
    <listitem>
     <para>
      该触发器的默认时机。这些约束选项的细节可参考<xref linkend="SQL-CREATETABLE">文档。这只能为约束触发器指定。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FOR EACH ROW</literal></term>
    <term><literal>FOR EACH STATEMENT</literal></term>

    <listitem>
     <para>
      这指定该触发器过程是应该为该触发器事件影响的每一行被引发一次，还是只为每个 SQL 语句被引发一次。如果都没有被指定，<literal>FOR EACH STATEMENT</literal>会是默认值。约束触发器只能被指定为<literal>FOR EACH ROW</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <para>
      一个决定该触发器函数是否将被实际执行的布尔表达式。如果指定了<literal>WHEN</>，只有<replaceable class="parameter">condition</replaceable>返回<literal>true</>时才会调用该函数。在<literal>FOR EACH ROW</literal>触发器中，<literal>WHEN</>条件可以分别写<literal>OLD.<replaceable class="parameter">column_name</replaceable></literal>或者<literal>NEW.<replaceable class="parameter">column_name</replaceable></literal>来引用列的新旧行值。当然，<literal>INSERT</>触发器不能引用<literal>OLD</>并且<literal>DELETE</>触发器不能引用<literal>NEW</>。
     </para>

     <para><literal>INSTEAD OF</>触发器不支持<literal>WHEN</>条件。
     </para>

     <para>
      当前，<literal>WHEN</literal>表达式不能包含子查询。
     </para>

     <para>
      注意对于约束触发器，对于<literal>WHEN</>条件的计算不会被延迟，而是直接在行更新操作被执行之后立刻发生。如果该条件计算得不到真，那么该触发器就不会被放在延迟执行的队列中。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <para>
      一个用户提供的函数，它被声明为不用参数并且返回类型<literal>trigger</>，当触发器引发时会执行该函数。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">arguments</replaceable></term>
    <listitem>
     <para>
      一个可选的逗号分隔的参数列表，它在该触发器被执行时会被提供给该函数。参数是字符串常量。简单的名称和数字常量也可以被写在这里，但是它们将全部被转换成字符串。请检查该触发器函数的实现语言的描述来找出在函数内部如何访问这些参数，这可能与普通函数参数不同。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-notes">
  <title>注解</title>

  <para>
   要在一个表上创建一个触发器，用户必须具有该表上的<literal>TRIGGER</literal>特权。用户还必须具有在触发器函数上的<literal>EXECUTE</literal>特权。
  </para>

  <para>
   使用<xref linkend="sql-droptrigger">移除一个触发器。
  </para>

  <para>
   当一个列相关的触发器（使用<literal>UPDATE OF <replaceable>column_name</replaceable></literal>语法定义的触发器）的列被列为<command>UPDATE</>命令的<literal>SET</>列表目标时，它会被触发。即便该触发器没有被引发，一个列的值也可能改变，因为<literal>BEFORE UPDATE</>触发器对行内容所作的改变不会被考虑。相反，一个诸如<literal>UPDATE ... SET x = x ...</>的命令将引发一个位于列<literal>x</>上的触发器，即便该列的值没有改变。
  </para>

  <para>
   在一个<literal>BEFORE</>触发器中，<literal>WHEN</>条件正好在函数被或者将被执行之前被计算，因此使用<literal>WHEN</>与在触发器函数的开始测试同一个条件没有实质上的区别。特别注意该条件看到的<literal>NEW</>行是当前值，虽然可能已被早前的触发器所修改。还有，一个<literal>BEFORE</>触发器的<literal>WHEN</>条件不允许检查<literal>NEW</>行的系统列（例如<literal>oid</>），因为那些列还没有被设置。
  </para>

  <para>
   在一个<literal>AFTER</>触发器中，<literal>WHEN</>条件正好在行更新发生之后被计算，并且它决定一个事件是否要被放入队列以便在语句的末尾引发该触发器。因此当一个<literal>AFTER</>触发器的<literal>WHEN</>条件不返回真时，没有必要把一个事件放入队列或者在语句末尾重新取得该行。如果触发器只需要为一些行被引发，就能够显著地加快修改很多行的语句的速度。
  </para>

  <para>
   在<productname>PostgreSQL</productname> 7.3 以前的版本中，必须要声明触发器函数为返回占位符类型<type>opaque</>而不是<type>trigger</>。要支持载入旧的转储文件，<command>CREATE TRIGGER</>将接受一个被声明为返回<type>opaque</>的函数，但是它会发出一个通知并且会把该函数的声明返回类型改为<type>trigger</>。
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-examples">
  <title>例子</title>

  <para>
   只要表<literal>accounts</>的一行即将要被更新时会执行函数<function>check_account_update</>：

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>

   下面的例子与上面一个例子相同，但是只在<command>UPDATE</>命令指定要更新<literal>balance</>列时才执行该函数：

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE OF balance ON accounts
    FOR EACH ROW
    EXECUTE PROCEDURE check_account_update();
</programlisting>

   这种形式只有列<literal>balance</>具有真正被改变的值时才执行该函数：

<programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.balance IS DISTINCT FROM NEW.balance)
    EXECUTE PROCEDURE check_account_update();
</programlisting>

   调用一个函数来记录<literal>accounts</>的更新，但是只在有东西被改变时才调用：

<programlisting>
CREATE TRIGGER log_update
    AFTER UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
    EXECUTE PROCEDURE log_account_update();
</programlisting>

   为每一个要插入到视图底层表中的行执行函数<function>view_insert_row</>：

<programlisting>
CREATE TRIGGER view_insert
    INSTEAD OF INSERT ON my_view
    FOR EACH ROW
    EXECUTE PROCEDURE view_insert_row();
</programlisting>
  </para>

  <para>
   <xref linkend="trigger-example">包含一个用 C 编写的触发器函数的完整例子。
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATETRIGGER-compatibility">
  <title>兼容性</title>
  
  <!--
   It's not clear whether SQL/MED contemplates triggers on foreign tables.
   Its <drop basic column definition> General Rules do mention the possibility
   of a reference from a trigger column list.  On the other hand, nothing
   overrides the fact that CREATE TRIGGER only targets base tables.  For now,
   do not document the compatibility status of triggers on foreign tables.
  -->

  <para>
   <productname>PostgreSQL</productname>中的<command>CREATE TRIGGER</command>语句实现了<acronym>SQL</>标准的一个子集。目前缺少下列功能：

   <itemizedlist>
    <listitem>
     <para>
      SQL 允许我们为<quote>old</quote>和<quote>new</quote>行或表定义别名，别名可以用在被触发动作（例如<literal>CREATE TRIGGER ... ON tablename REFERENCING OLD ROW AS somename NEW ROW AS othername ...</literal>）的定义中。因为<productname>PostgreSQL</productname>允许触发器过程用任意数量的用户定义语言编写，对数据的访问会以语言相关的方式来处理。
     </para>
    </listitem>

    <listitem>
     <para>
      <productname>PostgreSQL</productname>不允许在语句级触发器中引用旧表和新表，即包含所有新旧行的表，在<acronym>SQL</>标准中用<literal>OLD TABLE</literal>和<literal>NEW TABLE</literal>子句引用。
     </para>
    </listitem>

    <listitem>
     <para><productname>PostgreSQL</productname>只允许为被触发动作执行一个用户定义的函数。标准允许执行许多其他的 SQL 命令作为被触发的动作，例如<command>CREATE TABLE</command>。这种限制可以很容易地通过创建一个执行想要的命令的用户定义函数来绕过。
     </para>
    </listitem>

   </itemizedlist>
  </para>

  <para>
   SQL 指定多个触发器应该以被创建时间的顺序触发。<productname>PostgreSQL</productname>则使用名称顺序，这被认为更加方便。
  </para>

  <para>
   SQL 指定级联删除上的<literal>BEFORE DELETE</literal>触发器在级联的<literal>DELETE</>完成<emphasis>之后</>引发。<productname>PostgreSQL</productname>的行为则是<literal>BEFORE DELETE</literal>总是在删除动作之前引发，即使是一个级联删除。这被认为更加一致。 如果<literal>BEFORE</literal>触发器修改行或者在引用动作引起的更新期间阻止更新，这也是非标准行为。这能导致约束违背或者被存储的数据不遵从引用约束。
  </para>

  <para>
   使用<literal>OR</literal>为一个单一触发器指定多个动作的能力是 SQL 标准的一个<productname>PostgreSQL</>扩展。
  </para>

  <para>
   为<command>TRUNCATE</command>引发触发器的能力是 SQL 标准的一个<productname>PostgreSQL</>扩展，在视图上定义语句级触发器的能力也是一样。
  </para>

  <para>
   <command>CREATE CONSTRAINT TRIGGER</command>是<acronym>SQL</>标准的一个<productname>PostgreSQL</productname>扩展。
  </para>

 </refsect1>

 <refsect1>
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altertrigger"></member>
   <member><xref linkend="sql-droptrigger"></member>
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-set-constraints"></member>
  </simplelist>
 </refsect1>
</refentry>

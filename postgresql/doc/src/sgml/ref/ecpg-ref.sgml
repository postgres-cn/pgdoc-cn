<!--
doc/src/sgml/ref/ecpg-ref.sgml
PostgreSQL documentation
-->

<refentry id="APP-ECPG">
 <indexterm zone="app-ecpg">
  <primary>ecpg</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle><application>ecpg</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname><application>ecpg</application></refname>
  <refpurpose>嵌入式 SQL C 预处理器</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>ecpg</command>
   <arg choice="opt" rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="plain" rep="repeat"><replaceable>file</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>


 <refsect1 id="APP-ECPG-description">
  <title>描述</title>

  <para>
   <command>ecpg</command>是用于 C 程序的嵌入式 SQL 预处理器。它通过将 SQL 调用替换为特殊函数调用把带有嵌入式 SQL 语句的 C 程序转换为普通 C 代码。输出文件可以被任何 C 编译器工具链处理。
  </para>

  <para>
   <command>ecpg</command>将把命令行中给出的每一个输入文件转换为相应的 C 输出文件。输入文件更适宜于使用扩展名<filename>.pgc</filename>，在这种情况下该扩展名将被替换为<filename>.c</filename>来决定输出文件名。如果输入文件的扩展名不是<filename>.pgc</filename>，那么输出文件名则通过在完整文件名上追加<literal>.c</literal>来确定。输出文件名也可以使用<option>-o</option>选项覆盖。
  </para>

  <para>
   这个参考页没有描述嵌入式 SQL 语言。关于该主题请参考<xref linkend="ecpg">。
  </para>
 </refsect1>


 <refsect1>
  <title>选项</title>

  <para>
   <command>ecpg</command>接受下列命令行参数：

   <variablelist>
    <varlistentry>
     <term><option>-c</option></term>
     <listitem>
      <para>
       自动从 SQL 代码生成确定的 C 代码。当前，这对<literal>EXEC SQL TYPE</literal>起效。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-C <replaceable>mode</replaceable></option></term>
     <listitem>
      <para>
       设置一个兼容性模式。<replaceable>mode</replaceable>可以是<literal>INFORMIX</literal>或<literal>INFORMIX_SE</literal>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-D <replaceable>symbol</replaceable></option></term>
     <listitem>
      <para>
       定义一个 C 预处理器符号。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-i</option></term>
     <listitem>
      <para>
       分析系统也包括文件。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-I <replaceable class="parameter">directory</replaceable></option></term>
     <listitem>
      <para>
       指定一个额外的包括路径，用来寻找通过<literal>EXEC SQL INCLUDE</literal>包括的文件。默认值是<filename>.</filename>（当前目录）、<filename>/usr/local/include</filename>、在编译时定义的<productname>PostgreSQL</productname>包括目录（默认：<filename>/usr/local/pgsql/include</filename>）以及<filename>/usr/include</filename>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-o <replaceable>filename</replaceable></option></term>
     <listitem>
      <para>
       指定<command>ecpg</command>应该将它的所有输出写到给定的<replaceable>filename</replaceable>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-r <replaceable>option</replaceable></option></term>
     <listitem>
      <para>
       选择运行时行为。<replaceable>option</replaceable>可以是下列之一：
       <variablelist>
        <varlistentry>
         <term><option>no_indicator</option></term>
         <listitem>
         <para>
         不使用指示器而使用特殊值来表示空值。历史上曾有数据库使用这种方法。
         </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><option>prepare</option></term>
         <listitem>
         <para>
         在使用所有语句之前准备它们。libecpg 将保持一个预备语句的缓冲并当语句再被执行时重用该语句。如果缓冲满了，libecpg 将释放最少使用的语句。
         </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><option>questionmarks</option></term>
         <listitem>
         <para>
         为兼容性原因允许使用问号作为占位符。在很久以前这被用作默认值。
         </para>
         </listitem>
        </varlistentry>
       </variablelist></para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-t</option></term>
     <listitem>
      <para>
       打开事务的自动提交。在这种模式下，每一个 SQL 命令会被自动提交，除非它位于一个显式事务块中。在默认模式中，命令只有当<command>EXEC SQL COMMIT</command>被发出时才被提交。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-v</option></term>
     <listitem>
      <para>
       打印额外信息，包括版本和“包括”路径。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>--version</option></term>
     <listitem>
      <para>
       打印<application>ecpg</application>版本并退出。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-?</option></term>
     <term><option>--help</option></term>
     <listitem>
      <para>
       显示关于<application>ecpg</application>命令行参数的帮助并退出。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>
 </refsect1>


 <refsect1>
  <title>注解</title>

  <para>
   在编译预处理好的 C 代码文件时，编译器需要能够找到<productname>PostgreSQL</>包括目录中的<application>ECPG</>头文件。因此，在调用编译器时，你可能必须使用<option>-I</>选项（例如，<literal>-I/usr/local/pgsql/include</literal>）。
  </para>

  <para>
   使用带有嵌入式 SQL 的 C 代码的程序必须被链接到<filename>libecpg</filename>库，例如使用链接器选项<literal>-L/usr/local/pgsql/lib -lecpg</literal>。
  </para>

  <para>
   适合于安装的这些目录的值可以使用<xref linkend="app-pgconfig">找到。
  </para>
 </refsect1>


 <refsect1>
  <title>例子</title>

  <para>
   如果你有一个名为<filename>prog1.pgc</filename>的嵌入式 SQL C 源文件，你可以使用下列命令序列创建一个可执行程序：
<programlisting>
ecpg prog1.pgc
cc -I/usr/local/pgsql/include -c prog1.c
cc -o prog1 prog1.o -L/usr/local/pgsql/lib -lecpg
</programlisting></para>
 </refsect1>

</refentry>

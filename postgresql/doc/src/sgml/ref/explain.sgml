<!--
doc/src/sgml/ref/explain.sgml
PostgreSQL documentation
-->

<refentry id="SQL-EXPLAIN">

 <indexterm zone="sql-explain">
  <primary>EXPLAIN</primary>
 </indexterm>

 <indexterm zone="sql-explain">
  <!-- 
  <primary>prepared statements</primary>
  <secondary>showing the query plan</secondary> 
  -->
  <primary>预备语句</primary>
  <secondary>显示查询计划</secondary>
 </indexterm>

 <indexterm zone="sql-explain">
  <!-- 
  <primary>cursor</primary>
  <secondary>showing the query plan</secondary> 
  -->
  <primary>游标</primary>
  <secondary>显示查询计划</secondary>
 </indexterm>

 <refmeta>
  <refentrytitle>EXPLAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>EXPLAIN</refname>
  <!-- 
  <refpurpose>show the execution plan of a statement</refpurpose> 
  -->
  <refpurpose>显示一个语句的执行规划</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
<synopsis>
EXPLAIN [ ( <replaceable class="parameter">option</replaceable> [, ...] ) ] <replaceable class="parameter">statement</replaceable>
EXPLAIN [ ANALYZE ] [ VERBOSE ] <replaceable class="parameter">statement</replaceable>

<!-- 
<phrase>where <replaceable class="parameter">option</replaceable> can be one of:</phrase> 
-->
<phrase>这里的 <replaceable class="parameter">option</replaceable>可以是下列之一:</phrase>

    ANALYZE [ <replaceable class="parameter">boolean</replaceable> ]
    VERBOSE [ <replaceable class="parameter">boolean</replaceable> ]
    COSTS [ <replaceable class="parameter">boolean</replaceable> ]
    BUFFERS [ <replaceable class="parameter">boolean</replaceable> ]
    TIMING [ <replaceable class="parameter">boolean</replaceable> ]
    FORMAT { TEXT | XML | JSON | YAML }
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   This command displays the execution plan that the
   <productname>PostgreSQL</productname> planner generates for the
   supplied statement.  The execution plan shows how the table(s)
   referenced by the statement will be scanned &mdash; by plain sequential scan,
   index scan, etc. &mdash; and if multiple tables are referenced, what join
   algorithms will be used to bring together the required rows from
   each input table.
  </para>
-->
<para>
这条命令显示<productname>PostgreSQL</productname>规划器为所提供的语句生成的执行规划。
执行规划显示语句引用的表是如何被扫描的(简单的顺序扫描，还是索扫描)，并且如果引用了多个表，
采用了什么样的连接算法从每个输入的表中取出所需要的记录。
</para>

  <!--
<para>
   The most critical part of the display is the estimated statement execution
   cost, which is the planner's guess at how long it will take to run the
   statement (measured in cost units that are arbitrary, but conventionally
   mean disk page fetches).  Actually two numbers
   are shown: the start-up cost before the first row can be returned, and
   the total cost to return all the rows.  For most queries the total cost
   is what matters, but in contexts such as a subquery in <literal>EXISTS</literal>, the planner
   will choose the smallest start-up cost instead of the smallest total cost
   (since the executor will stop after getting one row, anyway).
   Also, if you limit the number of rows to return with a <literal>LIMIT</literal> clause,
   the planner makes an appropriate interpolation between the endpoint
   costs to estimate which plan is really the cheapest.
  </para>
-->
<para>
显示出来的最关键的部分是预计的语句执行开销，这就是规划器对运行该语句所需时间的估计
(以任意的开销单位计量，但是通常意味着磁盘页面存取)。实际上显示了两个数字：
返回第一行记录前的启动开销，和返回所有记录的总开销。对于大多数查询而言，关心的是总开销，
但是，在某些环境下，比如一个<literal>EXISTS</literal>子查询里，
规划器将选择最小启动开销而不是最小总开销(因为执行器在获取一条记录后总是要停下来)。
同样，如果你用一条<literal>LIMIT</literal>子句限制返回的记录数，
规划器会在最终的开销上做一个合理的插值以计算哪个规划开销最省。
</para>

  <!--
<para>
   The <literal>ANALYZE</literal> option causes the statement to be actually
   executed, not only planned.  Then actual run time statistics are added to
   the display, including the total elapsed time expended within each plan
   node (in milliseconds) and the total number of rows it actually returned.
   This is useful for seeing whether the planner's estimates
   are close to reality.
  </para>
-->
<para>
<literal>ANALYZE</literal>选项导致查询被实际执行，而不仅仅是规划。显示中加入了实际的运行时间统计，
包括在每个规划节点内部花掉的总时间(以毫秒计)和它实际返回的行数。
这些数据对搜索该规划器的预期是否和现实相近很有帮助。
</para>

  <important>
   <!--
<para>
    Keep in mind that the statement is actually executed when
    the <literal>ANALYZE</literal> option is used.  Although
    <command>EXPLAIN</command> will discard any output that a
    <command>SELECT</command> would return, other side effects of the
    statement will happen as usual.  If you wish to use
    <command>EXPLAIN ANALYZE</command> on an
    <command>INSERT</command>, <command>UPDATE</command>,
    <command>DELETE</command>, <command>CREATE TABLE AS</command>,
    or <command>EXECUTE</command> statement
    without letting the command affect your data, use this approach:
<programlisting>
BEGIN;
EXPLAIN ANALYZE ...;
ROLLBACK;
</programlisting>
   </para>
-->
<para>
要记住的是查询实际上在使用<literal>ANALYZE</literal>选项的时候是执行的。
尽管<command>EXPLAIN</command>会抛弃任何<command>SELECT</command>返回的输出，
但是其它查询的副作用还是一样会发生的。如果你在<command>INSERT</command>, <command>UPDATE</command>,
<command>DELETE</command>, <command>CREATE TABLE AS</command>, <command>EXECUTE</command>
语句里使用<command>EXPLAIN ANALYZE</command>而且还不想让查询影响数据，可以用下面的方法：
<programlisting>
BEGIN;
EXPLAIN ANALYZE ...;
ROLLBACK;
</programlisting>
</para>
  </important>

  <!--
<para>
   Only the <literal>ANALYZE</literal> and <literal>VERBOSE</literal> options
   can be specified, and only in that order, without surrounding the option
   list in parentheses.  Prior to <productname>PostgreSQL</productname> 9.0,
   the unparenthesized syntax was the only one supported.  It is expected that
   all new options will be supported only in the parenthesized syntax.
  </para>
-->
<para>
只能声明<literal>ANALYZE</literal>和<literal>VERBOSE</literal>选项，并且只能以那种顺序，
不能将选项列表放在圆括号中。<productname>PostgreSQL</productname> 9.0之前，
只支持不用圆括号的语法。人们希望只在圆括号语法中支持所有新的选项。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><literal>ANALYZE</literal></term>
    <listitem>
     <!--
<para>
      Carry out the command and show actual run times and other statistics.
      This parameter defaults to <literal>FALSE</literal>.
     </para>
-->
<para>
执行命令并显示实际运行时间和其他统计。这个参数缺省为<literal>FALSE</literal>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VERBOSE</literal></term>
    <listitem>
     <!--
<para>
      Display additional information regarding the plan.  Specifically, include
      the output column list for each node in the plan tree, schema-qualify
      table and function names, always label variables in expressions with
      their range table alias, and always print the name of each trigger for
      which statistics are displayed.  This parameter defaults to
      <literal>FALSE</literal>.
     </para>
-->
<para>
显示关于规划的额外的信息。特别的包括规划树上的每个节点的输出字段列表，
模式修饰表和函数名，表达式中的标签变量总是和他们的范围表别名在一起，
并且总是打印统计数据中显示的每个触发器的名字。这个参数缺省为<literal>FALSE</literal>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>COSTS</literal></term>
    <listitem>
     <!--
<para>
      Include information on the estimated startup and total cost of each
      plan node, as well as the estimated number of rows and the estimated
      width of each row.  This parameter defaults to <literal>TRUE</literal>.
     </para>
-->
<para>
包括每个规划节点的估计启动成本和总成本的信息，也包括估计行数和估计的每行的宽度。
这个参数缺省为<literal>TRUE</literal>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BUFFERS</literal></term>
    <listitem>
     <!--
<para>
      Include information on buffer usage. Specifically, include the number of
      shared blocks hit, read, dirtied, and written, the number of local blocks
      hit, read, dirtied, and written, and the number of temp blocks read and
      written.
      A <emphasis>hit</> means that a read was avoided because the block was
      found already in cache when needed.
      Shared blocks contain data from regular tables and indexes;
      local blocks contain data from temporary tables and indexes;
      while temp blocks contain short-term working data used in sorts, hashes,
      Materialize plan nodes, and similar cases.
      The number of blocks <emphasis>dirtied</> indicates the number of
      previously unmodified blocks that were changed by this query; while the
      number of blocks <emphasis>written</> indicates the number of
      previously-dirtied blocks evicted from cache by this backend during
      query processing.
      The number of blocks shown for an
      upper-level node includes those used by all its child nodes.  In text
      format, only non-zero values are printed.  This parameter may only be
      used when <literal>ANALYZE</literal> is also enabled.  It defaults to
      <literal>FALSE</literal>.
     </para>
-->
<para>
包含缓冲区使用的信息。特别的，包括共享块命中、读、脏和写的次数，本地块命中、读、脏和写的次数，
临时块读和写的次数。<emphasis>命中</>意味着避免了读，因为块在需要时已经在缓存中发现了。
共享块包含普通表和索引的数据；本地块包含临时表和索引的数据；而临时块包含用于排序、哈希、
物化规划节点和相似情况的短期工作数据。<emphasis>脏</>块的数量表示这个查询改变的先前未更改的块的数量；
<emphasis>写</>块的数量表示在查询处理的时候被这个后端驱逐出缓存的先前脏了的块的数量。
高级节点显示的块的数量包含所有它的子节点使用的块的数量。在文本格式中，只打印非零值。
这个参数可能只在<literal>ANALYZE</literal>也启用的时候使用。它的缺省为<literal>FALSE</literal>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TIMING</literal></term>
    <listitem>
     <!--
<para>
      Include actual startup time and time spent in each node in the output.
      The overhead of repeatedly reading the system clock can slow down the
      query significantly on some systems, so it may be useful to set this
      parameter to <literal>FALSE</literal> when only actual row counts, and
      not exact times, are needed.  Run time of the entire statement is
      always measured, even when node-level timing is turned off with this
      option.
      This parameter may only be used when <literal>ANALYZE</literal> is also
      enabled.  It defaults to <literal>TRUE</literal>.
     </para>
-->
<para>
在输出中包含实际启动时间和每个节点花费的时间。重复读系统块的总开销会在某些系统上显著的减缓查询的速度，
所以当需要只有实际行被计算，并且没有准确时间时，设置这个参数为<literal>FALSE</literal>会很有用。
即使是用这个选项关闭了节点级别的时间，也测量整个语句的运行时间。
这个参数可能只在<literal>ANALYZE</literal>也启用的时候使用。它缺省为<literal>TRUE</literal>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FORMAT</literal></term>
    <listitem>
     <!--
<para>
      Specify the output format, which can be TEXT, XML, JSON, or YAML.
      Non-text output contains the same information as the text output
      format, but is easier for programs to parse.  This parameter defaults to
      <literal>TEXT</literal>.
     </para>
-->
<para>
声明输出格式，可以为TEXT, XML, JSON 或 YAML。非文本的输出包含文本输出格式相同的信息，
但是更容易被程序解析。这个参数缺省为<literal>TEXT</literal>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">boolean</replaceable></term>
    <listitem>
     <!--
<para>
      Specifies whether the selected option should be turned on or off.
      You can write <literal>TRUE</literal>, <literal>ON</>, or
      <literal>1</literal> to enable the option, and <literal>FALSE</literal>,
      <literal>OFF</>, or <literal>0</literal> to disable it.  The
      <replaceable class="parameter">boolean</replaceable> value can also
      be omitted, in which case <literal>TRUE</literal> is assumed.
     </para>
-->
<para>
声明选中的选项打开或者关闭。可以用<literal>TRUE</literal>, <literal>ON</> 或 <literal>1</literal>
启用这个选项，用<literal>FALSE</literal>, <literal>OFF</> 或 <literal>0</literal>
禁用这个选项。在假设为<literal>TRUE</literal>的情况下，
<replaceable class="parameter">boolean</replaceable>值也可以忽略，
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">statement</replaceable></term>
    <listitem>
     <!--
<para>
      Any <command>SELECT</>, <command>INSERT</>, <command>UPDATE</>,
      <command>DELETE</>, <command>VALUES</>, <command>EXECUTE</>,
      <command>DECLARE</>, <command>CREATE TABLE AS</>, or
      <command>CREATE MATERIALIZED VIEW AS</> statement, whose execution
      plan you wish to see.
     </para>
-->
<para>
你想要查看执行规划的任何<command>SELECT</>、<command>INSERT</>、<command>UPDATE</>、
<command>DELETE</>、<command>VALUES</>、<command>EXECUTE</>、<command>DECLARE</>、
<command>CREATE TABLE AS</>或<command>CREATE MATERIALIZED VIEW AS</>语句之一。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Outputs</title> 
  -->
  <title>输出</title>

   <!--
<para>
    The command's result is a textual description of the plan selected
    for the <replaceable class="parameter">statement</replaceable>,
    optionally annotated with execution statistics.
    <xref linkend="using-explain"> describes the information provided.
   </para>
-->
<para>
命令的结果是从<replaceable class="parameter">statement</replaceable>选择的规划的文字描述，
可选的有执行统计数据的注释。<xref linkend="using-explain">描述提供的信息。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   In order to allow the <productname>PostgreSQL</productname> query
   planner to make reasonably informed decisions when optimizing
   queries, the <link
   linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
   data should be up-to-date for all tables used in the query.  Normally
   the <link linkend="autovacuum">autovacuum daemon</link> will take care
   of that automatically.  But if a table has recently had substantial
   changes in its contents, you might need to do a manual
   <xref linkend="sql-analyze"> rather than wait for autovacuum to catch up
   with the changes.
  </para>
-->
<para>
为了让<productname>PostgreSQL</productname>查询规划器在优化查询的时候做出合理的判断，
<link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
数据应该为所有用于查询的表更新。通常<link linkend="autovacuum">autovacuum daemon</link>
会自动注意这些。但是如果一个表最近在内容上有大量的更改，你可能需要手动<xref linkend="sql-analyze">
而不是等待autovacuum赶上变化。
</para>

  <!--
<para>
   In order to measure the run-time cost of each node in the execution
   plan, the current implementation of <command>EXPLAIN
   ANALYZE</command> adds profiling overhead to query execution.
   As a result, running <command>EXPLAIN ANALYZE</command>
   on a query can sometimes take significantly longer than executing
   the query normally. The amount of overhead depends on the nature of
   the query, as well as the platform being used.  The worst case occurs
   for plan nodes that in themselves require very little time per
   execution, and on machines that have relatively slow operating
   system calls for obtaining the time of day.
  </para>
-->
<para>
为了测量运行时在执行规划中每个节点的开销，<command>EXPLAIN ANALYZE</command>
的当前应用增加查询执行开销的性能分析。结果，在一个查询上运行<command>EXPLAIN ANALYZE</command>
有时会比普通查询明显的花费更多的时间。超支的数量依赖于查询的本质和使用的平台。
最坏的情况发生在他们本身的规划节点时每个执行需要非常少的时间，
并且在操作系统相当慢的机器上需要获得时刻。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

<para>
   <!-- 
   To show the plan for a simple query on a table with a single
   <type>integer</type> column and 10000 rows: 
   -->
   显示一个对只有一个<type>integer</type>列和 10000 行表的简单查询的查询规划：

<programlisting>
EXPLAIN SELECT * FROM foo;

                       QUERY PLAN
---------------------------------------------------------
 Seq Scan on foo  (cost=0.00..155.00 rows=10000 width=4)
(1 row)
</programlisting>
  </para>

<para>
  <!-- 
  Here is the same query, with JSON output formatting: 
  -->
  相同的查询用JSON输出格式：
<programlisting>
EXPLAIN (FORMAT JSON) SELECT * FROM foo;
           QUERY PLAN
--------------------------------
 [                             +
   {                           +
     "Plan": {                 +
       "Node Type": "Seq Scan",+
       "Relation Name": "foo", +
       "Alias": "foo",         +
       "Startup Cost": 0.00,   +
       "Total Cost": 155.00,   +
       "Plan Rows": 10000,     +
       "Plan Width": 4         +
     }                         +
   }                           +
 ]
(1 row)
</programlisting>
  </para>


<para>
   <!-- 
   If there is an index and we use a query with an indexable
   <literal>WHERE</literal> condition, <command>EXPLAIN</command>
   might show a different plan: 
   -->
   如果存在一个索引，并且使用一个可应用索引的<literal>WHERE</literal>条件的查询，
<command>EXPLAIN</command>会显示不同的规划：

<programlisting>
EXPLAIN SELECT * FROM foo WHERE i = 4;

                         QUERY PLAN
--------------------------------------------------------------
 Index Scan using fi on foo  (cost=0.00..5.98 rows=1 width=4)
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>

<para>
  <!-- 
  Here is the same query, but in YAML format: 
  -->
  相同的查询，但是用YAML格式：
<programlisting>
EXPLAIN (FORMAT YAML) SELECT * FROM foo WHERE i='4';
          QUERY PLAN
-------------------------------
 - Plan:                      +
     Node Type: "Index Scan"  +
     Scan Direction: "Forward"+
     Index Name: "fi"         +
     Relation Name: "foo"     +
     Alias: "foo"             +
     Startup Cost: 0.00       +
     Total Cost: 5.98         +
     Plan Rows: 1             +
     Plan Width: 4            +
     Index Cond: "(i = 4)"
(1 row)
</programlisting>

    <!-- 
XML format is left as an exercise for the reader.
-->
XML格式留给读者做练习。
  </para>


<para>
  <!-- 
  Here is the same plan with cost estimates suppressed: 
  -->
  这是相同的查询关闭成本估算：

<programlisting>
EXPLAIN (COSTS FALSE) SELECT * FROM foo WHERE i = 4;

        QUERY PLAN
----------------------------
 Index Scan using fi on foo
   Index Cond: (i = 4)
(2 rows)
</programlisting>
  </para>

<para>
   <!-- 
   Here is an example of a query plan for a query using an aggregate
   function: 
   -->
   下面是一个使用了聚合函数的查询的查询规划的例子：

<programlisting>
EXPLAIN SELECT sum(i) FROM foo WHERE i &lt; 10;

                             QUERY PLAN
---------------------------------------------------------------------
 Aggregate  (cost=23.93..23.93 rows=1 width=4)
   -&gt;  Index Scan using fi on foo  (cost=0.00..23.92 rows=6 width=4)
         Index Cond: (i &lt; 10)
(3 rows)
</programlisting>
  </para>

<para>
   <!-- 
   Here is an example of using <command>EXPLAIN EXECUTE</command> to
   display the execution plan for a prepared query: 
   -->
   下面是一个使用<command>EXPLAIN EXECUTE</command>显示一个已预编写的查询规划的例子：

<programlisting>
PREPARE query(int, int) AS SELECT sum(bar) FROM test
    WHERE id &gt; $1 AND id &lt; $2
    GROUP BY foo;

EXPLAIN ANALYZE EXECUTE query(100, 200);

                                                       QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=9.54..9.54 rows=1 width=8) (actual time=0.156..0.161 rows=11 loops=1)
   Group Key: foo
   -&gt;  Index Scan using test_pkey on test  (cost=0.29..9.29 rows=50 width=8) (actual time=0.039..0.091 rows=99 loops=1)
         Index Cond: ((id &gt; $1) AND (id &lt; $2))
 Planning time: 0.197 ms
 Execution time: 0.225 ms
(6 rows)
</programlisting>
  </para>

  <!--
<para>
   Of course, the specific numbers shown here depend on the actual
   contents of the tables involved.  Also note that the numbers, and
   even the selected query strategy, might vary between
   <productname>PostgreSQL</productname> releases due to planner
   improvements. In addition, the <command>ANALYZE</command> command
   uses random sampling to estimate data statistics; therefore, it is
   possible for cost estimates to change after a fresh run of
   <command>ANALYZE</command>, even if the actual distribution of data
   in the table has not changed.
  </para>
-->
<para>
注意这里显示的数字，依赖于所包含的表的实际内容。还请注意该数字甚至还有选择的查询策略都有可能在各个
<productname>PostgreSQL</productname>版本之间不同，因为规划器在不断改进。另外，<command>ANALYZE</command>
命令使用随机的采样来估计数据统计；因此，一次新的<command>ANALYZE</command>
运行之后开销估计可能会变化，即使数据的实际分布没有改变也这样。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   There is no <command>EXPLAIN</command> statement defined in the SQL standard.
  </para>
-->
<para>
在 SQL 标准中没有<command>EXPLAIN</command>语句。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-analyze"></member>
  </simplelist>
 </refsect1>
</refentry>

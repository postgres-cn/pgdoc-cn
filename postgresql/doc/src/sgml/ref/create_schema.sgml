<!--
doc/src/sgml/ref/create_schema.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATESCHEMA">
 <indexterm zone="sql-createschema">
  <primary>CREATE SCHEMA</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE SCHEMA</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE SCHEMA</refname>
  <refpurpose>定义一个新模式</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE SCHEMA <replaceable class="parameter">schema_name</replaceable> [ AUTHORIZATION <replaceable class="parameter">user_name</replaceable> ] [ <replaceable class="parameter">schema_element</replaceable> [ ... ] ]
CREATE SCHEMA AUTHORIZATION <replaceable class="parameter">user_name</replaceable> [ <replaceable class="parameter">schema_element</replaceable> [ ... ] ]
CREATE SCHEMA IF NOT EXISTS <replaceable class="parameter">schema_name</replaceable> [ AUTHORIZATION <replaceable class="parameter">user_name</replaceable> ]
CREATE SCHEMA IF NOT EXISTS AUTHORIZATION <replaceable class="parameter">user_name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>CREATE SCHEMA</command>输入一个新模式到当前数据库中。
   该模式名必须与当前数据库中任何现有模式的名称不同。
  </para>

  <para>
   一个模式本质上是一个名字空间：它包含命令对象（表、数据类型、函数以及操作符），
   对象可以与在其他模式中存在的对象重名。可以通过用模式名作为一个前缀
   <quote>限定</>命名对象的名称来访问它们，或者通过把要求的模式包括
   在搜索路径中来访问命名对象。一个指定非限定对象名的
   <literal>CREATE</>命令在当前模式（搜索路径中的第一个模式，由函数
   <function>current_schema</function>决定）中创建对象。
  </para>

  <para>
   <command>CREATE SCHEMA</command>中可以选择包括子命令用以在
   新模式中创建对象。这些子命令实际被当做独立的在创建该模式后被发出的命令
   一样，除非使用<literal>AUTHORIZATION</>子句，所有被创建的对象都会
   由该用户拥有。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">schema_name</replaceable></term>
      <listitem>
       <para>
        要创建的一个模式名。如果省略，
        <replaceable class="parameter">user_name</replaceable>将被用作模式名。
        该名称不能以<literal>pg_</literal>开始，因为这样的名称是用作系统模式的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">user_name</replaceable></term>
      <listitem>
       <para>
        将拥有新模式的用户的角色名。如果省略，默认为执行该命令的用户。要
        创建由另一个角色拥有的角色，你必须是那个角色的一个直接或者间接成员，
        或者是一个超级用户。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">schema_element</replaceable></term>
      <listitem>
       <para>
        要在该模式中创建的对象的定义 SQL 语句。当前，只有<command>CREATE
        TABLE</>、<command>CREATE VIEW</>、<command>CREATE
        INDEX</>、<command>CREATE SEQUENCE</>、<command>CREATE
        TRIGGER</>以及<command>GRANT</>被接受为
        <command>CREATE SCHEMA</>中的子句。其他类型的对象可以在模式被
        创建之后用单独的命令创建。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IF NOT EXISTS</literal></term>
      <listitem>
       <para>
        如果一个具有同名的模式已经存在，则什么也不做（不过发出一个提示）。
        使用这个选项时不能包括
        <replaceable class="parameter">schema_element</>子命令。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   要创建一个模式，调用用户必须拥有当前数据库的<literal>CREATE</>
   特权（当然，超级用户可以绕过这种检查）。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   创建一个模式：
<programlisting>
CREATE SCHEMA myschema;
</programlisting>
  </para>

  <para>
   为用户<literal>joe</>创建一个模式，该模式也将被命名为
   <literal>joe</>：
<programlisting>
CREATE SCHEMA AUTHORIZATION joe;
</programlisting>
  </para>

  <para>
   创建一个被用户<literal>joe</>拥有的名为<literal>test</>的模式，
   除非已经有一个名为<literal>test</>的模式（不管<literal>joe</>
   是否拥有该已经存在的模式）。
<programlisting>
CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe;
</programlisting>
  </para>

  <para>
   创建一个模式并且在其中创建一个表和视图：
<programlisting>
CREATE SCHEMA hollywood
    CREATE TABLE films (title text, release date, awards text[])
    CREATE VIEW winners AS
        SELECT title, release FROM films WHERE awards IS NOT NULL;
</programlisting>
   注意子命令不以分号结束。
  </para>

  <para>
   下面是达到相同结果的等效的方法：
<programlisting>
CREATE SCHEMA hollywood;
CREATE TABLE hollywood.films (title text, release date, awards text[]);
CREATE VIEW hollywood.winners AS
    SELECT title, release FROM hollywood.films WHERE awards IS NOT NULL;
</programlisting></para>

 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   SQL 标准允许在<command>CREATE SCHEMA</command>中有一个
   <literal>DEFAULT CHARACTER SET</>子句，以及当前
   <productname>PostgreSQL</productname>接受的更多子命令类型。
  </para>

  <para>
   SQL 标准制定<command>CREATE SCHEMA</command>中的子命令
   可以以任何顺序出现。当前的
   <productname>PostgreSQL</productname>实现不能处理子命令中
   所有情况的向前引用。有时候可能有必要对子命令进行重排序以避免向前
   引用。
  </para>

  <para>
   根据 SQL 标准，模式的拥有者总是拥有其中的所有对象。
   <productname>PostgreSQL</productname>允许模式包含非模式
   拥有者所拥有的对象。只有模式拥有者把其模式上的<literal>CREATE</>
   特权授予给了其他人或者一个超级用户选择在该模式中创建对象时才会
   发生这种事情。
  </para>

  <para>
   <literal>IF NOT EXISTS</literal>选项是一种
   <productname>PostgreSQL</productname>扩展。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterschema"></member>
   <member><xref linkend="sql-dropschema"></member>
 </simplelist>
 </refsect1>

</refentry>

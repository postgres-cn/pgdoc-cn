<!-- doc/src/sgml/ref/pg_restore.sgml -->

<refentry id="APP-PGRESTORE">
 <indexterm zone="app-pgrestore">
  <primary>pg_restore</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>pg_restore</refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_restore</refname>

  <refpurpose>
   从一个由<application>pg_dump</application>创建的归档文件恢复一个
   <productname>PostgreSQL</productname>数据库
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_restore</command>
   <arg rep="repeat"><replaceable>connection-option</replaceable></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>filename</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>


 <refsect1 id="app-pgrestore-description">
  <title>描述</title>

  <para>
   <application>pg_restore</application>是一个用来从<xref linkend="app-pgdump">
   创建的非文本格式归档恢复<productname>PostgreSQL</productname>数据库的工具。
   它将发出必要的命令把该数据库重建成它被保存时的状态。这些归档文件还允许
   <application>pg_restore</application>选择恢复哪些内容或者在恢复前对恢复项重排序。
   这些归档文件被设计为可以在不同的架构之间迁移。
  </para>

  <para>
   <application>pg_restore</application>可以在两种模式下操作。如果指定了一个数据库
   名称，<application>pg_restore</application>会连接那个数据库并且把归档内容直接恢
   复到该数据库中。否则，会创建一个脚本，其中包含着重建该数据库所必要的 SQL 命令，
   它会被写入到一个文件或者标准输出。这个脚本输出等效于
   <application>pg_dump</application>的纯文本输出格式。因此，一些控制输出的选项与
   <application>pg_dump</application>的选项类似。
  </para>

  <para>
   显然，<application>pg_restore</application>无法恢复不在归档文件中的信息。例如，
   如果归档使用<quote>以<command>INSERT</command>命令转储数据</quote>选项
   创建， <application>pg_restore</application>将无法使用<command>COPY</command>
   语句装载数据。
  </para>
 </refsect1>

 <refsect1 id="app-pgrestore-options">
  <title>选项</title>

   <para>
    <application>pg_restore</application>接受下列命令行参数。

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">filename</replaceable></term>
      <listitem>
       <para>
       指定要被恢复的归档文件（对于一个目录格式的归档则是目录）的位置。如果没有指定，
       则使用标准输入。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-a</option></term>
      <term><option>--data-only</option></term>
      <listitem>
       <para>
        只恢复数据，不恢复模式（数据定义）。如果在归档中存在，表数据、大对象和序列值
        会被恢复。
       </para>

       <para>
        这个选项类似于指定<option>--section=data</>，但是由于历史原因两者不完全相同。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option></term>
      <term><option>--clean</option></term>
      <listitem>
       <para>
        在重新创建数据库对象之前清除（丢弃）它们（除非使用了<option>--if-exists</>，
        如果有对象在目标数据库中不存在，这可能会生成一些无害的错误消息）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-C</option></term>
      <term><option>--create</option></term>
      <listitem>
       <para>
        在恢复一个数据库之前县创建它。如果还指定了<option>--clean</option>，在连接到
        目标数据库之前丢弃并且重建它。
       </para>

       <para>
        在使用这个选项时，<option>-d</option>提到的数据库只被用于发出初始的
        <command>DROP DATABASE</>和<command>CREATE DATABASE</>命令。所有
        要恢复到该数据库名中的数据都出现在归档中。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d <replaceable class="parameter">dbname</replaceable></option></term>
      <term><option>--dbname=<replaceable class="parameter">dbname</replaceable></option></term>
      <listitem>
       <para>
        连接到数据库<replaceable class="parameter">dbname</replaceable>并且
        直接恢复到该数据库中。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-e</option></term>
      <term><option>--exit-on-error</option></term>
      <listitem>
       <para>
        在发送 SQL 命令到该数据库期间如果碰到一个错误就退出。默认行为是继续并且在恢复
        结束时显示一个错误计数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-f <replaceable>filename</replaceable></option></term>
      <term><option>--file=<replaceable>filename</replaceable></option></term>
      <listitem>
       <para>
        为生成的脚本或列表（当使用<option>-l</option>时）指定输出文件。默认是标准输出。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-F <replaceable class="parameter">format</replaceable></option></term>
      <term><option>--format=<replaceable class="parameter">format</replaceable></option></term>
      <listitem>
       <para>
        指定归档的格式。并不一定要指定该格式，因为<application>pg_restore</application>
        将会自动决定格式。如果指定，可以是下列之一：

       <variablelist>
        <varlistentry>
         <term><literal>c</></term>
         <term><literal>custom</></term>
         <listitem>
          <para>
           归档是<application>pg_dump</application>的自定义格式。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>d</></term>
         <term><literal>directory</></term>
         <listitem>
          <para>
           归档是一个目录归档。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>t</></term>
         <term><literal>tar</></term>
         <listitem>
          <para>
           归档是一个<command>tar</command>归档。
          </para>
         </listitem>
        </varlistentry>
       </variablelist></para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-i</option></term>
      <term><option>--ignore-version</option></term>
      <listitem>
       <para>
        一个废弃的选项，现在已被忽略。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-I <replaceable class="parameter">index</replaceable></option></term>
      <term><option>--index=<replaceable class="parameter">index</replaceable></option></term>
      <listitem>
       <para>
        只恢复提及的索引的定义。可以通过写多个<option>-I</>开关指定多个索引。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j <replaceable class="parameter">number-of-jobs</replaceable></option></term>
      <term><option>--jobs=<replaceable class="parameter">number-of-jobs</replaceable></option></term>
      <listitem>
       <para>
        使用并发任务运行<application>pg_restore</>中最耗时的部分 &mdash; 
        载入数据、创建索引或者创建约束。对于一个运行在多处理器机器上的服务器，
        这个选项能够大幅度减少恢复一个大型数据库的时间。
       </para>

       <para>
        每一个任务是一个进程或者一个线程，这取决于操作系统，它们都使用一个独立
        的服务器连接。
       </para>

       <para>
        这个选项的最佳值取决于服务器、客户端以及网络的硬件设置。因素包括 CPU 的
        核心数和磁盘设置。一个好的建议是服务器上 CPU 的核心数，但是更大的值在很
        多情况下也能导致更快的恢复时间。当然，过高的值会由于超负荷反而导致性能
        降低。
       </para>

       <para>
        这个选项只支持自定义和目录归档格式。输入必须是一个常规文件或目录（例如，
        不能是一个管道）。当发出一个脚本而不是直接连接到数据库服务器时会忽略这个
        选项。还有，多任务不能和选项<option>--single-transaction</option>一起用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-l</option></term>
      <term><option>--list</option></term>
      <listitem>
       <para>
        列出归档的内容。这个操作的输出能被用作<option>-L</option>选项的输入。
        注意如果把<option>-n</>或<option>-t</>这样的过滤开关与
        <option>-l</>一起使用，它们将会限制列出的项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-L <replaceable class="parameter">list-file</replaceable></option></term>
      <term><option>--use-list=<replaceable class="parameter">list-file</replaceable></option></term>
      <listitem>
       <para>
        只恢复在<replaceable class="PARAMETER">list-file</replaceable>中列出
        的归档元素，并且按照它们出现在该文件中的顺序进行恢复。注意如果把
        <option>-n</>或<option>-t</>这样的过滤开关与<option>-L</>一起使
        用，它们将会进一步限制要恢复的项。
       </para>
       <para><replaceable class="PARAMETER">list-file</>通常是编辑一个
        <option>-l</>操作的输出来创建。行可以被移动或者移除，并且也可以通过
        在行首放一个（<literal>;</literal>）将其注释掉。例子见下文。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n <replaceable class="parameter">namespace</replaceable></option></term>
      <term><option>--schema=<replaceable class="parameter">schema</replaceable></option></term>
      <listitem>
       <para>
        只恢复在被提及的模式中的对象。可以用多个<option>-n</>开关来指定多个
        模式。这可以与<option>-t</option>选项组合在一起只恢复一个指定的表。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-O</option></term>
      <term><option>--no-owner</option></term>
      <listitem>
       <para>
        不要输出将对象的所有权设置为与原始数据库匹配的命令。默认情况下，
        <application>pg_restore</application>会发出
        <command>ALTER OWNER</>或者
        <command>SET SESSION AUTHORIZATION</command>语句来
        设置已创建的模式对象的所有权。除非到该数据库的初始连接是一个超级
        用户（或者拥有脚本中所有对象的同一个用户）建立的，这些语句将会
        失败。通过<option>-O</option>，任何用户名都可以被用于初始连接，
        并且这个用户将会拥有所有被创建的对象。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P <replaceable class="parameter">function-name(argtype [, ...])</replaceable></option></term>
      <term><option>--function=<replaceable class="parameter">function-name(argtype [, ...])</replaceable></option></term>
      <listitem>
       <para>
        只恢复被提及的函数。要小心地拼写函数的名称和参数使它们正好就是出现
        在转储文件的内容表中的名称和参数。可以使用多个<option>-P</>开关
        指定多个函数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option></term>
      <term><option>--no-reconnect</option></term>
      <listitem>
       <para>
        这个选项已被废弃，但是出于向后兼容性的目的，系统仍然还接受它。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option></term>
      <term><option>--schema-only</option></term>
      <listitem>
       <para>
        只恢复归档中的模式（数据定义）不恢复数据。
       </para>
       <para>
        这个选项是<option>--data-only</>的逆选项。它与指定
        <option>--section=pre-data --section=post-data</>相似，但是
        由于历史原因并不完全相同。
       </para>
       <para>
        （不要把这个选项和<option>--schema</>选项弄混，后者把词
        <quote>schema</>用于一种不同的含义）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S <replaceable class="parameter">username</replaceable></option></term>
      <term><option>--superuser=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        指定在禁用触发器时要用的超级用户名。只有使用
        <option>--disable-triggers</>时这个选项才相关。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t <replaceable class="parameter">table</replaceable></option></term>
      <term><option>--table=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        只恢复所提及表的定义或数据。可以用多个<option>-t</>开关指定多个表。
        这个选项可以和<option>-n</option>选项组合来指定一个模式。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T <replaceable class="parameter">trigger</replaceable></option></term>
      <term><option>--trigger=<replaceable class="parameter">trigger</replaceable></option></term>
      <listitem>
       <para>
        只恢复所提及的触发器。可以用多个<option>-T</>开关指定多个触发器。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--verbose</option></term>
      <listitem>
       <para>
        指定冗长模式。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-V</></term>
       <term><option>--version</></term>
       <listitem>
       <para>
       打印该<application>pg_restore</application>的版本并退出。
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-x</option></term>
      <term><option>--no-privileges</option></term>
      <term><option>--no-acl</option></term>
      <listitem>
       <para>
        阻止恢复访问特权（授予/收回命令）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-1</option></term>
      <term><option>--single-transaction</option></term>
      <listitem>
       <para>
        将恢复作为单一事务执行（即把发出的命令包裹在
        <command>BEGIN</>/<command>COMMIT</>中）。这可以确保要么
        所有命令完全成功，要么任何改变都不被应用。这个选项隐含了
        <option>--exit-on-error</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--disable-triggers</></term>
      <listitem>
       <para>
        只有在执行一个只恢复数据的恢复时，这个选项才相关。它指示
        <application>pg_restore</application>在装载数据时执行命
        令临时禁用目标表上的触发器。如果你在表上有参照完整性检查
        或者其他触发器并且你不希望在数据载入期间调用它们时，请使
        用这个选项。
       </para>

       <para>
        目前，为<option>--disable-triggers</>发出的命令必须以超
        级用户身份完成。因此你还应该用<option>-S</>指定一个超级
        用户名，或者更好的方法是以一个<productname>PostgreSQL</>
        超级用户运行<application>pg_restore</application>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--if-exists</option></term>
      <listitem>
       <para>
        在清理数据库对象时使用条件命令（即增加一个
        <literal>IF EXISTS</literal>子句）。只有指定了
        <option>--clean</>时，这个选项才有效。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-data-for-failed-tables</option></term>
      <listitem>
       <para>
        默认情况下，即便表的创建命令失败（例如因为表已经存在），
        表数据也会被恢复。通过这个选项，对这类表的数据会被跳过。
        如果目标数据库已经包含了想要的表内容，这种行为又很有有用。
        例如，<productname>PostgreSQL</>扩展（如<productname>PostGIS</>）
        的辅助表可能已经被载入到目标数据库中，指定这个选项就能阻止
        把重复的或者废弃的数据载入到这些表中。
       </para>

       <para>
        只有当直接恢复到一个数据库中时这个选项才有效，在产生 SQL
        脚本输出时这个选项不会产生效果。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-security-labels</option></term>
      <listitem>
       <para>
        不要输出恢复安全标签的命令，即使归档中包含安全标签。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-tablespaces</option></term>
      <listitem>
       <para>
        不输出命令选择表空间。通过这个选项，所有的对象都会被创建
        在恢复时的默认表空间中。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>--section=<replaceable class="parameter">sectionname</replaceable></option></term>
       <listitem>
         <para>
          只恢复提及的小节。小节的名称可以是<option>pre-data</>、
          <option>data</>或者<option>post-data</>。可以把这个选项指定
          多次来选择多个小节。默认值是恢复所有小节。
         </para>
         <para>
          数据小节包含实际的表数据以及大对象定义。Post-data 项由索引定义、
          触发器、规则和除已验证的检查约束之外的约束构成。Pre-data 项由所有
          其他数据定义项构成。
         </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--use-set-session-authorization</option></term>
      <listitem>
       <para>
        输出 SQL 标准的<command>SET SESSION AUTHORIZATION</>命令取代
        <command>ALTER OWNER</>命令来决定对象拥有权。这会让转储更加兼容
        标准，但是依赖于转储中对象的历史，可能无法正确恢复。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-?</></term>
       <term><option>--help</></term>
       <listitem>
       <para>
       显示有关<application>pg_restore</application>命令行参数的帮助，并且退出。
       </para>
       </listitem>
     </varlistentry>

    </variablelist>
   </para>

   <para>
    <application>pg_restore</application>也接受下列用于连接参数的命令行参数：

    <variablelist>
     <varlistentry>
      <term><option>-h <replaceable class="parameter">host</replaceable></option></term>
      <term><option>--host=<replaceable class="parameter">host</replaceable></option></term>
      <listitem>
       <para>
        指定服务器正在运行的机器的主机名。如果该值开始于一个斜线，它被用作一个 
        Unix 域套接字的目录。默认是从<envar>PGHOST</envar>环境变量中取得（
        如果被设置），否则将尝试一次 Unix 域套接字连接。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>--port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
       <para>
        指定服务器正在监听连接的 TCP 端口或本地 Unix 域套接字文件扩展名。默认是放在
        <envar>PGPORT</envar>环境变量中（如果被设置），否则使用编译在程序中的默认值。
        </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U <replaceable>username</replaceable></option></term>
      <term><option>--username=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        要作为哪个用户连接。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</></term>
      <term><option>--no-password</></term>
      <listitem>
       <para>
        不发出一个口令提示。如果服务器要求口令认证并且没有其他方式提供
        口令（例如一个<filename>.pgpass</filename>文件），
        那么连接尝试将失败。这个选项对于批处理任务和脚本有用，
        因为在其中没有一个用户来输入口令。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-W</option></term>
      <term><option>--password</option></term>
      <listitem>
       <para>
        强制<application>pg_restore</application>在连接到一个数据库之前
        提示要求一个口令。
       </para>

       <para>
        这个选项不是必须的，因为如果服务器要求口令认证，
        <application>pg_restore</application>将自动提示要求一个口令。
        但是，<application>pg_restore</application>将浪费一次
        连接尝试来发现服务器想要一个口令。在某些情况下，值得键入
        <option>-W</>来避免额外的连接尝试。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--role=<replaceable class="parameter">rolename</replaceable></option></term>
      <listitem>
       <para>
        指定一个用来创建该转储的角色名。这个选项导致<application>pg_restore</>
        在连接到数据库后发出一个
        <command>SET ROLE</> <replaceable class="parameter">rolename</>命令。
        当已认证用户（由<option>-U</>指定）缺少<application>pg_restore</>
        所需的特权但是能够切换到一个具有所需权利的角色时，这个选项很有用。
        一些安装有针对直接作为超级用户登录的策略，使用这个选项可以让转储在
        不违反该策略的前提下完成。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
 </refsect1>


 <refsect1>
  <title>环境</title>

  <variablelist>
   <varlistentry>
    <term><envar>PGHOST</envar></term>
    <term><envar>PGOPTIONS</envar></term>
    <term><envar>PGPORT</envar></term>
    <term><envar>PGUSER</envar></term>

    <listitem>
     <para>
      默认连接参数
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   和大部分其他<productname>PostgreSQL</>工具相似，
   这个工具也使用<application>libpq</>（
   见<xref linkend="libpq-envars">）支持的环境变量。
  </para>

 </refsect1>


 <refsect1 id="app-pgrestore-diagnostics">
  <title>诊断</title>

  <para>
   当使用<option>-d</option>选项指定一个直接数据库连接时，
   <application>pg_restore</application>在内部执行
   <command>SELECT</command>语句。如果你运行
   <application>pg_restore</application>时出现问题，确定你能够从正
   在使用的数据库中选择信息，例如<xref linkend="app-psql">。此外，
   <application>libpq</application>前端-后端库所使用的任何默认连接
   设置和环境变量都将适用。
  </para>
 </refsect1>


 <refsect1 id="app-pgrestore-notes">
  <title>注解</title>

  <para>
   如果你的数据库集簇对于<literal>template1</>数据库有任何本地添加，
   要注意将<application>pg_restore</application>
   的输出载入到一个真正的空数据库。否则你很可能由于以增加
   对象的重复定义而得到错误。要创建一个不带任何本地添加的空数据库，
   从<literal>template0</>而不是<literal>template1</>复制它，例如：
<programlisting>
CREATE DATABASE foo WITH TEMPLATE template0;
</programlisting>
  </para>

  <para>
   下面将详细介绍<application>pg_restore</application>的局限性。

   <itemizedlist>
    <listitem>
     <para>
      在恢复数据到一个已经存在的表中并且使用了选项
      <option>--disable-triggers</>时，<application>pg_restore</application>
      会在插入数据之前发出命令禁用用户表上的触发器，然后在完成数据插入后重新启用
      它们。如果恢复在中途停止，可能会让系统目录处于错误的状态。
     </para>
    </listitem>

    <listitem>
     <para><application>pg_restore</application>不能有选择地恢复大对象，例如
     只恢复特定表的大对象。如果一个归档包含大对象，那么所有的大对象都会被恢复，
     如果通过<option>-L</option>、<option>-t</option>或者其他选项进行了排除，
     它们一个也不会被恢复。
     </para>
    </listitem>

   </itemizedlist>
  </para>

  <para>
   <application>pg_dump</application>的局限性详见<xref linkend="app-pgdump">
   文档。
  </para>

  <para>
   一旦完成恢复，应该在每一个被恢复的表上运行<command>ANALYZE</>，这样
   优化器能得到有用的统计信息。更多信息请见<xref linkend="vacuum-for-statistics">
   和<xref linkend="autovacuum">。
  </para>

 </refsect1>


 <refsect1 id="app-pgrestore-examples">
  <title>示例</title>

  <para>
   假设我们已经以自定义格式转储了一个叫做<literal>mydb</>的数据库：

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fc mydb &gt; db.dump</userinput>
</screen>
  </para>

  <para>
   要删除该数据库并且从转储中重新创建它：

<screen>
<prompt>$</prompt> <userinput>dropdb mydb</userinput>
<prompt>$</prompt> <userinput>pg_restore -C -d postgres db.dump</userinput>
</screen>

   <option>-d</>开关中提到的数据库可以是任何已经存在于集簇中的数据库，
   <application>pg_restore</>只会用它来为<literal>mydb</>发出
   <command>CREATE DATABASE</>命令。通过<option>-C</>，
   数据总是会被恢复到出现在归档文件的数据库名中。
  </para>

  <para>
   要把转储重新载入到一个名为<literal>newdb</>的新数据库中：

<screen>
<prompt>$</prompt> <userinput>createdb -T template0 newdb</userinput>
<prompt>$</prompt> <userinput>pg_restore -d newdb db.dump</userinput>
</screen>

   注意我们不使用<option>-C</>，而是直接连接到要恢复到其中的数据库。
   还要注意我们是从<literal>template0</>而不是<literal>template1</>
   创建了该数据库，以保证它最初是空的。
  </para>

  <para>
   要对数据库项重排序，首先需要转储归档的表内容：
<screen>
<prompt>$</prompt> <userinput>pg_restore -l db.dump &gt; db.list</userinput>
</screen>
   列表文件由一个头部和一些行组成，这些行每一个都用于一个项，例如：
<programlisting>
;
; Archive created at Mon Sep 14 13:55:39 2009
;     dbname: DBDEMOS
;     TOC Entries: 81
;     Compression: 9
;     Dump Version: 1.10-0
;     Format: CUSTOM
;     Integer: 4 bytes
;     Offset: 8 bytes
;     Dumped from database version: 8.3.5
;     Dumped by pg_dump version: 8.3.8
;
;
; Selected TOC Entries:
;
3; 2615 2200 SCHEMA - public pasha
1861; 0 0 COMMENT - SCHEMA public pasha
1862; 0 0 ACL - public pasha
317; 1247 17715 TYPE public composite pasha
319; 1247 25899 DOMAIN public domain0 pasha
</programlisting>
   分号表示开始一段注释，行首的数字表明了分配给每个项的内部归档 ID。
  </para>

  <para>
   文件中的行可以被注释掉、删除以及重排序。例如：
<programlisting>
10; 145433 TABLE map_resolutions postgres
;2; 145344 TABLE species postgres
;4; 145359 TABLE nt_header postgres
6; 145402 TABLE species_records postgres
;8; 145416 TABLE ss_old postgres
</programlisting>
   把这样一个文件作为<application>pg_restore</application>的输入将会只恢复项 10 和 6，并且先恢复 10 再恢复 6。
<screen>
<prompt>$</prompt> <userinput>pg_restore -L db.list db.dump</userinput>
</screen></para>

 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="app-pgdump"></member>
   <member><xref linkend="app-pg-dumpall"></member>
   <member><xref linkend="app-psql"></member>
  </simplelist>
 </refsect1>
</refentry>

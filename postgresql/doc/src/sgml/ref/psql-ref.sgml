<!--
doc/src/sgml/ref/psql-ref.sgml
PostgreSQL documentation
-->

<refentry id="APP-PSQL">
 <indexterm zone="app-psql">
  <primary>psql</primary>
 </indexterm>
  <refmeta>
    <refentrytitle><application>psql</application></refentrytitle>
    <manvolnum>1</manvolnum>
    <!-- 
<refmiscinfo>Application</refmiscinfo>
-->
<refmiscinfo>应用</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname><application>psql</application></refname>
    <refpurpose>
      <!--
  <productname>PostgreSQL</productname> interactive terminal
  -->
  <productname>PostgreSQL</productname> 交互终端
    </refpurpose>
  </refnamediv>


 <refsynopsisdiv>
  <cmdsynopsis>
   <command>psql</command>
   <arg rep="repeat"><replaceable class="parameter">option</replaceable></arg>
   <arg choice="opt"><replaceable class="parameter">dbname</replaceable>
   <arg choice="opt"><replaceable class="parameter">username</replaceable></arg></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

    <!--
<para>
     <application>psql</application> is a terminal-based front-end to
     <productname>PostgreSQL</productname>. It enables you to type in
     queries interactively, issue them to
     <productname>PostgreSQL</productname>, and see the query results.
     Alternatively, input can be from a file. In addition, it provides a
     number of meta-commands and various shell-like features to
     facilitate writing scripts and automating a wide variety of tasks.
    </para>
-->
<para>
<application>psql</application>是一个以终端为基础的<productname>PostgreSQL</productname>
前端。它允许你交互地键入查询，然后把它们发出给<productname>PostgreSQL</productname>，
再显示查询的结果。另外，输入可以来自一个文件。还有，它提供了一些元命令和多种类似
shell的特性来实现书写脚本以及对大量任务的自动化。
</para>
 </refsect1>

 <refsect1 id="R1-APP-PSQL-3">
  <!--
  <title>Options</title>
  -->
  <title>选项</title>

  <variablelist>
    <varlistentry>
      <term><option>-a</></term>
      <term><option>--echo-all</></term>
      <listitem>
      <!--
<para>
      Print all nonempty input lines to standard output as they are read.
      (This does not apply to lines read interactively.) This is
      equivalent to setting the variable <varname>ECHO</varname> to
      <literal>all</literal>.
      </para>
-->
<para>
在读取行时向标准输出打印所有非空内容。（这个选项不适用于交互模式读取行。）
这个选项等效于设置<varname>ECHO</varname>变量为<literal>all</literal>。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-A</></term>
      <term><option>--no-align</></term>
      <listitem>
      <!--
<para>
      Switches to unaligned output mode. (The default output mode is
      otherwise aligned.)
      </para>
-->
<para>
切换为非对齐输出模式。缺省输出模式是对齐的。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-c <replaceable class="parameter">command</replaceable></></term>
      <term><option>--command=<replaceable class="parameter">command</replaceable></></term>
      <listitem>
      <!--
<para>
      Specifies that <application>psql</application> is to execute one
      command string, <replaceable class="parameter">command</replaceable>,
      and then exit. This is useful in shell scripts. Start-up files
      (<filename>psqlrc</filename> and <filename>~/.psqlrc</filename>) are
      ignored with this option.
      </para>
-->
<para>
声明<application>psql</application>将执行一条命令字符串
<replaceable class="parameter">command</replaceable>，然后退出。
这一点在 shell 脚本里很有用。这个选项忽略启动文件
(<filename>psqlrc</filename>和<filename>~/.psqlrc</filename>)。
</para>
      <!--
<para><replaceable class="parameter">command</replaceable> must be either
      a command string that is completely parsable by the server (i.e.,
      it contains no <application>psql</application>-specific features),
      or a single backslash command. Thus you cannot mix
      <acronym>SQL</acronym> and <application>psql</application>
      meta-commands with this option. To achieve that, you could
      pipe the string into <application>psql</application>, for example:
      <literal>echo '\x \\ SELECT * FROM foo;' | psql</literal>.
      (<literal>\\</> is the separator meta-command.)
      </para>
-->
<para>
<replaceable class="parameter">command</replaceable>必须是一条完全可以被服务器分析的字符串
(也就是不包含<application>psql</application>特有的特性)，或者是一个反斜杠命令。
这样你就不会混合<acronym>SQL</acronym>和<application>psql</application>元命令。
要想混合使用，你可以把字符串重定向到<application>psql</application>里，
例如：<literal>echo '\x \\ SELECT * FROM foo;' | psql</literal>
(<literal>\\</>用于隔开元命令)。
</para>
      <!--
<para>
       If the command string contains multiple SQL commands, they are
       processed in a single transaction, unless there are explicit
       <command>BEGIN</>/<command>COMMIT</> commands included in the
       string to divide it into multiple transactions.  This is
       different from the behavior when the same string is fed to
       <application>psql</application>'s standard input.  Also, only
       the result of the last SQL command is returned.
      </para>
-->
<para>
如果命令字符串包含多个 SQL 命令，那么他们将在一个事务里处理，
除非在字符串里包含了明确的<command>BEGIN</>/<command>COMMIT</>命令把他们分成多个事务。
这个和从<application>psql</application>的标准输入里给它填充相同字符串不同。
另外，只返回最后一条SQL命令的结果。
</para>

      <para>
<!-- 
       Because of these legacy behaviors, putting more than one command in
       the <option>-c</option> string often has unexpected results.  It's
       better to feed multiple commands to <application>psql</application>'s
       standard input, either using <application>echo</application> as
       illustrated above, or via a shell here-document, for example:
-->
因为这些遗留行为，在<option>-c</option>字符串中放置多于一个命令经常会有意想不到的结果。
最好是在<application>psql</application>的标准输入中放置多个命令，
而不是使用上面阐述的<application>echo</application>，或者通过这里记录的shell，
例如：
<programlisting>
psql &lt;&lt;EOF
\x
SELECT * FROM foo;
EOF
</programlisting>
      </para>

      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-d <replaceable class="parameter">dbname</replaceable></></term>
      <term><option>--dbname=<replaceable class="parameter">dbname</replaceable></></term>
      <listitem>
      <!--
<para>
       Specifies the name of the database to connect to. This is
       equivalent to specifying <replaceable
       class="parameter">dbname</replaceable> as the first non-option
       argument on the command line.
      </para>
-->
<para>
声明想要连接的数据库名称。等效于在命令行行上把
<replaceable class="parameter">dbname</replaceable>声明为第一个非选项参数。
</para>
      <!--
<para>
       If this parameter contains an <symbol>=</symbol> sign or starts
       with a valid <acronym>URI</acronym> prefix
       (<literal>postgresql://</literal>
       or <literal>postgres://</literal>), it is treated as a
       <parameter>conninfo</parameter> string. See <xref
       linkend="libpq-connstring"> for more information.
      </para>
-->
<para>
如果这个参数包含一个<symbol>=</symbol>号，或者以一个有效的<acronym>URI</acronym>
前缀(<literal>postgresql://</literal>或<literal>postgres://</literal>)开头，
那么将它看做一个<parameter>conninfo</parameter>字符串。
参阅<xref linkend="libpq-connstring">获取更多信息。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-e</></term>
      <term><option>--echo-queries</></term>
      <listitem>
      <!--
<para>
      Copy all SQL commands sent to the server to standard output as well.
      This is equivalent
      to setting the variable <varname>ECHO</varname> to
      <literal>queries</literal>.
      </para>
-->
<para>
把所有发送给服务器的查询同时也回显到标准输出。等效于把变量
<varname>ECHO</varname>设置为<literal>queries</literal>。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-E</></term>
      <term><option>--echo-hidden</></term>
      <listitem>
      <!--
<para>
      Echo the actual queries generated by <command>\d</command> and other backslash
      commands. You can use this to study <application>psql</application>'s
      internal operations. This is equivalent to
      setting the variable <varname>ECHO_HIDDEN</varname> to <literal>on</>.
      </para>
-->
<para>
回显由<command>\d</command>和其它反斜杠命令生成的实际查询。
你可以使用这个命令学习<application>psql</application>的内部操作。
这等效于在设置变量<varname>ECHO_HIDDEN</varname>为<literal>on</>。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-f <replaceable class="parameter">filename</replaceable></></term>
      <term><option>--file=<replaceable class="parameter">filename</replaceable></></term>
      <listitem>
      <!--
<para>
      Use the file <replaceable class="parameter">filename</replaceable>
      as the source of commands instead of reading commands interactively.
      After the file is processed, <application>psql</application>
      terminates. This is in many ways equivalent to the meta-command
      <command>\i</command>.
      </para>
-->
<para>
使用<replaceable class="parameter">filename</replaceable>
作为命令的语句源而不是交互式读入查询。<application>psql</application>
将在处理完文件后结束。这个选项在很多方面等效于元命令<command>\i</command>。
</para>

      <!--
<para>
       If <replaceable>filename</replaceable> is <literal>-</literal>
       (hyphen), then standard input is read.
      </para>
-->
<para>
如果<replaceable>filename</replaceable>是<literal>-</literal>(连字符)，则从标准输入读取。
</para>

      <!--
<para>
      Using this option is subtly different from writing <literal>psql
      &lt; <replaceable
      class="parameter">filename</replaceable></literal>. In general,
      both will do what you expect, but using <literal>-f</literal>
      enables some nice features such as error messages with line
      numbers. There is also a slight chance that using this option will
      reduce the start-up overhead. On the other hand, the variant using
      the shell's input redirection is (in theory) guaranteed to yield
      exactly the same output you would have received had you entered
      everything by hand.
      </para>
-->
<para>
使用这个选项与使用<literal>psql &lt; <replaceable class="parameter">filename</replaceable></literal>
有微小的区别。通常，两者都会按照你预期那样运行，但是使用<literal>-f</literal>
打开了一些很好的特性，比如带行号的错误消息。而且，使用这个选项还可能减小启动的开销。
另一方面，如果你把所有内容手工输入，使用shell输入定向的方式(理论上)
能保证生成和你已经得到的完全一样的输出。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-F <replaceable class="parameter">separator</replaceable></></term>
      <term><option>--field-separator=<replaceable class="parameter">separator</replaceable></></term>
      <listitem>
      <!--
<para>
      Use <replaceable class="parameter">separator</replaceable> as the
      field separator for unaligned output. This is equivalent to
      <command>\pset fieldsep</command> or <command>\f</command>.
      </para>
-->
<para>
使用<replaceable class="parameter">separator</replaceable>作为未对齐输出的域分隔符。
等效于<command>\pset fieldsep</command>或<command>\f</command>。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-h <replaceable class="parameter">hostname</replaceable></></term>
      <term><option>--host=<replaceable class="parameter">hostname</replaceable></></term>
      <listitem>
      <!--
<para>
      Specifies the host name of the machine on which the
      server is running. If the value begins
      with a slash, it is used as the directory for the Unix-domain
      socket.
      </para>
-->
<para>
指定正在运行服务器的主机名。如果主机名以斜杠开头，则它被用作到Unix域套接字的路径。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-H</></term>
      <term><option>--html</></term>
      <listitem>
      <!--
<para>
      Turn on <acronym>HTML</acronym> tabular output. This is
      equivalent to <literal>\pset format html</literal> or the
      <command>\H</command> command.
      </para>
-->
<para>
打开<acronym>HTML</acronym>格式输出。等效于<literal>\pset format html</literal>
或<command>\H</command>命令。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-l</></term>
      <term><option>--list</></term>
      <listitem>
      <!--
<para>
      List all available databases, then exit. Other non-connection
      options are ignored. This is similar to the meta-command
      <command>\list</command>.
      </para>
-->
<para>
列出所有可用的数据库，然后退出。其它非连接选项将被忽略。类似于元命令<command>\list</command>。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-L <replaceable class="parameter">filename</replaceable></></term>
      <term><option>--log-file=<replaceable class="parameter">filename</replaceable></></term>
      <listitem>
      <!--
<para>
       Write all query output into file <replaceable
       class="parameter">filename</replaceable>, in addition to the
       normal output destination.
      </para>
-->
<para>
除了正常的输出源之外，把所有查询输出记录到文件<replaceable
       class="parameter">filename</replaceable>。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-n</></term>
      <term><option>--no-readline</></term>
      <listitem>
      <!--
<para>
       Do not use <application>Readline</application> for line editing and do
       not use the command history.
       This can be useful to turn off tab expansion when cutting and pasting.
      </para>
-->
<para>
在行编辑中不使用<application>Readline</application>，并且不使用命令历史。
这可以在剪切和粘贴时用于关闭tab扩展。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-o <replaceable class="parameter">filename</replaceable></></term>
      <term><option>--output=<replaceable class="parameter">filename</replaceable></></term>
      <listitem>
      <!--
<para>
      Put all query output into file <replaceable
      class="parameter">filename</replaceable>. This is equivalent to
      the command <command>\o</command>.
      </para>
-->
<para>
将所有查询输出重定向到文件<replaceable class="parameter">filename</replaceable>。
这个选项等效于<command>\o</command>命令。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></></term>
      <term><option>--port=<replaceable class="parameter">port</replaceable></></term>
      <listitem>
      <!--
<para>
      Specifies the TCP port or the local Unix-domain
      socket file extension on which the server is listening for
      connections. Defaults to the value of the <envar>PGPORT</envar>
      environment variable or, if not set, to the port specified at
      compile time, usually 5432.
      </para>
-->
<para>
指定服务器侦听的TCP端口或本地Unix域套接字文件的扩展。
缺省使用环境变量<envar>PGPORT</envar>的值，
如果没有设置的话则使用编译时声明的端口(通常是 5432)。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-P <replaceable class="parameter">assignment</replaceable></></term>
      <term><option>--pset=<replaceable class="parameter">assignment</replaceable></></term>
      <listitem>
      <!--
<para>
      Specifies printing options, in the style of
      <command>\pset</command>. Note that here you
      have to separate name and value with an equal sign instead of a
      space. For example, to set the output format to <application>LaTeX</application>, you could write
      <literal>-P format=latex</literal>.
      </para>
-->
<para>
以<command>\pset</command>的风格设置打印选项。
要注意的是你在这里必须用等号而不是空格分割名称和值。
例如，要把输出格式设置为<application>LaTeX</application>，
你可以敲入<literal>-P format=latex</literal>。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-q</></term>
      <term><option>--quiet</></term>
      <listitem>
      <!--
<para>
      Specifies that <application>psql</application> should do its work
      quietly. By default, it prints welcome messages and various
      informational output. If this option is used, none of this
      happens. This is useful with the <option>-c</option> option.
      This is equivalent to setting the variable <varname>QUIET</varname>
      to <literal>on</>.
      </para>
-->
<para>
声明<application>psql</application>应该安静地执行处理任务。缺省时，
它将打印欢迎和许多其它输出信息。如果使用了此选项，这些都不会出现。
这在和<option>-c</option>选项一起使用时很有效。这等效于设置变量
<varname>QUIET</varname>为<literal>on</>。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-R <replaceable class="parameter">separator</replaceable></></term>
      <term><option>--record-separator=<replaceable class="parameter">separator</replaceable></></term>
      <listitem>
      <!--
<para>
      Use <replaceable class="parameter">separator</replaceable> as the
      record separator for unaligned output. This is equivalent to the
      <command>\pset recordsep</command> command.
      </para>
-->
<para>
使用<replaceable class="parameter">separator</replaceable>
做为非对齐输出的记录分隔符。等效于<command>\pset recordsep</command>命令。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-s</></term>
      <term><option>--single-step</></term>
      <listitem>
      <!--
<para>
      Run in single-step mode. That means the user is prompted before
      each command is sent to the server, with the option to cancel
      execution as well. Use this to debug scripts.
      </para>
-->
<para>
单步模式运行。意味着每个命令在发往服务器之前都要提示用户，
用这个选项也可以取消执行。此选项主要用于调试脚本。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-S</></term>
      <term><option>--single-line</></term>
      <listitem>
      <!--
<para>
      Runs in single-line mode where a newline terminates an SQL command, as a
      semicolon does.
      </para>
-->
<para>
单行运行模式，这时每个命令都将由换行符结束，像分号那样。
</para>

      <note>
      <!--
<para>
      This mode is provided for those who insist on it, but you are not
      necessarily encouraged to use it. In particular, if you mix
      <acronym>SQL</acronym> and meta-commands on a line the order of
      execution might not always be clear to the inexperienced user.
      </para>
-->
<para>
这个模式是给那些坚持要使用这个特性的人保留的，不鼓励你这么用。实际上，
如果你在一行里混合使用<acronym>SQL</acronym>和元命令，
执行的顺序对不熟练的用户而言并不总是清晰的。
</para>
      </note>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-t</></term>
      <term><option>--tuples-only</></term>
      <listitem>
      <!--
<para>
      Turn off printing of column names and result row count footers,
      etc. This is equivalent to the <command>\t</command> command.
      </para>
-->
<para>
关闭打印列名称和结果行计数脚注等信息。等效于<command>\t</command>命令。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-T <replaceable class="parameter">table_options</replaceable></></term>
      <term><option>--table-attr=<replaceable class="parameter">table_options</replaceable></></term>
      <listitem>
      <!--
<para>
      Specifies options to be placed within the
      <acronym>HTML</acronym> <sgmltag>table</sgmltag> tag. See
      <command>\pset</command> for details.
      </para>
-->
<para>
声明放在<acronym>HTML</acronym> <sgmltag>table</sgmltag>标签里的选项。
参阅<command>\pset</command>获取细节。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-U <replaceable class="parameter">username</replaceable></></term>
      <term><option>--username=<replaceable class="parameter">username</replaceable></></term>
      <listitem>
      <!--
<para>
      Connect to the database as the user <replaceable
      class="parameter">username</replaceable> instead of the default.
      (You must have permission to do so, of course.)
      </para>
-->
<para>
以用户<replaceable class="parameter">username</replaceable>
代替缺省用户与数据库连接。当然，你必须有这么做的权限。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-v <replaceable class="parameter">assignment</replaceable></></term>
      <term><option>--set=<replaceable class="parameter">assignment</replaceable></></term>
      <term><option>--variable=<replaceable class="parameter">assignment</replaceable></></term>
      <listitem>
      <!--
<para>
      Perform a variable assignment, like the <command>\set</command>
      meta-command. Note that you must separate name and value, if
      any, by an equal sign on the command line. To unset a variable,
      leave off the equal sign. To set a variable with an empty value,
      use the equal sign but leave off the value. These assignments are
      done during a very early stage of start-up, so variables reserved
      for internal purposes might get overwritten later.
      </para>
-->
<para>
像元命令<command>\set</command>那样进行一次变量分配。注意，如果有变量名和值的话，
你必须在命令行上用等号分隔它们。去掉等号则重置变量。要设置一个带有空值的变量，
可以保留等号但是不指定值。这个分配是在启动之初进行的，
所以为内部使用而保留的变量可能被再次覆盖。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-V</></term>
      <term><option>--version</></term>
      <listitem>
      <!--
<para>
      Print the <application>psql</application> version and exit.
      </para>
-->
<para>
打印<application>psql</application>版本信息然后退出。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-w</></term>
     <term><option>--no-password</></term>
     <listitem>
      <!--
<para>
       Never issue a password prompt.  If the server requires password
       authentication and a password is not available by other means
       such as a <filename>.pgpass</filename> file, the connection
       attempt will fail.  This option can be useful in batch jobs and
       scripts where no user is present to enter a password.
      </para>
-->
<para>
从不提示密码。如果服务器需要密码验证而密码不可通过其他方式
（比如<filename>.pgpass</filename>文件）获得，则连接尝试将失败。
该选项在批量工作和不存在用户输入密码的脚本中很有帮助。
</para>

      <!--
<para>
       Note that this option will remain set for the entire session,
       and so it affects uses of the meta-command
       <command>\connect</command> as well as the initial connection attempt.
      </para>
-->
<para>
请注意，这个选项对整个会话有效，所以它影响元命令<command>\connect</command>的使用，
还有初始连接尝试。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-W</></term>
      <term><option>--password</></term>
      <listitem>
      <!--
<para>
       Force <application>psql</application> to prompt for a
       password before connecting to a database.
      </para>
-->
<para>
强制<application>psql</application>在与一个数据库连接前提示输入口令。
</para>

      <!--
<para>
       This option is never essential, since <application>psql</application>
       will automatically prompt for a password if the server demands
       password authentication.  However, <application>psql</application>
       will waste a connection attempt finding out that the server wants a
       password.  In some cases it is worth typing <option>-W</> to avoid
       the extra connection attempt.
      </para>
-->
<para>
这个选项从来不是至关重要的，因为如果服务器需求密码认证，
则<application>psql</application>自动提示一个密码。不过，<application>psql</application>
将在找出服务器想要一个密码上浪费一个连接尝试。在某些情况下，
值得输入<option>-W</>以避免额外的连接尝试。
</para>

      <!--
<para>
       Note that this option will remain set for the entire session,
       and so it affects uses of the meta-command
       <command>\connect</command> as well as the initial connection attempt.
      </para>
-->
<para>
请注意，这个选项对整个会话有效，所以它影响元命令<command>\connect</command>的使用，
还有初始连接尝试。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-x</></term>
      <term><option>--expanded</></term>
      <listitem>
      <!--
<para>
      Turn on the expanded table formatting mode. This is equivalent to the
      <command>\x</command> command.
      </para>
-->
<para>
打开扩展表格式模式。等效于<command>\x</command>命令。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-X,</></term>
      <term><option>--no-psqlrc</></term>
      <listitem>
      <!--
<para>
      Do not read the start-up file (neither the system-wide
      <filename>psqlrc</filename> file nor the user's
      <filename>~/.psqlrc</filename> file).
      </para>
-->
<para>
不读取启动文件(系统范围的<filename>psqlrc</filename>或者你自己的
<filename>~/.psqlrc</filename>都不读取)。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-z</option></term>
      <term><option>--field-separator-zero</option></term>
      <listitem>
      <!--
<para>
      Set the field separator for unaligned output to a zero byte.
      </para>
-->
<para>
为未对齐的输出设置字段分隔符为零字节。
</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-0</option></term>
      <term><option>--record-separator-zero</option></term>
      <listitem>
      <!--
<para>
      Set the record separator for unaligned output to a zero byte.  This is
      useful for interfacing, for example, with <literal>xargs -0</literal>.
      </para>
-->
<para>
为未对齐的输出设置记录分隔符为零字节。这个接口连接时是有用的，
例如，<literal>xargs -0</literal>。
</para>
      </listitem>
    </varlistentry>

     <varlistentry>
      <term><option>-1</option></term>
      <term><option>--single-transaction</option></term>
      <listitem>
       <!--
<para>
        When <application>psql</application> executes a script, adding
        this option wraps <command>BEGIN</>/<command>COMMIT</> around the
        script to execute it as a single transaction.  This ensures that
        either all the commands complete successfully, or no changes are
        applied.
       </para>
-->
<para>
当<application>psql</application>执行脚本时，
使用这个选项将导致在脚本的开头和结尾分别加上<command>BEGIN</>/<command>COMMIT</>
来把整个脚本当作一个事务执行。这将保证该脚本要么完全执行成功，要么不产生任何影响。
</para>

       <!--
<para>
        If the script itself uses <command>BEGIN</>, <command>COMMIT</>,
        or <command>ROLLBACK</>, this option will not have the desired
        effects.
        Also, if the script contains any command that cannot be executed
        inside a transaction block, specifying this option will cause that
        command (and hence the whole transaction) to fail.
       </para>
-->
<para>
如果在脚本中已经使用了<command>BEGIN</>、<command>COMMIT</>、<command>ROLLBACK</>，
那么该选项将不会得到期望的效果。同样，如果脚本中包含任何不能在事务块内部使用的命令，
使用这个选项将导致这样的命令执行失败，当然整个事务亦将失败。
</para>
      </listitem>
     </varlistentry>

    <varlistentry>
      <term><option>-?</></term>
      <term><option>--help</></term>
      <listitem>
      <!--
<para>
      Show help about <application>psql</application> command line
      arguments, and exit.
      </para>
-->
<para>
显示关于<application>psql</application>命令行参数的帮助然后退出。
</para>
      </listitem>
    </varlistentry>

  </variablelist>
 </refsect1>


 <refsect1>
  <!--
  <title>Exit Status</title>
  -->
  <title>退出状态</title>

  <!--
<para>
   <application>psql</application> returns 0 to the shell if it
   finished normally, 1 if a fatal error of its own occurs (e.g. out of memory,
   file not found), 2 if the connection to the server went bad
   and the session was not interactive, and 3 if an error occurred in a
   script and the variable <varname>ON_ERROR_STOP</varname> was set.
  </para>
-->
<para>
如果正常结束，那么<application>psql</application>向 shell 返回 0 ，
如果自身发生致命错误，则返回 1(比如内存用尽，未找到文件等)，
如果和数据库的连接失效而且会话不再活跃则返回 2 ，
如果脚本中发生错误并且设置了<varname>ON_ERROR_STOP</varname>则返回 3 。
</para>
 </refsect1>


 <refsect1>
  <!--
<title>Usage</title>
-->
<title>用法</title>

  <refsect2 id="R2-APP-PSQL-connecting">
    <!--
<title>Connecting to a Database</title>
-->
<title>连接一个数据库</title>

    <!--
<para>
    <application>psql</application> is a regular
    <productname>PostgreSQL</productname> client application. In order
    to connect to a database you need to know the name of your target
    database, the host name and port number of the server, and what user
    name you want to connect as. <application>psql</application> can be
    told about those parameters via command line options, namely
    <option>-d</option>, <option>-h</option>, <option>-p</option>, and
    <option>-U</option> respectively. If an argument is found that does
    not belong to any option it will be interpreted as the database name
    (or the user name, if the database name is already given). Not all
    of these options are required; there are useful defaults. If you omit the host
    name, <application>psql</> will connect via a Unix-domain socket
    to a server on the local host, or via TCP/IP to <literal>localhost</> on
    machines that don't have Unix-domain sockets. The default port number is
    determined at compile time.
    Since the database server uses the same default, you will not have
    to specify the port in most cases. The default user name is your
    operating-system user name, as is the default database name.
    Note that you cannot
    just connect to any database under any user name. Your database
    administrator should have informed you about your access rights.
    </para>
-->
<para>
<application>psql</application>是一个普通的<productname>PostgreSQL</productname>
客户端应用。为了与一个数据库连接，你需要知道目标数据库、服务器的主机名和端口号、
以及你希望以哪个用户的身份进行连接等信息。可以通过命令行参数<option>-d</option>, 
<option>-h</option>, <option>-p</option>, <option>-U</option>告诉
<application>psql</application>这些信息。如果某个参数不属于任何选项，
那么它会被解释成数据库名或者是用户名(如果数据库名称已经给出了)。
不是所有这些选项都是必须的，有的缺省就存在。如果你省略主机名，<application>psql</>
将通过Unix域套接字与本地主机的服务器相联，或者在没有unix域套接字的机器上，
通过TCP/IP与<literal>localhost</>连接。缺省的端口号是编译时确定的。
因为数据库服务器使用同样的缺省值，所以在大多数设置下，你可能不需要声明端口号。
缺省的用户名是你的操作系统用户名，与数据库同名。
要注意的是你不能用任意用户名与任何数据库相联。你的数据库管理员应该告诉你有哪些访问权限。
</para>

    <!--
<para>
    When the defaults aren't quite right, you can save yourself
    some typing by setting the environment variables
    <envar>PGDATABASE</envar>, <envar>PGHOST</envar>,
    <envar>PGPORT</envar> and/or <envar>PGUSER</envar> to appropriate
    values. (For additional environment variables, see <xref
    linkend="libpq-envars">.) It is also convenient to have a
    <filename>~/.pgpass</> file to avoid regularly having to type in
    passwords. See <xref linkend="libpq-pgpass"> for more information.
    </para>
-->
<para>
如果缺省不太正确，那么你可以通过设置几个环境变量<envar>PGDATABASE</envar>,
<envar>PGHOST</envar>,<envar>PGPORT</envar>和/或<envar>PGUSER</envar>
的方法节约几次敲击。其它环境变量的信息，参阅<xref linkend="libpq-envars">。
另外，用一个<filename>~/.pgpass</>文件来避免输入密码也是很方便的。
参阅<xref linkend="libpq-pgpass">获取更多信息。
</para>

    <!--
<para>
     An alternative way to specify connection parameters is in a
     <parameter>conninfo</parameter> string or
     a <acronym>URI</acronym>, which is used instead of a database
     name. This mechanism give you very wide control over the
     connection. For example:
<programlisting>
$ <userinput>psql "service=myservice sslmode=require"</userinput>
$ <userinput>psql postgresql://dbmaster:5433/mydb?sslmode=require</userinput>
</programlisting>
     This way you can also use <acronym>LDAP</acronym> for connection
     parameter lookup as described in <xref linkend="libpq-ldap">.
     See <xref linkend="libpq-paramkeywords"> for more information on all the
     available connection options.
    </para>
-->
<para>
声明连接参数的另一种方式是在<parameter>conninfo</parameter>字符串或
<acronym>URI</acronym>中，代替数据库名字。这种机制让你非常广泛的控制连接。
例如：
<programlisting>
$ <userinput>psql "service=myservice sslmode=require"</userinput>
$ <userinput>psql postgresql://dbmaster:5433/mydb?sslmode=require</userinput>
</programlisting>
这种方式你也可以使用<acronym>LDAP</acronym>查找连接参数，就像
<xref linkend="libpq-ldap">里描述的那样。参阅<xref linkend="libpq-paramkeywords">
获取所有可用的连接选项的信息。
</para>

    <!--
<para>
    If the connection could not be made for any reason (e.g., insufficient
    privileges, server is not running on the targeted host, etc.),
    <application>psql</application> will return an error and terminate.
    </para>
-->
<para>
如果因为任何原因而无法与数据库相联(权限不够、服务器没有运行等)，
<application>psql</application>将返回一个错误并退出。
</para>

    <!--
<para>
     If both standard input and standard output are a
     terminal, then <application>psql</application> sets the client
     encoding to <quote>auto</quote>, which will detect the
     appropriate client encoding from the locale settings
     (<envar>LC_CTYPE</envar> environment variable on Unix systems).
     If this doesn't work out as expected, the client encoding can be
     overridden using the environment
     variable <envar>PGCLIENTENCODING</envar>.
    </para>
-->
<para>
如果标准输入和标准输出都是一个终端，那么<application>psql</application>
设置客户端编码为<quote>自动</quote>，这将从本地设置中检测合适的客户端编码
（在Unix系统上是<envar>LC_CTYPE</envar>环境变量）。如果不像预期的那样工作，
客户端编码可以使用环境变量<envar>PGCLIENTENCODING</envar>重写。
</para>
  </refsect2>

  <refsect2 id="R2-APP-PSQL-4">
    <!-- 
<title>Entering SQL Commands</title>
-->
<title>输入 SQL 命令</title>

    <!--
<para>
    In normal operation, <application>psql</application> provides a
    prompt with the name of the database to which
    <application>psql</application> is currently connected, followed by
    the string <literal>=&gt;</literal>. For example:
<programlisting>
$ <userinput>psql testdb</userinput>
psql (&version;)
Type "help" for help.

testdb=&gt;
</programlisting>
    </para>
-->
<para>
通常状况下，<application>psql</application>提供一个带有正在与之连接的接数据库名的，
后缀<literal>=&gt;</literal>的提示符。例如：
<programlisting>
$ <userinput>psql testdb</userinput>
psql (&version;)
Type "help" for help.

testdb=&gt;
</programlisting>
</para>

    <!--
<para>
    At the prompt, the user can type in <acronym>SQL</acronym> commands.
    Ordinarily, input lines are sent to the server when a
    command-terminating semicolon is reached. An end of line does not
    terminate a command.  Thus commands can be spread over several lines for
    clarity. If the command was sent and executed without error, the results
    of the command are displayed on the screen.
    </para>
-->
<para>
用户可以在这个提示符下键入<acronym>SQL</acronym>命令。通常，
输入的行将在命令终止分号出现时送到服务器。一行的终止并不表示命令的结束。
因此命令可以为了清晰起见跨越好几行。如果命令发送出去而且执行没有错误，
命令结果会显示在屏幕上。
</para>

    <!--
<para>
    Whenever a command is executed, <application>psql</application> also polls
    for asynchronous notification events generated by
    <xref linkend="SQL-LISTEN"> and
    <xref linkend="SQL-NOTIFY">.
    </para>
-->
<para>
当命令正在进行时，<application>psql</application>同样还轮询由
<xref linkend="SQL-LISTEN">和<xref linkend="SQL-NOTIFY">生成的异步通知信号。
</para>
<!-- 
    <para>
    While C-style block comments are passed to the server for
    processing and removal, SQL-standard comments are removed by
    <application>psql</application>.
    </para>
-->
<para>
当C风格的块注释传递到服务器等待处理和移除时，
SQL标准的注释通过<application>psql</application>移除了。
</para>
  </refsect2>

  <refsect2 id="APP-PSQL-meta-commands">
    <!--
<title>Meta-Commands</title>
-->
<title>元命令</title>

    <!--
<para>
    Anything you enter in <application>psql</application> that begins
    with an unquoted backslash is a <application>psql</application>
    meta-command that is processed by <application>psql</application>
    itself. These commands make
    <application>psql</application> more useful for administration or
    scripting. Meta-commands are often called slash or backslash commands.
    </para>
-->
<para>
你在<application>psql</application>里输入的任何以不带引号的反斜杠开头的东西都是
<application>psql</application>元命令，这些命令是将由<application>psql</application>
自己处理的。这些命令使得<application>psql</application>
更便于管理或书写脚本。元命令通常被称为斜杠或反斜杠命令。
</para>

    <!--
<para>
    The format of a <application>psql</application> command is the backslash,
    followed immediately by a command verb, then any arguments. The arguments
    are separated from the command verb and each other by any number of
    whitespace characters.
    </para>
-->
<para>
一个<application>psql</application>命令的格式是反斜杠后面紧跟一个命令动词，
然后是任意参数。参数与命令动词和其它参数以任意个空白字符间隔。
</para>

    <!--
<para>
    To include whitespace in an argument you can quote it with
    single quotes. To include a single quote in an argument,
    write two single quotes within single-quoted text.
    Anything contained in single quotes is
    furthermore subject to C-like substitutions for
    <literal>\n</literal> (new line), <literal>\t</literal> (tab),
    <literal>\b</literal> (backspace), <literal>\r</literal> (carriage return),
    <literal>\f</literal> (form feed),
    <literal>\</literal><replaceable>digits</replaceable> (octal), and
    <literal>\x</literal><replaceable>digits</replaceable> (hexadecimal).
    A backslash preceding any other character within single-quoted text
    quotes that single character, whatever it is.
    </para>
-->
<para>
要在参数里面包含空白，你必须用单引号把它包围起来。要在参数里包含单引号，
在单引号包围的文本里写两个单引号。任何包含在单引号里的东西都会被进一步进行类
C的替换：<literal>\n</literal>(新行)、<literal>\t</literal>(制表符)、
<literal>\b</literal>（退格）、<literal>\r</literal>（回车）、
<literal>\f</literal>（换页）、<literal>\</literal><replaceable>digits</replaceable>
(八进制表示的字符)、<literal>\x</literal><replaceable>digits</replaceable>
(十六进制表示的字符)。在单引号包围的文本中，反斜杠前导任何其他字符，
都表示是该单个字符，不管它是什么。
</para>

    <!--
<para>
    Within an argument, text that is enclosed in backquotes
    (<literal>`</literal>) is taken as a command line that is passed to the
    shell. The output of the command (with any trailing newline removed)
    replaces the backquoted text.
    </para>
-->
<para>
在一个参数中，加上反勾号(<literal>`</literal>)的文本被看做是一个命令行，
传递给shell。该命令的输出（删除结尾的新行）替换了加上反勾号的文本。
</para>

    <!--
<para>
    If an unquoted colon (<literal>:</literal>) followed by a
    <application>psql</> variable name appears within an argument, it is
    replaced by the variable's value, as described in <xref
    linkend="APP-PSQL-interpolation" endterm="APP-PSQL-interpolation-title">.
    </para>
-->
<para>
如果一个未加引号的冒号(<literal>:</literal>)后面跟着一个<application>psql</>
变量名，出现在一个参数中，那么它会被变量的值取代，就像
<xref linkend="APP-PSQL-interpolation" endterm="APP-PSQL-interpolation-title">
中描述的那样。
</para>

    <!--
<para>
    Some commands take an <acronym>SQL</acronym> identifier (such as a
    table name) as argument. These arguments follow the syntax rules
    of <acronym>SQL</acronym>: Unquoted letters are forced to
    lowercase, while double quotes (<literal>"</>) protect letters
    from case conversion and allow incorporation of whitespace into
    the identifier.  Within double quotes, paired double quotes reduce
    to a single double quote in the resulting name.  For example,
    <literal>FOO"BAR"BAZ</> is interpreted as <literal>fooBARbaz</>,
    and <literal>"A weird"" name"</> becomes <literal>A weird"
    name</>.
    </para>
-->
<para>
有些命令以一个<acronym>SQL</acronym>标识的名称(比如一个表名)为参数。
这些参数遵循<acronym>SQL</acronym>语法关于双引号的规则：
不带双引号的标识强制成小写，而双引号(<literal>"</>)保护字母不进行大小写转换，
并且允许在标识符中使用空白。在双引号中，
成对的双引号在结果名字中分析成一个双引号。比如，
<literal>FOO"BAR"BAZ</>解析成<literal>fooBARbaz</>；
而<literal>"A weird"" name"</>解析成<literal>A weird" name</>。
</para>

    <!--
<para>
    Parsing for arguments stops at the end of the line, or when another
    unquoted backslash is found.  An unquoted backslash
    is taken as the beginning of a new meta-command. The special
    sequence <literal>\\</literal> (two backslashes) marks the end of
    arguments and continues parsing <acronym>SQL</acronym> commands, if
    any. That way <acronym>SQL</acronym> and
    <application>psql</application> commands can be freely mixed on a
    line. But in any case, the arguments of a meta-command cannot
    continue beyond the end of the line.
    </para>
-->
<para>
对参数的分析在行的末尾停止，或者在找到另一个不带引号的反斜杠时停止。
一个不带引号的反斜杠会认为是一个新的元命令的开始。特殊的双反斜杠序列
<literal>\\</literal>标识参数的结尾并将继续分析后面的<acronym>SQL</acronym>
命令(如果存在的话)。这样<acronym>SQL</acronym>和<application>psql</application>
命令可以自由的在一行里面混合。但是在任何情况下，一条元命令的参数不能延续超过行尾。
</para>

    
<para>
    <!--
The following meta-commands are defined:
-->
下面是已定义的元命令：

    <variablelist>
      <varlistentry>
        <term><literal>\a</literal></term>
        <listitem>
<!--
        <para>
        If the current table output format is unaligned, it is switched to aligned.
        If it is not unaligned, it is set to unaligned. This command is
        kept for backwards compatibility. See <command>\pset</command> for a
        more general solution.
        </para>
-->
<para>
如果目前的表输出格式是不对齐的，则切换成对齐的。如果是对齐的，则切换成不对齐。
这条命令是为了向后兼容。参阅<command>\pset</command>获取一个更通用的解决方法。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <!-- 
        <term><literal>\c</literal> or <literal>\connect</literal> <literal>[ <replaceable class="parameter">dbname</replaceable> [ <replaceable class="parameter">username</replaceable> ] [ <replaceable class="parameter">host</replaceable> ] [ <replaceable class="parameter">port</replaceable> ] ] | <replaceable class="parameter">conninfo</replaceable> </literal></term>
        -->
        <term><literal>\c</literal>或<literal>\connect</literal> <literal>[ <replaceable class="parameter">dbname</replaceable> [ <replaceable class="parameter">username</replaceable> ] [ <replaceable class="parameter">host</replaceable> ] [ <replaceable class="parameter">port</replaceable> ] ] | <replaceable class="parameter">conninfo</replaceable> </literal></term>
        <listitem>
        <!--
<para>
        Establishes a new connection to a <productname>PostgreSQL</>
        server.  The connection parameters to use can be specified either
        using a positional syntax, or using <literal>conninfo</> connection
        strings as detailed in <xref linkend="libpq-connstring">.
        </para>
-->
<para>
与一个<productname>PostgreSQL</>服务器建立一个新的连接。
要使用的连接参数通过位置语法或者使用<literal>conninfo</>
连接字符串（在<xref linkend="libpq-connstring">中详细说明）指定。
</para>
<!-- 
        <para>
        When using positional parameters, if any of
        <replaceable class="parameter">dbname</replaceable>,
        <replaceable class="parameter">username</replaceable>,
        <replaceable class="parameter">host</replaceable> or
        <replaceable class="parameter">port</replaceable> are omitted or
        specified as <literal>-</literal>, the value of that parameter from
        the previous connection is used; if there is no previous connection,
        the <application>libpq</application> default for the parameter's value
        is used.  When using <literal>conninfo</> strings, no values from the
        previous connection are used for the new connection.
        </para>
-->
<para>
当使用位置参数时，如果省略了<replaceable class="parameter">dbname</replaceable>、
<replaceable class="parameter">username</replaceable>、
<replaceable class="parameter">host</replaceable>或
<replaceable class="parameter">port</replaceable>中的任意一个，
或者声明为<literal>-</literal>，则该参数使用前一个连接的参数值；
如果没有前一个连接，则使用<application>libpq</application>
对该参数的缺省值。当使用<literal>conninfo</>字符串时，
新连接不会使用前一个连接的参数值。
</para>
        <!--
<para>
        If the new connection is successfully made, the previous
        connection is closed.
        If the connection attempt failed (wrong user name, access
        denied, etc.), the previous connection will only be kept if
        <application>psql</application> is in interactive mode. When
        executing a non-interactive script, processing will
        immediately stop with an error. This distinction was chosen as
        a user convenience against typos on the one hand, and a safety
        mechanism that scripts are not accidentally acting on the
        wrong database on the other hand.
        </para>
-->
<para>
如果成功制作了新连接，那么关闭以前的连接。
如果连接失败(用户名错、访问被拒绝等)，那么仅当<application>psql</application>
处于交互模式时将保留前面的连接。如果运行的是非交互的脚本，
处理会马上停止并返回一个错误。设置这样的区别一方面是为用户使用方便考虑，
另一方面也为了保证脚本不会碰巧操作了错误的数据库的安全机制考虑。
</para>
        <para>
      <!-- 
      Examples:
      -->
      例如：
        </para>
<programlisting>
=&gt; \c mydb myuser host.dom 6432
=&gt; \c service=foo
=&gt; \c "host=localhost port=5432 dbname=mydb connect_timeout=10 sslmode=disable"
=&gt; \c postgresql://tom@localhost/mydb?application_name=myapp
</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\C [ <replaceable class="parameter">title</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
        Sets the title of any tables being printed as the result of a
        query or unset any such title. This command is equivalent to
        <literal>\pset title <replaceable
        class="parameter">title</replaceable></literal>. (The name of
        this command derives from <quote>caption</quote>, as it was
        previously only used to set the caption in an
        <acronym>HTML</acronym> table.)
        </para>
-->
<para>
把正在打印的表的标题设置为一个查询的结果或者取消这样的设置。
这条命令等效于<literal>\pset title <replaceable class="parameter">title</replaceable></literal>。
这条命令的名称源于<quote>caption</quote>，因为以前只是用于在一个
<acronym>HTML</acronym>表格里面设置标题。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>\cd [ <replaceable>directory</replaceable> ]</literal></term>
       <listitem>
        <!--
<para>
         Changes the current working directory to
         <replaceable>directory</replaceable>. Without argument, changes
         to the current user's home directory.
        </para>
-->
<para>
把当前工作目录改变到<replaceable>directory</replaceable>。
没有参数则是改变到当前用户的家目录。
</para>

        <tip>
         <!--
<para>
          To print your current working directory, use <literal>\! pwd</literal>.
         </para>
-->
<para>
使用<literal>\! pwd</literal>打印出当前工作目录。
</para>
        </tip>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\conninfo</literal></term>
        <listitem>
        <!--
<para>
        Outputs information about the current database connection.
        </para>
-->
<para>
输出关于当前数据库连接的信息。
</para>
        </listitem>
      </varlistentry>

      <varlistentry id="APP-PSQL-meta-commands-copy">
        <term><literal>\copy { <replaceable class="parameter">table</replaceable> [ ( <replaceable class="parameter">column_list</replaceable> ) ] | ( <replaceable class="parameter">query</replaceable> ) }
        { <literal>from</literal> | <literal>to</literal> }
        { <replaceable class="parameter">'filename'</replaceable> | program <replaceable class="parameter">'command'</replaceable> | stdin | stdout | pstdin | pstdout }
        [ [ with ] ( <replaceable class="parameter">option</replaceable> [, ...] ) ]</literal></term>

        <listitem>
        <!--
<para>
        Performs a frontend (client) copy. This is an operation that
        runs an <acronym>SQL</acronym> <xref linkend="SQL-COPY">
        command, but instead of the server
        reading or writing the specified file,
        <application>psql</application> reads or writes the file and
        routes the data between the server and the local file system.
        This means that file accessibility and privileges are those of
        the local user, not the server, and no SQL superuser
        privileges are required.
        </para>
-->
<para>
执行前端(客户端)拷贝。这是一个运行<acronym>SQL</acronym> <xref linkend="SQL-COPY">
命令的操作，不同的是服务器在读写指明的文件，而<application>psql</application>
读写文件并作为本地的文件系统和服务器之间的跳板取出或写入数据。
这意味着文件访问性和权限都是本地用户的，而不是服务器的，
因此不需要 SQL 超级用户权限。
</para>

        <!--
<para>
        When <literal>program</> is specified,
        <replaceable class="parameter">command</replaceable> is
        executed by <application>psql</application> and the data passed from
        or to <replaceable class="parameter">command</replaceable> is
        routed between the server and the client.
        Again, the execution privileges are those of
        the local user, not the server, and no SQL superuser
        privileges are required.
        </para>
-->
<para>
当指定了<literal>program</>时，<replaceable class="parameter">command</replaceable>
是通过<application>psql</application>执行的，并且来自或到达
<replaceable class="parameter">command</replaceable>
的数据在服务器和客户端之间传送。再次，文件访问性和权限都是本地用户的，
而不是服务器的，因此不需要 SQL 超级用户权限。
</para>

        <!--
<para>
        For <literal>\copy ... from stdin</>, data rows are read from the same
        source that issued the command, continuing until <literal>\.</literal>
        is read or the stream reaches <acronym>EOF</>. This option is useful
        for populating tables in-line within a SQL script file.
        For <literal>\copy ... to stdout</>, output is sent to the same place
        as <application>psql</> command output, and
        the <literal>COPY <replaceable>count</></literal> command status is
        not printed (since it might be confused with a data row).
        To read/write <application>psql</application>'s standard input or
        output regardless of the current command source or <literal>\o</>
        option, write <literal>from pstdin</> or <literal>to pstdout</>.
        </para>
-->
<para>
对于<literal>\copy ... from stdin</>，所有行都从发出命令的同一个源读取，直到读到了<literal>\.</literal>
或者流达到<acronym>EOF</>。这个选项用于填充SQL 脚本文件中嵌入的表很有用。
对于<literal>\copy ... to stdout</>，输出发送到和<application>psql</>
命令输出相同的位置。并且不输出<literal>COPY <replaceable>count</></literal>
命令状态（因为它可能会和一个数据行混淆）。要从<application>psql</application>
的标准输入或者输出读/写，而不管当前命令源或<literal>\o</>选项，
可以使用<literal>pstdin</>或<literal>pstdout</>。
</para>

        <!--
<para>
        The syntax of this command is similar to that of the
        <acronym>SQL</acronym> <xref linkend="sql-copy">
        command.  All options other than the data source/destination are
        as specified for <xref linkend="sql-copy">.
        Because of this, special parsing rules apply to the <command>\copy</>
        command. In particular, <application>psql</>'s variable substitution
        rules and backslash escapes do not apply.
        </para>
-->
<para>
这条命令的语法是类似于<acronym>SQL</acronym> <xref linkend="sql-copy">命令。
所有选项除了数据源/目的地都是按照<xref linkend="sql-copy">指定的。
因此带来一些应用于<command>\copy</command>命令的特殊分析规则。
尤其是<application>psql</>的变量替换规则和反斜杠逃逸规则将不起作用。
</para>

        <tip>
        <!--
<para>
        This operation is not as efficient as the <acronym>SQL</acronym>
        <command>COPY</command> command because all data must pass
        through the client/server connection. For large
        amounts of data the <acronym>SQL</acronym> command might be preferable.
        </para>
-->
<para>
此操作不像<acronym>SQL</acronym> <command>COPY</command>命令这样高效，
因为所有数据必须通过客户端/服务器连接。对于大数据量的操作，
<acronym>SQL</acronym>命令的方法更可行。
</para>
        </tip>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\copyright</literal></term>
        <listitem>
        <!--
<para>
        Shows the copyright and distribution terms of
        <productname>PostgreSQL</productname>.
        </para>
-->
<para>
显示<productname>PostgreSQL</productname>的版权和版本信息。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\d[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <!--
<para>
        For each relation (table, view, index, sequence, or foreign table)
        or composite type matching the
        <replaceable class="parameter">pattern</replaceable>, show all
        columns, their types, the tablespace (if not the default) and any
        special attributes such as <literal>NOT NULL</literal> or defaults.
        Associated indexes, constraints, rules, and triggers are
        also shown.  For foreign tables, the associated foreign
        server is shown as well.
        (<quote>Matching the pattern</> is defined in
        <xref linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">
        below.)
        </para>
-->
<para>
对于每个匹配<replaceable class="parameter">pattern</replaceable>的关系
(表、视图、索引、序列或外部表)或复合类型，显示所有列、它们的类型、
表空间(如果不是缺省的)和任何特殊属性(诸如<literal>NOT NULL</literal>或缺省等)。
相关的索引、约束、规则、触发器也同样显示出来。对于外部表，也显示相关的外部服务器。
<quote>匹配模式</>在下面的<xref linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">
中定义。
</para>

        <!--
<para>
        For some types of relation, <literal>\d</> shows additional information
        for each column: column values for sequences, indexed expression for
        indexes and foreign data wrapper options for foreign tables.
        </para>
-->
<para>
对于一些关系类型，<literal>\d</>为每个字段显示了额外的信息：序列的字段值，
索引的索引表达式和外部表的外部数据封装器选项。
</para>

        <!--
<para>
        The command form <literal>\d+</literal> is identical, except that
        more information is displayed: any comments associated with the
        columns of the table are shown, as is the presence of OIDs in the
        table, the view definition if the relation is a view, a non-default
        <link linkend="SQL-CREATETABLE-REPLICA-IDENTITY">replica
        identity</link> setting.
        </para>
-->
<para>
从<literal>\d+</literal>来的命令也是一样的，只不过显示更多信息：
任何与表的列关联的注释也都会显示，还有就是表中出现的 OID ，
如果关系是一个视图、一个非缺省的<link linkend="SQL-CREATETABLE-REPLICA-IDENTITY">
复制身份</link>设置，那么也显示视图定义。
</para>

        <!--
<para>
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>
-->
<para>
缺省的，只显示用户创建的对象；应用一个模式或<literal>S</literal>
修饰符包含系统对象。
</para>

        <note>
        <!--
<para>
        If <command>\d</command> is used without a
        <replaceable class="parameter">pattern</replaceable> argument, it is
        equivalent to <command>\dtvsE</command> which will show a list of
        all visible tables, views, sequences and foreign tables.
        This is purely a convenience measure.
        </para>
-->
<para>
如果不带任何<replaceable class="parameter">pattern</replaceable>参数调用
<command>\d</command>，那么等效于<command>\dtvsE</command>，
将显示一个所有可见表，视图，序列和外部表的列表。这完全是出于方便的考虑。
</para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\da[S] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <!--
<para>
        Lists aggregate functions, together with their
        return type and the data types they operate on. If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only aggregates whose names match the pattern are shown.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>
-->
<para>
列出聚合函数，以及它们的返回类型和操作的数据类型。如果声明了
<replaceable class="parameter">pattern</replaceable>，
那么只显示匹配模式的聚合函数。缺省的，只显示用户创建的对象；
应用一个模式或<literal>S</literal>修饰符包含系统对象。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\db[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <!--
<para>
        Lists tablespaces. If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only tablespaces whose names match the pattern are shown.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated permissions.
        </para>
-->
<para>
列出表空间。如果声明了<replaceable class="parameter">pattern</replaceable>，
那么只显示那些匹配模式的表空间。如果在命令名上附加了<literal>+</literal>，
那么每个对象都和与之相关的权限一起列出。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dc[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists conversions between character-set encodings.
        If <replaceable class="parameter">pattern</replaceable>
        is specified, only conversions whose names match the pattern are
        listed.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated description.
        </para>
-->
<para>
列出字符集编码之间的转换。如果声明了<replaceable class="parameter">pattern</replaceable>，
则只列出那些匹配模式的转换。缺省的，只显示用户创建的对象；
应用一个模式或<literal>S</literal>修饰符包含系统对象。如果在命令名上附加了
<literal>+</literal>，那么每个对象都和与之相关的描述一起列出。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dC[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists type casts.
        If <replaceable class="parameter">pattern</replaceable>
        is specified, only casts whose source or target types match the
        pattern are listed.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated description.
        </para>
-->
<para>
列出类型转换。如果声明了<replaceable class="parameter">pattern</replaceable>，
则只列出源或目标类型匹配该模式的转换。如果在命令名上附加了
<literal>+</literal>，那么每个对象都和与之相关的描述一起列出。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dd[S] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Shows the descriptions of objects of type <literal>constraint</>,
        <literal>operator class</>, <literal>operator family</>,
        <literal>rule</>, and <literal>trigger</>. All
        other comments may be viewed by the respective backslash commands for
        those object types.
        </para>
-->
<para>
显示类型为<literal>constraint</>、<literal>operator class</>、<literal>operator family</>、
<literal>rule</>和<literal>trigger</>的对象的描述。
所有其他的注释可以通过各自对象类型的反斜杠命令看到。
</para>

        <!--
<para><literal>\dd</literal> displays descriptions for objects matching the
        <replaceable class="parameter">pattern</replaceable>, or of visible
        objects of the appropriate type if no argument is given.  But in either
        case, only objects that have a description are listed.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>
-->
<para>
<literal>\dd</literal>显示匹配<replaceable class="parameter">pattern</replaceable>
的对象的描述，或者如果没有给出参数，显示适当类型的可视对象。但是不管怎样，
只有那些有描述内容的对象才显示出来。缺省的，只显示用户创建的对象；
应用一个模式或<literal>S</literal>修饰符包含系统对象。
</para>

        <!--
<para>
        Descriptions for objects can be created with the <xref
        linkend="sql-comment">
        <acronym>SQL</acronym> command.
       </para>
-->
<para>
可以用<xref linkend="sql-comment"> <acronym>SQL</acronym>命令生成对象的描述。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ddp [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists default access privilege settings.  An entry is shown for
        each role (and schema, if applicable) for which the default
        privilege settings have been changed from the built-in defaults.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only entries whose role name or schema name matches
        the pattern are listed.
        </para>
-->
<para>
列出缺省访问权限设置。为缺省权限设置已经从内建的缺省改变了的每个角色
（还有模式，如果适用）显示一个记录。如果声明了
<replaceable class="parameter">pattern</replaceable>，
则只列出角色名或模式名匹配该模式的记录。
</para>

        <!--
<para>
        The <xref linkend="sql-alterdefaultprivileges"> command is used to set
        default access privileges.  The meaning of the
        privilege display is explained under
        <xref linkend="sql-grant">.
        </para>
-->
<para>
<xref linkend="sql-alterdefaultprivileges">命令用来设置缺省访问权限。
权限显示的含义在<xref linkend="sql-grant">中解释。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dD[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists domains. If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only domains whose names match the pattern are shown.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated permissions and description.
        </para>
-->
<para>
列出域。如果声明了<replaceable class="parameter">pattern</replaceable>，
那么只显示匹配该模式的域。缺省的，只显示用户创建的对象；
应用一个模式或<literal>S</literal>修饰符包含系统对象。如果在命令名上附加了
<literal>+</literal>，那么每个对象都和与之相关的权限和描述一起列出。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dE[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\di[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\dm[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\ds[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\dt[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\dv[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <!--
<para>
        In this group of commands, the letters <literal>E</literal>,
        <literal>i</literal>, <literal>m</literal>, <literal>s</literal>,
        <literal>t</literal>, and <literal>v</literal>
        stand for foreign table, index, materialized view, sequence, table, and view,
        respectively.
        You can specify any or all of
        these letters, in any order, to obtain a listing of objects
        of these types.  For example, <literal>\dit</> lists indexes
        and tables.  If <literal>+</literal> is
        appended to the command name, each object is listed with its
        physical size on disk and its associated description, if any.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only objects whose names match the pattern are listed.
        By default, only user-created objects are shown; supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>
-->
<para>
在这组命令中，字母<literal>E</literal>、<literal>i</literal>、<literal>m</literal>、
<literal>s</literal>、<literal>t</literal>和<literal>v</literal>
分别代表外部表、索引、物化视图、序列、表和视图。
你可以以任意的顺序声明任意或所有这些字母，获取这些类型的对象的列表。
例如，<literal>\dit</>列出索引和表。如果在命令名上附加了<literal>+</literal>，
那么每个对象都和它在磁盘上的物理尺寸和与之相关的描述一起列出，如果有。
如果声明了<replaceable class="parameter">pattern</replaceable>，
那么只列出匹配该模式的对象。缺省的，只显示用户创建的对象；
提供一个模式或<literal>S</literal>修饰符包含系统对象。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\des[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists foreign servers (mnemonic: <quote>external
        servers</quote>).
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only those servers whose name matches the pattern
        are listed.  If the form <literal>\des+</literal> is used, a
        full description of each server is shown, including the
        server's ACL, type, version, options, and description.
        </para>
-->
<para>
列出外部服务器（助记：<quote>扩展服务器</quote>）。如果声明了
<replaceable class="parameter">pattern</replaceable>，
那么只列出匹配该模式的服务器。如果使用了<literal>\des+</literal>格式，
则显示每个服务器的全部描述，包括服务器的ACL、类型、版本、选项和描述。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\det[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists foreign tables (mnemonic: <quote>external tables</quote>).
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only entries whose table name or schema name matches
        the pattern are listed.  If the form <literal>\det+</literal>
        is used, generic options and the foreign table description
        are also displayed.
        </para>
-->
<para>
列出外部表（助记：<quote>扩展表</quote>）。如果声明了
<replaceable class="parameter">pattern</replaceable>，
那么只列出表名或模式名匹配该模式的记录。如果使用了<literal>\det+</literal>
格式，那么也显示通用选项和外部表描述。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\deu[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists user mappings (mnemonic: <quote>external
        users</quote>).
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only those mappings whose user names match the
        pattern are listed.  If the form <literal>\deu+</literal> is
        used, additional information about each mapping is shown.
        </para>
-->
<para>
列出用户映射（助记：<quote>外部用户</quote>）。如果声明了
<replaceable class="parameter">pattern</replaceable>，
那么只列出用户名匹配该模式的那些映射。如果使用了<literal>\deu+</literal>格式，
那么也显示关于每个映射的额外的信息。
</para>

        <caution>
        <!--
<para>
        <literal>\deu+</literal> might also display the user name and
        password of the remote user, so care should be taken not to
        disclose them.
        </para>
-->
<para>
<literal>\deu+</literal>可能也显示远程用户的用户名和密码，
所以要小心不要透漏它们。
</para>
        </caution>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dew[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists foreign-data wrappers (mnemonic: <quote>external
        wrappers</quote>).
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only those foreign-data wrappers whose name matches
        the pattern are listed.  If the form <literal>\dew+</literal>
        is used, the ACL, options, and description of the foreign-data
        wrapper are also shown.
        </para>
-->
<para>
列出外部数据封装器（助记：<quote>扩展的封装器</quote>）。如果声明了
<replaceable class="parameter">pattern</replaceable>，
那么只显示名字匹配该模式的外部数据封装器。如果使用了<literal>\dew+</literal>格式，
则外部数据封装器的ACL、选项和描述也显示。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\df[antwS+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <!--
<para>
        Lists functions, together with their arguments, return types, and
        function types, which are classified as <quote>agg</> (aggregate),
        <quote>normal</>, <quote>trigger</>, or <quote>window</>.
        To display only functions
        of specific type(s), add the corresponding letters <literal>a</>,
        <literal>n</>, <literal>t</>, or <literal>w</> to the command.
        If <replaceable
        class="parameter">pattern</replaceable> is specified, only
        functions whose names match the pattern are shown.
        By default, only user-created
        objects are shown; supply a pattern or the <literal>S</literal>
        modifier to include system objects.
        If the form <literal>\df+</literal> is used, additional information
        about each function is shown, including security classification,
        volatility, owner, language, source code and description.
        </para>
-->
<para>
列出分类为<quote>agg</> (aggregate)、<quote>normal</>、<quote>trigger</>或
<quote>window</>的函数和它们的参数、返回类型和函数类型。
要想只显示指定类型的函数，在命令中添加对应的字母<literal>a</>、
<literal>n</>、<literal>t</>或<literal>w</>。如果声明了
<replaceable class="parameter">pattern</replaceable>，
那么只显示名字匹配该模式的函数。
缺省的，只显示用户创建的对象；提供一个模式或<literal>S</literal>
修饰符包含系统对象。如果使用了<literal>\df+</literal>格式，
则也显示关于每个函数的额外信息，包括安全等级、波动性、所有者、
语言、源代码和描述。
</para>

        <tip>
        <!--
<para>
        To look up functions taking arguments or returning values of a specific
        type, use your pager's search capability to scroll through the
        <literal>\df</> output.
        </para>
-->
<para>
要查找接受或者返回特定类型的函数，使用你的分页器搜索功能来滚动<literal>\df</>的输出。
</para>
        </tip>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dF[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
         Lists text search configurations.
         If <replaceable class="parameter">pattern</replaceable> is specified,
         only configurations whose names match the pattern are shown.
         If the form <literal>\dF+</literal> is used, a full description of
         each configuration is shown, including the underlying text search
         parser and the dictionary list for each parser token type.
        </para>
-->
<para>
列出文本搜索配置。如果声明了<replaceable class="parameter">pattern</replaceable>，
那么只显示名字匹配该模式的配置。如果使用了<literal>\dF+</literal>格式，
则显示每个配置的全部描述，包括底层的文本搜索解析器和为每个解析器标记类型列出的字典。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFd[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
         Lists text search dictionaries.
         If <replaceable class="parameter">pattern</replaceable> is specified,
         only dictionaries whose names match the pattern are shown.
         If the form <literal>\dFd+</literal> is used, additional information
         is shown about each selected dictionary, including the underlying
         text search template and the option values.
        </para>
-->
<para>
列出文本搜索字典。如果声明了<replaceable class="parameter">pattern</replaceable>，
那么只显示名字匹配该模式的字典。如果使用了<literal>\dFd+</literal>格式，
则显示关于每个选中的字典的额外信息，包括底层的文本搜索模板和选项值。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFp[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
         Lists text search parsers.
         If <replaceable class="parameter">pattern</replaceable> is specified,
         only parsers whose names match the pattern are shown.
         If the form <literal>\dFp+</literal> is used, a full description of
         each parser is shown, including the underlying functions and the
         list of recognized token types.
        </para>
-->
<para>
列出文本搜索解析器。如果声明了<replaceable class="parameter">pattern</replaceable>，
只显示名字匹配该模式的解析器。如果使用了<literal>\dFp+</literal>格式，
则显示每个解析器的全部描述，包括底层的函数和识别的标记类型的列表。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFt[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
         Lists text search templates.
         If <replaceable class="parameter">pattern</replaceable> is specified,
         only templates whose names match the pattern are shown.
         If the form <literal>\dFt+</literal> is used, additional information
         is shown about each template, including the underlying function names.
        </para>
-->
<para>
列出文本搜索模板。如果声明了<replaceable class="parameter">pattern</replaceable>，
则只显示名字匹配该模式的模板。如果使用了<literal>\dFt+</literal>格式，
则显示关于每个模板的额外的信息，包括底层的函数名。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dg[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists database roles.
        (Since the concepts of <quote>users</> and <quote>groups</> have been
        unified into <quote>roles</>, this command is now equivalent to
        <literal>\du</literal>.)
        If <replaceable class="parameter">pattern</replaceable> is specified,
        only those roles whose names match the pattern are listed.
        If the form <literal>\dg+</literal> is used, additional information
        is shown about each role; currently this adds the comment for each
        role.
        </para>
-->
<para>
列出数据库角色。（因为<quote>用户</>和<quote>组</>的概念已经统一成<quote>角色</>，
所以这个命令现在等于<literal>\du</literal>。）如果声明了
<replaceable class="parameter">pattern</replaceable>，则只列出名字匹配该模式的那些角色。
如果使用了<literal>\dg+</literal>格式，则显示关于每个角色的额外信息；
目前这增加了每个角色的注释。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dl</literal></term>
        <listitem>
        <!--
<para>
        This is an alias for <command>\lo_list</command>, which shows a
        list of large objects.
        </para>
-->
<para>
<command>\lo_list</command>的别名，显示一个大对象的列表。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dL[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists procedural languages. If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only languages whose names match the pattern are listed.
        By default, only user-created languages
        are shown; supply the <literal>S</literal> modifier to include system
        objects. If <literal>+</literal> is appended to the command name, each
        language is listed with its call handler, validator, access privileges,
        and whether it is a system object.
        </para>
-->
<para>
列出过程语言。如果声明了<replaceable class="parameter">pattern</replaceable>，
则只列出名字匹配该模式的语言。缺省的，只显示用户创建的语言；
提供<literal>S</literal>修饰符包含系统对象。如果在命令名上附加了<literal>+</literal>，
那么每个语言的调用处理器、验证器、访问权限和它是否是一个系统对象也和语言一起列出。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dn[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <!--
<para>
        Lists schemas (namespaces). If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only schemas whose names match the pattern are listed.
        By default, only user-created objects are shown; supply a
        pattern or the <literal>S</literal> modifier to include system objects.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated permissions and description, if any.
        </para>
-->
<para>
列出模式(名字空间)。如果声明了<replaceable class="parameter">pattern</replaceable>，
那么只列出匹配模式的模式名。缺省的，只显示用户创建的对象；提供一个模式或
<literal>S</literal>修饰符包含系统对象。如果在命令名上附加了<literal>+</literal>，
那么每个对象都和与之相关的权限和注释一起列出(如果有的话)。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\do[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists operators with their operand and result types.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only operators whose names match the pattern are listed.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        If <literal>+</literal> is appended to the command name,
        additional information about each operator is shown, currently just
        the name of the underlying function.
        </para>
-->
<para>
列出操作符，以及它们的操作数和结果类型。如果声明了
<replaceable class="parameter">pattern</replaceable>，那么只显示匹配模式的操作符。
缺省的，只显示用户创建的对象；提供一个模式或<literal>S</literal>
修饰符包含系统对象。如果命令名后面附加了<literal>+</literal>，
那么也显示关于每个操作符的信息，当前只显示底层函数的名字。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dO[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists collations.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only collations whose names match the pattern are
        listed.  By default, only user-created objects are shown;
        supply a pattern or the <literal>S</literal> modifier to
        include system objects.  If <literal>+</literal> is appended
        to the command name, each collation is listed with its associated
        description, if any.
        Note that only collations usable with the current database's encoding
        are shown, so the results may vary in different databases of the
        same installation.
        </para>
-->
<para>
列出排序规则。如果声明了<replaceable class="parameter">pattern</replaceable>，
则只列出名字匹配该模式的排序规则。缺省的，只显示用户创建的对象；
提供一个模式或<literal>S</literal>修饰符包含系统对象。如果在命令名上附加了
<literal>+</literal>，则每个排序规则与和它相关的描述一起列出，如果有的话。
请注意，只显示可用于当前数据库的编码的排序规则，所以相同安装的不同数据库的结果可能不同。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dp [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists tables, views and sequences with their
        associated access privileges.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only tables, views and sequences whose names match the
        pattern are listed.
        </para>
-->
<para>
列出表、视图和序列和它们相关的访问权限。如果声明了
<replaceable class="parameter">pattern</replaceable>，
则只列出名字匹配该模式的表、视图和序列。
</para>

        <!--
<para>
        The <xref linkend="sql-grant"> and
        <xref linkend="sql-revoke">
        commands are used to set access privileges.  The meaning of the
        privilege display is explained under
        <xref linkend="sql-grant">.
        </para>
-->
<para>
<xref linkend="sql-grant">和<xref linkend="sql-revoke">
命令用于设置访问权限。权限显示的含义在<xref linkend="sql-grant">中解释。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\drds [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">role-pattern</replaceable></link> [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">database-pattern</replaceable></link> ] ]</literal></term>
        <listitem>
        <!--
<para>
        Lists defined configuration settings.  These settings can be
        role-specific, database-specific, or both.
        <replaceable>role-pattern</replaceable> and
        <replaceable>database-pattern</replaceable> are used to select
        specific roles and databases to list, respectively.  If omitted, or if
        <literal>*</> is specified, all settings are listed, including those
        not role-specific or database-specific, respectively.
        </para>
-->
<para>
列出定义的配置设置。这些设置可以是角色特定的、数据库特定的，或两者都有。
<replaceable>role-pattern</replaceable>和<replaceable>database-pattern</replaceable>
分别用于选择要列出的特定角色和数据库。如果省略了，或者声明了<literal>*</>，
那么列出所有设置，包括那些非角色特定的或非数据库特定的。
</para>

        <!--
<para>
        The <xref linkend="sql-alterrole"> and
        <xref linkend="sql-alterdatabase">
        commands are used to define per-role and per-database configuration
        settings.
        </para>
-->
<para>
<xref linkend="sql-alterrole">和<xref linkend="sql-alterdatabase">
命令用于定义每用户和每数据库配置设置。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dT[S+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists data types.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only types whose names match the pattern are listed.
        If <literal>+</literal> is appended to the command name, each type is
        listed with its internal name and size, its allowed values
        if it is an <type>enum</> type, and its associated permissions.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>
-->
<para>
列出数据类型。如果声明了<replaceable class="parameter">pattern</replaceable>，
则只列出名字匹配该模式的类型。如果在命令名上附加了<literal>+</literal>，
那么每个类型和它的内部名字和尺寸、它允许的值（如果它是<type>enum</>类型）
和它相关的权限一起列出。缺省的，只显示用户创建的对象；提供一个模式或
<literal>S</literal>修饰符包含系统对象。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\du[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists database roles.
        (Since the concepts of <quote>users</> and <quote>groups</> have been
        unified into <quote>roles</>, this command is now equivalent to
        <literal>\dg</literal>.)
        If <replaceable class="parameter">pattern</replaceable> is specified,
        only those roles whose names match the pattern are listed.
        If the form <literal>\du+</literal> is used, additional information
        is shown about each role; currently this adds the comment for each
        role.
        </para>
-->
<para>
列出数据库角色。（因为<quote>用户</>和<quote>组</>的概念已经统一成<quote>角色</>，
所以这个命令现在等于<literal>\du</literal>。）如果声明了
<replaceable class="parameter">pattern</replaceable>，则只列出名字匹配该模式的那些角色。
如果使用了<literal>\du+</literal>格式，则显示关于每个角色的额外信息；
目前这增加了每个角色的注释。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dx[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists installed extensions.
        If <replaceable class="parameter">pattern</replaceable>
        is specified, only those extensions whose names match the pattern
        are listed.
        If the form <literal>\dx+</literal> is used, all the objects belonging
        to each matching extension are listed.
        </para>
-->
<para>
列出安装了的扩展。如果声明了<replaceable class="parameter">pattern</replaceable>，
则只列出那些名字匹配该模式的扩展。如果使用了<literal>\dx+</literal>格式，
则列出所有属于每个匹配的扩展的对象。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dy[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists event triggers.
        If <replaceable class="parameter">pattern</replaceable>
        is specified, only those event triggers whose names match the pattern
        are listed.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated description.
        </para>
-->
<para>
列出事件触发器。如果声明了<replaceable class="parameter">pattern</replaceable>，
则只列出那些名字匹配该模式的事件触发器。如果在命令名上附加了<literal>+</literal>，
则每个对象都和与其相关的描述一起列出。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\e</literal> <!-- or -->或 <literal>\edit</> <literal> <optional> <replaceable class="parameter">filename</> </optional> <optional> <replaceable class="parameter">line_number</> </optional> </literal></term>

        <listitem>
        <!--
<para>
        If <replaceable class="parameter">filename</replaceable> is
        specified, the file is edited; after the editor exits, its
        content is copied back to the query buffer. If no <replaceable
        class="parameter">filename</replaceable> is given, the current query
        buffer is copied to a temporary file which is then edited in the same
        fashion.
        </para>
-->
<para>
如果声明了<replaceable class="parameter">filename</replaceable>，
则编辑此文件并且在编辑器退出后将其内容拷贝回查询缓冲区。如果没有给出
<replaceable class="parameter">filename</replaceable>，
则把当前查询缓冲区内容拷贝到一个临时文件然后以相同方式编辑。
</para>

        <!--
<para>
        The new query buffer is then re-parsed according to the normal
        rules of <application>psql</application>, where the whole buffer
        is treated as a single line. (Thus you cannot make scripts this
        way. Use <command>\i</command> for that.) This means that
        if the query ends with (or contains) a semicolon, it is
        immediately executed. Otherwise it will merely wait in the
        query buffer; type semicolon or <literal>\g</> to send it, or
        <literal>\r</> to cancel.
        </para>
-->
<para>
然后根据一般的<application>psql</application>规则重新分析查询缓冲区，
这时整个缓冲区当作一个单行，因此你无法用这个方法制作脚本(用<command>\i</command>)。
这意味着如果该查询以分号结尾(或者包含分号)，它就会马上被执行。
否则它只是在查询缓冲区里等待；分号或<literal>\g</>发送，或<literal>\r</>取消。
</para>

        <!--
<para>
        If a line number is specified, <application>psql</application> will
        position the cursor on the specified line of the file or query buffer.
        Note that if a single all-digits argument is given,
        <application>psql</application> assumes it is a line number,
        not a file name.
        </para>
-->
<para>
如果声明了行号，<application>psql</application>将在文件或查询缓冲区的指定行上定位游标。
请注意，如果给出了一个数字参数，<application>psql</application>将假设它是一个行号，
而不是文件名。
</para>

        <tip>
        <!--
<para>
        See under <xref linkend="app-psql-environment"
        endterm="app-psql-environment-title"> for how to configure and
        customize your editor.
        </para>
-->
<para>
参阅下面的<xref linkend="app-psql-environment" endterm="app-psql-environment-title">
获取如何配置和自定义你的编辑器。
</para>
        </tip>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\echo <replaceable class="parameter">text</replaceable> [ ... ]</literal></term>
        <listitem>
        <!--
<para>
        Prints the arguments to the standard output, separated by one
        space and followed by a newline. This can be useful to
        intersperse information in the output of scripts. For example:
<programlisting>
=&gt; <userinput>\echo `date`</userinput>
Tue Oct 26 21:40:57 CEST 1999
</programlisting>
        If the first argument is an unquoted <literal>-n</literal> the trailing
        newline is not written.
        </para>
-->
<para>
向标准输出打印参数，用一个空格分隔并且最后跟着一个新行。
这个特性在显示脚本的输出时会有用。例如：
<programlisting>
=&gt; <userinput>\echo `date`</userinput>
Tue Oct 26 21:40:57 CEST 1999
</programlisting>
如果第一个参数是一个无引号的<literal>-n</literal>，那么不会写出结尾的新行。
</para>

        <tip>
        <!--
<para>
        If you use the <command>\o</command> command to redirect your
        query output you might wish to use <command>\qecho</command>
        instead of this command.
        </para>
-->
<para>
如果使用<command>\o</command>命令重定向查询的输出，
你可能会用<command>\qecho</command>取代这条命令。
</para>
        </tip>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\ef <optional> <replaceable class="parameter">function_description</> <optional>  <replaceable class="parameter">line_number</> </optional> </optional> </literal></term>

        <listitem>
        <!--
<para>
         This command fetches and edits the definition of the named function,
         in the form of a <command>CREATE OR REPLACE FUNCTION</> command.
         Editing is done in the same way as for <literal>\edit</>.
         After the editor exits, the updated command waits in the query buffer;
         type semicolon or <literal>\g</> to send it, or <literal>\r</>
         to cancel.
        </para>
-->
<para>
这个命令抓取并编辑命名函数的定义，以<command>CREATE OR REPLACE FUNCTION</>
命令的形式。编辑处理的方式和<literal>\edit</>相同。在编辑退出之后，
更新的命令等待在查询缓冲区中；分号或<literal>\g</>发送，或<literal>\r</>取消。
</para>

        <!--
<para>
         The target function can be specified by name alone, or by name
         and arguments, for example <literal>foo(integer, text)</>.
         The argument types must be given if there is more
         than one function of the same name.
        </para>
-->
<para>
目标函数可以只通过名字指定，或者通过名字和参数指定，例如
<literal>foo(integer, text)</>。如果有多个相同名字的函数，
则必须给出参数类型。
</para>

        <!--
<para>
         If no function is specified, a blank <command>CREATE FUNCTION</>
         template is presented for editing.
        </para>
-->
<para>
如果没有指定函数，则提供一个空白的<command>CREATE FUNCTION</>模板以供编辑。
</para>

        <!--
<para>
        If a line number is specified, <application>psql</application> will
        position the cursor on the specified line of the function body.
        (Note that the function body typically does not begin on the first
        line of the file.)
        </para>
-->
<para>
如果声明了行号，<application>psql</application>将在函数体的指定行定位游标。
（请注意，函数体通常不在文件的第一行开始。）
</para>

        <tip>
        <!--
<para>
        See under <xref linkend="app-psql-environment"
        endterm="app-psql-environment-title"> for how to configure and
        customize your editor.
        </para>
-->
<para>
参阅下面的<xref linkend="app-psql-environment" endterm="app-psql-environment-title">
获取如何配置和自定义你的编辑器的信息。
</para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\encoding [ <replaceable class="parameter">encoding</replaceable> ]</literal></term>

        <listitem>
        <!--
<para>
        Sets the client character set encoding.  Without an argument, this command
        shows the current encoding.
        </para>
-->
<para>
设置客户端字符编码方式。不带参数时，这条命令显示当前的编码方式。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\f [ <replaceable class="parameter">string</replaceable> ]</literal></term>

        <listitem>
        <!--
<para>
        Sets the field separator for unaligned query output. The default
        is the vertical bar (<literal>|</literal>). See also
        <command>\pset</command> for a generic way of setting output
        options.
        </para>
-->
<para>
为不对齐的查询输出设置域分隔符。缺省时是竖条(<literal>|</literal>)。
参阅<command>\pset</command>获取设置输出选项的通用方法。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\g [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <term><literal>\g [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
        Sends the current query input buffer to the server, and
        optionally stores the query's output in <replaceable
        class="parameter">filename</replaceable> or pipes the output
        to the shell command <replaceable
        class="parameter">command</replaceable>.  The file or command is
        written to only if the query successfully returns zero or more tuples,
        not if the query fails or is a non-data-returning SQL command.
        </para>
-->
<para>
把当前的查询输入缓冲区的内容发送给服务器并且把查询的输出存储到可选的
<replaceable class="parameter">filename</replaceable>
或者把输出定向到shell命令<replaceable class="parameter">command</replaceable>。
文件或命令只在查询成功返回零个或更多元组时写入，
查询失败或者是一个非数据返回的SQL命令时不写入。
</para>
        <!--
<para>
        A bare <literal>\g</literal> is essentially equivalent to a semicolon.
        A <literal>\g</literal> with argument is a <quote>one-shot</quote>
        alternative to the <command>\o</command> command.
        </para>
-->
<para>
单独一个<literal>\g</literal>实际上等效于一个分号。一个带有参数的
<literal>\g</literal>是<quote>一次性</quote>的<command>\o</command>命令的代用品。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\gset [ <replaceable class="parameter">prefix</replaceable> ]</literal></term>

        <listitem>
        <!--
<para>
         Sends the current query input buffer to the server and stores the
         query's output into <application>psql</> variables (see <xref
         linkend="APP-PSQL-variables" endterm="APP-PSQL-variables-title">).
         The query to be executed must return exactly one row.  Each column of
         the row is stored into a separate variable, named the same as the
         column.  For example:
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset</userinput>
=&gt; <userinput>\echo :var1 :var2</userinput>
hello 10
</programlisting>
        </para>
-->
<para>
把当前的查询输入缓冲区发送到服务器并将查询输出存储到<application>psql</>变量
（参阅<xref linkend="APP-PSQL-variables" endterm="APP-PSQL-variables-title">）。
要执行的查询必须正好返回一行。该行的每个字段存储到单独的变量中，
和字段的命名相同。例如：
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset</userinput>
=&gt; <userinput>\echo :var1 :var2</userinput>
hello 10
</programlisting>
</para>
        <!--
<para>
         If you specify a <replaceable class="parameter">prefix</replaceable>,
         that string is prepended to the query's column names to create the
         variable names to use:
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset result_</userinput>
=&gt; <userinput>\echo :result_var1 :result_var2</userinput>
hello 10
</programlisting>
        </para>
-->
<para>
如果声明了<replaceable class="parameter">prefix</replaceable>，
该字符串成为查询的字段名的前缀，创建变量名：
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset result_</userinput>
=&gt; <userinput>\echo :result_var1 :result_var2</userinput>
hello 10
</programlisting>
</para>
        <!--
<para>
         If a column result is NULL, the corresponding variable is unset
         rather than being set.
        </para>
-->
<para>
如果一个字段结果为NULL，那么对应的变量是未设置的。
</para>
        <!--
<para>
         If the query fails or does not return one row,
         no variables are changed.
        </para>
-->
<para>
如果查询失败或没有返回行，那么没有变量改变。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\h</literal> <!-- or -->或 <literal>\help</literal> <literal>[ <replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
        Gives syntax help on the specified <acronym>SQL</acronym>
        command. If <replaceable class="parameter">command</replaceable>
        is not specified, then <application>psql</application> will list
        all the commands for which syntax help is available. If
        <replaceable class="parameter">command</replaceable> is an
        asterisk (<literal>*</literal>), then syntax help on all
        <acronym>SQL</acronym> commands is shown.
        </para>
-->
<para>
给出指定<acronym>SQL</acronym>命令的语法帮助。如果没有给出
<replaceable class="parameter">command</replaceable>，
那么<application>psql</application>将列出可获得语法帮助的所有命令。
如果<replaceable class="parameter">command</replaceable>是一个星号
(<literal>*</literal>) ，则显示所有<acronym>SQL</acronym>命令的语法帮助。
</para>

        <note>
        <!--
<para>
        To simplify typing, commands that consists of several words do
        not have to be quoted. Thus it is fine to type <userinput>\help
        alter table</userinput>.
        </para>
-->
<para>
为简化击键，包含多个单字的命令不需要引起。因此键入
<userinput>\help alter table</userinput>是正确的。
</para>
        </note>
        </listitem>
      </varlistentry>


      <varlistentry>
        <!-- 
        <term><literal>\H</literal> or <literal>\html</literal></term>
        -->
        <term><literal>\H</literal>或<literal>\html</literal></term>
        <listitem>
        <!--
<para>
        Turns on <acronym>HTML</acronym> query output format. If the
        <acronym>HTML</acronym> format is already on, it is switched
        back to the default aligned text format. This command is for
        compatibility and convenience, but see <command>\pset</command>
        about setting other output options.
        </para>
-->
<para>
打开<acronym>HTML</acronym>查询输出格式。如果<acronym>HTML</acronym>格式已经打开，
则切换回缺省的对齐的文本格式。这个命令是为了兼容和方便，
参阅<command>\pset</command>获取设置其它输出选项的内容。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <!-- 
        <term><literal>\i</literal> or <literal>\include</literal> <replaceable class="parameter">filename</replaceable></term>
        -->
        <term><literal>\i</literal>或<literal>\include</literal> <replaceable class="parameter">filename</replaceable></term>
        <listitem>
        <!--
<para>
        Reads input from the file <replaceable
        class="parameter">filename</replaceable> and executes it as
        though it had been typed on the keyboard.
        </para>
-->
<para>
从文件<replaceable class="parameter">filename</replaceable>
中读取并把其内容当作从键盘输入的那样执行查询。
</para>
        <note>
        <!--
<para>
        If you want to see the lines on the screen as they are read you
        must set the variable <varname>ECHO</varname> to
        <literal>all</literal>.
        </para>
-->
<para>
如果你想在屏幕上看到读入的行，就必须将变量<varname>ECHO</varname>
设置为<literal>all</literal>。
</para>
        </note>
        </listitem>
      </varlistentry>


      <varlistentry>
        <!-- 
        <term><literal>\ir</literal> or <literal>\include_relative</literal> <replaceable class="parameter">filename</replaceable></term>
        -->
        <term><literal>\ir</literal>或<literal>\include_relative</literal> <replaceable class="parameter">filename</replaceable></term>
        <listitem>
        <!--
<para>
        The <literal>\ir</> command is similar to <literal>\i</>, but resolves
        relative file names differently.  When executing in interactive mode,
        the two commands behave identically.  However, when invoked from a
        script, <literal>\ir</literal> interprets file names relative to the
        directory in which the script is located, rather than the current
        working directory.
        </para>
-->
<para>
<literal>\ir</>命令类似于<literal>\i</>，但是对相关文件名的解析不同。
当在交互模式执行时，两个命令的表现相同。不过，当在脚本中调用时，
<literal>\ir</literal>解释文件名关系为脚本所在的目录，而不是当前工作目录。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <!--
<term><literal>\l[+]</literal> or <literal>\list[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
-->
<term><literal>\l[+]</literal> 或 <literal>\list[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        List the databases in the server and show their names, owners,
        character set encodings, and access privileges.
        If <replaceable class="parameter">pattern</replaceable> is specified,
        only databases whose names match the pattern are listed.
        If <literal>+</literal> is appended to the command name, database
        sizes, default tablespaces, and descriptions are also displayed.
        (Size information is only available for databases that the current
        user can connect to.)
        </para>
-->
<para>
列出服务器上的数据库并显示它们的名字、所有者、字符集编码和访问权限。
如果声明了<replaceable class="parameter">pattern</replaceable>，
则只列出名字匹配该模式的数据库。如果在命令名称后面加一个<literal>+</literal>，
则也显示数据库尺寸、缺省表空间和描述。（尺寸信息只在当前用户可以联接的数据库上可用。）
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_export <replaceable class="parameter">loid</replaceable> <replaceable class="parameter">filename</replaceable></literal></term>

        <listitem>
        <!--
<para>
        Reads the large object with <acronym>OID</acronym> <replaceable
        class="parameter">loid</replaceable> from the database and
        writes it to <replaceable
        class="parameter">filename</replaceable>. Note that this is
        subtly different from the server function
        <function>lo_export</function>, which acts with the permissions
        of the user that the database server runs as and on the server's
        file system.
        </para>
-->
<para>
从数据库里读取<acronym>OID</acronym>为<replaceable class="parameter">loid</replaceable>
的大对象并把它写到<replaceable class="parameter">filename</replaceable>里。
注意这个功能与服务器函数<function>lo_export</function>有些微小的区别，
后者运行时带着运行数据库服务器的用户权限，而且是在服务器的文件系统上。
</para>
        <tip>
        <!--
<para>
        Use <command>\lo_list</command> to find out the large object's
        <acronym>OID</acronym>.
        </para>
-->
<para>
使用<command>\lo_list</command>查看大对象的<acronym>OID</acronym>。
</para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_import <replaceable class="parameter">filename</replaceable> [ <replaceable class="parameter">comment</replaceable> ]</literal></term>

        <listitem>
        <!--
<para>
        Stores the file into a <productname>PostgreSQL</productname>
        large object. Optionally, it associates the given
        comment with the object. Example:
<programlisting>
foo=&gt; <userinput>\lo_import '/home/peter/pictures/photo.xcf' 'a picture of me'</userinput>
lo_import 152801
</programlisting>
        The response indicates that the large object received object
        ID 152801, which can be used to access the newly-created large
        object in the future. For the sake of readability, it is
        recommended to always associate a human-readable comment with
        every object. Both OIDs and comments can be viewed with the
        <command>\lo_list</command> command.
        </para>
-->
<para>
把文件存储为一个<productname>PostgreSQL</productname>大对象。
可以带着一个该对象的注解选项。例如：
<programlisting>
foo=&gt; <userinput>\lo_import '/home/peter/pictures/photo.xcf' 'a picture of me'</userinput>
lo_import 152801
</programlisting>
响应表明此大对象得到一个对象标识 152801 ，可以用来在后面访问新创建的大对象。
出于可读性的目的，建议总是给每个对象关联一个人类可读的注解。
可以用<command>\lo_list</command>命令看到OID和注解。
</para>

        <!--
<para>
        Note that this command is subtly different from the server-side
        <function>lo_import</function> because it acts as the local user
        on the local file system, rather than the server's user and file
        system.
        </para>
-->
<para>
注意这条命令与服务器端的<function>lo_import</function>有一些区别，
因为这条命令是本地用户在本地文件系统上操作，
而不是以服务器用户在服务器文件系统上操作。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_list</literal></term>
        <listitem>
        <!--
<para>
        Shows a list of all <productname>PostgreSQL</productname>
        large objects currently stored in the database,
        along with any comments provided for them.
        </para>
-->
<para>
显示一个目前存储在该数据库里的所有<productname>PostgreSQL</productname>
大对象和为它们提供的任意注解的列表。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_unlink <replaceable class="parameter">loid</replaceable></literal></term>

        <listitem>
        <!--
<para>
        Deletes the large object with <acronym>OID</acronym>
        <replaceable class="parameter">loid</replaceable> from the
        database.
        </para>
-->
<para>
从数据库里删除<acronym>OID</acronym>为
<replaceable class="parameter">loid</replaceable>的大对象。
</para>

        <tip>
        <!--
<para>
        Use <command>\lo_list</command> to find out the large object's
        <acronym>OID</acronym>.
        </para>
-->
<para>
使用<command>\lo_list</command>查找大对象的<acronym>OID</acronym>。
</para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <!-- 
        <term><literal>\o</literal> or <literal>\out [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <term><literal>\o</literal> or <literal>\out [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
        -->
        <term><literal>\o</literal>或<literal>\out [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <term><literal>\o</literal>或<literal>\out [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
        Arranges to save future query results to the file <replaceable
        class="parameter">filename</replaceable> or pipe future results
        to the shell command <replaceable
        class="parameter">command</replaceable>. If no argument is
        specified, the query output is reset to the standard output.
        </para>
-->
<para>
把后面的查询结果分类保存到文件<replaceable class="parameter">filename</replaceable>
里或者把后面的查询结果重定向到shell命令
<replaceable class="parameter">command</replaceable>。
如果没有声明参数，查询输出将被重置为标准输出。
</para>

        <!--
<para><quote>Query results</quote> includes all tables, command
        responses, and notices obtained from the database server, as
        well as output of various backslash commands that query the
        database (such as <command>\d</command>), but not error
        messages.
        </para>
-->
<para>
<quote>查询结果</quote>包括所有表，命令响应和从数据库服务器来的提示，
同样还有各种各样查询数据库的反斜杠命令的输出(如<command>\d</command>)，
但是没有错误消息。
</para>

        <tip>
        <!--
<para>
        To intersperse text output in between query results, use
        <command>\qecho</command>.
        </para>
-->
<para>
要分散查询结果之间的文本输出，用<command>\qecho</command>。
</para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <!--
        <term><literal>\p</literal> or <literal>\print</literal></term>
        -->
        <term><literal>\p</literal>或<literal>\print</literal></term>
        <listitem>
        <!--
<para>
        Print the current query buffer to the standard output.
        </para>
-->
<para>
打印当前查询缓冲区到标准输出。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\password [ <replaceable class="parameter">username</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
        Changes the password of the specified user (by default, the current
        user).  This command prompts for the new password, encrypts it, and
        sends it to the server as an <command>ALTER ROLE</> command.  This
        makes sure that the new password does not appear in cleartext in the
        command history, the server log, or elsewhere.
        </para>
-->
<para>
更改指定用户的口令，缺省为当前用户。该命令将提示口令输入，
然后将加密过的口令使用<command>ALTER ROLE</>之类的命令发送给服务器。
这可以保证新口令不会以明文形式出现在命令历史、服务器日志、或其他什么地方。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\prompt [ <replaceable class="parameter">text</replaceable> ] <replaceable class="parameter">name</replaceable></literal></term>
        <listitem>
        <!--
<para>
         Prompts the user to supply text, which is assigned to the variable
         <replaceable class="parameter">name</>.
         An optional prompt string, <replaceable
         class="parameter">text</>, can be specified.  (For multiword
         prompts, surround the text with single quotes.)
        </para>
-->
<para>
提示用户提供文本，分配给变量<replaceable class="parameter">name</>。
可以声明可选的提示字符串<replaceable class="parameter">text</>。
（对于多个字的提示，用单引号包围文本。）
</para>

        <!--
<para>
         By default, <literal>\prompt</> uses the terminal for input and
         output.  However, if the <option>-f</> command line switch was
         used, <literal>\prompt</> uses standard input and standard output.
        </para>
-->
<para>
缺省的，<literal>\prompt</>使用终端输入和输出。不过，如果使用了<option>-f</>
命令行开关，<literal>\prompt</>使用标准的输入和输出。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\pset [ <replaceable class="parameter">option</replaceable> [ <replaceable class="parameter">value</replaceable> ] ]</literal></term>

        <listitem>
        <!--
<para>
        This command sets options affecting the output of query result tables.
        <replaceable class="parameter">option</replaceable>
        indicates which option is to be set. The semantics of
        <replaceable class="parameter">value</replaceable> vary depending
        on the selected option.  For some options, omitting <replaceable
        class="parameter">value</replaceable> causes the option to be toggled
        or unset, as described under the particular option.  If no such
        behavior is mentioned, then omitting
        <replaceable class="parameter">value</replaceable> just results in
        the current setting being displayed.
        </para>
-->
<para>
这条命令设置影响查询结果表输出的选项。<replaceable class="parameter">option</replaceable>
描述要设置的选项是哪一个。<replaceable class="parameter">value</replaceable>
的语意也取决于选取的选项。对于一些选项，省略<replaceable
        class="parameter">value</replaceable>导致选项切换或复位，
就像特定的选项中描述的那样。如果没有提及这样的行为，那么省略
<replaceable class="parameter">value</replaceable>只会导致显示当前的设置。
</para>
<!-- 
        <para>
        <command>\pset</command> without any arguments displays the current status
        of all printing options.
        </para>
-->
<para>
没有任何参数的<command>\pset</command>显示所有打印选项的当前状态。
</para>
<para>
        <!--
Adjustable printing options are:
-->
可调节的打印选项有：
        <variablelist>
          <varlistentry>
          <term><literal>border</literal></term>
          <listitem>
<!--
          <para>
          The <replaceable class="parameter">value</replaceable> must be a
          number. In general, the higher
          the number the more borders and lines the tables will have,
          but this depends on the particular format. In
          <acronym>HTML</acronym> format, this will translate directly
          into the <literal>border=...</literal> attribute; in the
          other formats only values 0 (no border), 1 (internal dividing lines),
          and 2 (table frame) make sense.
          <literal>latex</literal> and <literal>latex-longtable</literal>
          also support a <literal>border</literal> value of 3 which adds
          a dividing line between each row.
          </para>
-->
<para>
<replaceable class="parameter">value</replaceable>必须是一个数字。通常，
数字越大，表就有越宽的边界和越多的线，但是这个参数取决于实际的格式。
在<acronym>HTML</acronym>格式中，这个参数会直接翻译成<literal>border=...</literal>
属性，在其它的模式里，只有值 0(无边界)、1(内部分隔线)、2(表框架)有意义。
<literal>latex</literal>和<literal>latex-longtable</literal>
也支持<literal>border</literal>值为3，在每行之间添加一个分隔线。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>columns</literal></term>
          <listitem>
          <!--
<para>
          Sets the target width for the <literal>wrapped</> format, and also
          the width limit for determining whether output is wide enough to
          require the pager or switch to the vertical display in expanded auto
          mode.
          Zero (the default) causes the target width to be controlled by the
          environment variable <envar>COLUMNS</>, or the detected screen width
          if <envar>COLUMNS</> is not set.
          In addition, if <literal>columns</> is zero then the
          <literal>wrapped</> format only affects screen output.
          If <literal>columns</> is nonzero then file and pipe output is
          wrapped to that width as well.
          </para>
-->
<para>
为<literal>wrapped</>格式设置目标宽度，并且宽度限制决定输出是否太宽需要分页，
或在自动扩展模式下切换到垂直显示。0（缺省）代表目标宽度受到环境变量
<envar>COLUMNS</>的控制，或者如果没有设置<envar>COLUMNS</>，
则是受到检测到的屏幕宽度的限制。另外，如果<literal>columns</>为0，
那么<literal>wrapped</>格式只影响屏幕输出。如果<literal>columns</>非0，
那么字段和管道输出也包装为那个宽度。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>expanded</literal> (<!-- or -->或 <literal>x</literal>)</term>
          <listitem>
          <!--
<para>
          If <replaceable class="parameter">value</replaceable> is specified it
          must be either <literal>on</literal> or <literal>off</literal>, which
          will enable or disable expanded mode, or <literal>auto</literal>.
          If <replaceable class="parameter">value</replaceable> is omitted the
          command toggles between the on and off settings.  When expanded mode
          is enabled, query results are displayed in two columns, with the
          column name on the left and the data on the right. This mode is
          useful if the data wouldn't fit on the screen in the
          normal <quote>horizontal</quote> mode.  In the auto setting, the
          expanded mode is used whenever the query output is wider than the
          screen, otherwise the regular mode is used.  The auto setting is only
          effective in the aligned and wrapped formats.  In other formats, it
          always behaves as if the expanded mode is off.
          </para>
-->
<para>
如果声明了<replaceable class="parameter">value</replaceable>，则必须是
<literal>on</literal>或者<literal>off</literal>（这将启用或禁用扩展模式）
或者<literal>auto</literal>。如果省略了<replaceable class="parameter">value</replaceable>，
那么命令在正常和扩展格式之间切换。当打开扩展格式时，查询结果用两列显示，
字段名称在左、数据在右。这个模式在数据无法放进通常的<quote>水平</quote>
模式的屏幕时很有用。在自动设置模式下，扩展模式在查询输出比屏幕宽时使用，
否则使用正常模式。自动设置只在对齐和封装格式下有效。在其他格式下，
它总是表现的好像扩展模式为关闭一样。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>fieldsep</literal></term>
          <listitem>
          <!--
<para>
          Specifies the field separator to be used in unaligned output
          format. That way one can create, for example, tab- or
          comma-separated output, which other programs might prefer. To
          set a tab as field separator, type <literal>\pset fieldsep
          '\t'</literal>. The default field separator is
          <literal>'|'</literal> (a vertical bar).
          </para>
-->
<para>
声明在非对齐格式时的域分隔符。这样就可以创建其它程序希望的输出，
例如制表符或逗号分隔的输出。要设置制表符作为域分隔符，
键入<literal>\pset fieldsep '\t'</literal>。缺省域分隔符是
<literal>'|'</literal>(竖条符)。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>fieldsep_zero</literal></term>
          <listitem>
          <!--
<para>
          Sets the field separator to use in unaligned output format to a zero
          byte.
          </para>
-->
<para>
设置非对齐输出格式中使用的域分隔符为0字节。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>footer</literal></term>
          <listitem>
          <!--
<para>
          If <replaceable class="parameter">value</replaceable> is specified
          it must be either <literal>on</literal> or <literal>off</literal>
          which will enable or disable display of the table footer
          (the <literal>(<replaceable>n</> rows)</literal> count).
          If <replaceable class="parameter">value</replaceable> is omitted the
          command toggles footer display on or off.
          </para>
-->
<para>
如果声明了<replaceable class="parameter">value</replaceable>，
它必须是<literal>on</literal>或者<literal>off</literal>，
这将启用或禁用表的脚注的显示（<literal>(<replaceable>n</> rows)</literal>计数）。
如果省略了<replaceable class="parameter">value</replaceable>，
那么命令切换脚注显示为on或off。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>format</literal></term>
          <listitem>
          <!--
<para>
          Sets the output format to one of <literal>unaligned</literal>,
          <literal>aligned</literal>, <literal>wrapped</literal>,
          <literal>html</literal>,
          <literal>latex</literal> (uses <literal>tabular</literal>),
          <literal>latex-longtable</literal>, or
          <literal>troff-ms</literal>.
          Unique abbreviations are allowed.  (That would mean one letter
          is enough.)
          </para>
-->
<para>
设置输出格式为<literal>unaligned</literal>、<literal>aligned</literal>、
<literal>wrapped</literal>、<literal>html</literal>、<literal>latex</literal>
（使用<literal>tabular</literal>）、<literal>latex-longtable</literal>或
<literal>troff-ms</literal>之一。允许使用唯一缩写，这也意味着一个字母就够了。
</para>

          <!--
<para><literal>unaligned</> format writes all columns of a row on one
          line, separated by the currently active field separator. This
          is useful for creating output that might be intended to be read
          in by other programs (for example, tab-separated or comma-separated
          format).
          </para>
-->
<para>
<literal>unaligned</>(不对齐)格式把一条记录的所有字段都输出到一行，
用当前有效的域分隔符分隔。这主要用于生成那些要被其它程序读取的输出
(比如，制表符分隔或逗号分隔格式)。
</para>

          <!--
<para><literal>aligned</literal> format is the standard, human-readable,
          nicely formatted text output;  this is the default.
          </para>
-->
<para>
<literal>aligned</literal>(对齐)模式是标准的，人类可读的，
格式化好了的文本输出，也是缺省。
</para>

          <!--
<para><literal>wrapped</> format is like <literal>aligned</> but wraps
          wide data values across lines to make the output fit in the target
          column width.  The target width is determined as described under
          the <literal>columns</> option.  Note that <application>psql</> will
          not attempt to wrap column header titles; therefore,
          <literal>wrapped</> format behaves the same as <literal>aligned</>
          if the total width needed for column headers exceeds the target.
          </para>
-->
<para>
<literal>wrapped</>格式类似于<literal>aligned</>，但是包装跨行的宽数据值，
使其适应目标字段的宽度输出。目标宽度的确定如<literal>columns</>选项中的描述。
请注意，<application>psql</>将不会尝试包装字段标题：因此，
如果字段标题所需的总宽度超过目标宽度，则<literal>wrapped</>格式的行为和
<literal>aligned</>相同。
</para>

          <!--
<para>
          The <literal>html</>, <literal>latex</>,
          <literal>latex-longtable</literal>, and <literal>troff-ms</>
          formats put out tables that are intended to
          be included in documents using the respective mark-up
          language. They are not complete documents! This might not be
          necessary in <acronym>HTML</acronym>, but in
          <application>LaTeX</application> you must have a complete
          document wrapper.  <literal>latex-longtable</literal>
          also requires the <application>LaTeX</application>
          <literal>longtable</literal> and <literal>booktabs</> packages.
          </para>
-->
<para>
<literal>html</>、<literal>latex</>、<literal>latex-longtable</literal>和
<literal>troff-ms</>模式把表输出为可用于文档里的对应标记语言。
它们还不是完整的文档！可能对于<acronym>HTML</acronym>变化还不是太大，
但是在<application>LaTeX</application>里，你必须有一个完整的文档包装器。
<literal>latex-longtable</literal>也需要<application>LaTeX</application> 
<literal>longtable</literal>和<literal>booktabs</>包装器。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>linestyle</literal></term>
          <listitem>
          <!--
<para>
          Sets the border line drawing style to one
          of <literal>ascii</literal>, <literal>old-ascii</literal>
          or <literal>unicode</literal>.
          Unique abbreviations are allowed.  (That would mean one
          letter is enough.)
          The default setting is <literal>ascii</>.
          This option only affects the <literal>aligned</> and
          <literal>wrapped</> output formats.
          </para>
-->
<para>
设置边界线绘画风格为<literal>ascii</literal>、<literal>old-ascii</literal>
或<literal>unicode</literal>之一。允许独特的缩写。（这意味着一个字母就足够了。）
缺省设置是<literal>ascii</>。这个选项只影响<literal>aligned</>和
<literal>wrapped</>输出格式。
</para>

          <!--
<para><literal>ascii</literal> style uses plain <acronym>ASCII</acronym>
          characters.  Newlines in data are shown using
          a <literal>+</literal> symbol in the right-hand margin.
          When the <literal>wrapped</literal> format wraps data from
          one line to the next without a newline character, a dot
          (<literal>.</>) is shown in the right-hand margin of the first line,
          and again in the left-hand margin of the following line.
          </para>
-->
<para>
<literal>ascii</literal>风格使用纯<acronym>ASCII</acronym>字母。
数据中的换行使用一个<literal>+</literal>符号在右手边显示。
当<literal>wrapped</literal>格式从一行到下一行包装数据而不带有换行符时，
一个点(<literal>.</>)显示在第一行的右手边，在下一行的左手边。
</para>

          <!--
<para><literal>old-ascii</literal> style uses plain <acronym>ASCII</>
          characters, using the formatting style used
          in <productname>PostgreSQL</productname> 8.4 and earlier.
          Newlines in data are shown using a <literal>:</literal>
          symbol in place of the left-hand column separator.
          When the data is wrapped from one line
          to the next without a newline character, a <literal>;</>
          symbol is used in place of the left-hand column separator.
          </para>
-->
<para>
<literal>old-ascii</literal>风格使用纯<acronym>ASCII</>字符，
使用在<productname>PostgreSQL</productname> 8.4及更早版本中使用的格式风格。
数据中的换行使用一个<literal>:</literal>符号显示，代替左侧的域分隔符。
当数据从一行包装到下一行而不带有换行符时，使用一个<literal>;</>符号，
代替左侧的域分隔符。
</para>

          <!--
<para><literal>unicode</literal> style uses Unicode box-drawing characters.
          Newlines in data are shown using a carriage return symbol
          in the right-hand margin.  When the data is wrapped from one line
          to the next without a newline character, an ellipsis symbol
          is shown in the right-hand margin of the first line, and
          again in the left-hand margin of the following line.
          </para>
-->
<para>
<literal>unicode</literal>风格使用Unicode box-drawing字符。
数据中的换行在右侧使用一个回车符显示。当数据从一行包装到下一行而不带有换行符时，
一个省略号显示在第一行的右手边，在下一行的左手边。
</para>

          <!--
<para>
          When the <literal>border</> setting is greater than zero,
          this option also determines the characters
          with which the border lines are drawn.
          Plain <acronym>ASCII</acronym> characters work everywhere, but
          Unicode characters look nicer on displays that recognize them.
          </para>
-->
<para>
当<literal>border</>设置大于0时，这个选项也决定画边界线的字符。
纯<acronym>ASCII</acronym>字符无处不在，
但是Unicode字符看起来显示的更好，更容易辨认。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>null</literal></term>
          <listitem>
          <!--
<para>
          Sets the string to be printed in place of a null value.
          The default is to print nothing, which can easily be mistaken for
          an empty string. For example, one might prefer <literal>\pset null
          '(null)'</literal>.
          </para>
-->
<para>
设置打印出来替换空值的字符串。缺省是什么都不输出，
这样很容易和一个空字符串混淆。例如，可能更喜欢
<literal>\pset null '(null)'</literal>。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>numericlocale</literal></term>
          <listitem>
          <!--
<para>
          If <replaceable class="parameter">value</replaceable> is specified
          it must be either <literal>on</literal> or <literal>off</literal>
          which will enable or disable display of a locale-specific character
          to separate groups of digits to the left of the decimal marker.
          If <replaceable class="parameter">value</replaceable> is omitted the
          command toggles between regular and locale-specific numeric output.
          </para>
-->
<para>
如果声明了<replaceable class="parameter">value</replaceable>，那么它必须是
<literal>on</literal>或<literal>off</literal>，这将启用或禁用区域特定的字符的显示，
分隔小数点左边的数值组。如果省略了<replaceable class="parameter">value</replaceable>，
那么该命令在普通和区域特定的数值输出之间切换。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>pager</literal></term>
          <listitem>
          <!--
<para>
          Controls use of a pager program for query and <application>psql</>
          help output. If the environment variable <envar>PAGER</envar>
          is set, the output is piped to the specified program.
          Otherwise a platform-dependent default (such as
          <filename>more</filename>) is used.
          </para>
-->
<para>
控制查询和<application>psql</>帮助输出的分页器程序的使用。
如果设置了环境变量<envar>PAGER</envar>，那么输出被定向到指定程序，
否则使用系统缺省(比如<filename>more</filename>)。
</para>

          <!--
<para>
          When the <literal>pager</> option is <literal>off</>, the pager
          program is not used. When the <literal>pager</> option is
          <literal>on</>, the pager is used when appropriate, i.e., when the
          output is to a terminal and will not fit on the screen.
          The <literal>pager</> option can also be set to <literal>always</>,
          which causes the pager to be used for all terminal output regardless
          of whether it fits on the screen.  <literal>\pset pager</>
          without a <replaceable class="parameter">value</replaceable>
          toggles pager use on and off.
          </para>
-->
<para>
如果<literal>pager</>选项为<literal>off</>，则不使用分页器程序。如果<literal>pager</>
选项是<literal>on</>，则在适当的时候使用分页器，也就是说，输出是到终端，
而且很可能无法与屏幕匹配。也可以把<literal>pager</>选项设置为<literal>always</>，
导致在所有终端输出中都使用分页器，而不管它是否适合屏幕。不带有
<replaceable class="parameter">value</replaceable>的<literal>\pset pager</>
切换分页器的使用与否。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>recordsep</literal></term>
          <listitem>
          <!--
<para>
          Specifies the record (line) separator to use in unaligned
          output format. The default is a newline character.
          </para>
-->
<para>
声明在非对齐模式时的记录分隔符。缺省是换行符。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>recordsep_zero</literal></term>
          <listitem>
          <!--
<para>
          Sets the record separator to use in unaligned output format to a zero
          byte.
          </para>
-->
<para>
设置在非对齐输出格式中使用的记录分隔符为0字节。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>tableattr</literal> (<!-- or -->或 <literal>T</literal>)</term>
          <listitem>
          <!--
<para>
          In <acronym>HTML</acronym> format, this specifies attributes
          to be placed inside the <sgmltag>table</sgmltag> tag.  This
          could for example be <literal>cellpadding</literal> or
          <literal>bgcolor</literal>. Note that you probably don't want
          to specify <literal>border</literal> here, as that is already
          taken care of by <literal>\pset border</literal>.
          If no
          <replaceable class="parameter">value</replaceable> is given,
          the table attributes are unset.
          </para>
-->
<para>
在<acronym>HTML</acronym>格式下，这指定了要放置在<sgmltag>table</sgmltag>
标签中的属性。例如<literal>cellpadding</literal>或<literal>bgcolor</literal>。
请注意，你可能不需要在这里声明<literal>border</literal>，
因为已经在<literal>\pset border</literal>里用过了。如果没有给出
<replaceable class="parameter">value</replaceable>，那么表的属性是未设置的。
</para>
          <!--
<para>
          In <literal>latex-longtable</literal> format, this controls
          the proportional width of each column containing a left-aligned
          data type.  It is specified as a whitespace-separated list of values,
          e.g. <literal>'0.2 0.2 0.6'</>.  Unspecified output columns
          use the last specified value.
          </para>
-->
<para>
在<literal>latex-longtable</literal>格式中，这控制每个包含左对齐数据类型的字段的比例宽度。
它声明为空白分隔的值列表，比如<literal>'0.2 0.2 0.6'</>。
为指明的输出列使用最后指定的值。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>title</literal></term>
          <listitem>
          <!--
<para>
          Sets the table title for any subsequently printed tables. This
          can be used to give your output descriptive tags. If no
          <replaceable class="parameter">value</replaceable> is given,
          the title is unset.
          </para>
-->
<para>
为任何随后打印的表设置标题。这个参数可以用于给你的输出一个描述性标记。
如果不带<replaceable class="parameter">value</replaceable>，重置标题。
</para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>tuples_only</literal> (<!-- or -->或 <literal>t</literal>)</term>
          <listitem>
          <!--
<para>
          If <replaceable class="parameter">value</replaceable> is specified
          it must be either <literal>on</literal> or <literal>off</literal>
          which will enable or disable tuples-only mode.
          If <replaceable class="parameter">value</replaceable> is omitted the
          command toggles between regular and tuples-only output.
          Regular output includes extra information such
          as column headers, titles, and various footers. In tuples-only
          mode, only actual table data is shown.
          </para>
-->
<para>
如果声明了<replaceable class="parameter">value</replaceable>，那么必须是
<literal>on</literal>或<literal>off</literal>，这将启用或禁用仅元组模式。
如果省略了<replaceable class="parameter">value</replaceable>，
那么该命令在普通和仅元组输出间切换。普通输出包括额外的信息，
比如列头、标题、各种脚注等。在仅元组模式下，只显示实际的表数据。
</para>
          </listitem>
          </varlistentry>
        </variablelist>
        </para>

        <!--
<para>
        Illustrations of how these different formats look can be seen in
        the <xref linkend="APP-PSQL-examples"
        endterm="APP-PSQL-examples-title"> section.
        </para>
-->
<para>
可以在<xref linkend="APP-PSQL-examples" endterm="APP-PSQL-examples-title">
小节看到这些不同格式输出的示例。
</para>

        <tip>
        <!--
<para>
        There are various shortcut commands for <command>\pset</command>. See
        <command>\a</command>, <command>\C</command>, <command>\H</command>,
        <command>\t</command>, <command>\T</command>, and <command>\x</command>.
        </para>
-->
<para>
有很多用于<command>\pset</command>的快速命令。
参阅<command>\a</command>、<command>\C</command>、<command>\H</command>、
<command>\t</command>、<command>\T</command>和<command>\x</command>。
</para>
        </tip>

        </listitem>
      </varlistentry>


      <varlistentry>
        <!--
        <term><literal>\q</literal> or <literal>\quit</literal></term> 
        -->
<term><literal>\q</literal> 或 <literal>\quit</literal></term>
        <listitem>
        <!--
<para>
        Quits the <application>psql</application> program.
        In a script file, only execution of that script is terminated.
        </para>
-->
<para>
退出<application>psql</application>程序。在脚本文件中，只终止该脚本的执行。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\qecho <replaceable class="parameter">text</replaceable> [ ... ] </literal></term>
        <listitem>
        <!--
<para>
        This command is identical to <command>\echo</command> except
        that the output will be written to the query output channel, as
        set by <command>\o</command>.
        </para>
-->
<para>
这条命令等效于<command>\echo</command>，区别是所有输出将写入由
<command>\o</command>设置的输出通道。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <!--
        <term><literal>\r</literal> or <literal>\reset</literal></term>
        -->
        <term><literal>\r</literal>或<literal>\reset</literal></term>
        <listitem>
        <!--
<para>
        Resets (clears) the query buffer.
        </para>
-->
<para>
重置(清空)查询缓冲区
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\s [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
        Print <application>psql</application>'s command line history
        to <replaceable class="parameter">filename</replaceable>.
        If <replaceable class="parameter">filename</replaceable> is omitted,
        the history is written to the standard output (using the pager if
        appropriate).  This command is not available
        if <application>psql</application> was built
        without <application>Readline</application> support.
        </para>
-->
<para>
打印<application>psql</application>的命令行历史到
<replaceable class="parameter">filename</replaceable>。
如果省略则输出到标准输出（适当时使用分页）。
如果<application>psql</application>没有使用<application>Readline</application>
支持建立，那么这个命令是不可用的。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\set [ <replaceable class="parameter">name</replaceable> [ <replaceable class="parameter">value</replaceable> [ ... ] ] ]</literal></term>

        <listitem>
        <!--
<para>
        Sets the <application>psql</> variable <replaceable
        class="parameter">name</replaceable> to <replaceable
        class="parameter">value</replaceable>, or if more than one value
        is given, to the concatenation of all of them. If only one
        argument is given, the variable is set with an empty value. To
        unset a variable, use the <command>\unset</command> command.
        </para>
-->
<para>
设置<application>psql</>变量<replaceable class="parameter">name</replaceable>
为<replaceable class="parameter">value</replaceable>，或者如果给出了多于一个值，
设置为所有这些值的连接结果。如果只给出了一个参数，那么只设带有空值的变量。
要重置一个变量，使用<command>\unset</command>命令。
</para>

        <!--
<para><command>\set</> without any arguments displays the names and values
        of all currently-set <application>psql</> variables.
        </para>
-->
<para>
不带有任何参数的<command>\set</>显示所有当前设置的<application>psql</>
变量的名字和值。
</para>

        <!--
<para>
        Valid variable names can contain letters, digits, and
        underscores. See the section <xref
        linkend="APP-PSQL-variables"
        endterm="APP-PSQL-variables-title"> below for details.
        Variable names are case-sensitive.
        </para>
-->
<para>
有效的变量名可以包含字母，数字和下划线。参阅下面的<xref
        linkend="APP-PSQL-variables"
        endterm="APP-PSQL-variables-title">获取细节。变量名是大小写敏感的。
</para>

        <!--
<para>
        Although you are welcome to set any variable to anything you
        want, <application>psql</application> treats several variables
        as special. They are documented in the section about variables.
        </para>
-->
<para>
尽管你可以设置任何变量为任意值，<application>psql</application>
对一些变量特殊对待。它们在关于变量的小节里面有文档。
</para>

        <note>
        <!--
<para>
        This command is unrelated to the <acronym>SQL</acronym>
        command <xref linkend="SQL-SET">.
        </para>
-->
<para>
这条命令和<acronym>SQL</acronym>命令<xref linkend="SQL-SET">是没有关系的。
</para>
        </note>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\setenv <replaceable class="parameter">name</replaceable> [ <replaceable class="parameter">value</replaceable> ]</literal></term>

        <listitem>
        <!--
<para>
        Sets the environment variable <replaceable
        class="parameter">name</replaceable> to <replaceable
        class="parameter">value</replaceable>, or if the
        <replaceable class="parameter">value</replaceable> is
        not supplied, unsets the environment variable. Example:
<programlisting>
testdb=&gt; <userinput>\setenv PAGER less</userinput>
testdb=&gt; <userinput>\setenv LESS -imx4F</userinput>
</programlisting></para>
-->
<para>
设置环境变量<replaceable class="parameter">name</replaceable>为
<replaceable class="parameter">value</replaceable>，
或者如果没有提供<replaceable class="parameter">value</replaceable>，
则重置环境变量。例如：
<programlisting>
testdb=&gt; <userinput>\setenv PAGER less</userinput>
testdb=&gt; <userinput>\setenv LESS -imx4F</userinput>
</programlisting>
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\sf[+] <replaceable class="parameter">function_description</> </literal></term>

        <listitem>
        <!--
<para>
         This command fetches and shows the definition of the named function,
         in the form of a <command>CREATE OR REPLACE FUNCTION</> command.
         The definition is printed to the current query output channel,
         as set by <command>\o</command>.
        </para>
-->
<para>
这个命令抓取并显示命名函数的定义，以<command>CREATE OR REPLACE FUNCTION</>
命令的格式。定义打印到当前查询输出通道，正如<command>\o</command>所设定的。
</para>

        <!--
<para>
         The target function can be specified by name alone, or by name
         and arguments, for example <literal>foo(integer, text)</>.
         The argument types must be given if there is more
         than one function of the same name.
        </para>
-->
<para>
目标函数可以只通过名字指定，或者通过名字和参数指定，例如<literal>foo(integer, text)</>。
如果有多个函数的名字相同，则必须给出参数的类型。
</para>

        <!--
<para>
         If <literal>+</literal> is appended to the command name, then the
         output lines are numbered, with the first line of the function body
         being line 1.
        </para>
-->
<para>
如果在命令名后面附加上了<literal>+</literal>，那么输出行是编号了的，
函数体的第一行为1。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\t</literal></term>
        <listitem>
        <!--
<para>
        Toggles the display of output column name headings and row count
        footer. This command is equivalent to <literal>\pset
        tuples_only</literal> and is provided for convenience.
        </para>
-->
<para>
切换输出的字段名标题和行记数脚注的显示。这条命令等效于<literal>\pset
        tuples_only</literal>，提供它主要为了方便。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\T <replaceable class="parameter">table_options</replaceable></literal></term>
        <listitem>
        <!--
<para>
        Specifies attributes to be placed within the
        <sgmltag>table</sgmltag> tag in <acronym>HTML</acronym>
        output format. This command is equivalent to <literal>\pset
        tableattr <replaceable
        class="parameter">table_options</replaceable></literal>.
        </para>
-->
<para>
声明<acronym>HTML</acronym>输出格式中放在<sgmltag>table</sgmltag>标记里的属性。
这条命令等效于<literal>\pset tableattr <replaceable class="parameter">table_options</replaceable></literal>。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
       <term><literal>\timing [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
         Without parameter, toggles a display of how long each SQL statement
         takes, in milliseconds.  With parameter, sets same.
        </para>
-->
<para>
没有参数，以毫秒为单位显示每条 SQL 语句的耗时。有参数，设置相同。
</para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\unset <replaceable class="parameter">name</replaceable></literal></term>

        <listitem>
        <!--
<para>
        Unsets (deletes) the <application>psql</> variable <replaceable
        class="parameter">name</replaceable>.
        </para>
-->
<para>
取消（删除）<application>psql</>变量<replaceable class="parameter">name</replaceable>。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <!--
        <term><literal>\w</literal> or <literal>\write</literal> <replaceable class="parameter">filename</replaceable></term>
        <term><literal>\w</literal> or <literal>\write</literal> <literal>|</><replaceable class="parameter">command</replaceable></term>
        -->
        <term><literal>\w</literal>或<literal>\write</literal> <replaceable class="parameter">filename</replaceable></term>
        <term><literal>\w</literal>或<literal>\write</literal> <literal>|</><replaceable class="parameter">command</replaceable></term>
        <listitem>
        <!--
<para>
        Outputs the current query buffer to the file <replaceable
        class="parameter">filename</replaceable> or pipes it to the shell
        command <replaceable class="parameter">command</replaceable>.
        </para>
-->
<para>
将当前查询缓冲区输出到文件<replaceable class="parameter">filename</replaceable>
或者重定向到shell命令<replaceable class="parameter">command</replaceable>。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\watch [ <replaceable class="parameter">seconds</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
        Repeatedly execute the current query buffer (like <literal>\g</>)
        until interrupted or the query fails.  Wait the specified number of
        seconds (default 2) between executions.
        </para>
-->
<para>
重复执行当前查询缓冲区（像<literal>\g</>），直到中断或查询失败。
在执行之间等待指定的秒数（缺省是2）。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\x [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> | <replaceable class="parameter">auto</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
        Sets or toggles expanded table formatting mode. As such it is equivalent to
        <literal>\pset expanded</literal>.
       </para>
-->
<para>
设置或切换扩展表格式化模式。等效于<literal>\pset expanded</literal>。
</para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\z [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <!--
<para>
        Lists tables, views and sequences with their
        associated access privileges.
        If a <replaceable class="parameter">pattern</replaceable> is
        specified, only tables, views and sequences whose names match the
        pattern are listed.
        </para>
-->
<para>
列出带有相关访问权限的表、视图和序列。如果声明了
<replaceable class="parameter">pattern</replaceable>，
则只显示名字匹配该模式的表、视图和序列。
</para>

        <!--
<para>
        This is an alias for <command>\dp</command> (<quote>display
        privileges</quote>).
        </para>
-->
<para>
这是<command>\dp</command>(<quote>显示权限</quote>)的别名。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\! [ <replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <!--
<para>
        Escapes to a separate shell or executes the shell command
        <replaceable class="parameter">command</replaceable>. The
        arguments are not further interpreted; the shell will see them
        as-is.  In particular, the variable substitution rules and
        backslash escapes do not apply.
        </para>
-->
<para>
返回到一个单独的 shell 或者执行 shell 命令
<replaceable class="parameter">command</replaceable>。参数不会被进一步解释，
shell 将看到全部参数。特别的，变量替换规则和反斜杠逃逸并不适用。
</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\?</literal></term>
        <listitem>
        <!--
<para>
        Shows help information about the backslash commands.
        </para>
-->
<para>
显示关于反斜杠命令的帮助信息。
</para>
        </listitem>
      </varlistentry>

    </variablelist>
  </para>

  <refsect3 id="APP-PSQL-patterns">
   <!--
   <title id="APP-PSQL-patterns-title">Patterns</title>
   -->
   <title id="APP-PSQL-patterns-title">匹配模式</title>

   <indexterm>
    <!--
<primary>patterns</primary>
    <secondary>in psql and pg_dump</secondary>
-->
<primary>匹配模式</primary>
    <secondary>在psql和pg_dump中</secondary>
   </indexterm>

  <!--
<para>
   The various <literal>\d</> commands accept a <replaceable
   class="parameter">pattern</replaceable> parameter to specify the
   object name(s) to be displayed.  In the simplest case, a pattern
   is just the exact name of the object.  The characters within a
   pattern are normally folded to lower case, just as in SQL names;
   for example, <literal>\dt FOO</> will display the table named
   <literal>foo</>.  As in SQL names, placing double quotes around
   a pattern stops folding to lower case.  Should you need to include
   an actual double quote character in a pattern, write it as a pair
   of double quotes within a double-quote sequence; again this is in
   accord with the rules for SQL quoted identifiers.  For example,
   <literal>\dt "FOO""BAR"</> will display the table named
   <literal>FOO"BAR</> (not <literal>foo"bar</>).  Unlike the normal
   rules for SQL names, you can put double quotes around just part
   of a pattern, for instance <literal>\dt FOO"FOO"BAR</> will display
   the table named <literal>fooFOObar</>.
  </para>
-->
<para>
各种<literal>\d</>命令都接受一个<replaceable class="parameter">pattern</replaceable>
参数，声明要显示的对象名字。最简单的情况下 pattern 正好等于对象的名字。
pattern 中的字符通常会被自动转换成小写，就像 SQL 名字一样。
例如<literal>\dt FOO</>将显示名为<literal>foo</>的表。
与在 SQL 名字中相同的是双引号界定的 pattern 将保持原样(不做大小写转换)。
如果需要在双引号界定的 pattern 中使用双引号字符，你可以写两个并列的双引号，
这与 SQL 的引号规则相同。例如，<literal>\dt "FOO""BAR"</>
将会显示名为<literal>FOO"BAR</>的表，但是不会显示<literal>foo"bar</>。
与一般的 SQL 名字规则不同的是，你可以仅用双引号界定名字的一部分，
例如<literal>\dt FOO"FOO"BAR</>将显示名为<literal>fooFOObar</>的表。
</para>

  <!--
<para>
   Whenever the <replaceable class="parameter">pattern</replaceable> parameter
   is omitted completely, the <literal>\d</> commands display all objects
   that are visible in the current schema search path &mdash; this is
   equivalent to using <literal>*</> as the pattern.
   (An object is said to be <firstterm>visible</> if its
   containing schema is in the search path and no object of the same
   kind and name appears earlier in the search path. This is equivalent to the
   statement that the object can be referenced by name without explicit
   schema qualification.)
   To see all objects in the database regardless of visibility,
   use <literal>*.*</> as the pattern.
  </para>
-->
<para>
如果完全省略<replaceable class="parameter">pattern</replaceable>参数，
那么<literal>\d</>命令显示所有在当前模式搜索路径中可见的对象，
等价于使用<literal>*</>作为匹配模式。（如果一个对象的包含模式在搜索路径中，
并且没有相同类型、名字的对象出现在搜索路径中的更早位置，那么就说该对象是
<firstterm>可见的</>。这就等于可以通过名字引用而不明确模式限定的语句。）
要查阅在数据库中的所有对象，使用<literal>*.*</>模式。
</para>

  <!--
<para>
   Within a pattern, <literal>*</> matches any sequence of characters
   (including no characters) and <literal>?</> matches any single character.
   (This notation is comparable to Unix shell file name patterns.)
   For example, <literal>\dt int*</> displays tables whose names
   begin with <literal>int</>.  But within double quotes, <literal>*</>
   and <literal>?</> lose these special meanings and are just matched
   literally.
  </para>
-->
<para>
pattern 中的<literal>*</>匹配任何字符序列，包括没有字符，而<literal>?</>
匹配任何单个字符。这个表示法和 Unix 的 shell 文件名模式兼容。
比如<literal>\dt int*</>显示所有名字以<literal>int</>开头的表。
但是在双引号内部的<literal>*</>和<literal>?</>不具有匹配的功能，它们只代表自身。
</para>

  <!--
<para>
   A pattern that contains a dot (<literal>.</>) is interpreted as a schema
   name pattern followed by an object name pattern.  For example,
   <literal>\dt foo*.*bar*</> displays all tables whose table name
   includes <literal>bar</> that are in schemas whose schema name
   starts with <literal>foo</>.  When no dot appears, then the pattern
   matches only objects that are visible in the current schema search path.
   Again, a dot within double quotes loses its special meaning and is matched
   literally.
  </para>
-->
<para>
包含点(<literal>.</>)的pattern将被解释成模式名pattern后面跟一个对象名pattern。
例如<literal>\dt foo*.*bar*</>显示所有名字以<literal>foo</>
开头的模式中的所有名字包含<literal>bar</>的表。如果没有出现句点，
那么这个模式只匹配在当前模式搜索路径中可见的对象。同样，
在双引号内的点没有这个含义，它只代表其自身。
</para>

  <!--
<para>
   Advanced users can use regular-expression notations such as character
   classes, for example <literal>[0-9]</> to match any digit.  All regular
   expression special characters work as specified in
   <xref linkend="functions-posix-regexp">, except for <literal>.</> which
   is taken as a separator as mentioned above, <literal>*</> which is
   translated to the regular-expression notation <literal>.*</>,
   <literal>?</> which is translated to <literal>.</>, and
   <literal>$</> which is matched literally.  You can emulate
   these pattern characters at need by writing
   <literal>?</> for <literal>.</>,
   <literal>(<replaceable class="parameter">R</replaceable>+|)</literal> for
   <literal><replaceable class="parameter">R</replaceable>*</literal>, or
   <literal>(<replaceable class="parameter">R</replaceable>|)</literal> for
   <literal><replaceable class="parameter">R</replaceable>?</literal>.
   <literal>$</> is not needed as a regular-expression character since
   the pattern must match the whole name, unlike the usual
   interpretation of regular expressions (in other words, <literal>$</>
   is automatically appended to your pattern).  Write <literal>*</> at the
   beginning and/or end if you don't wish the pattern to be anchored.
   Note that within double quotes, all regular expression special characters
   lose their special meanings and are matched literally.  Also, the regular
   expression special characters are matched literally in operator name
   patterns (i.e., the argument of <literal>\do</>).
  </para>
-->
<para>
还可以使用正则表达式语法，比如字符类等等。例如用<literal>[0-9]</>匹配所有数字。
所有正则表达式中的特殊字符都按照<xref linkend="functions-posix-regexp">
里面描述的规则进行解析，除了<literal>.</>如上所述被当做分隔符，<literal>*</>
将被理解成<literal>.*</>，<literal>?</>将被理解成<literal>.</>，<literal>$</>
逐字匹配之外。这样一来，你就可以用<literal>?</>代替<literal>.</>、
用<literal>(<replaceable class="parameter">R</replaceable>+|)</literal>代替
<literal><replaceable class="parameter">R</replaceable>*</literal>、
用<literal>(<replaceable class="parameter">R</replaceable>|)</literal>代替
<literal><replaceable class="parameter">R</replaceable>?</literal>。
不需要<literal>$</>作为正则表达式字符，因为模式必须匹配整个名称，
而不是一般理解的匹配一部分即可（换句话说，<literal>$</>自动附加到你的模式）。
如果你只想匹配一部分，可以在 pattern 的开头和结尾使用<literal>*</>。
还需要注意的是在双引号内部的所有正则表达式特殊字符都将失去其特殊含义。
同样，在对操作符(也就是作为<literal>\do</>参数的时候)
进行匹配时正则表达式特殊字符也将失去其特殊含义。
</para>
  </refsect3>
 </refsect2>

 <refsect2>
  <!--
  <title>Advanced Features</title>
  -->
  <title>高级特性</title>

   <refsect3 id="APP-PSQL-variables">
    <!-- 
<title id="APP-PSQL-variables-title">Variables</title>
-->
<title id="APP-PSQL-variables-title">变量</title>

    <!--
<para>
    <application>psql</application> provides variable substitution
    features similar to common Unix command shells.
    Variables are simply name/value pairs, where the value
    can be any string of any length.  The name must consist of letters
    (including non-Latin letters), digits, and underscores.
    </para>
-->
<para>
<application>psql</application>提供类似通常Unix命令shell那样的变量替换特性。
变量只是简单的名称/值对，这里的值可以是任何长度的任何值。
名字必须由字母（包括非拉丁字母）、数字和下划线组成。
</para>

    
<para>
<!-- 
    To set a variable, use the <application>psql</application> meta-command
    <command>\set</command>.  For example,
-->
要设置一个变量，使用<application>psql</application>元命令<command>\set</command>，例如：
<programlisting>
testdb=&gt; <userinput>\set foo bar</userinput>
</programlisting>
<!-- 
    sets the variable <literal>foo</literal> to the value
    <literal>bar</literal>. To retrieve the content of the variable, precede
    the name with a colon, for example: 
-->
把变量<literal>foo</literal>的值设置为<literal>bar</literal>。
要检索变量的内容，在变量名前面放上冒号，例如：
<programlisting>
testdb=&gt; <userinput>\echo :foo</userinput>
bar
</programlisting>
<!-- 
   This works in both regular SQL commands and meta-commands; there is
    more detail in <xref linkend="APP-PSQL-interpolation"
    endterm="APP-PSQL-interpolation-title">, below.
-->
这在SQL命令和元命令中都能运行；更详细信息在下面的
<xref linkend="APP-PSQL-interpolation" endterm="APP-PSQL-interpolation-title">
中给出。
    </para>

    <!--
<para>
    If you call <command>\set</command> without a second argument, the
    variable is set, with an empty string as value. To unset (i.e., delete)
    a variable, use the command <command>\unset</command>.  To show the
    values of all variables, call <command>\set</command> without any argument.
    </para>
-->
<para>
如果你不带第二个参数调用<command>\set</command>，那么设置这个变量，
带有一个空字符串作为值。要重置(也就是删除)一个变量，使用<command>\unset</command>命令。
要显示所有变量的值，不带有任何参数的调用<command>\set</command>。
</para>

    <note>
    <!--
<para>
    The arguments of <command>\set</command> are subject to the same
    substitution rules as with other commands. Thus you can construct
    interesting references such as <literal>\set :foo
    'something'</literal> and get <quote>soft links</quote> or
    <quote>variable variables</quote> of <productname>Perl</productname>
    or <productname><acronym>PHP</acronym></productname> fame,
    respectively. Unfortunately (or fortunately?), there is no way to do
    anything useful with these constructs. On the other hand,
    <literal>\set bar :foo</literal> is a perfectly valid way to copy a
    variable.
    </para>
-->
<para>
<command>\set</command>的参数服从和其它命令一样的替换规则。
因此你可以构造有趣的引用，像<literal>\set :foo 'something'</literal>这样，
获得分别像<productname>Perl</productname>或<productname><acronym>PHP</acronym></productname>
那样有名的<quote>软连接</quote>或<quote>变量变量</quote>。不幸(或者万幸?)的是，
用这些构造不能做任何有用的事情。另一方面，<literal>\set bar :foo</literal>
是一个非常有效的拷贝变量的方法。
</para>
    </note>

    <!--
<para>
    A number of these variables are treated specially
    by <application>psql</application>. They represent certain option
    settings that can be changed at run time by altering the value of
    the variable, or in some cases represent changeable state of
    <application>psql</application>. Although
    you can use these variables for other purposes, this is not
    recommended, as the program behavior might grow really strange
    really quickly. By convention, all specially treated variables' names
    consist of all upper-case ASCII letters (and possibly digits and
    underscores). To ensure maximum compatibility in the future, avoid
    using such variable names for your own purposes. A list of all specially
    treated variables follows.
   </para>
-->
<para>
有一些常用变量被<application>psql</application>特殊相待。它们代表特定的选项设置，
这些选项在运行时可以通过改变变量的值而改变，或者在某些情况下代表
<application>psql</application>的可变状态。尽管你可以把这些变量用于其它用途，
但是不鼓励这么做，因为程序的行为可能会变得非常奇怪。通常，
所有特殊对待的变量名都是由大写ASCII字母组成(可能还有数字和下划线)。
为了保证和未来的最大限度的兼容性，请避免使用这样的变量。
下面是一个所有特殊对待的变量列表。
</para>

    <variablelist>
      <varlistentry>
      <term>
       <varname>AUTOCOMMIT</varname>
      <indexterm>
       <primary>autocommit</primary>
       <secondary>psql</secondary>
      </indexterm>
      </term>
        <listitem>
        <!--
<para>
        When <literal>on</> (the default), each SQL command is automatically
        committed upon successful completion.  To postpone commit in this
        mode, you must enter a <command>BEGIN</> or <command>START
        TRANSACTION</> SQL command.  When <literal>off</> or unset, SQL
        commands are not committed until you explicitly issue
        <command>COMMIT</> or <command>END</>.  The autocommit-off
        mode works by issuing an implicit <command>BEGIN</> for you, just
        before any command that is not already in a transaction block and
        is not itself a <command>BEGIN</> or other transaction-control
        command, nor a command that cannot be executed inside a transaction
        block (such as <command>VACUUM</>).
        </para>
-->
<para>
如果是<literal>on</>(缺省)，那么每个 SQL 命令都在成功完成后自动提交。
要推迟这种模式下的提交，你必须输入一个<command>BEGIN</>或<command>START TRANSACTION</>
命令。如果是<literal>off</>或者未设置，SQL 命令不会提交，直到你明确地发出
<command>COMMIT</>或<command>END</>。关闭自动提交的模式是通过为你明确发出一个
<command>BEGIN</>实现的，它是放在任何尚未在一个事务块中并且自己不是
<command>BEGIN</>或其它事务控制命令也不是那些不能在事务块里执行的命令
(比如<command>VACUUM</>)的前面。
</para>

        <note>
        <!--
<para>
         In autocommit-off mode, you must explicitly abandon any failed
         transaction by entering <command>ABORT</> or <command>ROLLBACK</>.
         Also keep in mind that if you exit the session
         without committing, your work will be lost.
        </para>
-->
<para>
在关闭自动提交的模式下，你必须明确放弃任何失败的事务，方法是执行<command>ABORT</>
或<command>ROLLBACK</>。还要注意，如果你不提交就退出会话，所做的工作会丢失。
</para>
        </note>

        <note>
        <!--
<para>
         The autocommit-on mode is <productname>PostgreSQL</>'s traditional
         behavior, but autocommit-off is closer to the SQL spec.  If you
         prefer autocommit-off, you might wish to set it in the system-wide
         <filename>psqlrc</filename> file or your
         <filename>~/.psqlrc</filename> file.
        </para>
-->
<para>
打开自动提交是<productname>PostgreSQL</>的传统行为，但是关闭自动提交更接近SQL规范。
如果你更喜欢关闭自动提交，你可以在系统范围的<filename>psqlrc</filename>
或<filename>~/.psqlrc</filename>文件中设置它。
</para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>COMP_KEYWORD_CASE</varname></term>
        <listitem>
        <!--
<para>
        Determines which letter case to use when completing an SQL key word.
        If set to <literal>lower</literal> or <literal>upper</literal>, the
        completed word will be in lower or upper case, respectively.  If set
        to <literal>preserve-lower</literal>
        or <literal>preserve-upper</literal> (the default), the completed word
        will be in the case of the word already entered, but words being
        completed without anything entered will be in lower or upper case,
        respectively.
        </para>
-->
<para>
在完成SQL关键字时决定哪个字母使用大小写。如果设置为<literal>lower</literal>
或<literal>upper</literal>，则完成的单词将分别为小写或大写。如果设置为
<literal>preserve-lower</literal>或<literal>preserve-upper</literal>（缺省），
那么完成的单词将是输入时的情况，但是单词在没有任何输入的情况下完成，
将分别是小写或大写的情况。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>DBNAME</varname></term>
        <listitem>
        <!--
<para>
        The name of the database you are currently connected to. This is
        set every time you connect to a database (including program
        start-up), but can be unset.
        </para>
-->
<para>
正在连接着的数据库名称。每次与一个数据库联结都会设置这个值(包括程序启动)，
但是可以删除。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ECHO</varname></term>
        <listitem>
        <!--
<para>
        If set to <literal>all</literal>, all nonempty input lines are printed
        to standard output as they are read.  (This does not apply to lines
        read interactively.)  To select this behavior on program
        start-up, use the switch <option>-a</option>. If set to
        <literal>queries</literal>,
        <application>psql</application> prints each query to standard output
        as it is sent to the server. The switch for this is
        <option>-e</option>.
        </para>
-->
<para>
如果设为<literal>all</literal>，那么所有非空输入行在读取时都回显到标准输出。
（这不适用于交互式读取的行。）
使用<option>-a</option>选项声明在程序启动时就默认这样做。如果设置为<literal>queries</literal>，
那么<application>psql</application>只是在查询发送给服务器时打印到标准输出。
实现这个功能的命令行选项是<option>-e</option>。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ECHO_HIDDEN</varname></term>
        <listitem>
        <!--
<para>
        When this variable is set to <literal>on</> and a backslash command
        queries the database, the query is first shown.
        This feature helps you to study
        <productname>PostgreSQL</productname> internals and provide
        similar functionality in your own programs. (To select this behavior
        on program start-up, use the switch <option>-E</option>.)  If you set
        the variable to the value <literal>noexec</literal>, the queries are
        just shown but are not actually sent to the server and executed.
        </para>
-->
<para>
当这个变量设置为<literal>on</>并且一个反斜杠命令查询数据库时，首先显示查询。
这个特性帮助你学习<productname>PostgreSQL</productname>内部的东西，
并且在你自己的程序里提供类似功能。要在程序一起动的时候就启用这个行为，
可以使用<option>-E</option>选项。如果你设置该变量的值为<literal>noexec</literal>，
那么查询只是显示出来但是实际上不发送到服务器去执行。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ENCODING</varname></term>
        <listitem>
        <!--
<para>
        The current client character set encoding.
        </para>
-->
<para>
当前的客户端字符集编码。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>FETCH_COUNT</varname></term>
        <listitem>
        <!--
<para>
        If this variable is set to an integer value &gt; 0,
        the results of <command>SELECT</command> queries are fetched
        and displayed in groups of that many rows, rather than the
        default behavior of collecting the entire result set before
        display.  Therefore only a
        limited amount of memory is used, regardless of the size of
        the result set.  Settings of 100 to 1000 are commonly used
        when enabling this feature.
        Keep in mind that when using this feature, a query might
        fail after having already displayed some rows.
        </para>
-->
<para>
如果该变量的值大于零，<command>SELECT</command>查询的结果将按此值分批返回和显示，
而不是缺省的一次取出和显示所有结果。这样就可以无论结果集有多大都只使用很少量的内存。
一般来说，设为 100 到 1000 之间的值比较合理。需要注意的是，使用此特性后，
一个查询可能在显示了一部分结果之后遭遇失败。
</para>
        <tip>
        <!--
<para>
        Although you can use any output format with this feature,
        the default <literal>aligned</> format tends to look bad
        because each group of <varname>FETCH_COUNT</varname> rows
        will be formatted separately, leading to varying column
        widths across the row groups.  The other output formats work better.
        </para>
-->
<para>
虽然该特性可以用于所有输出格式。但是并不适合在缺省的<literal>aligned</>
格式上使用这个特性，因为每一批<varname>FETCH_COUNT</varname>行会被单独的分开格式化，
这样一来每一批输出结果的列宽就可能各不相等。不过对于其他格式这个特性工作的很好。
</para>
        </tip>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HISTCONTROL</varname></term>
        <listitem>
        <!--
<para>
         If this variable is set to <literal>ignorespace</literal>,
         lines which begin with a space are not entered into the history
         list. If set to a value of <literal>ignoredups</literal>, lines
         matching the previous history line are not entered. A value of
         <literal>ignoreboth</literal> combines the two options. If
         unset, or if set to any other value than those above, all lines
         read in interactive mode are saved on the history list.
        </para>
-->
<para>
如果将这个变量设为<literal>ignorespace</literal>，
那么以空格开始的行将不会进入历史列表。如果设置为<literal>ignoredups</literal>，
那么与以前历史记录里匹配的行也不会进入历史记录。值<literal>ignoreboth</literal>
是上面两个的结合。如果删除此变量或者其值为任何与上面的值不同的东西，
所有交互模式读入的行都被保存入历史列表。
</para>
        <note>
        <!--
<para>
        This feature was shamelessly plagiarized from
        <application>Bash</application>.
        </para>
-->
<para>
这个特性是从<application>Bash</application>偷学来的。
</para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HISTFILE</varname></term>
        <listitem>
        <!--
<para>
        The file name that will be used to store the history list. The default
        value is <filename>~/.psql_history</filename>.  For example, putting:
<programlisting>
\set HISTFILE ~/.psql_history- :DBNAME
</programlisting>
        in <filename>~/.psqlrc</filename> will cause
        <application>psql</application> to maintain a separate history for
        each database.
        </para>
-->
<para>
此文件将用于存储历史列表。缺省值是<filename>~/.psql_history</filename>。
比如，在<filename>~/.psqlrc</filename>里使用：
<programlisting>
\set HISTFILE ~/.psql_history- :DBNAME
</programlisting>
将使得<application>psql</application>为每个数据库维护一个独立的历史。
</para>
        <note>
        <!--
<para>
        This feature was shamelessly plagiarized from
        <application>Bash</application>.
        </para>
-->
<para>
这个特性是从<application>Bash</application>偷学来的。
</para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HISTSIZE</varname></term>
        <listitem>
        <!--
<para>
        The number of commands to store in the command history. The
        default value is 500.
        </para>
-->
<para>
保存在命令历史里的命令的个数。缺省值是 500 。
</para>
        <note>
        <!--
<para>
        This feature was shamelessly plagiarized from
        <application>Bash</application>.
        </para>
-->
<para>
这个特性是从<application>Bash</application>偷学来的。
</para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HOST</varname></term>
        <listitem>
        <!--
<para>
        The database server host you are currently connected to. This is
        set every time you connect to a database (including program
        start-up), but can be unset.
        </para>
-->
<para>
当前你正连接的数据库服务器主机。这是在每次你与数据库连接时(包括程序启动)设置的，
但是可以删除。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>IGNOREEOF</varname></term>
        <listitem>
        <!--
<para>
         If unset, sending an <acronym>EOF</> character (usually
         <keycombo action="simul"><keycap>Control</><keycap>D</></>)
         to an interactive session of <application>psql</application>
         will terminate the application. If set to a numeric value,
         that many <acronym>EOF</> characters are ignored before the
         application terminates.  If the variable is set but has no
         numeric value, the default is 10.
        </para>
-->
<para>
如果删除此变量，向一个交互的<application>psql</application>会话发送一个
<acronym>EOF</>(通常是<keycombo action="simul"><keycap>Control</><keycap>D</></>)
将终止应用。如果设置为一个数字值，那么在应用终止前该数值的<acronym>EOF</>
字符将被忽略。如果设置了此变量但是没有数字值，缺省是 10 。
</para>
        <note>
        <!--
<para>
        This feature was shamelessly plagiarized from
        <application>Bash</application>.
        </para>
-->
<para>
这个特性是从<application>Bash</application>偷学来的。
</para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>LASTOID</varname></term>
        <listitem>
        <!--
<para>
        The value of the last affected OID, as returned from an
        <command>INSERT</command> or <command>\lo_import</command>
        command. This variable is only guaranteed to be valid until
        after the result of the next <acronym>SQL</acronym> command has
        been displayed.
        </para>
-->
<para>
最后影响的OID值，即为从一条<command>INSERT</command>或<command>\lo_import</command>
命令返回的值。此变量只保证在下一条<acronym>SQL</acronym>命令的结果显示之前有效。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
      <term>
       <varname>ON_ERROR_ROLLBACK</varname>
      <indexterm>
       <primary>rollback</primary>
       <secondary>psql</secondary>
      </indexterm>
      </term>
        <listitem>
        <!--
<para>
        When set to <literal>on</>, if a statement in a transaction block
        generates an error, the error is ignored and the transaction
        continues. When set to <literal>interactive</>, such errors are only
        ignored in interactive sessions, and not when reading script
        files. When unset or set to <literal>off</>, a statement in a
        transaction block that generates an error aborts the entire
        transaction. The error rollback mode works by issuing an
        implicit <command>SAVEPOINT</> for you, just before each command
        that is in a transaction block, and then rolling back to the
        savepoint if the command fails.
        </para>
-->
<para>
当设置为<literal>on</>时，如果一个事务块里的语句产生错误，
这个错误将被忽略而事务将继续。当设置为<literal>interactive</>时，
这样的错误只是在交互的会话里忽略，而不是在从读取脚本文件的时候。
如果未设置或者设置为<literal>off</>(缺省)，
事务块里一个语句生成的错误将会中止整个事务。
错误回滚的模式是通过在一个事务块的每个命令前为你隐含地发出一个
<command>SAVEPOINT</>的方式工作的，在命令错误的时候回滚到该保存点。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ON_ERROR_STOP</varname></term>
        <listitem>
        <!--
<para>
        By default, command processing continues after an error.  When this
        variable is set to <literal>on</>, processing will instead stop
        immediately.  In interactive mode,
        <application>psql</application> will return to the command prompt;
        otherwise, <application>psql</application> will exit, returning
        error code 3 to distinguish this case from fatal error
        conditions, which are reported using error code 1.  In either case,
        any currently running scripts (the top-level script, if any, and any
        other scripts which it may have in invoked) will be terminated
        immediately.  If the top-level command string contained multiple SQL
        commands, processing will stop with the current command.
        </para>
-->
<para>
缺省时，遇到错误后命令处理继续进行。当这个变量设置为<literal>on</>，
处理会立即停止。
在交互模式下，<application>psql</application>将返回到命令提示符；
否则，<application>psql</application>将退出，并返回错误代码 3 ，
以示这个情况与致命错误条件的区别，致命错误条件的错误代码为 1。
不管在哪种情况下，任何当前运行的脚本（顶级脚本，如果有，和任何它调用的其他脚本）
都将立即终止。如果顶级命令字符串包含多个SQL命令，处理将在当前命令停止。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>PORT</varname></term>
        <listitem>
        <!--
<para>
        The database server port to which you are currently connected.
        This is set every time you connect to a database (including
        program start-up), but can be unset.
        </para>
-->
<para>
当前你正在连接的数据库服务器的端口。这是在每次你与数据库连接时
(包括程序启动)设置的，但是可以删除。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>PROMPT1</varname></term>
        <term><varname>PROMPT2</varname></term>
        <term><varname>PROMPT3</varname></term>
        <listitem>
        <!--
<para>
        These specify what the prompts <application>psql</application>
        issues should look like. See <xref
        linkend="APP-PSQL-prompting"
        endterm="APP-PSQL-prompting-title"> below.
        </para>
-->
<para>
这些指明<application>psql</application>显示的提示符看上去像什么。
参阅下面的<xref linkend="APP-PSQL-prompting" endterm="APP-PSQL-prompting-title">。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>QUIET</varname></term>
        <listitem>
        <!--
<para>
        Setting this variable to <literal>on</> is equivalent to the command
        line option <option>-q</option>. It is probably not too useful in
        interactive mode.
        </para>
-->
<para>
设置这个变量为<literal>on</>，等效于命令行选项<option>-q</option>。
可能在交互模式下没有什么用。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>SINGLELINE</varname></term>
        <listitem>
        <!--
<para>
        Setting this variable to <literal>on</> is equivalent to the command
        line option <option>-S</option>.
        </para>
-->
<para>
设置这个变量为<literal>on</>，等效于命令行选项<option>-S</option>。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>SINGLESTEP</varname></term>
        <listitem>
        <!--
<para>
        Setting this variable to <literal>on</> is equivalent to the command
        line option <option>-s</option>.
        </para>
-->
<para>
设置这个变量为<literal>on</>，等效于命令行选项<option>-s</option>。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>USER</varname></term>
        <listitem>
        <!--
<para>
        The database user you are currently connected as. This is set
        every time you connect to a database (including program
        start-up), but can be unset.
        </para>
-->
<para>
当前你正用于连接的数据库用户。这是在每次你与数据库连接时(包括程序启动)设置的，
但是可以被删除。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>VERBOSITY</varname></term>
        <listitem>
        <!--
<para>
        This variable can be set to the values <literal>default</>,
        <literal>verbose</>, or <literal>terse</> to control the verbosity
        of error reports.
        </para>
-->
<para>
这个选项可以设置为值<literal>default</>、<literal>verbose</>或<literal>terse</>
之一以控制错误报告的冗余。
</para>
        </listitem>
      </varlistentry>

    </variablelist>

   </refsect3>

   <refsect3 id="APP-PSQL-interpolation">
    <!--
<title id="APP-PSQL-interpolation-title"><acronym>SQL</acronym> Interpolation</title>
-->
<title id="APP-PSQL-interpolation-title"><acronym>SQL</acronym> 代换</title>

    <!--
<para>
    A key feature of <application>psql</application>
    variables is that you can substitute (<quote>interpolate</quote>)
    them into regular <acronym>SQL</acronym> statements, as well as the
    arguments of meta-commands.  Furthermore,
    <application>psql</application> provides facilities for
    ensuring that variable values used as SQL literals and identifiers are
    properly quoted.  The syntax for interpolating a value without
    any quoting is to prepend the variable name with a colon
    (<literal>:</literal>).  For example,
<programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :foo;</userinput>
</programlisting>
    would query the table <literal>my_table</literal>. Note that this
    may be unsafe: the value of the variable is copied literally, so it can
    contain unbalanced quotes, or even backslash commands. You must make sure
    that it makes sense where you put it.
    </para>
-->
<para>
<application>psql</application>变量的关键特性是你可以把它们替换成正规的
<acronym>SQL</acronym>语句，也可以是元命令的参数。另外，<application>psql</application>
提供工具确保变量值用作SQL文本并且正确的引用标识符。
不用引用替换一个值的语法是在变量名前面加一个冒号(<literal>:</literal>)。例如：
<programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :foo;</userinput>
</programlisting>
将会查询<literal>my_table</literal>表。请注意，这可能是不安全的：
变量的值是逐字拷贝的，所以它甚至可以包含不对称的引号或反斜杠命令。
你必须保证你输入的东西是有意义的。
</para>

    <!--
<para>
    When a value is to be used as an SQL literal or identifier, it is
    safest to arrange for it to be quoted.  To quote the value of
    a variable as an SQL literal, write a colon followed by the variable
    name in single quotes.  To quote the value as an SQL identifier, write
    a colon followed by the variable name in double quotes.
    These constructs deal correctly with quotes and other special
    characters embedded within the variable value.
    The previous example would be more safely written this way:
<programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :"foo";</userinput>
</programlisting>
    </para>
-->
<para>
当一个值被用作SQL文本或标识符时，将其引用是最安全的。
要引用一个变量的值作为SQL文本，在单引号中的变量名后面写一个冒号。
要引用值作为SQL标识符，在双引号中的变量名后面写一个冒号。
这些构造正确的处理引号和嵌入在变量值中的其他特殊字符。
上面的例子这样写更安全：
<programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :"foo";</userinput>
</programlisting>
</para>

    <!--
<para>
    Variable interpolation will not be performed within quoted
    <acronym>SQL</acronym> literals and identifiers.  Therefore, a
    construction such as <literal>':foo'</> doesn't work to produce a quoted
    literal from a variable's value (and it would be unsafe if it did work,
    since it wouldn't correctly handle quotes embedded in the value).
    </para>
-->
<para>
变量替换将不在引用的<acronym>SQL</acronym>文本和标识符中执行。因此，
一个构造比如<literal>':foo'</>并不从变量的值中产生一个引用的文本
（如果它确实发生了，那么它是不安全的，因为它不会正确的处理嵌入在值中的引号。）
</para>

    <!--
<para>
    One example use of this mechanism is to
    copy the contents of a file into a table column.
    First load the file into a variable and then interpolate the variable's
    value as a quoted string:
<programlisting>
testdb=&gt; <userinput>\set content `cat my_file.txt`</userinput>
testdb=&gt; <userinput>INSERT INTO my_table VALUES (:'content');</userinput>
</programlisting>
    (Note that this still won't work if <filename>my_file.txt</filename> contains NUL bytes.
    <application>psql</application> does not support embedded NUL bytes in variable values.)
    </para>
-->
<para>
使用这个机制的一个例子是拷贝一个文件的内容到一个表字段中。
首先加载文件到一个变量，然后替换变量的值为引用的字符串：
<programlisting>
testdb=&gt; <userinput>\set content `cat my_file.txt`</userinput>
testdb=&gt; <userinput>INSERT INTO my_table VALUES (:'content');</userinput>
</programlisting>
（注意，如果<filename>my_file.txt</filename>包含NUL字节，则这将不会运行。
<application>psql</application>在变量值中不支持嵌入的NUL字节。）
</para>

    <!--
<para>
    Since colons can legally appear in SQL commands, an apparent attempt
    at interpolation (that is, <literal>:name</literal>,
    <literal>:'name'</literal>, or <literal>:"name"</literal>) is not
    replaced unless the named variable is currently set. In any case, you
    can escape a colon with a backslash to protect it from substitution.
    </para>
-->
<para>
因为冒号可以合法的出现在SQL命令中，一个代换的明显试图（也就是，<literal>:name</literal>、
<literal>:'name'</literal>或<literal>:"name"</literal>）是不会替换的，
除非命名的变量是当前设置。在任何情况下，都可以用反斜杠逃逸一个冒号以保护它不被替换。
</para>

    <!--
<para>
    The colon syntax for variables is standard <acronym>SQL</acronym> for
    embedded query languages, such as <application>ECPG</application>.
    The colon syntaxes for array slices and type casts are
    <productname>PostgreSQL</productname> extensions, which can sometimes
    conflict with the standard usage.  The colon-quote syntax for escaping a
    variable's value as an SQL literal or identifier is a
    <application>psql</application> extension.
    </para>
-->
<para>
变量的冒号语法符合诸如<application>ECPG</application>之类的嵌入式查询语言的
<acronym>SQL</acronym>标准。用于数组片段和类型转换的冒号语法是
<productname>PostgreSQL</productname>扩展，有时与标准的用法会有冲突。
逃逸变量值为SQL文本或标识符的冒号引号语法是<application>psql</application>扩展。
</para>

   </refsect3>

   <refsect3 id="APP-PSQL-prompting">
    <!-- 
<title id="APP-PSQL-prompting-title">Prompting</title>
-->
<title id="APP-PSQL-prompting-title">提示符</title>

    <!--
<para>
    The prompts <application>psql</application> issues can be customized
    to your preference. The three variables <varname>PROMPT1</varname>,
    <varname>PROMPT2</varname>, and <varname>PROMPT3</varname> contain strings
    and special escape sequences that describe the appearance of the
    prompt. Prompt 1 is the normal prompt that is issued when
    <application>psql</application> requests a new command. Prompt 2 is
    issued when more input is expected during command input because the
    command was not terminated with a semicolon or a quote was not closed.
    Prompt 3 is issued when you run an <acronym>SQL</acronym>
    <command>COPY</command> command and you are expected to type in the
    row values on the terminal.
    </para>
-->
<para>
<application>psql</application>使用的提示符可以根据你的喜好自定义。
三个变量<varname>PROMPT1</varname>、<varname>PROMPT2</varname>、<varname>PROMPT3</varname>
包含描述提示符的外观的字符串和特殊逃逸序列。PROMPT1 是<application>psql</application>
请求一个新命令时使用的正常提示符。PROMPT2 是在一个命令输入期待更多输入时
(因为查询没有用一个分号结束或者引号没有关闭)显示的提示符。
PROMPT3 在你运行一个<acronym>SQL</acronym> <command>COPY</command>
命令和等待你在终端上键入记录时使用。
</para>

    
<para>
<!-- 
    The value of the selected prompt variable is printed literally,
    except where a percent sign (<literal>%</literal>) is encountered.
    Depending on the next character, certain other text is substituted
    instead. Defined substitutions are:
-->
相应的提示符变量的值是按字面打印的，除非碰到一个百分号(<literal>%</literal>)。
这时某些其它的文本被替换，替换为何物取决于下一个字符。已定义的替换是：
    <variablelist>
      <varlistentry>
        <term><literal>%M</literal></term>
        <listitem>
<!--
         <para>
          The full host name (with domain name) of the database server,
          or <literal>[local]</literal> if the connection is over a Unix
          domain socket, or
          <literal>[local:<replaceable>/dir/name</replaceable>]</literal>,
          if the Unix domain socket is not at the compiled in default
          location.
        </para>
-->
<para>
数据库服务器全程主机名(带着域名)，如果连接是通过 Unix 域套接字进行的就是
<literal>[local]</literal>，或者如果 Unix 域套接字不是编译的缺省位置，
就是<literal>[local:<replaceable>/dir/name</replaceable>]</literal>。
</para>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%m</literal></term>
        <listitem>
         <!--
<para>
          The host name of the database server, truncated at the
          first dot, or <literal>[local]</literal> if the connection is
          over a Unix domain socket.
         </para>
-->
<para>
数据库服务器的主机名删去第一个点后面的部分剩下的东西。
或者如果是通过 Unix 域套接字连接，就是<literal>[local]</literal>。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%&gt;</literal></term>
        <listitem><!--
<para>The port number at which the database server is listening.</para>
-->
<para>
数据库服务器正在侦听的端口号。
</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%n</literal></term>
        <listitem>
         <!--
<para>
          The database session user name.  (The expansion of this
          value might change during a database session as the result
          of the command <command>SET SESSION
          AUTHORIZATION</command>.)
         </para>
-->
<para>
数据库会话的用户名。这个值的扩展可能在一个数据库会话过程中因为
<command>SET SESSION AUTHORIZATION</command>命令而改变。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%/</literal></term>
        <listitem><!--
<para>The name of the current database.</para>
-->
<para>
当前数据库名称。
</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%~</literal></term>
        <listitem><!--
<para>Like <literal>%/</literal>, but the output is <literal>~</literal>
         (tilde) if the database is your default database.</para>
-->
<para>
类似<literal>%/</literal>，但如果数据库是你的缺省数据库输出是波浪线<literal>~</literal>。
</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%#</literal></term>
        <listitem>
         <!--
<para>
          If the session user is a database superuser, then a
          <literal>#</literal>, otherwise a <literal>&gt;</literal>.
          (The expansion of this value might change during a database
          session as the result of the command <command>SET SESSION
          AUTHORIZATION</command>.)
         </para>
-->
<para>
如果会话用户是数据库超级用户，使用<literal>#</literal>，否则用
<literal>&gt;</literal>。这个值的扩展可能在一个数据库会话过程中因为
<command>SET SESSION AUTHORIZATION</command>命令而改变。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%R</literal></term>
        <listitem>
        <!--
<para>
        In prompt 1 normally <literal>=</literal>, but <literal>^</literal> if
        in single-line mode, and <literal>!</literal> if the session is
        disconnected from the database (which can happen if
        <command>\connect</command> fails). In prompt 2 the sequence is
        replaced by <literal>-</literal>, <literal>*</literal>, a single quote,
        a double quote, or a dollar sign, depending on whether
        <application>psql</application> expects more input because the
        command wasn't terminated yet, because you are inside a
        <literal>/* ... */</literal> comment, or because you are inside
        a quoted or dollar-escaped string. In prompt 3 the sequence doesn't
        produce anything.
        </para>
-->
<para>
对于 PROMPT1 通常是<literal>=</literal>，但是如果是单行模式则是<literal>^</literal>，
而如果会话与数据库断开(如果<command>\connect</command>失败可能发生)
则是<literal>!</literal>。对于 PROMPT2 该序列被<literal>-</literal>、
<literal>*</literal>、一个单引号/双引号/美元符(取决于<application>psql</application>
是否等待更多的输入：查询没有终止、正在一个<literal>/* ... */</literal>
注释里、正在引号或者美元符逃逸字符串里)代替。对于 PROMPT3 该序列不解释成任何东西。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%x</literal></term>
        <listitem>
        <!--
<para>
        Transaction status: an empty string when not in a transaction
        block, or <literal>*</> when in a transaction block, or
        <literal>!</> when in a failed transaction block, or <literal>?</>
        when the transaction state is indeterminate (for example, because
        there is no connection).
        </para>
-->
<para>
事务状态：如果不在事务块里则是一个空字符串，如果在事务块里则是<literal>*</>，
如果在一个失败的事务块里则是<literal>!</>，或者无法判断事务状态时为<literal>?</>
(比如没有连接)。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%</literal><replaceable class="parameter">digits</replaceable></term>
        <listitem>
        <!--
<para>
        The character with the indicated octal code is substituted.
        </para>
-->
<para>
指定字节值的字符将被替换到该位置。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%:</literal><replaceable class="parameter">name</replaceable><literal>:</literal></term>
        <listitem>
        <!--
<para>
        The value of the <application>psql</application> variable
        <replaceable class="parameter">name</replaceable>. See the
        section <xref linkend="APP-PSQL-variables"
        endterm="APP-PSQL-variables-title"> for details.
        </para>
-->
<para>
<application>psql</application>变量<replaceable class="parameter">name</replaceable>
的值。参阅<xref linkend="APP-PSQL-variables" endterm="APP-PSQL-variables-title">
小节获取细节。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%`</literal><replaceable class="parameter">command</replaceable><literal>`</literal></term>
        <listitem>
        <!--
<para>
        The output of <replaceable
        class="parameter">command</replaceable>, similar to ordinary
        <quote>back-tick</quote> substitution.
        </para>
-->
<para>
<replaceable class="parameter">command</replaceable>的输出，
类似于通常的<quote>反勾号</quote>替换。
</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%[</literal> ... <literal>%]</literal></term>
        <listitem>
         <!--
<para>
         Prompts can contain terminal control characters which, for
         example, change the color, background, or style of the prompt
         text, or change the title of the terminal window. In order for
         the line editing features of <application>Readline</application> to work properly, these
         non-printing control characters must be designated as invisible
         by surrounding them with <literal>%[</literal> and
         <literal>%]</literal>. Multiple pairs of these can occur within
         the prompt.  For example:
<programlisting>
testdb=&gt; \set PROMPT1 '%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%# '
</programlisting>
         results in a boldfaced (<literal>1;</literal>) yellow-on-black
         (<literal>33;40</literal>) prompt on VT100-compatible, color-capable
         terminals.
        </para>
-->
<para>
提示可以包含终端控制字符，这些字符可以改变颜色、背景、提示文本的风格、
终端窗口的标题。为了让<application>Readline</application>的行编辑特性正确运行，
这些不可打印的控制字符必须设计成不可见的，方法是用<literal>%[</literal>
和<literal>%]</literal>包围它们。在提示符里可能出现这些东西的多个配对。例如：
<programlisting>
testdb=&gt; \set PROMPT1 '%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%# '
</programlisting>
的结果是在 VT100 兼容的可显示彩色的终端上的一个宽体(<literal>1;</literal>)
黑底黄字(<literal>33;40</literal>)。
</para>
        </listitem>
      </varlistentry>

    </variablelist>

<!-- 
    To insert a percent sign into your prompt, write
    <literal>%%</literal>. The default prompts are
    <literal>'%/%R%# '</literal> for prompts 1 and 2, and
    <literal>'&gt;&gt; '</literal> for prompt 3.
-->
键入<literal>%%</literal>可以在提示符里插入百分号。
缺省提示符为<literal>'%/%R%# '</literal>用于第一二个提示符，
<literal>'&gt;&gt; '</literal>用于第三个提示符。
    </para>

    <note>
    <!--
<para>
    This feature was shamelessly plagiarized from
    <application>tcsh</application>.
    </para>
-->
<para>
这个特性是从<application>tcsh</application>偷学来的。
</para>
    </note>

   </refsect3>

   <refsect3>
    <!--
<title>Command-Line Editing</title>
-->
<title>命令行编辑</title>

    <!--
<para>
    <application>psql</application> supports the <application>Readline</application>
    library for convenient line editing and retrieval. The command
    history is automatically saved when <application>psql</application>
    exits and is reloaded when
    <application>psql</application> starts up. Tab-completion is also
    supported, although the completion logic makes no claim to be an
    <acronym>SQL</acronym> parser.  The queries generated by tab-completion
    can also interfere with other SQL commands, e.g. <literal>SET
    TRANSACTION ISOLATION LEVEL</>.
    If for some reason you do not like the tab completion, you
    can turn it off by putting this in a file named
    <filename>.inputrc</filename> in your home directory:
<programlisting>
$if psql
set disable-completion on
$endif
</programlisting>
    (This is not a <application>psql</application> but a
    <application>Readline</application> feature. Read its documentation
    for further details.)
    </para>
-->
<para>
<application>psql</application>为了编辑和检索命令行的方便支持
<application>Readline</application>库。命令历史在<application>psql</application>
退出的时候自动保存，在<application>psql</application>启动的时候加载。
还支持 Tab 补齐，尽管该补齐逻辑并不是一个<acronym>SQL</acronym>分析器必备的。
tab补齐产生的查询也可以与其他SQL命令交互，比如<literal>SET TRANSACTION ISOLATION LEVEL</>。
如果因某些原因你不喜欢 tab 补齐，可以把下面几行放在你的家目录下的
 <filename>.inputrc</filename>文件里关闭这个特性：
 <programlisting>
$if psql
set disable-completion on
$endif
</programlisting>
这不是<application>psql</application>而是<application>Readline</application>
的特性，参考它的文档获取更多细节。
</para>
   </refsect3>
  </refsect2>
 </refsect1>


 <refsect1 id="app-psql-environment">
  <!--
  <title id="app-psql-environment-title">Environment</title>
  -->
  <title id="app-psql-environment-title">环境变量</title>

  <variablelist>

   <varlistentry>
    <term><envar>COLUMNS</envar></term>

    <listitem>
     <!--
<para>
      If <literal>\pset columns</> is zero, controls the
      width for the <literal>wrapped</> format and width for determining
      if wide output requires the pager or should be switched to the
      vertical format in expanded auto mode.
     </para>
-->
<para>
如果<literal>\pset columns</>为0，控制<literal>wrapped</>
格式的宽度和宽度确定（如果宽的输出需要分页或在自动扩展模式应该切换为垂直模式）。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PAGER</envar></term>

    <listitem>
     <!--
<para>
      If the query results do not fit on the screen, they are piped
      through this command.  Typical values are
      <literal>more</literal> or <literal>less</literal>.  The default
      is platform-dependent.  The use of the pager can be disabled by
      using the <command>\pset</command> command.
     </para>
-->
<para>
如果查询结果在一页里放不下，那么它们被重定向到这个命令。
典型的值是<literal>more</literal>或<literal>less</literal>。
缺省值是平台相关的。可以用<command>\pset</command>命令关闭分页器。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PGDATABASE</envar></term>
    <term><envar>PGHOST</envar></term>
    <term><envar>PGPORT</envar></term>
    <term><envar>PGUSER</envar></term>

    <listitem>
     <!--
<para>
      Default connection parameters (see <xref linkend="libpq-envars">).
     </para>
-->
<para>
缺省连接的参数（参阅<xref linkend="libpq-envars">）。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_EDITOR</envar></term>
    <term><envar>EDITOR</envar></term>
    <term><envar>VISUAL</envar></term>

    <listitem>
     <!--
<para>
      Editor used by the <command>\e</command> and
      <command>\ef</command> commands.  The variables are examined in
      the order listed; the first that is set is used.
     </para>
-->
<para>
<command>\e</command>和<command>\ef</command>命令使用的编辑器。
这些变量是按照上面的顺序检查的；设置最早的最先使用。
</para>

     <!--
<para>
      The built-in default editors are <filename>vi</filename> on Unix
      systems and <filename>notepad.exe</filename> on Windows systems.
     </para>
-->
<para>
在Unix系统上内建的缺省编辑器是<filename>vi</filename>，
在Windows系统上是<filename>notepad.exe</filename>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_EDITOR_LINENUMBER_ARG</envar></term>

    <listitem>
     <!--
<para>
      When <command>\e</command> or <command>\ef</command> is used
      with a line number argument, this variable specifies the
      command-line argument used to pass the starting line number to
      the user's editor.  For editors such as <productname>Emacs</> or
      <productname>vi</>, this is a plus sign.  Include a trailing
      space in the value of the variable if there needs to be space
      between the option name and the line number.  Examples:
<programlisting>
PSQL_EDITOR_LINENUMBER_ARG='+'
PSQL_EDITOR_LINENUMBER_ARG='-&#045;line '
</programlisting>
     </para>
-->
<para>
当<command>\e</command>或<command>\ef</command>带有行号参数使用时，
这个变量声明传递给用户编辑器的启动行号的命令行参数。
对于<productname>Emacs</>或<productname>vi</>这样的编辑器，这是一个加号。
如果在选项名和行号之间需要空格，则包括变量值中尾随的空白。例子：
<programlisting>
PSQL_EDITOR_LINENUMBER_ARG='+'
PSQL_EDITOR_LINENUMBER_ARG='--line '
</programlisting>
</para>

     <!--
<para>
      The default is <literal>+</literal> on Unix systems
      (corresponding to the default editor <filename>vi</filename>,
      and useful for many other common editors); but there is no
      default on Windows systems.
     </para>
-->
<para>
在Unix系统上的缺省是<literal>+</literal>（对应于默认的编辑器
<filename>vi</filename>，并且可用于许多其他常见的编辑器）；
在Windows系统上没有缺省。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_HISTORY</envar></term>

    <listitem>
     <!--
<para>
      Alternative location for the command history file. Tilde (<literal>~</literal>) expansion is performed.
     </para>
-->
<para>
命令历史文件的替代位置。执行波浪符(<literal>~</literal>)扩展。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQLRC</envar></term>

    <listitem>
     <!--
<para>
      Alternative location of the user's <filename>.psqlrc</filename> file. Tilde (<literal>~</literal>) expansion is performed.
     </para>
-->
<para>
用户的<filename>.psqlrc</filename>文件的替代位置。
执行波浪符(<literal>~</literal>)扩展。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>SHELL</envar></term>

    <listitem>
     <!--
<para>
      Command executed by the <command>\!</command> command.
     </para>
-->
<para>
<command>\!</command>命令执行的命令。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>TMPDIR</envar></term>

    <listitem>
     <!--
<para>
      Directory for storing temporary files.  The default is
      <filename>/tmp</filename>.
     </para>
-->
<para>
存储临时文件的目录。缺省是<filename>/tmp</filename>。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <!--
<para>
   This utility, like most other <productname>PostgreSQL</> utilities,
   also uses the environment variables supported by <application>libpq</>
   (see <xref linkend="libpq-envars">).
  </para>
-->
<para>
这个工具，像大多数其他<productname>PostgreSQL</>工具一样，
也使用<application>libpq</>提供的环境变量（参阅<xref linkend="libpq-envars">）。
</para>

 </refsect1>


 <refsect1>
  <!--
  <title>Files</title>
  -->
  <title>文件</title>

 <variablelist>
  <varlistentry>
   <!--
   <term><filename>psqlrc</filename> and <filename>~/.psqlrc</filename></term>
   -->
   <term><filename>psqlrc</filename>和<filename>~/.psqlrc</filename></term>
   <listitem>
    <!--
<para>
     Unless it is passed an <option>-X</option> or <option>-c</option> option,
     <application>psql</application> attempts to read and execute commands
     from the system-wide startup file (<filename>psqlrc</filename>) and then
     the user's personal startup file (<filename>~/.psqlrc</filename>), after
     connecting to the database but before accepting normal commands.
     These files can be used to set up the client and/or the server to taste,
     typically with <command>\set</command> and <command>SET</command>
     commands.
    </para>
-->
<para>
除非传递了<option>-X</option>或<option>-c</option>选项，
<application>psql</application>尝试读取和执行来自系统范围的
<filename>psqlrc</filename>启动文件的命令，然后是用户
<filename>~/.psqlrc</filename>启动文件里面的命令，
在连接到数据库之后，接受普通命令之前。
这些文件可以用来按需求设置客户端或者服务器，
典型的是使用<command>\set</command>和<command>SET</command>命令。
</para>
    <!--
<para>
     The system-wide startup file is named <filename>psqlrc</filename> and is
     sought in the installation's <quote>system configuration</> directory,
     which is most reliably identified by running <literal>pg_config
     &#045;-sysconfdir</>.  By default this directory will be <filename>../etc/</>
     relative to the directory containing
     the <productname>PostgreSQL</productname> executables.  The name of this
     directory can be set explicitly via the <envar>PGSYSCONFDIR</envar>
     environment variable.
    </para>
-->
<para>
系统范围的启动文件名为<filename>psqlrc</filename>，
在安装的<quote>系统配置</>目录下查找，可以通过运行<literal>pg_config
     --sysconfdir</>可靠的识别。缺省情况下，这个目录是
<filename>../etc/</>，相对于包含<productname>PostgreSQL</productname>
可执行文件的目录。这个目录的名字可以通过<envar>PGSYSCONFDIR</envar>
环境变量明确的设置。
</para>
<!-- 
    <para>
     The user's personal startup file is named <filename>.psqlrc</filename>
     and is sought in the invoking user's home directory.  On Windows, which
     lacks such a concept, the personal startup file is named
     <filename>%APPDATA%\postgresql\psqlrc.conf</filename>.
     The location of the user's startup file can be set explicitly via
     the <envar>PSQLRC</envar> environment variable.
    </para>
-->
<para>
用户的启动文件名为<filename>.psqlrc</filename>，在用户的根目录下查找。
在Windows上，缺乏这样一个概念，用户个人的启动文件名为
<filename>%APPDATA%\postgresql\psqlrc.conf</filename>。
用户的启动文件的位置可以通过<envar>PSQLRC</envar>环境变量明确的设置。
</para>
    <!--
<para>
     Both the system-wide startup file and the user's personal startup file
     can be made <application>psql</application>-version-specific
     by appending a dash and the <productname>PostgreSQL</productname>
     major or minor release number to the file name,
     for example <filename>~/.psqlrc-9.2</filename> or
     <filename>~/.psqlrc-9.2.5</filename>.  The most specific
     version-matching file will be read in preference to a
     non-version-specific file.
    </para>
-->
<para>
系统范围的启动文件和用户自己的启动文件都可以是<application>psql</application>
版本特定的，通过在后面附着一个破折号和<productname>PostgreSQL</productname>
主要或次要版本号，
比如<filename>~/.psqlrc-9.2</filename>或<filename>~/.psqlrc-9.2.5</filename>。
更确切的版本匹配文件比无版本的文件优先读取。
</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>.psql_history</filename></term>
   <listitem>
    <!--
<para>
     The command-line history is stored in the file
     <filename>~/.psql_history</filename>, or
     <filename>%APPDATA%\postgresql\psql_history</filename> on Windows.
    </para>
-->
<para>
命令行历史存储在<filename>~/.psql_history</filename>文件中，
或者在 Windows 里是<filename>%APPDATA%\postgresql\psql_history</filename>文件。
</para>
    <!--
<para>
     The location of the history file can be set explicitly via
     the <envar>PSQL_HISTORY</envar> environment variable.
    </para>
-->
<para>
历史文件的位置可以通过<envar>PSQL_HISTORY</envar>环境变量来明确设置。
</para>
   </listitem>
  </varlistentry>
 </variablelist>
 </refsect1>


 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

    <itemizedlist>
      <listitem>
      <!--
<para>
       In an earlier life <application>psql</application> allowed the
       first argument of a single-letter backslash command to start
       directly after the command, without intervening whitespace.
       As of <productname>PostgreSQL</productname> 8.4 this is no
       longer allowed.
      </para>
-->
<para>
一些<application>psql</application>的早期版本允许一个单字母的反斜杠命令
(元命令)的第一个参数直接跟在命令后面，而不用空白间隔。
到了<productname>PostgreSQL</productname> 8.4就不再允许这样使用了。
</para>
      </listitem>

      <listitem>
      <!--
<para><application>psql</application> works best with servers of the same
       or an older major version.  Backslash commands are particularly likely
       to fail if the server is of a newer version than <application>psql</>
       itself.  However, backslash commands of the <literal>\d</> family should
       work with servers of versions back to 7.4, though not necessarily with
       servers newer than <application>psql</> itself.  The general
       functionality of running SQL commands and displaying query results
       should also work with servers of a newer major version, but this cannot
       be guaranteed in all cases.
      </para>
-->
<para>
<application>psql</application>能与同版本或更老主要版本的服务器工作。
如果服务器的版本比<application>psql</>本身要新，则反斜杠命令是特别容易失效的。
不过，<literal>\d</>家族的反斜杠命令应该在7.4的服务器版本上工作，
尽管不必要用比<application>psql</>本身更新的服务器。
运行SQL命令和显示查询结果的通用功能也应该在更新主版本的服务器上工作，
但是并不保证所有情况都没问题。
</para>
      <!--
<para>
       If you want to use <application>psql</application> to connect to several
       servers of different major versions, it is recommended that you use the
       newest version of <application>psql</application>.  Alternatively, you
       can keep a copy of <application>psql</application> from each major
       version around and be sure to use the version that matches the
       respective server.  But in practice, this additional complication should
       not be necessary.
      </para>
-->
<para>
如果你想要使用<application>psql</application>连接几个不同主版本的服务器，
建议你使用<application>psql</application>的最新版本。或者，
你可以保存每个主版本的<application>psql</application>的拷贝，
确保使用匹配各自服务器的版本。但是在实际中，不必要弄的这么复杂。
</para>
      </listitem>

    </itemizedlist>
 </refsect1>


 <refsect1>
  <!--
  <title>Notes for Windows Users</title>
  -->
  <title>Windows 用户需要注意的地方</title>

 
<para>
<!-- 
  <application>psql</application> is built as a <quote>console
  application</>.  Since the Windows console windows use a different
  encoding than the rest of the system, you must take special care
  when using 8-bit characters within <application>psql</application>.
  If <application>psql</application> detects a problematic
  console code page, it will warn you at startup. To change the
  console code page, two things are necessary:
-->
<application>psql</application>是以一种<quote>控制台应用</>的方式制作的。
因为 Windows 控制台窗口和系统其它部分使用不同的编码，所以在
<application>psql</application>里使用 8 位字符的时候必须采取特殊的注意措施。
如果<application>psql</application>检测到一个有问题的控制台代码页，
那么它在启动的时候会警告你。要修改控制台代码页，有两件事是必须做的：
   <itemizedlist>
    <listitem>
<!--
     <para>
      Set the code page by entering <userinput>cmd.exe /c chcp
      1252</userinput>. (1252 is a code page that is appropriate for
      German; replace it with your value.) If you are using Cygwin,
      you can put this command in <filename>/etc/profile</filename>.
     </para>
-->
<para>
通过输入<userinput>cmd.exe /c chcp 1252</userinput>设置代码页。
（1252 是适用于德语的代码页；请换成合适你的数值。）
如果你使用 Cygwin ，你可以在<filename>/etc/profile</filename>里面输入这条命令。
</para>
    </listitem>

    <listitem>
     <!--
<para>
      Set the console font to <literal>Lucida Console</>, because the
      raster font does not work with the ANSI code page.
     </para>
-->
<para>
控制台字体设置为<literal>Lucida Console</>，因为光栅字体(点阵字体)
不能在 ANSI 代码页下工作。
</para>
    </listitem>
   </itemizedlist></para>

 </refsect1>


 <refsect1 id="APP-PSQL-examples">
  <!--
  <title id="APP-PSQL-examples-title">Examples</title>
  -->
  <title id="APP-PSQL-examples-title">例子</title>
<para>
<!-- 
  The first example shows how to spread a command over several lines of
  input. Notice the changing prompt:
-->
第一个例子演示了如何把一个查询分成多个行进行输入。注意提示符的变化：
<programlisting>
testdb=&gt; <userinput>CREATE TABLE my_table (</userinput>
testdb(&gt; <userinput> first integer not null default 0,</userinput>
testdb(&gt; <userinput> second text)</userinput>
testdb-&gt; <userinput>;</userinput>
CREATE TABLE
</programlisting>
<!-- 
  Now look at the table definition again:
-->
现在再看看表定义：
<programlisting>
testdb=&gt; <userinput>\d my_table</userinput>
             Table "my_table"
 Attribute |  Type   |      Modifier
-----------+---------+--------------------
 first     | integer | not null default 0
 second    | text    |

</programlisting>
<!-- 
  Now we change the prompt to something more interesting:
-->
把提示符变成更有趣的东西：
<programlisting>
testdb=&gt; <userinput>\set PROMPT1 '%n@%m %~%R%# '</userinput>
peter@localhost testdb=&gt;
</programlisting>
<!--
   Let's assume you have filled the table with data and want to take a
  look at it:
-->
假设你用数据填充了表并且想看一眼：
<programlisting>
peter@localhost testdb=&gt; SELECT * FROM my_table;
 first | second
-------+--------
     1 | one
     2 | two
     3 | three
     4 | four
(4 rows)

</programlisting>
<!-- 
  You can display tables in different ways by using the
  <command>\pset</command> command:
-->
你可以用<command>\pset</command>命令以不同的方法显示表：
<programlisting>
peter@localhost testdb=&gt; <userinput>\pset border 2</userinput>
Border style is 2.
peter@localhost testdb=&gt; <userinput>SELECT * FROM my_table;</userinput>
+-------+--------+
| first | second |
+-------+--------+
|     1 | one    |
|     2 | two    |
|     3 | three  |
|     4 | four   |
+-------+--------+
(4 rows)

peter@localhost testdb=&gt; <userinput>\pset border 0</userinput>
Border style is 0.
peter@localhost testdb=&gt; <userinput>SELECT * FROM my_table;</userinput>
first second
----- ------
    1 one
    2 two
    3 three
    4 four
(4 rows)

peter@localhost testdb=&gt; <userinput>\pset border 1</userinput>
Border style is 1.
peter@localhost testdb=&gt; <userinput>\pset format unaligned</userinput>
Output format is unaligned.
peter@localhost testdb=&gt; <userinput>\pset fieldsep ","</userinput>
Field separator is ",".
peter@localhost testdb=&gt; <userinput>\pset tuples_only</userinput>
Showing only tuples.
peter@localhost testdb=&gt; <userinput>SELECT second, first FROM my_table;</userinput>
one,1
two,2
three,3
four,4
</programlisting>
  <!--
  Alternatively, use the short commands:
  -->
  还可以用短(缩写)命令：
<programlisting>
peter@localhost testdb=&gt; <userinput>\a \t \x</userinput>
Output format is aligned.
Tuples only is off.
Expanded display is on.
peter@localhost testdb=&gt; <userinput>SELECT * FROM my_table;</userinput>
-[ RECORD 1 ]-
first  | 1
second | one
-[ RECORD 2 ]-
first  | 2
second | two
-[ RECORD 3 ]-
first  | 3
second | three
-[ RECORD 4 ]-
first  | 4
second | four
</programlisting></para>

 </refsect1>

</refentry>

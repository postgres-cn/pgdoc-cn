<!--
doc/src/sgml/ref/create_sequence.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATESEQUENCE">
 <indexterm zone="sql-createsequence">
  <primary>CREATE SEQUENCE</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle>CREATE SEQUENCE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE SEQUENCE</refname>
  <!--
  <refpurpose>define a new sequence generator</refpurpose>
  -->
  <refpurpose>定义一个新序列发生器</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ TEMPORARY | TEMP ] SEQUENCE <replaceable class="parameter">name</replaceable> [ INCREMENT [ BY ] <replaceable class="parameter">increment</replaceable> ]
    [ MINVALUE <replaceable class="parameter">minvalue</replaceable> | NO MINVALUE ] [ MAXVALUE <replaceable class="parameter">maxvalue</replaceable> | NO MAXVALUE ]
    [ START [ WITH ] <replaceable class="parameter">start</replaceable> ] [ CACHE <replaceable class="parameter">cache</replaceable> ] [ [ NO ] CYCLE ]
    [ OWNED BY { <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable> | NONE } ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE SEQUENCE</command> creates a new sequence number
   generator.  This involves creating and initializing a new special
   single-row table with the name <replaceable
   class="parameter">name</replaceable>.  The generator will be
   owned by the user issuing the command.
  </para>
-->
<para>
<command>CREATE SEQUENCE</command>将向当前数据库里增加一个新的序列号生成器。
包括创建和初始化一个新的名为<replaceable class="parameter">name</replaceable>
的单行表。生成器将被使用此命令的用户所有。
</para>

  <!--
<para>
   If a schema name is given then the sequence is created in the
   specified schema.  Otherwise it is created in the current schema.
   Temporary sequences exist in a special schema, so a schema name cannot be
   given when creating a temporary sequence.
   The sequence name must be distinct from the name of any other sequence,
   table, index, view, or foreign table in the same schema.
  </para>
-->
<para>
如果给出了一个模式名，那么该序列就在给定的模式中创建的。
否则它会在当前模式中创建。临时序列存在于一个特殊的模式中，
因此创建临时序列的时候不能给出模式名。序列名必需和同一模式中的其它序列、
表、索引、视图或外表的名字不同。
</para>

  <!--
<para>
   After a sequence is created, you use the functions
   <function>nextval</function>,
   <function>currval</function>, and
   <function>setval</function>
   to operate on the sequence.  These functions are documented in
   <xref linkend="functions-sequence">.
  </para>
-->
<para>
在创建序列后，你可以使用<function>nextval</function>、
<function>currval</function>和<function>setval</function>函数操作序列。
这些函数在<xref linkend="functions-sequence">中有详细文档。
</para>

  <!--
<para>
   Although you cannot update a sequence directly, you can use a query like:

<programlisting>
SELECT * FROM <replaceable>name</replaceable>;
</programlisting>

   to examine the parameters and current state of a sequence.  In particular,
   the <literal>last_value</> field of the sequence shows the last value
   allocated by any session.  (Of course, this value might be obsolete
   by the time it's printed, if other sessions are actively doing
   <function>nextval</> calls.)
  </para>
-->
<para>
尽管你不能直接更新一个序列，但你可以使用：
<programlisting>
SELECT * FROM <replaceable>name</replaceable>;
</programlisting>
检查一个序列的参数和当前状态。特别是序列的<literal>last_value</>
字段显示了任意会话最后分配的数值。（当然，如果其它会话正积极地使用
<function>nextval</>，这些值在被打印出来的时候可能就已经过时了。）
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <!--
<term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
-->
<term><literal>TEMPORARY</literal> 或 <literal>TEMP</literal></term>
    <listitem>
     <!--
<para>
      If specified, the sequence object is created only for this
      session, and is automatically dropped on session exit.  Existing
      permanent sequences with the same name are not visible (in this
      session) while the temporary sequence exists, unless they are
      referenced with schema-qualified names.
     </para>
-->
<para>
如果声明了这个修饰词，那么该序列对象只为这个会话创建，
并且在会话结束的时候自动删除。在临时序列存在的时候，
除非用模式修饰的名字引用，否则同名永久序列是不可见的(在同一会话里)。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of the sequence to be created.
     </para>
-->
<para>
将要创建的序列名(可以用模式修饰)
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">increment</replaceable></term>
    <listitem>
     <!--
<para>
      The optional clause <literal>INCREMENT BY <replaceable
      class="parameter">increment</replaceable></literal> specifies
      which value is added to the current sequence value to create a
      new value.  A positive value will make an ascending sequence, a
      negative one a descending sequence.  The default value is 1.
     </para>
-->
<para>
可选子句<literal>INCREMENT BY <replaceable
      class="parameter">increment</replaceable></literal>指定序列的步长。
一个正数将生成一个递增的序列，一个负数将生成一个递减的序列。缺省值是 1 。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">minvalue</replaceable></term>
    <term><literal>NO MINVALUE</literal></term>
    <listitem>
     <!--
<para>
      The optional clause <literal>MINVALUE <replaceable
      class="parameter">minvalue</replaceable></literal> determines
      the minimum value a sequence can generate. If this clause is not
      supplied or <option>NO MINVALUE</option> is specified, then
      defaults will be used.  The defaults are 1 and
      -2<superscript>63</>-1 for ascending and descending sequences,
      respectively.
     </para>
-->
<para>
可选的子句<literal>MINVALUE <replaceable class="parameter">minvalue</replaceable></literal>
指定序列的最小值。如果没有声明这个子句或者声明了<option>NO MINVALUE</option>，
那么递增序列的缺省为 1 ，递减序列的缺省为-2<superscript>63</>-1。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">maxvalue</replaceable></term>
    <term><literal>NO MAXVALUE</literal></term>
    <listitem>
     <!--
<para>
      The optional clause <literal>MAXVALUE <replaceable
      class="parameter">maxvalue</replaceable></literal> determines
      the maximum value for the sequence. If this clause is not
      supplied or <option>NO MAXVALUE</option> is specified, then
      default values will be used.  The defaults are
      2<superscript>63</>-1 and -1 for ascending and descending
      sequences, respectively.
     </para>
-->
<para>
可选的子句<literal>MAXVALUE <replaceable class="parameter">maxvalue</replaceable></literal>
指定序列的最大值。如果没有声明这个子句或者声明了<option>NO MAXVALUE</option>，
那么递增序列的缺省为2<superscript>63</>-1，递减序列的缺省为 -1 。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">start</replaceable></term>
    <listitem>
     <!--
<para>
      The optional clause <literal>START WITH <replaceable
      class="parameter">start</replaceable> </literal> allows the
      sequence to begin anywhere.  The default starting value is
      <replaceable class="parameter">minvalue</replaceable> for
      ascending sequences and <replaceable
      class="parameter">maxvalue</replaceable> for descending ones.
     </para>
-->
<para>
可选的子句<literal>START WITH <replaceable class="parameter">start</replaceable> </literal>
指定序列的起点。缺省初始值对于递增序列为<replaceable class="parameter">minvalue</replaceable>，
对于递减序列为<replaceable class="parameter">maxvalue</replaceable>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">cache</replaceable></term>
    <listitem>
     <!--
<para>
      The optional clause <literal>CACHE <replaceable
      class="parameter">cache</replaceable></literal> specifies how
      many sequence numbers are to be preallocated and stored in
      memory for faster access. The minimum value is 1 (only one value
      can be generated at a time, i.e., no cache), and this is also the
      default.
     </para>
-->
<para>
可选的子句<literal>CACHE <replaceable class="parameter">cache</replaceable></literal>
为快速访问而在内存里预先存储多少个序列号。最小值(也是缺省值)是 1 ，
表示一次只能生成一个值，也就是说没有缓存。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CYCLE</literal></term>
    <term><literal>NO CYCLE</literal></term>
    <listitem>
     <!--
<para>
      The <literal>CYCLE</literal> option allows the sequence to wrap
      around when the <replaceable
      class="parameter">maxvalue</replaceable> or <replaceable
      class="parameter">minvalue</replaceable> has been reached by an
      ascending or descending sequence respectively. If the limit is
      reached, the next number generated will be the <replaceable
      class="parameter">minvalue</replaceable> or <replaceable
      class="parameter">maxvalue</replaceable>, respectively.
     </para>
-->
<para>
<literal>CYCLE</literal>选项可用于使序列到达
<replaceable class="parameter">maxvalue</replaceable>或
<replaceable class="parameter">minvalue</replaceable>时可循环并继续下去。
也就是如果达到极限，生成的下一个数据将分别是
<replaceable class="parameter">minvalue</replaceable>
或<replaceable class="parameter">maxvalue</replaceable>。
</para>

     <!--
<para>
      If <literal>NO CYCLE</literal> is specified, any calls to
      <function>nextval</function> after the sequence has reached its
      maximum value will return an error.  If neither
      <literal>CYCLE</literal> or <literal>NO CYCLE</literal> are
      specified, <literal>NO CYCLE</literal> is the default.
     </para>
-->
<para>
如果声明了<literal>NO CYCLE</literal>，那么在序列达到其最大值之后任何对
<function>nextval</function>的调用都将返回一个错误。
如果既没有声明<literal>CYCLE</literal>也没有声明<literal>NO CYCLE</literal>，
那么<literal>NO CYCLE</literal>是缺省。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OWNED BY</literal> <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable></term>
    <term><literal>OWNED BY NONE</literal></term>
    <listitem>
     <!--
<para>
      The <literal>OWNED BY</literal> option causes the sequence to be
      associated with a specific table column, such that if that column
      (or its whole table) is dropped, the sequence will be automatically
      dropped as well.  The specified table must have the same owner and be in
      the same schema as the sequence.
      <literal>OWNED BY NONE</literal>, the default, specifies that there
      is no such association.
     </para>
-->
<para>
<literal>OWNED BY</literal>选项将序列关联到一个特定的表字段上。这样，
在删除那个字段或其所在表的时候将自动删除绑定的序列。
指定的表和序列必须被同一个用户所拥有，并且在在同一个模式中。
默认的<literal>OWNED BY NONE</literal>表示不存在这样的关联。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   Use <command>DROP SEQUENCE</command> to remove a sequence.
  </para>
-->
<para>
使用<command>DROP SEQUENCE</command>删除一个序列。
</para>

  <!--
<para>
   Sequences are based on <type>bigint</> arithmetic, so the range
   cannot exceed the range of an eight-byte integer
   (-9223372036854775808 to 9223372036854775807).
  </para>
-->
<para>
序列是基于<type>bigint</>运算的，因此其范围不能超过八字节的整数范围
(-9223372036854775808 到 9223372036854775807)。
</para>

  <!--
<para>
   Unexpected results might be obtained if a <replaceable
   class="parameter">cache</replaceable> setting greater than one is
   used for a sequence object that will be used concurrently by
   multiple sessions.  Each session will allocate and cache successive
   sequence values during one access to the sequence object and
   increase the sequence object's <literal>last_value</> accordingly.
   Then, the next <replaceable class="parameter">cache</replaceable>-1
   uses of <function>nextval</> within that session simply return the
   preallocated values without touching the sequence object.  So, any
   numbers allocated but not used within a session will be lost when
   that session ends, resulting in <quote>holes</quote> in the
   sequence.
  </para>
-->
<para>
如果<replaceable class="parameter">cache</replaceable>大于一，
并且这个序列对象将被用于多会话并发的场合，那么可能会有不可预料的结果发生。
每个会话在每次访问序列对象的过程中都将分配并缓存随后的序列值，
并且相应增加序列对象的<literal>last_value</>。这样，
同一个事务中的随后的<replaceable class="parameter">cache</replaceable>-1
次<function>nextval</>将只是返回预先分配的数值，而不是使用序列对象。
因此，任何在会话中分配了却没有使用的数字都将在会话结束时丢失，
从而导致序列里面出现<quote>空洞</quote>。
</para>

  <!--
<para>
   Furthermore, although multiple sessions are guaranteed to allocate
   distinct sequence values, the values might be generated out of
   sequence when all the sessions are considered.  For example, with
   a <replaceable class="parameter">cache</replaceable> setting of 10,
   session A might reserve values 1..10 and return
   <function>nextval</function>=1, then session B might reserve values
   11..20 and return <function>nextval</function>=11 before session A
   has generated <literal>nextval</literal>=2.  Thus, with a
   <replaceable class="parameter">cache</replaceable> setting of one
   it is safe to assume that <function>nextval</> values are generated
   sequentially; with a <replaceable
   class="parameter">cache</replaceable> setting greater than one you
   should only assume that the <function>nextval</> values are all
   distinct, not that they are generated purely sequentially.  Also,
   <literal>last_value</> will reflect the latest value reserved by
   any session, whether or not it has yet been returned by
   <function>nextval</>.
  </para>
-->
<para>
另外，尽管系统保证为多个会话分配独立的序列值，但是如果考虑所有会话，
那么这个数值可能会丢失顺序。比如，如果<replaceable class="parameter">cache</replaceable>
为 10 ，那么会话 A 保留了 1..10 并且返回<function>nextval</function>=1，
然后会话 B 可能会保留 11..20 然后在会话 A 生成<literal>nextval</literal>=2
之前返回<function>nextval</function>=11。因此，对于
<replaceable class="parameter">cache</replaceable>等于一的情况，
可以安全地假设<function>nextval</>值是顺序生成的；而如果把
<replaceable class="parameter">cache</replaceable>设置为大于一，
那么你只能假设<function>nextval</>值总是不同的，却不按顺序生成。
同样，<literal>last_value</>将反映任何会话保留的最后数值，
不管它是否曾被<function>nextval</>返回。
</para>

  <!--
<para>
   Another consideration is that a <function>setval</> executed on
   such a sequence will not be noticed by other sessions until they
   have used up any preallocated values they have cached.
  </para>
-->
<para>
另外一个考虑是在这样的序列上执行的<function>setval</>
将不会被其它会话注意到，直到它们用光他们自己缓存的数值。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  
<para>
<!--
   Create an ascending sequence called <literal>serial</literal>, starting at 101:
-->
创建一个叫<literal>serial</literal>的递增序列，从 101 开始：
<programlisting>
CREATE SEQUENCE serial START 101;
</programlisting>
  </para>
  
<para>
<!--
   Select the next number from this sequence:
-->
从此序列中选出下一个数字：
<programlisting>
SELECT nextval('serial');

 nextval
---------
     101
</programlisting>
  </para>
  
<para>
<!--
   Select the next number from this sequence:
-->
从此序列中选出下一个数字：
<programlisting>
SELECT nextval('serial');

 nextval
---------
     102
</programlisting>
  </para>

  
<para>
<!--
   Use this sequence in an <command>INSERT</command> command:
-->
在一个<command>INSERT</command>中使用此序列：
<programlisting>
INSERT INTO distributors VALUES (nextval('serial'), 'nothing');
</programlisting>
  </para>
  
<para>
<!--
   Update the sequence value after a <command>COPY FROM</command>:
-->
在一个<command>COPY FROM</command>后更新序列：
<programlisting>
BEGIN;
COPY distributors FROM 'input_file';
SELECT setval('serial', max(id)) FROM distributors;
END;
</programlisting></para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  
<para>
<!-- 
   <command>CREATE SEQUENCE</command> conforms to the <acronym>SQL</acronym>
   standard, with the following exceptions:
-->
<command>CREATE SEQUENCE</command>遵循<acronym>SQL</acronym>标准，
只有下面的例外：
   <itemizedlist>
    <listitem>
<!--
     <para>
      The standard's <literal>AS &lt;data type&gt;</literal> expression is not
      supported.
     </para>
-->
<para>
还不支持标准的<literal>AS &lt;数据类型&gt;</literal>表达式。
</para>
    </listitem>
    <listitem>
     <!--
<para>
      Obtaining the next value is done using the <function>nextval()</>
      function instead of the standard's <command>NEXT VALUE FOR</command>
      expression.
     </para>
-->
<para>
使用<function>nextval()</>函数而不是标准的
<command>NEXT VALUE FOR</command>表达式获取下一个数值。
</para>
    </listitem>
    <listitem>
     <!--
<para>
      The <literal>OWNED BY</> clause is a <productname>PostgreSQL</>
      extension.
     </para>
-->
<para>
<literal>OWNED BY</>子句是<productname>PostgreSQL</>的扩展。
</para>
    </listitem>
   </itemizedlist></para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altersequence"></member>
   <member><xref linkend="sql-dropsequence"></member>
  </simplelist>
 </refsect1>

</refentry>

<!--
doc/src/sgml/ref/create_sequence.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATESEQUENCE">
 <indexterm zone="sql-createsequence">
  <primary>CREATE SEQUENCE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE SEQUENCE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE SEQUENCE</refname>
  <refpurpose>定义一个新的序列发生器</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ TEMPORARY | TEMP ] SEQUENCE <replaceable class="parameter">name</replaceable> [ INCREMENT [ BY ] <replaceable class="parameter">increment</replaceable> ]
    [ MINVALUE <replaceable class="parameter">minvalue</replaceable> | NO MINVALUE ] [ MAXVALUE <replaceable class="parameter">maxvalue</replaceable> | NO MAXVALUE ]
    [ START [ WITH ] <replaceable class="parameter">start</replaceable> ] [ CACHE <replaceable class="parameter">cache</replaceable> ] [ [ NO ] CYCLE ]
    [ OWNED BY { <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable> | NONE } ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>CREATE SEQUENCE</command>创建一个新的序列数
   发生器。这涉及到用名称<replaceable
   class="parameter">name</replaceable>创建并且初始化
   一个新的特殊的单行表。该发生器将由发出该命令的用户所拥有。
  </para>

  <para>
   如果给出一个模式名称，则该序列将将被创建在指定的模式中。否则它会被
   创建在当前模式中。临时序列存在于一个特殊的模式中，因此在创建临时序列
   时不能给出模式名。序列名称必须与同一模式中任何其他序列、表、索引、
   视图或者外部表的名称不同。
  </para>

  <para>
   在序列被创建后，可以使用函数
   <function>nextval</function>、
   <function>currval</function>以及
   <function>setval</function>来操作该序列。这些函数在
   <xref linkend="functions-sequence">中有介绍。
  </para>

  <para>
   尽管无法直接更新一个序列，可以使用这样的查询：

<programlisting>
SELECT * FROM <replaceable>name</replaceable>;
</programlisting>

   来检查一个序列的参数以及当前状态。特别地，序列的
   <literal>last_value</>域显示被任意会话最后一次取得的值（当然，
   在被打印时该值可能已经过时了，因为可能有其他会话正在执行
   <function>nextval</>调用）。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
    <listitem>
     <para>
      如果被指定，只会为这个会话创建序列对象，并且在会话退出时自动
      删除它。当临时序列存在时，已有的同名永久序列（在这个会话中）
      会变得不可见，不过可以用模式限定的名称来引用同名永久序列。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
      要创建的序列的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">increment</replaceable></term>
    <listitem>
     <para>
      可选的子句<literal>INCREMENT BY <replaceable
      class="parameter">increment</replaceable></literal>指定为了
      创建新值会把哪个值加到当前序列值上。一个正值将会创造一个上升
      序列，负值会创造一个下降序列。默认值是 1。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">minvalue</replaceable></term>
    <term><literal>NO MINVALUE</literal></term>
    <listitem>
     <para>
      可选的子句<literal>MINVALUE <replaceable
      class="parameter">minvalue</replaceable></literal>决定一个序列
      能产生的最小值。如果没有提供这个子句或者指定了
      <option>NO MINVALUE</option>，那么会使用默认值。对上升序列
      和下降序列来说，默认值分别是 1 和 -2<superscript>63</>-1。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">maxvalue</replaceable></term>
    <term><literal>NO MAXVALUE</literal></term>
    <listitem>
     <para>
      可选的子句<literal>MAXVALUE <replaceable
      class="parameter">maxvalue</replaceable></literal>决定该序列
      的最大值。如果没有提供这个子句或者指定了
      <option>NO MAXVALUE</option>，那么将会使用默认值。对上升序列
      和下降序列来说，默认值分别是 2<superscript>63</>-1 和 -1。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">start</replaceable></term>
    <listitem>
     <para>
      可选的子句<literal>START WITH <replaceable
      class="parameter">start</replaceable> </literal>允许序列从任何
      地方开始。对于上升序列和下降序列来说，默认的开始值分别是
      <replaceable class="parameter">minvalue</replaceable>和
      <replaceable class="parameter">maxvalue</replaceable>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">cache</replaceable></term>
    <listitem>
     <para>
      可选的子句<literal>CACHE <replaceable
      class="parameter">cache</replaceable></literal>指定要预分配多少
      个序列数并且把它们放在内存中以便快速访问。最小值为 1 （一次只生成
      一个值，即没有缓存），默认值也是 1。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CYCLE</literal></term>
    <term><literal>NO CYCLE</literal></term>
    <listitem>
     <para>
      对于上升序列和下降序列，<literal>CYCLE</literal>选项允许序列
      在分别达到<replaceable
      class="parameter">maxvalue</replaceable>和<replaceable
      class="parameter">minvalue</replaceable>时回卷。如果达到
      该限制，下一个产生的数字将分别是<replaceable
      class="parameter">minvalue</replaceable>和<replaceable
      class="parameter">maxvalue</replaceable>。
     </para>

     <para>
      如果指定了<literal>NO CYCLE</literal>，当序列到达其最大值
      后任何<function>nextval</function>调用将返回一个错误。如果
      <literal>CYCLE</literal>和<literal>NO CYCLE</literal>都没有
      被指定，则默认为<literal>NO CYCLE</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OWNED BY</literal> <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable></term>
    <term><literal>OWNED BY NONE</literal></term>
    <listitem>
     <para>
      <literal>OWNED BY</literal>选项导致序列被与一个特定的表列关联
      在一起，这样如果该列（或者整个表）被删除，该序列也将被自动删除。
      指定的表必须和序列具有相同的拥有者并且在同一个模式中。默认选项
      <literal>OWNED BY NONE</literal>指定该序列不与某个列关联。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   使用<command>DROP SEQUENCE</command>移除一个序列。
  </para>

  <para>
   序列是基于<type>bigint</>算法的，因此范围是不能超过一个八字节
   整数的范围（-9223372036854775808 到 9223372036854775807）。
  </para>

  <para>
   如果对一个将由多个会话并发使用的序列对象使用了大于 1 的<replaceable
   class="parameter">cache</replaceable>设置，可能会得到意想不到的结果。
   每个会话会在访问该序列对象时分配并且缓存后续的序列值，并且相应地增加
   该序列对象的<literal>last_value</>。然后，在该会话中下一次
   <function>nextval</>会做
   <replaceable class="parameter">cache</replaceable>-1，并且简单地
   返回预分配的值而不修改序列对象。因此，任何已分配但没有在会话中使用的
   数字将会在该会话结束时丢失，导致该序列中的<quote>空洞</quote>。
  </para>

  <para>
   进一步，尽管多个会话能分配到不同的序列值，这些值可能会在所有会话都被
   考虑时生成出来。例如，
   <replaceable class="parameter">cache</replaceable>的设置为 10，会话
   A 可能储存值 1..10 并且返回<function>nextval</function>=1，然后会话 
   B 可能储存值 11..20 并且在 A 生成<literal>nextval</literal>=2 之前返回
   <function>nextval</function>=11。因此，如果
   <replaceable class="parameter">cache</replaceable>设置为 1，可以
   安全地假设<function>nextval</>值被顺序地生成。如果<replaceable
   class="parameter">cache</replaceable>设置大于 1，就只能假定
   <function>nextval</>值都是可区分的，但不能保证它们被完全地顺序生成。
   还有，<literal>last_value</>将反映服务于任意会话的最后一个值，不管它
   是否已经被<function>nextval</>返回过。
  </para>

  <para>
   另一个考虑是，在这样一个序列上执行的<function>setval</>将不会通知
   其他会话，直到它们用尽了任何已缓存的预分配值。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   创建一个称作<literal>serial</literal>的上升序列，从 101 开始：
<programlisting>
CREATE SEQUENCE serial START 101;
</programlisting>
  </para>

  <para>
   从这个序列中选取下一个数字：
<programlisting>
SELECT nextval('serial');

 nextval
---------
     101
</programlisting>
  </para>

  <para>
   再从这个序列中选取下一个数字：
<programlisting>
SELECT nextval('serial');

 nextval
---------
     102
</programlisting>
  </para>

  <para>
   在一个<command>INSERT</command>命令中使用这个序列：
<programlisting>
INSERT INTO distributors VALUES (nextval('serial'), 'nothing');
</programlisting>
  </para>

  <para>
   在一次<command>COPY FROM</command>后更新新列值：
<programlisting>
BEGIN;
COPY distributors FROM 'input_file';
SELECT setval('serial', max(id)) FROM distributors;
END;
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>CREATE SEQUENCE</command>符合<acronym>SQL</acronym>
   标准，不过下列除外：
   <itemizedlist>
    <listitem>
     <para>
      不支持标准中的<literal>AS &lt;数据类型&gt;</literal>表达式。
     </para>
    </listitem>
    <listitem>
     <para>
      使用<function>nextval()</>而不是标准的<command>NEXT VALUE FOR</command>
      表达式获取下一个值。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>OWNED BY</>子句是一种<productname>PostgreSQL</>扩展。
     </para>
    </listitem>
   </itemizedlist></para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altersequence"></member>
   <member><xref linkend="sql-dropsequence"></member>
  </simplelist>
 </refsect1>

</refentry>

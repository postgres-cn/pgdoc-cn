<!--
doc/src/sgml/ref/alter_extension.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTEREXTENSION">
 <indexterm zone="sql-alterextension">
  <primary>ALTER EXTENSION</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER EXTENSION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER EXTENSION</refname>
  <refpurpose>
   更改一个扩展的定义
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> UPDATE [ TO <replaceable class="PARAMETER">new_version</replaceable> ]
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> SET SCHEMA <replaceable class="PARAMETER">new_schema</replaceable>
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> ADD <replaceable class="PARAMETER">member_object</replaceable>
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> DROP <replaceable class="PARAMETER">member_object</replaceable>

<phrase>其中 <replaceable class="PARAMETER">member_object</replaceable> 是：</phrase>

  AGGREGATE <replaceable class="PARAMETER">aggregate_name</replaceable> ( <replaceable>aggregate_signature</replaceable> ) |
  CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>) |
  COLLATION <replaceable class="PARAMETER">object_name</replaceable> |
  CONVERSION <replaceable class="PARAMETER">object_name</replaceable> |
  DOMAIN <replaceable class="PARAMETER">object_name</replaceable> |
  EVENT TRIGGER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN DATA WRAPPER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  FUNCTION <replaceable class="PARAMETER">function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) |
  MATERIALIZED VIEW <replaceable class="PARAMETER">object_name</replaceable> |
  OPERATOR <replaceable class="PARAMETER">operator_name</replaceable> (<replaceable class="PARAMETER">left_type</replaceable>, <replaceable class="PARAMETER">right_type</replaceable>) |
  OPERATOR CLASS <replaceable class="PARAMETER">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  OPERATOR FAMILY <replaceable class="PARAMETER">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  [ PROCEDURAL ] LANGUAGE <replaceable class="PARAMETER">object_name</replaceable> |
  SCHEMA <replaceable class="PARAMETER">object_name</replaceable> |
  SEQUENCE <replaceable class="PARAMETER">object_name</replaceable> |
  SERVER <replaceable class="PARAMETER">object_name</replaceable> |
  TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH CONFIGURATION <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH DICTIONARY <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH PARSER <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH TEMPLATE <replaceable class="PARAMETER">object_name</replaceable> |
  TYPE <replaceable class="PARAMETER">object_name</replaceable> |
  VIEW <replaceable class="PARAMETER">object_name</replaceable>

<phrase>并且 <replaceable>aggregate_signature</replaceable> 是：</phrase>

* |
[ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] |
[ [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] ] ORDER BY [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>ALTER EXTENSION</command>更改一个已安装扩展的定义。
   有几种子形式：

   <variablelist>
   <varlistentry>
    <term><literal>UPDATE</literal></term>
    <listitem>
     <para>
      这种形式把该扩展更新到一个新版本。该扩展必须提供一个适当的更新
      脚本（或者一系列脚本）来把当前已安装的版本修改成所要求的版本。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET SCHEMA</literal></term>
    <listitem>
     <para>
      这种形式把该扩展的对象移动到另一个模式中。要使这个命令成功，该扩展
      必须是<firstterm>可重定位的</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD <replaceable class="PARAMETER">member_object</replaceable></literal></term>
    <listitem>
     <para>
      这种形式把一个现有的对象加入到该扩展中。这主要对扩展更新脚本有用。
      该对象后续将被当作该扩展的一个成员。尤其是该对象只有通过删除扩展
      才能删除。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP <replaceable class="PARAMETER">member_object</replaceable></literal></term>
    <listitem>
     <para>
      这种形式从该扩展移除一个成员对象。这主要对扩展更新脚本有用。只有
      撤销该对象与其扩展之间的关联后才能删除该对象。
     </para>
    </listitem>
   </varlistentry>
   </variablelist>

   关于这些操作详见<xref linkend="extend-extensions">。
  </para>

  <para>
   要使用<command>ALTER EXTENSION</command>，你必须拥有该扩展。
   <literal>ADD</>/<literal>DROP</>形式还要求被增加/删除对象的所有权。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <para>
   <variablelist>
    <varlistentry>
     <term><replaceable class="PARAMETER">name</replaceable></term>
     <listitem>
      <para>
       一个已安装扩展的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="PARAMETER">new_version</replaceable></term>
     <listitem>
      <para>
       想要得到的该扩展的新版本。这可以写成一个标识符或者一个字符串。如果没有指定，
       <command>ALTER EXTENSION UPDATE</>会尝试更新到该扩展的控制文件中的
       默认版本。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="PARAMETER">new_schema</replaceable></term>
     <listitem>
      <para>
       该扩展的新模式。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">object_name</replaceable></term>
     <term><replaceable class="parameter">aggregate_name</replaceable></term>
     <term><replaceable class="parameter">function_name</replaceable></term>
     <term><replaceable class="parameter">operator_name</replaceable></term>
     <listitem>
      <para>
       要从该扩展增加或者移除的对象的名称。表、聚集、域、外部表、函数、
       操作符、操作符类、操作符族、序列、文本搜索对象、类型和视图的名称
       可以被模式限定。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>source_type</replaceable></term>
     <listitem>
      <para>
       该转换的源数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>target_type</replaceable></term>
     <listitem>
      <para>
       该转换的目标数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argmode</replaceable></term>

     <listitem>
      <para>
       一个函数或聚集参数的模式：<literal>IN</>、<literal>OUT</>、
       <literal>INOUT</>或者<literal>VARIADIC</>。如果被忽略，默认值是
       <literal>IN</>。注意，<command>ALTER EXTENSION</command>
       并不真正关心<literal>OUT</>参数，因为决定该函数的身份时只需要输入
       参数。因此列出<literal>IN</>、<literal>INOUT</>和
       <literal>VARIADIC</>参数足矣。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argname</replaceable></term>

     <listitem>
      <para>
       一个函数或者聚集参数的名称。注意，
       <command>ALTER EXTENSION</command>并不真正关心参数名称，因为
       决定该函数的身份时只需要参数的数据类型。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argtype</replaceable></term>

     <listitem>
      <para>
       一个函数或聚集参数的数据类型。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">left_type</replaceable></term>
     <term><replaceable class="parameter">right_type</replaceable></term>
     <listitem>
      <para>
       该操作符参数的数据类型（可以用模式限定）。对一个前缀或后缀操作符的缺失的
       参数可以写<literal>NONE</>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <para>
       这是一个噪声词。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   把<literal>hstore</literal>扩展更新到版本 2.0：
<programlisting>
ALTER EXTENSION hstore UPDATE TO '2.0';
</programlisting>
  </para>

  <para>
   把<literal>hstore</literal>扩展的模式更改到<literal>utils</literal>：
<programlisting>
ALTER EXTENSION hstore SET SCHEMA utils;
</programlisting>
  </para>

  <para>
   要向<literal>hstore</literal>扩展增加一个现有函数：
<programlisting>
ALTER EXTENSION hstore ADD FUNCTION populate_record(anyelement, hstore);
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>ALTER EXTENSION</command>是一个<productname>PostgreSQL</>
   扩展。
  </para>
 </refsect1>

 <refsect1 id="SQL-ALTEREXTENSION-see-also">
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createextension"></member>
   <member><xref linkend="sql-dropextension"></member>
  </simplelist>
 </refsect1>
</refentry>

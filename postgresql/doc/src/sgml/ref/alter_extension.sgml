<!--
doc/src/sgml/ref/alter_extension.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTEREXTENSION">
 <indexterm zone="sql-alterextension">
  <primary>ALTER EXTENSION</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER EXTENSION</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
  -->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER EXTENSION</refname>
  <refpurpose>
<!-- 
   change the definition of an extension 
-->  
修改扩展定义
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> UPDATE [ TO <replaceable class="PARAMETER">new_version</replaceable> ]
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> SET SCHEMA <replaceable class="PARAMETER">new_schema</replaceable>
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> ADD <replaceable class="PARAMETER">member_object</replaceable>
ALTER EXTENSION <replaceable class="PARAMETER">name</replaceable> DROP <replaceable class="PARAMETER">member_object</replaceable>

<phrase>where <replaceable class="PARAMETER">member_object</replaceable> is:</phrase>

  AGGREGATE <replaceable class="PARAMETER">aggregate_name</replaceable> ( <replaceable>aggregate_signature</replaceable> ) |
  CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>) |
  COLLATION <replaceable class="PARAMETER">object_name</replaceable> |
  CONVERSION <replaceable class="PARAMETER">object_name</replaceable> |
  DOMAIN <replaceable class="PARAMETER">object_name</replaceable> |
  EVENT TRIGGER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN DATA WRAPPER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  FUNCTION <replaceable class="PARAMETER">function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) |
  MATERIALIZED VIEW <replaceable class="PARAMETER">object_name</replaceable> |
  OPERATOR <replaceable class="PARAMETER">operator_name</replaceable> (<replaceable class="PARAMETER">left_type</replaceable>, <replaceable class="PARAMETER">right_type</replaceable>) |
  OPERATOR CLASS <replaceable class="PARAMETER">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  OPERATOR FAMILY <replaceable class="PARAMETER">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  [ PROCEDURAL ] LANGUAGE <replaceable class="PARAMETER">object_name</replaceable> |
  SCHEMA <replaceable class="PARAMETER">object_name</replaceable> |
  SEQUENCE <replaceable class="PARAMETER">object_name</replaceable> |
  SERVER <replaceable class="PARAMETER">object_name</replaceable> |
  TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH CONFIGURATION <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH DICTIONARY <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH PARSER <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH TEMPLATE <replaceable class="PARAMETER">object_name</replaceable> |
  TYPE <replaceable class="PARAMETER">object_name</replaceable> |
  VIEW <replaceable class="PARAMETER">object_name</replaceable>

<phrase>and <replaceable>aggregate_signature</replaceable> is:</phrase>

* |
[ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] |
[ [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] ] ORDER BY [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!-- 
  <title>Description</title> 
-->
<title>描述</title>

  <para>
<!-- 
   <command>ALTER EXTENSION</command> changes the definition of an installed
   extension.  There are several subforms: 
-->
<command>ALTER EXTENSION</command> 修改一个已安装的扩展的定义。这里有几种方式:

   <variablelist>
   <varlistentry>
    <term><literal>UPDATE</literal></term>
    <listitem>
     <para>
<!-- 
      This form updates the extension to a newer version.  The extension
      must supply a suitable update script (or series of scripts) that can
      modify the currently-installed version into the requested version.
-->
这种方式更新这个扩展到一个新的版本。这个扩展必须满足一个适用的更新脚本(或者一系列脚本)
这样就能修改当前安装版本到一个要求的版本。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET SCHEMA</literal></term>
    <listitem>
     <para>
<!-- 
      This form moves the extension's objects into another schema. The
      extension has to be <firstterm>relocatable</> for this command to
      succeed. 
-->
这种方式移动扩展对象到另一个模式。这个扩展必须<firstterm>relocatable</>
才能使命令成功。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD <replaceable class="PARAMETER">member_object</replaceable></literal></term>
    <listitem>
     <para>
<!-- 
      This form adds an existing object to the extension.  This is mainly
      useful in extension update scripts.  The object will subsequently
      be treated as a member of the extension; notably, it can only be
      dropped by dropping the extension. 
-->
这种方式添加一个已存在对象到扩展。这主要在扩展更新脚本上有用。
这个对象接着会被视为扩展的成员；显而易见，该对象只能通过取消扩展来取消。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP <replaceable class="PARAMETER">member_object</replaceable></literal></term>
    <listitem>
     <para>
<!-- 
      This form removes a member object from the extension.  This is mainly
      useful in extension update scripts.  The object is not dropped, only
      disassociated from the extension.
-->
这个方式从扩展上移除一个成员对象。主要在扩展更新脚本上有用。
这个对象没有被取消, 只是从扩展里分开了。
     </para>
    </listitem>
   </varlistentry>
   </variablelist>
<!-- 
   See <xref linkend="extend-extensions"> for more information about these
   operations. 
-->
参考<xref linkend="extend-extensions"> 来获取更多有关这些操作的信息。
  </para>

  <para>
<!-- 
   You must own the extension to use <command>ALTER EXTENSION</command>.
   The <literal>ADD</>/<literal>DROP</> forms require ownership of the
   added/dropped object as well. 
-->
要使用 <command>ALTER EXTENSION</command>，你必须拥有该扩展。
<literal>ADD</>/<literal>DROP</>方式也要求添加/删除对象的所有权。
  </para>
 </refsect1>

 <refsect1>
<!-- 
  <title>Parameters</title> 
-->
<title>参数</title>

  <para>
   <variablelist>
    <varlistentry>
     <term><replaceable class="PARAMETER">name</replaceable></term>
     <listitem>
      <para>
<!-- 
       The name of an installed extension. 
-->
已安装扩展的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="PARAMETER">new_version</replaceable></term>
     <listitem>
      <para>
<!-- 
       The desired new version of the extension.  This can be written as
       either an identifier or a string literal.  If not specified,
       <command>ALTER EXTENSION UPDATE</> attempts to update to whatever is
       shown as the default version in the extension's control file.
-->
希望的扩展的新版本。这个能被标识符或字面字符重写。如果不是指定的，
<command>ALTER EXTENSION UPDATE</>尝试更新到在扩展的控制文件中显示的默认版本。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="PARAMETER">new_schema</replaceable></term>
     <listitem>
      <para>
<!-- 
       The new schema for the extension. 
-->
扩展的新模式。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">object_name</replaceable></term>
     <term><replaceable class="parameter">aggregate_name</replaceable></term>
     <term><replaceable class="parameter">function_name</replaceable></term>
     <term><replaceable class="parameter">operator_name</replaceable></term>
     <listitem>
      <para>
<!-- 
       The name of an object to be added to or removed from the extension.
       Names of tables,
       aggregates, domains, foreign tables, functions, operators,
       operator classes, operator families, sequences, text search objects,
       types, and views can be schema-qualified.
-->
要添加到扩展里或从扩展中删除的对象的名字。表、聚合、域、外部表、函数、
操作符、操作符类、操作符族、序列、文本搜索对象、类型和可以被模式限定的视图的名字。
      </para>
     </listitem>
    </varlistentry>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>source_type</replaceable></term>
     <listitem>
      <para>       
<!-- 
       The name of the source data type of the cast.
-->    
强制转换的源数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>target_type</replaceable></term>
     <listitem>
      <para>
<!-- 
       The name of the target data type of the cast.
-->
强制转换的目标数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argmode</replaceable></term>

     <listitem>
      <para>
<!-- 
       The mode of a function or aggregate
       argument: <literal>IN</>, <literal>OUT</>,
       <literal>INOUT</>, or <literal>VARIADIC</>.
       If omitted, the default is <literal>IN</>.
       Note that <command>ALTER EXTENSION</command> does not actually pay
       any attention to <literal>OUT</> arguments, since only the input
       arguments are needed to determine the function's identity.
       So it is sufficient to list the <literal>IN</>, <literal>INOUT</>,
       and <literal>VARIADIC</> arguments.
-->
函数或聚合参数的模式：<literal>IN</>、<literal>OUT</>、
<literal>INOUT</>或者<literal>VARIADIC</>。
如果省略的话，默认的是 <literal>IN</>。
请注意，<command>ALTER EXTENSION</command>不关心<literal>OUT</>参数，
因为确认函数的身份只需要输入参数。因此列出<literal>IN</>、
<literal>INOUT</>和<literal>VARIADIC</>参数就足够了。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argname</replaceable></term>

     <listitem>
      <para>
<!-- 
       The name of a function or aggregate argument.
       Note that <command>ALTER EXTENSION</command> does not actually pay
       any attention to argument names, since only the argument data
       types are needed to determine the function's identity.
-->
函数或聚合参数的名称。请注意，<command>ALTER EXTENSION</command>
不关心参数名称，因为确认函数的身份只需要参数数据类型。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argtype</replaceable></term>

     <listitem>
      <para>
<!-- 
       The data type of a function or aggregate argument.
 -->
函数或聚合参数的数据类型。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">left_type</replaceable></term>
     <term><replaceable class="parameter">right_type</replaceable></term>
     <listitem>
      <para>
<!-- 
       The data type(s) of the operator's arguments (optionally
       schema-qualified).  Write <literal>NONE</> for the missing argument
       of a prefix or postfix operator.
 -->
操作符的参数的数据类型(可以有模式修饰)。
为前缀或后缀运算符的丢失参数写<literal>NONE</>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <para>
<!-- 
       This is a noise word.
 -->
这是一个干扰词。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1>
<!-- 
  <title>Examples</title> 
-->
<title>示例</title>

  <para>
<!-- 
   To update the <literal>hstore</literal> extension to version 2.0:
-->
更新<literal>hstore</literal>扩展到版本 2.0:
<programlisting>
ALTER EXTENSION hstore UPDATE TO '2.0';
</programlisting>
  </para>

  <para>
<!-- 
   To change the schema of the <literal>hstore</literal> extension
   to <literal>utils</literal>:
-->
修改<literal>hstore</literal>扩展的模式为<literal>utils</literal>：
<programlisting>
ALTER EXTENSION hstore SET SCHEMA utils;
</programlisting>
  </para>

  <para>
<!-- 
   To add an existing function to the <literal>hstore</literal> extension:
-->
添加一个已存在的函数到<literal>hstore</literal>扩展:
<programlisting>
ALTER EXTENSION hstore ADD FUNCTION populate_record(anyelement, hstore);
</programlisting></para>
 </refsect1>

 <refsect1>
<!-- 
  <title>Compatibility</title> 
-->
<title>兼容性</title>

  <para>
<!-- 
   <command>ALTER EXTENSION</command> is a <productname>PostgreSQL</>
   extension.
 -->
<command>ALTER EXTENSION</command>是一个<productname>PostgreSQL</>扩展。
  </para>
 </refsect1>

 <refsect1 id="SQL-ALTEREXTENSION-see-also">
<!-- 
  <title>See Also</title> 
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createextension"></member>
   <member><xref linkend="sql-dropextension"></member>
  </simplelist>
 </refsect1>
</refentry>
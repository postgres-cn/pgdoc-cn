<!--
doc/src/sgml/ref/pg_dump.sgml
PostgreSQL documentation
-->

<refentry id="APP-PGDUMP">
 <indexterm zone="app-pgdump">
  <primary>pg_dump</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle>pg_dump</refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_dump</refname>

  <refpurpose>
   把<productname>PostgreSQL</productname>数据库抽取为一个脚本文件或其他归档文件
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_dump</command>
   <arg rep="repeat"><replaceable>connection-option</replaceable></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>


 <refsect1 id="pg-dump-description">
  <title>
   描述
  </title>

  <para>
   <application>pg_dump</application>是用于备份一种<productname>PostgreSQL</productname>数据库的工具。即使数据库正在被并发使用，它也能创建一致的备份。<application>pg_dump</application>不阻塞其他用户访问数据库（读取或写入）。
  </para>

  <para>
   转储可以被输出到脚本或归档文件格式。脚本转储是包含 SQL 命令的纯文本文件，它们可以用来重构数据库到它被转储时的状态。要从这样一个脚本恢复，将它喂给<xref linkend="app-psql">。脚本文件甚至可以被用来在其他机器和其他架构上重构数据库。在经过一些修改后，甚至可以在其他 SQL 数据库产品上重构数据库。
  </para>

  <para>
   另一种可选的归档文件格式必须与<xref linkend="app-pgrestore">配合使用来重建数据库。它们允许<application>pg_restore</application>能选择恢复什么，或者甚至在恢复之前对条目重排序。归档文件格式被设计为在架构之间可移植。
  </para>

  <para>
   当使用归档文件格式之一并与<application>pg_restore</application>组合时，<application>pg_dump</application>提供了一种灵活的归档和传输机制。<application>pg_dump</application>可以被用来备份整个数据库，然后<application>pg_restore</application>可以被用来检查归档并/或选择数据库的哪些部分要被恢复。最灵活的输出文件格式是<quote>自定义</quote>格式（<option>-Fc</option>）和<quote>目录</quote>格式（<option>-Fd</option>）。它们允许选择和重排序所有已归档项、支持并行恢复并且默认是压缩的。<quote>目录</quote>格式是唯一一种支持并行转储的格式。
  </para>

  <para>
   当运行<application>pg_dump</application>时，我们应该检查输出中有没有任何警告（打印在标准错误上），特别是考虑到下面列出的限制。
  </para>

 </refsect1>

 <refsect1 id="pg-dump-options">
  <title>选项</title>

  <para>
    下列命令选项控制输出的内容和格式。

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">dbname</replaceable></term>
      <listitem>
       <para>
        指定要被转储的数据库名。如果没有指定，将使用环境变量<envar>PGDATABASE</envar>。如果环境变量也没有设置，则使用指定给该连接的用户名。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-a</></term>
      <term><option>--data-only</></term>
      <listitem>
       <para>
        只转储数据，而不转储模式（数据定义）。表数据、大对象和序列值都会被转储。
       </para>

       <para>
        这个选项类似于指定<option>--section=data</>，但是由于历史原因又不完全相同。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-b</></term>
      <term><option>--blobs</></term>
      <listitem>
       <para>
        在转储中包括大对象。这是当<option>--schema</>、<option>--table</>或<option>--schema-only</>被指定时的默认行为，因此<option>-b</>开关只对在有选择性的转储中增加大对象有用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option></term>
      <term><option>--clean</option></term>
      <listitem>
       <para>
        在输出创建数据库对象的命令之前输出清除（删除）它们的命令
        （除非也指定了<option>--if-exists</>，如果任何对象不存在于
        目的数据库中，恢复可能会产生一些伤害性的错误消息）。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在调用<command>pg_restore</command>时指定该选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-C</></term>
      <term><option>--create</></term>
      <listitem>
       <para>
        使得在输出的开始是一个创建数据库本身并且重新连接到被创建的数据库的命令（通过这种形式的一个脚本，在运行脚本之前你连接的是目标安装中的哪个数据库都没有关系）。如果也指定了<option>--clean</option>，脚本会在重新连接到目标数据库之前先删除它然后再重建。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在你调用<command>pg_restore</command>时指定这个选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-E <replaceable class="parameter">encoding</replaceable></option></term>
      <term><option>--encoding=<replaceable class="parameter">encoding</replaceable></option></term>
      <listitem>
       <para>
        以指定的字符集编码创建转储。在默认情况下，该转储会以该数据库的编码创建（另一种得到相同结果的方式是将<envar>PGCLIENTENCODING</envar>环境变量设置成想要的转储编码）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-f <replaceable class="parameter">file</replaceable></option></term>
      <term><option>--file=<replaceable class="parameter">file</replaceable></option></term>
      <listitem>
       <para>
        将输出发送到指定文件。对于基于输出格式的文件这个参数可以被忽略，在那种情况下将使用标准输出。不过对于目录输出格式必须给定这个参数，在目录输出格式中指定的是一个目录而不是一个文件。在这种情况中，该目录会由<command>pg_dump</command>创建并且不需要以前就存在。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-F <replaceable class="parameter">format</replaceable></option></term>
      <term><option>--format=<replaceable class="parameter">format</replaceable></option></term>
      <listitem>
       <para>
        选择输出的格式。<replaceable>format</replaceable>可以是下列之一：

       <variablelist>
        <varlistentry>
         <term><literal>p</></term>
         <term><literal>plain</></term>
         <listitem>
          <para>
           输出一个纯文本形式的<acronym>SQL</acronym>脚本文件（默认值）。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>c</></term>
         <term><literal>custom</></term>
         <listitem>
          <para>
           输出一个适合于作为<application>pg_restore</application>输入的自定义格式归档。和目录输出格式一起，这是最灵活的输出格式，它允许在恢复时手动选择和排序已归档的项。这种格式在默认情况还会被压缩。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>d</></term>
         <term><literal>directory</></term>
         <listitem>
          <para>
           输出一个适合作为<application>pg_restore</application>输入的目录格式归档。这将创建一个目录，其中每个被转储的表和大对象都有一个文件，外加一个所谓的目录文件，该文件以一种<application>pg_restore</application>能读取的机器可读格式描述被转储的对象。一个目录格式归档能用标准 Unix 工具操纵，例如一个未压缩归档中的文件可以使用<application>gzip</application>工具压缩。这种格式默认情况下是被压缩的并且也支持并行转储。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>t</></term>
         <term><literal>tar</></term>
         <listitem>
          <para>
           输出一个适合于输入到<application>pg_restore</application>中的<command>tar</command>-格式归档。tar-格式可以兼容目录格式，抽取一个tar-格式的归档会产生一个合法的目录格式归档。不过，tar-格式不支持压缩并且在个体表的尺寸上有 8GB 的限制。还有，表数据项的相对顺序不能在恢复过程中被更改。
          </para>
         </listitem>
        </varlistentry>
       </variablelist></para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-i</></term>
      <term><option>--ignore-version</></term>
      <listitem>
       <para>
        一个废弃的选项，目前会被忽略。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j <replaceable class="parameter">njobs</replaceable></></term>
      <term><option>--jobs=<replaceable class="parameter">njobs</replaceable></></term>
      <listitem>
       <para>
        通过同时归档<replaceable class="parameter">njobs</replaceable>个表来运行并行转储。这个选项缩减了转储的时间，但是它也增加了数据库服务器上的负载。你只能和目录输出格式一起使用这个选项，因为这是唯一一种让多个进程能在同一时间写其数据的输出格式。
       </para>
       <para><application>pg_dump</>将打开<replaceable class="parameter">njobs</replaceable> + 1 个到该数据库的连接，因此确保你的<xref linkend="guc-max-connections">设置足够高以容纳所有的连接。
       </para>
       <para>
        在运行一次并行转储时请求数据库对象上的排他锁可能导致转储失败。其原因是，<application>pg_dump</>主控进程会在工作者进程将要稍后转储的对象上请求共享锁，以便确保在转储运行时不会有人删除它们并让它们出错。如果另一个客户端接着请求一个表上的排他锁，那个锁将不会被授予但是会被排入队列等待主控进程的共享锁被释放。因此，任何其他对该表的访问将不会被授予或者将排在排他锁请求之后。这包括尝试转储该表的工作者进程。如果没有任何防范措施，这可能会是一种经典的死锁情况。要检测这种冲突，<application>pg_dump</>工作者进程使用<literal>NOWAIT</>选项请求另一个共享锁。 如果该工作者进程没有被授予这个共享锁，其他某人必定已经在同时请求了一个排他锁并且没有办法继续转储，因此<application>pg_dump</>除了中止转储之外别无选择。
       </para>
       <para>
        对于一个一致的备份，数据库服务器需要支持同步的快照，在<productname>PostgreSQL</productname> 9.2中引入了一种特性。有了这种特性，即便数据库客户端使用不同的连接，也可以保证他们看到相同的数据集。<command>pg_dump -j</command>使用多个数据库连接，它用主控进程连接到数据一次，并且为每一个工作者任务再一次连接数据库。如果没有同步快照特征，在每一个连接中不同的工作者任务将不能被保证看到相同的数据，这可能导致一个不一致的备份。
       </para>
       <para>
        如果你希望运行一个 9.2 之前服务器的并行转储，你需要确保数据库内容从主控进程连接到数据库一直到最后一个工作者任务连接到数据库之间不会改变。做这些最简单的方法是在开始备份之前停止任何访问数据库的数据修改进程（DDL 以及 DML）。当对一个 9.2 之前的<productname>PostgreSQL</productname>服务器运行<command>pg_dump -j</command>时，你还需要指定<option>--no-synchronized-snapshots</option>参数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n <replaceable class="parameter">schema</replaceable></option></term>
      <term><option>--schema=<replaceable class="parameter">schema</replaceable></option></term>
      <listitem>
       <para>
        只转储匹配<replaceable class="parameter">schema</replaceable>的模式，这会选择模式本身以及它所包含的所有对象。当没有指定这个选项时，目标数据库中所有非系统模式都将被转储。多个模式可以通过书写多个<option>-n</>开关来选择。另外，<replaceable class="parameter">schema</replaceable>参数可以被解释为一种根据<application>psql</>'s <literal>\d</>命令所用的相同规则（见<xref linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">）编写的模式，这样多个模式也可以通过在该模式中书写通配字符来选择。在使用通配符时，如果需要阻止 shell 展开通配符需要小心引用该模式，见<xref linkend="pg-dump-examples" endterm="pg-dump-examples-title">。
       </para>

       <note>
        <para>
         当<option>-n</>被指定时，<application>pg_dump</application>不会尝试转储所选模式可能依赖的任何其他数据库对象。因此，无法保证一次指定模式转储的结果能够仅凭其本身被成功地恢复到一个干净的数据库中。
        </para>
       </note>

       <note>
        <para>
         当<option>-n</>被指定时，非模式对象（如二进制大对象）不会被转储。你可以使用<option>--blobs</>开关将二进制大对象加回到该转储中。
        </para>
       </note>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N <replaceable class="parameter">schema</replaceable></option></term>
      <term><option>--exclude-schema=<replaceable class="parameter">schema</replaceable></option></term>
      <listitem>
       <para>
        不转储匹配<replaceable class="parameter">schema</replaceable>模式的任何模式。该模式被根据<option>-n</>所用的相同规则被解释。<option>-N</>可以被给定多次来排除匹配几个模式中任意一个的模式。
       </para>

       <para>
        当<option>-n</>和<option>-N</>都被给定时，该行为是只转储匹配至少一个<option>-n</>开关但是不匹配<option>-N</>开关的模式。如果只有<option>-N</>而没有<option>-n</>，那么匹配<option>-N</>的模式会被从一个正常转储中排除。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-o</></term>
      <term><option>--oids</></term>
      <listitem>
       <para>
        转储对象标识符（<acronym>OID</acronym>）作为每个表数据的一部分。如果你的应用以某种方式引用<acronym>OID</>列（例如在一个外键约束中），应使用这个选项。否则，这个选项不应该被使用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-O</></term>
      <term><option>--no-owner</option></term>
      <listitem>
       <para>
        不输出设置对象拥有关系来匹配原始数据库的命令。默认情况下，<application>pg_dump</application>会发出<command>ALTER OWNER</>或<command>SET SESSION AUTHORIZATION</command>语句来设置被创建的数据库对象的拥有关系。除非该脚本被一个超级用户（或是拥有脚本中所有对象的同一个用户）启动，这些语句都将会失败。要使一个脚本能够被任意用户恢复，但把所有对象的拥有关系都给这个用户，可指定<option>-O</>。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在调用<command>pg_restore</command>时指定该选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option></term>
      <term><option>--no-reconnect</option></term>
      <listitem>
       <para>
        这个选项已经废弃，但是为了向后兼容仍然能被接受。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option></term>
      <term><option>--schema-only</option></term>
      <listitem>
       <para>
        只转储对象定义（模式），而非数据。
       </para>
       <para>
        这个选项是<option>--data-only</>的逆选项。它和指定<option>--section=pre-data --section=post-data</>相似，但是由于历史原因又不完全相同。
       </para>
       <para>
        （不要把这个选项和<option>--schema</>选项混淆，后者在<quote>schema</>的使用上有不同的含义）。
       </para>
       <para>
        要为数据库中表的一个子集排除表数据，见<option>--exclude-table-data</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S <replaceable class="parameter">username</replaceable></option></term>
      <term><option>--superuser=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        指定要在禁用触发器时使用的超级用户的用户名。只有使用<option>--disable-triggers</>时，这个选项才相关（通常，最好省去这个选项，而作为超级用户来启动结果脚本来取而代之）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t <replaceable class="parameter">table</replaceable></option></term>
      <term><option>--table=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        只转储匹配<replaceable class="parameter">table</replaceable>的表（或视图、序列、外部表）。通过写多个<option>-t</>开关可以选择多个表。另外，<replaceable class="parameter">table</replaceable>参数可以被解释为一种根据<application>psql</>'s <literal>\d</>命令所用的相同规则（见<xref linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">）编写的模式，这样多个表也可以通过在该模式中书写通配字符来选择。在使用通配符时，如果需要阻止 shell 展开通配符需要小心引用该模式，见<xref linkend="pg-dump-examples" endterm="pg-dump-examples-title">。
       </para>

       <para>
        当<option>-t</>被使用时，<option>-n</>和<option>-N</>开关不会有效果，因为被<option>-t</>选择的表将被转储而无视那些开关，并且非表对象将不会被转储。
       </para>

       <note>
        <para>
         
         当<option>-t</>被指定时，<application>pg_dump</application>不会尝试转储所选表可能依赖的任何其他数据库对象。因此，无法保证一次指定表转储的结果能够仅凭其本身被成功地恢复到一个干净的数据库中。
        </para>
       </note>

       <note>
        <para>
         <option>-t</>开关的行为不完全向前兼容 8.2 之前的<productname>PostgreSQL</productname>版本。以前，写<literal>-t tab</>将转储所有命名为<literal>tab</>的表，但现在它仅仅转储在你默认搜索路径中可见的那一个。要得到旧的行为，你可以写成<literal>-t '*.tab'</>。还有，你必须写类似<literal>-t sch.tab</>的东西来选择一个特定模式中的一个表，而不是用老的惯用语<literal>-n sch -t tab</>。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T <replaceable class="parameter">table</replaceable></option></term>
      <term><option>--exclude-table=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        不转储匹配<replaceable class="parameter">table</replaceable>模式的任何表。该模式被根据<option>-t</>所用的相同规则被解释。<option>-T</>可以被给定多次来排除匹配几个模式中任意一个的模式。
       </para>

       <para>
        当<option>-t</>和<option>-T</>都被给定时，该行为是只转储匹配至少一个<option>-t</>开关但是不匹配<option>-T</>开关的表。如果只有<option>-T</>而没有<option>-t</>，那么匹配<option>-T</>的表会被从一个正常转储中排除。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</></term>
      <term><option>--verbose</></term>
      <listitem>
       <para>
        指定冗长模式。这将导致<application>pg_dump</application>向标准错误输出详细的对象注释以及转储文件的开始/停止时间，还有进度消息。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-V</></term>
       <term><option>--version</></term>
       <listitem>
       <para>
       <application>pg_dump</application>版本并退出。
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-x</></term>
      <term><option>--no-privileges</></term>
      <term><option>--no-acl</></term>
      <listitem>
       <para>
        防止转储访问特权（授予/收回命令）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-Z <replaceable class="parameter">0..9</replaceable></option></term>
      <term><option>--compress=<replaceable class="parameter">0..9</replaceable></option></term>
      <listitem>
       <para>
        指定要使用的压缩级别。零意味着不压缩。对于自定义归档格式，这会指定个体表数据段的压缩，并且默认是进行中等级别的压缩。对于纯文本输出，设置一个非零压缩级别会导致整个输出文件被压缩，就好像它被<application>gzip</>处理过一样，但是默认是不压缩。tar 归档格式当前完全不支持压缩。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--binary-upgrade</option></term>
      <listitem>
       <para>
        这个选项用于就地升级功能。我们不推荐也不支持把它用于其他目的。这个选项在未来的发行中可能被改变而不做通知。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--column-inserts</option></term>
      <term><option>--attribute-inserts</option></term>
      <listitem>
       <para>
        将数据转储为带有显式列名的<command>INSERT</command>命令（<literal>INSERT INTO
        <replaceable>table</replaceable>
        (<replaceable>column</replaceable>, ...) VALUES
        ...</literal>）。这将使得恢复过程非常慢，这主要用于使转储能够被载入到非<productname>PostgreSQL</productname>数据库中。不过，由于这个选项为每一行都产生一个单独的命令，重载一行时的一个错误只会导致那一行被丢失而不是整个表内容丢失。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--disable-dollar-quoting</></term>
      <listitem>
       <para>
        这个选项禁止在函数体中使用美元符号引用，并且强制它们使用 SQL 标准字符串语法被引用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--disable-triggers</></term>
      <listitem>
       <para>
        只有在创建一个只转储数据的转储时，这个选项才相关。它指示<application>pg_dump</application>包括在数据被重新载入时能够临时禁用目标表上的触发器的命令。如果你在表上有引用完整性检查或其他触发器，并且你在数据重新载入期间不想调用它们，请使用这个选项。
       </para>

       <para>
        当前，为<option>--disable-triggers</>发出的命令必须作为超级用户来执行。因此，你还应当使用<option>-S</>指定一个超级用户名，或者宁可作为一个超级用户启动结果脚本。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在调用<command>pg_restore</command>时指定这个选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--exclude-table-data=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        不转储匹配<replaceable class="parameter">table</replaceable>模式的任何表中的数据。该模式根据<option>-t</>的相同规则被解释。<option>--exclude-table-data</>可以被给定多次来排除匹配多个模式的表。当你需要一个特定表的定义但不想要其中的数据时，这个选项就有用了。
       </para>
       <para>
        要排除数据库中所有表的数据，见<option>--schema-only</>。
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><option>--if-exists</option></term>
      <listitem>
       <para>
        时间条件性命令（即增加一个<literal>IF EXISTS</literal>子句）来清除数据库和其他对象。
        只有同时指定了<option>--clean</>时，这个选项才可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--inserts</option></term>
      <listitem>
       <para>
        将数据转储为<command>INSERT</command>命令（而不是<command>COPY</command>）。这将使得恢复非常慢，这主要用于使转储能够被载入到非<productname>PostgreSQL</productname>数据库中。不过，由于这个选项为每一行都产生一个单独的命令，重载一行时的一个错误只会导致那一行被丢失而不是整个表内容丢失。注意如果你已经重新安排了列序，该恢复可能会一起失败。<option>--column-inserts</option>选项对于列序改变是安全的，但是会更慢。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--lock-wait-timeout=<replaceable class="parameter">timeout</replaceable></option></term>
      <listitem>
       <para>
        在转储的开始从不等待共享表锁的获得。而是在指定的<replaceable class="parameter">timeout</>内不能锁定一个表时失败。超时时长可以用<command>SET statement_timeout</>接受的任何格式指定（允许的值根据你从其转出的服务器版本变化，但是从 7.3 以来的所有版本都接受一个整数表示的毫秒数。如果从 7.3 以前的服务器转出，这个选项会被忽略。）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-security-labels</option></term>
      <listitem>
       <para>
        不转储安全标签。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-synchronized-snapshots</></term>
      <listitem>
       <para>
        这个选项允许对 9.2 以前的服务器运行<command>pg_dump -j</>，详见<option>-j</option>参数的文档。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-tablespaces</option></term>
      <listitem>
       <para>
        不要输出选择表空间的命令。通过这个选项，在恢复期间所有的对象都会被创建在任何作为默认的表空间中。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在调用<command>pg_restore</command>时指定该选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-unlogged-table-data</option></term>
      <listitem>
       <para>
        不转储非日志记录表的内容。这个选项对于表定义（模式）是否被转储没有影响，它只会限制转储表数据。当从一个后备服务器转储时，在非日志记录表中的数据总是会被排除。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--quote-all-identifiers</></term>
      <listitem>
       <para>
        强制引用所有标识符。当为了迁移到一个可能会引入额外关键词的未来版本进行转储时，这个选项很有用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>--section=<replaceable class="parameter">sectionname</replaceable></option></term>
       <listitem>
         <para>
          只转储命名节。节的名称可以是<option>pre-data</>、<option>data</>或<option>post-data</>。这个选项可以被指定多次来选择多个节。默认是转储所有节。
         </para>
         <para>
          数据节包含真正的表数据、大对象内容和序列值。数据后项包括索引、触发器、规则和除了已验证检查约束之外的约束的定义。数据前项包括所有其他数据定义项。
         </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--serializable-deferrable</option></term>
      <listitem>
       <para>
        为转储使用一个<literal>可序列化</literal>事务，以保证所使用的快照与后来的数据库状态是一致的。但是这样做是在事务流中等待一个点，在该点上不能存在异常，这样就不会有转储失败或者导致其他事务带着<literal>serialization_failure</literal>回滚的风险。关于事务隔离和并发控制详见<xref linkend="mvcc">。
       </para>

       <para>
        对于一个只为灾难恢复存在的转储，这个选项没什么益处。如果一个转储被用来在原始数据库持续被更新期间载入一份用于报表或其他只读负载的数据库拷贝时，这个选项就有所帮助。如果没有这个选项，转储可能会反映一个与最终提交事务的任何执行序列都不一致的状态。例如，如果使用了批处理技术，一个批处理在转储中可以显示为关闭，而其中的所有项都不出现。
       </para>

       <para>
        如果 pg_dump 被启动时没有读写事务在活动，则这个选项没有什么不同。如果有读写事务在活动，该转储的启动可能会被延迟一段不确定的时间。一旦开始运行，有没有这个开关的表现是相同的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--use-set-session-authorization</></term>
      <listitem>
       <para>
        输出 SQL-标准的<command>SET SESSION AUTHORIZATION</>命令取代<command>ALTER OWNER</>命令来确定对象的所有关系。这让该转储更加兼容标准，但是取决于该转储中对象的历史，该转储可能无法正常恢复。而且，一个使用<command>SET SESSION AUTHORIZATION</>的转储将一定会要求超级用户特权来正确地恢复，而<command>ALTER OWNER</>要求更少的特权。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-?</></term>
       <term><option>--help</></term>
       <listitem>
       <para>
       显示有关<application>pg_dump</application>命令行参数的帮助并退出。
       </para>
       </listitem>
     </varlistentry>

    </variablelist>
   </para>

   <para>
    下列命令行选项控制数据库连接参数。

    <variablelist>
     <varlistentry>
      <term><option>-d <replaceable class="parameter">dbname</replaceable></></term>
      <term><option>--dbname=<replaceable class="parameter">dbname</replaceable></></term>
      <listitem>
      <para>
       指定要连接到的数据库名。这等效于指定<replaceable
       class="parameter">dbname</replaceable>为命令行上的第一个非选项参数。
      </para>
      <para>
       如果这个参数包含一个<symbol>=</symbol>符号或者以一个合法的<acronym>URI</acronym>前缀（<literal>postgresql://</literal>或<literal>postgres://</literal>）开始，它将被视作一个<parameter>conninfo</parameter>字符串。详见<xref linkend="libpq-connect">。
      </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-h <replaceable class="parameter">host</replaceable></option></term>
      <term><option>--host=<replaceable class="parameter">host</replaceable></option></term>
      <listitem>
       <para>
        指定服务器正在运行的机器的主机名。如果该值开始于一个斜线，它被用作一个 Unix 域套接字的目录。默认是从<envar>PGHOST</envar>环境变量中取得（如果被设置），否则将尝试一次 Unix 域套接字连接。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>--port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
       <para>
        指定服务器正在监听连接的 TCP 端口或本地 Unix 域套接字文件扩展名。默认是放在<envar>PGPORT</envar>环境变量中（如果被设置），否则使用编译在程序中的默认值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U <replaceable>username</replaceable></option></term>
      <term><option>--username=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        要作为哪个用户连接。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</></term>
      <term><option>--no-password</></term>
      <listitem>
       <para>
        从不发出一个口令提示。如果服务器要求口令认证并且没有其他方式提供口令（例如一个<filename>.pgpass</filename>文件），那么连接尝试将失败。这个选项对于批处理任务和脚本有用，因为在其中没有一个用户来输入口令。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-W</option></term>
      <term><option>--password</option></term>
      <listitem>
       <para>
        强制<application>pg_dump</application>在连接到一个数据库之前提示要求一个口令。
       </para>

       <para>
        这个选项从来不是必须的，因为如果服务器要求口令认证，<application>pg_dump</application>将自动提示要求一个口令。但是，<application>pg_dump</application>将浪费一次连接尝试来发现服务器想要一个口令。在某些情况下，值得键入<option>-W</>来避免额外的连接尝试。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--role=<replaceable class="parameter">rolename</replaceable></option></term>
      <listitem>
       <para>
        指定一个用来创建该转储的角色名。这个选项导致<application>pg_dump</>在连接到数据库后发出一个<command>SET ROLE</> <replaceable class="parameter">rolename</>命令。当已认证用户（由<option>-U</>指定）缺少<application>pg_dump</>所需的特权但是能够切换到一个具有所需权利的角色时，这个选项很有用。一些安装有针对直接作为超级用户登录的策略，使用这个选项可以让转储在不违反该策略的前提下完成。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
 </refsect1>

 <refsect1>
  <title>环境</title>

  <variablelist>
   <varlistentry>
    <term><envar>PGDATABASE</envar></term>
    <term><envar>PGHOST</envar></term>
    <term><envar>PGOPTIONS</envar></term>
    <term><envar>PGPORT</envar></term>

    <term><envar>PGUSER</envar></term>
    <listitem>
     <para>
      默认连接参数
     </para>
    </listitem>

   </varlistentry>
  </variablelist>

  <para>
   和大部分其他<productname>PostgreSQL</>工具相似，这个工具也使用<application>libpq</>（见<xref linkend="libpq-envars">）支持的环境变量。
  </para>

 </refsect1>

 <refsect1 id="app-pgdump-diagnostics">
  <title>诊断</title>

  <para>
   <application>pg_dump</application>在内部执行<command>SELECT</command>语句。如果你运行<application>pg_dump</application>时出现问题，确定你能够从正在使用的数据库中选择信息，例如<xref linkend="app-psql">。此外，<application>libpq</application>前端-后端库所使用的任何默认连接设置和环境变量都将适用。
  </para>

  <para>
   <application>pg_dump</application>的数据库活动会被统计收集器正常地收集。如果不想这样，你可以通过<envar>PGOPTIONS</envar>或<literal>ALTER USER</literal>命令设置参数<varname>track_counts</>为假。
  </para>

 </refsect1>


 <refsect1 id="pg-dump-notes">
  <title>注解</title>

  <para>
   如果你的数据库集簇对于<literal>template1</>数据库有任何本地添加，要注意将<application>pg_dump</application>的输出恢复到一个真正的空数据库。否则你很可能由于以增加对象的重复定义而得到错误。要创建一个不带任何本地添加的空数据库，从<literal>template0</>而不是<literal>template1</>复制它，例如：
<programlisting>
CREATE DATABASE foo WITH TEMPLATE template0;
</programlisting>
  </para>

  <para>
   当一个只含数据的转储被选中并且使用了选项<option>--disable-triggers</>时，<application>pg_dump</application>在开始插入数据之前会发出命令禁用用户表上的触发器，并且接着在数据被插入之后发出命令重新启用它们。如果恢复中途被停止，系统目录可能会停留在一种错误状态。
  </para>

  <para>
   tar 归档的成员被限制为小于 8 GB 的尺寸（这是从 tar 文件格式的限制继承而来）。因此如果任何一个表的文本表示超过了该尺寸时，不能使用这种格式。一个 tar 归档和任何其他输出格式的总尺寸没有被限制，不过还是有可能被操作系统限制。
  </para>

  <para>
   <application>pg_dump</application>产生的转储文件不包含优化器用来做出查询计划决定的统计信息。因此，在从一个转储文件恢复后运行<command>ANALYZE</command>来确保最优性能是明智的，详见<xref linkend="vacuum-for-statistics">和<xref linkend="autovacuum">。转储文件也不包含任何<command>ALTER DATABASE ... SET</>命令，这些设置会与数据库用户及其他安装设置一起被<xref linkend="app-pg-dumpall">转储。
  </para>

  <para>
   因为<application>pg_dump</application>被用来传输数据到更新版本的<productname>PostgreSQL</>，<application>pg_dump</application>的输出被认为可以载入到比<application>pg_dump</>版本更新的<productname>PostgreSQL</>服务器中。<application>pg_dump</>也能够从比其版本更旧的<productname>PostgreSQL</>服务器中转储（当前支持回退到版本 7.0）。不过，<application>pg_dump</>无法从比起主版本号更新的<productname>PostgreSQL</>服务器中转储，它甚至将拒绝冒着创建一个非法转储的风险尝试。还有，不保证<application>pg_dump</>的输出能被载入到一个更旧主版本的服务器 &mdash; 即使该转储是从该版本的服务器中被取得也不行。将一个转储文件载入到一个更旧的服务器可能需要手工编辑该转储文件来移除旧服务器无法理解的语法。
  </para>
 </refsect1>

 <refsect1 id="pg-dump-examples">
  <title id="pg-dump-examples-title">实例</title>

  <para>
   要把一个数据库<literal>mydb</>转储到一个 SQL 脚本文件：
<screen>
<prompt>$</prompt> <userinput>pg_dump mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
   要把这样一个脚本重新载入到一个（新创建的）名为<literal>newdb</>的数据库中：

<screen>
<prompt>$</prompt> <userinput>psql -d newdb -f db.sql</userinput>
</screen>
  </para>

  <para>
   要转储一个数据库到一个自定义格式归档文件：

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fc mydb &gt; db.dump</userinput>
</screen>
  </para>

  <para>
   要转储一个数据库到一个目录格式的归档：

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fd mydb -f dumpdir</userinput>
</screen>
  </para>

  <para>
   要用 5 个并行的工作者任务转储一个数据库到一个目录格式的归档：

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fd mydb -j 5 -f dumpdir</userinput>
</screen>
  </para>

  <para>
   要把一个归档文件重新载入到一个（新创建的）名为<literal>newdb</>的数据库：

<screen>
<prompt>$</prompt> <userinput>pg_restore -d newdb db.dump</userinput>
</screen>
  </para>

  <para>
   要转储一个名为<literal>mytab</>的表：

<screen>
<prompt>$</prompt> <userinput>pg_dump -t mytab mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
   要转储<literal>detroit</>模式中名称以<literal>emp</>开始的所有表，排除名为<literal>employee_log</literal>的表：

<screen>
<prompt>$</prompt> <userinput>pg_dump -t 'detroit.emp*' -T detroit.employee_log mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
   要转储名称以<literal>east</>或者<literal>west</>开始并且以<literal>gsm</>结束的所有模式，排除名称包含词<literal>test</>的任何模式：

<screen>
<prompt>$</prompt> <userinput>pg_dump -n 'east*gsm' -n 'west*gsm' -N '*test*' mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
   同样，用正则表达式记号法来合并开关：

<screen>
<prompt>$</prompt> <userinput>pg_dump -n '(east|west)*gsm' -N '*test*' mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
   要转储除了名称以<literal>ts_</literal>开头的表之外的所有数据库对象：

<screen>
<prompt>$</prompt> <userinput>pg_dump -T 'ts_*' mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
   要在<option>-t</>和相关开关中指定一个大写形式或混合大小写形式的名称，你需要双引用该名称，否则它会被折叠到小写形式（见<xref linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">）。但是双引号对于 shell 是特殊的，所以反过来它们必须被引用。因此，要转储一个有混合大小写名称的表，你需要类似这样的东西：

<screen>
<prompt>$</prompt> <userinput>pg_dump -t "\"MixedCaseName\"" mydb &gt; mytab.sql</userinput>
</screen></para>

 </refsect1>

 <refsect1>
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="app-pg-dumpall"></member>
   <member><xref linkend="app-pgrestore"></member>
   <member><xref linkend="app-psql"></member>
  </simplelist>
 </refsect1>

</refentry>

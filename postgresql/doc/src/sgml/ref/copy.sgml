<!--
doc/src/sgml/ref/copy.sgml
PostgreSQL documentation
-->


<refentry id="SQL-COPY">
 <indexterm zone="sql-copy">
  <primary>COPY</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>COPY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>COPY</refname>
  <refpurpose>在一个文件和一个表之间复制数据</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
COPY <replaceable class="parameter">table_name</replaceable> [ ( <replaceable class="parameter">column_name</replaceable> [, ...] ) ]
    FROM { '<replaceable class="parameter">filename</replaceable>' | PROGRAM '<replaceable class="parameter">command</replaceable>' | STDIN }
    [ [ WITH ] ( <replaceable class="parameter">option</replaceable> [, ...] ) ]

COPY { <replaceable class="parameter">table_name</replaceable> [ ( <replaceable class="parameter">column_name</replaceable> [, ...] ) ] | ( <replaceable class="parameter">query</replaceable> ) }
    TO { '<replaceable class="parameter">filename</replaceable>' | PROGRAM '<replaceable class="parameter">command</replaceable>' | STDOUT }
    [ [ WITH ] ( <replaceable class="parameter">option</replaceable> [, ...] ) ]

<phrase>其中 <replaceable class="parameter">option</replaceable> 可以是下列之一：</phrase>

    FORMAT <replaceable class="parameter">format_name</replaceable>
    OIDS [ <replaceable class="parameter">boolean</replaceable> ]
    FREEZE [ <replaceable class="parameter">boolean</replaceable> ]
    DELIMITER '<replaceable class="parameter">delimiter_character</replaceable>'
    NULL '<replaceable class="parameter">null_string</replaceable>'
    HEADER [ <replaceable class="parameter">boolean</replaceable> ]
    QUOTE '<replaceable class="parameter">quote_character</replaceable>'
    ESCAPE '<replaceable class="parameter">escape_character</replaceable>'
    FORCE_QUOTE { ( <replaceable class="parameter">column_name</replaceable> [, ...] ) | * }
    FORCE_NOT_NULL ( <replaceable class="parameter">column_name</replaceable> [, ...] )
    FORCE_NULL ( <replaceable class="parameter">column_name</replaceable> [, ...] )
    ENCODING '<replaceable class="parameter">encoding_name</replaceable>'
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>COPY</command>在
   <productname>PostgreSQL</productname>表和标准文件系统文件之间
   移动数据。<command>COPY TO</command>把一个表的内容复制
   <emphasis>到</>一个文件，而<command>COPY FROM</command>
   则<emphasis>从</>一个文件复制数据到一个表（把数据追加到表中原有数
   据）。<command>COPY TO</command>也能复制一个
   <command>SELECT</>查询的结果。
  </para>

  <para>
   如果指定了一个列列表，<command>COPY</command>将只把指定列的
   数据复制到文件或者从文件复制数据到指定列。如果表中有列不在列列表中，
   <command>COPY FROM</command>将会为那些列插入默认值。
  </para>

  <para>
   带一个文件名的<command>COPY</command>指示
   <productname>PostgreSQL</productname>服务器直接从一个文件读取
   或者写入到一个文件。该文件必须是
   <productname>PostgreSQL</productname>用户（运行服务器的用户 ID）
   可访问的并且应该以服务器的视角来指定其名称。当指定了
   <literal>PROGRAM</literal>时，服务器执行给定的命令并且从该程序的标准
   输出读取或者写入到该程序的标准输入。该程序必须以服务器的视角指定，并且
   必须是<productname>PostgreSQL</productname>用户可执行的。在指定
   <literal>STDIN</literal>或者<literal>STDOUT</literal>时，数据会通过客
   户端和服务器之间的连接传输。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <para>
      一个现有表的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">column_name</replaceable></term>
     <listitem>
     <para>
      可选的要被复制的列列表。如果没有指定列列表，则该表的所有列都会被复制。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">query</replaceable></term>
    <listitem>
     <para>
      其结果要被复制的<xref linkend="sql-select">或者
      <xref linkend="sql-values">命令。注意查询周围的圆括号是必要的。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">filename</replaceable></term>
    <listitem>
     <para>
      输入或者输出文件的路径名。一个输入文件的名称可以是一个绝对或相对路径，
      但一个输出文件的名称必须是绝对路径。Windows 用户可能需要使用一个
       <literal>E''</>字符串并且双写路径名称中使用的任何反斜线。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PROGRAM</literal></term>
    <listitem>
     <para>
      一个要执行的命令。在<command>COPY FROM</command>中，输入
      将从该命令的标准输出读取，而在<command>COPY TO</>中，输出会
      写入到该命令的标准输入。
     </para>
     <para>
      注意该命令是由 shell 调用，因此如果你需要传递任何来自不可信来源的
      参数给 shell 命令，你必须小心地剥离那些可能对 shell 有特殊意义的特殊
      字符。出于安全原因，最好使用一个固定的命令字符串，或者至少避免传递
      任何用户输入到其中。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>STDIN</literal></term>
    <listitem>
     <para>
      指定输入来自客户端应用。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>STDOUT</literal></term>
    <listitem>
     <para>
      指定输出会去到客户端应用。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">boolean</replaceable></term>
    <listitem>
     <para>
      指定选中的选项是应该被关闭还是打开。可以写<literal>TRUE</literal>、
      <literal>ON</>或<literal>1</literal>来启用选项，写
      <literal>FALSE</literal>、<literal>OFF</>或<literal>0</literal>禁用它。
      <replaceable class="parameter">boolean</replaceable>值也可以被省略，
      那样会假定为<literal>TRUE</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FORMAT</literal></term>
    <listitem>
     <para>
      选择要读取或者写入的数据格式：
      <literal>text</>、
      <literal>csv</>（逗号分隔值）或者<literal>binary</>。
      默认是<literal>text</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OIDS</literal></term>
    <listitem>
     <para>
      指定为每一行复制 OID（如果为一个没有 OID 的表指定了
      <literal>OIDS</literal>或者正在复制的是一个<replaceable
      class="parameter">查询</replaceable>，则会出现错误）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FREEZE</literal></term>
    <listitem>
     <para>
      请求复制已经完成了行冻结的数据，就好像在运行
      <command>VACUUM FREEZE</>命令之后复制。这是为了初始
      数据载入的性能而设计的。只有被载入表已经在当前子事务中被创建
      或截断、该事务中没有游标打开并且该事务没有持有更旧的快照时，
      行才会被冻结。
     </para>
     <para>
      注意一旦成功地载入，所有其他会话将能立即看到该数据。这违背了
      普通的 MVCC 可见性规则，指定该选项的用户应该注意这可能会导致
      的潜在问题。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DELIMITER</literal></term>
    <listitem>
     <para>
      指定分隔文件每行中各列的字符。文本格式中默认是一个制表符，
      而<literal>CSV</>格式中默认是一个逗号。这必须是一个单一
      的单字节字符。使用<literal>binary</>格式时不允许这个选项。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULL</literal></term>
    <listitem>
     <para>
      指定表示一个空值的字符串。文本格式中默认是
      <literal>\N</literal>（反斜线-N），<literal>CSV</>格式中默认
      是一个未加引用的空串。在你不想区分空值和空串的情况下，即使在文本
      格式中你也可能更喜欢空串。使用<literal>binary</>格式时不允许这
      个选项。
     </para>

     <note>
      <para>
       在使用<command>COPY FROM</command>时，任何匹配
       这个串的数据项将被存储为空值，因此你应该确定你使用的是和
       <command>COPY TO</command>时相同的串。
      </para>
     </note>

    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>HEADER</literal></term>
    <listitem>
     <para>
      指定文件包含标题行，其中有每一列的名称。在输出时，第一行包含
      来自表的列名。在输入时，第一行会被忽略。只有使用
      <literal>CSV</>格式时才允许这个选项。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>QUOTE</literal></term>
    <listitem>
     <para>
      指定一个数据值被引用时使用的引用字符。默认是双引号。
      这必须是一个单一的单字节字符。只有使用
      <literal>CSV</>格式时才允许这个选项。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ESCAPE</literal></term>
    <listitem>
     <para>
      指定应该出现在一个匹配<literal>QUOTE</>值的数据字符之前
      的字符。默认和<literal>QUOTE</>值一样（这样如果引用字符
      出现在数据中，它会被双写）。这必须是一个单一的单字节字符。
      只有使用<literal>CSV</>格式时才允许这个选项。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FORCE_QUOTE</></term>
    <listitem>
     <para>
      强制必须对每个指定列中的所有非<literal>NULL</>值使用引用。
      <literal>NULL</>输出不会被引用。如果指定了<literal>*</>，
      所有列的非<literal>NULL</>值都将被引用。只有在
      <command>COPY TO</>中使用<literal>CSV</>格式时才允许
      这个选项。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FORCE_NOT_NULL</></term>
    <listitem>
     <para>
      不要把指定列的值与空值串匹配。在空值串就是空串的默认情况下，
      这意味着空串将被读作长度为零的字符串而不是空值（即使它们没有
      被引用）。只有在<command>COPY FROM</>中使用
      <literal>CSV</>格式时才允许这个选项。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FORCE_NULL</></term>
    <listitem>
     <para>
      将指定列的值与空值串匹配（即使它已经被加上引号），并且在找到
      匹配时将该值设置为<literal>NULL</>。在空值串就是空串的默认
      情况下，这会把一个被引用的空串转换为 NULL。
      只有在<command>COPY FROM</>中使用
      <literal>CSV</>格式时才允许这个选项。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ENCODING</></term>
    <listitem>
     <para>
      指定文件被以<replaceable
      class="parameter">encoding_name</replaceable>编码。如果省略
      这个选项，将使用当前的客户端编码。详见下文的注解。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
  <title>输出</title>

  <para>
   在成功完成时，一个<command>COPY</>命令会返回一个形为
<screen>
COPY <replaceable class="parameter">count</replaceable>
</screen>
   的命令标签。
   <replaceable class="parameter">count</replaceable>是被复制
   的行数。
  </para>

  <note>
   <para>
    如果命令不是<literal>COPY ... TO STDOUT</>或者等效的
    <application>psql</>元命令<literal>\copy ... to stdout</>，
    <application>psql</>将只打印这个命令标签。这是为了防止弄混
    命令标签和刚刚打印的数据。
   </para>
  </note>
 </refsect1>

 <refsect1>
  <title>注解</title>

   <para>
    <command>COPY</command>只能被用于纯粹的表，不能用于视图。
    不过你可以写<literal>COPY (SELECT * FROM
    <replaceable class="parameter">viewname</replaceable>) TO ...</literal>。
   </para>

   <para>
    <command>COPY</command>只处理提到的表，它不会从子表复制
    数据或者复制数据到子表中。例如
    <literal>COPY <replaceable class="parameter">table</> TO</literal>
    会显示与<literal>SELECT * FROM ONLY <replaceable
    class="parameter">table</></literal>相同的数据。而<literal>COPY
    (SELECT * FROM <replaceable class="parameter">table</>) TO ...</literal>
    可以被用来转储一个继承层次中的所有数据。
   </para>

   <para>
    你必须拥有被<command>COPY TO</command>读取的表上的选择特权，
    以及被<command>COPY FROM</command>插入的表上的插入特权。
    拥有在命令中列出的列上的特权就足够了。
   </para>

   <para>
    <command>COPY</command>命令中提到的文件会被服务器（而不是
    客户端应用）直接读取或写入。因此它们必须位于数据库服务器（不是客户
    端）的机器上或者是数据库服务器可以访问的。它们必须是
    <productname>PostgreSQL</productname>用户（运行服务器的用户 
    ID）可访问的并且是可读或者可写的。类似地，用<literal>PROGRAM</literal>
    指定的命令也会由服务器（不是客户端应用）直接执行，它也必须是
    <productname>PostgreSQL</productname>用户可以执行的。
    只允许数据库超级用户<command>COPY</command>一个文件或者命令，
    因为它允许读取或者写入服务器有特权访问的任何文件。
   </para>

   <para>
    不要把<command>COPY</command>和
    <application>psql</application>指令
    <command><link linkend="APP-PSQL-meta-commands-copy">\copy</link></command>
    弄混。<command>\copy</command>会调用
    <command>COPY FROM STDIN</command>或者<command>COPY TO
    STDOUT</command>，然后读取/存储一个
    <application>psql</application>客户端可访问的文件中的数据。
    因此，在使用<command>\copy</command>时，文件的可访
    问性和访问权利取决于客户端而不是服务器。
   </para>

   <para>
    我们推荐在<command>COPY</command>中使用的文件名总是
    指定为一个绝对路径。在<command>COPY TO</command>的
    情况下服务器会强制这一点，但是对于
    <command>COPY FROM</command>你可以选择从一个用相对
    路径指定的文件中读取。该路径将根据服务器进程（而不是客户端）
    的工作目录（通常是集簇的数据目录）解释。
   </para>

   <para>
    用<literal>PROGRAM</literal>执行一个命令可能会受到操作系统
    的访问控制机制（如 SELinux）的限制。
   </para>

   <para>
    <command>COPY FROM</command>将调用目标表上的任何触发器
    和检查约束。但是它不会调用规则。
   </para>

   <para>
    <command>COPY</command>输入和输出受到
    <varname>DateStyle</varname>的影响。为了确保到其他
    可能使用非默认<varname>DateStyle</varname>设置的
    <productname>PostgreSQL</productname>安装的可移植性，在使用
    <command>COPY TO</>前应该把
    <varname>DateStyle</varname>设置为<literal>ISO</>。避免转储把
    <varname>IntervalStyle</varname>设置为
    <literal>sql_standard</>的数据也是一个好主意，因为负的区间值可能会
    被具有不同<varname>IntervalStyle</varname>设置的服务器解释错误。
   </para>

   <para>
    即使数据会被服务器直接从一个文件读取或者写入一个文件而不通过
    客户端，输入数据也会被根据<literal>ENCODING</literal>选项或者当前
    客户端编码解释，并且输出数据会被根据<literal>ENCODING</literal>或
    者当前客户端编码进行编码。
   </para>

   <para>
    <command>COPY</command>会在第一个错误处停止操作。这在
    <command>COPY TO</command>的情况下不会导致问题，但是
    在<command>COPY FROM</command>中目标表将已经收到了一
    些行。这些行将不会变得可见或者可访问，但是它们仍然占据磁盘空间。
    如果在一次大型的复制操作中出现错误，这可能浪费相当可观的磁盘空间。
    你可能希望调用<command>VACUUM</command>来恢复被浪费的
    空间。
   </para>

   <para>
    <literal>FORCE_NULL</>和<literal>FORCE_NOT_NULL</>可以被同时
    用在同一列上。这会导致把已被引用的空值串转换为空值并且把未引用的空值
    串转换为空串。
   </para>

 </refsect1>

 <refsect1>
  <title>文件格式</title>

  <refsect2>
   <title>文本格式</title>

   <para>
    在使用<literal>text</>格式时，读取或写入的是一个文本文件，
    其中每一行就是表中的一行。一行中的列被定界字符分隔。列值
    本身是由输出函数产生的或者是可被输入函数接受的属于每个属性
    数据类型的字符串。在为空值的列的位置使用指定的空值串。如果
    输入文件的任何行包含比预期更多或者更少的列，
    <command>COPY FROM</command>将会抛出一个错误。如
    果指定了<literal>OIDS</literal>，在处理用户数据列志气啊，
    会从第一列读取 OID 或者把 OID 写入第一列。
   </para>

   <para>
    数据的结束可以表示为一个只包含反斜线-点号（<literal>\.</>）的
    单一行。从一个文件读取时，数据结束标记并不是必要的，因为文件
    结束符就已经足够用了。只有使用 3.0 客户端协议之前的客户端应用
    复制数据时才需要它。
   </para>

   <para>
    反斜线字符（<literal>\</>）可以被用在
    <command>COPY</command>数据中来引用被用作行或者列定界符的
    字符。特别地，如果下列字符作为一个列值的一部分出现，它们
    <emphasis>必须</>被前置一个反斜线：反斜线本身、新行、回车以及
    当前的定界符字符。
   </para>

   <para>
    <command>COPY TO</command>会不加任何反斜线返回指定的空值串。
    相反，<command>COPY FROM</command>会在移除反斜线之前把输入
    与空值串相匹配。因此，一个空值串（例如<literal>\N</literal>）不会与实
    际的数据值<literal>\N</literal>（它会被表示为<literal>\\N</literal>）搞混。
   </para>

   <para>
    <command>COPY FROM</command>识别下列特殊的反斜线序列：

   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>序列</entry>
       <entry>表示</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal>\b</></entry>
       <entry>退格 (ASCII 8)</entry>
      </row>
      <row>
       <entry><literal>\f</></entry>
       <entry>换页 (ASCII 12)</entry>
      </row>
      <row>
       <entry><literal>\n</></entry>
       <entry>新行 (ASCII 10)</entry>
      </row>
      <row>
       <entry><literal>\r</></entry>
       <entry>回车 (ASCII 13)</entry>
      </row>
      <row>
       <entry><literal>\t</></entry>
       <entry>制表 (ASCII 9)</entry>
      </row>
      <row>
       <entry><literal>\v</></entry>
       <entry>纵向制表 (ASCII 11)</entry>
      </row>
      <row>
       <entry><literal>\</><replaceable>digits</></entry>
       <entry>反斜线后跟一到三个十进制位表示该数字代码对应的字符</entry>
      </row>
      <row>
       <entry><literal>\x</><replaceable>digits</></entry>
       <entry>反斜线加<literal>x</>后跟一到三个十六进制位表示该数字代码对应的字符</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

    当前，<command>COPY TO</command>不会发出一个十进制或十六进制位
    反斜线序列，但是它确实把上面列出的其他序列用于那些控制字符。
   </para>

   <para>
    任何上述表格中没有提到的其他反斜线字符将被当作表示其本身。不过，要注意
    增加不必要的反斜线，因为那可能意外地产生一个匹配数据结束标记（
    <literal>\.</>）或者空值串（默认是<literal>\N</>）的字符串。这些字符串
    将在完成任何其他反斜线处理之前被识别。
   </para>

   <para>
    强烈建议产生<command>COPY</command>数据的应用把数据新行和回车分别
    转换为<literal>\n</>和<literal>\r</>序列。当前可以把一个数据回车表示为
    一个反斜线和回车，把一个数据新行表示为一个反斜线和新行。不过，未来的发行
    可能不会接受这些表示。如果在不同的机器之间（例如从 Unix 到 Windows）
    传输<command>COPY</command>文件，它们也很容易受到破坏。
   </para>

   <para>
    <command>COPY TO</command>将用一个 Unix 风格的新行（
    <quote><literal>\n</></>）终止每一行。运行在 Microsoft Windows
    上的服务器则会输出回车/新行（<quote><literal>\r\n</></>），不过只对
    <command>COPY</>到一个服务器文件这样做。为了做到跨平台一致，
    <command>COPY TO STDOUT</>总是发送<quote><literal>\n</></>而
    不管服务器平台是什么。<command>COPY FROM</command>能够处理以
    新行、回车或者回车/新行结尾的行。为了减少由作为数据的未加反斜线的新行
    或者回车带来的风险，如果输出中的行结束并不完全相似，
    <command>COPY FROM</command>将会抱怨。
   </para>
  </refsect2>

  <refsect2>
   <title>CSV 格式</title>

   <para>
    这种格式选项被用于导入和导出很多其他程序（例如电子表格）使用的逗号
    分隔值（<literal>CSV</>）文件格式。不同于
    <productname>PostgreSQL</productname>标准文本格式使用的转义
    规则，它产生并且识别一般的 CSV 转义机制。
   </para>

   <para>
    每个记录中的值用<literal>DELIMITER</>字符分隔。如果值包含
    定界符字符、<literal>QUOTE</>字符、<literal>NULL</>字符串、
    一个回车或者换行字符，那么整个值会被加上<literal>QUOTE</>字符
    作为前缀或者后缀，并且在该值内<literal>QUOTE</>字符或者
    <literal>ESCAPE</>字符的任何一次出现之前放上转义字符。在输出
    指定列中非<literal>NULL</>值时，还可以使用
    <literal>FORCE_QUOTE</>来强制加上引用。
   </para>

   <para>
    <literal>CSV</>格式没有标准方式来区分<literal>NULL</>值和空字符串。
    <productname>PostgreSQL</>的<command>COPY</>用引用来处理
    这种区分工作。<literal>NULL</>被按照<literal>NULL</>参数字符串输出
    并且不会被引用，而匹配<literal>NULL</>参数字符串的非<literal>NULL</>
    值会被加上引用。例如，使用默认设置时，<literal>NULL</>被写作一个未
    被引用的空字符串，而一个空字符串数据值会被写成带双引号（<literal>""</>）。
    值的读取遵循类似的规则。你可以用<literal>FORCE_NOT_NULL</>来防止
    对指定列的<literal>NULL</>输入比较。你还可以使用
    <literal>FORCE_NULL</>把带引用的空值字符串数据值转换成<literal>NULL</>。
   </para>

   <para>
    因为反斜线在<literal>CSV</>格式中不是一种特殊字符，数据结束标记
    <literal>\.</>也可以作为一个数据值出现。为了避免任何解释误会，在
    一行上作为孤项出现的<literal>\.</>数据值输出时会自动被引用，并且
    输入时如果被引用，则不会被解释为数据结束标记。如果正在载入一个由
    另一个应用创建的文件并且其中具有一个未被引用的列且可能具有
    <literal>\.</>值，你可能需要在输入文件中引用该值。
   </para>

   <note>
    <para>
     <literal>CSV</>格式中，所有字符都是有意义的。一个被空白或者其他
     非 <literal>DELIMITER</>字符围绕的引用值将包括那些字符。在导入
     来自用空白填充<literal>CSV</>行到固定长度的系统的数据时，这可能
     会导致错误。如果出现这种情况，在导入数据到
     <productname>PostgreSQL</>之前，你可能需要预处理该
     <literal>CSV</>文件以移除拖尾的空白。
    </para>
   </note>

   <note>
    <para>
     CSV 格式将识别并且产生带有包含嵌入的回车和换行的引用值的 CSV 
     文件。因此文件并不限于文本格式文件的每个表行一行的形式。
    </para>
   </note>

   <note>
    <para>
     很多程序会产生奇怪的甚至偶尔是不合常理的 CSV 文件，因此该文件
     格式更像是一种习惯而不是标准。因此你可能会碰到一些无法使用这种
     机制导入的文件，并且<command>COPY</>也可能产生其他程序无
     法处理的文件。
    </para>
   </note>

  </refsect2>

  <refsect2>
   <title>二进制格式</title>

   <para>
    <literal>binary</literal>格式选项导致所有数据被以二进制格式
    而不是文本格式存储/读取。它比文本和<literal>CSV</>格式要
    快一些，但是二进制格式文件在不同的机器架构和
    <productname>PostgreSQL</productname>版本之间的可移
    植性要差些。还有，二进制格式与数据格式非常相关。例如不能从
    一个<type>smallint</>列中输出二进制数据并且把它读入到一个
    <type>integer</>列中，虽然这样做在文本格式中是可行的。
   </para>

   <para>
    <literal>binary</>人间格式由一个文件头、零个或者更多个包含
    行数据的元组以及一个文件尾构成。头部和数据都以网络字节序表示。
   </para>

   <note>
    <para>
     7.4 之前的<productname>PostgreSQL</productname>发行
     使用一种不同的二进制文件格式。
    </para>
   </note>

   <refsect3>
    <title>文件头</title>

    <para>
     文件头由 15 字节的固定域构成，后面跟着一个变长的头部扩展区。
     固定域有：

    <variablelist>
     <varlistentry>
      <term>签名</term>
      <listitem>
       <para>
11-字节的序列<literal>PGCOPY\n\377\r\n\0</> &mdash; 注意
零字节是签名的一个必要的部分（该签名是为了能容易地发现文件被
无法正确处理 8 位字符编码的传输所破坏。这个签名将被行尾翻译过
滤器、删除零字节、删除高位或者奇偶修改等改变）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>标志域</term>
      <listitem>
       <para>
32-位整数位掩码，用以表示该文件格式的重要方面。位被编号为
从 0 （<acronym>LSB</>）到 31（<acronym>MSB</>）。
注意这个域以网络字节序存放（最高有效位在前），所有该文件格式
中使用的整数域都是这样。16-31 位被保留用来表示严重的文件格式
问题， 读取者如果在这个范围内发现预期之外的被设置位，它应该
中止。0-15 位被保留用来表示向后兼容的格式问题，读取者应该简单
地略过这个范围内任何预期之外的被设置位。当前只定义了一个标志
位，其他位必须为零：
        <variablelist>
         <varlistentry>
          <term>位 16</term>
          <listitem>
           <para>
            如果为 1，表示数据中包含 OID；如果为 0，则不包含
           </para>
          </listitem>
         </varlistentry>
        </variablelist></para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>头部扩展区长度</term>
      <listitem>
       <para>
32-为整数，表示头部剩余部分的以字节计的长度，不包括其本身。
当前，这个长度为零，并且其后就紧跟着第一个元组。未来对该
格式的更改可能会允许在头部中表示额外的数据。如果读取者不知
道要对头部扩展区数据做什么，可以安静地跳过它。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    </para>

    <para>
头部扩展区域被预期包含一个能自我解释的块的序列。
该标志域并不想告诉读取者扩展数据是什么。详细的
头部扩展内容的设计留给后来的发行去做。
    </para>

    <para>
     这种设计允许向后兼容的头部增加（增加头部扩展块或者设置低位标志位）以及
     非向后兼容的更改（设置高位标志位来表示这类更改并且在需要时向扩展区域
     中增加支持数据）。
    </para>
   </refsect3>

   <refsect3>
    <title>元组</title>
    <para>
每一个元组由一个表示元组中域数量的 16 位整数计数开始（当前，一个表中
的所有元组都应该具有相同的计数，但是这可能不会总是为真）。然后是元组
中的每一个域，它是一个 32 位的长度字，后面则跟随着这么多个字节的域数
据（长度字不包括其本身，并且可以是零）。作为一种特殊情况，-1 表示一个
NULL 域值。在 NULL 情况下，后面不会跟随值字节。
    </para>

    <para>
在域之间没有对齐填充或者任何其他额外的数据。
    </para>

    <para>
当前，一个二进制格式文件中的所有数据值都被假设为二进制格式（格式代码一）。
可以预见未来的扩展可能会增加一个允许独立指定各列的格式代码的头部域。
    </para>

    <para>
要为实际的元组数据决定合适的二进制格式，你应该参考
<productname>PostgreSQL</productname>源码，特别是用于各列
数据类型的<function>*send</>和<function>*recv</>函数（通常可
以在源码的<filename>src/backend/utils/adt/</filename>目录中找到
这些函数）。
    </para>

    <para>
如果文件中包含 OID，OID 域会紧跟在域计数字之后。它是一个普通域，
不过它没有被包含在域计数中。特别地，它有一个长度字 &mdash; 这将
允许容易地处理 4 字节和 8 字节 OID 的选择，并且将允许在需要时把
OID 显示为空值。
    </para>
   </refsect3>

   <refsect3>
    <title>文件尾</title>

    <para>
     文件位由一个包含 -1 的 16 位整数字组成。这很容易与一个
     元组的域计数字区分开。
    </para>

    <para>
     如果一个域计数字不是 -1 也不是期望的列数，读取者应该报告错误。
     这提供了一种针对某种数据不同步的额外检查。
    </para>
   </refsect3>
  </refsect2>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   下面的例子使用竖线（<literal>|</literal>）作为域定界符把一个表复制到客户端：
<programlisting>
COPY country TO STDOUT (DELIMITER '|');
</programlisting>
  </para>

  <para>
   从一个文件中复制数据到<literal>country</>表中：
<programlisting>
COPY country FROM '/usr1/proj/bray/sql/country_data';
</programlisting>
  </para>

  <para>
   只把名称以 'A' 开头的国家复制到一个文件中：
<programlisting>
COPY (SELECT * FROM country WHERE country_name LIKE 'A%') TO '/usr1/proj/bray/sql/a_list_countries.copy';
</programlisting>
  </para>

  <para>
   要复制到一个压缩文件中，你可以用管道把输出导到一个外部压缩程序：
<programlisting>
COPY country TO PROGRAM 'gzip > /usr1/proj/bray/sql/country_data.gz';
</programlisting>
  </para>

  <para>
   这里是一个适合于从<literal>STDIN</literal>复制到表中的数据：
<programlisting>
AF      AFGHANISTAN
AL      ALBANIA
DZ      ALGERIA
ZM      ZAMBIA
ZW      ZIMBABWE
</programlisting>
   注意每一行上的空白实际是一个制表符。
  </para>

  <para>
   下面是用二进制格式输出的相同数据。该数据是用 Unix 工具
   <command>od -c</command>过滤后显示的。该表具有三列，
   第一列类型是<type>char(2)</type>，第二列类型是<type>text</type>，
   第三列类型是<type>integer</type>。所有行在第三列都是空值。
<programlisting>
0000000   P   G   C   O   P   Y  \n 377  \r  \n  \0  \0  \0  \0  \0  \0
0000020  \0  \0  \0  \0 003  \0  \0  \0 002   A   F  \0  \0  \0 013   A
0000040   F   G   H   A   N   I   S   T   A   N 377 377 377 377  \0 003
0000060  \0  \0  \0 002   A   L  \0  \0  \0 007   A   L   B   A   N   I
0000100   A 377 377 377 377  \0 003  \0  \0  \0 002   D   Z  \0  \0  \0
0000120 007   A   L   G   E   R   I   A 377 377 377 377  \0 003  \0  \0
0000140  \0 002   Z   M  \0  \0  \0 006   Z   A   M   B   I   A 377 377
0000160 377 377  \0 003  \0  \0  \0 002   Z   W  \0  \0  \0  \b   Z   I
0000200   M   B   A   B   W   E 377 377 377 377 377 377
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   SQL 标准中没有<command>COPY</command>语句。
  </para>

  <para>
   下列语法用于<productname>PostgreSQL</> 9.0 之前的版本，
   并且仍然被支持：

<synopsis>
COPY <replaceable class="parameter">table_name</replaceable> [ ( <replaceable class="parameter">column_name</replaceable> [, ...] ) ]
    FROM { '<replaceable class="parameter">filename</replaceable>' | STDIN }
    [ [ WITH ]
          [ BINARY ]
          [ OIDS ]
          [ DELIMITER [ AS ] '<replaceable class="parameter">delimiter</replaceable>' ]
          [ NULL [ AS ] '<replaceable class="parameter">null string</replaceable>' ]
          [ CSV [ HEADER ]
                [ QUOTE [ AS ] '<replaceable class="parameter">quote</replaceable>' ]
                [ ESCAPE [ AS ] '<replaceable class="parameter">escape</replaceable>' ]
                [ FORCE NOT NULL <replaceable class="parameter">column_name</replaceable> [, ...] ] ] ]

COPY { <replaceable class="parameter">table_name</replaceable> [ ( <replaceable class="parameter">column_name</replaceable> [, ...] ) ] | ( <replaceable class="parameter">query</replaceable> ) }
    TO { '<replaceable class="parameter">filename</replaceable>' | STDOUT }
    [ [ WITH ]
          [ BINARY ]
          [ OIDS ]
          [ DELIMITER [ AS ] '<replaceable class="parameter">delimiter</replaceable>' ]
          [ NULL [ AS ] '<replaceable class="parameter">null string</replaceable>' ]
          [ CSV [ HEADER ]
                [ QUOTE [ AS ] '<replaceable class="parameter">quote</replaceable>' ]
                [ ESCAPE [ AS ] '<replaceable class="parameter">escape</replaceable>' ]
                [ FORCE QUOTE { <replaceable class="parameter">column_name</replaceable> [, ...] | * } ] ] ]
</synopsis>

   注意在这种语法中，<literal>BINARY</>和<literal>CSV</>被视作独立的关键词，
   而不是<literal>FORMAT</>选项的参数。
  </para>

  <para>
   下列语法用于<productname>PostgreSQL</> 7.3 之前的版本，
   并且仍然被支持：

<synopsis>
COPY [ BINARY ] <replaceable class="parameter">table_name</replaceable> [ WITH OIDS ]
    FROM { '<replaceable class="parameter">filename</replaceable>' | STDIN }
    [ [USING] DELIMITERS '<replaceable class="parameter">delimiter</replaceable>' ]
    [ WITH NULL AS '<replaceable class="parameter">null string</replaceable>' ]

COPY [ BINARY ] <replaceable class="parameter">table_name</replaceable> [ WITH OIDS ]
    TO { '<replaceable class="parameter">filename</replaceable>' | STDOUT }
    [ [USING] DELIMITERS '<replaceable class="parameter">delimiter</replaceable>' ]
    [ WITH NULL AS '<replaceable class="parameter">null string</replaceable>' ]
</synopsis></para>
 </refsect1>
</refentry>

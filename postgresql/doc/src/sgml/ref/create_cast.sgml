<!-- doc/src/sgml/ref/create_cast.sgml -->

<refentry id="SQL-CREATECAST">
 <indexterm zone="sql-createcast">
  <primary>CREATE CAST</primary>
 </indexterm>
 <refmeta>
  <refentrytitle>CREATE CAST</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE CAST</refname>
  <!--
<refpurpose>define a new cast</refpurpose>
-->
<refpurpose>
定义一个用户定义的转换
</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>)
    WITH FUNCTION <replaceable>function_name</replaceable> (<replaceable>argument_type</replaceable> [, ...])
    [ AS ASSIGNMENT | AS IMPLICIT ]

CREATE CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>)
    WITHOUT FUNCTION
    [ AS ASSIGNMENT | AS IMPLICIT ]

CREATE CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>)
    WITH INOUT
    [ AS ASSIGNMENT | AS IMPLICIT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createcast-description">
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE CAST</command> defines a new cast.  A cast
   specifies how to perform a conversion between
   two data types.  For example,
<programlisting>
SELECT CAST(42 AS float8);
</programlisting>
   converts the integer constant 42 to type <type>float8</type> by
   invoking a previously specified function, in this case
   <literal>float8(int4)</>. (If no suitable cast has been defined, the
   conversion fails.)
  </para>
-->
<para>
<command>CREATE CAST</command>定义一个新的转换。一个转换说明如何在两个类型之间进行转换。比如：
<programlisting>
SELECT CAST(42 AS float8);
</programlisting>
通过调用前面指定的函数将整数常量42转化为<type>float8</type>类型，即<type>float8(int4)</type>的形式。
（如果没有定义合适的转换, 转换将失败。） 
</para>

  <!--
<para>
   Two types can be <firstterm>binary coercible</firstterm>, which
   means that the conversion can be performed <quote>for free</quote>
   without invoking any function.  This requires that corresponding
   values use the same internal representation.  For instance, the
   types <type>text</type> and <type>varchar</type> are binary
   coercible both ways.  Binary coercibility is not necessarily a
   symmetric relationship.  For example, the cast
   from <type>xml</type> to <type>text</type> can be performed for
   free in the present implementation, but the reverse direction
   requires a function that performs at least a syntax check.  (Two
   types that are binary coercible both ways are also referred to as
   binary compatible.)
  </para>
-->
<para>
两种形式是二进制可强制转换的，这意味转换可以在不调用函数的情况下自由执行。
这要求相应的值使用相同的内部表示。例如，<type>text</type>和<type>varchar</type>形式都是二进制可强制转换的两种类型。
二进制可可强制转换未必是一个对称的关系。例如： <type>xml</type>到text的转换可以在当前的处理中可直接执行。
但相反的方向的转换需要一个函数来执行，至少一个语法检查。（两种二进制可强制转换的形式也被称为二进制兼容。） 
</para>

  <!--
<para>
   You can define a cast as an <firstterm>I/O conversion cast</> by using
   the <literal>WITH INOUT</literal> syntax. An I/O conversion cast is
   performed by invoking the output function of the source data type, and
   passing the resulting string to the input function of the target data type.
   In many common cases, this feature avoids the need to write a separate
   cast function for conversion. An I/O conversion cast acts the same as
   a regular function-based cast; only the implementation is different.
  </para>
-->
<para>
您可以定义一个转换为使用<literal>WITH INOUT</literal>语法的<firstterm>I/O conversion cast</>转化转换。
一个I/O转化转换通过调用原数据库类型的输出函数来执行，并将结果传给目标数据类型的输入函数。 
</para>

  <!--
<para>
   By default, a cast can be invoked only by an explicit cast request,
   that is an explicit <literal>CAST(<replaceable>x</> AS
   <replaceable>typename</>)</literal> or
   <replaceable>x</><literal>::</><replaceable>typename</>
   construct.
  </para>
-->
<para>
缺省时，只有在明确要求转换的情况下才调用一个转换，也就是一个明确的<literal>CAST(<replaceable>x</> AS  <replaceable>typename</>)</literal>或<replaceable>x</><literal>::</><replaceable>typename</>转换要求。 
</para>

  <!--
<para>
   If the cast is marked <literal>AS ASSIGNMENT</> then it can be invoked
   implicitly when assigning a value to a column of the target data type.
   For example, supposing that <literal>foo.f1</literal> is a column of
   type <type>text</type>, then:
<programlisting>
INSERT INTO foo (f1) VALUES (42);
</programlisting>
   will be allowed if the cast from type <type>integer</type> to type
   <type>text</type> is marked <literal>AS ASSIGNMENT</>, otherwise not.
   (We generally use the term <firstterm>assignment
   cast</firstterm> to describe this kind of cast.)
  </para>
-->
<para>
 如果转换被标记为<literal>AS ASSIGNMENT</>，那么在给目标数据类型的字段赋值的时候，可以隐含调用它。
 比如，假设<literal>foo.f1</literal>是一个类型为<type>text</type>的字段， 那么： 
<programlisting>
INSERT INTO foo (f1) VALUES (42);
</programlisting>
 如果从<type>integer</type>类型到<type>text</type>类型的转换标记为<literal>AS ASSIGNMENT</>，上面的这句就被允许，否则就不允许。
（通常用术语<firstterm>assignment cast</firstterm>来描述这种转换。） 
</para>

  <!--
<para>
   If the cast is marked <literal>AS IMPLICIT</> then it can be invoked
   implicitly in any context, whether assignment or internally in an
   expression.  (We generally use the term <firstterm>implicit
   cast</firstterm> to describe this kind of cast.)
   For example, consider this query:
<programlisting>
SELECT 2 + 4.0;
</programlisting>
   The parser initially marks the constants as being of type <type>integer</>
   and <type>numeric</> respectively.  There is no <type>integer</>
   <literal>+</> <type>numeric</> operator in the system catalogs,
   but there is a <type>numeric</> <literal>+</> <type>numeric</> operator.
   The query will therefore succeed if a cast from <type>integer</> to
   <type>numeric</> is available and is marked <literal>AS IMPLICIT</> &mdash;
   which in fact it is.  The parser will apply the implicit cast and resolve
   the query as if it had been written
<programlisting>
SELECT CAST ( 2 AS numeric ) + 4.0;
</programlisting>
  </para>
-->
<para>
如果转换标记了<literal>AS IMPLICIT</>，那么可以在任何环境下调用，不管是作业还是在一个内部表达式中。
（我们通常使用术语<firstterm>implicit cast</firstterm>来描述这种转换。 ） 例如，考虑下面这个查询：
<programlisting>
SELECT 2 + 4.0;
</programlisting>
解析器初始时标记常量分别为<type>integer</>和<type>numeric</>。 
在系统目录中没有<type>integer</> + <type>numeric</>的操作符， 但是有一个<type>numeric</> + <type>numeric</>操作符。 
若<type>integer</>到<type>numeric</>的转换是可以执行的并且标记为 <literal>AS IMPLICIT</> — 则该查询将会成功执行。
解析器将使用隐性的转换并按所写的查询生成结果：
<programlisting>
SELECT CAST ( 2 AS numeric ) + 4.0;
</programlisting>
</para>

  <!--
<para>
   Now, the catalogs also provide a cast from <type>numeric</> to
   <type>integer</>.  If that cast were marked <literal>AS IMPLICIT</> &mdash;
   which it is not &mdash; then the parser would be faced with choosing
   between the above interpretation and the alternative of casting the
   <type>numeric</> constant to <type>integer</> and applying the
   <type>integer</> <literal>+</> <type>integer</> operator.  Lacking any
   knowledge of which choice to prefer, it would give up and declare the
   query ambiguous.  The fact that only one of the two casts is
   implicit is the way in which we teach the parser to prefer resolution
   of a mixed <type>numeric</>-and-<type>integer</> expression as
   <type>numeric</>; there is no built-in knowledge about that.
  </para>
-->
<para>
现在，目录提供了一个从<type>numeric</>到<type>integer</>的转换。 
如果那个转换标记了<literal>AS IMPLICIT</> —而它并不是— 然后解析器会面临对选择上面的解释还是选择<type>numeric</>常量到<type>integer</>的转换，
然后应用<type>integer</> <literal>+</> <type>integer</>操作符。 
缺乏选择哪一种处理方式的足够信息，系统会放弃执行并返回查询是模棱两可的信息。
两种转换中仅有一个是缺省的方式正是我们设计的方式，我们让解析器更偏向于将<type>numeric</>-和-<type>integer</>的混合表达式的结果视作<type>numeric</>；
没有关于那方面的内置信息。 
</para>

  <!--
<para>
   It is wise to be conservative about marking casts as implicit.  An
   overabundance of implicit casting paths can cause
   <productname>PostgreSQL</productname> to choose surprising
   interpretations of commands, or to be unable to resolve commands at
   all because there are multiple possible interpretations.  A good
   rule of thumb is to make a cast implicitly invokable only for
   information-preserving transformations between types in the same
   general type category.  For example, the cast from <type>int2</type> to
   <type>int4</type> can reasonably be implicit, but the cast from
   <type>float8</type> to <type>int4</type> should probably be
   assignment-only.  Cross-type-category casts, such as <type>text</>
   to <type>int4</>, are best made explicit-only.
  </para>
-->
<para>
在是否将转换标记为隐性的问题上保守一些是明智的。
过于丰富的隐含转换路径 会导致<productname>PostgreSQL</productname>选择让人奇怪的命令解析，或者是完全不能解析命令，因为存在多个可能的解析。
一个好的规则是，只有在同一个通用类型范畴里面的那些可以保留转换信息的类型之间才标记为可隐含调用转换。
比如，从<type>int2</type>到<type>int4</type>可以合理地标记为隐含转换，但是从<type>float8</type>到<type>int4</type>也许应该标记为赋值转换。
跨类型范围的转换，比如<type>text</>到<type>int4</>，只能明确地转换。 
</para>

  <note>
   <!--
<para>
    Sometimes it is necessary for usability or standards-compliance reasons
    to provide multiple implicit casts among a set of types, resulting in
    ambiguity that cannot be avoided as above.  The parser has a fallback
    heuristic based on <firstterm>type categories</> and <firstterm>preferred
    types</> that can help to provide desired behavior in such cases.  See
    <xref linkend="sql-createtype"> for
    more information.
   </para>
-->
<para>
有时，有必要为了可用性和标准支持的原因在一组类型中提供多个隐含转换，导致上述无法避免的模棱两可的问题。
解析器有一个基于<firstterm>type categories</>和<firstterm>preferred types</>的启发式函数回调功能，有助于在这种情况下提供所期望的行为。 
参阅<xref linkend="sql-createtype">获取更多详细信息。 
</para>
  </note>

  <!--
<para>
   To be able to create a cast, you must own the source or the target data type
   and have <literal>USAGE</literal> privilege on the other type.  To create a
   binary-coercible cast, you must be superuser.  (This restriction is made
   because an erroneous binary-coercible cast conversion can easily crash the
   server.)
  </para>
-->
<para>
为了能够创建一个转换，您必须是源或者目标数据类型的所有者。
为了创建一个强制二进制的转换，您必须是超级用户。
（做这个约束的原因是错误的二进制可强迫转换转换可以很容易让服务器崩溃。） 
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

   <variablelist>
    <varlistentry>
     <term><replaceable>source_type</replaceable></term>

     <listitem>
      <!--
<para>
       The name of the source data type of the cast.
      </para>
-->
<para>
转换的源数据类型。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>target_type</replaceable></term>

     <listitem>
      <!--
<para>
       The name of the target data type of the cast.
      </para>
-->
<para>
转换的目标数据类型。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>function_name</replaceable>(<replaceable>argument_type</replaceable> [, ...])</term>

     <listitem>
      <!--
<para>
       The function used to perform the cast.  The function name can
       be schema-qualified.  If it is not, the function will be looked
       up in the schema search path.  The function's result data type must
       match the target type of the cast.   Its arguments are discussed below.
      </para>
-->
<para>
用于执行转换的函数。
这个函数名可以是用模式名修饰的。
如果它没有用模式名修饰， 那么该函数将从模式搜索路径中找出来。
函数的结果数据类型必须匹配转换的目标类型。 它的参数在下面讨论。 
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>WITHOUT FUNCTION</literal></term>

     <listitem>
      <!--
<para>
       Indicates that the source type is binary-coercible to the target type,
       so no function is required to perform the cast.
      </para>
-->
<para>
表明源类型是对目标类型是二进制可强制转换的，所以没有函数需要执行此转换。 
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>WITH INOUT</literal></term>

     <listitem>
      <!--
<para>
       Indicates that the cast is an I/O conversion cast, performed by
       invoking the output function of the source data type, and passing the
       resulting string to the input function of the target data type.
      </para>
-->
<para>
表明转换是I/O转换，通过调用源数据类型的输出函数来执行，并将结果传给目标数据类型的输入函数。 
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>AS ASSIGNMENT</literal></term>

     <listitem>
      <!--
<para>
       Indicates that the cast can be invoked implicitly in assignment
       contexts.
      </para>
-->
<para>
表示转换可以在赋值模式下隐含调用。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>AS IMPLICIT</literal></term>

     <listitem>
      <!--
<para>
       Indicates that the cast can be invoked implicitly in any context.
      </para>
-->
<para>
表示转换可以在任何环境里隐含调用。
</para>
     </listitem>
    </varlistentry>
   </variablelist>

  <!--
<para>
   Cast implementation functions can have one to three arguments.
   The first argument type must be identical to or binary-coercible from
   the cast's source type.  The second argument,
   if present, must be type <type>integer</>; it receives the type
   modifier associated with the destination type, or <literal>-1</>
   if there is none.  The third argument,
   if present, must be type <type>boolean</>; it receives <literal>true</>
   if the cast is an explicit cast, <literal>false</> otherwise.
   (Bizarrely, the SQL standard demands different behaviors for explicit and
   implicit casts in some cases.  This argument is supplied for functions
   that must implement such casts.  It is not recommended that you design
   your own data types so that this matters.)
  </para>
-->
<para>
转换实现函数可以有一到三个参数。
第一个参数的类型必须与转换的源类型相同的，或可以从转换的源类型二进制可强制转换的。
第二个参数，如果存在，必须是<type>integer</>类型；它接收这些与目标类型相关联的类型修饰符，或者若什么都没有则是-1。
第三个参数，如果存在，必须是<type>boolean</>类型；若转换是一个显式类型转换则会收到<literal>true</>，否则是<literal>false</>。
（奇怪的是，在一些情况下SQL标准要求对显式和隐式转换的不同表现。我们不推荐您设计自己的数据类型，这很重要。） 
</para>

  <!--
<para>
   The return type of a cast function must be identical to or
   binary-coercible to the cast's target type.
  </para>
-->
<para>
 一个转换函数的返回类型必须是与转换的目标类型相同或者对转换的目标类型二进制可强制转换 。
</para>

  <!--
<para>
   Ordinarily a cast must have different source and target data types.
   However, it is allowed to declare a cast with identical source and
   target types if it has a cast implementation function with more than one
   argument.  This is used to represent type-specific length coercion
   functions in the system catalogs.  The named function is used to
   coerce a value of the type to the type modifier value given by its
   second argument.
  </para>
-->
<para>
通常，一个转换必须有不同的源和目标数据类型。
然而，若有多于一个参数的转换实现函数，则允许声明一个有相同的源和目标类型的转换。 
这用于表示系统目录中的特定类型的长度强制函数。
命名的函数用于强制一个该类型的值为第二个参数给出的类型修饰符值。 
</para>

  <!--
<para>
   When a cast has different source and
   target types and a function that takes more than one argument, it
   supports converting from one type to another and applying a length
   coercion in a single step.  When no such entry is available, coercion
   to a type that uses a type modifier involves two cast steps, one to
   convert between data types and a second to apply the modifier.
  </para>
-->
<para>
如果一个类型转换的源类型和目标类型不同，并且接收多于一个参数，它就表示从一种类型转换成另外一种类型只用一个步骤，并且同时实施长度转换。
如果没有这样的项可用， 那么转换成一个使用了类型修饰词的类型将涉及两个步骤，一个是在数据类型之间转换， 另外一个是施加修饰词指定的转换。 
</para>

  <!--
<para>
   A cast to or from a domain type currently has no effect.  Casting
   to or from a domain uses the casts associated with its underlying type.
  </para>
-->
<para>
对域类型的转换目前没有作用。转换一般是针对域相关的所属数据类型。
</para>

 </refsect1>

 <refsect1 id="sql-createcast-notes">
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   Use <xref linkend="sql-dropcast"> to remove user-defined casts.
  </para>
-->
<para>
 使用<xref linkend="sql-dropcast">删除用户定义的转换。 
 </para>

  <!--
<para>
   Remember that if you want to be able to convert types both ways you
   need to declare casts both ways explicitly.
  </para>
-->
<para>
 请注意，如果希望能双向转换类型，那么你需要明确地定义两个方向的转换。 
</para>

 <indexterm zone="sql-createcast">
  <primary>cast</primary>
  <secondary>I/O conversion</secondary>
 </indexterm>

  <!--
<para>
   It is normally not necessary to create casts between user-defined types
   and the standard string types (<type>text</>, <type>varchar</>, and
   <type>char(<replaceable>n</>)</type>, as well as user-defined types that
   are defined to be in the string category).  <productname>PostgreSQL</>
   provides automatic I/O conversion casts for that. The automatic casts to
   string types are treated as assignment casts, while the automatic casts
   from string types are
   explicit-only.  You can override this behavior by declaring your own
   cast to replace an automatic cast, but usually the only reason to
   do so is if you want the conversion to be more easily invokable than the
   standard assignment-only or explicit-only setting.  Another possible
   reason is that you want the conversion to behave differently from the
   type's I/O function; but that is sufficiently surprising that you
   should think twice about whether it's a good idea.  (A small number of
   the built-in types do indeed have different behaviors for conversions,
   mostly because of requirements of the SQL standard.)
  </para>
-->
<para>
通常不需要创建用户定义类型与标准字符串类型之间的转换(<type>text</>，<type>varchar</>和<type>char(<replaceable>n</>)</type>，以及被定义为字符串的范畴的用户定义的类型)。 
<productname>PostgreSQL</>为此提供自动I/O转换转换。
字符串类型的自动转换可以认为是分配转换，而来自字符串的自动转换是唯一显式的。
您可以通过声明自己的转换替换系统的自动转换，但是，通常这么做的唯一原因是，你想让转化比标准唯一分配或者唯一显式设置更容易调用。
另一个可能的原因是你想让转化变现的不同于类型的I/O函数；
但是最重要的是您应该反复考虑这是否是一个好主意。（少量内部类型确实对转换有不同的性能要求，大部分是因为要求SQL标准。） 
</para>



  <!--
<para>
   While not required, it is recommended that you continue to follow this old
   convention of naming cast implementation functions after the target data
   type.  Many users are used to being able to cast data types using a
   function-style notation, that is
   <replaceable>typename</>(<replaceable>x</>).  This notation is in fact
   nothing more nor less than a call of the cast implementation function; it
   is not specially treated as a cast.  If your conversion functions are not
   named to support this convention then you will have surprised users.
   Since <productname>PostgreSQL</> allows overloading of the same function
   name with different argument types, there is no difficulty in having
   multiple conversion functions from different types that all use the
   target type's name.
  </para>
-->
<para>
虽然不是必须的，但是还是建议你遵循旧的命名类型转换实现函数的习惯，也就是说， 函数名和目标数据类型同名。
许多用户习惯于使用函数风格的表示法<replaceable>typename</>(<replaceable>x</>)来做数据类型转换。
这种表示法恰好就是调用类型转换实现函数，这样并不会被当作一种类型转换而被特殊看待。
如果你的转换函数没有按照这种传统命名，那么你就会让用户很奇怪。
因为<productname>PostgreSQL</>允许同名不同参数的函数重载，因此同时存在多个从不同类型向同样类型转换的同名转换函数一点问题都没有。 
</para>

  <note>
   <!--
<para>
    Actually the preceding paragraph is an oversimplification: there are
    two cases in which a function-call construct will be treated as a cast
    request without having matched it to an actual function.
    If a function call <replaceable>name</>(<replaceable>x</>) does not
    exactly match any existing function, but <replaceable>name</> is the name
    of a data type and <structname>pg_cast</> provides a binary-coercible cast
    to this type from the type of <replaceable>x</>, then the call will be
    construed as a binary-coercible cast.  This exception is made so that
    binary-coercible casts can be invoked using functional syntax, even
    though they lack any function.  Likewise, if there is no
    <structname>pg_cast</> entry but the cast would be to or from a string
    type, the call will be construed as an I/O conversion cast.  This
    exception allows I/O conversion casts to be invoked using functional
    syntax.
   </para>
-->
<para>
事实上前面所述是过分简化的：在两种情况下函数调用结构被认为是一个转换请求而不需要将其匹配为一个实际函数。
如果函数调用<replaceable>name</>(<replaceable>x</>)不准确匹配任何现有函数，但是<replaceable>name</>是一个数据类型的名称
并且<structname>pg_cast</>从<replaceable>x</>类型提供了一个二进制可强制转换到这个类型，则调用会被解析为一个二进制可强制转换。
即使是没有任何转换函数，也设计了一种异常，二进制可强制转换可以通过使用函数语法来调用， 
同样的，若无<structname>pg_cast</>条目，但转换会到达或者来自一个字符串类型， 调用将会被视为一个I/O转换转换。
该异常情况下允许I/O转换转换通过使用函数语法来调用。
</para>
  </note>

  <note>
   <!--
<para>
    There is also an exception to the exception: I/O conversion casts from
    composite types to string types cannot be invoked using functional
    syntax, but must be written in explicit cast syntax (either
    <literal>CAST</> or <literal>::</> notation).  This exception was added
    because after the introduction of automatically-provided I/O conversion
    casts, it was found too easy to accidentally invoke such a cast when
    a function or column reference was intended.
   </para>
-->
<para>
也还有一种异常中的异常：从复合数据类型向字符串类型的I/O转换不能使用函数语法，必须设计为精确的转换语法（<literal>CAST</> 或 <literal>::</> 声明）
增加这种异常是因为在介绍过自动执行的I/O转换后，用户会发现在一个函数或是字段参考时很容易误执行一个类似的转换。
</para>
  </note>
 </refsect1>


 <refsect1 id="sql-createcast-examples">
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   To create an assignment cast from type <type>bigint</type> to type
   <type>int4</type> using the function <literal>int4(bigint)</literal>:
<programlisting>
CREATE CAST (bigint AS int4) WITH FUNCTION int4(bigint) AS ASSIGNMENT;
</programlisting>
   (This cast is already predefined in the system.)
  </para>
-->
<para>
为了从类型<type>bigint</type>到类型<type>int4</type>创建一个指派映射要通过使用函数<literal>int4(bigint)</literal>: 
<programlisting>
CREATE CAST (bigint AS int4) WITH FUNCTION int4(bigint) AS ASSIGNMENT;
</programlisting>
（这个转换在系统中已经预先定义了。） 
</para>
 </refsect1>

 <refsect1 id="sql-createcast-compat">
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The <command>CREATE CAST</command> command conforms to the
   <acronym>SQL</acronym> standard,
   except that SQL does not make provisions for binary-coercible
   types or extra arguments to implementation functions.
   <literal>AS IMPLICIT</> is a <productname>PostgreSQL</productname>
   extension, too.
  </para>
-->
<para>
<command>CREATE CAST</command>指令符合<acronym>SQL</acronym>标准，除了SQL没有为二进制可强制转换类型或者实现函数的额外参数来实现功能。 
<literal>AS IMPLICIT</>也是一个<productname>PostgreSQL</productname>扩展。 
</para>
 </refsect1>


 <refsect1 id="sql-createcast-seealso">
  <!--
<title>See Also</title>
-->
<title>参见</title>

  <!--
<para>
   <xref linkend="sql-createfunction">,
   <xref linkend="sql-createtype">,
   <xref linkend="sql-dropcast">
  </para>
-->
<para>
   <xref linkend="sql-createfunction">、<xref linkend="sql-createtype"> 和<xref linkend="sql-dropcast">
</para>
 </refsect1>

</refentry>

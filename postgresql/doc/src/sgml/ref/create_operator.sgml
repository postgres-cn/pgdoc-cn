<!--
doc/src/sgml/ref/create_operator.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEOPERATOR">
 <indexterm zone="sql-createoperator">
  <primary>CREATE OPERATOR</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE OPERATOR</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE OPERATOR</refname>
  <refpurpose>定义一个新的操作符</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE OPERATOR <replaceable>name</replaceable> (
    PROCEDURE = <replaceable class="parameter">function_name</replaceable>
    [, LEFTARG = <replaceable class="parameter">left_type</replaceable> ] [, RIGHTARG = <replaceable class="parameter">right_type</replaceable> ]
    [, COMMUTATOR = <replaceable class="parameter">com_op</replaceable> ] [, NEGATOR = <replaceable class="parameter">neg_op</replaceable> ]
    [, RESTRICT = <replaceable class="parameter">res_proc</replaceable> ] [, JOIN = <replaceable class="parameter">join_proc</replaceable> ]
    [, HASHES ] [, MERGES ]
)
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>CREATE OPERATOR</command>定义一个新的操作符
   <replaceable class="parameter">name</replaceable>。定义操作符
   的用户会成为该操作符的拥有者。如果给出一个模式名，该操作符将被创建
   在指定的模式中。否则它会被创建在当前模式中。
  </para>

  <para>
   操作符名称是最多<symbol>NAMEDATALEN</>-1（默认为 63）
   个字符的序列，这些字符可以是：
<literallayout>
+ - * / &lt; &gt; = ~ ! @ # % ^ &amp; | ` ?
</literallayout>

   对名称的选择有一些限制：
   <itemizedlist>
    <listitem>
     <para><literal>--</literal> and <literal>/*</literal>不能出现在
     操作符名称中，因为它们会被当做一段注释的开始。
     </para>
    </listitem>
    <listitem>
     <para>
     多字符操作符名称不能以<literal>+</literal>或者<literal>-</literal>
     结束，除非该名称也包含至少一个下列字符：
<literallayout>
~ ! @ # % ^ &amp; | ` ?
</literallayout>
     例如，<literal>@-</literal>是一个被允许的操作符名称，而
     <literal>*-</literal>不是。这种限制允许
     <productname>PostgreSQL</productname>解析 SQL 兼容的命令
     而无需记号之间的空格。
     </para>
    </listitem>
    <listitem>
     <para>
     将<literal>=&gt;</>用作一个操作符名称已经不被推荐。在未来的发行中
     可能会被禁用。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   在输入时<literal>!=</literal>会被映射为<literal>&lt;&gt;</literal>，
   因此这两个名字总是等效的。
  </para>

  <para>
   必须至少定义<literal>LEFTARG</>和<literal>RIGHTARG</>中的一个。
   对于二元操作符，两者都必须被定义。对于右一元操作符，只应该定义
   <literal>LEFTARG</>，而对于左一元操作符只应该定义
   <literal>RIGHTARG</>。
  </para>

  <para>
   <replaceable class="parameter">function_name</replaceable>过程
   必须在之前已经用<command>CREATE FUNCTION</command>定义好，
   并且必须被定义为接受正确数量的指定类型的参数。
  </para>

  <para>
   其他子句指定可选的操作符优化子句。它们的含义在
   <xref linkend="xoper-optimization">中有详细描述。
  </para>

  <para>
   要创建一个操作符，必须具有参数类型和返回类型上的<literal>USAGE</literal>
   特权，以及底层函数上的<literal>EXECUTE</literal>特权。如果指定了一个
   交换子或者求反器操作符，必须拥有这些操作符。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
        要定义的操作符的名称。允许使用的字符请见上文。名称可以被模式
        限定，例如<literal>CREATE OPERATOR myschema.+ (...)</>。如果
        没有被模式限定，该操作符将被创建在当前模式中。如果两个同一模式
        中的操作符在不同的数据类型上操作，它们可以具有相同的名称。这
        被称为<firstterm>重载</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">function_name</replaceable></term>
      <listitem>
       <para>
        用来实现这个操作符的函数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">left_type</replaceable></term>
      <listitem>
       <para>
        这个操作符的左操作数（如果有）的数据类型。忽略这个选项
        可以表示一个左一元操作符。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">right_type</replaceable></term>
      <listitem>
       <para>
        这个操作符的右操作数（如果有）的数据类型。忽略这个选项
        可以表示一个右一元操作符。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">com_op</replaceable></term>
      <listitem>
       <para>
        这个操作符的交换子。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">neg_op</replaceable></term>
      <listitem>
       <para>
        这个操作符的求反器。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">res_proc</replaceable></term>
      <listitem>
       <para>
        用于这个操作符的限制选择度估计函数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">join_proc</replaceable></term>
      <listitem>
       <para>
        用于这个操作符的连接选择度估算函数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>HASHES</literal></term>
      <listitem>
       <para>
       表示这个操作符可以支持哈希连接。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>MERGES</literal></term>
      <listitem>
       <para>
       表示这个操作符可以支持归并连接。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

  <para>
   要在<replaceable
   class="parameter">com_op</replaceable>
   或者其他可选参数中给出一个模式限定的操作符名称，
   请使用<literal>OPERATOR()</>语法，例如：
<programlisting>
COMMUTATOR = OPERATOR(myschema.===) ,
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   进一步的信息可参考<xref linkend="xoper">。
  </para>

  <para>
   无法在<command>CREATE OPERATOR</>中指定一个操作符的
   词法优先级，因为解析器的优先级行为是硬写在代码中的。详见
   <xref linkend="sql-precedence">。
  </para>

  <para>
   The obsolete options 
   废弃的选项<literal>SORT1</>、<literal>SORT2</>、
   <literal>LTCMP</>以及<literal>GTCMP</>以前被用来指定与支持
   归并连接的操作符相关的排序操作符的名称。现在不再需要它们了，因为
   相关操作符的信息可以在 B-树的操作符族中找到。如果给出了这些选项
   之一，它会被忽略（除非是为了隐式设置<literal>MERGES</>为真）。
  </para>

  <para>
   使用<xref linkend="sql-dropoperator">从数据库中删除用户定义的操作符。
   使用<xref linkend="sql-alteroperator">修改数据库中的操作符。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   下面的命令为数据类型<type>box</type>定义了一种新的操作符--面积相等：
<programlisting>
CREATE OPERATOR === (
    LEFTARG = box,
    RIGHTARG = box,
    PROCEDURE = area_equal_procedure,
    COMMUTATOR = ===,
    NEGATOR = !==,
    RESTRICT = area_restriction_procedure,
    JOIN = area_join_procedure,
    HASHES, MERGES
);
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>CREATE OPERATOR</command>是一种
   <productname>PostgreSQL</productname>扩展。在 SQL 
   标准中没有用户定义操作符的规定。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alteroperator"></member>
   <member><xref linkend="sql-createopclass"></member>
   <member><xref linkend="sql-dropoperator"></member>
  </simplelist>
 </refsect1>
</refentry>

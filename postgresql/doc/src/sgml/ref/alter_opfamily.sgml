<!--
doc/src/sgml/ref/alter_opfamily.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTEROPFAMILY">
 <indexterm zone="sql-alteropfamily">
  <primary>ALTER OPERATOR FAMILY</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER OPERATOR FAMILY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER OPERATOR FAMILY</refname>
  <refpurpose>更改一个操作符族的定义</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> ADD
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> <replaceable class="parameter">operator_name</replaceable> ( <replaceable class="parameter">op_type</replaceable>, <replaceable class="parameter">op_type</replaceable> ) [ FOR SEARCH | FOR ORDER BY <replaceable class="parameter">sort_family_name</replaceable> ]
   | FUNCTION <replaceable class="parameter">support_number</replaceable> [ ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] ) ] <replaceable class="parameter">function_name</replaceable> ( <replaceable class="parameter">argument_type</replaceable> [, ...] )
  } [, ... ]
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> DROP
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] )
   | FUNCTION <replaceable class="parameter">support_number</replaceable> ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] )
  } [, ... ]
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> RENAME TO <replaceable>new_name</replaceable>
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> OWNER TO <replaceable>new_owner</replaceable>
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> SET SCHEMA <replaceable>new_schema</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>ALTER OPERATOR FAMILY</command>更改一个操作符族
   的定义。你能增加操作符以及支持函数到该家族、从该族中移除它们或者更改
   该族的名称或者拥有者。
  </para>

  <para>
   在用<command>ALTER OPERATOR FAMILY</command>增加操作符和
   支持函数到一个族中时，它们不是族内任何特定操作符类的组成部分，而只是
   <quote>松散</>地存在于该族中。这表示这些操作符和函数与该族的语义兼
   容，但是没有被任何特定索引的正确功能所要求（所要求的操作符和函数应该
   被作为一个操作符类的一部分声明，见<xref linkend="sql-createopclass">）。
   <productname>PostgreSQL</productname>将允许一个族的松散成员在
   任何时候被从该族中删除，但是在删除一个操作符类的成员之前，必须已经删
   除整个类以及依赖于该成员的索引。具有代表性的是，单一数据类型操作符和
   函数是操作符类的一部分，因为在特定数据类型上的索引需要它们的支持。而
   多数据类型操作符和函数则被作为该族的松散成员。
  </para>

  <para>
   要使用<command>ALTER OPERATOR FAMILY</>，你必须是超级用户（
   做这样的限制是因为一个错误的操作符族定义可能会迷惑服务器甚至让它崩溃）。
  </para>

  <para>
   <command>ALTER OPERATOR FAMILY</command>目前不检测操作符族
   定义是否包括该索引方法所要求的所有操作符和函数，也不检查操作符和函数是
   否形成了一个有理的集合。定义一个合法的操作符族是用户的责任。
  </para>

  <para>
   进一步的信息请参考<xref linkend="xindex">。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
      一个现有操作符族的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">index_method</replaceable></term>
    <listitem>
     <para>
      这个操作符族所应用的索引方法的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">strategy_number</replaceable></term>
    <listitem>
     <para>
      与该操作符族相关的一个操作符的索引方法策略号。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">operator_name</replaceable></term>
    <listitem>
     <para>
      与该操作符族相关的一个操作符的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">op_type</replaceable></term>
    <listitem>
     <para>
      在一个<literal>OPERATOR</>子句中指定该操作符的操作数数据类型，
      或者用<literal>NONE</>来表示一个左一元或者右一元操作符。不同于
      <command>CREATE OPERATOR CLASS</>中类似的语法，操作数数据
      类型总是必须被指定。
     </para>

     <para>
      在一个<literal>ADD FUNCTION</>子句中指定该函数意图支持的操作数
      数据类型（如果不同于该函数的输入数据类型）。对于 B-树比较函数和哈希
      函数，有必要指定<replaceable
      class="parameter">op_type</replaceable>，因为该函数的输入数据类型
      总是正确的。对于 B-树排序支持函数和 GiST、SP-GiST 和 GIN 操作符类中
      的所有函数，有必要指定该函数要使用的操作数数据类型。
     </para>

     <para>
      在一个<literal>DROP FUNCTION</>子句中，必须指定该函数要支持的操
      作数数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">sort_family_name</replaceable></term>
    <listitem>
     <para>
      一个现有<literal>btree</literal>操作符族的名称（可能是模式限定的），
      它描述与一个排序操作符相关的排序顺序。
     </para>

     <para>
      如果既没有指定<literal>FOR SEARCH</>也没有指定<literal>FOR ORDER BY</>，
      默认值是<literal>FOR SEARCH</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">support_number</replaceable></term>
    <listitem>
     <para>
      一个与该操作符族相关的函数的索引方法支持过程编号。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <para>
      作为该操作符族的一种索引方法支持过程的函数的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argument_type</replaceable></term>
    <listitem>
     <para>
      该函数的参数数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
     <para>
      该操作符族的新名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_owner</replaceable></term>
    <listitem>
     <para>
      该操作符族的新拥有者。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
     <para>
      该操作符族的新模式。
     </para>
    </listitem>
   </varlistentry>
 </variablelist>

  <para>
   <literal>OPERATOR</>和<literal>FUNCTION</>子句可以以任何顺序出现。
  </para>

 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   注意<literal>DROP</>语法只通过策略或者支持号以及输入数据类型指定该
   操作符族中的<quote>slot</>。占用这个槽的操作符或函数的名称不会被提及。
   还有，对于<literal>DROP FUNCTION</>，要指定的类型是该函数意图支持
   的输入数据类型。对于 GiST、SP-GiST 以及 GIN 索引，可能无需对该函数的
   实际输入参数类型做任何事情。
  </para>

  <para>
   因为索引机制在使用函数之前不会检查其上的访问权限，包括一个操作符族中的
   函数或操作符都等同于授予了其上的公共执行权限。这对于操作符族中很有用的
   这类函数来说，这通常不成问题。
  </para>

  <para>
   操作符应该由 SQL 函数定义。一个 SQL 函数很可能被内联到调用查询中，这将
   阻止优化器识别出该查询匹配一个索引。
  </para>

  <para>
   在<productname>PostgreSQL</productname> 8.4 之前，
   <literal>OPERATOR</>子句可以包括一个<literal>RECHECK</>选项。这不再
   被支持，因为一个索引操作符是否为<quote>lossy</>现在会在运行时即时决定。
   这允许高效地处理一个操作符可能或者不可能为有损的情况。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   下列示例命令为一个操作符族增加跨数据类型的操作符和支持函数，该操
   作符族已经包含用于数据类型<type>int4</>以及<type>int2</>的 B-树
   操作符类。
  </para>

<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree ADD

  -- int4 vs int2
  OPERATOR 1 &lt; (int4, int2) ,
  OPERATOR 2 &lt;= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 &gt;= (int4, int2) ,
  OPERATOR 5 &gt; (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2) ,

  -- int2 vs int4
  OPERATOR 1 &lt; (int2, int4) ,
  OPERATOR 2 &lt;= (int2, int4) ,
  OPERATOR 3 = (int2, int4) ,
  OPERATOR 4 &gt;= (int2, int4) ,
  OPERATOR 5 &gt; (int2, int4) ,
  FUNCTION 1 btint24cmp(int2, int4) ;
</programlisting>

  <para>
   再次移除这些项：
  </para>

<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree DROP

  -- int4 vs int2
  OPERATOR 1 (int4, int2) ,
  OPERATOR 2 (int4, int2) ,
  OPERATOR 3 (int4, int2) ,
  OPERATOR 4 (int4, int2) ,
  OPERATOR 5 (int4, int2) ,
  FUNCTION 1 (int4, int2) ,

  -- int2 vs int4
  OPERATOR 1 (int2, int4) ,
  OPERATOR 2 (int2, int4) ,
  OPERATOR 3 (int2, int4) ,
  OPERATOR 4 (int2, int4) ,
  OPERATOR 5 (int2, int4) ,
  FUNCTION 1 (int2, int4) ;
</programlisting>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   在 SQL 标准中没有
   <command>ALTER OPERATOR FAMILY</command>语句。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createopfamily"></member>
   <member><xref linkend="sql-dropopfamily"></member>
   <member><xref linkend="sql-createopclass"></member>
   <member><xref linkend="sql-alteropclass"></member>
   <member><xref linkend="sql-dropopclass"></member>
  </simplelist>
 </refsect1>
</refentry>

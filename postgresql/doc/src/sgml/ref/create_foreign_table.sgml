<!-- doc/src/sgml/ref/create_foreign_table.sgml -->

<refentry id="SQL-CREATEFOREIGNTABLE">
 <indexterm zone="sql-createforeigntable">
  <primary>CREATE FOREIGN TABLE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE FOREIGN TABLE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE FOREIGN TABLE</refname>
  <refpurpose>定义一个新的外部表</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE FOREIGN TABLE [ IF NOT EXISTS ] <replaceable class="PARAMETER">table_name</replaceable> ( [
    <replaceable class="PARAMETER">column_name</replaceable> <replaceable class="PARAMETER">data_type</replaceable> [ OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ... ] ) ] [ COLLATE <replaceable>collation</replaceable> ] [ <replaceable class="PARAMETER">column_constraint</replaceable> [ ... ] ]
    [, ... ]
] )
  SERVER <replaceable class="parameter">server_name</replaceable>
[ OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ... ] ) ]

<phrase>其中 <replaceable class="PARAMETER">column_constraint</replaceable> 是：</phrase>

[ CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ]
{ NOT NULL |
  NULL |
  DEFAULT <replaceable>default_expr</replaceable> }
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="SQL-CREATEFOREIGNTABLE-description">
  <title>描述</title>

  <para>
   <command>CREATE FOREIGN TABLE</command>在当前数据库中创建
   一个新的外部表。该表将由发出这个命令的用户所拥有。
  </para>

  <para>
   如果给定了一个模式名称（例如<literal>CREATE FOREIGN TABLE
   myschema.mytable ...</>），那么该表会被创建在指定的模式中。
   否则它会被创建在当前模式中。该外部表的名称必须与同一个模式中
   的任何其他外部表、表、序列、索引、视图或者物化视图区分开来。
  </para>

  <para>
   <command>CREATE FOREIGN TABLE</command>还将自动创建
   一个数据类型来表示该外部表行相应的组合类型。因此，外部表不能和
   同一个模式中任何现有的数据类型同名。
  </para>

  <para>
   要创建一个外部表，你必须具有该外部服务器上的<literal>USAGE</literal>
   特权，以及该表中用到的所有列类型上的<literal>USAGE</literal>特权。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>

   <varlistentry>
    <term><literal>IF NOT EXISTS</></term>
    <listitem>
     <para>
      已经存在同名关系时不要抛出错误。这种情况下会发出一个提示。注意，
      并不保证已经存在的关系与将要创建的那一个相似。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
     <para>
      要创建的表的名称（可以被模式限定）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
     <para>
      要在新表中创建的列名。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">data_type</replaceable></term>
    <listitem>
     <para>
      该列的数据类型。可以包括数组指示符。更多
      <productname>PostgreSQL</productname>支持的数据类型可见<xref
      linkend="datatype">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOT NULL</></term>
    <listitem>
     <para>
      该列不允许包含空值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULL</></term>
    <listitem>
     <para>
      该列可以包含空值，这是默认值。
     </para>

     <para>
      提供这个子句只是为了兼容非标准的 SQL 数据库。在新的应用中
      不鼓励使用它。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT
    <replaceable>default_expr</replaceable></literal></term>
    <listitem>
     <para>
      <literal>DEFAULT</>子句为包含它的列定义赋予一个默认数据值。该
      值是任意不包含变量的表达式（不允许子查询和对当前表中其他列的交叉
      引用）。默认值表达式的数据类型必须匹配列的数据类型。
     </para>

     <para>
      默认值表达式将被用在任何没有指定列值的插入操作中。如果一列没有
      默认值，则默认值为空值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">server_name</replaceable></term>
    <listitem>
     <para>
      要用于该外部表的一个现有外部服务器的名称。有关定义一个服务器
      的细节可以参考<xref
      linkend="SQL-CREATESERVER">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ...] )</literal></term>
    <listitem>
     <para>
      要与新外部表或者它的一个列相关联的选项。被允许的选项名称和值是与
      每一个外部数据包装器相关的，并且它们会被该外部数据包装器的验证器
      函数验证。不允许重复的选项名称（不过一个表选项和一个列选项重名是
      可以的）。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 </refsect1>


 <refsect1 id="SQL-CREATEFOREIGNTABLE-examples">
  <title>示例</title>

  <para>
   创建外部表<structname>films</>，服务器<structname>film_server</>访问它：

<programlisting>
CREATE FOREIGN TABLE films (
    code        char(5) NOT NULL,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
)
SERVER film_server;
</programlisting></para>

 </refsect1>

 <refsect1 id="SQL-CREATEFOREIGNTABLE-compatibility">
  <title id="SQL-CREATEFOREIGNTABLE-compatibility-title">兼容性</title>

  <para>
   <command>CREATE FOREIGN TABLE</command>命令大部分符合
   <acronym>SQL</acronym>标准。不过，与
   <link linkend="sql-createtable"><command>CREATE TABLE</></link>
   很相似，它允许<literal>NULL</>约束以及零列外部表。能够指定一个默认值
   也是一种<productname>PostgreSQL</>扩展。
  </para>

 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterforeigntable"></member>
   <member><xref linkend="sql-dropforeigntable"></member>
   <member><xref linkend="sql-createtable"></member>
   <member><xref linkend="sql-createserver"></member>
  </simplelist>
 </refsect1>
</refentry>

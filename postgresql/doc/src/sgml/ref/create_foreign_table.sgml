<!-- doc/src/sgml/ref/create_foreign_table.sgml -->

<refentry id="SQL-CREATEFOREIGNTABLE">
 <indexterm zone="sql-createforeigntable">
  <primary>CREATE FOREIGN TABLE</primary>
 </indexterm>
 <refmeta>
  <refentrytitle>CREATE FOREIGN TABLE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE FOREIGN TABLE</refname>
<!--
  <refpurpose>define a new foreign table</refpurpose>
-->
  <refpurpose>定义一个新外部表</refpurpose>
 </refnamediv>


 <refsynopsisdiv>
<synopsis>
CREATE FOREIGN TABLE [ IF NOT EXISTS ] <replaceable class="PARAMETER">table_name</replaceable> ( [
    <replaceable class="PARAMETER">column_name</replaceable> <replaceable class="PARAMETER">data_type</replaceable> [ OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ... ] ) ] [ COLLATE <replaceable>collation</replaceable> ] [ <replaceable class="PARAMETER">column_constraint</replaceable> [ ... ] ]
    [, ... ]
] )
  SERVER <replaceable class="parameter">server_name</replaceable>
[ OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ... ] ) ]
<!--
<phrase>where <replaceable class="PARAMETER">column_constraint</replaceable> is:</phrase>
-->
<phrase>这里<replaceable class="PARAMETER">column_constraint</replaceable> 可以是:</phrase>

[ CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ]
{ NOT NULL |
  NULL |
  DEFAULT <replaceable>default_expr</replaceable> }
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="SQL-CREATEFOREIGNTABLE-description">
<!--
  <title>Description</title>
-->
  <title>描述</title>
<!--
  <para>
   <command>CREATE FOREIGN TABLE</command> creates a new foreign table
   in the current database. The table will be owned by the user issuing the
   command.
  </para>
-->
  <para>
   <command>CREATE FOREIGN TABLE</command>在当前数据库中创建一个外部表，该表将由发出此命令的用户所有。 
  </para>
<!--
  <para>
   If a schema name is given (for example, <literal>CREATE FOREIGN TABLE
   myschema.mytable ...</>) then the table is created in the specified
   schema.  Otherwise it is created in the current schema.
   The name of the foreign table must be
   distinct from the name of any other foreign table, table, sequence, index,
   view, or materialized view in the same schema.
  </para>
-->
  <para>
   如果给出了模式名 (for example, <literal>CREATE FOREIGN TABLE
   myschema.mytable ...</>) ，那么表是在指定模式中创建的。否则在当前模式中创建外部表。
   外部表的名字必须与同一个模式中的其它外部表，表，序列，索引，试图或物化视图的名字不同
  </para>
<!--  
  <para>
   <command>CREATE FOREIGN TABLE</command> also automatically creates a data
   type that represents the composite type corresponding to one row of
   the foreign table.  Therefore, foreign tables cannot have the same
   name as any existing data type in the same schema.
  </para>
-->
  <para>
   <command>CREATE FOREIGN TABLE</command>还自动创建一个数据类型，该数据类型代表对应该外部表一行的复合类型。 
   因此，外部表不能和同模式中的现有数据类型同名。 
  </para>
<!--
  <para>
   To be able to create a foreign table, you must have <literal>USAGE</literal>
   privilege on the foreign server, as well as <literal>USAGE</literal>
   privilege on all column types used in the table.
  </para>
-->
  <para>
   为了创建一个外部表，除了对外部表所有字段类型有 <literal>USAGE</literal>权限外，
   还必须有外部表服务器的<literal>USAGE</literal>权限。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>参数</title>
  <variablelist>

   <varlistentry>
    <term><literal>IF NOT EXISTS</></term>
    <listitem>
<!--
     <para>
      Do not throw an error if a relation with the same name already exists.
      A notice is issued in this case.  Note that there is no guarantee that
      the existing relation is anything like the one that would have been
      created.
     </para>
-->
     <para>
      如果已经存在相同名称的对象，在这种情况下，不会抛出错误，只会产生一个通知。
      请注意这并不保证将要创建的对象与现有对象是否一致。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
<!--
     <para>
      The name (optionally schema-qualified) of the table to be created.
     </para>
-->
     <para>
      要创建的表的名字（可以用模式修饰）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
<!--
     <para>
      The name of a column to be created in the new table.
     </para>
-->
     <para>
      新表中要创建的字段名。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">data_type</replaceable></term>
    <listitem>
<!--
     <para>
      The data type of the column. This can include array
      specifiers. For more information on the data types supported by
      <productname>PostgreSQL</productname>, refer to <xref
      linkend="datatype">.
     </para>
-->
     <para>
      该字段的数据类型. 它可以包含数组说明符。有关 PostgreSQL 支持的数据类型的更多信息， 请参考<xref linkend="datatype">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOT NULL</></term>
    <listitem>
<!--
     <para>
      The column is not allowed to contain null values.
     </para>
-->
     <para>
      该字段不允许包含null值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULL</></term>
    <listitem>
<!--
     <para>
      The column is allowed to contain null values. This is the default.
     </para>
-->
     <para>
      该字段允许包含null值。 这是缺省。
     </para>
<!--
     <para>
      This clause is only provided for compatibility with
      non-standard SQL databases.  Its use is discouraged in new
      applications.
     </para>
-->
     <para>
      这个子句的存在只是为和那些非标准 SQL 数据库兼容。 我们不建议在新应用中使用它。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT
    <replaceable>default_expr</replaceable></literal></term>
    <listitem>
<!--
     <para>
      The <literal>DEFAULT</> clause assigns a default data value for
      the column whose column definition it appears within.  The value
      is any variable-free expression (subqueries and cross-references
      to other columns in the current table are not allowed).  The
      data type of the default expression must match the data type of the
      column.
     </para>
-->
     <para>
      <literal>DEFAULT</> 子句给它所出现的字段设定一个缺省数值。该数值可以是任何不含变量的表达式（不允许使用子查询和对本表中的其它字段的交叉引用）。缺省表达式的数据类型必须和字段类型匹配。
     </para>
<!--
     <para>
      The default expression will be used in any insert operation that
      does not specify a value for the column.  If there is no default
      for a column, then the default is null.
     </para>
-->
     <para>
      缺省表达式将被用于任何未指定该字段数值的插入操作。 如果字段上没有缺省值，那么缺省是 NULL。 
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">server_name</replaceable></term>
    <listitem>
<!--
     <para>
      The name of an existing foreign server to use for the foreign table.
      For details on defining a server, see <xref
      linkend="SQL-CREATESERVER">.
     </para>
-->
     <para>
      外部表使用的已存在的外部服务器名称。更多细节，参考<xref linkend="SQL-CREATESERVER">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ...] )</literal></term>
    <listitem>
<!--
     <para>
      Options to be associated with the new foreign table or one of its
      columns.
      The allowed option names and values are specific to each foreign
      data wrapper and are validated using the foreign-data wrapper's
      validator function.  Duplicate option names are not allowed (although
      it's OK for a table option and a column option to have the same name).
     </para>
-->
     <para>
      选项与新外部表或外部表中的字段有关。允许的选项名称和值，是由每一个外部数据封装器中来说是特别指定的。
      也是通过外部数据封装器的验证函数来验证。重复的选项名称是不被允许的(尽管表选项和表字段选项可以有相同的名字)。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 </refsect1>


 <refsect1 id="SQL-CREATEFOREIGNTABLE-examples">
<!--
  <title>Examples</title>
-->
  <title>例子</title>
<!--
  <para>
   Create foreign table <structname>films</>, which will be accessed through
   the server <structname>film_server</>:

<programlisting>
CREATE FOREIGN TABLE films (
    code        char(5) NOT NULL,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
)
SERVER film_server;
</programlisting></para>
-->
  <para>
   创建外部表 <structname>films</>, 该表通过服务器
   <structname>film_server</>访问：

<programlisting>
CREATE FOREIGN TABLE films (
    code        char(5) NOT NULL,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
)
SERVER film_server;
</programlisting></para>


 </refsect1>

 <refsect1 id="SQL-CREATEFOREIGNTABLE-compatibility">
<!--
  <title id="SQL-CREATEFOREIGNTABLE-compatibility-title">Compatibility</title>
-->
  <title id="SQL-CREATEFOREIGNTABLE-compatibility-title">兼容性</title>
<!--
  <para>
   The <command>CREATE FOREIGN TABLE</command> command largely conforms to the
   <acronym>SQL</acronym> standard; however, much as with
   <link linkend="sql-createtable"><command>CREATE TABLE</></link>,
   <literal>NULL</> constraints and zero-column foreign tables are permitted.
   The ability to specify a default value is also a <productname>PostgreSQL</>
   extension.
  </para>
-->
  <para>
   <command>CREATE FOREIGN TABLE</command>命令最大程度上符合了<acronym>SQL</acronym>标准；
   然而，就像使用<link linkend="sql-createtable"><command>CREATE TABLE</></link>,<literal>NULL</>约束和
   零字段外部表以及设定默认值的功能是<productname>PostgreSQL</>对SQL标准的扩展。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>又见</title>
  <simplelist type="inline">
   <member><xref linkend="sql-alterforeigntable"></member>
   <member><xref linkend="sql-dropforeigntable"></member>
   <member><xref linkend="sql-createtable"></member>
   <member><xref linkend="sql-createserver"></member>
  </simplelist>
 </refsect1>
</refentry>

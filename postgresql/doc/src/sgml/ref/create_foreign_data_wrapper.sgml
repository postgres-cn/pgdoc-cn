<!--
doc/src/sgml/ref/create_foreign_data_wrapper.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEFOREIGNDATAWRAPPER">
 <indexterm zone="sql-createforeigndatawrapper">
  <primary>CREATE FOREIGN DATA WRAPPER</primary>
 </indexterm>
 <refmeta>
  <refentrytitle>CREATE FOREIGN DATA WRAPPER</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE FOREIGN DATA WRAPPER</refname>
  <!--
  <refpurpose>define a new foreign-data wrapper</refpurpose>
  -->
  <refpurpose>定义一个外部数据封装器</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE FOREIGN DATA WRAPPER <replaceable class="parameter">name</replaceable>
    [ HANDLER <replaceable class="parameter">handler_function</replaceable> | NO HANDLER ]
    [ VALIDATOR <replaceable class="parameter">validator_function</replaceable> | NO VALIDATOR ]
    [ OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ... ] ) ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE FOREIGN DATA WRAPPER</command> creates a new
   foreign-data wrapper.  The user who defines a foreign-data wrapper
   becomes its owner.
  </para>
-->
<para>
<command>CREATE FOREIGN DATA WRAPPER</command>创建一个新的外部数据封装器。
创建外部数据封装器的用户成为其所有者。
</para>

  <!--
<para>
   The foreign-data wrapper name must be unique within the database.
  </para>
-->
<para>
外部数据封装器的名字必需在数据库中唯一。
</para>

  <!--
<para>
   Only superusers can create foreign-data wrappers.
  </para>
-->
<para>
只有超级用户可以创建外部数据封装器。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the foreign-data wrapper to be created.
     </para>
-->
<para>
要创建的外部数据封装器的名字。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>HANDLER <replaceable class="parameter">handler_function</replaceable></literal></term>
    <listitem>
     <!--
<para><replaceable class="parameter">handler_function</replaceable> is the
      name of a previously registered function that will be called to
      retrieve the execution functions for foreign tables.
      The handler function must take no arguments, and
      its return type must be <type>fdw_handler</type>.
     </para>
-->
<para>
<replaceable class="parameter">handler_function</replaceable>
是先前已经注册了的函数的名字，用来为外部表检索执行函数。
处理器函数必须没有参数，并且它的返回类型必须为<type>fdw_handler</type>。
</para>

     <!--
<para>
      It is possible to create a foreign-data wrapper with no handler
      function, but foreign tables using such a wrapper can only be declared,
      not accessed.
     </para>
-->
<para>
不用处理器函数创建外部数据封装器是可能的，但是使用这种封装器的外部表只能被声明，不能被访问。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VALIDATOR <replaceable class="parameter">validator_function</replaceable></literal></term>
    <listitem>
     <!--
<para><replaceable class="parameter">validator_function</replaceable>
      is the name of a previously registered function that will be called to
      check the generic options given to the foreign-data wrapper, as
      well as options for foreign servers, user mapping and foreign tables
      using the foreign-data wrapper.  If no validator function or <literal>NO
      VALIDATOR</literal> is specified, then options will not be
      checked at creation time.  (Foreign-data wrappers will possibly
      ignore or reject invalid option specifications at run time,
      depending on the implementation.)  The validator function must
      take two arguments: one of type <type>text[]</type>, which will
      contain the array of options as stored in the system catalogs,
      and one of type <type>oid</type>, which will be the OID of the
      system catalog containing the options. The return type is ignored;
      the function should report invalid options using the
      <function>ereport(ERROR)</function> function.
     </para>
-->
<para>
<replaceable class="parameter">validator_function</replaceable>
是先前已经注册了的函数的名字，用来检查提供给外部数据封装器的通用选项，
还有使用该外部数据封装器的外部服务器、用户映射和外部表的选项。
如果没有验证器函数或声明了<literal>NO VALIDATOR</literal>，
那么在创建时将不检查选项。（外部数据封装器可能在运行时忽略或拒绝无效的选项说明，
取决于实现。）验证器函数必须接受两个参数：一个类型为<type>text[]</type>，
将包含存储在系统目录中的选项的数组，一个类型为<type>oid</type>，
是包含这些选项的系统目录的OID。忽略返回类型；该函数应该使用
<function>ereport(ERROR)</function>函数报告无效选项。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OPTIONS ( <replaceable class="PARAMETER">option</replaceable> '<replaceable class="PARAMETER">value</replaceable>' [, ... ] )</literal></term>
    <listitem>
     <!--
<para>
      This clause specifies options for the new foreign-data wrapper.
      The allowed option names and values are specific to each foreign
      data wrapper and are validated using the foreign-data wrapper's
      validator function.  Option names must be unique.
     </para>
-->
<para>
这个子句为新的外部数据封装器声明选项。允许的选项名和值是特定于每个外部数据封装器的，
并且是经过外部数据封装器的验证器函数验证了的。选项名必须是唯一的。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   <productname>PostgreSQL</>'s foreign-data functionality is still under
   active development.  Optimization of queries is primitive (and mostly left
   to the wrapper, too).  Thus, there is considerable room for future
   performance improvements.
  </para>
-->
<para>
<productname>PostgreSQL</>的外部数据功能一直在积极开发。
查询的优化是原始的（并且主要是封装器）。因此，未来的性能提升有很大的空间。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>
  
<para>
<!--
   Create a useless foreign-data wrapper <literal>dummy</>:
-->
创建一个无用的外部数据封装器<literal>dummy</>：
<programlisting>
CREATE FOREIGN DATA WRAPPER dummy;
</programlisting>
  </para>

  
<para>
<!--
   Create a foreign-data wrapper <literal>file</> with
   handler function <literal>file_fdw_handler</>:
-->
创建一个带有处理器函数<literal>file_fdw_handler</>
的外部数据封装器<literal>file</>：
<programlisting>
CREATE FOREIGN DATA WRAPPER file HANDLER file_fdw_handler;
</programlisting>
  </para>
  
<para>
<!--
   Create a foreign-data wrapper <literal>mywrapper</> with some
   options:
-->
创建一个带有一些选项的外部数据封装器<literal>mywrapper</>：
<programlisting>
CREATE FOREIGN DATA WRAPPER mywrapper
    OPTIONS (debug 'true');
</programlisting></para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   <command>CREATE FOREIGN DATA WRAPPER</command> conforms to ISO/IEC
   9075-9 (SQL/MED), with the exception that the <literal>HANDLER</literal>
   and <literal>VALIDATOR</literal> clauses are extensions and the standard
   clauses <literal>LIBRARY</literal> and <literal>LANGUAGE</literal>
   are not implemented in <productname>PostgreSQL</>.
  </para>
-->
<para>
<command>CREATE FOREIGN DATA WRAPPER</command>遵从ISO/IEC 9075-9 (SQL/MED)，
除了<literal>HANDLER</literal>和<literal>VALIDATOR</literal>子句是扩展，
并且标准的子句<literal>LIBRARY</literal>和<literal>LANGUAGE</literal>
没有在<productname>PostgreSQL</>中实现。
</para>

  <!--
<para>
   Note, however, that the SQL/MED functionality as a whole is not yet
   conforming.
  </para>
-->
<para>
请注意，然而，SQL/MED功能作为一个整体目前是不符合的。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterforeigndatawrapper"></member>
   <member><xref linkend="sql-dropforeigndatawrapper"></member>
   <member><xref linkend="sql-createserver"></member>
   <member><xref linkend="sql-createusermapping"></member>
   <member><xref linkend="sql-createforeigntable"></member>
  </simplelist>
 </refsect1>

</refentry>

<!--
doc/src/sgml/ref/create_index.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEINDEX">
 <indexterm zone="sql-createindex">
  <primary>CREATE INDEX</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE INDEX</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE INDEX</refname>
  <refpurpose>定义一个新索引</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ <replaceable class="parameter">name</replaceable> ] ON <replaceable class="parameter">table_name</replaceable> [ USING <replaceable class="parameter">method</replaceable> ]
    ( { <replaceable class="parameter">column_name</replaceable> | ( <replaceable class="parameter">expression</replaceable> ) } [ COLLATE <replaceable class="parameter">collation</replaceable> ] [ <replaceable class="parameter">opclass</replaceable> ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )
    [ WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> = <replaceable class="PARAMETER">value</replaceable> [, ... ] ) ]
    [ TABLESPACE <replaceable class="parameter">tablespace_name</replaceable> ]
    [ WHERE <replaceable class="parameter">predicate</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>CREATE INDEX</command>在指定关系的指定列上构建
   一个索引，该关系可以是一个表或者一个物化视图。索引主要被用来提升
   数据库性能（不过不当的使用会导致性能变差）。
  </para>

  <para>
   索引的键域被指定为列名或者写在圆括号中的表达式。如果索引方法支持
   多列索引，可以指定多个域。
  </para>

  <para>
   一个索引域可以是一个从表行的一列或者更多列值进行计算的表达式。
   这种特性可以被用来获得对基于基本数据某种变换的数据的快速访问。
   例如，一个在<literal>upper(col)</>上计算的索引可以允许子句
   <literal>WHERE upper(col) = 'JIM'</>使用索引。
  </para>

  <para>
   <productname>PostgreSQL</productname>提供了索引方法
   B-树、哈希、GiST、SP-GiST 以及 GIN。用户也可以定义自己的索引
   方法，但是相对较复杂。
  </para>

  <para>
    当<literal>WHERE</literal>子句存在时，会创建一个
    <firstterm>部分索引</firstterm>。部分索引只包含表中一部分行的项，
    通常索引这一部分会比表的其他部分更有用。例如，如果有一个表包含了
    已付和未付订单，其中未付订单占了整个表的一小部分并且是经常被使用
    的部分，可以通过只在这一部分上创建一个索引来改进性能。另一种可能
    的应用是使用带有<literal>UNIQUE</literal>的
    <literal>WHERE</literal>在表的一个子集上强制唯一性。更多的讨论
    请见<xref linkend="indexes-partial">。
  </para>

  <para>
    <literal>WHERE</literal>子句中使用的表达式只能引用底层表的列，但
    它可以引用所有列而不仅仅是被索引的列。当前，
    <literal>WHERE</literal>中也禁止使用子查询和聚集表达式。同样的
    限制也适用于表达式索引中的表达式域。
  </para>

  <para>
   所有在索引定义中使用的函数和操作符必须是<quote>不可变的</>，
   就是说它们的结果必须仅依赖于它们的参数而不受外在因素（例如另
   一个表的内容和当前的时间）的影响。这种限制确保了索引的行为是
   良定的。要在一个索引表达式或者<literal>WHERE</literal>子句中
   使用用户定义的函数，记住在创建函数时把它标记为不可变。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

    <variablelist>
     <varlistentry>
      <term><literal>UNIQUE</literal></term>
      <listitem>
       <para>
        导致系统在索引被创建时（如果数据已经存在）或者加入数据时
        检查重复值。会导致重复项的数据插入或者更新尝试将会产生一
        个错误。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONCURRENTLY</literal></term>
      <listitem>
       <para>
        当使用了这个选项时，<productname>PostgreSQL</>在构建索引时
        不会取得任何会阻止该表上并发插入、更新或者删除的锁。而标准的索引
        构建将会把表锁住以阻止对表的写（但不阻塞读），这种锁定会持续到索
        引创建完毕。在使用这个选项时有多个需要注意的地方 &mdash; 请见
        <xref linkend="SQL-CREATEINDEX-CONCURRENTLY"
        endterm="SQL-CREATEINDEX-CONCURRENTLY-title">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
        要创建的索引名称。这里不能包括模式名，因为索引总是被创建在其基表所在
        的模式中。如果索引名称被省略，<productname>PostgreSQL</>将基于基
        表名称和被索引列名称选择一个合适的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">table_name</replaceable></term>
      <listitem>
       <para>
        要被索引的表的名称（可以被模式限定）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">method</replaceable></term>
      <listitem>
       <para>
        要使用的索引方法的名称。可以选择
        <literal>btree</literal>、<literal>hash</literal>、
        <literal>gist</literal>、<literal>spgist</>和<literal>gin</>。
        默认方法是<literal>btree</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">column_name</replaceable></term>
      <listitem>
       <para>
        一个表列的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">expression</replaceable></term>
      <listitem>
       <para>
        一个基于一个或者更多个表列的表达式。如语法中所示，表达式通常必须
        被写在圆括号中。不过，如果该表达式是一个函数调用的形式，圆括号可
        以被省略。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">collation</replaceable></term>
      <listitem>
       <para>
        要用于该索引的排序规则的名称。默认情况下，该索引使用被索引列
        的排序规则或者被索引表达式的结果排序规则。当查询涉及到使用非
        默认排序规则的表达式时，使用非默认排序规则的索引就能排上用场。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">opclass</replaceable></term>
      <listitem>
       <para>
        一个操作符类的名称。详见下文。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ASC</></term>
      <listitem>
       <para>
        指定上升排序（默认）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>DESC</></term>
      <listitem>
       <para>
        指定下降排序。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULLS FIRST</></term>
      <listitem>
       <para>
        指定把空值排序在非空值前面。在指定<literal>DESC</>时，
        这是默认行为。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULLS LAST</></term>
      <listitem>
       <para>
        指定把空值排序在非空值后面。在没有指定<literal>DESC</>时，
        这是默认行为。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">storage_parameter</replaceable></term>
      <listitem>
       <para>
        索引方法相关的存储参数的名称。详见
        <xref linkend="sql-createindex-storage-parameters" endterm="sql-createindex-storage-parameters-title">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">tablespace_name</replaceable></term>
      <listitem>
       <para>
        在其中创建索引的表空间。如果没有指定，将会使用
        <xref linkend="guc-default-tablespace">。或者对临时表上的索引使用
        <xref linkend="guc-temp-tablespaces">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">predicate</replaceable></term>
      <listitem>
       <para>
        部分索引的约束表达式。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  <refsect2 id="SQL-CREATEINDEX-storage-parameters">
   <title id="SQL-CREATEINDEX-storage-parameters-title">索引存储参数</title>

   <para>
    可选的<literal>WITH</>子句为索引指定<firstterm>存储参数</>。每一种
    索引方法都有自己的存储参数集合。B-树、哈希、GiST 和 SP-GiST 索引方法
    都接受这个参数：
   </para>

   <variablelist>
   <varlistentry>
    <term><literal>FILLFACTOR</></term>
    <listitem>
     <para>
      索引的填充因子是一个百分数，它决定索引方法将尝试填充索引页面的充满
      程度。对于 B-树，在初始的索引构建过程中，叶子页面会被填充至该百分数，
      当在索引右端扩展索引（增加新的最大键值）时也会这样处理。如果页面后
      来被完全填满，它们就会被分裂，导致索引的效率逐渐退化。B-树使用了默
      认的填充因子 90，但是也可以选择为 10 到 100 的任何整数值。如果表是
      静态的，那么填充因子 100 是最好的，因为它可以让索引的物理尺寸最小化。
      但是对于更新负荷很重的表，较小的填充因子有利于最小化对页面分裂的需
      求。其他索引方法以不同但是大致类似的方式使用填充因子，不同方法的默
      认填充因子也不相同。
     </para>
    </listitem>
   </varlistentry>
   </variablelist>

   <para>
    GiST 还额外接受这个参数：
   </para>

   <variablelist>
   <varlistentry>
    <term><literal>BUFFERING</></term>
    <listitem>
    <para>
     决定是否用<xref linkend="gist-buffering-build">中描述的缓冲构建技术
     来构建索引。<literal>OFF</>会禁用它，<literal>ON</>则启用该特性，
     如果设置为<literal>AUTO</>则初始会禁用它，但是一旦索引尺寸到达
     <xref linkend="guc-effective-cache-size">就会随时打开。默认值是
     <literal>AUTO</>。
    </para>
    </listitem>
   </varlistentry>
   </variablelist>

   <para>
    GIN 索引接受一个不同的参数：
   </para>

   <variablelist>
   <varlistentry>
    <term><literal>FASTUPDATE</></term>
    <listitem>
    <para>
     这个设置控制<xref linkend="gin-fast-update">中描述的快速更新
     技术的使用。它是一个布尔参数：<literal>ON</>启用快速更新，
     <literal>OFF</>禁用之（<literal>ON</>和<literal>OFF</>的其他
     写法在<xref linkend="config-setting">中有介绍）。默认是
     <literal>ON</>。
    </para>

    <note>
     <para>
      通过<command>ALTER INDEX</>关闭<literal>FASTUPDATE</>
      会阻止未来的更新进入到待处理索引项列表中，但它不会自己处理之前的
      待处理项。<command>VACUUM</>可以确保处理完待处理列表的项。
     </para>
    </note>
    </listitem>
   </varlistentry>
   </variablelist>
  </refsect2>

  <refsect2 id="SQL-CREATEINDEX-CONCURRENTLY">
   <title id="SQL-CREATEINDEX-CONCURRENTLY-title">并发构建索引</title>

   <indexterm zone="SQL-CREATEINDEX-CONCURRENTLY">
   <primary>index</primary>
   <secondary>building concurrently</secondary>
   </indexterm>

   <para>
    创建索引可能会干扰数据库的常规操作。通常
    <productname>PostgreSQL</>会锁住要被索引的表，让它不能被写入，
    并且用该表上的一次扫描来执行整个索引的构建。其他事务仍然可以读取表 ，
    但是如果它们尝试在该表上进行插入、更新或者删除，它们会被阻塞直到索引
    构建完成。如果系统是一个生产数据库，这可能会导致严重的后果。索引非常
    大的表可能会需要很多个小时，而且即使是较小的表，在构建索引过程中阻塞
    写入者一段时间在生产系统中也是不能接受的。
   </para>

   <para>
    <productname>PostgreSQL</>支持构建索引时不阻塞写入。这种方法通过
    指定<command>CREATE INDEX</>的<literal>CONCURRENTLY</>选项
    实现。当使用这个选项时，<productname>PostgreSQL</>必须执行该表的
    两次扫描，此外它必须等待所有现有可能会使用该索引的事务终止。因此这种
    方法比起标准索引构建过程来说要做更多工作并且需要更多时间。不过，由于它
    允许在构建索引时继续普通操作，这种方式对于在生产环境中增加新索引很有用。
    当然，由索引创建带来的额外 CPU 和 I/O 开销可能会拖慢其他操作。
   </para>

   <para>
    在并发索引构建中，索引实际上在一个事务中被录入到系统目录，然后在两个
    事务中发生两次索引扫描。第二次表扫描开始时的任何活跃事务可以阻塞并发
    索引创建直至该事务完成，这其中也包括只在第二次表扫描开始后引用该表的
    事务。并发索引创建会使用<xref linkend="view-pg-locks">小节中介绍的方
    法连续地等待每一个旧的事务完成。
   </para>

   <para>
    如果在扫描表时出现问题，例如死锁或者唯一索引中的唯一性被违背，
    <command>CREATE INDEX</>将会失败，但留下一个<quote>不可用</>
    的索引。这个索引会被查询所忽略，因为它可能不完整。不过它仍将消耗更新
    开销。<application>psql</>的<command>\d</>命令将把这类索引报告为
    <literal>INVALID</>：

<programlisting>
postgres=# \d tab
       Table "public.tab"
 Column |  Type   | Modifiers 
--------+---------+-----------
 col    | integer | 
Indexes:
    "idx" btree (col) INVALID
</programlisting>

    这种情况下推荐的恢复方法是删除该索引并且尝试再次执行
    <command>CREATE INDEX CONCURRENTLY</>（另一种可能性是用
    <command>REINDEX</>重建该索引。不过，由于
    <command>REINDEX</>不支持并发构建，这种选择不那么有吸引力）。
   </para>

   <para>
    并发构建一个唯一索引时需要注意的另一点是，当第二次表扫描开始时，唯一约束
    已经被强制在其他事务上。这意味着在该索引变得可用之前，其他查询中可能就会
    报告该约束被违背，或者甚至在索引构建最终失败的情况中也是这样。还有，如果在
    第二次扫描时发生失败，<quote>无效的</>索引也会继续强制它的唯一性约束。
   </para>

   <para>
    表达式索引和部分索引的并发构建也被支持。在这些表达式计算过程中发生的
    错误可能导致和上述唯一约束违背类似的行为。
   </para>

   <para>
    常规索引构建允许在同一个表上并行构建其他常规索引，但是在一个表上同时
    只能有一个并发索引构建发生。在两种情况下，同时都不允许在表上有其他类
    型的模式修改。另一个不同是，一个常规<command>CREATE INDEX</>
    命令可以在一个事务块中执行，但是
    <command>CREATE INDEX CONCURRENTLY</>不行。
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   关于索引何时能被使用、何时不被使用以及什么情况下它们有用的信息请
   见<xref linkend="indexes">。
  </para>

  <caution>
   <para>
    哈希索引操作当前不被 WAL 记录，因此如果在一次数据库崩溃后有没有写入的
    更改，可能需要用<command>REINDEX</>来重建哈希索引。还有，
    在初始的基础备份之后，哈希索引的变化不会通过流复制或者基于文件
    的复制体现，因此对后续使用它们的查询可能会给出错误的回答。出于
    这些原因，现在已经不推荐使用哈希索引。
   </para>
  </caution>

  <para>
   当前，只有 B-树、GiST 和 GIN 索引方法支持多列索引。默认最多可以
   索引 32 个域（可以在构建
   <productname>PostgreSQL</productname>修改这种限制）。当前
   只有 B-树支持唯一索引。
  </para>

  <para>
   为索引的每一列可以指定一个<firstterm>操作符类</firstterm>。该操作符
   类标识要被该索引用于该列的操作符。例如，一个四字节整数上的 B-树索引
   会使用<literal>int4_ops</literal>类。这个操作符类包括了用于四字节整数
   的比较函数。实际上，通常列数据类型的默认操作符类就足够了。对某些数据
   类型指定操作符类的主要原因是，可能会有多于一种有意义的顺序。例如，
   我们可能想用绝对值或者实数部分对复数类型排序。我们可以通过为该数据
   类型定义两个操作符类来做到，并且在创建索引时选择其中合适的类。更多
   有关操作符类的信息请见<xref linkend="indexes-opclass">以及<xref
   linkend="xindex">。
  </para>

  <para>
   对于支持有序扫描的索引方法（当前只有 B-树），可以指定可选子句<literal>ASC</>、
   <literal>DESC</>、<literal>NULLS FIRST</>以及<literal>NULLS LAST</>
   来修改索引的排序顺序。由于一个有序索引能前向或者反向扫描，通常创建一个
   单列<literal>DESC</>索引没什么用处 &mdash; 一个常规索引已经提供了排序
   顺序。这些选项的价值是可以创建多列索引，让它的排序顺序匹配有混合排序要求
   的查询，例如<literal>SELECT ... ORDER BY x ASC, y
   DESC</>。如果你想要在依靠索引避免排序步骤的查询中支持
   <quote>空值排序低</>这种行为，<literal>NULLS</>选项就能派上用场，默认
   的行为是<quote>空值排序高</>。
  </para>

  <para>
   对于大多数索引方法，索引的创建速度取决于
   <xref linkend="guc-maintenance-work-mem">的设置。较大的值将会减少
   索引创建所需的时间，当然不要把它设置得超过实际可用的内存量（那会迫使
   机器进行交换）。对于哈希索引，
   <xref linkend="guc-effective-cache-size">的值也与索引创建时间相关：
   根据估计的索引尺寸大于还是小于<varname>effective_cache_size</>，
   <productname>PostgreSQL</productname>将使用两种不同的哈希索引
   创建方法。为了得到最好的结果，请确保这个参数也被设置为反映可用内存的
   值，并且确保<varname>maintenance_work_mem</>和
   <varname>effective_cache_size</>小于机器的 RAM 减去其他程序需要的
   空间。
  </para>

  <para>
   使用<xref linkend="sql-dropindex">可以移除一个索引。
  </para>

  <para>
   以前的<productname>PostgreSQL</productname>发行也有一种 R-树
   索引方法。这种方法已经被移除，因为它比起 GiST 方法来说没有什么明显的
   优势。如果指定了<literal>USING rtree</>，<command>CREATE INDEX</>
   将会把它解释为<literal>USING gist</>，以便把旧的数据库转换成 GiST。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   在表<literal>films</literal>中的列<literal>title</literal>上创建一个
   B-树索引：
<programlisting>
CREATE UNIQUE INDEX title_idx ON films (title);
</programlisting>
  </para>

  <para>
   在表达式<literal>lower(title)</>上创建一个索引来允许高效的大小写
   无关搜索：
<programlisting>
CREATE INDEX ON films ((lower(title)));
</programlisting>
   （在这个例子中我们选择省略索引名称，这样系统会选择一个名字，
   通常是<literal>films_lower_idx</>）。
  </para>

  <para>
   创建一个具有非默认排序规则的索引：
<programlisting>
CREATE INDEX title_idx_german ON films (title COLLATE "de_DE");
</programlisting>
  </para>

  <para>
   创建一个具有非默认空值排序顺序的索引：
<programlisting>
CREATE INDEX title_idx_nulls_low ON films (title NULLS FIRST);
</programlisting>
  </para>

  <para>
   创建一个具有非默认填充因子的索引：
<programlisting>
CREATE UNIQUE INDEX title_idx ON films (title) WITH (fillfactor = 70);
</programlisting>
  </para>

  <para>
   创建一个禁用快速更新的<acronym>GIN</>索引：
<programlisting>
CREATE INDEX gin_idx ON documents_table USING gin (locations) WITH (fastupdate = off);
</programlisting>
  </para>

  <para>
   在表<literal>films</>中的列<literal>code</>上创建一个而索引并且
   把索引放在表空间<literal>indexspace</>中：
<programlisting>
CREATE INDEX code_idx ON films (code) TABLESPACE indexspace;
</programlisting>
  </para>

  <para>
   在一个点属性上创建一个 GiST 索引，这样我们可以在转换函数的结果
   上有效地使用 box 操作符：
<programlisting>
CREATE INDEX pointloc
    ON points USING gist (box(location,location));
SELECT * FROM points
    WHERE box(location,location) &amp;&amp; '(0,0),(1,1)'::box;
</programlisting>
  </para>

  <para>
   创建一个表而不排斥对表的写操作：
<programlisting>
CREATE INDEX CONCURRENTLY sales_quantity_index ON sales_table (quantity);
</programlisting></para>

 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>CREATE INDEX</command>是一种
   <productname>PostgreSQL</productname>的语言扩展。在 SQL 标准中
   没有对于索引的规定。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterindex"></member>
   <member><xref linkend="sql-dropindex"></member>
  </simplelist>
 </refsect1>
</refentry>

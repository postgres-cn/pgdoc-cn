<!--
doc/src/sgml/ref/create_index.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEINDEX">
 <indexterm zone="sql-createindex">
  <primary>CREATE INDEX</primary>
 </indexterm>
 <refmeta>
  <refentrytitle>CREATE INDEX</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE INDEX</refname>
  <refpurpose><!--define a new index-->创建一个索引</refpurpose>
 </refnamediv>


 <refsynopsisdiv>
<synopsis>
CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ <replaceable class="parameter">name</replaceable> ] ON <replaceable class="parameter">table_name</replaceable> [ USING <replaceable class="parameter">method</replaceable> ]
    ( { <replaceable class="parameter">column_name</replaceable> | ( <replaceable class="parameter">expression</replaceable> ) } [ COLLATE <replaceable class="parameter">collation</replaceable> ] [ <replaceable class="parameter">opclass</replaceable> ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )
    [ WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> = <replaceable class="PARAMETER">value</replaceable> [, ... ] ) ]
    [ TABLESPACE <replaceable class="parameter">tablespace_name</replaceable> ]
    [ WHERE <replaceable class="parameter">predicate</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title><!--Description-->描述</title>

  <para>
<!--
   <command>CREATE INDEX</command> constructs an index on the specified column(s)
   of the specified relation, which can be a table or a materialized view.
   Indexes are primarily used to enhance database performance (though
   inappropriate use can result in slower performance).-->
 <command>CREATE INDEX</command> 在一个指定表或者物化视图的指定列上创建一个索引,索引主要用来提高数据库的效率(尽管不合理的使用将导致较慢的效率)
  </para>

  <para>
<!--
   The key field(s) for the index are specified as column names,
   or alternatively as expressions written in parentheses.
   Multiple fields can be specified if the index method supports
   multicolumn indexes.
-->
索引的键字是用列名来声明的,或者在括号里面写一个表达式 .如果索引支持多列索引,我们也可以指定多个字段. 
</para>

  <para>
<!--
   An index field can be an expression computed from the values of
   one or more columns of the table row.  This feature can be used
   to obtain fast access to data based on some transformation of
   the basic data. For example, an index computed on
   <literal>upper(col)</> would allow the clause
   <literal>WHERE upper(col) = 'JIM'</> to use an index.
-->  
一个索引域可以是一个使用表的一个或多个字段进行计算的表达式。 这个特性可以快速访问一些基础数据的变形.例如,一个在<literal>upper(col)</>上计算的索引允许<literal>WHERE upper(col) = 'JIM'</>字句使用这个索引.
</para>

  <para>
<!--
   <productname>PostgreSQL</productname> provides the index methods
   B-tree, hash, GiST, SP-GiST, and GIN.  Users can also define their own index
   methods, but that is fairly complicated.
-->
  <productname>PostgreSQL</productname>提供的索引类型包括B-tree, hash, GiST, SP-GiST, 和 GIN.用户也可以自己定义索引类型,但这是相当复杂的.
</para>

  <para>
<!--
    When the <literal>WHERE</literal> clause is present, a
    <firstterm>partial index</firstterm> is created.
    A partial index is an index that contains entries for only a portion of
    a table, usually a portion that is more useful for indexing than the
    rest of the table. For example, if you have a table that contains both
    billed and unbilled orders where the unbilled orders take up a small
    fraction of the total table and yet that is an often used section, you
    can improve performance by creating an index on just that portion.
    Another possible application is to use <literal>WHERE</literal> with
    <literal>UNIQUE</literal> to enforce uniqueness over a subset of a
    table.  See <xref linkend="indexes-partial"> for more discussion.
-->
当使用<literal>WHERE</literal>字句,将会创建一个<firstterm>partial index</firstterm>.一个部分索引是仅包括表的一部分记录的索引,通常是比表中其他部分更有用的记录.
例如,如果你有一个包含了记账和不记账的订单,不记帐的订单只占了表的一小部分,并且是经常使用的部分.你可以在这部分上建立一个索引来提高效率.另一个应用是使用<literal>WHERE</literal> 和<literal>UNIQUE</literal> 来强制保证表的一个子集的唯一性.更多的信息见:<xref linkend="indexes-partial">
</para>

  <para>
<!--
    The expression used in the <literal>WHERE</literal> clause can refer
    only to columns of the underlying table, but it can use all columns,
    not just the ones being indexed.  Presently, subqueries and
    aggregate expressions are also forbidden in <literal>WHERE</literal>.
    The same restrictions apply to index fields that are expressions.
-->
  <literal>WHERE</literal> 字句的表达式可以使用底层表的列,并且可以是用它的所有列,而不仅仅建立索引的列.目前子查询和聚合表达式时禁止出现在<literal>WHERE</literal>字句的,这个限制同样适用于索引.
</para>

  <para>
<!--
   All functions and operators used in an index definition must be
   <quote>immutable</>, that is, their results must depend only on
   their arguments and never on any outside influence (such as
   the contents of another table or the current time).  This restriction
   ensures that the behavior of the index is well-defined.  To use a
   user-defined function in an index expression or <literal>WHERE</literal>
   clause, remember to mark the function immutable when you create it.
-->
  在索引定义中使用的所有函数和操作符必须是<quote>immutable</>,即他们的结果依赖与他们的参数,而不受任何外部的数据的影响(例如另一个表的内容,或当前时间).这个限制保证了索引的定义完整性.在一个索引或<literal>WHERE</literal>子句中使用用户自定义的函数时,确保在定义这些函数时标记他们是不可变的.
</para>
 </refsect1>

 <refsect1>
  <title>Parameters</title>

    <variablelist>
     <varlistentry>
      <term><literal>UNIQUE</literal></term>
      <listitem>
       <para>
<!--
        Causes the system to check for
        duplicate values in the table when the index is created (if data
        already exist) and each time data is added. Attempts to
        insert or update data which would result in duplicate entries
        will generate an error.
-->
当索引被创建时使系统检查表的重复值(如果已经有数据),并且当有数据插入时检查唯一性.当插入数据或更新数据导致重复记录时将会产生一个错误.      
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONCURRENTLY</literal></term>
      <listitem>
       <para>
<!--
        When this option is used, <productname>PostgreSQL</> will build the
        index without taking any locks that prevent concurrent inserts,
        updates, or deletes on the table; whereas a standard index build
        locks out writes (but not reads) on the table until it's done.
        There are several caveats to be aware of when using this option
        &mdash; see <xref linkend="SQL-CREATEINDEX-CONCURRENTLY"
        endterm="SQL-CREATEINDEX-CONCURRENTLY-title">.
-->
当使用这个选项时, <productname>PostgreSQL</>在生成索引时将不会在表上加任何锁阻止并发的插入,更新,删除.而标准的建立一个索引将产生一个阻止写(不包括读)的锁直到索引建立完毕.当使用这个选项时有一些问题需要注意,详见:<xref linkend="SQL-CREATEINDEX-CONCURRENTLY"
        endterm="SQL-CREATEINDEX-CONCURRENTLY-title">.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
      <!--
        The name of the index to be created.  No schema name can be included
        here; the index is always created in the same schema as its parent
        table.  If the name is omitted, <productname>PostgreSQL</> chooses a
        suitable name based on the parent table's name and the indexed column
        name(s).-->
被创建索引的名字.这里不需要包括模式的名字,索引总是在同一个模式中作为其父表创建的.如果忽略这个选项,<productname>PostgreSQL</>基于父表的名字和建立索引的列选择一个合适的名字.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">table_name</replaceable></term>
      <listitem>
       <para>
<!--
        The name (possibly schema-qualified) of the table to be indexed.
-->
要建立索引的表名(可能有模式修饰)      
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">method</replaceable></term>
      <listitem>
       <para>
<!--
        The name of the index method to be used.  Choices are
        <literal>btree</literal>, <literal>hash</literal>,
        <literal>gist</literal>, <literal>spgist</> and <literal>gin</>.
        The default method is <literal>btree</literal>.
-->      
建立索引使用的方法名字.  可选的方法有<literal>btree</literal>, <literal>hash</literal>,
        <literal>gist</literal>, <literal>spgist</> and <literal>gin</>.默认方法是<literal>btree</literal>.
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">column_name</replaceable></term>
      <listitem>
       <para>
<!--
        The name of a column of the table.
-->
     表中 要建立索引的列名.
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">expression</replaceable></term>
      <listitem>
       <para>
<!--
        An expression based on one or more columns of the table.  The
        expression usually must be written with surrounding parentheses,
        as shown in the syntax.  However, the parentheses can be omitted
        if the expression has the form of a function call.
-->
基于表中一列或多列的表达式.在上面的语法中,表达式必须在园括号中.如果表达式有函数调用的格式则圆括号可以省略.     
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">collation</replaceable></term>
      <listitem>
       <para>
<!--
        The name of the collation to use for the index.  By default,
        the index uses the collation declared for the column to be
        indexed or the result collation of the expression to be
        indexed.  Indexes with non-default collations can be useful for
        queries that involve expressions using non-default collations.
-->
      索引使用排序方式的名字,默认索引使用创建索引列中声明的排序方式,创建索引的表达式结果的排序方式.对于使用指定排序方式的表达式查询,索引使用指定的排序是高效的.
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">opclass</replaceable></term>
      <listitem>
       <para>
<!--
        The name of an operator class. See below for details.
-->
操作符类的名字,详细内容见下面.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ASC</></term>
      <listitem>
       <para>
<!--
        Specifies ascending sort order (which is the default).
-->
      指定升序排序(默认).
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>DESC</></term>
      <listitem>
       <para>
<!--
        Specifies descending sort order.
-->
指定降序排序.      
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULLS FIRST</></term>
      <listitem>
       <para>
<!--
        Specifies that nulls sort before non-nulls.  This is the default
        when <literal>DESC</> is specified.
-->
指定null排在非null值前面,在 <literal>DESC</> 中时默认的.
      
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULLS LAST</></term>
      <listitem>
       <para>
<!--
        Specifies that nulls sort after non-nulls.  This is the default
        when <literal>DESC</> is not specified.
-->
指定null排在非null值后面, 默认在 <literal>DESC</>没有指定.    
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">storage_parameter</replaceable></term>
      <listitem>
       <para>
<!--
        The name of an index-method-specific storage parameter.  See
        <xref linkend="sql-createindex-storage-parameters" endterm="sql-createindex-storage-parameters-title">
        for details.
-->
       index-method-specific 存储参数的名字.详细见:<xref linkend="sql-createindex-storage-parameters" endterm="sql-createindex-storage-parameters-title">.
 </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">tablespace_name</replaceable></term>
      <listitem>
       <para>
<!--
        The tablespace in which to create the index.  If not specified,
        <xref linkend="guc-default-tablespace"> is consulted, or
        <xref linkend="guc-temp-tablespaces"> for indexes on temporary
        tables.
-->
在哪个表空间建立索引,如果不指定,将使用<xref linkend="guc-default-tablespace"> ,或者临时表的索引将使用<xref linkend="guc-temp-tablespaces"> .    
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">predicate</replaceable></term>
      <listitem>
       <para>
<!--
        The constraint expression for a partial index.
-->
部分索引的约束表达式.      
 </para>
      </listitem>
     </varlistentry>

    </variablelist>

  <refsect2 id="SQL-CREATEINDEX-storage-parameters">
<!--
   <title id="SQL-CREATEINDEX-storage-parameters-title">Index Storage Parameters</title>
-->
   <title id="SQL-CREATEINDEX-storage-parameters-title">索引存储参数</title>

   <para>
<!--
    The optional <literal>WITH</> clause specifies <firstterm>storage
    parameters</> for the index.  Each index method has its own set of allowed
    storage parameters.  The B-tree, hash, GiST and SP-GiST index methods all
    accept this parameter:
-->
    可选的<literal>WITH</>子句指定了索引的<firstterm>storage
    parameters</>.每个索引方式有它自己的存储参数.B-tree, hash, GiST and SP-GiST索引都可以带这个参数.
</para>

   <variablelist>
   <varlistentry>
    <term><literal>FILLFACTOR</></term>
    <listitem>
     <para>
<!--
      The fillfactor for an index is a percentage that determines how full
      the index method will try to pack index pages.  For B-trees, leaf pages
      are filled to this percentage during initial index build, and also
      when extending the index at the right (adding new largest key values).
      If pages
      subsequently become completely full, they will be split, leading to
      gradual degradation in the index's efficiency.  B-trees use a default
      fillfactor of 90, but any integer value from 10 to 100 can be selected.
      If the table is static then fillfactor 100 is best to minimize the
      index's physical size, but for heavily updated tables a smaller
      fillfactor is better to minimize the need for page splits.  The
      other index methods use fillfactor in different but roughly analogous
      ways; the default fillfactor varies between methods.
-->
 填充因子是一个索引实际数据的百分比,它决定索引方法占用页的空间的比率.对于B-trees,在索引创建时叶子页填充这个百分比的数据.其余的用来扩展索引(添加一个新的最大的键值).如果接下来页占用100%,它将会分页,这将导致索引效率的逐渐下降.B-tree使用一个90做为默认填充比,但是可以选择10到100的任何值.如果是一个静态表,填充比使用100将会最大的减小索引所占的物理空间.但是对于有大量更新的表一个较小的填充比将会尽可能的减少分页.其他的索引方法使用填充比是不同的但是大致方法是相同;
方法之间的默认填充比不是一致的.</para>
    </listitem>
   </varlistentry>
   </variablelist>

   <para>
<!--
    GiST indexes additionally accept this parameter:
-->   
GiST索引额外接受这个参数:
</para>

   <variablelist>
   <varlistentry>
    <term><literal>BUFFERING</></term>
    <listitem>
    <para>
<!--
     Determines whether the buffering build technique described in
     <xref linkend="gist-buffering-build"> is used to build the index. With
     <literal>OFF</> it is disabled, with <literal>ON</> it is enabled, and
     with <literal>AUTO</> it is initially disabled, but turned on
     on-the-fly once the index size reaches <xref linkend="guc-effective-cache-size">. The default is <literal>AUTO</>.
-->
    在使用<xref linkend="gist-buffering-build">建立索引时决定是否缓存建立的方法.使用<literal>OFF</> 关闭这个功能,<literal>ON</> 打开这个功能.
使用<literal>AUTO</> 它初始化时是关闭的,但是当索引的达到<xref linkend="guc-effective-cache-size">将会打开.默认使用<literal>AUTO</>.
</para>
    </listitem>
   </varlistentry>
   </variablelist>

   <para>
<!--
    GIN indexes accept a different parameter:
-->
GIN索引接受一个不同的参数:   
</para>

   <variablelist>
   <varlistentry>
    <term><literal>FASTUPDATE</></term>
    <listitem>
    <para>
<!--
     This setting controls usage of the fast update technique described in
     <xref linkend="gin-fast-update">.  It is a Boolean parameter:
     <literal>ON</> enables fast update, <literal>OFF</> disables it.
     (Alternative spellings of <literal>ON</> and <literal>OFF</> are
     allowed as described in <xref linkend="config-setting">.)  The
     default is <literal>ON</>.
-->
    这个设置用来控制在 <xref linkend="gin-fast-update">中描述的快速更新技术.它是一个布尔类型参数:<literal>ON</>使能快速更新,<literal>OFF</>关闭这个功能.(在<xref linkend="config-setting">中描述了允许可选的拼写 <literal>ON</> and <literal>OFF</>.)默认是<literal>ON</>.

</para>

    <note>
     <para>
<!--
      Turning <literal>FASTUPDATE</> off via <command>ALTER INDEX</> prevents
      future insertions from going into the list of pending index entries,
      but does not in itself flush previous entries.  You might want to
      <command>VACUUM</> the table afterward to ensure the pending list is
      emptied.
-->
    通过<command>ALTER INDEX</>关闭<literal>FASTUPDATE</>防止将来数据插入到待建立的索引记录中,但是它自己不写之前的记录到磁盘.你可以使用<command>VACUUM</> 表来确保待建立索引空.
</para>
    </note>
    </listitem>
   </varlistentry>
   </variablelist>
  </refsect2>

  <refsect2 id="SQL-CREATEINDEX-CONCURRENTLY">
   <title id="SQL-CREATEINDEX-CONCURRENTLY-title"><!--Building Indexes Concurrently-->并发建立索引</title>

   <indexterm zone="SQL-CREATEINDEX-CONCURRENTLY">
   <primary>index</primary>
   <secondary>building concurrently</secondary>
   </indexterm>

   <para>
<!--
    Creating an index can interfere with regular operation of a database.
    Normally <productname>PostgreSQL</> locks the table to be indexed against
    writes and performs the entire index build with a single scan of the
    table. Other transactions can still read the table, but if they try to
    insert, update, or delete rows in the table they will block until the
    index build is finished. This could have a severe effect if the system is
    a live production database.  Very large tables can take many hours to be
    indexed, and even for smaller tables, an index build can lock out writers
    for periods that are unacceptably long for a production system.
-->   
建立一个索引将影响正常的数据库操作.一般的 <productname>PostgreSQL</>锁住建立索引的表防止写，然后通过扫描表来建立整个索引.其他的事物可以读表,但是插入,更新,删除操作将被锁住直到索引建立完成.如果这是一个线上的生成库将会有较严重的影响.非常大的表将使用数个小时来建立索引,即使一个较小的表,对于生产库也会在一个不可接受的时间内锁住该表的写操作.
</para>

   <para>
<!--
    <productname>PostgreSQL</> supports building indexes without locking
    out writes.  This method is invoked by specifying the
    <literal>CONCURRENTLY</> option of <command>CREATE INDEX</>.
    When this option is used,
    <productname>PostgreSQL</> must perform two scans of the table, and in
    addition it must wait for all existing transactions that could potentially
    use the index to terminate.  Thus
    this method requires more total work than a standard index build and takes
    significantly longer to complete.  However, since it allows normal
    operations to continue while the index is built, this method is useful for
    adding new indexes in a production environment.  Of course, the extra CPU
    and I/O load imposed by the index creation might slow other operations.
-->
  <productname>PostgreSQL</>支持建立索引时不锁写操作.这个方法通过<command>CREATE INDEX</>时指定<literal>CONCURRENTLY</>选项,当使用这个选项时, <productname>PostgreSQL</>必须扫描表2次,它必须等待所有的将要使用该索引的事物结束.所以这个方法比标准的建立索引需要更多的工作并且花费更多的时间.然而,在建立索引的时候它允许正常的操作所以对于生产环境它是非常有用的.当然在建立索引时额外的CPU和I/o开销可能会降低其他操作的效率.
</para>

   <para>
<!--
    In a concurrent index build, the index is actually entered into
    the system catalogs in one transaction, then two table scans occur in
    two more transactions.  Any transaction active when the second table
    scan starts can block concurrent index creation until it completes,
    even transactions that only reference the table after the second table
    scan starts.   Concurrent index creation serially waits for each old
    transaction to complete using the method outlined in section <xref
    linkend="view-pg-locks">.
-->
   在并发创建索引中，索引在一个事物中进入系统表，然后两表扫描发生在另外的事物中．在第二遍扫描时任何活跃的事物（在该表上）将会阻塞并发索引的建立直到事物完成．甚至在第二遍表扫描时事物仅仅涉及到该表．并发建立索引使用<xref
    linkend="view-pg-locks">中的方法等待每一个发生的事物完成．
</para>

   <para>
<!--
    If a problem arises while scanning the table, such as deadlock or a
    uniqueness violation in a unique index, the <command>CREATE INDEX</>
    command will fail but leave behind an <quote>invalid</> index. This index
    will be ignored for querying purposes because it might be incomplete;
    however it will still consume update overhead. The <application>psql</>
    <command>\d</> command will report such an index as <literal>INVALID</>:
-->
当扫描表时发生了问题，例如死锁或一个唯一索引违反了唯一性，<command>CREATE INDEX</>将会失败并且留下一个 <quote>invalid</>索引．在查询时这个索引将会被忽略因为他是不完整的；然而它仍然会增加更新的开销．<application>psql</><command>\d</>命令将列出带 <literal>INVALID</>的索引．
<programlisting>
postgres=# \d tab
       Table "public.tab"
 Column |  Type   | Modifiers 
--------+---------+-----------
 col    | integer | 
Indexes:
    "idx" btree (col) INVALID
</programlisting>
<!--
    The recommended recovery
    method in such cases is to drop the index and try again to perform
    <command>CREATE INDEX CONCURRENTLY</>.  (Another possibility is to rebuild
    the index with <command>REINDEX</>.  However, since <command>REINDEX</>
    does not support concurrent builds, this option is unlikely to seem
    attractive.)
-->
这种情况推荐的恢复方法是删除掉索引并且再次执行<command>CREATE INDEX CONCURRENTLY</>. （另一种重建索引的方法是使用<command>REINDEX</>.然而，因为<command>REINDEX</>不支持并发建立索引，所以这种方式可用性不高．）
   </para>

   <para>
<!--
    Another caveat when building a unique index concurrently is that the
    uniqueness constraint is already being enforced against other transactions
    when the second table scan begins.  This means that constraint violations
    could be reported in other queries prior to the index becoming available
    for use, or even in cases where the index build eventually fails.  Also,
    if a failure does occur in the second scan, the <quote>invalid</> index
    continues to enforce its uniqueness constraint afterwards.
-->
另一个缺点是当并发建立唯一索引第二遍扫描表后唯一性将会约束其他事物．这意味着在索引建立完成前在其他查询中违反了该索引将会报违反约束错误，即使最后索引建立失败．如果在第二遍扫描发生了错误，在后续的操作中<quote>invalid</>索引也会（在相关列上）保持该唯一性．
</para>

   <para>
<!--
    Concurrent builds of expression indexes and partial indexes are supported.
    Errors occurring in the evaluation of these expressions could cause
    behavior similar to that described above for unique constraint violations.
-->
   支持建立并发索引和部分索引．在这些语句中出现错误将会产生和前面违反唯一性约束相似的错误．
</para>

   <para>
<!--
    Regular index builds permit other regular index builds on the
    same table to occur in parallel, but only one concurrent index build
    can occur on a table at a time.  In both cases, no other types of schema
    modification on the table are allowed meanwhile.  Another difference
    is that a regular <command>CREATE INDEX</> command can be performed within
    a transaction block, but <command>CREATE INDEX CONCURRENTLY</> cannot.
-->
标准建立索引允许并行的执行其他标准的建立索引语句，但是在一个表上一次仅可以有一个并发建立索引语句．在这两种情况下，建立索引的同时不允许有其他模式类型的修改．另一个不同点是 <command>CREATE INDEX</>可以在一个阻塞的事物里执行，而 <command>CREATE INDEX CONCURRENTLY</>不可以．
</para>
  </refsect2>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
<!--
   See <xref linkend="indexes"> for information about when indexes can
   be used, when they are not used, and in which particular situations
   they can be useful.
-->
在<xref linkend="indexes">中描述了什么时候会使用索引，什么时候不使用索引，以及在什么情况下索引是有用的．
</para>

  <caution>
   <para>
<!--
    Hash index operations are not presently WAL-logged,
    so hash indexes might need to be rebuilt with <command>REINDEX</>
    after a database crash if there were unwritten changes.
    Also, changes to hash indexes are not replicated over streaming or
    file-based replication after the initial base backup, so they
    give wrong answers to queries that subsequently use them.
    For these reasons, hash index use is presently discouraged.
-->
哈希索引不记录到WAL日志中，所以当系统崩溃有未写入磁盘的数据时哈希索引需要使用<command>REINDEX</>重新建立．哈希索引的变化不能在恢复一个基础备份后通过流复制或者文件复制来重写．所以接下来在查询中使用他们将会给出错误的结果．因为这些原因使用哈希索引是有阻碍的．
</para>
  </caution>

  <para>
<!--
   Currently, only the B-tree, GiST and GIN index methods support
   multicolumn indexes. Up to 32 fields can be specified by default.
   (This limit can be altered when building
   <productname>PostgreSQL</productname>.)  Only B-tree currently
   supports unique indexes.
-->
现在只有B-tree, GiST 和 GIN支持多列索引．默认支持最多32列．（当编译<productname>PostgreSQL</productname>时可以改变这个限制）．现在只有B-tree支持唯一索引．
</para>

  <para>
<!--
   An <firstterm>operator class</firstterm> can be specified for each
   column of an index. The operator class identifies the operators to be
   used by the index for that column. For example, a B-tree index on
   four-byte integers would use the <literal>int4_ops</literal> class;
   this operator class includes comparison functions for four-byte
   integers. In practice the default operator class for the column's data
   type is usually sufficient. The main point of having operator classes
   is that for some data types, there could be more than one meaningful
   ordering. For example, we might want to sort a complex-number data
   type either by absolute value or by real part. We could do this by
   defining two operator classes for the data type and then selecting
   the proper class when making an index.  More information about
   operator classes is in <xref linkend="indexes-opclass"> and in <xref
   linkend="xindex">.
-->
  对于索引的每一列可以指定一个<firstterm>operator class</firstterm>．<firstterm>operator class</firstterm>标识了索引那一列的使用的操作符．例如一个B-tree索引在一个四字节整数上可以使用<literal>int4_ops</literal>；这个操作符类包括四字节整数的比较函数．实际上对于列上的数据类型默认的操作符类时足够用的．操作符类主要用于一些有多种排序的数据．例如，我们想按照绝对值或者实数部分排序一个复数．我们能通过定义两个操作符类然后当建立索引时选择合适的类．详细的操作符类信息请参考：<xref linkend="indexes-opclass">和<xref linkend="xindex">.
</para>

  <para>
<!--
   For index methods that support ordered scans (currently, only B-tree),
   the optional clauses <literal>ASC</>, <literal>DESC</>, <literal>NULLS
   FIRST</>, and/or <literal>NULLS LAST</> can be specified to modify
   the sort ordering of the index.  Since an ordered index can be
   scanned either forward or backward, it is not normally useful to create a
   single-column <literal>DESC</> index &mdash; that sort ordering is already
   available with a regular index.  The value of these options is that
   multicolumn indexes can be created that match the sort ordering requested
   by a mixed-ordering query, such as <literal>SELECT ... ORDER BY x ASC, y
   DESC</>.  The <literal>NULLS</> options are useful if you need to support
   <quote>nulls sort low</> behavior, rather than the default <quote>nulls
   sort high</>, in queries that depend on indexes to avoid sorting steps.
-->
索引（现在只有B-tree）中支持有序扫描的字句中可以制定<literal>ASC</>, <literal>DESC</>, <literal>NULLS
   FIRST</>, 和 <literal>NULLS LAST</>修改索引的排序方式．因为一个有序的索引能被从前向后或者从后向前扫描．建立一个单列的<literal>DESC</>索引是没有意义的．因为在一个标准的索引是已经排序的．在创建多列索引时使用这些选项值来匹配一些复合查询的排序请求，例如<literal>SELECT ... ORDER BY x ASC, y DESC</>.如果你在查询中需要支持  <quote>nulls sort low</>特性<literal>NULLS</>选项是很有用的，而不是默认的<quote>nulls sort high</>,
</para>

  <para>
<!--
   For most index methods, the speed of creating an index is
   dependent on the setting of <xref linkend="guc-maintenance-work-mem">.
   Larger values will reduce the time needed for index creation, so long
   as you don't make it larger than the amount of memory really available,
   which would drive the machine into swapping.  For hash indexes, the
   value of <xref linkend="guc-effective-cache-size"> is also relevant to
   index creation time: <productname>PostgreSQL</productname> will use one
   of two different hash index creation methods depending on whether the
   estimated index size is more or less than <varname>effective_cache_size</>.
   For best results, make sure that this parameter is also set to something
   reflective of available memory, and be careful that the sum of
   <varname>maintenance_work_mem</> and <varname>effective_cache_size</> is
   less than the machine's RAM less whatever space is needed by other
   programs.
  -->
对于大多数索引，创建索引的速度依赖于<xref linkend="guc-maintenance-work-mem">的设置．只要你没有使他超过可得到内存而进入swap分区，较大的值将会减少索引创建的时间．对于创建哈希索引的时间与<xref linkend="guc-effective-cache-size">值相关,<productname>PostgreSQL</productname>将使用两种不同的哈希索引创建方法，主要取决于索引的大小比<varname>effective_cache_size</>大还是小．为了得到较好的结果，确保这个参数的设置考虑到可用内存，并且注意<varname>maintenance_work_mem</>和<varname>effective_cache_size</>的和小于其他程序所需要的内存空间．
</para>

  <para>
<!--
   Use <xref linkend="sql-dropindex">
   to remove an index.
-->
使用  <xref linkend="sql-dropindex">删除一个索引．
</para>

  <para>
<!--
   Prior releases of <productname>PostgreSQL</productname> also had an
   R-tree index method.  This method has been removed because
   it had no significant advantages over the GiST method.
   If <literal>USING rtree</> is specified, <command>CREATE INDEX</>
   will interpret it as <literal>USING gist</>, to simplify conversion
   of old databases to GiST.
-->
  <productname>PostgreSQL</productname>之前的版本有一个R-tree索引方法．这个方法已经被删除因为它对于GiST索引没有明显的优势．如果指定<literal>USING rtree</>，<command>CREATE INDEX</>会将他翻译为<literal>USING gist</>，去转换老的数据库版本到GiST.
</para>
 </refsect1>

 <refsect1>
  <title>Examples</title>

  <para>
<!--
   To create a B-tree index on the column <literal>title</literal> in
   the table <literal>films</literal>:
-->
在表<literal>films</literal>的<literal>title</literal>列上建立B-tree索引：
<programlisting>
CREATE UNIQUE INDEX title_idx ON films (title);
</programlisting>
  </para>

  <para>
<!--
   To create an index on the expression <literal>lower(title)</>,
   allowing efficient case-insensitive searches:
-->
允许大小写无关查询在 <literal>lower(title)</>表达式上建立索引：
<programlisting>
CREATE INDEX ON films ((lower(title)));
</programlisting>
<!--
   (In this example we have chosen to omit the index name, so the system
   will choose a name, typically <literal>films_lower_idx</>.)
-->
(在这个例子中我们可以选在忽略索引名字，系统将给出一个名字，典型的是<literal>films_lower_idx</>.)
 </para>

  <para>
<!--
   To create an index with non-default collation:
-->
创建一个使用非默认排序方式的索引：
<programlisting>
CREATE INDEX title_idx_german ON films (title COLLATE "de_DE");
</programlisting>
  </para>

  <para>
<!--
   To create an index with non-default sort ordering of nulls:
-->
创建一个null值的非默认排序的索引：
<programlisting>
CREATE INDEX title_idx_nulls_low ON films (title NULLS FIRST);
</programlisting>
  </para>

  <para>
<!--
   To create an index with non-default fill factor:
-->
创建一个非默认填充因子的索引：
<programlisting>
CREATE UNIQUE INDEX title_idx ON films (title) WITH (fillfactor = 70);
</programlisting>
  </para>

  <para>
<!--
   To create a <acronym>GIN</> index with fast updates disabled:
-->
创建一个将快速更新关闭的<acronym>GIN</>索引：
<programlisting>
CREATE INDEX gin_idx ON documents_table USING gin (locations) WITH (fastupdate = off);
</programlisting>
  </para>

  <para>
<!--
   To create an index on the column <literal>code</> in the table
   <literal>films</> and have the index reside in the tablespace
   <literal>indexspace</>:
-->
创建一个在<literal>films</>的<literal>code</>列的索引，并且使索引建立在<literal>indexspace</>表空间中：
<programlisting>
CREATE INDEX code_idx ON films (code) TABLESPACE indexspace;
</programlisting>
  </para>

  <para>
<!--
   To create a GiST index on a point attribute so that we
   can efficiently use box operators on the result of the
   conversion function:
-->
在一个点属性上创建GiST索引，让我们在转换函数的结果上高效的使用box操作符：
<programlisting>
CREATE INDEX pointloc
    ON points USING gist (box(location,location));
SELECT * FROM points
    WHERE box(location,location) &amp;&amp; '(0,0),(1,1)'::box;
</programlisting>
  </para>

  <para>
<!--
   To create an index without locking out writes to the table:
-->
创建一个在表上不加写锁的索引：
<programlisting>
CREATE INDEX CONCURRENTLY sales_quantity_index ON sales_table (quantity);
</programlisting></para>

 </refsect1>

 <refsect1>
  <title>Compatibility</title>

  <para>
<!--
   <command>CREATE INDEX</command> is a
   <productname>PostgreSQL</productname> language extension.  There
   are no provisions for indexes in the SQL standard.
--> 
 <command>CREATE INDEX</command>是<productname>PostgreSQL</productname>语言的扩展．在SQL标准中没有索引的规定．
</para>
 </refsect1>

 <refsect1>
  <title>See Also</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterindex"></member>
   <member><xref linkend="sql-dropindex"></member>
  </simplelist>
 </refsect1>
</refentry>

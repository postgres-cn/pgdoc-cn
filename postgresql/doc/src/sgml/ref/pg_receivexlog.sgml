<!--
doc/src/sgml/ref/pg_receivexlog.sgml
PostgreSQL documentation
-->

<refentry id="app-pgreceivexlog">
 <indexterm zone="app-pgreceivexlog">
  <primary>pg_receivexlog</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle>pg_receivexlog</refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_receivexlog</refname>
  <refpurpose>以流的方式从一个<productname>PostgreSQL</productname>服务器得到事务日志</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_receivexlog</command>
   <arg rep="repeat"><replaceable>option</></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>
   描述
  </title>
  <para>
   <application>pg_receivexlog</application>被用来从一个运行着的<productname>PostgreSQL</productname>集簇以流的方式得到事务日志。事务日志会被使用流复制协议以流的方式传送，并且被写入到文件的一个本地目录。这个目录可以被用作归档位置来做一次使用时间点恢复的恢复（见<xref linkend="continuous-archiving">）。
  </para>

  <para>
   当事务日志在服务器上被产生时，<application>pg_receivexlog</application>实时以流的方式传输事务日志，并且不像<xref linkend="guc-archive-command">那样等待段完成。由于这个原因，在使用<application>pg_receivexlog</application>时不必设置<xref linkend="guc-archive-timeout">。
  </para>

  <para>
   事务日志在一个常规<productname>PostgreSQL</productname>连接上被以流式传送，并且使用复制协议。连接必须由一个超级用户或一个具有<literal>REPLICATION</literal>权限（见<xref linkend="role-attributes">）的用户建立，并且<filename>pg_hba.conf</filename>必须显式允许复制连接。服务器也必须被配置一个足够高的<xref linkend="guc-max-wal-senders">来至少留出一个可用会话给流。
  </para>

  <para>
   如果该连接丢失，或者它一开始就由于一个非致命错误而没有被建立，<application>pg_receivexlog</application>将无限期地重试连接并且尽可能重新建立流。为了避免这种行为，使用<literal>-n</literal>参数。
  </para>
 </refsect1>

 <refsect1>
  <title>选项</title>

    <variablelist>
     <varlistentry>
      <term><option>-D <replaceable class="parameter">directory</replaceable></option></term>
      <term><option>--directory=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
        要把输出写到哪个目录。
       </para>
       <para>
        这个参数是必需的。
       </para>
      </listitem>
     </varlistentry>
         
     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-loop</option></term>
      <listitem>
       <para>
        不要在连接错误上循环。相反，碰到一个错误时立刻退出。
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><option>-s <replaceable class="parameter">interval</replaceable></option></term>
      <term><option>--status-interval=<replaceable class="parameter">interval</replaceable></option></term>
      <listitem>
       <para>
        指定发送回服务器的状态包之间的秒数。这允许我们更容易地监控服务器的进度。
        一个零值完全禁用这种周期性的状态更新，不过当服务器需要时还是会有一个更新
        会被发送来避免超时导致的断开连接。默认值是 10 秒。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S <replaceable>slotname</replaceable></option></term>
      <term><option>--slot=<replaceable class="parameter">slotname</replaceable></option></term>
      <listitem>
        <para>
         要求<application>pg_receivexlog</application>使用一个已有的复制槽（见
         <xref linkend="streaming-replication-slots">）。在使用这个选项时，
         <application>pg_receivexlog</>将会报告给服务器一个刷写位置，指示每一个
         段是何时被同步到磁盘的，这样服务器可以在不需要该段时移除它。在使用这个参
         数时，要确保<application>pg_receivexlog</>不会因为
         <xref linkend="guc-synchronous-standby-names">不小心的设置变成同步后
         备。否则它不会足够频繁地刷写数据，这会让这个选项无法正确地工作。
        </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--verbose</option></term>
      <listitem>
       <para>
        启用冗长模式。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

   <para>
    下列命令行选项控制数据库连接参数。

    <variablelist>
     <varlistentry>
      <term><option>-d <replaceable class="parameter">connstr</replaceable></option></term>
      <term><option>--dbname=<replaceable class="parameter">connstr</replaceable></option></term>
      <listitem>
       <para>
        指定用于连接到服务器的参数为一个连接字符串。详见<xref linkend="libpq-connstring">。
       </para>
       <para>
        为了和其他客户端应用一致，该选项被称为<literal>--dbname</>。但是因为<application>pg_receivexlog</application>并不连接到集簇中的任何特定数据库，连接字符串中的数据库名将被忽略。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-h <replaceable class="parameter">host</replaceable></option></term>
      <term><option>--host=<replaceable class="parameter">host</replaceable></option></term>
      <listitem>
       <para>
        指定运行服务器的机器的主机名。如果该值以一个斜线开始，它被用作 Unix 域套接字的目录。默认值取自<envar>PGHOST</envar>环境变量（如果设置），否则会尝试一个 Unix 域套接字连接。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>--port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
       <para>
        指定服务器正在监听连接的 TCP 端口或本地 Unix 域套接字文件扩展。默认用<envar>PGPORT</envar>环境变量中的值（如果设置），或者一个编译在程序中的默认值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U <replaceable>username</replaceable></option></term>
      <term><option>--username=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        要作为哪个用户连接。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</></term>
      <term><option>--no-password</></term>
      <listitem>
       <para>
        从不发出一个口令提示。如果服务器要求口令认证并且没有其他方式提供口令（例如一个<filename>.pgpass</filename>文件），那儿连接尝试将失败。这个选项对于批处理任务和脚本有用，因为在其中没有一个用户来输入口令。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-W</option></term>
      <term><option>--password</option></term>
      <listitem>
       <para>
        强制<application>pg_receivexlog</application>在连接到一个数据库之前提示要求一个口令。
       </para>

       <para>
        这个选项不是必不可少的，因为如果服务器要求口令认证，<application>pg_receivexlog</application>将自动提示要求一个口令。但是，<application>pg_receivexlog</application>将浪费一次连接尝试来发现服务器想要一个口令。在某些情况下值得用<option>-W</>来避免额外的连接尝试。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    其他选项也可用：

    <variablelist>
     <varlistentry>
       <term><option>-V</></term>
       <term><option>--version</></term>
       <listitem>
       <para>
       打印<application>pg_receivexlog</application>版本并退出。
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-?</></term>
       <term><option>--help</></term>
       <listitem>
       <para>
       显示有关<application>pg_receivexlog</application>命令行参数的帮助并退出。
       </para>
       </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect1>

 <refsect1>
  <title>环境</title>

  <para>
   和大部分其他<productname>PostgreSQL</>工具相似，这个工具也使用<application>libpq</>（见<xref linkend="libpq-envars">）支持的环境变量。
  </para>

 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   在使用<application>pg_receivexlog</application>替代
   <xref linkend="guc-archive-command">作为主要的 WAL 备份方法时，
   强烈建议使用复制槽。否则，服务器可能会在事务日志文件被备份好之前重用
   或者移除它们，因为没有任何信息（不管是来自
   <xref linkend="guc-archive-command">或是复制槽）能够指示 WAL 流已
   经被归档到什么程度。不过要注意，如果接收者没有持续地取走 WAL 数据，
   一个复制槽将会填满服务器的磁盘空间。
  </para>

 </refsect1>

 <refsect1>
  <title>例子</title>

  <para>
   要从位于<literal>mydbserver</literal>的服务器流式传送事务日志并且将它存储在本地目录<filename>/usr/local/pgsql/archive</filename>：
<screen>
<prompt>$</prompt> <userinput>pg_receivexlog -h mydbserver -D /usr/local/pgsql/archive</userinput>
</screen></para>
 </refsect1>

 <refsect1>
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="APP-PGBASEBACKUP"></member>
  </simplelist>
 </refsect1>

</refentry>

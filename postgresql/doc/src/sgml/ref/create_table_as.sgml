<!--
doc/src/sgml/ref/create_table_as.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATETABLEAS">
 <indexterm zone="sql-createtableas">
  <primary>CREATE TABLE AS</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE TABLE AS</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TABLE AS</refname>
  <refpurpose>从一个查询的结果创建一个新表</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE <replaceable>table_name</replaceable>
    [ (<replaceable>column_name</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] ) | WITH OIDS | WITHOUT OIDS ]
    [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
    [ TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable> ]
    AS <replaceable>query</replaceable>
    [ WITH [ NO ] DATA ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>CREATE TABLE AS</command>创建一个表，并且用
   由一个<command>SELECT</command>命令计算出来的数据填充
   该表。该表的列具有和<command>SELECT</command>的输出列
   相关的名称和数据类型（不过可以通过给出一个显式的新列名列表来覆
   盖这些列名）。
  </para>

  <para>
   <command>CREATE TABLE AS</command>和创建一个视图有些
   相似，但是实际上非常不同：它会创建一个新表并且只计算该查询一次
   用来初始填充新表。这个新表将不会跟踪该查询源表的后续变化。相反，
   一个视图只要被查询，它的定义<command>SELECT</command>
   语句就会被重新计算。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><literal>GLOBAL</literal>或者<literal>LOCAL</literal></term>
    <listitem>
     <para>
      为兼容性而忽略。不推荐使用这些关键词，详见
      <xref linkend="sql-createtable">。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <varlistentry>
    <term><literal>TEMPORARY</>或者<literal>TEMP</></term>
    <listitem>
     <para>
      如果被指定，该表会被创建为一个临时表。详见
      <xref linkend="sql-createtable">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>UNLOGGED</></term>
    <listitem>
     <para>
      如果被指定，该表会被创建为一个不做日志的表。详见
      <xref linkend="sql-createtable">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>table_name</replaceable></term>
    <listitem>
     <para>
      要创建的表的名称（可以被模式限定）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>column_name</replaceable></term>
    <listitem>
     <para>
      新表中一列的名称。如果没有提供列名，会从查询的输出列名中得到。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
      这个子句为新表指定可选的存储参数，详见
      <xref linkend="sql-createtable-storage-parameters"
      endterm="sql-createtable-storage-parameters-title">。
      <literal>WITH</>子句也能包括<literal>OIDS=TRUE</>（或者只是
      <literal>OIDS</>）来指定新表的行应该被分配 OID （对象标识符），
      或者包括<literal>OIDS=FALSE</>来指定行没有 OID。详见
      <xref linkend="sql-createtable">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH OIDS</></term>
    <term><literal>WITHOUT OIDS</></term>
    <listitem>
     <para>
      这些是分别等效于<literal>WITH (OIDS)</>和
      <literal>WITH (OIDS=FALSE)</>的即将过时的语法。如果你希望同时
      给出<literal>OIDS</>设置和存储参数，你必须使用
      <literal>WITH ( ... )</>语法，见上文。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ON COMMIT</literal></term>
    <listitem>
     <para>
      临时表在事务块结束时的行为可以用<literal>ON COMMIT</literal>
      控制。三个选项是：

      <variablelist>
       <varlistentry>
        <term><literal>PRESERVE ROWS</literal></term>
        <listitem>
         <para>
          在事务结束时不采取特殊的动作。这是默认行为。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DELETE ROWS</literal></term>
        <listitem>
         <para>
          在每一个事务块结束时临时表中的所有行都将被删除。本质上，
          在每次提交时会完成一次自动的<xref
          linkend="sql-truncate">。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DROP</literal></term>
        <listitem>
         <para>
          在当前事务块结束时将删掉临时表。
         </para>
        </listitem>
       </varlistentry>
      </variablelist></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable></literal></term>
    <listitem>
     <para>
      <replaceable class="PARAMETER">tablespace_name</replaceable>
      是要在其中创建新表的表空间名称。如果没有指定，将会查询
      <xref linkend="guc-default-tablespace">，临时表会查询
      <xref linkend="guc-temp-tablespaces">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>query</replaceable></term>
    <listitem>
     <para>
      一个<xref linkend="sql-select">、<link
      linkend="sql-table">TABLE</link>或者<xref linkend="sql-values">
      命令，或者是一个运行准备好的<command>SELECT</>、
      <command>TABLE</>或者
      <command>VALUES</>查询的<xref linkend="sql-execute">命令。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH [ NO ] DATA</></term>
    <listitem>
     <para>
      这个子句指定查询产生的数据是否应该被复制到新表中。如果不是，只有
      表结构会被复制。默认是复制数据。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   这个命令在功能上类似于<xref linkend="sql-selectinto">，但是它更好，
   因为不太可能被<command>SELECT INTO</>语法的其他使用混淆。更
   进一步，<command>CREATE TABLE AS</command>提供了
   <command>SELECT INTO</command>的功能的一个超集。
  </para>

  <para>
   <command>CREATE TABLE AS</command>命令允许用户显式地指定
   是否应该包括 OID。如果没有显式地指定 OID 的存在，将使用
   <xref linkend="guc-default-with-oids">配置变量来判断。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   创建一个新表<literal>films_recent</literal>，它只由表
   <literal>films</literal>中最近的项组成：

<programlisting>
CREATE TABLE films_recent AS
  SELECT * FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting>
  </para>

  <para>
   要完全地复制一个表，也可以使用<literal>TABLE</literal>命令的
   简短形式：

<programlisting>
CREATE TABLE films2 AS
  TABLE films;
</programlisting>
  </para>

  <para>
   用一个预备语句创建一个新的临时表<literal>films_recent</literal>，
   它仅由表<literal>films</literal>中最近的项组成。新表有 OID 
   并且将在提交时被删除：

<programlisting>
PREPARE recentfilms(date) AS
  SELECT * FROM films WHERE date_prod &gt; $1;
CREATE TEMP TABLE films_recent WITH (OIDS) ON COMMIT DROP AS
  EXECUTE recentfilms('2002-01-01');
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>CREATE TABLE AS</command>符合
   <acronym>SQL</acronym>标准。下面的是非标准扩展：

   <itemizedlist spacing="compact">
    <listitem>
     <para>
      标准要求在子查询子句周围有圆括号，在
      <productname>PostgreSQL</productname>中这些圆括号是可选的。
     </para>
    </listitem>

    <listitem>
     <para>
      在标准中，<literal>WITH [ NO ] DATA</literal>子句是必要的，而
      PostgreSQL 中是可选的。
     </para>
    </listitem>

    <listitem>
     <para><productname>PostgreSQL</>处理临时表的方式和标准不同。
     详见<xref linkend="sql-createtable">。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>WITH</>子句是一种
      <productname>PostgreSQL</productname>扩展，
      标准中既没有存储参数也没有 OID。
     </para>
    </listitem>

    <listitem>
     <para>
      <productname>PostgreSQL</productname>的表空间概念是标准的
      一部分。因此，子句<literal>TABLESPACE</literal>是一种扩展。
     </para>
    </listitem>
   </itemizedlist></para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-creatematerializedview"></member>
   <member><xref linkend="sql-createtable"></member>
   <member><xref linkend="sql-execute"></member>
   <member><xref linkend="sql-select"></member>
   <member><xref linkend="sql-selectinto"></member>
   <member><xref linkend="sql-values"></member>
  </simplelist>
 </refsect1>

</refentry>

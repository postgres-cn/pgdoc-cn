<!--
doc/src/sgml/ref/create_table_as.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATETABLEAS">
 <indexterm zone="sql-createtableas">
  <primary>CREATE TABLE AS</primary>
 </indexterm>
 <refmeta>
  <refentrytitle>CREATE TABLE AS</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TABLE AS</refname>
  <!--
  <refpurpose>define a new table from the results of a query</refpurpose>
  -->
  <refpurpose>从一条查询的结果中定义一个新表</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE <replaceable>table_name</replaceable>
    [ (<replaceable>column_name</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] ) | WITH OIDS | WITHOUT OIDS ]
    [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
    [ TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable> ]
    AS <replaceable>query</replaceable>
    [ WITH [ NO ] DATA ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE TABLE AS</command> creates a table and fills it
   with data computed by a <command>SELECT</command> command.
   The table columns have the
   names and data types associated with the output columns of the
   <command>SELECT</command> (except that you can override the column
   names by giving an explicit list of new column names).
  </para>
-->
<para>
<command>CREATE TABLE AS</command>创建一个表并且用来自
<command>SELECT</command>命令的结果填充该表。该表的字段和
<command>SELECT</command>输出字段的名字及数据类型相关。
（不过你可以通过明确地给出一个字段名字列表来覆盖 SELECT 输出字段的名字。）
</para>

  <!--
<para>
   <command>CREATE TABLE AS</command> bears some resemblance to
   creating a view, but it is really quite different: it creates a new
   table and evaluates the query just once to fill the new table
   initially.  The new table will not track subsequent changes to the
   source tables of the query.  In contrast, a view re-evaluates its
   defining <command>SELECT</command> statement whenever it is
   queried.
  </para>
-->
<para>
<command>CREATE TABLE AS</command>和创建视图有点像，
不过两者之间实在是差异很大：它创建一个新表并且只对查询计算一次来填充这个新表。
新表不能跟踪源表的变化。相比之下，每次做查询的时候，
视图都重新计算定义它的<command>SELECT</command>语句。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <!--
<term><literal>GLOBAL</literal> or <literal>LOCAL</literal></term>
-->
<term><literal>GLOBAL</literal> 或 <literal>LOCAL</literal></term>
    <listitem>
     <!--
<para>
      Ignored for compatibility.  Use of these keywords is deprecated;
      refer to <xref linkend="sql-createtable"> for details.
     </para>
-->
<para>
忽略，仅仅为了兼容性而存在。这些关键字的使用已经废弃了；
请参考<xref linkend="sql-createtable">获取细节。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <varlistentry>
    <!--
<term><literal>TEMPORARY</> or <literal>TEMP</></term>
-->
<term><literal>TEMPORARY</> 或 <literal>TEMP</></term>
    <listitem>
     <!--
<para>
      If specified, the table is created as a temporary table.
      Refer to <xref linkend="sql-createtable"> for details.
     </para>
-->
<para>
如果声明了这个选项，则该表作为临时表创建。
参阅<xref linkend="sql-createtable">获取细节。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>UNLOGGED</></term>
    <listitem>
     <!--
<para>
      If specified, the table is created as an unlogged table.
      Refer to <xref linkend="sql-createtable"> for details.
     </para>
-->
<para>
如果声明了这个选项，则该表作为非日志表创建。
参阅<xref linkend="sql-createtable">获取细节。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>table_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of the table to be created.
     </para>
-->
<para>
要创建的表名(可以用模式修饰)。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>column_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of a column in the new table.  If column names are not
      provided, they are taken from the output column names of the query.
     </para>
-->
<para>
新表中字段的名称。如果没有提供字段名字，那么就从查询的输出字段名中获取。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <!--
<para>
      This clause specifies optional storage parameters for the new table;
      see <xref linkend="sql-createtable-storage-parameters"
      endterm="sql-createtable-storage-parameters-title"> for more
      information.  The <literal>WITH</> clause
      can also include <literal>OIDS=TRUE</> (or just <literal>OIDS</>)
      to specify that rows of the new table
      should have OIDs (object identifiers) assigned to them, or
      <literal>OIDS=FALSE</> to specify that the rows should not have OIDs.
      See <xref linkend="sql-createtable"> for more information.
     </para>
-->
<para>
这个子句为新表指定了可选的存储参数；参见<xref linkend="sql-createtable-storage-parameters"
      endterm="sql-createtable-storage-parameters-title">获取更多信息。
<literal>WITH</>子句还可以包含<literal>OIDS=TRUE</>（或只是<literal>OIDS</>）
来为新表中的行分配和存储 OID(对象表示符)；或者用<literal>OIDS=FALSE</>
表示不分配 OID 。参见<xref linkend="sql-createtable">获取更多信息。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH OIDS</></term>
    <term><literal>WITHOUT OIDS</></term>
    <listitem>
     <!--
<para>
      These are obsolescent syntaxes equivalent to <literal>WITH (OIDS)</>
      and <literal>WITH (OIDS=FALSE)</>, respectively.  If you wish to give
      both an <literal>OIDS</> setting and storage parameters, you must use
      the <literal>WITH ( ... )</> syntax; see above.
     </para>
-->
<para>
这些是反对使用的、分别等价于<literal>WITH (OIDS)</>和
<literal>WITH (OIDS=FALSE)</>的语法。如果你希望同时给出<literal>OIDS</>
设置和存储参数，必须使用<literal>WITH ( ... )</>语法；见下文。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ON COMMIT</literal></term>
    <listitem>
     
<para>
<!-- 
      The behavior of temporary tables at the end of a transaction
      block can be controlled using <literal>ON COMMIT</literal>.
      The three options are:
-->
可以使用<literal>ON COMMIT</literal>控制临时表在事务块结尾的行为。
三个选项是：
      <variablelist>
       <varlistentry>
        <term><literal>PRESERVE ROWS</literal></term>
        <listitem>
<!--
         <para>
          No special action is taken at the ends of transactions.
          This is the default behavior.
         </para>
-->
<para>
在事务的结尾不采取任何特别的动作，这是缺省。
</para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DELETE ROWS</literal></term>
        <listitem>
         <!--
<para>
          All rows in the temporary table will be deleted at the end
          of each transaction block.  Essentially, an automatic <xref
          linkend="sql-truncate"> is done
          at each commit.
         </para>
-->
<para>
在每个事务块的结尾都删除临时表中的所有行。
本质上是在每次提交事务后自动执行一个<xref linkend="sql-truncate">命令。
</para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DROP</literal></term>
        <listitem>
         <!--
<para>
          The temporary table will be dropped at the end of the current
          transaction block.
         </para>
-->
<para>
在当前事务块的结尾将删除临时表。
</para>
        </listitem>
       </varlistentry>
      </variablelist></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable></literal></term>
    <listitem>
     <!--
<para>
      The <replaceable class="PARAMETER">tablespace_name</replaceable> is the name
      of the tablespace in which the new table is to be created.
      If not specified,
      <xref linkend="guc-default-tablespace"> is consulted, or
      <xref linkend="guc-temp-tablespaces"> if the table is temporary.
     </para>
-->
<para>
指定新表将要在<replaceable class="PARAMETER">tablespace_name</replaceable>
表空间内创建。如果没有声明，将咨询<xref linkend="guc-default-tablespace">，
或如果该表为临时表，那么将使用<xref linkend="guc-temp-tablespaces">。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>query</replaceable></term>
    <listitem>
     <!--
<para>
      A <xref linkend="sql-select">, <link
      linkend="sql-table">TABLE</link>, or <xref linkend="sql-values">
      command, or an <xref linkend="sql-execute"> command that runs a
      prepared <command>SELECT</>, <command>TABLE</>, or
      <command>VALUES</> query.
     </para>
-->
<para>
一个<xref linkend="sql-select">、<link linkend="sql-table">TABLE</link>
或<xref linkend="sql-values">命令，或者一个运行预备好的
<command>SELECT</>、<command>TABLE</>或<command>VALUES</>
查询的<xref linkend="sql-execute">命令。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH [ NO ] DATA</></term>
    <listitem>
     <!--
<para>
      This clause specifies whether or not the data produced by the query
      should be copied into the new table.  If not, only the table structure
      is copied.  The default is to copy the data.
     </para>
-->
<para>
这个子句指定查询产生的数据是否应该拷贝到新表中。如果不，那么只拷贝表结构。
缺省是拷贝数据。
</para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   This command is functionally similar to <xref
   linkend="sql-selectinto">, but it is
   preferred since it is less likely to be confused with other uses of
   the <command>SELECT INTO</> syntax. Furthermore, <command>CREATE
   TABLE AS</command> offers a superset of the functionality offered
   by <command>SELECT INTO</command>.
  </para>
-->
<para>
这条命令在功能上等效于<xref linkend="sql-selectinto">，但是更建议你用这个命令，
因为它不太可能和<command>SELECT INTO</>语法的其它方面混淆。另外，
<command>CREATE TABLE AS</command>提供了<command>SELECT INTO</command>功能的超集。
</para>

  <!--
<para>
   The <command>CREATE TABLE AS</command> command allows the user to
   explicitly specify whether OIDs should be included. If the
   presence of OIDs is not explicitly specified,
   the <xref linkend="guc-default-with-oids"> configuration variable is
   used.
   </para>
-->
<para>
<command>CREATE TABLE AS</command>
命令允许明确声明是否应该包含 OID 。如果没有明确声明是否应该包含 OID ，
那么使用配置变量<xref linkend="guc-default-with-oids">的设置。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

 
<para>
<!--
 Create a new table <literal>films_recent</literal> consisting of only
   recent entries from the table <literal>films</literal>:
-->
创建一个只包含表<literal>films</literal>中最近的记录的新表<literal>films_recent</literal>：
<programlisting>
CREATE TABLE films_recent AS
  SELECT * FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting>
  </para>

  
<para>
<!--
   To copy a table completely, the short form using
   the <literal>TABLE</literal> command can also be used:
-->
要完整的拷贝一个表，也可以使用<literal>TABLE</literal>命令的简易形式：
<programlisting>
CREATE TABLE films2 AS
  TABLE films;
</programlisting>
  </para>

<para>
<!--
   Create a new temporary table <literal>films_recent</literal>, consisting of
   only recent entries from the table <literal>films</literal>, using a
   prepared statement.  The new table has OIDs and will be dropped at commit:
-->
使用预备语句创建一个只包含表<literal>films</literal>中最近的记录的新临时表
<literal>films_recent</literal>，该临时表包含 OID 并且在事务结束时将被删除：
<programlisting>
PREPARE recentfilms(date) AS
  SELECT * FROM films WHERE date_prod &gt; $1;
CREATE TEMP TABLE films_recent WITH (OIDS) ON COMMIT DROP AS
  EXECUTE recentfilms('2002-01-01');
</programlisting></para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  
<para>
<!-- 
   <command>CREATE TABLE AS</command> conforms to the <acronym>SQL</acronym>
   standard.  The following are nonstandard extensions:
-->
<command>CREATE TABLE AS</command>兼容<acronym>SQL</acronym>标准，
下面是非标准的扩展：
   <itemizedlist spacing="compact">
    <listitem>
<!--
     <para>
      The standard requires parentheses around the subquery clause; in
      <productname>PostgreSQL</productname>, these parentheses are
      optional.
     </para>
-->
<para>
标准要求在子查询子句周围有圆括弧，在<productname>PostgreSQL</productname>
里，这些圆括弧是可选的。
</para>
    </listitem>

    <listitem>
     <!--
<para>
      In the standard, the <literal>WITH [ NO ] DATA</literal> clause
      is required; in PostgreSQL it is optional.
     </para>
-->
<para>
在标准中，<literal>WITH [ NO ] DATA</literal>子句是必选的；
在PostgreSQL中，它是可选的。
</para>
    </listitem>

    <listitem>
     <!--
<para><productname>PostgreSQL</> handles temporary tables in a way
      rather different from the standard; see
      <xref linkend="sql-createtable">
      for details.
     </para>
-->
<para>
<productname>PostgreSQL</>处理临时表的方法和标准相差较大；
参阅<xref linkend="sql-createtable">获取细节。
</para>
    </listitem>

    <listitem>
     <!--
<para>
      The <literal>WITH</> clause is a <productname>PostgreSQL</productname>
      extension; neither storage parameters nor OIDs are in the standard.
     </para>
-->
<para>
<literal>WITH</>子句是<productname>PostgreSQL</productname>扩展，
并且 SQL 标准中也没有存储参数和 OID 。
</para>
    </listitem>

    <listitem>
     <!--
<para>
      The <productname>PostgreSQL</productname> concept of tablespaces is not
      part of the standard.  Hence, the clause <literal>TABLESPACE</literal>
      is an extension.
     </para>
-->
<para>
<productname>PostgreSQL</productname>表空间的概念也不是标准的一部分。
因此<literal>TABLESPACE</literal>子句也是扩展。
</para>
    </listitem>
   </itemizedlist></para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-creatematerializedview"></member>
   <member><xref linkend="sql-createtable"></member>
   <member><xref linkend="sql-execute"></member>
   <member><xref linkend="sql-select"></member>
   <member><xref linkend="sql-selectinto"></member>
   <member><xref linkend="sql-values"></member>
  </simplelist>
 </refsect1>

</refentry>

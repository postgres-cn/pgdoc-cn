<!--
doc/src/sgml/ref/alter_function.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERFUNCTION">
 <indexterm zone="sql-alterfunction">
  <primary>ALTER FUNCTION</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER FUNCTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER FUNCTION</refname>
  <refpurpose>更改一个函数的定义</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
    <replaceable class="PARAMETER">action</replaceable> [ ... ] [ RESTRICT ]
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
    RENAME TO <replaceable>new_name</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
    OWNER TO <replaceable>new_owner</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
    SET SCHEMA <replaceable>new_schema</replaceable>

<phrase>其中 <replaceable class="PARAMETER">action</replaceable> 是以下之一：</phrase>

    CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
    IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF
    [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
    COST <replaceable class="parameter">execution_cost</replaceable>
    ROWS <replaceable class="parameter">result_rows</replaceable>
    SET <replaceable class="parameter">configuration_parameter</replaceable> { TO | = } { <replaceable class="parameter">value</replaceable> | DEFAULT }
    SET <replaceable class="parameter">configuration_parameter</replaceable> FROM CURRENT
    RESET <replaceable class="parameter">configuration_parameter</replaceable>
    RESET ALL
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>ALTER FUNCTION</command>更改一个函数的定义。
  </para>

  <para>
   你必须拥有该函数以使用<command>ALTER FUNCTION</>。要更改一个函数
   的模式，你还必须具有新模式上的<literal>CREATE</>特权。要
   更改拥有者，你还必须是新拥有角色的一个直接或者间接成员，并且该角色必须
   具有在该函数的模式上的<literal>CREATE</literal>特权（这些限制强制修改拥有
   者不能做一些通过删除和重建该函数做不到的事情。不过，一个超级用户怎么都能
   更改任何函数的所有权）。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
      一个现有函数的名称（可以被模式限定）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argmode</replaceable></term>

    <listitem>
     <para>
      一个参数的模式：<literal>IN</>、<literal>OUT</>、
      <literal>INOUT</>或者<literal>VARIADIC</>。如果被忽略，默认为
      <literal>IN</>。注意<command>ALTER FUNCTION</command>
      并不真正关心<literal>OUT</>参数，因为在决定函数的身份时只需要输
      入参数。因此列出<literal>IN</>、<literal>INOUT</>以及
      <literal>VARIADIC</>参数即可。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argname</replaceable></term>

    <listitem>
     <para>
      一个参数的名称。注意<command>ALTER FUNCTION</command>
      并不真正参数名称，因为在确定函数的身份时只需要参数的数据类型即可。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argtype</replaceable></term>

    <listitem>
     <para>
      该函数的参数（如果有）的数据类型（可以被模式限定）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
     <para>
      该函数的新名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_owner</replaceable></term>
    <listitem>
     <para>
      该函数的新拥有者。注意如果该函数被标记为
      <literal>SECURITY DEFINER</literal>，它的后续执行将会使用新拥有者。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
     <para>
      该函数的新模式。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>CALLED ON NULL INPUT</literal></term>
     <term><literal>RETURNS NULL ON NULL INPUT</literal></term>
     <term><literal>STRICT</literal></term>

     <listitem>
      <para><literal>CALLED ON NULL INPUT</literal>将该函数改为在某些
      或者全部参数为空值时可以被调用。
      <literal>RETURNS NULL ON NULL INPUT</literal>或者
       <literal>STRICT</literal>将该函数改为只要任一参数为空值就不被调用而
       是自动假定一个空值结果。详见<xref linkend="sql-createfunction">。
      </para>
     </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>IMMUTABLE</literal></term>
     <term><literal>STABLE</literal></term>
     <term><literal>VOLATILE</literal></term>

     <listitem>
      <para>
       把该函数的稳定性更改为指定的设置。详见
       <xref linkend="sql-createfunction">。
      </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal><optional> EXTERNAL </optional> SECURITY INVOKER</literal></term>
    <term><literal><optional> EXTERNAL </optional> SECURITY DEFINER</literal></term>

    <listitem>
     <para>
      更改该函数是否为一个安全性定义者。关键词<literal>EXTERNAL</literal>
      是为了符合 SQL，它会被忽略。关于这项能力的详情请见
      <xref linkend="sql-createfunction">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>LEAKPROOF</literal></term>
    <listitem>
     <para>
      更改该函数是否被认为是防泄漏的。关于这项能力的详情请见
      <xref linkend="sql-createfunction">。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>COST</literal> <replaceable class="parameter">execution_cost</replaceable></term>

     <listitem>
      <para>
       更改该函数的估计执行代价。详见<xref linkend="sql-createfunction">。
      </para>
     </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>ROWS</literal> <replaceable class="parameter">result_rows</replaceable></term>

     <listitem>
      <para>
       更改一个集合返回函数的估计行数。详见
       <xref linkend="sql-createfunction">。
      </para>
     </listitem>
   </varlistentry>

     <varlistentry>
      <term><replaceable>configuration_parameter</replaceable></term>
      <term><replaceable>value</replaceable></term>
      <listitem>
       <para>
        当该函数被调用时，要对一个配置参数做出增加或者更改的赋值。如果
        <replaceable>value</replaceable>是<literal>DEFAULT</literal>
        或者使用等价的<literal>RESET</literal>，该函数本地的设置将会被
        移除，这样该函数会使用其环境中存在的值执行。使用<literal>RESET
        ALL</literal>可以清除所有函数本地的设置。
        <literal>SET FROM CURRENT</>把会话中该参数的当前值保存为进入
        该函数时要应用的值。
       </para>

       <para>
        有关允许的参数名称和值可详见<xref linkend="sql-set">以及
        <xref linkend="runtime-config">。
       </para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>

    <listitem>
     <para>
      为了符合 SQL 标准存在，被忽略。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   要把用于类型<type>integer</type>的函数<literal>sqrt</literal>
   重命名为<literal>square_root</literal>：
<programlisting>
ALTER FUNCTION sqrt(integer) RENAME TO square_root;
</programlisting>
  </para>

  <para>
   要把用于类型<type>integer</type>的函数<literal>sqrt</literal>
   的拥有者改为<literal>joe</literal>：
<programlisting>
ALTER FUNCTION sqrt(integer) OWNER TO joe;
</programlisting>
  </para>

  <para>
   要把用于类型<type>integer</type>的函数<literal>sqrt</literal>
   的模式改为<literal>maths</literal>：
<programlisting>
ALTER FUNCTION sqrt(integer) SET SCHEMA maths;
</programlisting>
  </para>

  <para>
   要调整一个函数的自动搜索路径：
<programlisting>
ALTER FUNCTION check_password(text) SET search_path = admin, pg_temp;
</programlisting>
  </para>

  <para>
   要禁止一个函数的<varname>search_path</>的自动设置：
<programlisting>
ALTER FUNCTION check_password(text) RESET search_path;
</programlisting>
   这个函数将用其调用者使用的搜索路径来执行。
  </para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   这个语句部分兼容 SQL 标准中的<command>ALTER
   FUNCTION</>语句。该标准允许修改一个函数的更多属性，但是不提供
   重命名一个函数、标记一个函数为安全性定义者、为一个函数附加配置参
   数值或者更改一个函数的拥有者、模式或者稳定性等功能。该标准还要求
   <literal>RESTRICT</>关键字，它在<productname>PostgreSQL</>
   中是可选的。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-dropfunction"></member>
  </simplelist>
 </refsect1>
</refentry>

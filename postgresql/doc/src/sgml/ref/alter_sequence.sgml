<!--
doc/src/sgml/ref/alter_sequence.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERSEQUENCE">
 <indexterm zone="sql-altersequence">
  <primary>ALTER SEQUENCE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER SEQUENCE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER SEQUENCE</refname>
  <refpurpose>
   更改一个序列发生器的定义
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> [ INCREMENT [ BY ] <replaceable class="parameter">increment</replaceable> ]
    [ MINVALUE <replaceable class="parameter">minvalue</replaceable> | NO MINVALUE ] [ MAXVALUE <replaceable class="parameter">maxvalue</replaceable> | NO MAXVALUE ]
    [ START [ WITH ] <replaceable class="parameter">start</replaceable> ]
    [ RESTART [ [ WITH ] <replaceable class="parameter">restart</replaceable> ] ]
    [ CACHE <replaceable class="parameter">cache</replaceable> ] [ [ NO ] CYCLE ]
    [ OWNED BY { <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable> | NONE } ]
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> OWNER TO <replaceable class="PARAMETER">new_owner</replaceable>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> RENAME TO <replaceable class="parameter">new_name</replaceable>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> SET SCHEMA <replaceable class="parameter">new_schema</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>ALTER SEQUENCE</command>更改一个现有序列发生器的参数。
   任何没有在<command>ALTER SEQUENCE</command>命令中明确设置的参数
   保持它们之前的设置。
  </para>

  <para>
   要使用<command>ALTER SEQUENCE</>，你必须拥有该序列。要更改一个序列
   的模式，你还必须拥有新模式上的<literal>CREATE</>特权。要更改拥有者，你还必须
   是新拥有角色的一个直接或者间接成员，并且该角色必须具有该域的模式上的
   <literal>CREATE</literal>特权（这些限制强制修改拥有者不能做一些通过删除和重
   建该序列做不到的事情。不过，一个超级用户怎么都能更改任何序列的所有权。）。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
        要修改的序列的名称（可以是模式限定的）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IF EXISTS</literal></term>
      <listitem>
       <para>
        在序列不存在时不要抛出一个错误。这种情况下会发出一个提示。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">increment</replaceable></term>
      <listitem>
       <para>
        子句<literal>INCREMENT BY <replaceable
        class="parameter">increment</replaceable></literal>是可选的。
        一个正值将产生一个上升序列，一个负值会产生一个下降序列。如果
        没有指定，旧的增量值将被保持。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">minvalue</replaceable></term>
      <term><literal>NO MINVALUE</literal></term>
      <listitem>
       <para>
        可选的子句<literal>MINVALUE <replaceable
        class="parameter">minvalue</replaceable></literal>决定一个序列
        能产生的最小值。如果指定了<literal>NO
        MINVALUE</literal>，上升序列和下降序列的默认值分别是 1 和
        -2<superscript>63</>-1。如果这些选项都没有被指定，将保持当前的
        最小值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">maxvalue</replaceable></term>
      <term><literal>NO MAXVALUE</literal></term>
      <listitem>
       <para>
        可选的子句<literal>MAXVALUE <replaceable
        class="parameter">maxvalue</replaceable></literal>决定一个序列
        能产生的最大值。如果指定了<literal>NO
        MAXVALUE</literal>，上升序列和下降序列的默认值分别是
         2<superscript>63</>-1 和 -1。如果这些选项都没有被指定，将保持当前的
        最大值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">start</replaceable></term>
      <listitem>
       <para>
        可选的子句<literal>START WITH <replaceable
        class="parameter">start</replaceable></literal>更改该序列被记录的开始值。
        这对于<emphasis>当前</>序列值没有影响，它会简单地设置
        未来<command>ALTER SEQUENCE RESTART</>命令将会使用的值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">restart</replaceable></term>
      <listitem>
       <para>
        可选的子句<literal>RESTART [ WITH <replaceable
        class="parameter">restart</replaceable> ]</literal>更改该序列的
        当前值。这等效于用<literal>is_called</literal> = <literal>false</>
        调用<function>setval</>函数：被指定的值将会被
        <emphasis>下一次</><function>nextval</>调用返回。写上没有
        <replaceable class="parameter">restart</>值的
        <literal>RESTART</>等效于提供被
        <command>CREATE SEQUENCE</>记录的或者上一次被
        <command>ALTER SEQUENCE START WITH</>设置的开始值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">cache</replaceable></term>
      <listitem>
       <para>
        子句<literal>CACHE <replaceable
        class="parameter">cache</replaceable></literal>使得序列数字被预先
        分配并且保存在内存中以便更快的访问。最小值是 1（每次只产生一个值，即
        无缓存）。如果没有指定，旧的缓冲值将被保持。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CYCLE</literal></term>
      <listitem>
       <para>
        可选的<literal>CYCLE</literal>关键词可以被用来允许该序列在达到
        <replaceable class="parameter">maxvalue</replaceable>（上升序列）或
        <replaceable class="parameter">minvalue</replaceable>（下降序列）时
        回卷。如果到达该限制，下一个被产生的数字将分别是
        <replaceable class="parameter">minvalue</replaceable>或者
        <replaceable class="parameter">maxvalue</replaceable>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NO CYCLE</literal></term>
      <listitem>
       <para>
        如果指定了可选的<literal>NO CYCLE</literal>关键词，任何在该
        序列到达其最大值后的<function>nextval</function>调用将会返回
        一个错误。如果既没有指定<literal>CYCLE</literal>也没有指定
        <literal>NO CYCLE</literal>，旧的循环行为将被保持。
       </para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>OWNED BY</literal> <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable></term>
    <term><literal>OWNED BY NONE</literal></term>
    <listitem>
     <para>
      <literal>OWNED BY</literal>选项导致该序列与一个特定的表列相关联，
      这样如果该列（或者整个表）被删除，该序列也会被自动删除。如果指定，
      这种关联会替代之前为该序列指定的任何关联。被指定的表必须具有相同的
      拥有者并且与该序列在同一个模式中。指定
      <literal>OWNED BY NONE</literal>可以移除任何现有的关联，让该序列
      <quote>自立</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">new_owner</replaceable></term>
    <listitem>
     <para>
      该序列的新拥有者的用户名。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
     <para>
      该序列的新名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
     <para>
      该序列的新模式。
     </para>
    </listitem>
   </varlistentry>

    </variablelist>
   </para>
  </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   为了避免从同一个序列获得数字的并发事务阻塞，
   <command>ALTER SEQUENCE</command>在该序列生成参数上的效果永远不会
   被回滚，那些更改立刻生效并且无法逆转。不过，<literal>OWNED BY</>、
   <literal>OWNER TO</>、<literal>RENAME TO</>和<literal>SET SCHEMA</>
   子句会导致普通目录被更新并且无法被回滚。
  </para>

  <para>
   <command>ALTER SEQUENCE</command>将不会立即影响除当前后端外
   其他后端中的<function>nextval</>结果，因为它们有预分配（缓存）的序列
   值。在注意到序列生成参数被更改之前它们将用尽所有缓存的值。当前后端将被
   立刻影响。
  </para>

  <para>
   <command>ALTER SEQUENCE</command>不会影响该序列的
   <function>currval</>状态（在
   <productname>PostgreSQL</productname> 8.3 之前有时会影响）。
  </para>

  <para>
   由于历史原因，<command>ALTER TABLE</command>也可以被用于序列，
   但是只有等效于上述形式的<command>ALTER TABLE</command>变体才被
   允许用于序列。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   在 105 重启一个被称为<literal>serial</literal>的序列：
<programlisting>
ALTER SEQUENCE serial RESTART WITH 105;
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>ALTER SEQUENCE</command>符合<acronym>SQL</acronym>
   标准，不过<literal>START WITH</>、
   <literal>OWNED BY</>、<literal>OWNER TO</>、<literal>RENAME TO</>
   以及<literal>SET SCHEMA</literal>子句是
   <productname>PostgreSQL</productname>扩展。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createsequence"></member>
   <member><xref linkend="sql-dropsequence"></member>
  </simplelist>
 </refsect1>

</refentry>

<!--
doc/src/sgml/ref/create_rule.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATERULE">
 <indexterm zone="sql-createrule">
  <primary>CREATE RULE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE RULE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE RULE</refname>
  <refpurpose>定义一条新的重写规则</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] RULE <replaceable class="parameter">name</replaceable> AS ON <replaceable class="parameter">event</replaceable>
    TO <replaceable class="parameter">table_name</replaceable> [ WHERE <replaceable class="parameter">condition</replaceable> ]
    DO [ ALSO | INSTEAD ] { NOTHING | <replaceable class="parameter">command</replaceable> | ( <replaceable class="parameter">command</replaceable> ; <replaceable class="parameter">command</replaceable> ... ) }

<phrase>其中 <replaceable class="parameter">event</replaceable> 可以是以下之一：</phrase>

    SELECT | INSERT | UPDATE | DELETE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>CREATE RULE</command>定义一条应用于指定表或视图的
   新规则。<command>CREATE OR REPLACE RULE</command>将创建一条
   新规则或者替换同一个表上具有同一名称的现有规则。
  </para>

  <para>
   <productname>PostgreSQL</productname>规则系统允许我们定义
   针对数据库表中插入、更新或者删除动作上的替代动作。大约来说，当在
   一个给定表上执行给定命令时，一条规则会导致执行额外的命令。或者，
   <literal>INSTEAD</literal>规则可以用另一个命令替换给定的命令，或
   者导致一个命令根本不被执行。规则也被用来实现 SQL 视图。规则实际上
   是一种命令转换机制或者命令宏。这种转换会在命令的执行开始之前进行。
   如果你实际上想要为每一个物理行独立地触发一个操作，你可能更需要一个
   触发器而不是规则。更多有关规则系统的信息请见<xref linkend="rules">。
  </para>

  <para>
   当前，<literal>ON SELECT</literal>规则必须是无条件
   <literal>INSTEAD</literal>规则并且其动作必须由一个单一
   <command>SELECT</command>命令构成。因此，一条
   <literal>ON SELECT</literal>规则实际上把表变成了一个视图，它的可见
   内容是由该规则的<command>SELECT</command>命令返回，而不是直
   接存在该表中的内容（如果有）。不过，使用
   <command>CREATE VIEW</command>命令还是要比创建一个真实表并且
   在其上定义一条<literal>ON SELECT</literal>规则更好。
  </para>

  <para>
   可以通过定义<literal>ON INSERT</literal>、<literal>ON UPDATE</literal>
   以及<literal>ON DELETE</literal>规则（或者这些规则的任意子集）来创建
   可更新的视图，这些规则可以把视图上的更新动作替换为其他表上适当的更新
   动作。如果想要支持<command>INSERT RETURNING</>等等，那么一定要
   在每一个这类规则中放上一个合适的<literal>RETURNING</>子句。
  </para>

  <para>
   如果你尝试为复杂视图更新使用有条件的规则，有一点是很重要的：对于
   你希望在该视图上允许的每一个动作，<emphasis>必须</>有一条
   <literal>INSTEAD</literal>规则。如果该规则是有条件的，或者不是
   <literal>INSTEAD</literal>，那么系统仍将拒绝尝试执行该更新动作，
   因为它会认为在某些情况下它应该停止尝试在该视图的傀儡表上执行动作。
   如果你想处理有条件规则中的所有有用的情况，可以增加一条无条件的
   <literal>DO INSTEAD NOTHING</literal>规则来确保系统理解它将
   永远不会被调用来更新傀儡表。然后让有条件规则变成
   非-<literal>INSTEAD</literal>。在它们适用的情况下，它们会加到
   默认的<literal>INSTEAD NOTHING</literal>动作（不过，当前这种方法不
   支持<literal>RETURNING</>查询）。
  </para>

  <note>
   <para>
    足够简单的视图自动就是可更新的（见<xref
    linkend="sql-createview">），它们不需要依靠用户创建的规则来变成可
    更新的。不过还是可以创建一条显式规则，自动更新转换通常比显式规则效
    率高。
   </para>

   <para>
    另一种值得考虑的办法是使用<literal>INSTEAD OF</>触发器（见
    <xref linkend="sql-createtrigger">）代替规则。
   </para>
  </note>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
      要创建的规则的名称。它必须与同一个表上任何其他规则的名称相区分。
      同一个表上同一种事件类型的多条规则会按照其名称的字符顺序被应用。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">event</replaceable></term>
    <listitem>
     <para>
      时间是<literal>SELECT</literal>、
      <literal>INSERT</literal>、<literal>UPDATE</literal>或者
      <literal>DELETE</literal>之一。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <para>
      规则适用的表或者视图的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <para>
      任意的<acronym>SQL</acronym>条件表达式（返回
      <type>boolean</type>）。该条件表达式不能引用除<literal>NEW</>以及
      <literal>OLD</>之外的任何表，并且不能包含聚集函数。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>INSTEAD</option></term>
    <listitem>
     <para><literal>INSTEAD</literal>指示该命令应该<emphasis>取代</>
     原始命令被执行。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>ALSO</option></term>
    <listitem>
     <para><literal>ALSO</literal>指示应该在原始命令
     <emphasis>之外</emphasis>执行这些命令。
     </para>

     <para>
      如果<literal>ALSO</literal>和<literal>INSTEAD</literal>都没有被指定，
      默认是<literal>ALSO</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">command</replaceable></term>
    <listitem>
     <para>
      组成规则动作的命令。可用的命令有<command>SELECT</command>、
      <command>INSERT</command>、<command>UPDATE</command>、
      <command>DELETE</command>或者<command>NOTIFY</command>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   在<replaceable class="parameter">condition</replaceable>和
   <replaceable class="parameter">command</replaceable>中，名为
   <literal>NEW</literal>和<literal>OLD</literal>的表可以被用来引用被
   引用表中的值。在<literal>ON INSERT</literal>和
   <literal>ON UPDATE</literal>规则中，<literal>NEW</literal>被用来
   引用被插入或者更新的新行。在<literal>ON UPDATE</literal>和
   <literal>ON DELETE</literal>规则中，<literal>OLD</literal>被用来引
   用被更新或者删除的现有行。
  </para>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   要在表上创建或者修改规则，必须是表的拥有者。
  </para>

  <para>
   在一条用于视图上<literal>INSERT</literal>、<literal>UPDATE</literal>
   或者<literal>DELETE</literal>的规则中， 可以增加一个<literal>RETURNING</>
   子句来发出视图的列。如果该规则被一个<command>INSERT RETURNING</>、
   <command>UPDATE RETURNING</>或者
   <command>DELETE RETURNING</>命令触发，这个子句将被用来计算输出。
   当规则被一个没有<literal>RETURNING</>的命令触发时，该规则的
   <literal>RETURNING</>子句将被忽略。当前的实现只允许无条件
   <literal>INSTEAD</>规则包含<literal>RETURNING</>。此外，用于同一事件
   的所有规则中至多只能有一个<literal>RETURNING</>子句（这确保了只有一个
   候选<literal>RETURNING</>子句被用来计算结果）。如果在任何可用规则中都
   没有<literal>RETURNING</>子句，视图上的<literal>RETURNING</>查询将
   被拒绝。
  </para>

  <para>
   避免循环规则非常重要。例如，尽管下面的两条规则定义都被
   <productname>PostgreSQL</productname>所接受，
   <command>SELECT</command>命令将导致
   <productname>PostgreSQL</productname>报告一个错误，因为会产生一条
   规则的递归扩展：

<programlisting>
CREATE RULE "_RETURN" AS
    ON SELECT TO t1
    DO INSTEAD
        SELECT * FROM t2;

CREATE RULE "_RETURN" AS
    ON SELECT TO t2
    DO INSTEAD
        SELECT * FROM t1;

SELECT * FROM t1;
</programlisting>
  </para>

  <para>
   当前，如果一个规则动作包含一个<command>NOTIFY</command>命令，
   该<command>NOTIFY</command>命令将被无条件执行，也就是说，即使
   该规则不被应用到任何行上，也会发出<command>NOTIFY</command>。
   例如，在
<programlisting>
CREATE RULE notify_me AS ON UPDATE TO mytable DO ALSO NOTIFY mytable;

UPDATE mytable SET name = 'foo' WHERE id = 42;
</programlisting>
   中，<command>UPDATE</command>期间将发出一个
   <command>NOTIFY</command>事件，不管是否有行匹配条件
   <literal>id = 42</literal>。这是一种实现限制，它可能会在未来的发行中被修复。
  </para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>CREATE RULE</command>是一种
   <productname>PostgreSQL</productname>语言扩展，
   整个查询重写系统也是这样。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterrule"></member>
   <member><xref linkend="sql-droprule"></member>
  </simplelist>
 </refsect1>

</refentry>

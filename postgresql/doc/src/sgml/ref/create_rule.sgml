<!--
doc/src/sgml/ref/create_rule.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATERULE">
 <indexterm zone="sql-createrule">
  <primary>CREATE RULE</primary>
 </indexterm>
 <refmeta>
  <refentrytitle>CREATE RULE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE RULE</refname>
  <!--
  <refpurpose>define a new rewrite rule</refpurpose>
  -->
  <refpurpose>定义一个新重写规则</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] RULE <replaceable class="parameter">name</replaceable> AS ON <replaceable class="parameter">event</replaceable>
    TO <replaceable class="parameter">table_name</replaceable> [ WHERE <replaceable class="parameter">condition</replaceable> ]
    DO [ ALSO | INSTEAD ] { NOTHING | <replaceable class="parameter">command</replaceable> | ( <replaceable class="parameter">command</replaceable> ; <replaceable class="parameter">command</replaceable> ... ) }

<!--
<phrase>where <replaceable class="parameter">event</replaceable> can be one of:</phrase>
-->
<phrase>这里的<replaceable class="parameter">event</replaceable>可以是下列之一：</phrase>

    SELECT | INSERT | UPDATE | DELETE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE RULE</command> defines a new rule applying to a specified
   table or view.
   <command>CREATE OR REPLACE RULE</command> will either create a
   new rule, or replace an existing rule of the same name for the same
   table.
  </para>
-->
<para>
<command>CREATE RULE</command>定义一个适用于特定表或者视图的新规则。
<command>CREATE OR REPLACE RULE</command>要么是创建一个新规则，
要么是替换一个表上的同名规则。
</para>

  <!--
<para>
   The <productname>PostgreSQL</productname> rule system allows one to
   define an alternative action to be performed on insertions, updates,
   or deletions in database tables.  Roughly speaking, a rule causes
   additional commands to be executed when a given command on a given
   table is executed.  Alternatively, an <literal>INSTEAD</literal>
   rule can replace a given command by another, or cause a command
   not to be executed at all.  Rules are used to implement SQL
   views as well.  It is important to realize that a rule is really
   a command transformation mechanism, or command macro.  The
   transformation happens before the execution of the command starts.
   If you actually want an operation that fires independently for each
   physical row, you probably want to use a trigger, not a rule.
   More information about the rules system is in <xref linkend="rules">.
  </para>
-->
<para>
<productname>PostgreSQL</productname>规则系统允许在更新、插入、
删除时执行一个其它的预定义动作。简单的说，
规则就是在指定表上执行指定动作的时候，将导致一些额外的动作被执行。
另外，一个<literal>INSTEAD</literal>规则可以用另外一个命令取代特定的命令，
或者令完全不执行该命令。规则还可以用于实现SQL视图。
规则实际上只是一个命令转换机制，或者说命令宏。
这种转换发生在命令开始执行之前。如果你想要针对每个物理行独立发生的操作，
那么可能应该使用触发器而不是规则。有关规则系统的更多信息可以在
<xref linkend="rules">找到。
</para>

  <!--
<para>
   Presently, <literal>ON SELECT</literal> rules must be unconditional
   <literal>INSTEAD</literal> rules and must have actions that consist
   of a single <command>SELECT</command> command.  Thus, an
   <literal>ON SELECT</literal> rule effectively turns the table into
   a view, whose visible contents are the rows returned by the rule's
   <command>SELECT</command> command rather than whatever had been
   stored in the table (if anything).  It is considered better style
   to write a <command>CREATE VIEW</command> command than to create a
   real table and define an <literal>ON SELECT</literal> rule for it.
  </para>
-->
<para>
目前，<literal>ON SELECT</literal>规则必须是无条件的<literal>INSTEAD</literal>
规则并且必须有一个由单独一条<command>SELECT</command>查询组成的动作。
因此，一条<literal>ON SELECT</literal>规则有效地把表转成视图，
它的可见内容是规则的<command>SELECT</command>
查询返回的记录而不是存储在表（如果有）中的内容。写一条
<command>CREATE VIEW</command>命令比创建一个表然后在上面定义一条
<literal>ON SELECT</literal>规则的风格要好。
</para>

  <!--
<para>
   You can create the illusion of an updatable view by defining
   <literal>ON INSERT</literal>, <literal>ON UPDATE</literal>, and
   <literal>ON DELETE</literal> rules (or any subset of those that's
   sufficient for your purposes) to replace update actions on the view
   with appropriate updates on other tables.  If you want to support
   <command>INSERT RETURNING</> and so on, then be sure to put a suitable
   <literal>RETURNING</> clause into each of these rules.
  </para>
-->
<para>
你可以创建一个允许更新的视图的幻觉，方法是在视图上定义<literal>ON INSERT</literal>、
<literal>ON UPDATE</literal>、<literal>ON DELETE</literal>规则
(或者满足你需要的任何上述规则的子集)，用合适的对其它表的更新替换在视图上更新的动作。
如果打算支持<command>INSERT RETURNING</>之类，
就必须确保在规则的结尾放置恰当的<literal>RETURNING</>子句。
</para>

  <!--
<para>
   There is a catch if you try to use conditional rules for complex view
   updates: there <emphasis>must</> be an unconditional
   <literal>INSTEAD</literal> rule for each action you wish to allow
   on the view.  If the rule is conditional, or is not
   <literal>INSTEAD</literal>, then the system will still reject
   attempts to perform the update action, because it thinks it might
   end up trying to perform the action on the dummy table of the view
   in some cases.  If you want to handle all the useful cases in
   conditional rules, add an unconditional <literal>DO
   INSTEAD NOTHING</literal> rule to ensure that the system
   understands it will never be called on to update the dummy table.
   Then make the conditional rules non-<literal>INSTEAD</literal>; in
   the cases where they are applied, they add to the default
   <literal>INSTEAD NOTHING</literal> action.  (This method does not
   currently work to support <literal>RETURNING</> queries, however.)
  </para>
-->
<para>
如果你想在复杂的视图更新上使用条件规则，那么这里就有一个补充：
对你希望在视图上允许的每个动作，你都<emphasis>必须</>
有一个无条件的<literal>INSTEAD</literal>规则。如果规则是有条件的或者它不是
<literal>INSTEAD</literal>，那么系统仍将拒绝执行更新动作，
因为它认为最终会在视图的虚拟表上执行这个动作。
如果你想处理条件规则上的所有有用的情况，那只需要增加一个无条件的
<literal>DO INSTEAD NOTHING</literal>
规则确保系统明白它决不会被调用来更新虚拟表就可以了。
然后把条件规则做成非<literal>INSTEAD</literal>；在这种情况下，
如果它们被触发，那么它们就增加到缺省的<literal>INSTEAD NOTHING</literal>
动作中。（不过这种方法目前不支持<literal>RETURNING</>查询。）
</para>

  <note>
   <!--
<para>
    A view that is simple enough to be automatically updatable (see <xref
    linkend="sql-createview">) does not require a user-created rule in
    order to be updatable.  While you can create an explicit rule anyway,
    the automatic update transformation will generally outperform an
    explicit rule.
   </para>
-->
<para>
一个足够简单可以自动更新的视图（参阅<xref linkend="sql-createview">）
不需要用户创建的使其可更新的规则。不过，你可以创建一个明确的规则，
自动更新转换通常比明确的规则执行的更好。
</para>

   <!--
<para>
    Another alternative worth considering is to use <literal>INSTEAD OF</>
    triggers (see <xref linkend="sql-createtrigger">) in place of rules.
   </para>
-->
<para>
另一个可替换的价值考虑是使用<literal>INSTEAD OF</>触发器
（参阅<xref linkend="sql-createtrigger">）替代规则。
</para>
  </note>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of a rule to create.  This must be distinct from the
      name of any other rule for the same table.  Multiple rules on
      the same table and same event type are applied in alphabetical
      name order.
     </para>
-->
<para>
创建的规则名。它必须在同一个表上的所有规则名字中唯一。
同一个表上的同一个事件类型的规则是按照字母顺序运行的。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">event</replaceable></term>
    <listitem>
     <!--
<para>
      The event is one of <literal>SELECT</literal>,
      <literal>INSERT</literal>, <literal>UPDATE</literal>, or
      <literal>DELETE</literal>.
     </para>
-->
<para>
<literal>SELECT</literal>、<literal>INSERT</literal>、
<literal>UPDATE</literal>、<literal>DELETE</literal>事件之一。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of the table or view the
      rule applies to.
     </para>
-->
<para>
规则作用的表或者视图的名字(可以有模式修饰)。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <!--
<para>
      Any <acronym>SQL</acronym> conditional expression (returning
      <type>boolean</type>).  The condition expression cannot refer
      to any tables except <literal>NEW</> and <literal>OLD</>, and
      cannot contain aggregate functions.
     </para>
-->
<para>
任意返回<type>boolean</type>的<acronym>SQL</acronym>条件表达式。
条件表达式除了引用<literal>NEW</>和<literal>OLD</>之外不能引用任何表，
并且不能有聚合函数。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>INSTEAD</option></term>
    <listitem>
     <!--
<para><literal>INSTEAD</literal> indicates that the commands should be
      executed <emphasis>instead of</> the original command.
     </para>
-->
<para>
<literal>INSTEAD</literal>指示使用该命令<emphasis>代替</>最初的命令。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>ALSO</option></term>
    <listitem>
     <!--
<para><literal>ALSO</literal> indicates that the commands should be
      executed <emphasis>in addition to</emphasis> the original
      command.
     </para>
-->
<para>
<literal>ALSO</literal>指示该命令应该在最初的命令执行之后
<emphasis>一起</emphasis>执行。
</para>

     <!--
<para>
      If neither <literal>ALSO</literal> nor
      <literal>INSTEAD</literal> is specified, <literal>ALSO</literal>
      is the default.
     </para>
-->
<para>
如果既没有声明<literal>ALSO</literal>也没有声明<literal>INSTEAD</literal>，
那么<literal>ALSO</literal>是缺省。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">command</replaceable></term>
    <listitem>
     <!--
<para>
      The command or commands that make up the rule action.  Valid
      commands are <command>SELECT</command>,
      <command>INSERT</command>, <command>UPDATE</command>,
      <command>DELETE</command>, or <command>NOTIFY</command>.
     </para>
-->
<para>
组成规则动作的命令。有效的命令是<command>SELECT</command>、
<command>INSERT</command>、<command>UPDATE</command>、
<command>DELETE</command>、<command>NOTIFY</command>语句之一。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <!--
<para>
   Within <replaceable class="parameter">condition</replaceable> and
   <replaceable class="parameter">command</replaceable>, the special
   table names <literal>NEW</literal> and <literal>OLD</literal> can
   be used to refer to values in the referenced table.
   <literal>NEW</literal> is valid in <literal>ON INSERT</literal> and
   <literal>ON UPDATE</literal> rules to refer to the new row being
   inserted or updated.  <literal>OLD</literal> is valid in
   <literal>ON UPDATE</literal> and <literal>ON DELETE</literal> rules
   to refer to the existing row being updated or deleted.
  </para>
-->
<para>
在<replaceable class="parameter">condition</replaceable>和
<replaceable class="parameter">command</replaceable>里，
特殊的表名字<literal>NEW</literal>和<literal>OLD</literal>
可以用于指向被引用表里的数值。<literal>NEW</literal>在
<literal>ON INSERT</literal>和<literal>ON UPDATE</literal>
规则里可以指向被插入或更新的新行。<literal>OLD</literal>
在<literal>ON UPDATE</literal>和<literal>ON DELETE</literal>
规则里可以指向现存的被更新或删除的行。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   You must be the owner of a table to create or change rules for it.
  </para>
-->
<para>
为了在表上定义或修改规则，你必须是该表的拥有者。
</para>

  <!--
<para>
   In a rule for <literal>INSERT</literal>, <literal>UPDATE</literal>, or
   <literal>DELETE</literal> on a view, you can add a <literal>RETURNING</>
   clause that emits the view's columns.  This clause will be used to compute
   the outputs if the rule is triggered by an <command>INSERT RETURNING</>,
   <command>UPDATE RETURNING</>, or <command>DELETE RETURNING</> command
   respectively.  When the rule is triggered by a command without
   <literal>RETURNING</>, the rule's <literal>RETURNING</> clause will be
   ignored.  The current implementation allows only unconditional
   <literal>INSTEAD</> rules to contain <literal>RETURNING</>; furthermore
   there can be at most one <literal>RETURNING</> clause among all the rules
   for the same event.  (This ensures that there is only one candidate
   <literal>RETURNING</> clause to be used to compute the results.)
   <literal>RETURNING</> queries on the view will be rejected if
   there is no <literal>RETURNING</> clause in any available rule.
  </para>
-->
<para>
在视图上用于<literal>INSERT</literal>、<literal>UPDATE</literal>、
<literal>DELETE</literal>的规则中可以添加<literal>RETURNING</>
子句基于视图的字段返回。如果规则被<command>INSERT RETURNING</>、
<command>UPDATE RETURNING</>、<command>DELETE RETURNING</>命令触发，
这些子句将用来计算输出结果。如果规则被不带<literal>RETURNING</>
的命令触发，那么规则的<literal>RETURNING</>子句将被忽略。
目前仅允许无条件的<literal>INSTEAD</>规则包含<literal>RETURNING</>子句，
而且在同一个事件内的所有规则中最多只能有一个<literal>RETURNING</>子句。
这样就确保只有一个<literal>RETURNING</>子句可以用于计算结果。
如果在任何有效规则中都不存在<literal>RETURNING</>子句，
该视图上的<literal>RETURNING</>查询将被拒绝。
</para>

  
<para>
<!--
   It is very important to take care to avoid circular rules.  For
   example, though each of the following two rule definitions are
   accepted by <productname>PostgreSQL</productname>, the
   <command>SELECT</command> command would cause
   <productname>PostgreSQL</productname> to report an error because
   of recursive expansion of a rule:
-->
有一件很重要的事情是要避免循环规则。比如，尽管下面两条规则定义都是
<productname>PostgreSQL</productname>可以接受的，但其中一条的
<command>SELECT</command>命令会导致<productname>PostgreSQL</productname>
报告一条错误消息，因为该查询循环了太多次：
<programlisting>
CREATE RULE "_RETURN" AS
    ON SELECT TO t1
    DO INSTEAD
        SELECT * FROM t2;

CREATE RULE "_RETURN" AS
    ON SELECT TO t2
    DO INSTEAD
        SELECT * FROM t1;

SELECT * FROM t1;
</programlisting>
  </para>
  
<para>
<!--
   Presently, if a rule action contains a <command>NOTIFY</command>
   command, the <command>NOTIFY</command> command will be executed
   unconditionally, that is, the <command>NOTIFY</command> will be
   issued even if there are not any rows that the rule should apply
   to.  For example, in:
-->
目前，如果一个规则包含一个<command>NOTIFY</command>命令，
那么该<command>NOTIFY</command>命令将被无条件执行，也就是说，
即使规则不施加到任何行上面，该<command>NOTIFY</command>也会被执行。
比如，在
<programlisting>
CREATE RULE notify_me AS ON UPDATE TO mytable DO ALSO NOTIFY mytable;

UPDATE mytable SET name = 'foo' WHERE id = 42;
</programlisting>
<!-- 
   one <command>NOTIFY</command> event will be sent during the
   <command>UPDATE</command>, whether or not there are any rows that
   match the condition <literal>id = 42</literal>.  This is an
   implementation restriction that might be fixed in future releases. 
-->
里，一个<command>NOTIFY</command>事件将在<command>UPDATE</command>
的时候发出，不管是否有满足<literal>id = 42</literal>条件的行。
这是一个实现的限制，将来的版本应该修补这个毛病。
  </para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   <command>CREATE RULE</command> is a
   <productname>PostgreSQL</productname> language extension, as is the
   entire query rewrite system.
  </para>
-->
<para>
<command>CREATE RULE</command>是<productname>PostgreSQL</productname>
语言的扩展，整个规则重写系统都是如此。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterrule"></member>
   <member><xref linkend="sql-droprule"></member>
  </simplelist>
 </refsect1>

</refentry>

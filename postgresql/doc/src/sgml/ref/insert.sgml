<!--
doc/src/sgml/ref/insert.sgml
PostgreSQL documentation
-->

<refentry id="SQL-INSERT">
 <indexterm zone="sql-insert">
  <primary>INSERT</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>INSERT</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>INSERT</refname>
  <refpurpose>在一个表中创建新行</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
INSERT INTO <replaceable class="PARAMETER">table_name</replaceable> [ ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) ]
    { DEFAULT VALUES | VALUES ( { <replaceable class="PARAMETER">expression</replaceable> | DEFAULT } [, ...] ) [, ...] | <replaceable class="PARAMETER">query</replaceable> }
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>INSERT</command>将新行插入到一个表中。我们可以
   插入一个或者更多由值表达式指定的行，或者插入来自一个查询的零行
   或者更多行。
  </para>

  <para>
   目标列的名称可以以任意顺序列出。如果没有给出列名列表，则有两种确定
   目标列的可能性。第一种是以被声明的顺序列出该表的所有列。另一种可能
   性是，如果<literal>VALUES</> 子句或者<replaceable>query</>只提
   供<replaceable>N</>个列，则以被声明的顺序列出该表的前
   <replaceable>N</>列。<literal>VALUES</> 子句或者
   <replaceable>query</>提供的值会被从左至右关联到这些显式或者隐式
   给出的目标列。
  </para>

  <para>
   每一个没有出现在显式或者隐式列列表中的列都将被默认填充，如果为该列
   声明过默认值则用默认值填充，否则用空值填充。
  </para>

  <para>
   如果任意列的表达式不是正确的数据类型，将会尝试自动类型转换。
  </para>

  <para>
   可选的<literal>RETURNING</>子句会让<command>INSERT</>根据
   实际被插入的每一行计算并且返回值。这主要用于获得默认提供的值，例如
   序列号。不过，允许在其中有使用该表列的任何表达式。
   <literal>RETURNING</>列表的语法和<command>SELECT</>的输出
   列表相同。
  </para>

  <para>
   为了向表中插入，必须拥有其上的<literal>INSERT</literal>特权。如果
   指定了列列表，只需要列出的列上的<literal>INSERT</literal>特权。使用
   <literal>RETURNING</>子句要求<literal>RETURNING</>中提到的所
   有列上的<literal>SELECT</>特权。如果使用<replaceable
   class="PARAMETER">query</replaceable>子句插入来自于一个查询的行，
   当然需要具有该查询中用到的任何表或者列上的<literal>SELECT</literal>特权。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
     <para>
      <literal>WITH</literal>子句允许指定一个或者更多子查询，在
      <command>INSERT</>查询中可以用名称引用这些子查询。详见
      <xref linkend="queries-with">以及<xref linkend="sql-select">。
     </para>
     <para>
      <replaceable class="parameter">query</replaceable>
      （<command>SELECT</command>语句）也可以包含一个
      <literal>WITH</literal>子句。在这种情况下
      <replaceable class="parameter">query</replaceable>中可以引用
      两组<replaceable>with_query</replaceable>，但是第二个优先级更
      高（因为它被嵌套更近）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
     <para>
      一个已有表的名称（可以被模式限定）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
     <para>
      <replaceable class="PARAMETER">table_name</replaceable>中
      表的一个列的名称。如果需要，可以在列名后加上一个子域名或者数组
      下标进行限定（只向一个组合列的某些域插入会让其他域变成空值）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT VALUES</literal></term>
    <listitem>
     <para>
      所有列都将被其默认值填充。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">expression</replaceable></term>
    <listitem>
     <para>
      要赋予给相应列的表达式或者值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT</literal></term>
    <listitem>
     <para>
      相应的列将被其默认值填充。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">query</replaceable></term>
    <listitem>
     <para>
      提供要被插入行的查询（<command>SELECT</command>语句）。
      其语法描述请参考<xref linkend="sql-select">语句。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_expression</replaceable></term>
    <listitem>
     <para>
      在每一行被插入后由<command>INSERT</>命令计算并且返回的
      表达式。该表达式可以使用<replaceable class="PARAMETER">table_name</replaceable>
      指定的表中的任何列。写成<literal>*</>可返回被插入行的所有列。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_name</replaceable></term>
    <listitem>
     <para>
      要用于被返回列的名称。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>输出</title>

  <para>
   成功完成时，<command>INSERT</>命令会返回以下形式的命令标签：
<screen>
INSERT <replaceable>oid</replaceable> <replaceable class="parameter">count</replaceable>
</screen>
   <replaceable class="parameter">count</replaceable>是被插入的行数。
   如果<replaceable class="parameter">count</replaceable>正好为 1 并且
   目标表具有 OID，那么
   <replaceable class="parameter">oid</replaceable>就是分配给被插入行的
   <acronym>OID</acronym>。否则
   <replaceable class="parameter">oid</replaceable>为零。
  </para>

  <para>
   如果<command>INSERT</>命令包含<literal>RETURNING</>子句，
   其结果会类似于包含<literal>RETURNING</>列表中定义的列和值的
   <command>SELECT</>语句，这些结果是由该命令在被插入行上计算
   得到。
  </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   向<literal>films</literal>中插入一行：

<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, '1971-07-13', 'Comedy', '82 minutes');
</programlisting>
  </para>

  <para>
   在这个例子中，<literal>len</literal>列被省略并且因此会具有默认值：

<programlisting>
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
</programlisting>
  </para>

  <para>
   这个例子为日期列使用<literal>DEFAULT</literal>子句而不是指定一个值：

<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes');
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama');
</programlisting>
  </para>

  <para>
   插入一个完全由默认值构成的行：

<programlisting>
INSERT INTO films DEFAULT VALUES;
</programlisting>
  </para>

  <para>
   用多行<command>VALUES</>语法插入多个行：

<programlisting>
INSERT INTO films (code, title, did, date_prod, kind) VALUES
    ('B6717', 'Tampopo', 110, '1985-02-10', 'Comedy'),
    ('HG120', 'The Dinner Game', 140, DEFAULT, 'Comedy');
</programlisting>
  </para>

  <para>
   这个例子从表<literal>tmp_films</literal>中获得一些行插入到表
   <literal>films</literal>中，两个表具有相同的列布局：

<programlisting>
INSERT INTO films SELECT * FROM tmp_films WHERE date_prod &lt; '2004-05-07';
</programlisting>
  </para>

  <para>
   这个例子插入数组列：

<programlisting>
-- 为 noughts-and-crosses 游戏创建一个空的 3x3 棋盘
INSERT INTO tictactoe (game, board[1:3][1:3])
    VALUES (1, '{{" "," "," "},{" "," "," "},{" "," "," "}}');
-- 实际上可以不用上面例子中的下标
INSERT INTO tictactoe (game, board)
    VALUES (2, '{{X," "," "},{" ",O," "},{" ",X," "}}');
</programlisting>
  </para>

  <para>
   向表<literal>distributors</literal>中插入一行，返回由
   <literal>DEFAULT</literal>子句生成的序号：

<programlisting>
INSERT INTO distributors (did, dname) VALUES (DEFAULT, 'XYZ Widgets')
   RETURNING did;
</programlisting>
  </para>

  <para>
   增加为 Acme Corporation 管理账户的销售人员的销量，并且把整个被
   更新的行以及当前时间记录到一个日志表中：
<programlisting>
WITH upd AS (
  UPDATE employees SET sales_count = sales_count + 1 WHERE id =
    (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation')
    RETURNING *
)
INSERT INTO employees_log SELECT *, current_timestamp FROM upd;
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   <command>INSERT</command>符合 SQL 标准，不过
   <literal>RETURNING</>子句是一种
   <productname>PostgreSQL</productname>扩展， 在
   <command>INSERT</>中使用<literal>WITH</>也是。
   还有，标准不允许省略列名列表但不通过
   <literal>VALUES</>子句或者<replaceable>query</>填充
   所有列的情况。
  </para>

  <para>
   <replaceable
   class="PARAMETER">query</replaceable>子句可能的限制在
   <xref linkend="sql-select">有介绍。
  </para>
 </refsect1>
</refentry>

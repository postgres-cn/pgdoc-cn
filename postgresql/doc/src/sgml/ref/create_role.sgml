<!--
doc/src/sgml/ref/create_role.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEROLE">
 <indexterm zone="sql-createrole">
  <primary>CREATE ROLE</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle>CREATE ROLE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - 语言语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE ROLE</refname>
  <refpurpose>定义一个新的数据库角色</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE ROLE <replaceable class="PARAMETER">name</replaceable> [ [ WITH ] <replaceable class="PARAMETER">option</replaceable> [ ... ] ]

<phrase>where <replaceable class="PARAMETER">option</replaceable>可以是：</phrase>

      SUPERUSER | NOSUPERUSER
    | CREATEDB | NOCREATEDB
    | CREATEROLE | NOCREATEROLE
    | CREATEUSER | NOCREATEUSER
    | INHERIT | NOINHERIT
    | LOGIN | NOLOGIN
    | REPLICATION | NOREPLICATION
    | CONNECTION LIMIT <replaceable class="PARAMETER">connlimit</replaceable>
    | [ ENCRYPTED | UNENCRYPTED ] PASSWORD '<replaceable class="PARAMETER">password</replaceable>'
    | VALID UNTIL '<replaceable class="PARAMETER">timestamp</replaceable>'
    | IN ROLE <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | IN GROUP <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | ROLE <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | ADMIN <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | USER <replaceable class="PARAMETER">role_name</replaceable> [, ...]
    | SYSID <replaceable class="PARAMETER">uid</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>CREATE ROLE</command>向<productname>PostgreSQL</productname>数据库集簇增加一个新的角色。一个角色是一个实体，它可以拥有数据库对象并且拥有数据库特权。根据一个角色如何被使用，它可以被考虑成一个<quote>用户</>、一个<quote>组</>或者两者。有关管理用户和认证的信息可以参考<xref linkend="user-manag">和<xref linkend="client-authentication">。要使用这个命令，你必须具有<literal>CREATEROLE</>特权或者成为一个数据库超级用户。
  </para>

  <para>
   注意角色是定义在数据库集簇层面上的，并且因此在集簇中的所有数据库中都可用。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
        新角色的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>SUPERUSER</literal></term>
      <term><literal>NOSUPERUSER</literal></term>
      <listitem>
       <para>
        这些子句决定新角色是否是一个<quote>超级用户</>，它可以越过数据库内的所有访问限制。超级用户状态很危险并且只应该在确实需要时才用。要创建一个新超级用户，你必须自己是一个超级用户。如果没有指定，默认值是<literal>NOSUPERUSER</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CREATEDB</></term>
      <term><literal>NOCREATEDB</></term>
      <listitem>
       <para>
        这些子句定义一个角色创建数据库的能力。如果指定了<literal>CREATEDB</literal>，被定义的角色将被允许创建新的数据库。指定<literal>NOCREATEDB</literal>将否定一个角色创建数据库的能力。如果没有指定，默认值是<literal>NOCREATEDB</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CREATEROLE</literal></term>
      <term><literal>NOCREATEROLE</literal></term>
      <listitem>
       <para>
        这些子句决定一个角色是否被允许创建新的角色（也就是执行<command>CREATE ROLE</command>）。一个带有<literal>CREATEROLE</literal>特权的角色也能修改和删除其他角色。如果没有指定，默认值是<literal>NOCREATEROLE</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CREATEUSER</literal></term>
      <term><literal>NOCREATEUSER</literal></term>
      <listitem>
       <para>
        这些子句是<literal>SUPERUSER</literal>和<literal>NOSUPERUSER</literal>的废弃拼写，但是仍然被接受。注意它们并<emphasis>不</>像人们天真地预期的那样等效于<literal>CREATEROLE</literal>！
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>INHERIT</literal></term>
      <term><literal>NOINHERIT</literal></term>
      <listitem>
       <para>
        如果新的角色是其他角色的成员，这些子句决定新角色是否从那些角色中<quote>继承</>特权，把新角色作为成员的角色称为新角色的父角色。一个带有<literal>INHERIT</literal>属性的角色能够自动使用已经被授予给其直接或间接父角色的任何数据库特权。如果没有<literal>INHERIT</literal>，在另一个角色中的成员关系只会把<command>SET ROLE</>的能力授予给那个其他角色，只有在这样做后那个其他角色的特权才可用。如果没有指定，默认值是<literal>INHERIT</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>LOGIN</literal></term>
      <term><literal>NOLOGIN</literal></term>
      <listitem>
       <para>
        这些子句决定一个角色是否被允许登录，也就是在客户端连接期间该角色是否能被给定为初始会话认证名称。一个具有<literal>LOGIN</literal>属性的角色可以被考虑为一个用户。没有这个属性的角色对于管理数据库特权很有用，但是却不是用户这个词的通常意义。如果没有指定，默认值是<literal>NOLOGIN</literal>，不过当<command>CREATE ROLE</>被通过<xref linkend="sql-createuser">调用时默认值会是<literal>LOGIN</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>REPLICATION</literal></term>
      <term><literal>NOREPLICATION</literal></term>
      <listitem>
       <para>
        这些子句决定一个角色是否被允许发起流复制或者把系统放入或者退出备份模式。一个具有<literal>REPLICATION</>属性的角色是一个具有非常高特权的角色，并且只应被用于确实需要复制的角色上。如果没有指定，默认值是<literal>NOREPLICATION</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONNECTION LIMIT</literal> <replaceable class="parameter">connlimit</replaceable></term>
      <listitem>
       <para>
        如果角色能登录，这指定该角色能建立多少并发连接。-1（默认值）表示无限制。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>PASSWORD</> <replaceable class="parameter">password</replaceable></term>
      <listitem>
       <para>
        设置角色的口令（口令只对具有<literal>LOGIN</literal>属性的角色有用，但是不管怎样你还是可以为没有该属性的角色定义一个口令）。如果你没有计划使用口令认证，你可以忽略这个选项。如果没有指定口令，口令将被设置为空并且该用户的口令认证总是会失败。也可以用<literal>PASSWORD NULL</literal>显式地写出一个空口令。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ENCRYPTED</></term>
      <term><literal>UNENCRYPTED</></term>
      <listitem>
       <para>
        这些关键词控制口令是否被加密存储在系统目录中（如果都没有指定，默认的行为由配置参数<xref linkend="guc-password-encryption">决定）。如果已经存在的口令字符串已经被 MD5 加密过，那么它会被照原样存储，而不管是否指定了<literal>ENCRYPTED</>或<literal>UNENCRYPTED</>（因为系统不能解密指定的已加密口令字符串）。这允许在转储/恢复期间重载被加密的口令。
       </para>

       <para>
        注意旧的客户端可能缺乏对 MD5 认证机制的支持，而被加密存储的口令恰好需要该机制。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>VALID UNTIL</literal> '<replaceable class="parameter">timestamp</replaceable>'</term>
      <listitem>
       <para>
        <literal>VALID UNTIL</literal>机制设置一个日期和时间，在该时间点之后角色的口令将会失效。如果这个子句被忽略，那么口令将总是有效。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IN ROLE</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <para>
        <literal>IN ROLE</literal>子句列出一个或多个现有的角色，新角色将被立即作为新成员加入到这些角色中（注意没有选项可以把新角色作为一个管理员加入，需要用一个单独的<command>GRANT</>命令来完成）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IN GROUP</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <para><literal>IN GROUP</literal>是<literal>IN ROLE</>的一种已废弃的拼写方式。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ROLE</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <para>
        <literal>ROLE</literal>子句列出一个或者多个现有角色，它们会被自动作为成员加入到新角色中（这实际上新角色变成了一个<quote>组</>）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ADMIN</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <para>
        <literal>ADMIN</literal>子句与<literal>ROLE</literal>相似，但是被提及的角色被使用<literal>WITH ADMIN OPTION</>加入到新角色中，让它们能够把这个角色中的成员关系授予给其他人。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>USER</> <replaceable class="parameter">role_name</replaceable></term>
      <listitem>
       <para>
        <literal>USER</literal>子句是<literal>ROLE</>子句的一个已废弃的拼写方式。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>SYSID</> <replaceable class="parameter">uid</replaceable></term>
      <listitem>
       <para>
        <literal>SYSID</literal>子句会被忽略，但是会为了向后兼容，还是会接受它。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   使用<xref linkend="SQL-ALTERROLE">来更改一个角色的属性，以及使用<xref linkend="SQL-DROPROLE">来移除一个角色。所有用<command>CREATE ROLE</>指定的属性可以被后来的<command>ALTER ROLE</>命令所修改。
  </para>

  <para>
   增加和移除组角色成员的最佳方式是使用<xref linkend="SQL-GRANT">和<xref linkend="SQL-REVOKE">。
  </para>

  <para>
   <literal>VALID UNTIL</>子句只为一个口令而不是为一个角色<foreignphrase>本身</>定义了一个过期时间。特别地，当使用一个非基于口令认证的方法登录时，过期时间是不会被强制的。
  </para>

  <para>
   <literal>INHERIT</>属性管理可授予特权（也就是对数据库对象和角色成员关系的访问特权）的继承性。它并不适用于由<command>CREATE ROLE</>和<command>ALTER ROLE</>设置的特殊角色属性。例如，作为具有<literal>CREATEDB</>特权的角色的一个成员，并不会立刻授予创建数据库的角色，即便<literal>INHERIT</>被设置也是如此，在创建一个数据库之前必须通过<xref linkend="SQL-SET-ROLE">成为该角色。
  </para>

  <para>
   <literal>INHERIT</>属性是用于向后兼容原因的默认值：在早前的<productname>PostgreSQL</productname>发布中，用户总是能够访问其所属组的所有特权。不过，<literal>NOINHERIT</>更加接近于 SQL 标准中指定的语义。
  </para>

  <para>
   要小心<literal>CREATEROLE</>特权。对于一个<literal>CREATEROLE</>角色的特权没有继承的概念。那意味着即使一个角色没有特定的特权但被允许创建其他角色，它可以轻易地创建与自身特权不同的另一个角色（除了创建具有超级用户特权的角色）。例如，如果角色<quote>user</>具有<literal>CREATEROLE</>特权但是没有<literal>CREATEDB</>特权，但是它能够创建一个带有<literal>CREATEDB</>特权的新角色。因此，可以把具有<literal>CREATEROLE</>特权的角色看成是准超级用户角色。
  </para>

  <para>
   <productname>PostgreSQL</productname>包括一个程序<xref linkend="APP-CREATEUSER">，它具有和<command>CREATE ROLE</command>相同的功能（事实上，它会调用这个命令），但是它可以从命令 shell 中运行。
  </para>

  <para>
   <literal>CONNECTION LIMIT</>只被近似地强制，如果两个新会话在几乎相同时间被开始，而此时该角色只剩下刚好一个连接<quote>槽</>，两者可能都将失败。还有，该限制从不对超级用户强制。
  </para>

  <para>
   用这个命令指定一个非加密口令时必须加以注意。该命令将被以明文的形式传输到服务器，并且它也可能被记录在客户端命令历史或者服务器日志中。不过，命令<xref linkend="APP-CREATEUSER">会传输加密的口令。还有，<xref linkend="app-psql">包含一个命令<command>\password</command>，它可以被用来安全地改变该口令。
  </para>
 </refsect1>

 <refsect1>
  <title>例子</title>

  <para>
   创建一个能登录但是没有口令的角色：
<programlisting>
CREATE ROLE jonathan LOGIN;
</programlisting>
  </para>

  <para>
   创建一个有口令的角色：
<programlisting>
CREATE USER davide WITH PASSWORD 'jw8s0F4';
</programlisting>
   （<command>CREATE USER</>和<command>CREATE ROLE</>完全相同，除了它带有<literal>LOGIN</>）。
  </para>

  <para>
   创建一个角色，它的口令有效期截止到 2004 年底。在进入 2005 年第一秒时，该口令会失效。

<programlisting>
CREATE ROLE miriam WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01';
</programlisting>
  </para>

  <para>
   创建一个能够创建数据库并且管理角色的角色：
<programlisting>
CREATE ROLE admin WITH CREATEDB CREATEROLE;
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   SQL 标准中有<command>CREATE ROLE</command>语句，但是标准只要求语法
<synopsis>
CREATE ROLE <replaceable class="PARAMETER">name</> [ WITH ADMIN <replaceable class="PARAMETER">role_name</> ]
</synopsis>
   多个初始管理员以及<command>CREATE ROLE</command>的所有其他选项都是<productname>PostgreSQL</productname>扩展。
   </para>

  <para>
   SQL 标准定义了用户和角色的概念，但是它把它们看成是可区分的概念并且将定义用户的所有命令留给每一种数据库实现来指定。在<productname>PostgreSQL</productname>中，我们已经选择把用户和角色统一成一种单一实体类型。因此角色比起标准中拥有更多可选的属性。
  </para>

  <para>
   SQL 标准指定的行为可以通过给用户<literal>NOINHERIT</>属性来得到最大的金丝，而角色会被给予<literal>INHERIT</>属性。
  </para>
 </refsect1>

 <refsect1>
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-set-role"></member>
   <member><xref linkend="sql-alterrole"></member>
   <member><xref linkend="sql-droprole"></member>
   <member><xref linkend="sql-grant"></member>
   <member><xref linkend="sql-revoke"></member>
   <member><xref linkend="app-createuser"></member>
  </simplelist>
 </refsect1>
</refentry>

<!--
doc/src/sgml/ref/vacuum.sgml
PostgreSQL documentation
-->

<refentry id="SQL-VACUUM">
 <indexterm zone="sql-vacuum">
  <primary>VACUUM</primary>
 </indexterm>
 <refmeta>
  <refentrytitle>VACUUM</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>VACUUM</refname>
  <!-- 
  <refpurpose>garbage-collect and optionally analyze a database</refpurpose> 
  -->
  <refpurpose>垃圾收集以及可选地分析一个数据库</refpurpose>
 </refnamediv>

 <indexterm zone="sql-vacuum">
  <primary>VACUUM</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
VACUUM [ ( { FULL | FREEZE | VERBOSE | ANALYZE } [, ...] ) ] [ <replaceable class="PARAMETER">table_name</replaceable> [ (<replaceable class="PARAMETER">column_name</replaceable> [, ...] ) ] ]
VACUUM [ FULL ] [ FREEZE ] [ VERBOSE ] [ <replaceable class="PARAMETER">table_name</replaceable> ]
VACUUM [ FULL ] [ FREEZE ] [ VERBOSE ] ANALYZE [ <replaceable class="PARAMETER">table_name</replaceable> [ (<replaceable class="PARAMETER">column_name</replaceable> [, ...] ) ] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>VACUUM</command> reclaims storage occupied by dead tuples.
   In normal <productname>PostgreSQL</productname> operation, tuples that
   are deleted or obsoleted by an update are not physically removed from
   their table; they remain present until a <command>VACUUM</command> is
   done.  Therefore it's necessary to do <command>VACUUM</command>
   periodically, especially on frequently-updated tables.
  </para>
-->
<para>
<command>VACUUM</command>回收死行占据的存储空间。在一般的<productname>PostgreSQL</productname>
操作里，那些已经 DELETE 的行或者被 UPDATE 过后过时的行并没有从它们所属的表中物理删除；
在完成<command>VACUUM</command>之前它们仍然存在。因此有必要周期地运行<command>VACUUM</command>，
特别是在经常更新的表上。
</para>

  <!--
<para>
   With no parameter, <command>VACUUM</command> processes every table in the
   current database that the current user has permission to vacuum.
   With a parameter, <command>VACUUM</command> processes only that table.
  </para>
-->
<para>
如果没有参数，<command>VACUUM</command>处理当前用户有权限vacuum的当前数据库里的每个表，
如果有参数，<command>VACUUM</command>只处理那个表。
</para>

  <!--
<para>
   <command>VACUUM ANALYZE</command> performs a <command>VACUUM</command>
   and then an <command>ANALYZE</command> for each selected table.  This
   is a handy combination form for routine maintenance scripts.  See
   <xref linkend="sql-analyze">
   for more details about its processing.
  </para>
-->
<para>
<command>VACUUM ANALYZE</command>先执行一个<command>VACUUM</command>
然后是给每个选定的表执行一个<command>ANALYZE</command>。对于日常维护脚本而言，
这是一个很方便的组合。参阅<xref linkend="sql-analyze">获取更多有关其处理的细节。
</para>

  <!--
<para>
   Plain <command>VACUUM</command> (without <literal>FULL</>) simply reclaims
   space and makes it
   available for re-use.  This form of the command can operate in parallel
   with normal reading and writing of the table, as an exclusive lock
   is not obtained.  However, extra space is not returned to the operating
   system (in most cases); it's just kept available for re-use within the
   same table.  <command>VACUUM FULL</command> rewrites the entire contents
   of the table into a new disk file with no extra space, allowing unused
   space to be returned to the operating system.  This form is much slower and
   requires an exclusive lock on each table while it is being processed.
  </para>
-->
<para>
简单的<command>VACUUM</command>(没有<literal>FULL</>)只是简单地回收空间并且令其可以再次使用。
这种形式的命令可以和对表的普通读写并发操作，因为没有请求排他锁。然而，
额外的空间并不返回到操作系统（在大多数情况下）；仅保持在相同的表中可重用。
<command>VACUUM FULL</command>将表的全部内容重写到一个没有任何多余空间的新磁盘文件中，
允许未使用的空间返回到操作系统中。这种形式要慢许多并且在处理的时候需要在表上施加一个排它锁。
</para>

  <!--
<para>
   When the option list is surrounded by parentheses, the options can be
   written in any order.  Without parentheses, options must be specified
   in exactly the order shown above.
   The parenthesized syntax was added in
   <productname>PostgreSQL</productname> 9.0;  the unparenthesized
   syntax is deprecated.
  </para>
-->
<para>
当选项列表被括号括起来时，该选项可以任意顺序来写。没有圆括号，选项必须按以上显示的顺序指定。
加圆括号的语法在<productname>PostgreSQL</productname> 9.0中添加；不加括号的语法已经废弃了。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><literal>FULL</literal></term>
    <listitem>
     <!--
<para>
      Selects <quote>full</quote> vacuum, which can reclaim more
      space, but takes much longer and exclusively locks the table.
      This method also requires extra disk space, since it writes a
      new copy of the table and doesn't release the old copy until
      the operation is complete.  Usually this should only be used when a
      significant amount of space needs to be reclaimed from within the table.
     </para>
-->
<para>
选择<quote>完全</quote>清理，这样可以恢复更多的空间，但是花的时间更多并且在表上施加了排它锁。
该方法也需要额外的磁盘空间，因为它写了一个表的新拷贝并且不释放旧的拷贝，直到操作完成。
通常这应该只用于当一个大量的空间需要在这个表中回收时。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FREEZE</literal></term>
    <listitem>
     <!--
<para>
      Selects aggressive <quote>freezing</quote> of tuples.
      Specifying <literal>FREEZE</literal> is equivalent to performing
      <command>VACUUM</command> with the
      <xref linkend="guc-vacuum-freeze-min-age"> and
      <xref linkend="guc-vacuum-freeze-table-age"> parameters
      set to zero.  Aggressive freezing is always performed when the
      table is rewritten, so this option is redundant when <literal>FULL</>
      is specified.
     </para>
-->
<para>
选择激进的行<quote>冻结</quote>。指定<literal>FREEZE</literal>相当于执行
<command>VACUUM</command>时将<xref linkend="guc-vacuum-freeze-min-age">
和<xref linkend="guc-vacuum-freeze-table-age">参数设为零。
当在重写表时总是执行积极冻结，所以当声明了<literal>FULL</>时，
这个选项是多余的。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VERBOSE</literal></term>
    <listitem>
     <!--
<para>
      Prints a detailed vacuum activity report for each table.
     </para>
-->
<para>
为每个表打印一份详细的清理工作报告。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ANALYZE</literal></term>
    <listitem>
     <!--
<para>
      Updates statistics used by the planner to determine the most
      efficient way to execute a query.
     </para>
-->
<para>
更新用于优化器的统计信息，以决定执行查询的最有效方法。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of a specific table to
      vacuum. Defaults to all tables in the current database.
     </para>
-->
<para>
要清理的表的名称(可以有模式修饰)。缺省时是当前数据库中的所有表。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of a specific column to analyze. Defaults to all columns.
      If a column list is specified, <literal>ANALYZE</> is implied.
     </para>
-->
<para>
要分析的具体的字段名称。缺省是所有字段。若指定一个字段列表，就暗含<literal>ANALYZE</>。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!-- 
  <title>Outputs</title> 
  -->
  <title>输出</title>

   <!--
<para>
    When <literal>VERBOSE</> is specified, <command>VACUUM</> emits
    progress messages to indicate which table is currently being
    processed.  Various statistics about the tables are printed as well.
   </para>
-->
<para>
如果指定了<literal>VERBOSE</>，那么<command>VACUUM</>将发出处理过程中的信息，
以表明当前正在处理哪个表。各种有关这些表的统计也会打印出来。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

   <!--
<para>
    To vacuum a table, one must ordinarily be the table's owner or a
    superuser.  However, database owners are allowed to
    vacuum all tables in their databases, except shared catalogs.
    (The restriction for shared catalogs means that a true database-wide
    <command>VACUUM</> can only be performed by a superuser.)
    <command>VACUUM</> will skip over any tables that the calling user
    does not have permission to vacuum.
   </para>
-->
<para>
要清空一个表，一个人必须通常是表的所有者或是一个超级用户。然而，
数据库所有者允许清空他们的数据库中的所有表，除了共享目录。
（对共享目录的限制意味着一个真正的数据库范围的<command>VACUUM</>仅能由超级用户执行。）
<command>VACUUM</>将跳过调用用户没有权限清空的任何表。
</para>

   <!--
<para>
    <command>VACUUM</> cannot be executed inside a transaction block.
   </para>
-->
<para>
<command>VACUUM</>不能在事务块内执行。
</para>

   <!--
<para>
    For tables with <acronym>GIN</> indexes, <command>VACUUM</command> (in
    any form) also completes any pending index insertions, by moving pending
    index entries to the appropriate places in the main <acronym>GIN</> index
    structure.  See <xref linkend="gin-fast-update"> for details.
   </para>
-->
<para>
对于有<acronym>GIN</>索引的表，<command>VACUUM</command>（以任何形式）
也完成任何挂起索引插入内容，通过移动挂起索引条目到主<acronym>GIN</>索引结构中的相应位置。
参阅<xref linkend="gin-fast-update">获取详细信息。
</para>

   <!--
<para>
    We recommend that active production databases be
    vacuumed frequently (at least nightly), in order to
    remove dead rows. After adding or deleting a large number
    of rows, it might be a good idea to issue a <command>VACUUM
    ANALYZE</command> command for the affected table. This will update the
    system catalogs with
    the results of all recent changes, and allow the
    <productname>PostgreSQL</productname> query planner to make better
    choices in planning queries.
   </para>
-->
<para>
建议生产数据库经常清理(至少每晚一次)，以保证不断地删除死行。尤其是在增删了大量记录之后，
对受影响的表执行<command>VACUUM ANALYZE</command>命令是一个很好的习惯。
这样做将更新系统目录为最近的更改，并且允许<productname>PostgreSQL</productname>
查询优化器在规划用户查询时有更好的选择。
</para>

   <!--
<para>
    The <option>FULL</option> option is not recommended for routine use,
    but might be useful in special cases.  An example is when you have deleted
    or updated most of the rows in a table and would like the table to
    physically shrink to occupy less disk space and allow faster table
    scans. <command>VACUUM FULL</command> will usually shrink the table
    more than a plain <command>VACUUM</command> would.
   </para>
-->
<para>
不建议日常使用<option>FULL</option>选项，但是可以在特殊情况下使用。
一个例子就是在你删除或更新了一个表的大部分行之后，
希望从物理上缩小该表以减少磁盘空间占用并且允许更快的表扫描。<command>VACUUM FULL</command>
通常要比单纯的<command>VACUUM</command>收缩更多的表尺寸。
</para>

   <!--
<para>
    <command>VACUUM</command> causes a substantial increase in I/O traffic,
    which might cause poor performance for other active sessions.  Therefore,
    it is sometimes advisable to use the cost-based vacuum delay feature.
    See <xref linkend="runtime-config-resource-vacuum-cost"> for details.
   </para>
-->
<para>
<command>VACUUM</command>导致 I/O 流量增加，可能会导致其它活动会话的性能恶劣。因此，
有时候会建议使用基于开销的 vacuum 延迟特性。
参阅<xref linkend="runtime-config-resource-vacuum-cost">获取细节。
</para>

   <!--
<para>
    <productname>PostgreSQL</productname> includes an <quote>autovacuum</>
    facility which can automate routine vacuum maintenance.  For more
    information about automatic and manual vacuuming, see
    <xref linkend="routine-vacuuming">.
   </para>
-->
<para>
<productname>PostgreSQL</productname>包含一个<quote>autovacuum</>设施，
它可以自动进行日常的 vacuum 维护。关于手动和自动清理的更多细节，
参见<xref linkend="routine-vacuuming">。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>
<para>
<!-- 
   The following is an example from running <command>VACUUM</command> on a
   table in the regression database:
 -->
下面是一个在蜕变(regression)数据库里某个表上执行<command>VACUUM</command>的一个例子： 
<programlisting>
regression=# VACUUM (VERBOSE, ANALYZE) onek;
INFO:  vacuuming "public.onek"
INFO:  index "onek_unique1" now contains 1000 tuples in 14 pages
DETAIL:  3000 index tuples were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.01s/0.08u sec elapsed 0.18 sec.
INFO:  index "onek_unique2" now contains 1000 tuples in 16 pages
DETAIL:  3000 index tuples were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.00s/0.07u sec elapsed 0.23 sec.
INFO:  index "onek_hundred" now contains 1000 tuples in 13 pages
DETAIL:  3000 index tuples were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.01s/0.08u sec elapsed 0.17 sec.
INFO:  index "onek_stringu1" now contains 1000 tuples in 48 pages
DETAIL:  3000 index tuples were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.01s/0.09u sec elapsed 0.59 sec.
INFO:  "onek": removed 3000 tuples in 108 pages
DETAIL:  CPU 0.01s/0.06u sec elapsed 0.07 sec.
INFO:  "onek": found 3000 removable, 1000 nonremovable tuples in 143 pages
DETAIL:  0 dead tuples cannot be removed yet.
There were 0 unused item pointers.
0 pages are entirely empty.
CPU 0.07s/0.39u sec elapsed 1.56 sec.
INFO:  analyzing "public.onek"
INFO:  "onek": 36 pages, 1000 rows sampled, 1000 estimated total rows
VACUUM
</programlisting></para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   There is no <command>VACUUM</command> statement in the SQL standard.
  </para>
-->
<para>
SQL 标准里没有<command>VACUUM</command>语句。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="app-vacuumdb"></member>
   <member><xref linkend="runtime-config-resource-vacuum-cost"></member>
   <member><xref linkend="autovacuum"></member>
  </simplelist>
 </refsect1>
</refentry>

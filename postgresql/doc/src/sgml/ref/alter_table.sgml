<!--
doc/src/sgml/ref/alter_table.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERTABLE">
 <indexterm zone="sql-altertable">
  <primary>ALTER TABLE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER TABLE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER TABLE</refname>
  <refpurpose>更改一个表的定义</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER TABLE [ IF EXISTS ] [ ONLY ] <replaceable class="PARAMETER">name</replaceable> [ * ]
    <replaceable class="PARAMETER">action</replaceable> [, ... ]
ALTER TABLE [ IF EXISTS ] [ ONLY ] <replaceable class="PARAMETER">name</replaceable> [ * ]
    RENAME [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> TO <replaceable class="PARAMETER">new_column_name</replaceable>
ALTER TABLE [ IF EXISTS ] [ ONLY ] <replaceable class="PARAMETER">name</replaceable> [ * ]
    RENAME CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> TO <replaceable class="PARAMETER">new_constraint_name</replaceable>
ALTER TABLE [ IF EXISTS ] <replaceable class="PARAMETER">name</replaceable>
    RENAME TO <replaceable class="PARAMETER">new_name</replaceable>
ALTER TABLE [ IF EXISTS ] <replaceable class="PARAMETER">name</replaceable>
    SET SCHEMA <replaceable class="PARAMETER">new_schema</replaceable>
ALTER TABLE ALL IN TABLESPACE <replaceable class="PARAMETER">name</replaceable> [ OWNED BY <replaceable class="PARAMETER">role_name</replaceable> [, ... ] ]
    SET TABLESPACE <replaceable class="PARAMETER">new_tablespace</replaceable> [ NOWAIT ]

<phrase>其中<replaceable class="PARAMETER">action</replaceable> 是以下之一：</phrase>

    ADD [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> <replaceable class="PARAMETER">data_type</replaceable> [ COLLATE <replaceable class="PARAMETER">collation</replaceable> ] [ <replaceable class="PARAMETER">column_constraint</replaceable> [ ... ] ]
    DROP [ COLUMN ] [ IF EXISTS ] <replaceable class="PARAMETER">column_name</replaceable> [ RESTRICT | CASCADE ]
    ALTER [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> [ SET DATA ] TYPE <replaceable class="PARAMETER">data_type</replaceable> [ COLLATE <replaceable class="PARAMETER">collation</replaceable> ] [ USING <replaceable class="PARAMETER">expression</replaceable> ]
    ALTER [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> SET DEFAULT <replaceable class="PARAMETER">expression</replaceable>
    ALTER [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> DROP DEFAULT
    ALTER [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> { SET | DROP } NOT NULL
    ALTER [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> SET STATISTICS <replaceable class="PARAMETER">integer</replaceable>
    ALTER [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> SET ( <replaceable class="PARAMETER">attribute_option</replaceable> = <replaceable class="PARAMETER">value</replaceable> [, ... ] )
    ALTER [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> RESET ( <replaceable class="PARAMETER">attribute_option</replaceable> [, ... ] )
    ALTER [ COLUMN ] <replaceable class="PARAMETER">column_name</replaceable> SET STORAGE { PLAIN | EXTERNAL | EXTENDED | MAIN }
    ADD <replaceable class="PARAMETER">table_constraint</replaceable> [ NOT VALID ]
    ADD <replaceable class="PARAMETER">table_constraint_using_index</replaceable>
    ALTER CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> [ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]
    VALIDATE CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable>
    DROP CONSTRAINT [ IF EXISTS ]  <replaceable class="PARAMETER">constraint_name</replaceable> [ RESTRICT | CASCADE ]
    DISABLE TRIGGER [ <replaceable class="PARAMETER">trigger_name</replaceable> | ALL | USER ]
    ENABLE TRIGGER [ <replaceable class="PARAMETER">trigger_name</replaceable> | ALL | USER ]
    ENABLE REPLICA TRIGGER <replaceable class="PARAMETER">trigger_name</replaceable>
    ENABLE ALWAYS TRIGGER <replaceable class="PARAMETER">trigger_name</replaceable>
    DISABLE RULE <replaceable class="PARAMETER">rewrite_rule_name</replaceable>
    ENABLE RULE <replaceable class="PARAMETER">rewrite_rule_name</replaceable>
    ENABLE REPLICA RULE <replaceable class="PARAMETER">rewrite_rule_name</replaceable>
    ENABLE ALWAYS RULE <replaceable class="PARAMETER">rewrite_rule_name</replaceable>
    CLUSTER ON <replaceable class="PARAMETER">index_name</replaceable>
    SET WITHOUT CLUSTER
    SET WITH OIDS
    SET WITHOUT OIDS
    SET ( <replaceable class="PARAMETER">storage_parameter</replaceable> = <replaceable class="PARAMETER">value</replaceable> [, ... ] )
    RESET ( <replaceable class="PARAMETER">storage_parameter</replaceable> [, ... ] )
    INHERIT <replaceable class="PARAMETER">parent_table</replaceable>
    NO INHERIT <replaceable class="PARAMETER">parent_table</replaceable>
    OF <replaceable class="PARAMETER">type_name</replaceable>
    NOT OF
    OWNER TO <replaceable class="PARAMETER">new_owner</replaceable>
    SET TABLESPACE <replaceable class="PARAMETER">new_tablespace</replaceable>
    REPLICA IDENTITY {DEFAULT | USING INDEX <replaceable class="PARAMETER">index_name</replaceable> | FULL | NOTHING}

<phrase>并且 <replaceable class="PARAMETER">table_constraint_using_index</replaceable> 是：</phrase>

    [ CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ]
    { UNIQUE | PRIMARY KEY } USING INDEX <replaceable class="PARAMETER">index_name</replaceable>
    [ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY IMMEDIATE ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

  <para>
   <command>ALTER TABLE</command>更改一个现有表的定义。下文描述了
   几种形式。注意每一种形式所要求的锁级别可能不同。如果没有明确说明，将会
   持有一个<literal>ACCESS EXCLUSIVE</literal>所。当列出多个子命令时，所
   持有的锁将是子命令所要求的最严格的那一个。

  <variablelist>
   <varlistentry>
    <term><literal>ADD COLUMN</literal></term>
    <listitem>
     <para>
      这种形式向该表增加一个新列，使用与
      <xref linkend="SQL-CREATETABLE">相同的语法。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP COLUMN [ IF EXISTS ]</literal></term>
    <listitem>
     <para>
      这种形式从表删除一列。涉及到该列的索引和表约束也将会被自动
      删除。如果在该表之外有任何东西（例如外键引用或者视图）依赖
      于该列，你将需要用到<literal>CASCADE</>。如果指定了
      <literal>IF EXISTS</literal>但该列不存在，则不会抛出错误。
      这种情况中会发出一个提示。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>IF EXISTS</literal></term>
    <listitem>
     <para>
      如果该表不存在，不要抛出一个错误。这种情况中会发出一个提示。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET DATA TYPE</literal></term>
    <listitem>
     <para>
      这种形式更改表中一列的类型。涉及到该列的索引和简单表约束将通过
      重新解析最初提供的表达式被自动转换为使用新的列类型。可选的
      <literal>COLLATE</literal>子句为新列指定一种排序规则，如果被省略，
      排序规则会是新列类型的默认排序规则。可选的<literal>USING</literal>
      子句指定如何从旧的列值计算新列值，如果被省略，默认的转换和从旧类型
      到新类型的赋值造型一样。如果没有从旧类型到新类型的隐式或者赋值造型，
      则必须提供一个<literal>USING</literal>子句。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET</literal>/<literal>DROP DEFAULT</literal></term>
    <listitem>
     <para>
      这些形式为一列设置或者移除默认值。默认值只在后续的
      <command>INSERT</command>或<command>UPDATE</>命令中生效，
      它们不会导致已经在表中的行改变。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET</literal>/<literal>DROP NOT NULL</literal></term>
    <listitem>
     <para>
      这些形式更改一列是否被标记为允许空值或者拒绝空值。只有当该列
      不包含空值时，你才能使用<literal>SET NOT NULL</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET STATISTICS</literal></term>
    <listitem>
     <para>
      这种形式为后续的<xref linkend="sql-analyze">操作设置针对每列
      的统计收集目标。目标可以被设置在范围 0 到 10000 之间，还可以
      把它设置为 -1 来恢复到使用系统默认的统计目标（
      <xref linkend="guc-default-statistics-target">）。更多有关
      <productname>PostgreSQL</productname>查询规划器使用统计
      信息的内容可见<xref linkend="planner-stats">。
     </para>
     <para>
      SET STATISTICS 要求一个<literal>SHARE UPDATE EXCLUSIVE</literal>锁。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET ( <replaceable class="PARAMETER">attribute_option</replaceable> = <replaceable class="PARAMETER">value</replaceable> [, ... ] )</literal></term>
    <term><literal>RESET ( <replaceable class="PARAMETER">attribute_option</replaceable> [, ... ] )</literal></term>
    <listitem>
     <para>
      这种形式设置或者重置每个属性的选项。当前，已定义的针对每个属性的
      选项只有<literal>n_distinct</>和<literal>n_distinct_inherited</>，
      它们会覆盖后续<xref linkend="sql-analyze">操作所得到的可区分值数量
      估计。<literal>n_distinct</>影响该表本身的统计信息，而
      <literal>n_distinct_inherited</>影响为该表外加其继承子女收集的统计信息。
      当被设置为一个正值时，<command>ANALYZE</>将假定该列刚好包含指定
      数量的可区分非空值。当被设置为一个负值（必须大于等于 -1）时， 
      <command>ANALYZE</>将假定可区分非空值的数量与表的尺寸成线性比例，
      确切的计数由估计的表尺寸乘以给定数字的绝对值计算得到。例如，值 -1 表示
      该列中所有的值都是可区分的，而值 -0.5 则表示每一个值平均出现两次。当表
      的尺寸随时间变化时，这会有所帮助，因为这种计算只有在查询规划时才会被
      执行。指定值为 0 将回到正常的估计可区分值数量的做法。更多有关
      <productname>PostgreSQL</productname>查询规划器使用统计
      信息的内容可见<xref linkend="planner-stats">。
     </para>
     <para>
      更改针对每个属性的选项要求一个
      <literal>SHARE UPDATE EXCLUSIVE</literal>锁。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>SET STORAGE</literal>
     <indexterm>
      <primary>TOAST</primary>
      <secondary>per-column storage settings</secondary>
     </indexterm>
    </term>
    <listitem>
     <para>
      这种形式为一列设置存储模式。这会控制这列是会被保持在线内还是放在一个
      二级<acronym>TOAST</>表中，以及数据是否应被压缩。对于
      <type>integer</type>之类的定长、线内、未压缩值必须使用
      <literal>PLAIN</literal>。<literal>MAIN</literal>用于线内、可压缩的
      数据。<literal>EXTERNAL</literal>用于外部的、未压缩数据。而
      <literal>EXTENDED</literal>用于外部的、压缩数据。对于大部分支持
      非-<literal>PLAIN</literal>存储的数据类型，<literal>EXTENDED</literal>
      是默认值。使用<literal>EXTERNAL</literal>将会让很大的
      <type>text</type>和<type>bytea</type>之上的子串操作运行得更快，
      但是代价是存储空间会增加。注意<literal>SET STORAGE</>本身并不改变
      表中的任何东西，它只是设置在未来的表更新时要追求的策略。详见
      <xref linkend="storage-toast">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD <replaceable class="PARAMETER">table_constraint</replaceable> [ NOT VALID ]</literal></term>
    <listitem>
     <para>
      这种形式使用和<xref linkend="SQL-CREATETABLE">相同的语法外加
      <literal>NOT VALID</literal>选项为一个表增加一个新的约束，该选项
      当前只被允许用于外键和 CHECK 约束。如果约束被标记为
      <literal>NOT VALID</literal>，将会跳过验证表中所有行满足该约束的
      初检，这种检查可能会很漫长。该约束仍将被强制到后续的插入和删除上
      （也就是说，在外键的情况下如果在被引用表中没有一个匹配的行，操作
      会失败；如果新行不匹配指定的检查约束，操作也会失败）。但是数据库
      不会假定约束对该表中的所有行都成立，直到通过使用<literal>VALIDATE
      CONSTRAINT</literal>选项对它进行验证。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD <replaceable class="PARAMETER">table_constraint_using_index</replaceable></literal></term>
    <listitem>
     <para>
      这种形式基于一个已有的唯一索引为一个表增加新的
      <literal>PRIMARY KEY</>或<literal>UNIQUE</>约束。该索引中的
      所有列将被包括在约束中。
     </para>

     <para>
      该索引不能有表达式列或者是一个部分索引。还有，它必须是一个带有
      默认排序顺序的 B-树索引。这些限制确保该索引等效于使用常规
      <literal>ADD PRIMARY KEY</>或者<literal>ADD UNIQUE</>命令
      时创建的索引。
     </para>

     <para>
      如果<literal>PRIMARY KEY</>被指定，并且该索引的列没有被标记
      <literal>NOT NULL</>，那么这个命令将尝试对每一个这样的列做
      <literal>ALTER COLUMN SET NOT NULL</>。这需要一次全表扫描
      来验证这些列不包含空值。在所有其他情况中，这都是一种很快的操作。
     </para>

     <para>
      如果提供了一个约束名，那么该索引将被重命名以匹配该约束名。否则
      该约束将被命名成索引的名称。
     </para>

     <para>
      这个命令被执行后，该索引被增加的约束<quote>拥有</>，这和用常规
      <literal>ADD PRIMARY KEY</>或<literal>ADD UNIQUE</>命令
      创建的索引一样。特别地，删掉该约束将会导致该索引也消失。
     </para>

     <note>
      <para>
       如果需要增加一个新的约束但是不希望长时间阻塞表更新，那么使用现有
       索引增加约束会有所帮助。要这样做，用
       <command>CREATE INDEX CONCURRENTLY</>创建该索引，并且
       接着使用这种语法把它安装为一个正式的约束。例子见下文。
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ALTER CONSTRAINT</literal></term>
    <listitem>
     <para>
      这种形式修改之前创建的一个约束的属性。当前只能修改外键约束。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VALIDATE CONSTRAINT</literal></term>
    <listitem>
     <para>
      这种形式验证之前创建为<literal>NOT VALID</literal>的外键或检查约束，
      它会扫描表来确保对于该约束没有行不满足约束。如果约束已经被标记为合法，
      则什么也不会发生。
     </para>
     <para>
      在大型表上的验证可能是一个长时间的处理。把约束的验证和创建分离开来让
      我们可以把验证过程推迟到系统闲时进行，或者可以得到额外的时间来更正已
      经存在的错误从而避免新的错误。还要注意验证本身并不会在运行时阻止对表
      的写命令。
     </para>
     <para>
      验证只要求被修改表上的一个<literal>SHARE UPDATE EXCLUSIVE</literal>
      锁。如果该约束是一个外键，则还会在被该约束引用的表上要求一个
      <literal>ROW SHARE</literal>锁。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP CONSTRAINT [ IF EXISTS ]</literal></term>
    <listitem>
     <para>
      这种形式在一个表上删除指定的约束。如果<literal>IF EXISTS</literal>
      被指定并且该约束不存在，不会抛出错误。在这种情况下会发出一个提示。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DISABLE</literal>/<literal>ENABLE [ REPLICA | ALWAYS ] TRIGGER</literal></term>
    <listitem>
     <para>
      这些形式配置属于该表的触发器的触发设置。系统仍然知道被禁用触发器
      的存在，但是即使它的触发事件发生也不会执行它。对于一个延迟触发器，
      会在事件发生时而不是触发器函数真正被执行时检查其启用状态。可以禁
      用或者启用用名称指定的单个触发器、表上的所有触发器、用户拥有的触
      发器（这个选项会排除内部生成的约束触发器，例如用来实现外键约束或
      可延迟唯一和排除约束）。禁用或者启用内部生成的约束触发器要求超级
      用户特权，这样做要小心因为如果这类触发器不被执行，约束的完整性当
      然无法保证。触发器引发机制也受到配置变量
      <xref linkend="guc-session-replication-role">的影响。当复制角色是
      <quote>origin</>（默认）或者<quote>local</>时，被简单禁用的
      触发器将被触发。被配置为<literal>ENABLE REPLICA</literal>的触发
      器只有在会话处于<quote>replica</>模式时才将被触发。被配置为
      <literal>ENABLE ALWAYS</literal>的触发器的触发不会考虑当前复制
      模式。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DISABLE</literal>/<literal>ENABLE [ REPLICA | ALWAYS ] RULE</literal></term>
    <listitem>
     <para>
      这些形式配置属于表的重写规则的触发设置。系统仍然知道一个被禁用规则的
      存在，但在查询重写时不会应用它。其语义与禁用的/启用的触发器的一样。
      对于<literal>ON SELECT</literal>规则会忽略这个配置，即使当前会话处于
      一种非默认的复制角色，这类规则总是会被应用以保持视图工作正常。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CLUSTER ON</literal></term>
    <listitem>
     <para>
      这种形式为未来的<xref linkend="SQL-CLUSTER">操作选择默认的索引。
      它不会真正地对表进行聚簇。
     </para>
     <para>
      改变聚簇选项要求一个<literal>SHARE UPDATE EXCLUSIVE</literal>锁。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET WITHOUT CLUSTER</literal></term>
    <listitem>
     <para>
      这种形式从表中移除最近使用的
      <xref linkend="SQL-CLUSTER">索引说明。这会影响未来的不指定索引
      的聚簇操作。
     </para>
     <para>
      改变聚簇选项要求一个<literal>SHARE UPDATE EXCLUSIVE</literal>锁。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET WITH OIDS</literal></term>
    <listitem>
     <para>
      这种形式为表增加一个<literal>oid</literal>系统列（见
      <xref linkend="ddl-system-columns">）。如果该表已经有 OID，则它
      什么也不会做。
     </para>

     <para>
      注意这不等效于<literal>ADD COLUMN oid oid</>，后者只是会增加一个
      恰好名为<literal>oid</>的普通列而不是系统列。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET WITHOUT OIDS</literal></term>
    <listitem>
     <para>
      这种形式从该表移除<literal>oid</literal>系统列。这完全等效于
      <literal>DROP COLUMN oid RESTRICT</literal>，不过如果没有
      <literal>oid</literal>列它不会抱怨。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET ( <replaceable class="PARAMETER">storage_parameter</replaceable> = <replaceable class="PARAMETER">value</replaceable> [, ... ] )</literal></term>
    <listitem>
     <para>
      这种形式为该表更改一个或者更多存储参数。可用的参数请见
      <xref linkend="SQL-CREATETABLE-storage-parameters"
      endterm="SQL-CREATETABLE-storage-parameters-title">。注意这个
      命令将不会立刻修改表内容，这取决于重写表以得到想要的结果可能需要的
      参数。可以用<link linkend="SQL-VACUUM">VACUUM
      FULL</>、<xref linkend="SQL-CLUSTER">或者
      <command>ALTER TABLE</>的一种形式来强制一次表重写。
     </para>

     <note>
      <para>
       虽然<command>CREATE TABLE</>允许在<literal>WITH (<replaceable
       class="PARAMETER">storage_parameter</>)</literal>语法中指定
       <literal>OIDS</>，但是
       <command>ALTER TABLE</>没有把<literal>OIDS</>当作一个存储
       参数，而是使用<literal>SET WITH OIDS</>
       和<literal>SET WITHOUT OIDS</>形式来更改 OID 状态。
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESET ( <replaceable class="PARAMETER">storage_parameter</replaceable> [, ... ] )</literal></term>
    <listitem>
     <para>
      这种形式把一个或者更多存储参数重置到它们的默认值。和
      <literal>SET</>一样，可能需要一次表重写来更新整个表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INHERIT <replaceable class="PARAMETER">parent_table</replaceable></literal></term>
    <listitem>
     <para>
      这种形式把目标表增加为指定父表的一个新子女。随后，针对父亲的查询将
      包括目标表中的记录。要被增加为一个子女，目标表必须已经包含和父表完
      全相同的列（也可以有额外的列）。这些列必须具有匹配的数据类型，并且
      如果它们在父表中具有<literal>NOT NULL</literal>约束，它们在子表中
      也必须有<literal>NOT NULL</literal>约束。
     </para>

     <para>
      也必须把子表约束与所有父表的<literal>CHECK</literal>约束进行匹配，
      不过父表中那些被标记为非可继承（也就是用<literal>ALTER TABLE ... ADD CONSTRAINT ... NO INHERIT</literal>
      创建的）除外，它们会被忽略。所有匹配得上的子表约束不能被标记为不可
      继承。当前，<literal>UNIQUE</literal>、<literal>PRIMARY KEY</literal>
      以及<literal>FOREIGN KEY</literal>约束没有被考虑，但是这种情况可能
      会在未来发生变化。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NO INHERIT <replaceable class="PARAMETER">parent_table</replaceable></literal></term>
    <listitem>
     <para>
      这种形式把目标表从指定父表的子女列表中移除。针对父表的查询将不再包括
      来自目标表的记录。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OF <replaceable class="PARAMETER">type_name</replaceable></literal></term>
    <listitem>
     <para>
      这种形式把该表链接到一种组合类型，就好像<command>CREATE
      TABLE OF</>所做的那样。该表的列名和类型列表必须精确地匹配
      该组合类型。<literal>oid</>系统列的存在情况可以不同。该表必须
      不从任何其他表继承。这些限制确保
      <command>CREATE TABLE OF</>能允许一个等价的表定义。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOT OF</literal></term>
    <listitem>
     <para>
      这种形式解除一个有类型的表和其类型之间的关联。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OWNER</literal></term>
    <listitem>
     <para>
      这种形式把表、序列、视图、物化视图或外部表的拥有者改为指定用户。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET TABLESPACE</literal></term>
    <listitem>
     <para>
      这种形式把该表的表空间改为指定的表空间并且把该表相关的数据文件移动到
      新表空间中。如果表上有索引，则索引不会被移动。但是可以用额外的
      <literal>SET TABLESPACE</literal>命令单独移动它们。用
      <literal>ALL IN TABLESPACE</literal>形式可以用来移动当前数据库中处于
      一个表空间中的所有表，这将首先锁住所有要移动的表并且接着挨个移动。这
      种形式也支持<literal>OWNED BY</literal>，它将只移动指定角色拥有的表。
      如果<literal>NOWAIT</literal>选项被指定，在无法立刻获得所有所需的锁
      时该命令将会失败。注意系统目录不会被这个命令移动，如果需要可以使用
      <command>ALTER DATABASE</command>或者显式的
      <command>ALTER TABLE</command>调用来替代。
      <literal>information_schema</literal>关系不会被认为是系统目录的部分，
      它们将被移动。另见
      <xref linkend="SQL-CREATETABLESPACE">。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="SQL-CREATETABLE-REPLICA-IDENTITY">
    <term><literal>REPLICA IDENTITY</literal></term>
    <listitem>
     <para>
      这种形式更改被写入到预写式日志来标识被更新或删除行的信息。除非使用逻辑复制，
      这个选项将不会产生效果。<literal>DEFAULT</>（非系统表的默认值）记录主键列
      （如果有）的旧值。<literal>USING INDEX</>记录被所提到的索引所覆盖的列的
      旧值，该索引必须是唯一索引、不是部分索引、不是可延迟索引并且只包括被标记成
      <literal>NOT NULL</>的列。<literal>FULL</>记录行中所有列的旧值。
      <literal>NOTHING</>不记录有关旧行的任何信息（这是系统表的默认值）。在所
      有情况下，除非至少有一个要被记录的列在新旧行版本之间发生变化，将不记录旧值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME</literal></term>
    <listitem>
     <para>
      <literal>RENAME</literal>形式更改一个表（或者一个索引、序列、视图、物化视图
      或者外部表）的名称、表中一个列的名称或者表的一个约束的名称。它对已存储的数据
      没有影响。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET SCHEMA</literal></term>
    <listitem>
     <para>
      这种形式把该表移动到另一个模式中。相关的该表列拥有的索引、约束和序列也会被
      移动。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
  </para>

  <para>
   所有除了<literal>RENAME</literal>、
   <literal>SET TABLESPACE</literal>和<literal>SET SCHEMA</literal>
   的动作可以被被整合到一个列表中以进行并行的修改。例如，可以在一个命
   令中增加一些列并且/或者修改一些列的类型。对于大型的表这是特别有用的，
   因为只需要对表做一趟操作。
  </para>

  <para>
   要使用<command>ALTER TABLE</>，你必须拥有该表。要更改一个表的
   模式或者表空间，你还必须拥有新模式或表空间上的
   <literal>CREATE</literal>特权。要把一个表作为一个父表的新子表加入，
   你必须也拥有该父表。要更改拥有者，你还必须
   是新拥有角色的一个直接或者间接成员，并且该角色必须具有该表的模式上的
   <literal>CREATE</literal>特权（这些限制强制修改拥有者不能做一些通过删除和重
   建表做不到的事情。不过，一个超级用户怎么都能更改任何表的所有权。）。
   要增加一个列、修改一列的类型或者使用<literal>OF</literal>子句，你还必
   须具有该数据类型上的<literal>USAGE</literal>特权。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

    <variablelist>

     <varlistentry>
      <term><replaceable class="PARAMETER">name</replaceable></term>
      <listitem>
       <para>
        要修改的一个现有表的名称（可以是模式限定的）。如果在表名前指定了
        <literal>ONLY</>，则只会修改该表。如果没有指定<literal>ONLY</>，
        该表及其所有后代表（如果有）都会被修改。可选地，在表名后面可以指定
        <literal>*</>用来显式地指示包括后代表。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">column_name</replaceable></term>
      <listitem>
       <para>
        一个新列或者现有列的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_column_name</replaceable></term>
      <listitem>
       <para>
        一个现有列的新名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_name</replaceable></term>
      <listitem>
       <para>
        该表的新名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">data_type</replaceable></term>
      <listitem>
       <para>
        一个新列的数据类型或者一个现有列的新数据类型。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">table_constraint</replaceable></term>
      <listitem>
       <para>
        该表的新的表约束。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">constraint_name</replaceable></term>
      <listitem>
       <para>
        一个新约束或者现有约束的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CASCADE</literal></term>
      <listitem>
       <para>
        自动删除依赖于被删除列或约束的对象（例如引用该列的视图）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>RESTRICT</literal></term>
      <listitem>
       <para>
        如果有任何依赖对象时拒绝删除列或者约束。这是默认行为。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">trigger_name</replaceable></term>
      <listitem>
       <para>
        一个要禁用或启用的触发器的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ALL</literal></term>
      <listitem>
       <para>
        禁用或者启用属于该表的所有触发器（如果有任何触发器是内部产生的约
        束触发器则需要超级用户特权，例如那些被用来实现外键约束或者可延迟
        一致性和排他约束的触发器）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>USER</literal></term>
      <listitem>
       <para>
        禁用或者启用属于该表的所有触发器，内部产生的约束触发器（例如那些
        被用来实现外键约束或者可延迟一致性和排他约束的触发器）除外。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">index_name</replaceable></term>
      <listitem>
       <para>
        一个现有索引的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">storage_parameter</replaceable></term>
      <listitem>
       <para>
        一个表存储参数的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">value</replaceable></term>
      <listitem>
       <para>
        一个表存储参数的新值。根据该参数，该值可能是一个数字或者一个词。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">parent_table</replaceable></term>
      <listitem>
       <para>
        要与这个表关联或者解除关联的父表。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_owner</replaceable></term>
      <listitem>
       <para>
        该表的新拥有者的用户名。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_tablespace</replaceable></term>
      <listitem>
       <para>
        要把该表移入其中的表空间的名称。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">new_schema</replaceable></term>
      <listitem>
       <para>
        要把该表移入其中的模式的名称。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
 </refsect1>

 <refsect1>
  <title>注解</title>

   <para>
    关键词<literal>COLUMN</literal>是噪声，可以被省略。
   </para>

   <para>
    在使用<literal>ADD COLUMN</literal>增加一列时，该表中所有现有的行
    会被用该列的默认值初始化（如果没有指定<literal>DEFAULT</>子句就是
    NULL）。如果没有<literal>DEFAULT</>子句，只会有一个元数据修改并且
    不会立刻做任何表数据的更改，而增加的 NULL 值会在读出时提供。
   </para>

   <para>
    增加一个带有<literal>DEFAULT</>子句的列或者更改一个现有列的类型将
    要求重写整个表及其索引。在更改一个现有列的类型时有一种例外：如果
    <literal>USING</>子句不更改列的内容并且旧类型在二进制上与新类型可
    强制转换或者是新类型上的一个未约束域，则不需要重写表。但是受影响列上
    的任何索引仍必须被重建。增加或者移除一个系统<literal>oid</>列也要求
    重写整个表。对于一个大型表，表和/或索引重建可能会消耗相当多的时间，
    并且会临时要求差不多两倍的磁盘空间。
   </para>

   <para>
    增加一个<literal>CHECK</>或者<literal>NOT NULL</>约束要求扫描
    表以验证现有行符合该约束。
   </para>

   <para>
    提供在一个<command>ALTER TABLE</>中指定多个更改的选项的主要
    原因就是多次表扫描或者重写可以因此被整合成一次。
   </para>

   <para>
    <literal>DROP COLUMN</literal>形式不会在物理上移除列，而只是简
    单地让它对 SQL 操作不可见。后续该表中的插入和更新操作将为该列存储
    一个空值。因此，删除一个列很快，但是它不会立刻减少表所占的磁盘空间，
    因为被删除列所占用的空间还没有被回收。随着现有列被更新，空间将被逐渐
    回收（这些说法不适用于删除系统<literal>oid</>列的情况，那时会立刻
    使用重写来完成）。
   </para>

   <para>
    要强制该表的一次立即重写，你可以使用
    <link linkend="SQL-VACUUM">VACUUM FULL</>、
    <xref linkend="SQL-CLUSTER">或者一种会强制重写的 ALTER TABLE 形式。
    这不会导致该表中出现语义可见的改变，但是会去除不再有用的数据。
   </para>

   <para>
    <literal>SET DATA TYPE</>的<literal>USING</literal>选项能实际指定
    涉及该列旧值的任何表达式。也就是说，它可以不但可以引用要被转换的列，
    还可以引用其他列。这允许使用<literal>SET DATA TYPE</>语法完成十分
    普遍的转换。由于这种灵活性，<literal>USING</literal>表达式不适合于列
    的默认值（如果有），结果可能不是一个默认值所需的常量表达式。这意味着
    在没有从旧类型到新类型的隐式或者赋值造型时，即便提供了一个
    <literal>USING</literal>子句，<literal>SET DATA TYPE</>还是可能无法
    转换默认值。在这种情况下，用<literal>DROP DEFAULT</>删除该默认值，
    执行<literal>ALTER TYPE</>并且接着使用<literal>SET DEFAULT</>增加
    一个合适的新默认值。类似的考虑也适用于涉及该列的索引和约束。
   </para>

   <para>
    如果一个表有任何后代表，所以如果不对后代做同样的操作，则不允许在父表
    中增加列、重命名列、更改列的类型或者重命名一个继承的约束。也就是说，
    <command>ALTER TABLE ONLY</command>将会被拒绝。这确保了后代
    总是具有匹配父表的列。
   </para>

   <para>
    只有当一个后代表的列不是从任何其他父表继承而来并且没有该列的独立定义时，
    一次递归的<literal>DROP COLUMN</literal>操作才会移除该列。一次非递归
    的<literal>DROP COLUMN</literal>（即
    <command>ALTER TABLE ONLY ... DROP COLUMN</command>）不会移除
    任何后代列，而是会把它们标记成独立定义的列。
   </para>

   <para>
    <literal>TRIGGER</>、<literal>CLUSTER</>、<literal>OWNER</>
    以及<literal>TABLESPACE</>动作不会递归到后代表。也就是说，它们的执行
    总像是指定了<literal>ONLY</>。增加一个约束只会在没有标记成
    <literal>NO INHERIT</>的<literal>CHECK</>约束上进行。
   </para>

   <para>
    不允许更改一个系统目录表的任何部分。
   </para>

   <para>
    可用参数的进一步描述请见<xref linkend="sql-createtable">。
    <xref linkend="ddl">中有关于继承的进一步信息。
   </para>
 </refsect1>

 <refsect1>
  <title>示例</title>

  <para>
   要向一个表增加一个类型为<type>varchar</type>的列：
<programlisting>
ALTER TABLE distributors ADD COLUMN address varchar(30);
</programlisting>
  </para>

  <para>
   要从表中删除一列：
<programlisting>
ALTER TABLE distributors DROP COLUMN address RESTRICT;
</programlisting>
  </para>

  <para>
   要在一个操作中更改两个现有列的类型：
<programlisting>
ALTER TABLE distributors
    ALTER COLUMN address TYPE varchar(80),
    ALTER COLUMN name TYPE varchar(100);
</programlisting>
  </para>

  <para>
   通过一个<literal>USING</literal>子句更改一个包含 UNIX 时间戳的整数列为
   <type>timestamp with time zone</type>：
<programlisting>
ALTER TABLE foo
    ALTER COLUMN foo_timestamp SET DATA TYPE timestamp with time zone
    USING
        timestamp with time zone 'epoch' + foo_timestamp * interval '1 second';
</programlisting>
  </para>

  <para>
   同样的，当该列具有一个不能自动造型成新数据类型的默认值表达式时：
<programlisting>
ALTER TABLE foo
    ALTER COLUMN foo_timestamp DROP DEFAULT,
    ALTER COLUMN foo_timestamp TYPE timestamp with time zone
    USING
        timestamp with time zone 'epoch' + foo_timestamp * interval '1 second',
    ALTER COLUMN foo_timestamp SET DEFAULT now();
</programlisting>
  </para>

  <para>
   To rename an existing column:
<programlisting>
ALTER TABLE distributors RENAME COLUMN address TO city;
</programlisting>
  </para>

  <para>
   重命名一个现有的表：
<programlisting>
ALTER TABLE distributors RENAME TO suppliers;
</programlisting>
  </para>

  <para>
   重命名一个现有的约束：
<programlisting>
ALTER TABLE distributors RENAME CONSTRAINT zipchk TO zip_check;
</programlisting>
  </para>

  <para>
   为一列增加一个非空约束：
<programlisting>
ALTER TABLE distributors ALTER COLUMN street SET NOT NULL;
</programlisting>
   从一列移除一个非空约束：
<programlisting>
ALTER TABLE distributors ALTER COLUMN street DROP NOT NULL;
</programlisting>
  </para>

  <para>
   向一个表及其所有子女增加一个检查约束：
<programlisting>
ALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5);
</programlisting>
  </para>

  <para>
   只向一个表增加一个检查约束（不为其子女增加）：
<programlisting>
ALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5) NO INHERIT;
</programlisting>
   （该检查约束也不会被未来的子女继承）。
  </para>

  <para>
   从一个表及其子女移除一个检查约束：
<programlisting>
ALTER TABLE distributors DROP CONSTRAINT zipchk;
</programlisting>
  </para>

  <para>
   只从一个表移除一个检查约束：
<programlisting>
ALTER TABLE ONLY distributors DROP CONSTRAINT zipchk;
</programlisting>
   （该检查约束仍为子女表保留在某个地方）。
  </para>

  <para>
   为一个表增加一个外键约束：
<programlisting>
ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address);
</programlisting>
  </para>

  <para>
   为一个表增加一个外键约束，并且尽量不要影响其他工作：
<programlisting>
ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address) NOT VALID;
ALTER TABLE distributors VALIDATE CONSTRAINT distfk;
</programlisting>
  </para>

  <para>
   为一个表增加一个（多列）唯一约束：
<programlisting>
ALTER TABLE distributors ADD CONSTRAINT dist_id_zipcode_key UNIQUE (dist_id, zipcode);
</programlisting>
  </para>

  <para>
   为一个表增加一个自动命名的主键约束，注意一个表只能拥有一个主键：
<programlisting>
ALTER TABLE distributors ADD PRIMARY KEY (dist_id);
</programlisting>
  </para>

  <para>
   把一个表移动到一个不同的表空间：
<programlisting>
ALTER TABLE distributors SET TABLESPACE fasttablespace;
</programlisting>
  </para>

  <para>
   把一个表移动到一个不同的模式：
<programlisting>
ALTER TABLE myschema.distributors SET SCHEMA yourschema;
</programlisting>
  </para>

  <para>
   重建一个主键约束，并且在重建索引期间不阻塞更新：
<programlisting>
CREATE UNIQUE INDEX CONCURRENTLY dist_id_temp_idx ON distributors (dist_id);
ALTER TABLE distributors DROP CONSTRAINT distributors_pkey,
    ADD CONSTRAINT distributors_pkey PRIMARY KEY USING INDEX dist_id_temp_idx;
</programlisting></para>

 </refsect1>

 <refsect1>
  <title>兼容性</title>

  <para>
   形式<literal>ADD</literal>（不带<literal>USING INDEX</literal>）、
   <literal>DROP</>、<literal>SET DEFAULT</>以及
   <literal>SET DATA TYPE</literal>（不带<literal>USING</literal>）符合 SQL 
   标准。其他形式是<productname>PostgreSQL</productname>对 SQL 标准的
   扩展。还有，在一个<command>ALTER TABLE</>命令中指定多于一个操作的能
   力也是一种扩展。
  </para>

  <para>
   <command>ALTER TABLE DROP COLUMN</>可以被用来删除一个表的唯一的
   列，从而留下一个零列的表。这是一种 SQL 的扩展，SQL 中不允许零列的表。
  </para>
 </refsect1>

 <refsect1>
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createtable"></member>
  </simplelist>
 </refsect1>
</refentry>

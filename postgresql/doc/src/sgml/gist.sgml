<!-- doc/src/sgml/gist.sgml -->

<chapter id="GiST">
<title>GiST 索引</title>

   <indexterm>
    <primary>index</primary>
    <secondary>GiST</secondary>
   </indexterm>

<sect1 id="gist-intro">
 <title>简介</title>

 <para>
   <acronym>GiST</acronym>表示通用搜索树。它是一种平衡的树结构的访问方法，
   它作为一种模板可用来实现任意索引模式。B 树、R 树和很多其他索引模式都可以在
   <acronym>GiST</acronym>中实现。
 </para>

 <para>
  <acronym>GiST</acronym>的一个优势是它允许自定义数据类型的领域专家使用合
  适的访问方法开发自定义数据类型，而不是让数据库专家来开发。
 </para>

  <para>
    这里的一些信息是来自加州大学伯克利分校的 GiST 索引项目
    <ulink url="http://gist.cs.berkeley.edu/">网站</ulink>
    和 Marcel Kornacker 的学位论文
    <ulink url="http://www.sai.msu.su/~megera/postgres/gist/papers/concurrency/access-methods-for-next-generation.pdf.gz">
    Access Methods for Next-Generation Database Systems</ulink>。
    <productname>PostgreSQL</productname>中的<acronym>GiST</acronym>实现主要由 Teodor Sigaev 和 Oleg Bartunov 维护，在他们的<ulink url="http://www.sai.msu.su/~megera/postgres/gist/">网站</ulink>上有更多信息。
  </para>

</sect1>

<sect1 id="gist-builtin-opclasses">
 <title>内建操作符类</title>

 <para>
  <productname>PostgreSQL</>核心发布中包括如<xref linkend="gist-builtin-opclasses-table">中所示的
  <acronym>GiST</acronym>操作符类（<xref linkend="contrib">中描述的一些
  可选模块提供了额外的<acronym>GiST</acronym>操作符类）。
 </para>

  <table id="gist-builtin-opclasses-table">
   <title>内建<acronym>GiST</acronym>操作符类</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>名称</entry>
      <entry>索引数据类型</entry>
      <entry>可索引操作符</entry>
      <entry>排序操作符</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>box_ops</></entry>
      <entry><type>box</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&amp;&gt;</>
       <literal>&amp;&lt;</>
       <literal>&amp;&lt;|</>
       <literal>&gt;&gt;</>
       <literal>&lt;&lt;</>
       <literal>&lt;&lt;|</>
       <literal>&lt;@</>
       <literal>@&gt;</>
       <literal>@</>
       <literal>|&amp;&gt;</>
       <literal>|&gt;&gt;</>
       <literal>~</>
       <literal>~=</>
      </entry>
      <entry>
      </entry>
     </row>
     <row>
      <entry><literal>circle_ops</></entry>
      <entry><type>circle</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&amp;&gt;</>
       <literal>&amp;&lt;</>
       <literal>&amp;&lt;|</>
       <literal>&gt;&gt;</>
       <literal>&lt;&lt;</>
       <literal>&lt;&lt;|</>
       <literal>&lt;@</>
       <literal>@&gt;</>
       <literal>@</>
       <literal>|&amp;&gt;</>
       <literal>|&gt;&gt;</>
       <literal>~</>
       <literal>~=</>
      </entry>
      <entry>
      </entry>
     </row>
     <row>
      <entry><literal>inet_ops</></entry>
      <entry><type>inet</>, <type>cidr</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&gt;&gt;</>
       <literal>&gt;&gt;=</>
       <literal>&gt;</>
       <literal>&gt;=</>
       <literal>&lt;&gt;</>
       <literal>&lt;&lt;</>
       <literal>&lt;&lt;=</>
       <literal>&lt;</>
       <literal>&lt;=</>
       <literal>=</>
      </entry>
      <entry>
      </entry>
     </row>
     <row>
      <entry><literal>point_ops</></entry>
      <entry><type>point</></entry>
      <entry>
       <literal>&gt;&gt;</>
       <literal>&gt;^</>
       <literal>&lt;&lt;</>
       <literal>&lt;@</>
       <literal>&lt;@</>
       <literal>&lt;@</>
       <literal>&lt;^</>
       <literal>~=</>
      </entry>
      <entry>
       <literal>&lt;-&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>poly_ops</></entry>
      <entry><type>polygon</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&amp;&gt;</>
       <literal>&amp;&lt;</>
       <literal>&amp;&lt;|</>
       <literal>&gt;&gt;</>
       <literal>&lt;&lt;</>
       <literal>&lt;&lt;|</>
       <literal>&lt;@</>
       <literal>@&gt;</>
       <literal>@</>
       <literal>|&amp;&gt;</>
       <literal>|&gt;&gt;</>
       <literal>~</>
       <literal>~=</>
      </entry>
      <entry>
      </entry>
     </row>
     <row>
      <entry><literal>range_ops</></entry>
      <entry>任何范围类型</entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&amp;&gt;</>
       <literal>&amp;&lt;</>
       <literal>&gt;&gt;</>
       <literal>&lt;&lt;</>
       <literal>&lt;@</>
       <literal>-|-</>
       <literal>=</>
       <literal>@&gt;</>
       <literal>@&gt;</>
      </entry>
      <entry>
      </entry>
     </row>
     <row>
      <entry><literal>tsquery_ops</></entry>
      <entry><type>tsquery</></entry>
      <entry>
       <literal>&lt;@</>
       <literal>@&gt;</>
      </entry>
      <entry>
      </entry>
     </row>
     <row>
      <entry><literal>tsvector_ops</></entry>
      <entry><type>tsvector</></entry>
      <entry>
       <literal>@@</>
      </entry>
      <entry>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 <para>
  由于历史原因，<literal>inet_ops</>操作符类不是类型<type>inet</>和<type>cidr</>
  的默认操作符类。要使用它，需要在<command>CREATE INDEX</>中指明操作符类的名
  称，例如
<programlisting>
CREATE INDEX ON my_table USING gist (my_inet_column inet_ops);
</programlisting>
 </para>

</sect1>

<sect1 id="gist-extensibility">
 <title>可扩展性</title>

 <para>
   在传统上，实现一种新的索引访问方法意味着很多困难的工作。开发者必须要理解数据库的内部工作，例如锁管理器和预写式日志。<acronym>GiST</acronym>接口有一个高层的抽象，要求访问方法实现者只实现要被访问的数据类型的语义。<acronym>GiST</acronym>层本身会处理并发、日志和对树结构的搜索。
 </para>

 <para>
   这种可扩展性不应该与其他标准搜索树对于它们所处理的数据上的可扩展性混淆。例如，<productname>PostgreSQL</productname>支持可扩展的 B 树和哈希索引。也就是说你可以用<productname>PostgreSQL</productname>在任何你想要的数据类型上构建一个 B 树或哈希。但是 B 树只支持范围谓词（<literal>&lt;</literal>、<literal>=</literal>、<literal>&gt;</literal>），而哈希索引支持等值查询。
 </para>

 <para>
   这样如果你用一个<productname>PostgreSQL</productname>的 B 树索引一个图像集合，你只能发出例如<quote>imagex 等于 imagey 吗</quote>、<quote>imagex 小于 imagey 吗</quote>以及<quote>imagex 大于 imagey 吗</quote>的查询。取决于你如何在这种上下文中定义<quote>等于</quote>、<quote>小于</quote>和<quote>大于</quote>，这可能会有用。但是，通过使用一个基于<acronym>GiST</acronym>的索引，你可以创建提问领域相关问题的方法，可能是<quote>找所有马的图片</quote>或者<quote>找所有曝光过度的图片</quote>。
 </para>

 <para>
   建立一个<acronym>GiST</acronym>访问方法并让其运行的所有工作是实现几个用户定义的方法，它们定义了树中键的行为。当然这些方法必须相当特别来支持特别的查询，但是对于所有标准查询（B 树、R 树等）它们相对直接。简而言之，<acronym>GiST</acronym>在可扩展性之上结合了通用型、代码重用和一个干净的接口。
  </para>

 <para>
   一个用于<acronym>GiST</acronym>的索引操作符类必须提供七个方法，并且还有第八个是可选的。索引的正确性由正确实现的<function>same</>、<function>consistent</>和<function>union</>方法保证，而索引的效率（尺寸和速度）将依赖于<function>penalty</>和<function>picksplit</>方法。剩下的两个基本方法是<function>compress</>和<function>decompress</>，它们允许一个索引能对内部数据使用一种不同于被其索引的数据的类型。叶子是被索引的数据类型，而其他树结点可以是任何 C 结构（但是你仍必须遵循<productname>PostgreSQL</>的数据类型规则，见用于可变尺寸数据的<literal>varlena</>）。如果树的内部数据类型在 SQL 层上存在，可以使用<command>CREATE OPERATOR CLASS</>命令的<literal>STORAGE</>选项。可选的第八个方法是<function>distance</>，如果操作符类希望支持有序扫描（最近邻搜索）就需要它。
 </para>

 <variablelist>
    <varlistentry>
     <term><function>consistent</></term>
     <listitem>
      <para>
       给定一个索引项<literal>p</>和一个查询值<literal>q</>，这个函数决定该索引项是否与该查询<quote>一致</>，就是说：是否该索引项表示的行使得谓词<quote><replaceable>indexed_column</>
       <replaceable>indexable_operator</> <literal>q</></quote>为真？对于一个叶子索引项，这等效于测试索引条件；而对于一个内部树结点，这会决定是否需要扫描由该树结点表示的索引子树。当结果为<literal>true</>时，还必须返回一个<literal>recheck</>标志。这指示该谓词一定为真或者只是可能为真。如果<literal>recheck</> = <literal>false</>那么该索引已经完全测试过该谓词条件，而如果<literal>recheck</> = <literal>true</>则该行只是一个候选匹配。在那种情况下，系统将根据实际的行值自动评估<replaceable>indexable_operator</>来看它是否真的是一个匹配。这允许<acronym>GiST</acronym>同时支持有损和无损的索引结构。
      </para>

      <para>
        该函数的<acronym>SQL</>声明必须看起来像这样：

<programlisting>
CREATE OR REPLACE FUNCTION my_consistent(internal, data_type, smallint, oid, internal)
RETURNS bool
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;
</programlisting>

        在 C 模块中匹配的代码则应该遵循这样的框架：

<programlisting>
Datum       my_consistent(PG_FUNCTION_ARGS);
PG_FUNCTION_INFO_V1(my_consistent);

Datum
my_consistent(PG_FUNCTION_ARGS)
{
    GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0);
    data_type  *query = PG_GETARG_DATA_TYPE_P(1);
    StrategyNumber strategy = (StrategyNumber) PG_GETARG_UINT16(2);
    /* Oid subtype = PG_GETARG_OID(3); */
    bool       *recheck = (bool *) PG_GETARG_POINTER(4);
    data_type  *key = DatumGetDataType(entry-&gt;key);
    bool        retval;

    /*
     * determine return value as a function of strategy, key and query.
     *
     * Use GIST_LEAF(entry) to know where you're called in the index tree,
     * which comes handy when supporting the = operator for example (you could
     * check for non empty union() in non-leaf nodes and equality in leaf
     * nodes).
     */

    *recheck = true;        /* or false if check is exact */

    PG_RETURN_BOOL(retval);
}
</programlisting>

       这里，<varname>key</>是该索引中的一个元素而<varname>query</>是在该索引中查找的值。<literal>StrategyNumber</>参数指示在你的操作符类中哪个操作符被应用 &mdash; 它匹配<command>CREATE OPERATOR CLASS</>命令中的操作符编号之一。取决于你已经在该类中包括了哪些操作符，<varname>query</>的数据类型会随操作符而变化，但是上述框架假设它不会变化。
      </para>

     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>union</></term>
     <listitem>
      <para>
       这个方法联合树中的信息。给定一组项，这个函数产生一个新的索引项，它表示所有给定的项。
      </para>

      <para>
        该函数的<acronym>SQL</>声明必须看起来像这样：

<programlisting>
CREATE OR REPLACE FUNCTION my_union(internal, internal)
RETURNS internal
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;
</programlisting>

        在 C 模块中匹配的代码则应该遵循这样的框架：

<programlisting>
Datum       my_union(PG_FUNCTION_ARGS);
PG_FUNCTION_INFO_V1(my_union);

Datum
my_union(PG_FUNCTION_ARGS)
{
    GistEntryVector *entryvec = (GistEntryVector *) PG_GETARG_POINTER(0);
    GISTENTRY  *ent = entryvec-&gt;vector;
    data_type  *out,
               *tmp,
               *old;
    int         numranges,
                i = 0;

    numranges = entryvec-&gt;n;
    tmp = DatumGetDataType(ent[0].key);
    out = tmp;

    if (numranges == 1)
    {
        out = data_type_deep_copy(tmp);

        PG_RETURN_DATA_TYPE_P(out);
    }

    for (i = 1; i &lt; numranges; i++)
    {
        old = out;
        tmp = DatumGetDataType(ent[i].key);
        out = my_union_implementation(out, tmp);
    }

    PG_RETURN_DATA_TYPE_P(out);
}
</programlisting>
      </para>

      <para>
        如你所见，在这个框架中我们处理一种数据类型<literal>union(X, Y, Z) = union(union(X, Y), Z)</>。通过在这个<acronym>GiST</>支持方法中实现正确的联合算法，支持不是这种情况的数据类型足够简单。
      </para>

      <para>
        <function>union</>实现函数应该返回一个新<function>palloc()</>的内存的指针。你不能只是返回输入的内容。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>compress</></term>
     <listitem>
      <para>
       把数据项转换成适合于一个索引页面中物理存储的格式。
      </para>

      <para>
        该函数的<acronym>SQL</>声明必须看起来像这样：

<programlisting>
CREATE OR REPLACE FUNCTION my_compress(internal)
RETURNS internal
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;
</programlisting>

        在 C 模块中匹配的代码则应该遵循这样的框架：

<programlisting>
Datum       my_compress(PG_FUNCTION_ARGS);
PG_FUNCTION_INFO_V1(my_compress);

Datum
my_compress(PG_FUNCTION_ARGS)
{
    GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0);
    GISTENTRY  *retval;

    if (entry-&gt;leafkey)
    {
        /* replace entry-&gt;key with a compressed version */
        compressed_data_type *compressed_data = palloc(sizeof(compressed_data_type));

        /* fill *compressed_data from entry-&gt;key ... */

        retval = palloc(sizeof(GISTENTRY));
        gistentryinit(*retval, PointerGetDatum(compressed_data),
                      entry-&gt;rel, entry-&gt;page, entry-&gt;offset, FALSE);
    }
    else
    {
        /* typically we needn't do anything with non-leaf entries */
        retval = entry;
    }

    PG_RETURN_POINTER(retval);
}
</programlisting>
      </para>

      <para>
       当然，为了压缩你的叶结点，你必须把<replaceable>compressed_data_type</>改编成你正在转换到的指定类型。
      </para>

      <para>
        取决于你的需要，你可能还需要在这里处理对<literal>NULL</>值的压缩，例如像<literal>gist_circle_compress</>那样存储<literal>(Datum) 0</>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>decompress</></term>
     <listitem>
      <para>
       <function>compress</function>方法的逆方法。将该数据项的索引表示转换成数据库能操纵的格式。
      </para>

      <para>
        该函数的<acronym>SQL</>声明必须看起来像这样：

<programlisting>
CREATE OR REPLACE FUNCTION my_decompress(internal)
RETURNS internal
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;
</programlisting>

        在 C 模块中匹配的代码则应该遵循这样的框架：

<programlisting>
Datum       my_decompress(PG_FUNCTION_ARGS);
PG_FUNCTION_INFO_V1(my_decompress);

Datum
my_decompress(PG_FUNCTION_ARGS)
{
    PG_RETURN_POINTER(PG_GETARG_POINTER(0));
}
</programlisting>

        上述框架适合于不需要解压的情况。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>penalty</></term>
     <listitem>
      <para>
       返回一个值，它指示在树的一个特定分支插入新项的<quote>代价</quote>。项将被插入到树中具有最小<function>penalty</function>的路径中。<function>penalty</function>返回的值应该为非负。如果一个赋值被返回，它将被当作零来处理。
      </para>

      <para>
        该函数的<acronym>SQL</>声明必须看起来像这样：

<programlisting>
CREATE OR REPLACE FUNCTION my_penalty(internal, internal, internal)
RETURNS internal
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;  -- in some cases penalty functions need not be strict
</programlisting>

        在 C 模块中匹配的代码则应该遵循这样的框架：

<programlisting>
Datum       my_penalty(PG_FUNCTION_ARGS);
PG_FUNCTION_INFO_V1(my_penalty);

Datum
my_penalty(PG_FUNCTION_ARGS)
{
    GISTENTRY  *origentry = (GISTENTRY *) PG_GETARG_POINTER(0);
    GISTENTRY  *newentry = (GISTENTRY *) PG_GETARG_POINTER(1);
    float      *penalty = (float *) PG_GETARG_POINTER(2);
    data_type  *orig = DatumGetDataType(origentry-&gt;key);
    data_type  *new = DatumGetDataType(newentry-&gt;key);

    *penalty = my_penalty_implementation(orig, new);
    PG_RETURN_POINTER(penalty);
}
</programlisting>
      </para>

      <para>
        <function>penalty</>函数对于索引的好性能是至关重要的。在插入时，当要选择在树中的哪个位置加入新项时，这个函数有助于决定应该顺着哪个分支进行。在查询时，索引越平衡，查找越快速。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>picksplit</></term>
     <listitem>
      <para>
       当需要一次索引页面分裂时，这个函数决定在该页面上哪些项会留在旧页面上，以及哪些项会移动到新页面上。
      </para>

      <para>
        该函数的<acronym>SQL</>声明必须看起来像这样：

<programlisting>
CREATE OR REPLACE FUNCTION my_picksplit(internal, internal)
RETURNS internal
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;
</programlisting>

        在 C 模块中匹配的代码则应该遵循这样的框架：

<programlisting>
Datum       my_picksplit(PG_FUNCTION_ARGS);
PG_FUNCTION_INFO_V1(my_picksplit);

Datum
my_picksplit(PG_FUNCTION_ARGS)
{
    GistEntryVector *entryvec = (GistEntryVector *) PG_GETARG_POINTER(0);
    OffsetNumber maxoff = entryvec-&gt;n - 1;
    GISTENTRY  *ent = entryvec-&gt;vector;
    GIST_SPLITVEC *v = (GIST_SPLITVEC *) PG_GETARG_POINTER(1);
    int         i,
                nbytes;
    OffsetNumber *left,
               *right;
    data_type  *tmp_union;
    data_type  *unionL;
    data_type  *unionR;
    GISTENTRY **raw_entryvec;

    maxoff = entryvec-&gt;n - 1;
    nbytes = (maxoff + 1) * sizeof(OffsetNumber);

    v-&gt;spl_left = (OffsetNumber *) palloc(nbytes);
    left = v-&gt;spl_left;
    v-&gt;spl_nleft = 0;

    v-&gt;spl_right = (OffsetNumber *) palloc(nbytes);
    right = v-&gt;spl_right;
    v-&gt;spl_nright = 0;

    unionL = NULL;
    unionR = NULL;

    /* Initialize the raw entry vector. */
    raw_entryvec = (GISTENTRY **) malloc(entryvec-&gt;n * sizeof(void *));
    for (i = FirstOffsetNumber; i &lt;= maxoff; i = OffsetNumberNext(i))
        raw_entryvec[i] = &amp;(entryvec-&gt;vector[i]);

    for (i = FirstOffsetNumber; i &lt;= maxoff; i = OffsetNumberNext(i))
    {
        int         real_index = raw_entryvec[i] - entryvec-&gt;vector;

        tmp_union = DatumGetDataType(entryvec-&gt;vector[real_index].key);
        Assert(tmp_union != NULL);

        /*
         * Choose where to put the index entries and update unionL and unionR
         * accordingly. Append the entries to either v_spl_left or
         * v_spl_right, and care about the counters.
         */

        if (my_choice_is_left(unionL, curl, unionR, curr))
        {
            if (unionL == NULL)
                unionL = tmp_union;
            else
                unionL = my_union_implementation(unionL, tmp_union);

            *left = real_index;
            ++left;
            ++(v-&gt;spl_nleft);
        }
        else
        {
            /*
             * Same on the right
             */
        }
    }

    v-&gt;spl_ldatum = DataTypeGetDatum(unionL);
    v-&gt;spl_rdatum = DataTypeGetDatum(unionR);
    PG_RETURN_POINTER(v);
}
</programlisting>
      </para>

      <para>
        和<function>penalty</>一样，<function>picksplit</>函数对于索引的好性能至关重要。设计合适的<function>penalty</>和<function>picksplit</>是实现一个好的<acronym>GiST</>索引中最大的挑战。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>same</></term>
     <listitem>
      <para>
       如果两个索引项相同则返回真，否则返回假。
      </para>

      <para>
        该函数的<acronym>SQL</>声明必须看起来像这样：

<programlisting>
CREATE OR REPLACE FUNCTION my_same(internal, internal, internal)
RETURNS internal
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;
</programlisting>

        在 C 模块中匹配的代码则应该遵循这样的框架：

<programlisting>
Datum       my_same(PG_FUNCTION_ARGS);
PG_FUNCTION_INFO_V1(my_same);

Datum
my_same(PG_FUNCTION_ARGS)
{
    prefix_range *v1 = PG_GETARG_PREFIX_RANGE_P(0);
    prefix_range *v2 = PG_GETARG_PREFIX_RANGE_P(1);
    bool       *result = (bool *) PG_GETARG_POINTER(2);

    *result = my_eq(v1, v2);
    PG_RETURN_POINTER(result);
}
</programlisting>

        由于历史原因，<function>same</>函数不只返回一个布尔结果。相反它必须把该标志存储在第三个参数指示的位置。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>distance</></term>
     <listitem>
      <para>
       给定一个索引项<literal>p</>和一个查询值<literal>q</>，这个函数决定两者之间的<quote>距离</>。如果操作符类包含任何排序操作符，就必须提供这个函数。一个使用排序操作符的查询将首先返回具有最小<quote>距离</>值的索引项，因此结果必须与操作符的语义一致。对于一个页索引项，结果只表示到索引项的距离；对于一个内部树结点，结果必须是到任何子项的最小距离。
      </para>

      <para>
        该函数的<acronym>SQL</>声明必须看起来像这样：

<programlisting>
CREATE OR REPLACE FUNCTION my_distance(internal, data_type, smallint, oid)
RETURNS float8
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT;
</programlisting>

        在 C 模块中匹配的代码则应该遵循这样的框架：

<programlisting>
Datum       my_distance(PG_FUNCTION_ARGS);
PG_FUNCTION_INFO_V1(my_distance);

Datum
my_distance(PG_FUNCTION_ARGS)
{
    GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0);
    data_type  *query = PG_GETARG_DATA_TYPE_P(1);
    StrategyNumber strategy = (StrategyNumber) PG_GETARG_UINT16(2);
    /* Oid subtype = PG_GETARG_OID(3); */
    data_type  *key = DatumGetDataType(entry-&gt;key);
    double      retval;

    /*
     * determine return value as a function of strategy, key and query.
     */

    PG_RETURN_FLOAT8(retval);
}
</programlisting>

       <function>distance</>函数的参数和<function>consistent</>函数的相同，不过不使用复核标志。到一个页索引项的距离必须总是被准确地判断，因为一旦元组被返回就没有办法对它们重排序。在决定到一个内部树结点距离时，允许有一些近似，只要结果绝不会超过任何子女的实际距离。因此，例如在几何应用中到一个边界框的距离通常是足够的。结果值可以是任意有限<type>float8</>值（无限和负无限在内部被用来处理空值等情况，因此我们不推荐<function>distance</>函数返回这些值）。
      </para>

     </listitem>
    </varlistentry>

  </variablelist>

  <para>
   所有的 GiST 支持方法通常都在一个短暂存在的内存上下文中被调用；就是说，每个元组被处理之后<varname>CurrentMemoryContext</>将被重置。因此没有必要操心释放你 palloc 的所有东西。但是，在某些情况下，一个支持方法在重复调用之间缓存数据是有用的。要这样做，将这些长期生存的数据分配在<literal>fcinfo-&gt;flinfo-&gt;fn_mcxt</>中，并且在<literal>fcinfo-&gt;flinfo-&gt;fn_extra</>中保持一个到它的指针。这种数据将在索引操作期间都存在（例如一次 GiST 索引扫描、索引构建或索引元组插入）。注意当替换一个<literal>fn_extra</>值时要释放之前的值，否则在操作期间该泄露会累积。
  </para>

</sect1>

<sect1 id="gist-implementation">
 <title>实现</title>

 <sect2 id="gist-buffering-build">
  <title>GiST 缓冲构建</title>
  <para>
   通过简单地插入所有元组来构建大型 GiST 索引很容易变得很慢，因为如果索引元组分散在索引中并且索引大到不足以放入在缓存中，插入操作需要执行很多随机 I/O。从版本 9.2 开始，PostgreSQL 支持一种更有效率的方法来基于缓冲构建 GiST 索引，这能显著地减少用于非排序数据集所需的随机 I/O 数量。对于排序好的数据集这种收益很小甚至不存在，因为在那时只有少数页面会接收新元组，并且那些页面能放在缓存中（即便整个索引不能放在缓存中）。
  </para>

  <para>
   但是，缓冲索引构建需要更频繁地调用<function>penalty</>函数，这会消耗更多额外的 CPU 资源。还有，在缓冲构建中使用的缓冲区需要临时磁盘空间，最多为结果索引的尺寸。缓冲也可能影响结果索引的质量，不管是正向还是负向。这种影响取决于多种因素，如输入数据的分布和操作符类的实现。
  </para>

  <para>
   默认情况下，当索引尺寸达到<xref linkend="guc-effective-cache-size">时，一个 GiST 索引构建会切换到缓冲方法。可以通过 CREATE INDEX 命令的<literal>BUFFERING</literal>参数手工打开或关闭这个特性。默认行为对大部分情况是好的，但是如果输入数据是排序好的，关闭缓冲特性可能会加速构建过程。
  </para>

 </sect2>
</sect1>

<sect1 id="gist-examples">
 <title>示例</title>

 <para>
  <productname>PostgreSQL</productname>源码包包括了多个用<acronym>GiST</acronym>实现的索引方法的例子。核心系统当前提供文本搜索支持（用于<type>tsvector</>和<type>tsquery</>的索引）以及用于一些内建几何数据类型（<filename>src/backend/access/gist/gistproc.c</>）的 R 树等效功能。下列<filename>contrib</>模块也包含<acronym>GiST</acronym>操作符类：

 <variablelist>
  <varlistentry>
   <term><filename>btree_gist</></term>
   <listitem>
    <para>多种数据类型的 B 树等效功能</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>cube</></term>
   <listitem>
    <para>多维立方体的索引</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>hstore</></term>
   <listitem>
    <para>存储键值对的模块</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>intarray</></term>
   <listitem>
    <para>一维 int4 值数组的 RD 树</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>ltree</></term>
   <listitem>
    <para>树状结构的索引</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>pg_trgm</></term>
   <listitem>
    <para>使用 trigram 匹配的文本相似性</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>seg</></term>
   <listitem>
    <para><quote>float ranges</quote>的索引</para>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>

</sect1>

</chapter>

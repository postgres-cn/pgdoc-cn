<!-- doc/src/sgml/gin.sgml -->

<chapter id="GIN">
<!--
<title>GIN Indexes</title>
-->
<title>GIN索引</title>

   <indexterm>
<!--
    <primary>index</primary>
-->
    <primary>索引</primary>
    <secondary>GIN</secondary>
   </indexterm>

<sect1 id="gin-intro">
<!--
 <title>Introduction</title>
-->
 <title>介绍</title>

 <para>
<!--
  <acronym>GIN</acronym> stands for Generalized Inverted Index.
  <acronym>GIN</acronym> is designed for handling cases where the items
  to be indexed are composite values, and the queries to be handled by
  the index need to search for element values that appear within
  the composite items.  For example, the items could be documents,
  and the queries could be searches for documents containing specific words.
-->
<acronym>GIN</acronym>的意思是通用倒排索引(Generalized Inverted Index)。
<acronym>GIN</acronym>被设计用于这样一种情况：被索引项是组合值，
而被索引处理的查询需要搜索出现在这些组合值中的元素值。
比如，项目可能是文档，查询可以是搜索包含多个特定单词的文档。
 </para>

 <para>
<!--
  We use the word <firstterm>item</> to refer to a composite value that
  is to be indexed, and the word <firstterm>key</> to refer to an element
  value.  <acronym>GIN</acronym> always stores and searches for keys,
  not item values per se.
-->
我们使用<firstterm>项目</>这个词指代被索引的组合值，<firstterm>键</>指代一个元素值。
<acronym>GIN</acronym>本身总是存储和搜索键，而不是项目值。

 </para>

 <para>
<!--
  A <acronym>GIN</acronym> index stores a set of (key, posting list) pairs,
  where a <firstterm>posting list</> is a set of row IDs in which the key
  occurs.  The same row ID can appear in multiple posting lists, since
  an item can contain more than one key.  Each key value is stored only
  once, so a <acronym>GIN</acronym> index is very compact for cases
  where the same key appears many times.
-->
<acronym>GIN</acronym>索引存储一系列(key, posting list)对，
这里的<firstterm>posting list</>是一组出现键的行ID。
每一个被索引的项目都可能包含多个键，因此同一个行ID可能会出现在多个posting list中。
每个键值只被存储一次，因此在相同的键出现在很多项目的情况下，<acronym>GIN</acronym>索引是非常紧凑的。
 </para>

 <para>
<!--
  <acronym>GIN</acronym> is generalized in the sense that the
  <acronym>GIN</acronym> access method code does not need to know the
  specific operations that it accelerates.
  Instead, it uses custom strategies defined for particular data types.
  The strategy defines how keys are extracted from indexed items and
  query conditions, and how to determine whether a row that contains
  some of the key values in a query actually satisfies the query.
-->
<acronym>GIN</acronym>索引之所以是通用的，是因为<acronym>GIN</acronym>
访问方法不需要了解它所加速的操作。
取而代之的是，它使用为特殊数据类型定义的定制策略。
策略定义了如何从被索引项目和查询条件中抽出键，以及如何决定包含了查询中一些键的一行是否确实满足查询条件。
 </para>

 <para>
<!--
  One advantage of <acronym>GIN</acronym> is that it allows the development
  of custom data types with the appropriate access methods, by
  an expert in the domain of the data type, rather than a database expert.
  This is much the same advantage as using <acronym>GiST</acronym>.
-->
<acronym>GIN</acronym>的一个优点是它允许由领域专家而不是由数据库专家来
开发附带适当的访问方法的自定义数据类型。
这一点与使用<acronym>GiST</acronym>很相似。
 </para>

 <para>
<!--
  The <acronym>GIN</acronym>
  implementation in <productname>PostgreSQL</productname> is primarily
  maintained by Teodor Sigaev and Oleg Bartunov. There is more
  information about <acronym>GIN</acronym> on their
  <ulink url="http://www.sai.msu.su/~megera/wiki/Gin">website</ulink>.
-->
<productname>PostgreSQL</productname>中的<acronym>GIN</acronym>
实现主要由 Teodor Sigaev 和 Oleg Bartunov 维护。
关于<acronym>GIN</acronym>的更多信息可以访问他们的
<ulink url="http://www.sai.msu.su/~megera/wiki/Gin">网站</ulink>。
 </para>
</sect1>

<sect1 id="gin-builtin-opclasses">
<!-- 
 <title>Built-in Operator Classes</title>
-->
 <title>内建操作符类</title>

<!-- 
 <para>
  The core <productname>PostgreSQL</> distribution
  includes the <acronym>GIN</acronym> operator classes shown in
  <xref linkend="gin-builtin-opclasses-table">.
  (Some of the optional modules described in <xref linkend="contrib">
  provide additional <acronym>GIN</acronym> operator classes.)
 </para>
-->
 <para>
内核<productname>PostgreSQL</>分配包括<xref linkend="gist-builtin-opclasses-table">
中显示的<acronym>GiST</acronym>操作符类。（<xref linkend="contrib">
中描述的一些可选模块提供了额外的<acronym>GiST</acronym>操作符类。）
 </para>

  <table id="gin-builtin-opclasses-table">
<!-- 
   <title>Built-in <acronym>GIN</acronym> Operator Classes</title>
-->
   <title>内建<acronym>GIN</acronym>操作符类</title>
   <tgroup cols="3">
    <thead>
     <row>
<!-- 
      <entry>Name</entry>
      <entry>Indexed Data Type</entry>
      <entry>Indexable Operators</entry> 
-->
      <entry>名字</entry>
      <entry>索引的数据类型</entry>
      <entry>可索引的操作符</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>_abstime_ops</></entry>
      <entry><type>abstime[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_bit_ops</></entry>
      <entry><type>bit[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_bool_ops</></entry>
      <entry><type>boolean[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_bpchar_ops</></entry>
      <entry><type>character[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_bytea_ops</></entry>
      <entry><type>bytea[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_char_ops</></entry>
      <entry><type>"char"[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_cidr_ops</></entry>
      <entry><type>cidr[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_date_ops</></entry>
      <entry><type>date[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_float4_ops</></entry>
      <entry><type>float4[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_float8_ops</></entry>
      <entry><type>float8[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_inet_ops</></entry>
      <entry><type>inet[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_int2_ops</></entry>
      <entry><type>smallint[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_int4_ops</></entry>
      <entry><type>integer[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_int8_ops</></entry>
      <entry><type>bigint[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_interval_ops</></entry>
      <entry><type>interval[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_macaddr_ops</></entry>
      <entry><type>macaddr[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_money_ops</></entry>
      <entry><type>money[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_name_ops</></entry>
      <entry><type>name[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_numeric_ops</></entry>
      <entry><type>numeric[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_oid_ops</></entry>
      <entry><type>oid[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_oidvector_ops</></entry>
      <entry><type>oidvector[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_reltime_ops</></entry>
      <entry><type>reltime[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_text_ops</></entry>
      <entry><type>text[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_time_ops</></entry>
      <entry><type>time[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_timestamp_ops</></entry>
      <entry><type>timestamp[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_timestamptz_ops</></entry>
      <entry><type>timestamp with time zone[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_timetz_ops</></entry>
      <entry><type>time with time zone[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_tinterval_ops</></entry>
      <entry><type>tinterval[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_varbit_ops</></entry>
      <entry><type>bit varying[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_varchar_ops</></entry>
      <entry><type>character varying[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>jsonb_ops</></entry>
      <entry><type>jsonb</></entry>
      <entry>
       <literal>?</>
       <literal>?&amp;</>
       <literal>?|</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>jsonb_path_ops</></entry>
      <entry><type>jsonb</></entry>
      <entry>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>tsvector_ops</></entry>
      <entry><type>tsvector</></entry>
      <entry>
       <literal>@@</>
       <literal>@@@</>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

<!-- 
 <para>
  Of the two operator classes for type <type>jsonb</>, <literal>jsonb_ops</>
  is the default.  <literal>jsonb_path_ops</> supports fewer operators but
  offers better performance for those operators.
  See <xref linkend="json-indexing"> for details.
 </para> 
-->
 <para>
两个操作符类：类型<type>jsonb</>和<literal>jsonb_ops</>是缺省的。
<literal>jsonb_path_ops</>支持少量的操作符，但是为那些操作符提供更好的性能。
参阅<xref linkend="json-indexing">获取细节。
 </para>
</sect1>

<sect1 id="gin-extensibility">
<!--
 <title>Extensibility</title>
-->
 <title>扩展性</title>

 <para>
<!--
   The <acronym>GIN</acronym> interface has a high level of abstraction,
   requiring the access method implementer only to implement the semantics of
   the data type being accessed.  The <acronym>GIN</acronym> layer itself
   takes care of concurrency, logging and searching the tree structure.
-->
<acronym>GIN</acronym>接口有一个高层次的抽象，仅要求实现被访问数据类型的语义即可。
<acronym>GIN</acronym>层自身可以处理并发操作、记录日志、搜索树结构。
 </para>

 <para>
<!--
   All it takes to get a <acronym>GIN</acronym> access method working is to
   implement a few user-defined methods, which define the behavior of
   keys in the tree and the relationships between keys, indexed items,
   and indexable queries. In short, <acronym>GIN</acronym> combines
   extensibility with generality, code reuse, and a clean interface.
-->
定义一个<acronym>GIN</acronym>访问方法所要做的所有事情就是实现几个用户定义的方法，
这些方法定义了键在树中的行为、键与键之间的关系、被索引的项目、能够使用索引的查询。
简而言之，<acronym>GIN</acronym>将扩展性与普遍性、代码重用、清晰的接口结合在了一起。
 </para>

 <para>
<!--
   There are three methods that an operator class for
   <acronym>GIN</acronym> must provide:
-->
有三个方法是<acronym>GIN</acronym>索引操作符类必须提供的：

 <variablelist>
    <varlistentry>
     <term><function>int compare(Datum a, Datum b)</></term>
     <listitem>
      <para>
<!--
       Compares two keys (not indexed items!) and returns an integer less than
       zero, zero, or greater than zero, indicating whether the first key is
       less than, equal to, or greater than the second.  Null keys are never
       passed to this function.
-->
比较两个键(不是被索引的项目!)然后返回一个小于、等于或大于零的值，分别表示第一个键小于、等于或大于第二个键。
NULL的键永远不会被传入这个函数。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>Datum *extractValue(Datum itemValue, int32 *nkeys,
        bool **nullFlags)</></term>
     <listitem>
      <para>
<!--
       Returns a palloc'd array of keys given an item to be indexed.  The
       number of returned keys must be stored into <literal>*nkeys</>.
       If any of the keys can be null, also palloc an array of
       <literal>*nkeys</> <type>bool</type> fields, store its address at
       <literal>*nullFlags</>, and set these null flags as needed.
       <literal>*nullFlags</> can be left <symbol>NULL</symbol> (its initial value)
       if all keys are non-null.
       The return value can be <symbol>NULL</symbol> if the item contains no keys.
-->
给定一个被索引的项目，返回一个对应的由palloc分配的键的数组。返回的键的数目必须存储在<literal>*nkeys</>中。
如果任何键可能为NULL，还要palloc一个包含<literal>*nkeys</>个<type>bool</type>元素的数组，
将地址存储到<literal>*nullFlags</>，并且根据需要设置NULL值。 
如果所有键都是非NULL的，可以让<literal>*nullFlags</>保持为<symbol>NULL</symbol>（它的初始值）。
如果输入的项目不包含任何键，返回值可以为<symbol>NULL</symbol>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>Datum *extractQuery(Datum query, int32 *nkeys,
        StrategyNumber n, bool **pmatch, Pointer **extra_data,
        bool **nullFlags, int32 *searchMode)</></term>
     <listitem>
      <para>
<!--
       Returns a palloc'd array of keys given a value to be queried; that is,
       <literal>query</> is the value on the right-hand side of an
       indexable operator whose left-hand side is the indexed column.
       <literal>n</> is the strategy number of the operator within the
       operator class (see <xref linkend="xindex-strategies">).
       Often, <function>extractQuery</> will need
       to consult <literal>n</> to determine the data type of
       <literal>query</> and the method it should use to extract key values.
       The number of returned keys must be stored into <literal>*nkeys</>.
       If any of the keys can be null, also palloc an array of
       <literal>*nkeys</> <type>bool</type> fields, store its address at
       <literal>*nullFlags</>, and set these null flags as needed.
       <literal>*nullFlags</> can be left <symbol>NULL</symbol> (its initial value)
       if all keys are non-null.
       The return value can be <symbol>NULL</symbol> if the <literal>query</> contains no keys.
-->
给定一个被查询的值，返回一个对应的palloc分配的键数组。
也就是说，<literal>query</>是可索引操作符右侧的值，而该操作符左侧是被索引的字段。
<literal>n</>是操作符类中的操作符策略号(参见<xref linkend="xindex-strategies">)。
通常，<function>extractQuery</>需要考量<literal>n</>来决定<literal>query</>的数据类型以及提取键值的方法。
返回的数组的元素个数必须存放在<literal>*nkeys</>中。
如果任何键可能为NULL，还要palloc一个包含<literal>*nkeys</>个<type>bool</type>元素的数组，
将地址存储到<literal>*nullFlags</>，并且根据需要设置NULL值。 
如果所有键都是非NULL的，可以让<literal>*nullFlags</>保持为<symbol>NULL</symbol>（它的初始值）。
如果<literal>query</>不包含任何键，返回值可以为<symbol>NULL</symbol>。
      </para>

      <para>
<!--
       <literal>searchMode</> is an output argument that allows
       <function>extractQuery</> to specify details about how the search
       will be done.
       If <literal>*searchMode</> is set to
       <literal>GIN_SEARCH_MODE_DEFAULT</> (which is the value it is
       initialized to before call), only items that match at least one of
       the returned keys are considered candidate matches.
       If <literal>*searchMode</> is set to
       <literal>GIN_SEARCH_MODE_INCLUDE_EMPTY</>, then in addition to items
       containing at least one matching key, items that contain no keys at
       all are considered candidate matches.  (This mode is useful for
       implementing is-subset-of operators, for example.)
       If <literal>*searchMode</> is set to <literal>GIN_SEARCH_MODE_ALL</>,
       then all non-null items in the index are considered candidate
       matches, whether they match any of the returned keys or not.  (This
       mode is much slower than the other two choices, since it requires
       scanning essentially the entire index, but it may be necessary to
       implement corner cases correctly.  An operator that needs this mode
       in most cases is probably not a good candidate for a GIN operator
       class.)
       The symbols to use for setting this mode are defined in
       <filename>access/gin.h</>.
-->
<literal>searchMode</>是一个输出参数，它允许<function>extractQuery</>指定一些关于如何执行搜索的细节。
如果<literal>*searchMode</>被设置成<literal>GIN_SEARCH_MODE_DEFAULT</>(这也是调用函数前它被初始化的值)，
只有匹配至少一个返回的键才能被认为是候选的匹配。
如果<literal>*searchMode</>被设置成<literal>GIN_SEARCH_MODE_INCLUDE_EMPTY</>，
除了包含至少一个匹配的键的项目，根本不包含任何键的项目也被视为候选的匹配。
（这个模式对于实现像“是否是子集”这样的操作是有用的）
如果<literal>*searchMode</>被设置成<literal>GIN_SEARCH_MODE_ALL</>，
索引中所有非NULL的项目都被认为是候选的匹配，不管它们是否匹配返回的键中的任何一个。
（这个模式比起其它两个要慢很多，因为它必须要扫描整个索引，但这对正确的实现边界条件可能是必要的。
一个需要这种模式的操作符在大多数时候很可能不是一个好的GIN操作符类的候选。）
用于设置这个模式的符号定义在<filename>access/gin.h</>中。
      </para>

      <para>
<!--
       <literal>pmatch</> is an output argument for use when partial match
       is supported.  To use it, <function>extractQuery</> must allocate
       an array of <literal>*nkeys</> booleans and store its address at
       <literal>*pmatch</>.  Each element of the array should be set to TRUE
       if the corresponding key requires partial match, FALSE if not.
       If <literal>*pmatch</> is set to <symbol>NULL</symbol> then GIN assumes partial match
       is not required.  The variable is initialized to <symbol>NULL</symbol> before call,
       so this argument can simply be ignored by operator classes that do
       not support partial match.
-->
<literal>pmatch</>是在部分匹配时需要用到的一个输出参数。
如果使用它，<function>extractQuery</>必须分配一个有<literal>*nkeys</>个布尔值的数组，
并把数组地址保存到<literal>*pmatch</>。
数组的每个元素应该被设置为：TRUE，如果相应的键需要部分匹配；或者FALSE，如果不是。
如果<literal>*pmatch</>被设置为<symbol>NULL</symbol>，GIN假设不需要部分匹配。
在函数调用前这个值被初始化成了<symbol>NULL</symbol>，
因此，对于不支持部分匹配的操作符类，可以简单的忽略这个参数。
      </para>

      <para>
<!--
       <literal>extra_data</> is an output argument that allows
       <function>extractQuery</> to pass additional data to the
       <function>consistent</> and <function>comparePartial</> methods.
       To use it, <function>extractQuery</> must allocate
       an array of <literal>*nkeys</> Pointers and store its address at
       <literal>*extra_data</>, then store whatever it wants to into the
       individual pointers.  The variable is initialized to <symbol>NULL</symbol> before
       call, so this argument can simply be ignored by operator classes that
       do not require extra data.  If <literal>*extra_data</> is set, the
       whole array is passed to the <function>consistent</> method, and
       the appropriate element to the <function>comparePartial</> method.
-->
<literal>extra_data</>是一个允许<function>extractQuery</>传递额外数据给<function>consistent</>
和<function>comparePartial</>的输出参数。
如果使用它，<function>extractQuery</>必须分配一个包含<literal>*nkeys</>个Pointer元素的数组，
并把数组地址保存到<literal>*extra_data</>，然后把它想附加的东西存储到各个独立的指针中。
在函数调用前这个值被初始化成了<symbol>NULL</symbol>，
因此，对于不需要附加数据的操作符类，可以简单的忽略这个参数。
如果<literal>*extra_data</>被设置了，那么整个数组会被传给<function>consistent</>方法，
适当的元素会被传给<function>comparePartial</>方法。
      </para>

     </listitem>
    </varlistentry>
  </variablelist>

<!-- 
  An operator class must also provide a function to check if an indexed item
  matches the query. It comes in two flavors, a boolean <function>consistent</>
  function, and a ternary <function>triConsistent</> function.
  <function>triConsistent</> covers the functionality of both, so providing
  triConsistent alone is sufficient. However, if the boolean variant is
  significantly cheaper to calculate, it can be advantageous to provide both.
  If only the boolean variant is provided, some optimizations that depend on
  refuting index items before fetching all the keys are disabled.
-->
一个操作符类必须也提供一个函数，检查索引了的条目是否匹配查询。它有两种方式，
一个布尔<function>consistent</>函数和一个三元<function>triConsistent</>函数。
<function>triConsistent</>包含两种功能，所以单独提供triConsistent就足够了。
不过，如果布尔变体计算的成本显著更低，那么提供两者是有利的。
如果只提供了布尔变体，那么禁用一些依赖于在抓取所有秘钥之前驳斥索引条目的最优化。
  <variablelist>
    <varlistentry>
     <term><function>bool consistent(bool check[], StrategyNumber n, Datum query,
        int32 nkeys, Pointer extra_data[], bool *recheck,
        Datum queryKeys[], bool nullFlags[])</></term>
     <listitem>
      <para>
<!--
       Returns TRUE if an indexed item satisfies the query operator with
       strategy number <literal>n</> (or might satisfy it, if the recheck
       indication is returned).  This function does not have direct access
       to the indexed item's value, since <acronym>GIN</acronym> does not
       store items explicitly.  Rather, what is available is knowledge
       about which key values extracted from the query appear in a given
       indexed item.  The <literal>check</> array has length
       <literal>nkeys</>, which is the same as the number of keys previously
       returned by <function>extractQuery</> for this <literal>query</> datum.
       Each element of the
       <literal>check</> array is TRUE if the indexed item contains the
       corresponding query key, i.e., if (check[i] == TRUE) the i-th key of the
       <function>extractQuery</> result array is present in the indexed item.
       The original <literal>query</> datum is
       passed in case the <function>consistent</> method needs to consult it,
       and so are the <literal>queryKeys[]</> and <literal>nullFlags[]</>
       arrays previously returned by <function>extractQuery</>.
       <literal>extra_data</> is the extra-data array returned by
       <function>extractQuery</>, or <symbol>NULL</symbol> if none.
-->
如果被索引项目满足策略号为<literal>n</>的查询操作符（或可能满足，如果recheck指示符被返回了的话）返回TRUE。
这个函数并不直接访问被索引项目的值，因为<acronym>GIN</acronym>并没有精确的把项目保存下来，
但是需要知道哪些从查询中提取的键值出现在给定的索引项目中。
<literal>check</>数组的长度是<literal>nkeys</>，这与先前针对这个<literal>query</>调用的<function>extractQuery</>函数返回的键值的数目相同。
如果被索引项目包含了相应的查询键，<literal>check</>数组中对应的元素值就是TRUE。
比如，如果(check[i] == TRUE)，那么意味着<function>extractQuery</>的结果数组的第i个键出现在了索引项目中。
考虑到<function>consistent</>可能会用到，原始的<literal>query</>也被作为参数传入进来。
与此相同的还有<function>extractQuery</>函数返回的<literal>queryKeys[]</>和<literal>nullFlags[]</>。
<literal>extra_data</>是<function>extractQuery</>函数返回的额外数据数组，如果没有的话就是<symbol>NULL</symbol>。 
      </para>

      <para>
<!--
       When <function>extractQuery</> returns a null key in
       <literal>queryKeys[]</>, the corresponding <literal>check[]</> element
       is TRUE if the indexed item contains a null key; that is, the
       semantics of <literal>check[]</> are like <literal>IS NOT DISTINCT
       FROM</>.  The <function>consistent</> function can examine the
       corresponding <literal>nullFlags[]</> element if it needs to tell
       the difference between a regular value match and a null match.
-->
当<function>extractQuery</>在<literal>queryKeys[]</>中返回一个NULL的键值，
如果被索引项目包含NULL键值，相应的<literal>check[]</>中的元素是TRUE。
也就是说，<literal>check[]</>的语义很像<literal>IS NOT DISTINCT FROM</>。
如果需要知道是通常值匹配还是NULL匹配，<function>consistent</>函数可以检查相应的<literal>nullFlags[]</>元素。
      </para>

      <para>
<!--
       On success, <literal>*recheck</> should be set to TRUE if the heap
       tuple needs to be rechecked against the query operator, or FALSE if
       the index test is exact.  That is, a FALSE return value guarantees
       that the heap tuple does not match the query; a TRUE return value with
       <literal>*recheck</> set to FALSE guarantees that the heap tuple does
       match the query; and a TRUE return value with
       <literal>*recheck</> set to TRUE means that the heap tuple might match
       the query, so it needs to be fetched and rechecked by evaluating the
       query operator directly against the originally indexed item.
-->
成功执行后，如果对这个元组需要执行查询操作符是否匹配的再检查，<literal>*recheck</>需要被设置为TRUE，
如果索引测试已经是精确的了，则设为FALSE。
也就是说，FALSE的返回值确保堆元组不匹配这个查询；
伴随<literal>*recheck</>为FASLE的TRUE的返回值确保堆元组匹配这个查询；
伴随<literal>*recheck</>为TRUE的TRUE的返回值意味着堆元组可能匹配这个查询，
因此需要取得这个堆元组，并通过直接针对原始的被索引项目评估查询操作符的方式进行再检查。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>GinTernaryValue triConsistent(GinTernaryValue check[], StrategyNumber n, Datum query,
        int32 nkeys, Pointer extra_data[],
        Datum queryKeys[], bool nullFlags[])</></term>
     <listitem>
<!-- 
      <para>
       <function>triConsistent</> is similar to <function>consistent</>,
       but instead of a boolean <literal>check[]</>, there are three possible
       values for each key: <literal>GIN_TRUE</>, <literal>GIN_FALSE</> and
       <literal>GIN_MAYBE</>. <literal>GIN_FALSE</> and <literal>GIN_TRUE</>
       have the same meaning as regular boolean values.
       <literal>GIN_MAYBE</> means that the presence of that key is not known.
       When <literal>GIN_MAYBE</> values are present, the function should only
       return GIN_TRUE if the item matches whether or not the index item
       contains the corresponding query keys. Likewise, the function must
       return GIN_FALSE only if the item does not match, whether or not it
       contains the GIN_MAYBE keys. If the result depends on the GIN_MAYBE
       entries, i.e. the match cannot be confirmed or refuted based on the
       known query keys, the function must return GIN_MAYBE.
      </para>
-->
<para>
<function>triConsistent</>类似于<function>consistent</>，
但是不是一个布尔<literal>check[]</>，对于每一个键有三个可能的值：
<literal>GIN_TRUE</>、<literal>GIN_FALSE</>和<literal>GIN_MAYBE</>。
<literal>GIN_FALSE</>和<literal>GIN_TRUE</>作为普通的布尔值有相同的含义。
<literal>GIN_MAYBE</>意味着该键的存在是未知的。当出现<literal>GIN_MAYBE</>值时，
如果该条目匹配，则该函数都应该只返回GIN_TRUE，不管索引条目是否包含对应的查询关键字。
类似的，该函数必须只在该条目不匹配时返回GIN_FALSE，不管它是否包含GIN_MAYBE关键字。
如果结果依赖于GIN_MAYBE项，也就是，该匹配不能确认或驳回了基于已知的查询关键字，
那么该函数必须返回GIN_MAYBE。
</para>
<!-- 
      <para>
       When there are no GIN_MAYBE values in the <literal>check</> vector,
       <literal>GIN_MAYBE</> return value is equivalent of setting
       <literal>recheck</> flag in the boolean <function>consistent</> function.
      </para>
-->
<para>
当<literal>check</>矢量中没有GIN_MAYBE值时，<literal>GIN_MAYBE</>
返回值等价于在布尔<function>consistent</>函数中设置<literal>recheck</>标志。
</para>
     </listitem>
    </varlistentry>
  </variablelist>

<!--
  Optionally, an operator class for <acronym>GIN</acronym> can supply the
  following method:
-->
<acronym>GIN</acronym>操作符类可以可选地提供下列方法：
  <variablelist>
    <varlistentry>
     <term><function>int comparePartial(Datum partial_key, Datum key, StrategyNumber n,
                              Pointer extra_data)</></term>
     <listitem>
      <para>
<!--
       Compare a partial-match query key to an index key.  Returns an integer
       whose sign indicates the result: less than zero means the index key
       does not match the query, but the index scan should continue; zero
       means that the index key does match the query; greater than zero
       indicates that the index scan should stop because no more matches
       are possible.  The strategy number <literal>n</> of the operator
       that generated the partial match query is provided, in case its
       semantics are needed to determine when to end the scan.  Also,
       <literal>extra_data</> is the corresponding element of the extra-data
       array made by <function>extractQuery</>, or <symbol>NULL</symbol> if none.
       Null keys are never passed to this function.
-->
比较一个部分匹配查询键和一个索引键。
返回一个整形值，它个符号代表了不同的含义：小于0意味着索引键不匹配查询，但是索引扫描应该继续；
0意味着索引键匹配查询；大于0指示应该终止索引扫描，因为不可能再有更多的匹配。
这里提供了生成部分一致查询的操作符的策略号<literal>n</>，以防需要用它的语义去决定何时终止扫描。
同样的，<literal>extra_data</>是<function>extractQuery</>生成的额外数据数组中的相应元素，或者为NULL，如果没有的话。
NULL的键永远不会被传入这个函数。
      </para>
     </listitem>
    </varlistentry>
  </variablelist>
 </para>

 <para>
<!--
  To support <quote>partial match</> queries, an operator class must
  provide the <function>comparePartial</> method, and its
  <function>extractQuery</> method must set the <literal>pmatch</>
  parameter when a partial-match query is encountered.  See
  <xref linkend="gin-partial-match"> for details.
-->
为了支持<quote>部分匹配</>查询，一个操作符类必须提供<function>comparePartial</>方法，
并且当遇到部分匹配查询时，它的<function>extractQuery</>方法必须设置<literal>pmatch</>参数。
详细请参考<xref linkend="gin-partial-match">。
 </para>

 <para>
<!--
  The actual data types of the various <literal>Datum</> values mentioned
  above vary depending on the operator class.  The item values passed to
  <function>extractValue</> are always of the operator class's input type, and
  all key values must be of the class's <literal>STORAGE</> type.  The type of
  the <literal>query</> argument passed to <function>extractQuery</>,
  <function>consistent</> and <function>triConsistent</> is whatever is
  specified as the right-hand input
  type of the class member operator identified by the strategy number.
  This need not be the same as the item type, so long as key values of the
  correct type can be extracted from it.
-->
上面的各种<literal>Datum</>值的实际数据类型根据操作符类的不同而不同。
传入到<function>extractValue</>中的项目值总是操作符类的输入类型，
所有的键值类型必须这个类的<literal>STORAGE</>类型。
传入到<function>extractQuery</>、<function>consistent</>和
<function>consistent</>的<literal>query</>参数的类型
是由策略号识别的类成员操作符的右操作数的输入类型。
它不需要和项目类型相同，只要可以从中抽取出正确类型的键值。
 </para>

</sect1>

<sect1 id="gin-implementation">
<!--
 <title>Implementation</title>
-->
 <title>实现</title>

 <para>
<!--
  Internally, a <acronym>GIN</acronym> index contains a B-tree index
  constructed over keys, where each key is an element of one or more indexed
  items (a member of an array, for example) and where each tuple in a leaf
  page contains either a pointer to a B-tree of heap pointers (a
  <quote>posting tree</>), or a simple list of heap pointers (a <quote>posting
  list</>) when the list is small enough to fit into a single index tuple along
  with the key value.
-->
在内部，<acronym>GIN</acronym>索引包含一个在键上构造的B-tree索引，
每个键是一个或多个被索引项目的一个元素(比如，一个数组的一个成员) 。
并且叶子页上每个元组包含了或者堆指针的B-tree的一个指针（一个<quote>posting tree</>），
或者，当列表小到足以和键值一起存储到一个索引元组中时，则是堆指针的一个简单列表（一个<quote>posting list</>），

 </para>

 <para>
<!--
  As of <productname>PostgreSQL</productname> 9.1, null key values can be
  included in the index.  Also, placeholder nulls are included in the index
  for indexed items that are null or contain no keys according to
  <function>extractValue</>.  This allows searches that should find empty
  items to do so.
-->
从<productname>PostgreSQL</productname> 9.1开始，NULL的键值可以被包含到索引里。
对NULL的或根据<function>extractValue</>不包含任何键的被索引项，占位符null被包含到了索引中。
这就允许应该找到空项目的搜索可以执行。
 </para>

 <para>
<!--
  Multicolumn <acronym>GIN</acronym> indexes are implemented by building
  a single B-tree over composite values (column number, key value).  The
  key values for different columns can be of different types.
-->
多列<acronym>GIN</acronym>索引通过在组合值（列号，键值）上建立一个单个的B-tree实现。
不同列的键值可以有不同的类型。
 </para>

 <sect2 id="gin-fast-update">
<!--
  <title>GIN Fast Update Technique</title>
-->
  <title>GIN快速更新技术</title>

  <para>
<!--
   Updating a <acronym>GIN</acronym> index tends to be slow because of the
   intrinsic nature of inverted indexes: inserting or updating one heap row
   can cause many inserts into the index (one for each key extracted
   from the indexed item). As of <productname>PostgreSQL</productname> 8.4,
   <acronym>GIN</> is capable of postponing much of this work by inserting
   new tuples into a temporary, unsorted list of pending entries.
   When the table is vacuumed, or if the pending list becomes too large
   (larger than <xref linkend="guc-work-mem">), the entries are moved to the
   main <acronym>GIN</acronym> data structure using the same bulk insert
   techniques used during initial index creation.  This greatly improves
   <acronym>GIN</acronym> index update speed, even counting the additional
   vacuum overhead.  Moreover the overhead work can be done by a background
   process instead of in foreground query processing.
-->
由于倒排索引的本质特性，更新一个<acronym>GIN</acronym>索引可能会比较慢。
插入或更新一个堆行可能导致许多往索引的插入（从被索引项目中抽取出的每一个键一个）。
从<productname>PostgreSQL</productname> 8.4开始，
<acronym>GIN</>可以通过插入新的元组到一个临时的，待处理实体的未排序列表，来推迟很多这样的工作。
当表被vacuumed，或者如果待处理实体的列表太大了（大于<xref linkend="guc-work-mem">），
这些实体被使用和初始索引创建时用到的相同的bulk插入方法，移动到主要的<acronym>GIN</acronym>数据结构。
即使把额外的vacuum开销算进去，这也大大提升了<acronym>GIN</acronym>索引更新的速度。
而且，这种额外开销的工作可以通过后台进程而不是前端查询来处理。
  </para>

  <para>
<!--
   The main disadvantage of this approach is that searches must scan the list
   of pending entries in addition to searching the regular index, and so
   a large list of pending entries will slow searches significantly.
   Another disadvantage is that, while most updates are fast, an update
   that causes the pending list to become <quote>too large</> will incur an
   immediate cleanup cycle and thus be much slower than other updates.
   Proper use of autovacuum can minimize both of these problems.
-->
这种方法的主要缺点在于搜索时除了常规的索引还必须要扫描待处理实体的列表。
因此，大的待处理实体的列表会显著的拖慢搜索。
另一个缺点是，虽然大多数更新很快，一个导致待处理列表(pending list)变得<quote>太大</>的更新将引发一个立即的清理周期，
并因此比起其它更新会非常慢。
恰当的使用autovacuum可以最小化这两个问题。 
  </para>

  <para>
<!--
   If consistent response time is more important than update speed,
   use of pending entries can be disabled by turning off the
   <literal>FASTUPDATE</literal> storage parameter for a
   <acronym>GIN</acronym> index.  See <xref linkend="sql-createindex">
   for details.
-->
如果一致的响应时间比更新速度更重要，可以通过把<acronym>GIN</acronym>
索引的存储参数<literal>FASTUPDATE</literal>设置为off而不使用待处理实体。
详细请参考<xref linkend="sql-createindex">。
  </para>
 </sect2>

 <sect2 id="gin-partial-match">
<!--
  <title>Partial Match Algorithm</title>
-->
  <title>部分匹配算法</title>

  <para>
<!--
   GIN can support <quote>partial match</> queries, in which the query
   does not determine an exact match for one or more keys, but the possible
   matches fall within a reasonably narrow range of key values (within the
   key sorting order determined by the <function>compare</> support method).
   The <function>extractQuery</> method, instead of returning a key value
   to be matched exactly, returns a key value that is the lower bound of
   the range to be searched, and sets the <literal>pmatch</> flag true.
   The key range is then scanned using the <function>comparePartial</>
   method.  <function>comparePartial</> must return zero for a matching
   index key, less than zero for a non-match that is still within the range
   to be searched, or greater than zero if the index key is past the range
   that could match.
-->
GIN可以支持<quote>部分匹配</>查询。即：查询并不决定单个或多个键的一个精确的匹配，
而是，可能的匹配落在一个合理的狭窄键值范围内（根据<function>compare</>支持函数决定的键值排序顺序）。
此时，<function>extractQuery</>方法并不返回一个用于精确匹配的键值，取而代之的是，
返回一个要被搜索的键值范围的下边界，并且设置<literal>pmatch</>为true。
然后，这个键值范围被使用<function>comparePartial</>进行扫描。
<function>comparePartial</>必须为一个相匹配的索引键返回0，不匹配但依然在被搜索范围内时返回小于0的值，对超过可以匹配的范围的索引键则返回大于0的值。
  </para>
 </sect2>

</sect1>

<sect1 id="gin-tips">
<!--
<title>GIN Tips and Tricks</title>
-->
<title>GIN提示与技巧</title>

 <variablelist>
  <varlistentry>
<!--
   <term>Create vs. insert</term>
-->
   <term>创建 vs 插入</term>
   <listitem>
    <para>
<!--
     Insertion into a <acronym>GIN</acronym> index can be slow
     due to the likelihood of many keys being inserted for each item.
     So, for bulk insertions into a table it is advisable to drop the GIN
     index and recreate it after finishing bulk insertion.
-->
由于可能要为每个项目插入很多键，所以<acronym>GIN</acronym>索引的插入可能比较慢。
对于向表中大量插入的操作，我们建议先删除GIN索引，在完成插入之后再重建它。
    </para>

    <para>
<!--
     As of <productname>PostgreSQL</productname> 8.4, this advice is less
     necessary since delayed indexing is used (see <xref
     linkend="gin-fast-update"> for details).  But for very large updates
     it may still be best to drop and recreate the index.
-->
由于从<productname>PostgreSQL</productname> 8.4开始可以使用延迟索引了，这个建议已经没有那么必要了。
（详细请参考<xref linkend="gin-fast-update">。）
但是，对于非常大量的更新，最好还是先删除，而后再重建索引。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><xref linkend="guc-maintenance-work-mem"></term>
   <listitem>
    <para>
<!--
     Build time for a <acronym>GIN</acronym> index is very sensitive to
     the <varname>maintenance_work_mem</> setting; it doesn't pay to
     skimp on work memory during index creation.
-->
<acronym>GIN</acronym>索引的构建时间对<varname>maintenance_work_mem</>的设置非常敏感。
它没有为在索引创建期间少使用工作内存做出努力。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><xref linkend="guc-work-mem"></term>
   <listitem>
    <para>
<!--
     During a series of insertions into an existing <acronym>GIN</acronym>
     index that has <literal>FASTUPDATE</> enabled, the system will clean up
     the pending-entry list whenever the list grows larger than
     <varname>work_mem</>.  To avoid fluctuations in observed response time,
     it's desirable to have pending-list cleanup occur in the background
     (i.e., via autovacuum).  Foreground cleanup operations can be avoided by
     increasing <varname>work_mem</> or making autovacuum more aggressive.
     However, enlarging <varname>work_mem</> means that if a foreground
     cleanup does occur, it will take even longer.
-->
在一系列往已有的启用了<literal>FASTUPDATE</>的<acronym>GIN</acronym>索引的插入操作期间，
只要待处理实体列表的大小超过了<varname>work_mem</>，系统就会清理这个列表。
为了避免可观察到的响应时间的大起大落，让待处理实体列表在后台被清理是比较合适的（比如通过autovacuum）。
前台清理操作可以通过增加<varname>work_mem</>或者更加激进的autovacuum来避免。
然而，扩大<varname>work_mem</>意味着如果发生了前台清理，那么它的执行时间将更长。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><xref linkend="guc-gin-fuzzy-search-limit"></term>
   <listitem>
    <para>
<!--
     The primary goal of developing <acronym>GIN</acronym> indexes was
     to create support for highly scalable full-text search in
     <productname>PostgreSQL</productname>, and there are often situations when
     a full-text search returns a very large set of results.  Moreover, this
     often happens when the query contains very frequent words, so that the
     large result set is not even useful.  Since reading many
     tuples from the disk and sorting them could take a lot of time, this is
     unacceptable for production.  (Note that the index search itself is very
     fast.)
-->
开发<acronym>GIN</acronym>索引的主要目的是为了让<productname>PostgreSQL</productname>
支持高度可伸缩的全文索引，并且常常会遇见全文索引返回海量结果的情形。
而且，这经常发生在查询高频词的时候，因而得到的结果集没什么用处。
因为从磁盘读取大量记录并对其进行排序会消耗大量资源，这在产品环境下是不能接受的(注意，索引搜索本身是很快的)。
    </para>
    <para>
<!--
     To facilitate controlled execution of such queries,
     <acronym>GIN</acronym> has a configurable soft upper limit on the
     number of rows returned: the
     <varname>gin_fuzzy_search_limit</varname> configuration parameter.
     It is set to 0 (meaning no limit) by default.
     If a non-zero limit is set, then the returned set is a subset of
     the whole result set, chosen at random.
-->
为了易于控制这种情况，<acronym>GIN</acronym>有一个可配置的返回结果行数的软上限配置参数
<varname>gin_fuzzy_search_limit</varname>。
缺省值 0 表示没有限制。如果设置了非零值，那么返回的结果就是从完整结果集中随机选择的一部分。
    </para>
    <para>
<!--
     <quote>Soft</quote> means that the actual number of returned results
     could differ somewhat from the specified limit, depending on the query
     and the quality of the system's random number generator.
-->
<quote>软</quote>的意思是实际返回的结果集大小可能与指定值稍有出入，具体取决于查询以及系统的随机数发生器的品质。
    </para>
    <para>
<!--
     From experience, values in the thousands (e.g., 5000 &mdash; 20000)
     work well.
-->
经验上，数千的值(比如5000 &mdash; 20000)可以工作得很好。
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

</sect1>

<sect1 id="gin-limit">
<!--
 <title>Limitations</title>
-->
 <title>限制</title>

 <para>
<!--
  <acronym>GIN</acronym> assumes that indexable operators are strict.  This
  means that <function>extractValue</> will not be called at all on a null
  item value (instead, a placeholder index entry is created automatically),
  and <function>extractQuery</function> will not be called on a null query
  value either (instead, the query is presumed to be unsatisfiable).  Note
  however that null key values contained within a non-null composite item
  or query value are supported.
-->
<acronym>GIN</acronym>假定可索引的操作符是严格的。
也就是说，对于NULL项目值，<function>extractValue</>根本不会被调用（取而代之是一个被自动创建的索引实体占位符）；
并且，对于NULL查询，<function>extractQuery</function>也根本不会被调用（取而代之是这样的查询被假定为不满足条件）。
不过，包含在非NULL复合项目或查询值中的NULL键值是支持的。
 </para>
</sect1>

<sect1 id="gin-examples">
<!--
 <title>Examples</title>
-->
 <title>例子</title>

 <para>
<!--
  The <productname>PostgreSQL</productname> source distribution includes
  <acronym>GIN</acronym> operator classes for <type>tsvector</> and
  for one-dimensional arrays of all internal types.  Prefix searching in
  <type>tsvector</> is implemented using the <acronym>GIN</> partial match
  feature.
  The following <filename>contrib</> modules also contain
  <acronym>GIN</acronym> operator classes:
-->
<productname>PostgreSQL</productname>的源码发布中包含了<type>tsvector</>和
所有内部类型的一维数组的<acronym>GIN</acronym>操作符类。
<type>tsvector</>上的前缀搜索利用<acronym>GIN</>的部分匹配特性实现。
以下<filename>contrib</>模块也包含了<acronym>GIN</acronym>操作符类。

 <variablelist>
  <varlistentry>
   <term><filename>btree_gin</></term>
   <listitem>
<!--
    <para>B-tree equivalent functionality for several data types</para>
-->
    <para>许多数据类型的B-tree等价功能</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>hstore</></term>
   <listitem>
<!--
    <para>Module for storing (key, value) pairs</para>
-->
    <para>存储键值对的模块</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>intarray</></term>
   <listitem>
<!--
    <para>Enhanced support for <type>int[]</type></para>
-->
    <para>对<type>int[]</type>的增强支持</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>pg_trgm</></term>
   <listitem>
<!--
    <para>Text similarity using trigram matching</para>
-->
    <para>使用三连词（trigram）匹配的文本相似度计算</para>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>
</sect1>

</chapter>

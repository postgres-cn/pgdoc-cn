<!-- doc/src/sgml/gin.sgml -->

<chapter id="GIN">
<title>GIN 索引</title>

   <indexterm>
    <primary>索引</primary>
    <secondary>GIN</secondary>
   </indexterm>

<sect1 id="gin-intro">
 <title>简介</title>

 <para>
  <acronym>GIN</acronym>意思是通用倒排索引。<acronym>GIN</acronym>被设计为处理被索引项为组合值的情况，并且这种索引所处理的查询需要搜索出现在组合项中的元素值。例如，项可以是文档，并且查询可以是搜索包含指定词的文档。
 </para>

 <para>
  我们使用词<firstterm>项</>来表示要被索引的一个组合值，并且用词<firstterm>键</>来表示一个元素值。<acronym>GIN</acronym>总是存储和搜索键，而不是项值本身。
 </para>

 <para>
  一个<acronym>GIN</acronym>存储一个（键，位置列表）对的集合，这里一个<firstterm>posting list</>是键在其中出现的一个行 ID 的集合。相同的行 ID 可以出现在多个位置列表中，因为一个项可以包含多于一个键。每个键值只被存储一次，因此对于同一个键出现多次的情况，一个<acronym>GIN</acronym>索引是非常紧凑的。
 </para>

 <para>
  <acronym>GIN</acronym>访问方法代码不需要知道它所加速的是什么操作，从这个意义上来说，<acronym>GIN</acronym>是通用的。相反，它使用为特定数据类型定义的自定义策略。策略定义如何从被索引项和查询条件中抽取键，并且如何决定一个包含查询中某些键值的行是否真正满足查询。
 </para>

 <para>
  <acronym>GIN</acronym>的一个优点是它允许由数据类型的领域专家开发有合适访问方法的自定义数据类型，而不是让一个数据库专家来做这件事。在这一点上很像<acronym>GiST</acronym>。
 </para>

 <para>
  <productname>PostgreSQL</productname>中的<acronym>GIN</acronym>实现主要由 Teodor Sigaev 和 Oleg Bartunov 维护。在他们的<ulink url="http://www.sai.msu.su/~megera/wiki/Gin">网站</ulink>上有更多关于<acronym>GIN</acronym>的信息。
 </para>
</sect1>

<sect1 id="gin-builtin-opclasses">
 <title>内建操作符类</title>

 <para>
  <productname>PostgreSQL</>的核心发布包括<xref linkend="gin-builtin-opclasses-table">
  中所示的<acronym>GIN</acronym>操作符类（<xref linkend="contrib">中描述的一些
  可选模块提供了额外的<acronym>GIN</acronym>操作符类）。
 </para>

  <table id="gin-builtin-opclasses-table">
   <title>内建<acronym>GIN</acronym>操作符类</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>名称</entry>
      <entry>索引数据类型</entry>
      <entry>可索引操作符</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>_abstime_ops</></entry>
      <entry><type>abstime[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_bit_ops</></entry>
      <entry><type>bit[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_bool_ops</></entry>
      <entry><type>boolean[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_bpchar_ops</></entry>
      <entry><type>character[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_bytea_ops</></entry>
      <entry><type>bytea[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_char_ops</></entry>
      <entry><type>"char"[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_cidr_ops</></entry>
      <entry><type>cidr[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_date_ops</></entry>
      <entry><type>date[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_float4_ops</></entry>
      <entry><type>float4[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_float8_ops</></entry>
      <entry><type>float8[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_inet_ops</></entry>
      <entry><type>inet[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_int2_ops</></entry>
      <entry><type>smallint[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_int4_ops</></entry>
      <entry><type>integer[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_int8_ops</></entry>
      <entry><type>bigint[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_interval_ops</></entry>
      <entry><type>interval[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_macaddr_ops</></entry>
      <entry><type>macaddr[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_money_ops</></entry>
      <entry><type>money[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_name_ops</></entry>
      <entry><type>name[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_numeric_ops</></entry>
      <entry><type>numeric[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_oid_ops</></entry>
      <entry><type>oid[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_oidvector_ops</></entry>
      <entry><type>oidvector[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_reltime_ops</></entry>
      <entry><type>reltime[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_text_ops</></entry>
      <entry><type>text[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_time_ops</></entry>
      <entry><type>time[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_timestamp_ops</></entry>
      <entry><type>timestamp[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_timestamptz_ops</></entry>
      <entry><type>timestamp with time zone[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_timetz_ops</></entry>
      <entry><type>time with time zone[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_tinterval_ops</></entry>
      <entry><type>tinterval[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_varbit_ops</></entry>
      <entry><type>bit varying[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>_varchar_ops</></entry>
      <entry><type>character varying[]</></entry>
      <entry>
       <literal>&amp;&amp;</>
       <literal>&lt;@</>
       <literal>=</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>jsonb_ops</></entry>
      <entry><type>jsonb</></entry>
      <entry>
       <literal>?</>
       <literal>?&amp;</>
       <literal>?|</>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>jsonb_path_ops</></entry>
      <entry><type>jsonb</></entry>
      <entry>
       <literal>@&gt;</>
      </entry>
     </row>
     <row>
      <entry><literal>tsvector_ops</></entry>
      <entry><type>tsvector</></entry>
      <entry>
       <literal>@@</>
       <literal>@@@</>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 <para>
  在两种用于类型<type>jsonb</>的操作符类中，<literal>jsonb_ops</>是默认项。
  <literal>jsonb_path_ops</>支持较少的操作符但是为那些操作符提供了更好的性能。
  详见<xref linkend="json-indexing">。
 </para>

</sect1>

<sect1 id="gin-extensibility">
 <title>可扩展性</title>

 <para>
   <acronym>GIN</acronym>接口有一个高层次的抽象，要求访问方法实现者只需要实现数据类型被访问的语义。<acronym>GIN</acronym>层本身会操心并发、日志和搜索树结构的事情。
 </para>

 <para>
   要让一个<acronym>GIN</acronym>访问方法工作起来所要做的全部事情就是实现一些用户定义的方法，它们定义了树中键的行为以及键、被索引项以及可索引查询之间的关系。简而言之，<acronym>GIN</acronym>的可扩展性结合了通用性、代码重用和一个干净的接口。
 </para>

 <para>
   一个用于<acronym>GIN</acronym>的操作符类必须提供的三个方法是：

 <variablelist>
    <varlistentry>
     <term><function>int compare(Datum a, Datum b)</></term>
     <listitem>
      <para>
       比较两个键（不是被索引项）并且返回一个整数，整数可以是小于零、零、大于零，分别表示第一个键小于、等于、大于第二个键。空值键不会被传递给这个函数。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>Datum *extractValue(Datum itemValue, int32 *nkeys,
        bool **nullFlags)</></term>
     <listitem>
      <para>
       给定一个要被索引的项，返回一个 palloc 过的键的数组。被返回的键的数量必须被存储在<literal>*nkeys</>中。如果键中的任意一个可能为空，还要 palloc 一个<literal>*nkeys</> 个<type>bool</type>域的数组，将它的地址存储在<literal>*nullFlags</>中，并且根据需要设置这些空值标志。如果所有的键都非空，<literal>*nullFlags</>可以被留成<symbol>NULL</symbol>（其初始值）。如果该项不包含键，返回值可以为<symbol>NULL</symbol>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><function>Datum *extractQuery(Datum query, int32 *nkeys,
        StrategyNumber n, bool **pmatch, Pointer **extra_data,
        bool **nullFlags, int32 *searchMode)</></term>
     <listitem>
      <para>
       给定一个要被查询的值，返回一个 palloc 过的键的数组。即<literal>query</>是一个可索引操作符（左手边是被索引列）的右手边的值。<literal>n</>是操作符类中操作符的策略号（见<xref linkend="xindex-strategies">）。通常，<function>extractQuery</>将需要参考<literal>n</>来判断<literal>query</>的数据类型以及它应该用什么方法来抽取键值。被返回的键的数量必须被存储在<literal>*nkeys</>中。如果键中的任意一个可能为空，还要 palloc 一个<literal>*nkeys</> 个<type>bool</type>域的数组，将它的地址存储在<literal>*nullFlags</>中，并且根据需要设置这些空值标志。如果所有的键都非空，<literal>*nullFlags</>可以被留成<symbol>NULL</symbol>（其初始值）。如果该项不包含键，返回值可以为<symbol>NULL</symbol>。
      </para>

      <para>
       <literal>searchMode</>是一个输出参数，它允许<function>extractQuery</>指定有关搜索如何被完成的细节。如果<literal>*searchMode</>被设置为<literal>GIN_SEARCH_MODE_DEFAULT</>（这是在被调用之前它被初始化的值），只有那些匹配至少一个被返回键的项才会被考虑作为候选匹配。如果<literal>*searchMode</>被设置为<literal>GIN_SEARCH_MODE_INCLUDE_EMPTY</>，那么除了至少包含一个匹配键的项之外，根本不包含键的项也被考虑作为候选匹配（例如，这种模式对于实现“是...的子集”操作符有用）。如果<literal>*searchMode</>被设置为<literal>GIN_SEARCH_MODE_ALL</>，那么索引中所有非空项都被考虑作为候选匹配，不管它们是否匹配被返回的键（这种模式比其他两种选择要慢很多，但是它对于正确实现极端情况可能是必要的。需要这种模式的操作符在大部分情况下可能并不是一个 GIN 操作符类的好选择）。用于设置这个模式的符号被定义在<filename>access/gin.h</>中。
      </para>

      <para>
       <literal>pmatch</>是一个输出参数，它用于在部分匹配匹配被支持时使用。要用它，<function>extractQuery</>必须分配一个<literal>*nkeys</>个布尔值的数组，并且把它的地址存储在<literal>*pmatch</>中。如果一个键要求部分匹配，该数组的对应元素应该被设置为 TRUE，否则设置为 FALSE。如果<literal>*pmatch</>被设置为<symbol>NULL</symbol>，则 GIN 假定不需要部分匹配。在调用前，该变量被初始化为<symbol>NULL</symbol>，这样这个参数可以简单地被不支持部分匹配的操作符类忽略。
      </para>

      <para>
       <literal>extra_data</>是一个输出参数，它允许<function>extractQuery</>传递额外数据给<function>consistent</>和<function>comparePartial</>方法。要用它，<function>extractQuery</>必须分配一个<literal>*nkeys</>个指针的数组，并且把它的地址存储在<literal>*extra_data</>中，然后把任何它想存储的东西存到单个指针中。在调用前该变量被初始化为<symbol>NULL</symbol>，这样这个参数可以简单地被不需要额外数据的操作符类忽略。如果<literal>*extra_data</>被设置，整个数组被传递给<function>consistent</>方法，并且适当的元素会被传递给<function>comparePartial</>方法。
      </para>

     </listitem>
    </varlistentry>
</variablelist>

  一个操作符类必须提供一个函数检查一个被索引的项是否匹配查询。有两种形式，
  一个布尔函数<function>consistent</>，以及一个三元函数<function>triConsistent</>。
  <function>triConsistent</>覆盖了两者的功能，因此提供一个足矣。但是，
  如果布尔变体的计算代价要更低，两者都提供就会有好处。如果只提供布尔变体，
  一些基于在取得所有键之前拒绝索引项的优化将会被禁用。

  <variablelist>

    <varlistentry>
     <term><function>bool consistent(bool check[], StrategyNumber n, Datum query,
        int32 nkeys, Pointer extra_data[], bool *recheck,
        Datum queryKeys[], bool nullFlags[])</></term>
     <listitem>
      <para>
       如果一个被索引项满足（如果重新检查指示被返回，则表示可能满足）有策略号<literal>n</>的查询操作符，则返回 TRUE。这个函数并没有直接访问被索引项的值，因为<acronym>GIN</acronym>没有显式存储项。可用的是关于哪些从查询抽取出的键值出现在一个给定被索引项中的知识。<literal>check</>数组的长度是<literal>nkeys</>，它和前面由<function>extractQuery</>为这个<literal>查询</>数据返回的键的数目相同。
       如果被索引项包含一个查询键，那么<literal>check</>数组的对应元素为 TRUE，即如果 (check[i] == TRUE) ，则<function>extractQuery</>结果数组的第 i 个键存在于被索引项中。在<function>consistent</>方法需要参考原始<literal>query</>数据的情况中，它会被传递进来，前面由<function>extractQuery</>返回的<literal>queryKeys[]</>和<literal>nullFlags[]</>数组也一样。<literal>extra_data</>是由<function>extractQuery</>返回的额外数据数组，如果没有额外数据则为<symbol>NULL</symbol>。
      </para>

      <para>
       当<function>extractQuery</>在<literal>queryKeys[]</>中返回一个空值键时，如果被索引项包含一个空值键则对应的<literal>check[]</>元素为 TRUE。即，<literal>check[]</>的语义类似<literal>IS NOT DISTINCT FROM</>。如果<function>consistent</>函数需要说出一个常规值匹配和一个空值匹配之间的区别，它可以检查对应的<literal>nullFlags[]</>元素。
      </para>

      <para>
       在成功时，如果堆元组需要根据查询操作符被重新检查，则<literal>*recheck</>应该被设置为 TRUE，或者如果索引测试是准确的则设置为 FALSE。即，一个 FALSE 返回值保证堆元组不匹配查询；一个 TRUE 返回值以及设置为 FALSE 的<literal>*recheck</>保证堆元组匹配查询；并且一个 TRUE 返回值和设置为 TRUE 的<literal>*recheck</>表示堆元组可能匹配查询，因此它需要被取出并且通过在原始的被索引项上计算查询操作符来重新检查。
      </para>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term><function>GinTernaryValue triConsistent(GinTernaryValue check[], StrategyNumber n, Datum query,
        int32 nkeys, Pointer extra_data[],
        Datum queryKeys[], bool nullFlags[])</></term>
     <listitem>
      <para>
       <function>triConsistent</>类似于<function>consistent</>，但不是一个布尔的<literal>check[]</>，对每个键有三种可能值：<literal>GIN_TRUE</>、<literal>GIN_FALSE</>和<literal>GIN_MAYBE</>。<literal>GIN_FALSE</>和<literal>GIN_TRUE</>具有和常规布尔值相同的含义。<literal>GIN_MAYBE</>意味着键的存在未知。当<literal>GIN_MAYBE</>值出现时，如果项匹配（不管该索引项是否包含对应的查询键），该函数应该只返回 GIN_TRUE。同样地，如果项不匹配（不管它是否包含 GIN_MAYBE 键），该函数必须只返回 GIN_FALSE。如果结果依赖于 GIN_MAYBE 项，即无法根据已知查询键确认或拒绝匹配，该函数必须返回 GIN_MAYBE。
      </para>
      <para>
       当在<literal>check</>向量中没有 GIN_MAYBE 值时，<literal>GIN_MAYBE</>返回值等效于在布尔函数<function>consistent</>中设置<literal>recheck</>标志等效。
      </para>
     </listitem>
    </varlistentry>
  </variablelist>

  可选的，一个用于<acronym>GIN</acronym>的操作符类可以提供下列方法：

  <variablelist>
    <varlistentry>
     <term><function>int comparePartial(Datum partial_key, Datum key, StrategyNumber n,
                              Pointer extra_data)</></term>
     <listitem>
      <para>
       比较一个部分匹配键和一个索引键。返回一个整数，其符号指示结果：小于零表示索引键不匹配查询，但是索引扫描应该继续；零表示索引键匹配查询；大于零表示索引扫描应该停止，因为没有更多可能的匹配。产生该部分匹配查询的操作符的策略号<literal>n</>将被提供，可以通过其语义决定什么时候结束扫描。还有，<literal>extra_data</>是由<function>extractQuery</>产生的额外数据数组中的对应元素，如果没有则为<symbol>NULL</symbol>。空值不会被传递给这个函数。
      </para>
     </listitem>
    </varlistentry>
  </variablelist>
 </para>

 <para>
  要支持<quote>部分匹配</>查询，一个操作符类必须提供<function>comparePartial</>方法，并且它的<function>extractQuery</>方法必须在遇到一个部分匹配查询时设置<literal>pmatch</>参数。详见<xref linkend="gin-partial-match">。
 </para>

 <para>
  上面提到的多个<literal>Datum</>值的实际数据类型随着操作符类而变化。被传递给<function>extractValue</>的项值总是操作符类的输入类型，并且所有的键值必须是类的<literal>STORAGE</>类型。被传递给<function>extractQuery</>、<function>consistent</>和<function>triConsistent</>的<literal>query</>参数是由该策略号标识的类成员操作符的右手边输入类型。这不需要和项类型相同，只要正确类型的键值能从其中被抽取出来。
 </para>

</sect1>

<sect1 id="gin-implementation">
 <title>实现</title>

 <para>
  在内部，一个<acronym>GIN</acronym>索引包含一个在键上构建的 B 树索引，其中每一个键是一个或者多个被索引项的一个元素（例如，数组的一个成员），并且叶子页中的每一个元组包含一个指向堆指针 B 树的指针（一个<quote>位置树</>）或者一个堆指针的简单列表（<quote>位置列表</>），只有位置列表小到能够和键值一起放入索引时才使用后一种形式。
 </para>

 <para>
  自<productname>PostgreSQL</productname> 9.1 起，空键值可以被包括在索引中。同样，用于为空或者根据<function>extractValue</>不包含键的被索引项的占位符空值也被包括在索引中。这允许实现应该找到空项的搜索。
 </para>

 <para>
  多列<acronym>GIN</acronym>索引可以通过在组合值（列号，键值）上建立一个单一 B 树实现。不同列的键值可以是不同类型。
 </para>

 <sect2 id="gin-fast-update">
  <title>GIN 快速更新技术</title>

  <para>
   更新一个<acronym>GIN</acronym>索引可能会比较慢，这是因为倒排索引的天然特性造成的：对一个堆行的插入或更新可能导致对索引的很多次插入（每一次插入用于从被索引项中抽取的一个键）。从<productname>PostgreSQL</productname> 8.4 开始，<acronym>GIN</>可以通过将新元组插入到一个临时的未排序的待处理条目列表中来推迟很多这种工作。当表被清理时或者待处理列表变得太大（大于<xref linkend="guc-work-mem">）时，这些条目被使用初始索引创建时使用的批量插入技术移动到主<acronym>GIN</acronym>数据结构中。这大幅度提高了<acronym>GIN</acronym>索引的更新速度，虽然带了一些额外的清理负荷。此外，这些开销可以通过用一个后台进程来取代一个前台进程执行。
  </para>

  <para>
   这种方式的主要缺点是搜索必须在搜索普通索引之外扫描待处理条目的列表，并且因此一个大型的待处理条目列表会显著地拖慢搜索。另一个缺点是，虽然大部分更新变快了，一次导致待处理列表变得<quote>太大</>的更新将导致一次立即清理循环并且因此会比其他更新慢很多。正确使用自动清理可以把这些问题的影响变得最小。
  </para>

  <para>
   如果一致的响应时间比更新速度更重要，可以通过为一个<acronym>GIN</acronym>关闭<literal>FASTUPDATE</literal>存储参数来禁用对待处理条目的使用。详见<xref linkend="sql-createindex">。
  </para>
 </sect2>

 <sect2 id="gin-partial-match">
  <title>部分匹配算法</title>

  <para>
   GIN 可以支持<quote>部分匹配</>查询，在其中查询不能判断一个或多个键的精确匹配，但是可以确定落在键值（在<function>compare</>支持方法决定的键排序顺序中）的一个合理的狭窄范围内的可能匹配。<function>extractQuery</>方法，不会返回一个要被精确匹配的键值，而是返回一个作为要被搜索范围下界的键值，并且将<literal>pmatch</>标志设置为真。然后键范围将被使用<function>comparePartial</>方法扫描。<function>comparePartial</>必须对于一个匹配的索引键返回零，对一个不匹配但仍在要被搜索的范围内的返回小于零，对于超过被搜索范围的索引键返回大于零。
  </para>
 </sect2>

</sect1>

<sect1 id="gin-tips">
<title>GIN 提示和技巧</title>

 <variablelist>
  <varlistentry>
   <term>创建 vs. 插入</term>
   <listitem>
    <para>
     插入到一个<acronym>GIN</acronym>索引可能会很慢，因为为一个项可能需要插入很多歌键。因此，对于一个表的批量插入，我们建议删除 GIN 索引，然后在完成批量插入后重建它。
    </para>

    <para>
     从<productname>PostgreSQL</productname> 8.4 开始，这个建议已经不再需要了，因为可以使用延迟索引（详见<xref linkend="gin-fast-update">）。但是对于非常大量的更新，还是最好先删除再重建索引。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><xref linkend="guc-maintenance-work-mem"></term>
   <listitem>
    <para>
     一个<acronym>GIN</acronym>索引的建立时间对<varname>maintenance_work_mem</>设置很敏感；它不考虑在索引创建期间在工作内存上的节省。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><xref linkend="guc-work-mem"></term>
   <listitem>
    <para>
     如果一个现有的<acronym>GIN</acronym>索引启用了<literal>FASTUPDATE</>，在一系列插入的过程中，系统将在待处理条目列表增长到超过<varname>work_mem</>时清理该列表。为了避免在观察到的响应时间方面发生波动，把待处理列表的清理放在后台（即通过自动清理）是比较合适的。通过增加<varname>work_mem</>或者使自动清理更具倾略性可以避免前台的清理操作。但是，增大<varname>work_mem</>也意味着如果一个前台清理发生，它将会持续相当长时间。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><xref linkend="guc-gin-fuzzy-search-limit"></term>
   <listitem>
    <para>
     开发<acronym>GIN</acronym>索引的主要目的是在<productname>PostgreSQL</productname>中创建对高可扩展全文搜索的支持，并且一次全文搜索返回一个非常大的结果集也是很常见的情况。此外，当查询包含非常频繁的词时情况也是如此，因此大结果集不是非常有用。因为从磁盘读取很多元组并且对它们排序可能会花费很多时间，这对于产品来说是不可接受的（注意索引搜索本身是很快的）。
    </para>
    <para>
     为了能够控制这类查询的执行，<acronym>GIN</acronym>对于返回的行数有一个可配置的软上限：<varname>gin_fuzzy_search_limit</varname>配置参数。默认它被设置为 0 （意为无限制）。如果设置了一个非零限制，那么被返回的集合是整个结果集的一个子集，并且是随机选择的。
    </para>
    <para>
     <quote>软</quote>意味着被返回结果的实际数量可以与指定的限制不同，这取决于查询和系统随机数生成器的质量。
    </para>
    <para>
     根据经验，在数千级别的值（如 5000 &mdash; 20000）比较好。
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

</sect1>

<sect1 id="gin-limit">
 <title>限制</title>

 <para>
  <acronym>GIN</acronym>假定可索引操作符是严格的。这意味着对于一个空项值，<function>extractValue</>将根本不会被调用（相反，一个占位符索引项将被自动创建），并且在一个空查询值上也不会调用<function>extractQuery</function>（相反，该查询被假定为不可满足的）。不过注意，在一个非空组合项或查询值中的空键值是被支持的。
 </para>
</sect1>

<sect1 id="gin-examples">
 <title>例子</title>

 <para>
  <productname>PostgreSQL</productname>源代码发布中包括用于<type>tsvector</>和所有内部类型的一维数组的<acronym>GIN</acronym>操作符类。<type>tsvector</>中的前缀搜索就是使用<acronym>GIN</>的部分匹配特性实现的。下列<filename>contrib</>模块也包含<acronym>GIN</acronym>操作符类：

 <variablelist>
  <varlistentry>
   <term><filename>btree_gin</></term>
   <listitem>
    <para>多种数据类型的 B 树等效功能</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>hstore</></term>
   <listitem>
    <para>存储键值对的模块</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>intarray</></term>
   <listitem>
    <para><type>int[]</type>的增强支持</para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><filename>pg_trgm</></term>
   <listitem>
    <para>使用 trigram 匹配的文本相似性</para>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>
</sect1>

</chapter>

<!-- doc/src/sgml/indices.sgml -->

<chapter id="indexes">
 <title>索引</title>

 <indexterm zone="indexes">
  <primary>索引</primary>
 </indexterm>

 <para>
   索引是提高数据库性能的常用途径。比起没有索引，使用索引可以让数据库服务器更快找到并获取特定行。但是索引同时也会增加数据库系统的日常管理负担，因此我们应该聪明地使用索引。
 </para>


 <sect1 id="indexes-intro">
  <title>简介</title>

  <para>
   假设我们有一个如下的表：
<programlisting>
CREATE TABLE test1 (
    id integer,
    content varchar
);
</programlisting>
   而应用发出很多以下形式的查询：
<programlisting>
SELECT content FROM test1 WHERE id = <replaceable>constant</replaceable>;
</programlisting>
   在没有事前准备的情况下，系统不得不扫描整个<structname>test1</structname>表，一行一行地去找到所有匹配的项。如果<structname>test1</structname>中有很多行但是只有一小部分行（可能是0或者1）需要被该查询返回，这显然是一种低效的方式。但是如果系统被指示维护一个在<structfield>id</structfield>列上的索引，它就能使用一种更有效的方式来定位匹配行。例如，它可能仅仅需要遍历一棵搜索树的几层而已。
  </para>

  <para>
   类似的方法也被用于大部分非小说书籍中：经常被读者查找的术语和概念被收集在一个字母序索引中放在书籍的末尾。感兴趣的读者可以相对快地扫描索引并跳到合适的页而不需要阅读整本书来寻找感兴趣的材料。正如作者的任务是准备好读者可能会查找的术语一样，数据库程序员也需要预见哪些索引会有用。
  </para>

  <para>
   正如前面讨论的，下列命令可以用来在<structfield>id</structfield>列上创建一个索引：
<programlisting>
CREATE INDEX test1_id_index ON test1 (id);
</programlisting>
   索引的名字<structname>test1_id_index</structname>可以自由选择，但我们最好选择一个能让我们想起该索引用途的名字。
  </para>

  <para>
   为了移除一个索引，可以使用<command>DROP INDEX</command>命令。索引可以随时被创建或删除。
  </para>

  <para>
   一旦一个索引被创建，就不再需要进一步的干预：系统会在表更新时更新索引，而且会在它觉得使用索引比顺序扫描表效率更高时使用索引。但我们可能需要定期地运行<command>ANALYZE</command>命令来更新统计信息以便查询规划器能做出正确的决定。通过<xref linkend="performance-tips">的信息可以了解如何找出一个索引是否被使用以及规划器在何时以及为什么会选择<emphasis>不</emphasis>使用索引。
  </para>

  <para>
   索引也会使带有搜索条件的<command>UPDATE</command>和<command>DELETE</command>命令受益。此外索引还可以在连接搜索中使用。因此，一个定义在连接条件列上的索引可以显著地提高连接查询的速度。
  </para>

  <para>
   在一个大表上创建一个索引会耗费很长的时间。默认情况下，<productname>PostgreSQL</productname>允许在索引创建时并行地进行读（<command>SELECT</command>命令），但写（<command>INSERT</command>、<command>UPDATE</command>和<command>DELETE</command>）则会被阻塞直到索引创建完成。在生产环境中这通常是不可接受的。在创建索引时允许并行的写是可能的，但是有些警告需要注意，更多信息可以参考<xref linkend="SQL-CREATEINDEX-CONCURRENTLY"
   endterm="SQL-CREATEINDEX-CONCURRENTLY-title">。
  </para>

  <para>
   一个索引被创建后，系统必须保持它与表同步。这增加了数据操作的负担。因此哪些很少或从不在查询中使用的索引应该被移除。
  </para>
 </sect1>


 <sect1 id="indexes-types">
  <title>索引类型</title>

  <para>
   <productname>PostgreSQL</productname>提供了多种索引类型：B-tree、Hash、GiST、SP-GiST 和 GIN。每一种索引类型使用了一种不同的算法来适应不同类型的查询。默认情况下，<command>CREATE INDEX</command>命令创建适合于大部分情况的B-tree 索引。
  </para>

  <para>
   <indexterm>
    <primary>index</primary>
    <secondary>B-tree</secondary>
   </indexterm>
   <indexterm>
    <primary>B-tree</primary>
    <see>index</see>
   </indexterm>
   B-tree可以在可排序数据上的处理等值和范围查询。特别地，<productname>PostgreSQL</productname>的查询规划器会在任何一种涉及到以下操作符的已索引列上考虑使用B-tree索引：

   <simplelist>
    <member><literal>&lt;</literal></member>
    <member><literal>&lt;=</literal></member>
    <member><literal>=</literal></member>
    <member><literal>&gt;=</literal></member>
    <member><literal>&gt;</literal></member>
   </simplelist>

   将这些操作符组合起来，例如<literal>BETWEEN</>和<literal>IN</>，也可以用B-tree索引搜索实现。同样，在索引列上的<literal>IS NULL</>或<literal>IS NOT
   NULL</>条件也可以在B-tree索引中使用。
  </para>

  <para>
   优化器也会将B-tree索引用于涉及到模式匹配操作符<literal>LIKE</>和<literal>~</literal> 的查询，前提是<emphasis>如果</emphasis>模式是一个常量且被固定在字符串的开头&mdash;例如：<literal>col LIKE
   'foo%'</literal>或者<literal>col ~ '^foo'</literal>, 但在<literal>col LIKE '%bar'</literal>上则不会。但是，如果我们的数据库没有使用C区域设置，我们需要创建一个具有特殊操作符类的索引来支持模式匹配查询，参见下面的<xref linkend="indexes-opclass">。同样可以将B-tree索引用于<literal>ILIKE</literal>和<literal>~*</literal>，但仅当模式以非字母字符开始，即不受大小写转换影响的字符。
  </para>

  <para>
   B-tree索引也可以用于检索排序数据。这并不会总是比简单扫描和排序更快，但是总是有用的。
  </para>

  <para>
   <indexterm>
    <primary>index</primary>
    <secondary>hash</secondary>
   </indexterm>
   <indexterm>
    <primary>hash</primary>
    <see>index</see>
   </indexterm>
   Hash索引只能处理简单等值比较。不论何时当一个索引列涉及到一个使用了<literal>=</literal>操作符的比较时，查询规划器将考虑使用一个Hash索引。下面的命令将创建一个Hash索引：
<synopsis>
CREATE INDEX <replaceable>name</replaceable> ON <replaceable>table</replaceable> USING hash (<replaceable>column</replaceable>);
</synopsis>
  </para>

  <caution>
   <para>
    Hash索引操作目前不被WAL记录，因此存在未写入修改，在数据库崩溃后需要用<command>REINDEX</>命令重建Hash索引。同样，在完成初始的基础备份后，对于Hash索引的改变也不会通过流式或基于文件的复制所复制，所以它们会对其后使用它们的查询给出错误的答案。正因为这些原因，Hash索引已不再被建议使用。
   </para>
  </caution>

  <para>
   <indexterm>
    <primary>index</primary>
    <secondary>GiST</secondary>
   </indexterm>
   <indexterm>
    <primary>GiST</primary>
    <see>index</see>
   </indexterm>
   GiST索引并不是一种单独的索引，而是可以用于实现很多不同索引策略的基础设施。相应地，可以使用一个GiST索引的特定操作符根据索引策略（<firstterm>操作符类</>）而变化。作为一个例子，<productname>PostgreSQL</productname>的标准捐献包中包括了用于多种二维几何数据类型的GiST操作符类，它用来支持使用下列操作符的索引化查询：

   <simplelist>
    <member><literal>&lt;&lt;</literal></member>
    <member><literal>&amp;&lt;</literal></member>
    <member><literal>&amp;&gt;</literal></member>
    <member><literal>&gt;&gt;</literal></member>
    <member><literal>&lt;&lt;|</literal></member>
    <member><literal>&amp;&lt;|</literal></member>
    <member><literal>|&amp;&gt;</literal></member>
    <member><literal>|&gt;&gt;</literal></member>
    <member><literal>@&gt;</literal></member>
    <member><literal>&lt;@</literal></member>
    <member><literal>~=</literal></member>
    <member><literal>&amp;&amp;</literal></member>
   </simplelist>

   （这些操作符的含义见<xref linkend="functions-geometry">）<xref linkend="gist-builtin-opclasses-table">中给出了标准发布中所包括的 GiST 操作符类。<literal>contrib</>集合中还包括了很多其他GiST操作符类，可见<xref linkend="GiST">。
  </para>

  <para>
   GiST索引也有能力优化<quote>最近邻</>搜索，例如：
<programlisting><![CDATA[
SELECT * FROM places ORDER BY location <-> point '(101,456)' LIMIT 10;
]]>
</programlisting>
   它将找到离给定目标点最近的10个位置。能够支持这种查询的能力同样取决于被使用的特定操作符类。
   在<xref linkend="gist-builtin-opclasses-table">中，<quote>Ordering Operators</>列中列出了可以在这种方法中使用的操作符。
  </para>

  <para>
   <indexterm>
    <primary>index</primary>
    <secondary>SP-GiST</secondary>
   </indexterm>
   <indexterm>
    <primary>SP-GiST</primary>
    <see>index</see>
   </indexterm>
   和GiST相似，SP-GiST索引为支持多种搜索提供了一种基础结构。SP-GiST 允许实现众多不同的非平衡的基于磁盘的数据结构，例如四叉树、k-d树和radix树。作为一个例
子，<productname>PostgreSQL</productname>的标准捐献包中包含了一个用于二维点的SP-GiST操作符类，它用于支持使用下列操作符的索引化查询：

   <simplelist>
    <member><literal>&lt;&lt;</literal></member>
    <member><literal>&gt;&gt;</literal></member>
    <member><literal>~=</literal></member>
    <member><literal>&lt;@</literal></member>
    <member><literal>&lt;^</literal></member>
    <member><literal>&gt;^</literal></member>
   </simplelist>

   （其含义见<xref linkend="functions-geometry">）<xref linkend="spgist-builtin-opclasses-table">中给出了标准发布中所包括的 SP-GiST 操作符类。更多信息参见<xref linkend="SPGiST">。
  </para>

  <para>
   <indexterm>
    <primary>index</primary>
    <secondary>GIN</secondary>
   </indexterm>
   <indexterm>
    <primary>GIN</primary>
    <see>index</see>
   </indexterm>
   GIN索引是倒排索引，它用于处理包含多个键的值，例如数组。与 GiST 和 SP-GiST相似， GIN可以支持多种不同的用户定义的索引策略和特定操作符，通过它一个GIN索引可以被根据索引策略被使用。作为一个例子，<productname>PostgreSQL</productname>的标准捐献包中包含了用于一维数组的GIN操作符类，它用于支持使用下列操作符的索引化查询：

   <simplelist>
    <member><literal>&lt;@</literal></member>
    <member><literal>@&gt;</literal></member>
    <member><literal>=</literal></member>
    <member><literal>&amp;&amp;</literal></member>
   </simplelist>

   （这些操作符的含义见<xref linkend="functions-array">）<xref linkend="gin-builtin-opclasses-table">中给出了标准发布中所包括的 GIN 操作符类。在<literal>contrib</>集合中还有更多其他GIN操作符类，更多信息参见<xref linkend="GIN">。
  </para>
 </sect1>


 <sect1 id="indexes-multicolumn">
  <title>多列索引</title>

  <indexterm zone="indexes-multicolumn">
   <primary>index</primary>
   <secondary>multicolumn</secondary>
  </indexterm>

  <para>
   一个索引可以定义在表的多个列上。例如，我们有这样一个表：
<programlisting>
CREATE TABLE test2 (
  major int,
  minor int,
  name varchar
);
</programlisting>
   （即将我们的<filename class="directory">/dev</filename>目录保存在数据库中）而且我们经常会做如下形式的查询：
<programlisting>
SELECT name FROM test2 WHERE major = <replaceable>constant</replaceable> AND minor = <replaceable>constant</replaceable>;
</programlisting>
   那么我们可以在<structfield>major</structfield>和<structfield>minor</structfield>上定义一个索引：
<programlisting>
CREATE INDEX test2_mm_idx ON test2 (major, minor);
</programlisting>
  </para>

  <para>
   目前，只有 B-tree、GiST 和 GIN 索引类型支持多列索引，最多可以指定32个列（该限制可以在源代码文件<filename>pg_config_manual.h</filename>中修改，但是修改后需要重新编译<productname>PostgreSQL</productname>）。
  </para>

  <para>
   一个B-tree索引可以用于条件中涉及到任意索引列子集的查询，但是当先导列（即最左边的那些列）上有约束条件时索引最为有效。确切的规则是：在先导列上的等值约束，加上第一个无等值约束的列上的不等值约束，将被用于限制索引被扫描的部分。在这些列右边的列上的约束将在索引中被检查，这样它们适当节约了对表的访问，但它们并未减小索引被扫描的部分。例如，在<literal>(a, b, c)</literal>上有一个索引并且给定一个查询条件<literal>WHERE a = 5 AND b &gt;= 42 AND c &lt; 77</>，对索引的扫描将从第一个具有<literal>a</> = 5和<literal>b</> = 42的项开始向上进行，直到最后一个具有<literal>a</> = 5的项。在扫描过程中，具有<literal>c</> &gt;= 77的索引项将被跳过，但是它们还是会被扫描到。这个索引在原则上可以被用于在<literal>b</>和/或<literal>c</>上有约束而在<literal>a</>上没有约束的查询，但是整个索引都不得不被扫描，因此在大部分情况下规划器宁可使用一个顺序的表扫描来替代索引。
  </para>

  <para>
   一个多列GiST索引可以用于条件中涉及到任意索引列子集的查询。在其余列上的条件将限制由索引返回的项，但是第一列上的条件是决定索引上扫描量的最重要因素。当第一列中具有很少的可区分值时，一个GiST索引将会相对比较低效，即便在其他列上有很多可区分值。
  </para>

  <para>
   一个GIN索引可以用于条件中涉及到任意索引列子集的查询。与B-tree和GiST不同，GIN的搜索效率与查询条件中使用哪些索引列无关。
  </para>

  <para>
   当然，要使索引其作用，查询条件中的列必须要使用适合于索引类型的操作符，使用其他操作符的子句将不会被考虑使用索引。
  </para>

  <para>
   多列索引应该较少地使用。在绝大多数情况下，单列索引就足够了且能解决时间和空间。具有超过三个列的索引不太有用，除非该表的使用是极端程式化的。<xref linkend="indexes-bitmap-scans">中有对不同索引配置优点的讨论。
  </para>
 </sect1>


 <sect1 id="indexes-ordering">
  <title>索引和<literal>ORDER BY</></title>

  <indexterm zone="indexes-ordering">
   <primary>index</primary>
   <secondary>and <literal>ORDER BY</></secondary>
  </indexterm>

  <para>
   除了简单地查找查询要返回的行外，一个索引可能还需要将它们以指定的顺序传递。这使得查询中的<literal>ORDER BY</>不需要独立的排序步骤。在<productname>PostgreSQL</productname>当前支持的索引类型中，只有B-tree可以产生排序后的输出，其他索引类型会把行以一种没有指定的且与实现相关的顺序返回。
  </para>

  <para>
   规划器会考虑以两种方式来满足一个<literal>ORDER BY</>说明：扫描一个符合说明的可用索引，或者先以物理顺序扫描表然后再显式排序。对于一个需要扫描表的大部分的查询，一个显式的排序很可能比使用一个索引更快，因为其顺序访问模式使得它所需要的磁盘I/O更少。只有在少数行需要被取出时，索引才会更有用。一种重要的特殊情况是<literal>ORDER BY</>与<literal>LIMIT</> <replaceable>n</>联合使用：一个显式的排序将会处理所有的数据来确定最前面的<replaceable>n</>行，但如果有一个符合<literal>ORDER BY</>的索引，前<replaceable>n</>行将会被直接获取且根本不需要扫描剩下的数据。
  </para>

  <para>
   默认情况下，B-tree索引将它的项以升序方式存储，并将空值放在最后。这意味着对列<literal>x</>上索引的一次前向扫描将产生满足<literal>ORDER BY x</>（或者更长的形式：<literal>ORDER BY x ASC NULLS LAST</>）的结果。索引也可以被后向扫描，产生满足<literal>ORDER BY x DESC</>（<literal>ORDER BY x DESC NULLS FIRST</>， <literal>NULLS FIRST</>是<literal>ORDER BY DESC</>的默认情况）。
  </para>

  <para>
   我们可以在创建B-tree索引时通过<literal>ASC</>、<literal>DESC</>、<literal>NULLS FIRST</>和<literal>NULLS LAST</>选项来改变索引的排序，例如：
<programlisting>
CREATE INDEX test2_info_nulls_low ON test2 (info NULLS FIRST);
CREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);
</programlisting>
   一个以升序存储且将空值前置的索引可以根据扫描方向来支持<literal>ORDER BY x ASC NULLS FIRST</>或 <literal>ORDER BY x DESC NULLS LAST</>。
  </para>

  <para>
   读者可能会疑惑为什么要麻烦地提供所有四个选项，因为两个选项连同后向扫描的概率可以覆盖所有<literal>ORDER BY</>的变体。在单列索引中这些选项确实有冗余，但是在多列索引中它们却很有用。考虑<literal>(x, y)</>上的一个两列索引：它可以通过前向扫描满足<literal>ORDER BY x, y</>，或者通过后向扫描满足<literal>ORDER BY x DESC, y DESC</>。但是应用可能需要频繁地使用<literal>ORDER BY x ASC, y DESC</>。这样就没有办法从通常的索引中得到这种顺序，但是如果将索引定义为<literal>(x ASC, y DESC)</>或者<literal>(x DESC, y ASC)</>就可以产生这种排序。
  </para>

  <para>
   显然，具有非默认排序的索引是相当专门的特性，但是有时它们会为特定查询提供巨大的速度提升。是否值得维护这样一个索引取决于我们会多频繁地使用需要特殊排序的查询。
  </para>
 </sect1>


 <sect1 id="indexes-bitmap-scans">
  <title>组合多个索引</title>

  <indexterm zone="indexes-bitmap-scans">
   <primary>index</primary>
   <secondary>combining multiple indexes</secondary>
  </indexterm>

  <indexterm zone="indexes-bitmap-scans">
   <primary>bitmap scan</primary>
  </indexterm>

  <para>
   只有查询子句中在索引列上使用了索引操作符类中的操作符并且通过<literal>AND</>连接时才能使用单一索引。例如，给定一个<literal>(a, b)</literal> 上的索引，查询条件<literal>WHERE a = 5 AND b = 6</>可以使用该索引，而查询<literal>WHERE a = 5 OR b = 6</>不能直接使用该索引。
  </para>

  <para>
   幸运的是，<productname>PostgreSQL</>具有组合多个索引（包括多次使用同一个索引）的能力来处理那些不 能用单个索引扫描实现的情况。系统能在多个索引扫描之间安排<literal>AND</>和<literal>OR</>条件。例如， <literal>WHERE x = 42 OR x = 47 OR x = 53 OR x = 99</>这样一个查询可以被分解成为四个独立的在<literal>x</>上索引扫描，每一个扫描使用其中一个条件。这些查询的结果将被“或”起来形成最后的结果。另一个例子是如果我们在<literal>x</>和<literal>y</>上都有独立的索引，<literal>WHERE x = 5 AND y = 6</>这样的查询的一种可能的实现方式就是分别使用两个索引配合相应的条件，然后将结果“与”起来得到最后的结果行。
  </para>

  <para>
   为了组合多个索引，系统扫描每一个所需的索引并在内存中准备一个<firstterm>位图</>用于指示表中符合索引条件的行的位置。然后这些位图会被根据查询的需要“与”和“或”起来。最后，实际的表行将被访问并返回。表行将被以物理顺序访问，因为位图就是以这种顺序布局的。这意味着原始索引中的任何排序都会被丢失，并且如果存在一个<literal>ORDER BY</>子句就需要一个单独的排序步骤。由于这个原因以及每一个附加的索引都需要额外的时间，即使有额外的索引可用，规划器有时也会选择使用单一索引扫描。
  </para>

  <para>
   在所有的应用（除了最简单的应用）中，可能会有多种有用的索引组合，数据库开发人员必须做出权衡以决定提供哪些索引。有时候多列索引最好，但是有时更好的选择是创建单独的索引并依赖于索引组合特性。例如，如果我们的查询中有时只涉及到列<literal>x</>，有时候只涉及到列<literal>Y</>，还有时候会同时涉及到两列，我们可以选择在x和y上创建两个独立索引然后依赖索引组合来处理同时涉及到两列的查询。我们当然也可以创建一个<literal>(x, y)</>上的多列索引。当查询同时涉及到两列时，该索引会比组合索引效率更高，但是正如<xref linkend="indexes-multicolumn">中讨论的，它在只涉及到y的查询中几乎完全无用，因此它不能是唯一的一个索引。一个多列索引和一个<literal>y</>上的独立索引的组合将会工作得很好。多列索引可以用于那些只涉及到<literal>x</>的查询，尽管它比<literal>x</>上的独立索引更大且更慢。最后一种选择是创建所有三个索引，但是这种选择最适合表经常被执行所有三种查询但是很少被更新的情况。如果其中一种查询要明显少于其他类型的查询，我们可能需要只为常见类型的查询创建两个索引。
  </para>

 </sect1>


 <sect1 id="indexes-unique">
  <title>唯一索引</title>

  <indexterm zone="indexes-unique">
   <primary>index</primary>
   <secondary>unique</secondary>
  </indexterm>

  <para>
   索引也可以被用来强制列值的唯一性，或者是多个列组合值的唯一性。
<synopsis>
CREATE UNIQUE INDEX <replaceable>name</replaceable> ON <replaceable>table</replaceable> (<replaceable>column</replaceable> <optional>, ...</optional>);
</synopsis>
   当前，只有B-tree能够被声明为唯一。
  </para>

  <para>
   当一个索引被声明为唯一时，索引中不允许多个表行具有相同的索引值。空值被视为不相同。一个多列唯一索引将会拒绝在所有索引列上具有相同组合值的表行。
  </para>

  <para>
   <productname>PostgreSQL</productname>会自动为定义了一个唯一约束或主键的表创建一个唯一索引。该索引包含组成主键或唯一约束的所有列（可能是一个多列索引），它也是用于强制这些约束的机制。
  </para>

  <note>
   <para>
    为表增加一个唯一约束的首选方式是<literal>ALTER TABLE ... ADD CONSTRAINT</literal>。用索引来强制唯一约束可以被视作一种实现细节，因此这种索引不应该直接被访问。但是，我们应该注意不需要手工在唯一列上创建索引，如果那样做也只是重复了自动创建的索引而已。
   </para>
  </note>
 </sect1>


 <sect1 id="indexes-expressional">
  <title>表达式索引</title>

  <indexterm zone="indexes-expressional">
   <primary>index</primary>
   <secondary sortas="expressions">on expressions</secondary>
  </indexterm>

  <para>
   一个索引列并不一定是底层表的一个列，也可以是从表的一列或多列计算而来的一个函数或者标量表达式。这种特性对于根据计算结果快速获取表中内容是有用的。
  </para>

  <para>
   例如，一种进行大小写不敏感比较的常用方法是使用<function>lower</function>函数：
<programlisting>
SELECT * FROM test1 WHERE lower(col1) = 'value';
</programlisting>
   这种查询可以利用一个建立在<literal>lower(col1)</literal>函数结果之上的索引：
<programlisting>
CREATE INDEX test1_lower_col1_idx ON test1 (lower(col1));
</programlisting>
  </para>

  <para>
   如果我们将该索引声明为<literal>UNIQUE</>，它将阻止创建在<literal>col1</>值上只有大小写不同的行。
  </para>

  <para>
   另外一个例子，如果我们经常进行如下的查询：
<programlisting>
SELECT * FROM people WHERE (first_name || ' ' || last_name) = 'John Smith';
</programlisting>
   那么值得创建一个这样的索引：
<programlisting>
CREATE INDEX people_names ON people ((first_name || ' ' || last_name));
</programlisting>
  </para>

  <para>
   正如第二个例子所示，<command>CREATE INDEX</>命令的语法通常要求在被索引的表达式周围书写圆括号。而如第一个例子所示，当表达式只是一个函数调用时可以省略掉圆括号。
  </para>

  <para>
   索引表达式的维护代价较为昂贵，因为在每一个行被插入或更新时都得为它重新计算相应的表达式。然而，索引表达式在进行索引搜索时却<emphasis>不</>需要重新计算，因为它们的结果已经被存储在索引中了。在上面两个例子中，系统将会发现查询的条件是<literal>WHERE indexedcolumn = 'constant'</>，因此查询的速度将等同于其他简单索引查询。因此，表达式索引对于检索速度远比插入和更新速度重要的情况非常有用。
  </para>
 </sect1>


 <sect1 id="indexes-partial">
  <title>部分索引</title>

  <indexterm zone="indexes-partial">
   <primary>index</primary>
   <secondary>partial</secondary>
  </indexterm>

  <para>
   一个<firstterm>部分索引</firstterm>是建立在表的一个子集上，而该子集则由一个条件表达式（被称为部分索引的<firstterm>谓词</firstterm>）定义。而索引中只包含那些符合该谓词的表行的项。部分索引是一种专门的特性，但在很多种情况下它们也很有用。
  </para>

  <para>
   使用部分索引的一个主要原因是避免索引公值。由于搜索一个公值的查询（一个在所有表行中占比查过一定百分比的值）不会使用索引，所以完全没有理由将这些行保留在索引中。这可以减小索引的尺寸，同时也将加速使用索引的查询。它也将加速很多表更新操作，因为这种索引并不需要在所有情况下都被更新。<xref linkend="indexes-partial-ex1">展示了一种可能的应用：
  </para>

  <example id="indexes-partial-ex1">
   <title>建立一个部分索引来排除公值</title>

   <para>
    假设我们要在一个数据库中保存网页服务器访问日志。大部分访问都来自于我们组织内的IP地址，但是有些来自于其他地方（如使用拨号连接的员工）。如果我们主要通过IP搜索来自于外部的访问，我们就没有必要索引对应于我们组织内网的IP范围。
   </para>

   <para>
    假设有这样一个表：
<programlisting>
CREATE TABLE access_log (
    url varchar,
    client_ip inet,
    ...
);
</programlisting>
   </para>

   <para>
    用以下命令可以创建适用于我们的部分索引：
<programlisting>
CREATE INDEX access_log_client_ip_ix ON access_log (client_ip)
WHERE NOT (client_ip &gt; inet '192.168.100.0' AND
           client_ip &lt; inet '192.168.100.255');
</programlisting>
   </para>

   <para>
    一个使用该索引的典型查询是：
<programlisting>
SELECT *
FROM access_log
WHERE url = '/index.html' AND client_ip = inet '212.78.10.32';
</programlisting>
    一个不能使用该索引的查询：
<programlisting>
SELECT *
FROM access_log
WHERE client_ip = inet '192.168.100.23';
</programlisting>
   </para>

   <para>
    可以看到部分索引查询要求公值能被预知，因此部分索引最适合于数据分布不会改变的情况。当然索引也可以偶尔被重建来适应新的数据分布，但是这会增加维护负担。
   </para>
  </example>

  <para>
   <xref linkend="indexes-partial-ex2">展示了部分索引的另一个可能的用途：从索引中排除那些查询不感兴趣的值。这导致了上述相同的好处，但它防止了通过索引来访问<quote>不感兴趣的</quote>值，即便在这种情况下一个索引扫描是有益的。显然，为这种场景建立部分索引需要很多考虑和实验。
  </para>

  <example id="indexes-partial-ex2">
   <title>建立一个部分索引来排除不感兴趣的值</title>

   <para>
    如果我们有一个表包含已上账和未上账的订单，其中未上账的订单在整个表中占据一小部分且它们是最经常被访问的行。我们可以通过只在未上账的行上创建一个索引来提高性能。创建索引的命令如下：
<programlisting>
CREATE INDEX orders_unbilled_index ON orders (order_nr)
    WHERE billed is not true;
</programlisting>
   </para>

   <para>
    使用该索引的一个可能查询是：
<programlisting>
SELECT * FROM orders WHERE billed is not true AND order_nr &lt; 10000;
</programlisting>
    然而，索引也可以用于完全不涉及<structfield>order_nr</>的查询，例如：
<programlisting>
SELECT * FROM orders WHERE billed is not true AND amount &gt; 5000.00;
</programlisting>
    这并不如在<structfield>amount</>列上部分索引有效，因为系统必须扫描整个索引。然而，如果有相对较少的未上账订单，使用这个部分索引来查找未上账订单将会更好。
   </para>

   <para>
    注意这个查询将不会使用该索引：
<programlisting>
SELECT * FROM orders WHERE order_nr = 3501;
</programlisting>
    订单3501可能在已上账订单或未上账订单中。
   </para>
  </example>

  <para>
   <xref linkend="indexes-partial-ex2">也显示索引列和谓词中使用的列并不需要匹配。<productname>PostgreSQL</productname>支持使用任意谓词的部分索引，只要其中涉及的只有被索引表的列。然而，记住谓词必须匹配在将要受益于索引的查询中使用的条件。更准确地，只有当系统能识别查询的<literal>WHERE</>条件从数学上索引的谓词时，一个部分索引才能被用于一个查询。<productname>PostgreSQL</productname>并不能给出一个精致的定理证明器来识别写成不同形式在数学上等价的表达式（一方面创建这种证明器极端困难，另一方面即便能创建出来对于实用也过慢）。系统可以识别简单的不等蕴含，例如<quote>x &lt; 1</quote>蕴含<quote>x &lt; 2</quote>；否则谓词条件必须准确匹配查询的<literal>WHERE</>条件中的部分，或者索引将不会被识别为可用。匹配发生在查询规划期间而不是运行期间。因此，参数化查询子句无法配合一个部分索引工作。例如，对于参数的所有可能值来说，一个具有参数<quote>x &lt; ?</quote>的预备查询绝不会蕴含<quote>x &lt; 2</quote>。
  </para>

  <para>
   部分索引的第三种可能的用途并不要求索引被用于查询。其思想是在一个表的子集上创建一个唯一索引，如<xref
   linkend="indexes-partial-ex3">所示。这对那些满足索引谓词的行强制了唯一性，而对那些不满足的行则没有影响。
  </para>

  <example id="indexes-partial-ex3">
   <title>建立一个部分唯一索引</title>

   <para>
    假设我们有一个描述测试结果的表。我们希望保证其中对于一个给定的主题和目标组合只有一个<quote>成功</>项，但其中可能会有任意多个<quote>不成功</>项。实现它的方式是：
<programlisting>
CREATE TABLE tests (
    subject text,
    target text,
    success boolean,
    ...
);

CREATE UNIQUE INDEX tests_success_constraint ON tests (subject, target)
    WHERE success;
</programlisting>
    当有少数成功测试和很多不成功测试时这是一种特别有效的方法。
   </para>
  </example>

  <para>
   最后，一个部分索引也可以被用来重载系统的查询规划选择。同样，具有特殊分布的数据集可能导致系统在它并不需要索引的时候选择使用索引。在此种情况下可以被建立，这样它将不会被那些无关的查询所用。通常，<productname>PostgreSQL</>会对索引使用做出合理的选择（例如，它会在检索公值时避开索引，这样前面的例子只能节约索引尺寸，它并非是避免索引使用所必需的），非常不正确的规划选择则需要作为故障报告。
  </para>

  <para>
   记住建立一个部分索引意味着我们知道的至少和查询规划器所知的一样多，尤其是我们知道什么时候一个索引会是有益的。构建这些知识需要经验和对于<productname>PostgreSQL</>中索引工作方式的理解。在大部分情况下，一个部分索引相对于一个普通索引的优势很小。
  </para>

  <para>
   关于部分索引的更多信息可以在<xref
   linkend="STON89b">、<xref linkend="OLSON93">和<xref
   linkend="SESHADRI95">中找到。
   </para>
 </sect1>


 <sect1 id="indexes-opclass">
  <title>操作符类和操作符族</title>

  <indexterm zone="indexes-opclass">
   <primary>operator class</primary>
  </indexterm>

  <indexterm zone="indexes-opclass">
   <primary>operator family</primary>
  </indexterm>

  <para>
   一个索引定义可以为索引中的每一列都指定一个<firstterm>操作符类</firstterm>。
<synopsis>
CREATE INDEX <replaceable>name</replaceable> ON <replaceable>table</replaceable> (<replaceable>column</replaceable> <replaceable>opclass</replaceable> <optional><replaceable>sort options</replaceable></optional> <optional>, ...</optional>);
</synopsis>
   操作符类标识该列上索引要使用的操作符。例如，一个<type>int4</type>类型上的B树索引会使用<literal>int4_ops</literal>类，这个操作符类包括用于<type>int4</type>类型值的比较函数。实际上列的数据类型的默认操作符类通常就足够了。存在多个操作符类的原因是，对于某些数据类型可能会有多于一种的有意义的索引行为。例如，我们可能想要对一种复数数据类型按照绝对值排序或者按照实数部分排序。我们可以通过为该数据类型定义两个操作符类来实现，并且在创建一个索引时选择合适的类。操作符类会决定基本的排序顺序（可以通过增加排序选项<literal>COLLATE</literal>、
   <literal>ASC</>/<literal>DESC</>和/或
   <literal>NULLS FIRST</>/<literal>NULLS LAST</>来修改）。
  </para>

  <para>
   除了默认的操作符类，还有一些内建的操作符类：

   <itemizedlist>
    <listitem>
     <para>
      操作符类<literal>text_pattern_ops</literal>、<literal>varchar_pattern_ops</literal>和
      <literal>bpchar_pattern_ops</literal>分别支持类型<type>text</type>、<type>varchar</type>和
      <type>char</type>上的B树索引。它们与默认操作符类的区别是值的比较是严格按照字符进行而不是根据区域相关的排序规则。这使得这些操作符类适合于当一个数据库没有使用标准<quote>C</quote>区域时被使用在涉及模式匹配表达式（<literal>LIKE</literal>或POSIX正则表达式）的查询中。一个例子是，你可以这样索引一个<type>varchar</type>列：
<programlisting>
CREATE INDEX test_index ON test_table (col varchar_pattern_ops);
</programlisting>
      注意如果你希望涉及到<literal>&lt;</>、<literal>&lt;=</>、<literal>&gt;</>或<literal>&gt;=</>比较的查询使用一个索引，你也应该创建一个使用默认操作符类的索引。这些查询不能使用<literal><replaceable>xxx</replaceable>_pattern_ops</literal>操作符类（但是普通的等值比较可以使用这些操作符类）。可以在同一个列上创建多个使用不同操作符类的索引。如果你正在使用C区域，你并不需要<literal><replaceable>xxx</replaceable>_pattern_ops</literal>操作符类，因为在C区域中的模式匹配查询可以用带有默认操作符类的索引。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
    下面的查询展示了所有已定义的操作符类：

<programlisting>
SELECT am.amname AS index_method,
       opc.opcname AS opclass_name,
       opc.opcintype::regtype AS indexed_type,
       opc.opcdefault AS is_default
    FROM pg_am am, pg_opclass opc
    WHERE opc.opcmethod = am.oid
    ORDER BY index_method, opclass_name;
</programlisting>
  </para>

  <para>
   一个操作符类实际上只是一个更大的被称为<firstterm>操作符族</>的结构的一个子集。在多种数据类型具有相似行为的情况下，常常会定义跨数据类型的操作符并且允许索引使用它们。为了实现该目的，这些类型的操作符类必须被分组到同一个操作符族中。跨类型的操作符是该族的成员，但是并不与族内任意一个单独的类相关联。
  </para>
  
  <para>
    前一个查询的扩展版本展示了每个操作符类所属的操作符族：
<programlisting>
SELECT am.amname AS index_method,
       opc.opcname AS opclass_name,
       opf.opfname AS opfamily_name,
       opc.opcintype::regtype AS indexed_type,
       opc.opcdefault AS is_default
    FROM pg_am am, pg_opclass opc, pg_opfamily opf
    WHERE opc.opcmethod = am.oid AND
          opc.opcfamily = opf.oid
    ORDER BY index_method, opclass_name;
</programlisting>
  </para>

  <para>
    这个查询展示所有已定义的操作符族和每一个族中包含的所有操作符：
<programlisting>
SELECT am.amname AS index_method,
       opf.opfname AS opfamily_name,
       amop.amopopr::regoperator AS opfamily_operator
    FROM pg_am am, pg_opfamily opf, pg_amop amop
    WHERE opf.opfmethod = am.oid AND
          amop.amopfamily = opf.oid
    ORDER BY index_method, opfamily_name, opfamily_operator;
</programlisting>
  </para>
 </sect1>


 <sect1 id="indexes-collations">
  <title>索引和排序规则</title>

  <para>
   一个索引在每一个索引列上只能支持一种排序规则。如果需要多种排序规则，你可能需要多个索引。
  </para>

  <para>
   考虑这些语句：
<programlisting>
CREATE TABLE test1c (
    id integer,
    content varchar COLLATE "x"
);

CREATE INDEX test1c_content_index ON test1c (content);
</programlisting>
   该索引自动使用下层列的排序规则。因此一个如下形式的查询：
<programlisting>
SELECT * FROM test1c WHERE content &gt; <replaceable>constant</replaceable>;
</programlisting>
   可以使用该索引，因为比较会默认使用列的排序规则。但是，这个索引无法加速涉及到某些其他排序规则的查询。因此对于下面形式的查询：
<programlisting>
SELECT * FROM test1c WHERE content &gt; <replaceable>constant</replaceable> COLLATE "y";
</programlisting>
   可以创建一个额外的支持<literal>"y"</literal>排序规则的索引，例如：
<programlisting>
CREATE INDEX test1c_content_y_index ON test1c (content COLLATE "y");
</programlisting>
  </para>
 </sect1>


 <sect1 id="indexes-examine">
  <title>检查索引使用</title>

  <indexterm zone="indexes-examine">
   <primary>index</primary>
   <secondary>检查用量</secondary>
  </indexterm>

  <para>
   尽管<productname>PostgreSQL</>中的索引并不需要维护或调优，但是检查真实的查询负载实际使用了哪些索引仍然非常重要。检查一个独立查询的索引使用情况可以使用<xref linkend="sql-explain">命令，它应用于这种目的的内容在<xref linkend="using-explain">中有介绍。也可以在一个运行中的服务器上收集有关索引使用的总体统计情况，如<xref linkend="monitoring-stats">所述。
  </para>

  <para>
   很难明确地表达决定创建哪些索引的通用过程。在之前的小节中的例子里有一些典型的情况。通常需要大量的实验才能决定应该创建哪些索引。本小节剩余的部分将给出一些创建索引的提示：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     总是先运行<xref linkend="sql-analyze">。这个命令会收集有关表中值分布情况的统计信息。估计一个查询将要返回的行数需要这些信息，而结果行数则被规划器用来为每一个可能的查询计划分配实际的代价。如果没有任何真实的统计信息，将会假定一些默认值，这几乎肯定是不准确的。在没有运行的情况下检查一个应用的索引使用情况是注定要失败的。详见<xref linkend="vacuum-for-statistics">和<xref linkend="autovacuum">。
    </para>
   </listitem>

   <listitem>
    <para>
     使用真实数据进行实验。使用测试数据来建立索引将会告诉你测试数据需要什么样的索引，但这并不代表真实数据的需要。
    </para>

    <para>
     使用非常小的测试数据集是特别致命的。在从100000行中选出1000行时可能会用到索引，但是从100行里选出1行是很难用到索引的，因为100行完全可能放入到一个磁盘页面中，而没有任何计划能够比得上从一个磁盘页面顺序获取的计划。
    </para>

    <para>
     在创建测试数据时也要小心，特别是当应用还没有产生时通常是不可避免的。值非常相似、完全随机或以排好序的方式被插入都将是的统计信息倾斜于真实数据中的值分布。
    </para>
   </listitem>

   <listitem>
    <para>
     如果索引没有被用到，强制使用它们将会对测试非常有用。有一些运行时参数可以关闭多种计划类型（参见<xref linkend="runtime-config-query-enable">）。例如，关闭顺序扫描（<varname>enable_seqscan</>）以及嵌套循环连接（<varname>enable_nestloop</>）将强制系统使用一种不同的计划。如果系统仍然选择使用一个顺序扫描或嵌套循环连接，则索引没有被使用的原因可能更加根本，例如查询条件不匹配索引（哪种查询能够使用哪种索引已经在前面的小节中解释过了）。
    </para>
   </listitem>

   <listitem>
    <para>
     如果强制索引使用确实使用了索引，则有两种可能性：系统是正确的并且索引确实不合适，或者查询计划的代价估计并没有反映真实情况。因此你应该对用索引的查询和不用索引的查询计时。此时<command>EXPLAIN ANALYZE</command>命令就能发挥作用了。
    </para>
   </listitem>

   <listitem>
    <para>
     如果发现代价估计是错误的，也分为两种可能性。总代价是用每个计划节点的每行代价乘以计划节点的选择度估计来计算的。计划节点的代价估计可以通过运行时参数调整（如<xref linkend="runtime-config-query-constants">所述）。不准确的选择度估计可能是由于缺乏统计信息，可以通过调节统计信息收集参数（见<xref linkend="sql-altertable">）来改进。
    </para>

    <para>
     如果你不能成功地把代价调整得更合适，那么你可能必须依靠显式地强制索引使用。你也可能希望联系<productname>PostgreSQL</>开发者来检查该问题。
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>

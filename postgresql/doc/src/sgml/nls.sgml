<!-- doc/src/sgml/nls.sgml -->

<chapter id="nls">

<!--
 <title>Native Language Support</title>
-->
 <title>本地语言支持</title>

 <sect1 id="nls-translator">
<!--
  <title>For the Translator</title>
-->
  <title>寄语翻译家</title>

  <para>
<!--
   <productname>PostgreSQL</>
   programs (server and client) can issue their messages in
   your favorite language &mdash; if the messages have been translated.
   Creating and maintaining translated message sets needs the help of
   people who speak their own language well and want to contribute to
   the <productname>PostgreSQL</> effort.  You do not have to be a
   programmer at all
   to do this.  This section explains how to help.
-->
<productname>PostgreSQL</> 程序(服务器和客户端)可以用你喜爱的语言提示消息，只要那些消息被翻译过。
创建和维护翻译过的消息集需要那些熟悉自己的语言并且希望为 <productname>PostgreSQL</> 做一些事情的人。
实际上要干这件事你完全不必是个程序员。本章讲的就是如何帮助 <productname>PostgreSQL</> 做这件事。
  </para>

  <sect2>
<!--
   <title>Requirements</title>
-->
   <title>要求</title>

   <para>
<!--
    We won't judge your language skills &mdash; this section is about
    software tools.  Theoretically, you only need a text editor.  But
    this is only in the unlikely event that you do not want to try out
    your translated messages.  When you configure your source tree, be
    sure to use the <option>&#045;-enable-nls</option> option.  This will
    also check for the <application>libintl</application> library and the
    <filename>msgfmt</filename> program, which all end users will need
    anyway.  To try out your work, follow the applicable portions of
    the installation instructions.
-->
本章是有关软件工具的，不会评判你的语言能力。理论上，你只需要一个文本编辑器。
但这种情况只存在于你不想看看自己翻译的消息的情况下，这种情况很难发生吧。
在你配置你的源程序的时候，记住要使用<option>--enable-nls</option>选项。
这样也会检查 <application>libintl</application> 库和 <filename>msgfmt</filename> 
程序，它们是所有最终用户都需要的东西。
要试验你的工作，遵照安装指导中相应的部分就可以了。
   </para>

   <para>
<!--
    If you want to start a new translation effort or want to do a
    message catalog merge (described later), you will need the
    programs <filename>xgettext</filename> and
    <filename>msgmerge</filename>, respectively, in a GNU-compatible
    implementation.  Later, we will try to arrange it so that if you
    use a packaged source distribution, you won't need
    <filename>xgettext</filename>.  (If working from Git, you will still need
    it.)  <application>GNU Gettext 0.10.36</application> or later is currently recommended.
-->
如果你想开始一个新的翻译工作或者想做消息表合并工作(下面描述)，那么你就还分别需要有
 GNU 兼容的 <filename>xgettext</filename> 和 <filename>msgmerge</filename> 。
稍后将试着整理它，这样，如果你使用的是一个打包的源码发布，那么你就不再需
要 <filename>xgettext</filename>(从 Git 里下源码还是需要的)。现在推荐
 <application>GNU Gettext 0.10.36</application> 或者更高版本。
   </para>

   <para>
<!--
    Your local gettext implementation should come with its own
    documentation.  Some of that is probably duplicated in what
    follows, but for additional details you should look there.
-->
你的本地 gettext 实现应该和它自身的文档在一起发布。
其中有一些可能和下面的内容重复，但如果要知道额外的细节，你应该看看它们。
   </para>
  </sect2>

  <sect2>
<!--
   <title>Concepts</title>
-->
   <title>概念</title>

   <para>
<!--
    The pairs of original (English) messages and their (possibly)
    translated equivalents are kept in <firstterm>message
    catalogs</firstterm>, one for each program (although related
    programs can share a message catalog) and for each target
    language.  There are two file formats for message catalogs:  The
    first is the <quote>PO</quote> file (for Portable Object), which
    is a plain text file with special syntax that translators edit.
    The second is the <quote>MO</quote> file (for Machine Object),
    which is a binary file generated from the respective PO file and
    is used while the internationalized program is run.  Translators
    do not deal with MO files; in fact hardly anyone does.
-->
消息原文(英语)和它们的(可能)翻译过的等价物都放在<firstterm>消息表</firstterm>
里，每个程序一个(不过相关的程序可以共享一个消息表)以及每种目标语言一个。
消息表有两种文件格式：第一种是<quote>PO</quote>(可移植对象)文件，它是纯文本文件，
带一些翻译者编辑的特殊语法。第二种是<quote>MO</quote>(机器对象)文件，
它是从相应的 PO 文件生成的二进制文件，在国际化了的程序运行的时候使用。
翻译者并不处理 MO 文件；实际上几乎没人处理它。
   </para>

   <para>
<!--
    The extension of the message catalog file is to no surprise either
    <filename>.po</filename> or <filename>.mo</filename>.  The base
    name is either the name of the program it accompanies, or the
    language the file is for, depending on the situation.  This is a
    bit confusing.  Examples are <filename>psql.po</filename> (PO file
    for psql) or <filename>fr.mo</filename> (MO file in French).
-->
消息表的文件扩展名分别是 <filename>.po</filename> 或 <filename>.mo</filename> 
就一点也不奇怪了。主文件名要么是它对应的程序名，要么是该文件适用的语言，
视情况而定。这种做法有点让人混淆。比如 <filename>psql.po</filename>
(psql 的 PO 文件)或者 <filename>fr.mo</filename> (法语的 MO 文件)。
   </para>

   <para>
<!--
    The file format of the PO files is illustrated here:
-->
    PO 文件的文件格式如下所示：
<programlisting>
# comment

msgid "original string"
msgstr "translated string"

msgid "more original"
msgstr "another translated"
"string can be broken up like this"

...
</programlisting>
<!--
    The msgid's are extracted from the program source.  (They need not
    be, but this is the most common way.)  The msgstr lines are
    initially empty and are filled in with useful strings by the
    translator.  The strings can contain C-style escape characters and
    can be continued across lines as illustrated.  (The next line must
    start at the beginning of the line.)
-->
msgid 是从程序源代码中抽取的(其实不必是从源码，但这是最常用的方法)。
msgstr 行初始为空，由翻译者填充有用的字符串。
该字符串可以包含 C 风格的转义字符并且可以像演示的那样跨行继续。
下一行必须从该行的开头开始。
   </para>

   <para>
<!--
    The # character introduces a comment.  If whitespace immediately
    follows the # character, then this is a comment maintained by the
    translator.  There can also be automatic comments, which have a
    non-whitespace character immediately following the #.  These are
    maintained by the various tools that operate on the PO files and
    are intended to aid the translator.
-->
#字符引入一个注释。如果 # 后面紧跟着空白，那么这是翻译者维护的注释。
文件里也可能有自动注释，它们是在 # 后面紧跟着非空白字符。
这些是由各种在 PO 文件上操作的工具生成的，主要目的是帮助翻译者。
<programlisting>
#. automatic comment
#: filename.c:1023
#, flags, flags
</programlisting>
<!--
    The #. style comments are extracted from the source file where the
    message is used.  Possibly the programmer has inserted information
    for the translator, such as about expected alignment.  The #:
    comment indicates the exact location(s) where the message is used
    in the source.  The translator need not look at the program
    source, but he can if there is doubt about the correct
    translation.  The #, comments contain flags that describe the
    message in some way.  There are currently two flags:
    <literal>fuzzy</literal> is set if the message has possibly been
    outdated because of changes in the program source.  The translator
    can then verify this and possibly remove the fuzzy flag.  Note
    that fuzzy messages are not made available to the end user.  The
    other flag is <literal>c-format</literal>, which indicates that
    the message is a <function>printf</function>-style format
    template.  This means that the translation should also be a format
    string with the same number and type of placeholders.  There are
    tools that can verify this, which key off the c-format flag.
-->
#.风格的注释是从使用消息的源文件中抽取的。
程序员可能已经插入了一些消息给翻译者，比如那些预期的格式等。
#: 注释表示该消息在源程序中使用的准确位置。
翻译者不需要查看程序源文件，不过如果他觉得翻译得不对劲，那么他也可以查看。
#, 注释包含从某种程度上描述消息的标志。
目前有两个标志：如果该消息因为程序源文件的修改变得过时了，那么设置 <literal>fuzzy</literal>(模糊)标志。
翻译者然后就可以核实这些，然后可能删除这个fuzzy标志。请注意fuzzy消息是最终用户不可见的。
另外一个标志 <literal>c-format</literal>, 表示该消息是一个 
<function>printf</function> 风格的格式模版。
这就意味着翻译也应该是一个格式化字符串，带有相同数目和相同类型的占位符。
有用于核实这些的工具，它们生成 c 风格标志的键。
   </para>
  </sect2>

  <sect2>
<!--
   <title>Creating and Maintaining Message Catalogs</title>
-->
   <title>创建和维护消息表</title>

   <para>
<!--
    OK, so how does one create a <quote>blank</quote> message
    catalog?  First, go into the directory that contains the program
    whose messages you want to translate.  If there is a file
    <filename>nls.mk</filename>, then this program has been prepared
    for translation.
-->
好，那怎么创建一<quote>空白</quote>的消息表呢?
首先，进入包含你想翻译消息的程序所在的目录。
如果那里有一个文件叫 <filename>nls.mk</filename> ，那么这个程序就已经准备好翻译了。
   </para>

   <para>
<!--
    If there are already some <filename>.po</filename> files, then
    someone has already done some translation work.  The files are
    named <filename><replaceable>language</replaceable>.po</filename>,
    where <replaceable>language</replaceable> is the
    <ulink url="http://www.loc.gov/standards/iso639-2/php/English_list.php">
    ISO 639-1 two-letter language code (in lower case)</ulink>, e.g.,
    <filename>fr.po</filename> for French.  If there is really a need
    for more than one translation effort per language then the files
    can also be named
    <filename><replaceable>language</replaceable>_<replaceable>region</replaceable>.po</filename>
    where <replaceable>region</replaceable> is the
    <ulink url="http://www.iso.org/iso/country_names_and_code_elements">
    ISO 3166-1 two-letter country code (in upper case)</ulink>,
    e.g.,
    <filename>pt_BR.po</filename> for Portuguese in Brazil.  If you
    find the language you wanted you can just start working on that
    file.
-->
如果目录里已经有一些 <filename>.po</filename> 文件了，那么就是有人已经做了一些翻译工作了。
这些文件是用 <filename><replaceable>language</replaceable>.po</filename> 命名的，
这里的 <replaceable>language</replaceable> 是<ulink url="http://www.loc.gov/standards/iso639-2/php/English_list.php">
ISO 639-1 规定的两字母语言代码(小写)</ulink> ，比如 <filename>fr.po</filename> 指的是法语。
如果每种语言需要多过一种的翻译，那么这些文件也可以叫做
<filename><replaceable>language</replaceable>_<replaceable>region</replaceable>.po</filename>
这里的<replaceable>region</replaceable> 是 <ulink url="http://www.iso.org/iso/country_names_and_code_elements">ISO 3166-1 规定的两字母国家代码(大写)</ulink>，
比如 <filename>pt_BR.po</filename> 指的是巴西葡萄牙语。如果你找到了你想要的语言文件，那么你就可以在那个文件上干活。
   </para>

   <para>
<!--
    If you need to start a new translation effort, then first run the
    command:
-->
如果你需要开始一个新的翻译工作，那么首先运行下面的命令
<programlisting>
make init-po
</programlisting>
<!--
    This will create a file
    <filename><replaceable>progname</replaceable>.pot</filename>.
    (<filename>.pot</filename> to distinguish it from PO files that
    are <quote>in production</quote>. The <literal>T</> stands for
    <quote>template</>.)
    Copy this file to
    <filename><replaceable>language</replaceable>.po</filename> and
    edit it.  To make it known that the new language is available,
    also edit the file <filename>nls.mk</filename> and add the
    language (or language and country) code to the line that looks like:
-->
这样将创建一个文件<filename><replaceable>progname</replaceable>.pot</filename>。
(用<filename>.pot</filename>和<quote>生产中</quote>使用的 PO 文件区分开。
<literal>T</>代表<quote>template</>。)
把这个文件拷贝成<filename><replaceable>language</replaceable>.po</filename> 
然后编辑它。要让程序知道有新语言可以用，还要编辑文件 <filename>nls.mk</filename> 
以增加该语言(或者语言和国家)代码到类似下面这样的行：
<programlisting>
AVAIL_LANGUAGES := de fr
</programlisting>
<!--
    (Other languages can appear, of course.)
-->
（当然可能还有其它国家。）  
   </para>

   <para>
<!--
    As the underlying program or library changes, messages might be
    changed or added by the programmers.  In this case you do not need
    to start from scratch.  Instead, run the command:
-->
随着下层的程序或者库的改变，程序员可能修改或者增加消息。
这个时候，你不必从头再来。只需要运行下面的命令
<programlisting>
make update-po
</programlisting>
<!--
    which will create a new blank message catalog file (the pot file
    you started with) and will merge it with the existing PO files.
    If the merge algorithm is not sure about a particular message it
    marks it <quote>fuzzy</quote> as explained above.  The new PO file
    is saved with a <filename>.po.new</filename> extension.
-->
它将创建一个新的空消息表文件(你开始时用的 pot 文件)并且会把它和现有的 PO 文件合并起来。
如果合并算法不能确定某条具体的消息是否合并正确，那么它就会像上面解释那样把它定义为<quote>fuzzy</quote>(模糊)。
新的PO文件会保存为带 <filename>.po.new</filename> 扩展的文件。
   </para>
  </sect2>

  <sect2>
<!--
   <title>Editing the PO Files</title>
-->
   <title>编辑 PO 文件</title>

   <para>
<!--
    The PO files can be edited with a regular text editor.  The
    translator should only change the area between the quotes after
    the msgstr directive, add comments, and alter the fuzzy flag.
    There is (unsurprisingly) a PO mode for Emacs, which I find quite
    useful.
-->
PO 文件可以用普通的文本编辑器编辑。
翻译者应该只修改那些在 msgstr 指示符后面的双引号中间的内容，也可以增加评注和修改模糊(fuzzy)标志。
Emacs 有一个用于 PO 的模式，我觉得相当好用。
   </para>

   <para>
<!--
    The PO files need not be completely filled in.  The software will
    automatically fall back to the original string if no translation
    (or an empty translation) is available.  It is no problem to
    submit incomplete translations for inclusions in the source tree;
    that gives room for other people to pick up your work.  However,
    you are encouraged to give priority to removing fuzzy entries
    after doing a merge.  Remember that fuzzy entries will not be
    installed; they only serve as reference for what might be the right
    translation.
-->
不需要把 PO 文件完全填满。如果有些字符串没有翻译(或者是一个空白的翻译)，那么软件会自动使用原始的字符串。
也就是说提交一个未完成的翻译包括在源码树中并不是一个问题；那样可以留下让其他人继续你的工作的空间。
不过，鼓励你在完成一次合并之后首先消除模糊的条目。
要知道模糊的条目是不会被安装的；它们只起到表示可能是正确翻译的引用的作用。
   </para>

   <para>
<!--
    Here are some things to keep in mind while editing the
    translations:
-->
下面是一些编辑翻译消息的时候要记住的事情：
    <itemizedlist>
     <listitem>
      <para>
<!--
       Make sure that if the original ends with a newline, the
       translation does, too.  Similarly for tabs, etc.
-->
确保如果原始消息是以换行结尾的话，翻译后的消息也如此。类似的情况适用于 tab 等。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       If the original is a <function>printf</> format string, the translation
       also needs to be.  The translation also needs to have the same
       format specifiers in the same order.  Sometimes the natural
       rules of the language make this impossible or at least awkward.
       In that case you can modify the format specifiers like this:
-->
如果最初的字符串是 <function>printf</> 格式的字符串，那么翻译串也必须如此。
翻译串还要有同样的格式声明词，并且顺序相同。
有时候语言的自然规则会让这么做几乎不可能或者及其难看。这时候你可以用下面的格式：
<programlisting>
msgstr "Die Datei %2$s hat %1$u Zeichen."
</programlisting>
<!--
       Then the first placeholder will actually use the second
       argument from the list.  The
       <literal><replaceable>digits</replaceable>$</literal> needs to
       follow the % immediately, before any other format manipulators.
       (This feature really exists in the <function>printf</function>
       family of functions.  You might not have heard of it before because
       there is little use for it outside of message
       internationalization.)
-->
这样，第一个占位符实际上使用列表里的第二个参数。
<literal><replaceable>digits</replaceable>$</literal> 应该跟在 % 后面并且在其它格式操作符之前。
这个特性实际上存在于 <function>printf</function> 函数族中。
你可能从来没有听说过它，因为除了消息国际化以外它没有什么用处。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       If the original string contains a linguistic mistake, report
       that (or fix it yourself in the program source) and translate
       normally.  The corrected string can be merged in when the
       program sources have been updated.  If the original string
       contains a factual mistake, report that (or fix it yourself)
       and do not translate it.  Instead, you can mark the string with
       a comment in the PO file.
-->
如果原始的字符串包含语言错误，那么请报告它(或者在程序源文件中直接修补它)，然后按照正常翻译。
正确的字符串可能在程序源文件更新的时候被合并进来。
如果最初的字符串与事实不符，那么请报告它(或者自己修补它)但是不要翻译它。
相反，你可以在 PO 文件中用注解给该字符串做个标记。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       Maintain the style and tone of the original string.
       Specifically, messages that are not sentences (<literal>cannot
       open file %s</literal>) should probably not start with a
       capital letter (if your language distinguishes letter case) or
       end with a period (if your language uses punctuation marks).
       It might help to read <xref linkend="error-style-guide">.
-->
维护风格和原始字符串的语气。特别是那些不成句子的消息(<literal>cannot open file %s</literal>)
可能不应该以大写字符开头(如果你的语言区分大小写的话)或者用句号结束(如果你的语言里有符号标志)。
阅读节<xref linkend="error-style-guide">可能会有所帮助。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       If you don't know what a message means, or if it is ambiguous,
       ask on the developers' mailing list.  Chances are that English
       speaking end users might also not understand it or find it
       ambiguous, so it's best to improve the message.
-->
如果你不知道一条消息是什么意思，或者它很含糊，那么在开发者邮递列表上询问。
因为可能说英语的最终用户也可能不明白它或者觉得它不好理解，所以最好改善这条消息。
      </para>
     </listitem>

    </itemizedlist>
   </para>
  </sect2>

 </sect1>


 <sect1 id="nls-programmer">
<!--
  <title>For the Programmer</title>
-->
  <title>寄语程序员</title>

  <sect2 id="nls-mechanics">
<!--
   <title>Mechanics</title>
-->
   <title>机理</title>

  <para>
<!--
   This section describes how to implement native language support in a
   program or library that is part of the
   <productname>PostgreSQL</> distribution.
   Currently, it only applies to C programs.
-->
本节描述如何在属于 <productname>PostgreSQL</> 版本的程序或者库里面支持本地语言。
目前它只适用于 C 语言。
  </para>

  <procedure>
<!--
   <title>Adding NLS Support to a Program</title>
-->
   <title>向程序中增加 NLS 支持</title>

   <step>
    <para>
<!--
     Insert this code into the start-up sequence of the program:
-->
把下面的代码插入到程序的开头：
<programlisting>
#ifdef ENABLE_NLS
#include &lt;locale.h&gt;
#endif

...

#ifdef ENABLE_NLS
setlocale(LC_ALL, "");
bindtextdomain("<replaceable>progname</replaceable>", LOCALEDIR);
textdomain("<replaceable>progname</replaceable>");
#endif
</programlisting>
<!--
     (The <replaceable>progname</replaceable> can actually be chosen
     freely.)
-->
（这里的 <replaceable>progname</replaceable> 实际上可以自由选择。）
    </para>
   </step>

   <step>
    <para>
<!--
     Wherever a message that is a candidate for translation is found,
     a call to <function>gettext()</function> needs to be inserted.  E.g.:
-->
如果发现一条需要翻译的消息，那么就需要插入一个对 <function>gettext()</function> 的调用。比如
<programlisting>
fprintf(stderr, "panic level %d\n", lvl);
</programlisting>
<!--
     would be changed to:
-->
会改成
<programlisting>
fprintf(stderr, gettext("panic level %d\n"), lvl);
</programlisting>
<!--
     (<symbol>gettext</symbol> is defined as a no-op if NLS support is
     not configured.)
-->
（如果没有配置 NLS ，那么 <symbol>gettext</symbol> 会定义成空操作。）
    </para>

    <para>
<!--
     This tends to add a lot of clutter.  One common shortcut is to use:
-->
这么干会出现一堆东西。一种常用的缩写是
<programlisting>
#define _(x) gettext(x)
</programlisting>
<!--
     Another solution is feasible if the program does much of its
     communication through one or a few functions, such as
     <function>ereport()</function> in the backend.  Then you make this
     function call <function>gettext</function> internally on all
     input strings.
-->
如果程序只通过一个或者少数几个函数做大部分的消息传递，比如后端里的 <function>ereport()</function> ，
那么也可以用另外一个方法。在这些函数的内部对所有输入字符串调用 <function>gettext</function> 。
    </para>
   </step>

   <step>
    <para>
<!--
     Add a file <filename>nls.mk</filename> in the directory with the
     program sources.  This file will be read as a makefile.  The
     following variable assignments need to be made here:
-->
在程序源代码所在的目录里加一个文件 <filename>nls.mk</filename> 。
这个文件将被当做 makefile 读取。在这里需要做下面一些变量的赋值：
     <variablelist>
      <varlistentry>
       <term><varname>CATALOG_NAME</varname></term>

       <listitem>
        <para>
<!--
         The program name, as provided in the
         <function>textdomain()</function> call.
-->
那些在 <function>textdomain()</function> 调用里提供的程序的名字。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><varname>AVAIL_LANGUAGES</varname></term>

       <listitem>
        <para>
<!--
         List of provided translations &mdash; initially empty.
-->
提供的翻译的语言列表，开始的时候是空的。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><varname>GETTEXT_FILES</varname></term>

       <listitem>
        <para>
<!--
         List of files that contain translatable strings, i.e., those
         marked with <function>gettext</function> or an alternative
         solution.  Eventually, this will include nearly all source
         files of the program.  If this list gets too long you can
         make the first <quote>file</quote> be a <literal>+</literal>
         and the second word be a file that contains one file name per
         line.
-->
一列包含可翻译字符串的文件，也就是那些用 <function>gettext</function> 或者其它相应手段标记了的文件。
最终，这里会包括几乎所有的程序源文件。如果列表太长，你可以把第一个<quote>文件</quote>写成一个
 <literal>+</literal> 和第二个词组成，第二个词是一个文件，在这个文件里每行包含一个文件名。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><varname>GETTEXT_TRIGGERS</varname></term>

       <listitem>
        <para>
<!--
         The tools that generate message catalogs for the translators
         to work on need to know what function calls contain
         translatable strings.  By default, only
         <function>gettext()</function> calls are known.  If you used
         <function>_</function> or other identifiers you need to list
         them here.  If the translatable string is not the first
         argument, the item needs to be of the form
         <literal>func:2</literal> (for the second argument).
         If you have a function that supports pluralized messages,
         the item should look like <literal>func:1,2</literal>
         (identifying the singular and plural message arguments).
-->
生成给翻译者使用的消息表的工具，以便知道哪些函数调用包含可翻译字符串。
缺省时只知道 <function>gettext()</function> 调用。
如果你使用了 <function>_</function> 或其它标识符，那么你需要把它们列在这里。
如果可翻译字符串不是第一个参数，那么该项需要是这样的形式：<literal>func:2</literal> (用于第二给参数)。
如果函数支持多个消息，那么该项看起来就像这样:<literal>func:1,2</literal>(识别单个和多个消息参数)。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </step>

  </procedure>

  <para>
<!--
   The build system will automatically take care of building and
   installing the message catalogs.
-->
编译系统将自动制作和安装消息表。
  </para>
  </sect2>

  <sect2 id="nls-guidelines">
<!--
   <title>Message-writing Guidelines</title>
-->
   <title>消息书写指导</title>

  <para>
<!--
   Here are some guidelines for writing messages that are easily
   translatable.
-->
这里是一些关于如何书写易于翻译的消息的指导：
   <itemizedlist>
    <listitem>
     <para>
<!--
      Do not construct sentences at run-time, like:
-->
不要在运行时构造语句，比如像
<programlisting>
printf("Files were %s.\n", flag ? "copied" : "removed");
</programlisting>
<!--
      The word order within the sentence might be different in other
      languages.  Also, even if you remember to call <function>gettext()</> on
      each fragment, the fragments might not translate well separately.  It's
      better to duplicate a little code so that each message to be
      translated is a coherent whole.  Only numbers, file names, and
      such-like run-time variables should be inserted at run time into
      a message text.
-->
语句里这样的单词顺序会让其它语言很难翻译。
而且，即使你记得在每个片断上调用 <function>gettext()</>，这些片断也不一定能很好地独立翻译。
最好复制一些代码，好让每条消息可以当作有机的整体进行翻译。
只有数字，文件名和类似的运行时变量才应该在运行时插入消息文本。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      For similar reasons, this won't work:
-->
出于类似的原因，下面的东西不能用：
<programlisting>
printf("copied %d file%s", n, n!=1 ? "s" : "");
</programlisting>
<!--
      because it assumes how the plural is formed.  If you figured you
      could solve it like this:
-->
因为它假设了如何形成复数形。如果你看到这样的东西，你可以用下面方法解决
<programlisting>
if (n==1)
    printf("copied 1 file");
else
    printf("copied %d files", n):
</programlisting>
<!--
      then be disappointed.  Some languages have more than two forms,
      with some peculiar rules.  It's often best to design the message
      to avoid the issue altogether, for instance like this:
-->
不过还是有让人失望的时候，有些语言在某些特殊规则上有超过两种形式。
通常最好是通过消息的设计避免这些东西，比如你可以这样写：
<programlisting>
printf("number of copied files: %d", n);
</programlisting>
     </para>

     <para>
<!--
      If you really want to construct a properly pluralized message,
      there is support for this, but it's a bit awkward.  When generating
      a primary or detail error message in <function>ereport()</>, you can
      write something like this:
-->
如果你真的要构造一条恰当的复数形消息，也是支持的，但形式上有一点笨拙。
比如当通过<function>ereport()</>生成一条概要或者详细消息时，你可以这样写：
<programlisting>
errmsg_plural("copied %d file",
              "copied %d files",
              n,
              n)
</programlisting>
<!--
      The first argument is the format string appropriate for English
      singular form, the second is the format string appropriate for
      English plural form, and the third is the integer control value
      that determines which plural form to use.  Subsequent arguments
      are formatted per the format string as usual.  (Normally, the
      pluralization control value will also be one of the values to be
      formatted, so it has to be written twice.)  In English it only
      matters whether <replaceable>n</> is 1 or not 1, but in other
      languages there can be many different plural forms.  The translator
      sees the two English forms as a group and has the opportunity to
      supply multiple substitute strings, with the appropriate one being
      selected based on the run-time value of <replaceable>n</>.
-->
第一个参数是对应英文单数形的格式字符串，第二个参数是对应英文复数形的格式字符串，第三个参数是决定是否是复数形的一个整数值。
随后的参数和通常一样对应与格式字符串中的参数值。（通常，控制复数形的值也是格式字符串中的其中一个参数。）
英语中只关心<replaceable>n</>是不是1，但其它语言中可能有多个复数形。
针对英文中作为一组的2个格式字符串，翻译者能够为根据<replaceable>n</>的运行值选中的恰当的那个提供多个替代字符串。
     </para>

     <para>
<!--
      If you need to pluralize a message that isn't going directly to an
      <function>errmsg</> or <function>errdetail</> report, you have to use
      the underlying function <function>ngettext</>.  See the gettext
      documentation.
-->
如果你需要一条不直接调用<function>errmsg</>或<function>errdetail</>的复数形消息，
必须使用下层的<function>ngettext</>函数。具体参考gettext的文档。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      If you want to communicate something to the translator, such as
      about how a message is intended to line up with other output,
      precede the occurrence of the string with a comment that starts
      with <literal>translator</literal>, e.g.:
-->
如果你想和翻译者进行交流，比如说一条消息是如何与其它输出对齐的，那么在该字符串出现之前，放上一条以 <literal>translator</literal> 开头的注释，比如
<programlisting>
/* translator: This message is not what it seems to be. */
</programlisting>
<!--
      These comments are copied to the message catalog files so that
      the translators can see them.
-->
这些注释都拷贝到消息表文件里，这样翻译者就可以看见它们了。
     </para>
    </listitem>
   </itemizedlist>
  </para>
  </sect2>
 </sect1>

</chapter>

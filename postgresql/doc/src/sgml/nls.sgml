<!-- doc/src/sgml/nls.sgml -->

<chapter id="nls">
<<<<<<< HEAD

<!--
 <title>Native Language Support</title>
-->
 <title>本地语言支持</title>
=======
 <title>本国语言支持</title>
>>>>>>> upstream/master

 <sect1 id="nls-translator">
  <title>给翻译者</title>

  <para>
   <productname>PostgreSQL</>程序（服务器和客户端）可以用你最喜欢的语言发出它们的消息 &mdash; 如果消息已经被翻译过。常见和维护已翻译的消息集需要以该语言为母语并且愿意为<productname>PostgreSQL</>做贡献的人们的帮助。要做这些你根本不需要成为一个程序员。本节将解释如何来帮助我们。
  </para>

  <sect2>
   <title>需求</title>

   <para>
    我们将不会判断你的语言技巧 &mdash; 这一节是关于软件工具。理论上，你只需要一个文本编辑器。但是这仅仅是最少见的情况：你不想试验你的已翻译好的消息。当你配置你的源代码树时，一定要使用<option>--enable-nls</option>选项。这将也会检查<application>libintl</application>库和<filename>msgfmt</filename>程序，这些是所有终端用户将会需要的。要试验你的工作，请按安装指导的相应部分进行。
   </para>

   <para>
    如果你想开始一个新的翻译工作或想做一次消息目录合并（在后面描述），你将分别需要程序<filename>xgettext</filename>和<filename>msgmerge</filename>的 GNU 兼容的实现。稍后，我们将试着安排它这样如果你使用一个打包好的源代码发布，你将不需要<filename>xgettext</filename>（如果使用来自 Git 的发布，你仍将需要它）。我们目前推荐<application>GNU Gettext 0.10.36</application>或更高版本。
   </para>

   <para>
    你的本地 gettext 实现应该有其自身的文档。其中的某些可能与接下来的内容重复，但是你应该看看来了解更多细节。
   </para>
  </sect2>

  <sect2>
   <title>概念</title>

   <para>
    原始（英语）消息和它们（可能的）已翻译等价物组成的对被保持在<firstterm>消息目录</firstterm>中，每个程序（尽管相关程序可以共享一个消息目录）以及每个目标语言一个目录。消息目录有两种文件格式：第一种是<quote>PO</quote>文件（用于可移植对象），它是一个翻译者编辑的具有特殊语法的普通文本文件。第二种是<quote>MO</quote>文件（用于机器对象），它是从相应的 PO 文件生成的一个二进制文件并且在国际化程序运行时使用。翻译者不需要处理 MO 文件；事实上几乎没有人这样做。
   </para>

   <para>
    消息目录文件的扩展名不出意料地是<filename>.po</filename>或<filename>.mo</filename>。基础名要么是与之合作的程序名，要么是该文件的语言名称，取决于具体情况。这有一点让人困惑。例子是<filename>psql.po</filename>（用于 psql 的 PO 文件）或<filename>fr.mo</filename>（法语的 MO 文件）。
   </para>

   <para>
    PO 文件的文件格式示例如下：
<programlisting>
# comment

msgid "original string"
msgstr "translated string"

msgid "more original"
msgstr "another translated"
"string can be broken up like this"

...
</programlisting>
    msgid 被从程序源代码中抽取（不是必须这样做，但是这是最常用的方法）。msgstr 行最初是空的并且被翻译者用以填充有用的字符串。字符串可以包含 C 风格的逃逸字符并且可以跨越行（下一行必须开始于行首）。
   </para>

   <para>
    # 字符引入一个注释。如果空白紧跟着 # 字符，那么这是一个由翻译者维护的注释。也可能有自动注释，它在 # 后紧跟一个非空白字符。这些由多种操作 PO 文件并且意图辅助翻译者的多种工具维护。
<programlisting>
#. automatic comment
#: filename.c:1023
#, flags, flags
</programlisting>
    #. 风格的注释是从使用消息的源文件中抽取而来。有可能程序员已经为翻译者插入了信息，例如关于期望的对齐。#: 注释指示该消息在源代码中被使用的确切位置。翻译者不需要查看程序源代码，但是如果有关于正确翻译的疑问，他也能够去查看。#, 注释包含以某种方法描述该消息的标志。当前有两种标志：如果该消息可能由于程序源码中的改变而过时，则<literal>fuzzy</literal>被设置。翻译者则可以验证这个标识并且可能移除 fuzzy 标志。注意 fuzzy 消息不会对终端用户可用。另一种标志是<literal>c-格式</literal>，它指示该消息是一个<function>printf</function>-风格的格式模板。这意味着翻译也应当是一个格式字符串，其中有相同个数和相同类型的占位符。有工具能验证这点，它会切断该 c-格式标志。
   </para>
  </sect2>

  <sect2>
   <title>创建并维护消息目录</title>

   <para>
    好，那么我们如何创建一个<quote>空的</quote>消息目录呢？首先，进入到包含你希望翻译其消息的程序的目录中。如果那里有一个文件<filename>nls.mk</filename>，那么这个程序就已经准备好被翻译了。
   </para>

   <para>
    如果已经有某些<filename>.po</filename>文件，那么有些人已经完成了一些翻译工作。这些文件被命名为<filename><replaceable>语言</replaceable>.po</filename>，其中<replaceable>语言</replaceable>是<ulink url="http://www.loc.gov/standards/iso639-2/php/English_list.php">
    ISO 639-1 双字符语言代码（小写形式）</ulink>，例如法语是<filename>fr.po</filename>。如果真的对于一种语言有需要多个翻译任务那么这些文件也可以被命名为<filename><replaceable>语言</replaceable>_<replaceable>区域</replaceable>.po</filename>，其中<replaceable>region</replaceable>是
    <ulink url="http://www.iso.org/iso/country_names_and_code_elements">
    ISO 3166-1 双字符国家代码（大写形式）</ulink>，例如巴西的葡萄牙语是<filename>pt_BR.po</filename>。如果你找到了你想要的语言，你就可以开始在那个文件上工作了。
   </para>

   <para>
    如果你需要开始一项新的翻译工作，那么首先运行命令：
<programlisting>
make init-po
</programlisting>
    这将创建一个文件
    <filename><replaceable>程序名</replaceable>.pot</filename>（<filename>.pot</filename>用来把它与<quote>在生产中的</quote> PO 文件区分开。<literal>T</>表示<quote>template</>）。将这个文件拷贝到<filename><replaceable>语言</replaceable>.po</filename>并编辑它。要让让人知道新语言可用，还要编辑文件<filename>nls.mk</filename>并且增加该语言（或语言与国家）代码到如下的行中：
<programlisting>
AVAIL_LANGUAGES := de fr
</programlisting>
    （当然可以出现其他的语言）。
   </para>

   <para>
    如果底层程序或库改变，消息可能会被程序员改变或增加。在这种情况中，你不需要从头开始。相反，运行命令：
<programlisting>
make update-po
</programlisting>
    它将创建一个新的空白消息目录文件（你从其开始的 pot 文件）并且将把它合并到现有的 PO 文件中。如果合并算法不确定一个特定的消息，它会把该消息标记为如上所释的<quote>fuzzy</quote>。新的 PO 文件会被保存为一个<filename>.po.new</filename>扩展名。
   </para>
  </sect2>

  <sect2>
   <title>编辑 PO 文件</title>

   <para>
    PO 文件可以用一个常规文本编辑器编辑。翻译者应该只改变 msgstr 指令之后引号之间的区域、增加注释并且修改 fuzzy 标志。Emacs 有一个 PO 模式（不出意料），我们觉得它非常有用。
   </para>

   <para>
    PO 文件不需要被完全填充。如果无翻译（或一个空翻译）可用，该软件将自动回退到原始的字符串。提交一个未完成的翻译包含到源码树中不存在问题，那样可以让其他人有机会继续你的工作。不过，我们鼓励你在做完合并之后优先移除模糊项。记住模糊项将不会被安装，它们只作为什么可能是正确翻译的参考。
   </para>

   <para>
    这里有一些在编辑翻译时要记住的事情：
    <itemizedlist>
     <listitem>
      <para>
       确定如果原始消息以一个新行结束，那么翻译后的消息也要保持一样。制表符等也类似。
      </para>
     </listitem>

     <listitem>
      <para>
       如果原始消息是一个<function>printf</>格式字符串，翻译消息也需要是那样。翻译也需要保留相同顺序的格式指示符。有时语言的自然规则让这样做不可能或者至少很尴尬。在那样的情况下，你可以这样修改格式指示符：
<programlisting>
msgstr "Die Datei %2$s hat %1$u Zeichen."
</programlisting>
       那么第一个占位符将实际上使用列表中的第二个参数。<literal><replaceable>digits</replaceable>$</literal>需要在任何其他格式操纵符之前紧跟 %（这个特性真实地存在于<function>printf</function>函数族中。你可能之前没有听说过它，因为除消息国际化之外很少会用到它）。
      </para>
     </listitem>

     <listitem>
      <para>
       如果原始字符串包含一个语法错误，报告它（或者在程序源码中自己修复它）并且正常进行翻译。更正过的字符串可以在程序源码已被更新时合并。如果原始字符串包含一个事实错误，报告它（或自己修复它）并且不要翻译它。相反，你可以在 PO 文件中对该字符串标注一个注释。
      </para>
     </listitem>

     <listitem>
      <para>
       保持原始字符串的风格和语气。特别地，不是句子的消息（<literal>cannot open file %s</literal>）可能不以一个大写字母开始（如果你的语言区分字母大小写）或者一个句号结尾（如果你的语言使用标点符号）。阅读<xref linkend="error-style-guide">可能有所帮助。
      </para>
     </listitem>

     <listitem>
      <para>
       如果你不知道一个消息的含义，或者如果它是模棱两可的，在开发者邮件列表中询问其正确含义。如果说英语的终端用户可能也无法理解它或者发现它是模棱两可的，那么最好改进该消息。
      </para>
     </listitem>

    </itemizedlist>
   </para>
  </sect2>

 </sect1>


 <sect1 id="nls-programmer">
  <title>给编程者</title>

  <sect2 id="nls-mechanics">
   <title>技术</title>

  <para>
   这一节描述如何在<productname>PostgreSQL</>发布中的一个程序或库中实现本地语言支持。当前，这些知识只适用于 C 程序。
  </para>

  <procedure>
   <title>为一个程序增加 NLS 支持</title>

   <step>
    <para>
     将这里的代码插入到该程序的启动序列中：
<programlisting>
#ifdef ENABLE_NLS
#include &lt;locale.h&gt;
#endif

...

#ifdef ENABLE_NLS
setlocale(LC_ALL, "");
bindtextdomain("<replaceable>progname</replaceable>", LOCALEDIR);
textdomain("<replaceable>progname</replaceable>");
#endif
</programlisting>
     （<replaceable>程序名</replaceable>实际上可以自由选择）。
    </para>
   </step>

   <step>
    <para>
     不管在哪里找到一个可被翻译的消息，需要插入一个<function>gettext()</function>调用，例如：
<programlisting>
fprintf(stderr, "panic level %d\n", lvl);
</programlisting>
     将被改成：
<programlisting>
fprintf(stderr, gettext("panic level %d\n"), lvl);
</programlisting>
     （如果 NLS 支持没有被配置，<symbol>gettext</symbol>被定义为一个空操作）。
    </para>

    <para>
     这容易增加很多混乱。一种常用的捷径是：
<programlisting>
#define _(x) gettext(x)
</programlisting>
     如果该程序通过一个或几个函数（例如后端中的<function>ereport()</function>）完成他的大部分通信，则有另一种可行的解决方案。那么你可以在所有输入字符串上都内部调用这个函数<function>gettext</function>。
    </para>
   </step>

   <step>
    <para>
     在程序源码的目录中增加一个文件<filename>nls.mk</filename>。这个文件将被读作一个 makefile。其中要创建下列变量赋值：

     <variablelist>
      <varlistentry>
       <term><varname>CATALOG_NAME</varname></term>

       <listitem>
        <para>
         程序名，如<function>textdomain()</function>调用中所提供的。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><varname>AVAIL_LANGUAGES</varname></term>

       <listitem>
        <para>
         提供的翻译列表 &mdash; 初始为空。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><varname>GETTEXT_FILES</varname></term>

       <listitem>
        <para>
         包含可翻译字符串的文件列表，即那些被用<function>gettext</function>或另一种替代方案标记的文件。最终，这将包括该程序近乎所有的源文件。如果这个列表太长你可以让第一个<quote>file</quote>变成一个<literal>+</literal>并且第二个词变成一个包含那些文件名的文件，第二个词指向的文件中每个文件名一行。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><varname>GETTEXT_TRIGGERS</varname></term>

       <listitem>
        <para>
         为翻译者产生在其上工作的消息目录的工具需要知道，哪些函数调用包含可翻译的字符串。默认情况下，只有<function>gettext()</function>调用是已知的。如果你使用<function>_</function>或其他标识符，你需要在这里列出它们。如果可翻译的字符串不是第一个参数，该条目需要是形式<literal>func:2</literal>（用于第二个参数）。如果你有一个支持复数消息的函数，该条目应该看起来像<literal>func:1,2</literal>（标识单数和复数消息参数）。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </step>

  </procedure>

  <para>
   构建系统将自动处理消息目录的编译和安装。
  </para>
  </sect2>

  <sect2 id="nls-guidelines">
   <title>消息书写指南</title>

  <para>
   下面是一些书写已于翻译的消息的指南。

   <itemizedlist>
    <listitem>
     <para>
      不要在运行时构建句子，如：
<programlisting>
printf("Files were %s.\n", flag ? "copied" : "removed");
</programlisting>
      该句子中的词序可能在其他语言中完全不同。同样，即使你记得在每一个片段上调用<function>gettext()</>，片段也可能不会被独立翻译得很好。更好的方式是复制一点代码，这样每个消息将被以一个整体被翻译。只有数字、文件名和这样的运行时变量才应该被在运行时插入到一个消息文本中。
     </para>
    </listitem>

    <listitem>
     <para>
      由于类似的原因，下面的例子也不会工作：
<programlisting>
printf("copied %d file%s", n, n!=1 ? "s" : "");
</programlisting>
      因为它假定了复数形式。如果你发现了这个问题，你可以这样解决它：
<programlisting>
if (n==1)
    printf("copied 1 file");
else
    printf("copied %d files", n):
</programlisting>
      然后会失望。某些语言有多于两种形式，使用某些古怪的规则。通常最好设计消息来避免一次性避免该问题，例如像这样：
<programlisting>
printf("number of copied files: %d", n);
</programlisting>
     </para>

     <para>
      如果你真的想要构建一个正确的复数消息，有对此的支持，但是有点笨拙。当在<function>ereport()</>中产生一个主要或细节错误消息时，你可以这样写一些东西：
<programlisting>
errmsg_plural("copied %d file",
              "copied %d files",
              n,
              n)
</programlisting>
      第一个参数是适用于英语单数形式的格式字符串，第二个参数是适用于英语复数形式的格式字符串，并且第三个参数是控制使用哪种复数形式的整数。后续参数针对每个格式字符串按照常规被格式化（通常，复数控制值也将是要被格式化的值之一，因此它必须被写两次）。在英语中只有<replaceable>n</>是否唯一有关系，但是在其他语言中可以有多种不同的复数形式。翻译者将两种英语形式看成一组并且有机会提供多个替补字符串，基于<replaceable>n</>的运行时值会选择其中合适的那一个。
     </para>

     <para>
      如果你需要复数化一个不直接进入到<function>errmsg</>或<function>errdetail</>报告的消息，你必须使用底层函数<function>ngettext</>。见 gettext 文档。
     </para>
    </listitem>

    <listitem>
     <para>
      如果你想要与翻译者沟通（例如关于一个消息如何在其他输出上对齐），在该字符串出现的地方之前放上一个以<literal>translator</literal>开始的注释，例如：
<programlisting>
/* translator: This message is not what it seems to be. */
</programlisting>
      这些注释被复制到消息目录文件中，这样翻译者可以看到它们。
     </para>
    </listitem>
   </itemizedlist>
  </para>
  </sect2>
 </sect1>

</chapter>

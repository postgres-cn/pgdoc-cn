<!-- doc/src/sgml/pgcrypto.sgml -->

<sect1 id="pgcrypto" xreflabel="pgcrypto">
 <title>pgcrypto</title>

 <indexterm zone="pgcrypto">
  <primary>pgcrypto</primary>
 </indexterm>

 <indexterm zone="pgcrypto">
  <primary>encryption</primary>
  <secondary>for specific columns</secondary>
 </indexterm>

 <para>
  <filename>pgcrypto</>模块为<productname>PostgreSQL</>提供了密码函数。
 </para>

 <sect2>
  <title>普通哈希函数</title>

  <sect3>
   <title><function>digest()</function></title>

   <indexterm>
    <primary>digest</primary>
   </indexterm>

<synopsis>
digest(data text, type text) 返回 bytea
digest(data bytea, type text) 返回 bytea
</synopsis>

   <para>
    计算一个给定<parameter>data</>的一个二进制哈希值。<parameter>type</>是要使用的算法。标准算法是<literal>md5</literal>、<literal>sha1</literal>、<literal>sha224</literal>、<literal>sha256</literal>、<literal>sha384</literal>和<literal>sha512</literal>。如果使用 OpenSSL 编译了<filename>pgcrypto</>，如<xref linkend="pgcrypto-with-without-openssl">中所述，有更多算法可用。
   </para>

   <para>
    如果你想摘要成为一个十六进制字符串，可以在结果上使用<function>encode()</>。例如：
<programlisting>
CREATE OR REPLACE FUNCTION sha1(bytea) returns text AS $$
    SELECT encode(digest($1, 'sha1'), 'hex')
$$ LANGUAGE SQL STRICT IMMUTABLE;
</programlisting>
   </para>
  </sect3>

  <sect3>
   <title><function>hmac()</function></title>

   <indexterm>
    <primary>hmac</primary>
   </indexterm>

<synopsis>
hmac(data text, key text, type text) 返回 bytea
hmac(data bytea, key text, type text) 返回 bytea
</synopsis>

   <para>
    为带有密钥<parameter>key</>的<parameter>data</>计算哈希过的 MAC。<parameter>type</>与<function>digest()</>中相同。
   </para>

   <para>
    这与<function>digest()</>相似，但是该哈希只能在知晓密钥的情况下被重新计算出来。这阻止了某人修改数据且还想更改哈希以匹配之的企图。
   </para>

   <para>
    如果该密钥大于哈希块的尺寸，它将先被哈希然后把结果用作密钥。
   </para>
  </sect3>
 </sect2>

 <sect2>
  <title>口令哈希函数</title>

  <para>
   函数<function>crypt()</>和<function>gen_salt()</>是特别设计用来做口令哈希的。<function>crypt()</>完成哈希，而<function>gen_salt()</>负责为前者准备算法参数。
  </para>

  <para>
   <function>crypt()</>中的算法在以下方面不同于通常的 MD5 或 SHA1 哈希算法：
  </para>

  <orderedlist>
   <listitem>
    <para>
     它们很慢。由于数据量很小，这是增加蛮力口令破解难度的唯一方法。
    </para>
   </listitem>
   <listitem>
    <para>
     它们使用一个随机值（称为<firstterm>salt</>），这样具有相同口令的用户将得到不同的密文口令。这也是针对逆转算法的一种额外保护。
    </para>
   </listitem>
   <listitem>
    <para>
     它们会在结果中包括算法类型，这样用不同算法哈希的口令能共存。
    </para>
   </listitem>
   <listitem>
    <para>
     其中一些是自适应的 &mdash; 这意味着当计算机变得更快时，你可以调整该算法变得更慢，而不会产生与现有口令的不兼容。
    </para>
   </listitem>
  </orderedlist>

  <para>
   <xref linkend="pgcrypto-crypt-algorithms">列出了<function>crypt()</function>函数所支持的算法。
  </para>

  <table id="pgcrypto-crypt-algorithms">
   <title><function>crypt()</>支持的算法</title>
   <tgroup cols="6">
    <thead>
     <row>
      <entry>算法</entry>
      <entry>最大口令长度</entry>
      <entry>自适应？</entry>
      <entry>Salt 位数</entry>
      <entry>输出长度</entry>
      <entry>描述</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>bf</></entry>
      <entry>72</entry>
      <entry>yes</entry>
      <entry>128</entry>
      <entry>60</entry>
      <entry>基于 Blowfish，变体 2a</entry>
     </row>
     <row>
      <entry><literal>md5</></entry>
      <entry>unlimited</entry>
      <entry>no</entry>
      <entry>48</entry>
      <entry>34</entry>
      <entry>基于 MD5 的加密</entry>
     </row>
     <row>
      <entry><literal>xdes</></entry>
      <entry>8</entry>
      <entry>yes</entry>
      <entry>24</entry>
      <entry>20</entry>
      <entry>扩展的 DES</entry>
     </row>
     <row>
      <entry><literal>des</></entry>
      <entry>8</entry>
      <entry>no</entry>
      <entry>12</entry>
      <entry>13</entry>
      <entry>原生 UNIX 加密</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <sect3>
   <title><function>crypt()</></title>

   <indexterm>
    <primary>crypt</primary>
   </indexterm>

<synopsis>
crypt(password text, salt text) 返回 text
</synopsis>

   <para>
    计算<parameter>password</>的一个 crypt(3) 风格的哈希。在存储一个新口令时，你需要使用<function>gen_salt()</>产生一个新的<parameter>salt</>值。要检查一个口令，把存储的哈希值作为<parameter>salt</>，并且测试结果是否匹配存储的值。
   </para>
   <para>
    设置一个新口令的例子：
<programlisting>
UPDATE ... SET pswhash = crypt('new password', gen_salt('md5'));
</programlisting>
   </para>
   <para>
    认证的例子：
<programlisting>
SELECT (pswhash = crypt('entered password', pswhash)) AS pswmatch FROM ... ;
</programlisting>
    如果输入的口令正确，这会返回<literal>true</>。
   </para>
  </sect3>

  <sect3>
   <title><function>gen_salt()</></title>

  <indexterm>
   <primary>gen_salt</primary>
  </indexterm>

<synopsis>
gen_salt(type text [, iter_count integer ]) 返回 text
</synopsis>

   <para>
    产生一个在<function>crypt()</>中使用的新随机 salt 字符串。该 salt 字符串也告诉了<function>crypt()</>要使用哪种算法。
   </para>

   <para>
    <parameter>type</>参数指定哈希算法。可接受的类型是：<literal>des</literal>、<literal>xdes</literal>、<literal>md5</literal>以及<literal>bf</literal>。
   </para>

   <para>
    <parameter>iter_count</>参数让用户可以为使用迭代计数的算法指定迭代计数。计数越高，哈希口令花的时间更长并且因而需要更多时间去攻破它。不过使用太高的计数会导致计算一个哈希的时间高达数年 &mdash; 这并不使用。如果<parameter>iter_count</>参数被忽略，将使用默认的迭代计数。允许的<parameter>iter_count</>值与算法相关，如<xref linkend="pgcrypto-icfc-table">所示。
   </para>

   <table id="pgcrypto-icfc-table">
    <title><function>crypt()</>的迭代计数</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>算法</entry>
       <entry>默认值</entry>
       <entry>最小值</entry>
       <entry>最大值</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>xdes</></entry>
       <entry>725</entry>
       <entry>1</entry>
       <entry>16777215</entry>
      </row>
      <row>
       <entry><literal>bf</></entry>
       <entry>6</entry>
       <entry>4</entry>
       <entry>31</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    对<literal>xdes</literal>算法还有额外的限制：迭代计数必须是一个奇数。
   </para>

   <para>
    要选取一个合适的迭代计数，考虑最初的 DES 加密被设计成在当时的硬件上每秒钟完成 4 次哈希。低于每秒 4 次哈希的速度很可能会损害可用性。而超过每秒 100 次哈希又可能太快了。
   </para>

   <para>
    <xref linkend="pgcrypto-hash-speed-table">给出了不同哈希算法的相对慢度的综述。该表展示了在假设口令只含有小写字母或者大小写字母及数字的情况下，在一个 8 字符口令中尝试所有字符组合所需要的时间。在<literal>crypt-bf</literal>项中，在一个斜线之后的数字是<function>gen_salt</function>的<parameter>iter_count</parameter>参数
   </para>

   <table id="pgcrypto-hash-speed-table">
    <title>哈希算法速度</title>
    <tgroup cols="5">
     <thead>
      <row>
       <entry>算法</entry>
       <entry>次哈希/秒</entry>
       <entry>对于<literal>[a-z]</></entry>
       <entry>对于<literal>[A-Za-z0-9]</></entry>
       <entry>相对于<literal>md5 hash</>的持续时间</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>crypt-bf/8</></entry>
       <entry>1792</entry>
       <entry>4 年</entry>
       <entry>3927 年</entry>
       <entry>100k</entry>
      </row>
      <row>
       <entry><literal>crypt-bf/7</></entry>
       <entry>3648</entry>
       <entry>2 年</entry>
       <entry>1929 年</entry>
       <entry>50k</entry>
      </row>
      <row>
       <entry><literal>crypt-bf/6</></entry>
       <entry>7168</entry>
       <entry>1 年</entry>
       <entry>982 年</entry>
       <entry>25k</entry>
      </row>
      <row>
       <entry><literal>crypt-bf/5</></entry>
       <entry>13504</entry>
       <entry>188 天</entry>
       <entry>521 年</entry>
       <entry>12.5k</entry>
      </row>
      <row>
       <entry><literal>crypt-md5</></entry>
       <entry>171584</entry>
       <entry>15 天</entry>
       <entry>41 年</entry>
       <entry>1k</entry>
      </row>
      <row>
       <entry><literal>crypt-des</></entry>
       <entry>23221568</entry>
       <entry>157.5 分</entry>
       <entry>108 天</entry>
       <entry>7</entry>
      </row>
      <row>
       <entry><literal>sha1</></entry>
       <entry>37774272</entry>
       <entry>90 分</entry>
       <entry>68 天</entry>
       <entry>4</entry>
      </row>
      <row>
       <entry><literal>md5</> (hash)</entry>
       <entry>150085504</entry>
       <entry>22.5 分</entry>
       <entry>17 天</entry>
       <entry>1</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    注意：
   </para>

   <itemizedlist>
    <listitem>
     <para>
     使用的机器是一台 Intel Mobile Core i3。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>crypt-des</>和<literal>crypt-md5</>算法的数字是取自 John the Ripper v1.6.38 <literal>-test</>输出。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>md5 hash</>的数字来自于 mdcrack 1.2。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>sha1</>的数字来自于 lcrack-20031130-beta.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>crypt-bf</literal>的数字是采用一个在 1000 个 8 字符口令上循环的简单程序采集到的。用那种方法我能展示不同迭代次数的速度。供参考：<literal>john-test</literal>对于<literal>crypt-bf/5</>显示 213 次循环/秒（结果中的微小差异符合<filename>pgcrypto</>中的<literal>crypt-bf</literal>实现与 John the Ripper 中的一致这一情况）。
     </para>
    </listitem>
   </itemizedlist>

   <para>
    注意<quote>尝试所有组合</quote>并非是现实中会采用的方式。通常口令破解都是在词典的帮助下完成的，词典中会包含常用词以及它们的多种变化。因此，甚至有些像词的口令被破解的时间可能会大大小于上面建议的数字，而一个 6 字符的不像词的口令可能会逃过破解，也可能不能逃脱。
   </para>
  </sect3>
 </sect2>

 <sect2>
  <title>PGP 加密函数</title>

  <para>
   这里的函数实现了OpenPGP (RFC 4880) 标准的加密部分。对称密钥和公钥加密都被支持。
  </para>

  <para>
   一个加密的 PGP 消息由两个部分或者<firstterm>包</>组成：
  </para>
  <itemizedlist>
   <listitem>
    <para>
     包含一个会话密钥的包 &mdash; 加密过的对称密钥或者公钥。
    </para>
   </listitem>
   <listitem>
    <para>
     包含用会话密钥加密过的数据的包。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   当用一个对称密钥（即一个口令）加密时：
  </para>
  <orderedlist>
   <listitem>
    <para>
     给定的口令被使用一个 String2Key (S2K) 算法哈希。这更像<function>crypt()</>算法 &mdash; 有目的地慢并且使用随机 salt &mdash; 但是它会产生一个全长度的二进制密钥。
    </para>
   </listitem>
   <listitem>
    <para>
     如果要求一个独立的会话密钥，将会生成一个新的随机密钥。否则该 S2K 密钥将被直接用作会话密钥。
    </para>
   </listitem>
   <listitem>
    <para>
     如果直接使用 S2K 密钥，那么只有 S2K 设置将被放入会话密钥包中。否则会话密钥会用 S2K 密钥加密并且放入会话密钥包中。
    </para>
   </listitem>
  </orderedlist>

  <para>
   当使用一个公共密钥加密时：
  </para>
  <orderedlist>
   <listitem>
    <para>
     一个新的随机会话密钥会被生成。
    </para>
   </listitem>
   <listitem>
    <para>
     它被用公共密钥加密并且放入到会话密钥包中。
    </para>
   </listitem>
  </orderedlist>

  <para>
   在两种情况下，要被加密的数据按下列步骤被处理：
  </para>
  <orderedlist>
   <listitem>
    <para>
     可选的数据操纵：压缩、转换成 UTF-8 或者行末转换。
    </para>
   </listitem>
   <listitem>
    <para>
     数据会被加上一个随机字节的块作为前缀。这等效于使用一个随机 IV。
    </para>
   </listitem>
   <listitem>
    <para>
     追加一个随机前缀和数据的 SHA1 哈希。
    </para>
   </listitem>
   <listitem>
    <para>
     所有这些都用会话密钥加密并且放在数据包中。
    </para>
   </listitem>
  </orderedlist>

  <sect3>
   <title><function>pgp_sym_encrypt()</function></title>

   <indexterm>
    <primary>pgp_sym_encrypt</primary>
   </indexterm>

   <indexterm>
    <primary>pgp_sym_encrypt_bytea</primary>
   </indexterm>

<synopsis>
pgp_sym_encrypt(data text, psw text [, options text ]) 返回 bytea
pgp_sym_encrypt_bytea(data bytea, psw text [, options text ]) 返回 bytea
</synopsis>
   <para>
    使用一个对称 PGP 密钥 <parameter>psw</>加密<parameter>data</>。<parameter>options</>参数可以包含下文所述的选项设置。
   </para>
  </sect3>

  <sect3>
   <title><function>pgp_sym_decrypt()</function></title>

   <indexterm>
    <primary>pgp_sym_decrypt</primary>
   </indexterm>

   <indexterm>
    <primary>pgp_sym_decrypt_bytea</primary>
   </indexterm>

<synopsis>
pgp_sym_decrypt(msg bytea, psw text [, options text ]) 返回 text
pgp_sym_decrypt_bytea(msg bytea, psw text [, options text ]) 返回 bytea
</synopsis>
   <para>
    解密一个用对称密钥加密过的 PGP 消息。
   </para>
   <para>
    不允许使用<function>pgp_sym_decrypt</>解密<type>bytea</>数据。这是为了避免输出非法的字符数据。使用<function>pgp_sym_decrypt_bytea</>解密原始文本数据是好的。
   </para>
   <para>
    <parameter>options</>参数可以包含下文所述的选项设置。
   </para>
  </sect3>

  <sect3>
   <title><function>pgp_pub_encrypt()</function></title>

   <indexterm>
    <primary>pgp_pub_encrypt</primary>
   </indexterm>

   <indexterm>
    <primary>pgp_pub_encrypt_bytea</primary>
   </indexterm>

<synopsis>
pgp_pub_encrypt(data text, key bytea [, options text ]) 返回 bytea
pgp_pub_encrypt_bytea(data bytea, key bytea [, options text ]) 返回 bytea
</synopsis>
   <para>
    用一个公共 PGP 密钥 <parameter>key</>加密<parameter>data</>。给这个函数一个私钥会产生一个错误。
   </para>
   <para>
    <parameter>options</>参数可以包含下文所述的选项设置。
   </para>
  </sect3>

  <sect3>
   <title><function>pgp_pub_decrypt()</function></title>

   <indexterm>
    <primary>pgp_pub_decrypt</primary>
   </indexterm>

   <indexterm>
    <primary>pgp_pub_decrypt_bytea</primary>
   </indexterm>

<synopsis>
pgp_pub_decrypt(msg bytea, key bytea [, psw text [, options text ]]) 返回 text
pgp_pub_decrypt_bytea(msg bytea, key bytea [, psw text [, options text ]]) 返回 bytea
</synopsis>
   <para>
    解密一个公共密钥加密的消息。<parameter>key</>必须是对应于用来加密的公钥的私钥。如果私钥是用口令保护的，你必须在<parameter>psw</>中给出该口令。如果没有口令，但你想要指定选项，你需要给出一个空口令。
   </para>
   <para>
    不允许使用<function>pgp_pub_decrypt</>解密<type>bytea</>数据。这是为了避免输出非法的字符数据。使用<function>pgp_pub_decrypt_bytea</>解密原始文本数据是好的。
   </para>
   <para>
    <parameter>options</>参数可以包含下文所述的选项设置。
   </para>
  </sect3>

  <sect3>
   <title><function>pgp_key_id()</function></title>

   <indexterm>
    <primary>pgp_key_id</primary>
   </indexterm>

<synopsis>
pgp_key_id(bytea) 返回 text
</synopsis>
   <para>
    <function>pgp_key_id</>抽取一个 PGP 公钥或私钥的密钥 ID。或者如果给定了一个加密过的消息，它给出一个用来加密数据的密钥 ID。
   </para>
   <para>
    它能够返回 2 个特殊密钥 ID：
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>SYMKEY</>
     </para>
     <para>
      该消息是用一个对称密钥加密的。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>ANYKEY</>
     </para>
     <para>
      该消息是用公钥加密的，但是密钥 ID 已经被移除。这意味着你将需要尝试你所有的密钥来看看哪个能解密该消息。<filename>pgcrypto</>本身不产生这样的消息。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    注意不同的密钥可能具有相同的 ID。这很少见但是是一种正常事件。客户端应用则应该尝试用每一个去解密，看看哪个合适 &mdash; 像处理<literal>ANYKEY</>一样。
   </para>
  </sect3>

  <sect3>
   <title><function>armor()</function>, <function>dearmor()</function></title>

   <indexterm>
    <primary>armor</primary>
   </indexterm>

   <indexterm>
    <primary>dearmor</primary>
   </indexterm>

<synopsis>
armor(data bytea) 返回 text
dearmor(data text) 返回 bytea
</synopsis>
   <para>
    这些函数把二进制数据包装/解包成 PGP ASCII-保护 格式，其基本上是带有 CRC 和额外格式化的 Base64。
   </para>
  </sect3>

  <sect3>
   <title>PGP 函数的选项</title>

   <para>
    选项被命名为与 GnuPG 类似的形式。一个选项的值应该在一个等号后给出，各个选项之间用逗号分隔。例如：
<programlisting>
pgp_sym_encrypt(data, psw, 'compress-algo=1, cipher-algo=aes256')
</programlisting>
   </para>

   <para>
    除了<literal>convert-crlf</literal>之外所有这些选项只适用于加密函数。解密函数会从 PGP 数据中得到这些参数。
   </para>

   <para>
    最有趣的选项可能是<literal>compress-algo</literal>和<literal>unicode-mode</literal>。其余的应该可以使用合理的默认值。
   </para>

  <sect4>
   <title>cipher-algo</title>

   <para>
    要用哪个密码算法。
   </para>
<literallayout>
值：bf, aes128, aes192, aes256 (只用于 OpenSSL：<literal>3des</literal>, <literal>cast5</literal>)
默认：aes128
适用于：pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>compress-algo</title>

   <para>
    要使用哪种压缩算法。只有<productname>PostgreSQL</productname>编译时使用了 zlib 时才可用。
   </para>
<literallayout>
值：
  0 - 不压缩
  1 - ZIP 压缩
  2 - ZLIB 压缩 （= ZIP 外加元数据和块 CRC）
默认：0
适用于：pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>compress-level</title>

   <para>
    压缩多少。级别越高压缩得越小但是速度也越慢。0 表示禁用压缩。
   </para>
<literallayout>
值：0, 1-9
默认：6
适用于：pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>convert-crlf</title>

   <para>
    加密时是否把<literal>\n</literal>转换成<literal>\r\n</literal>以及解密时是否把<literal>\r\n</literal>转换成<literal>\n</literal>。RFC 4880 指定文本数据存储时应该使用<literal>\r\n</literal>换行。使用这个选项能够得到完全 RFC 兼容的行为。
   </para>
<literallayout>
值：0, 1
默认：0
适用于：pgp_sym_encrypt, pgp_pub_encrypt, pgp_sym_decrypt, pgp_pub_decrypt
</literallayout>
  </sect4>

  <sect4>
   <title>disable-mdc</title>

   <para>
    不用 SHA-1 保护数据。使用这个选项的唯一好的理由是实现与古董级别 PGP 产品的兼容，这些产品在受 SHA-1 保护的包被加入到 RFC 4880 之前就已经存在了。最近的 gnupg.org 和 pgp.com 软件能很好地支持它。
   </para>
<literallayout>
值：0，1
默认：0
适用于：pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>sess-key</title>

   <para>
    使用单独的会话密钥。公钥加密总是使用一个单独的会话密钥。这个选项是用于对称密钥加密的，对称密钥加密默认直接使用 S2K 密钥。
   </para>
<literallayout>
值：0，1
默认：0
适用于：pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>s2k-mode</title>

   <para>
    要使用哪一种 S2K 算法。
   </para>
<literallayout>
值：
  0 - 不用 salt。危险！
  1 - 用 salt 但是使用固定的迭代计数。
  3 - 可变的迭代计数。
默认：3
适用于：pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>s2k-digest-algo</title>

   <para>
    要在 S2K 计算中使用哪种摘要算法。
   </para>
<literallayout>
值：md5, sha1
默认：sha1
适用于：pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>s2k-cipher-algo</title>

   <para>
    要用哪种密码来加密独立的会话密钥。
   </para>
<literallayout>
值：bf, aes, aes128, aes192, aes256
默认：use cipher-algo
适用于：pgp_sym_encrypt
</literallayout>
  </sect4>

  <sect4>
   <title>unicode-mode</title>

   <para>
    是否把文本数据在数据库内部编码和 UTF-8 之间来回转换。如果你的数据库已经是 UTF-8，将不会转换，但是消息将被标记为 UTF-8。没有这个选项它将不会被标记。
   </para>
<literallayout>
值：0，1
默认：0
适用于：pgp_sym_encrypt, pgp_pub_encrypt
</literallayout>
  </sect4>
  </sect3>

 <sect3>
  <title>用 GnuPG 生成 PGP 密钥</title>

  <para>
   要生成一个新密钥：
<programlisting>
gpg --gen-key
</programlisting>
  </para>
  <para>
   更好的密钥类型是<quote>DSA 和 Elgamal</>。
  </para>
  <para>
   对于 RSA 密钥，你必须创建仅用于签名的 DSA 或 RSA 密钥作为主控密钥，然后用<literal>gpg --edit-key</literal>增加一个 RSA 加密子密钥。
  </para>
  <para>
   要列举密钥：
<programlisting>
gpg --list-secret-keys
</programlisting>
  </para>
  <para>
   要以 ASCII-保护格式导出一个公钥：
<programlisting>
gpg -a --export KEYID > public.key
</programlisting>
  </para>
  <para>
   要以 ASCII-保护格式导出一个私钥：
<programlisting>
gpg -a --export-secret-keys KEYID > secret.key
</programlisting>
  </para>
  <para>
   在把这些密钥交给 PGP 函数之前，你需要对它们使用<function>dearmor()</>。或者如果你能处理二进制数据，你可以从命令中去掉<literal>-a</literal>。
  </para>
  <para>
   更多细节请参考<literal>man gpg</literal>、
   <ulink url="http://www.gnupg.org/gph/en/manual.html">The GNU
   Privacy Handbook</ulink>以及
   <ulink url="http://www.gnupg.org"></ulink>上的其他文档。
  </para>
 </sect3>

 <sect3>
  <title>PGP 代码的限制</title>

  <itemizedlist>
   <listitem>
    <para>
    不支持签名。这也意味着它不检查加密子密钥是否属于主控密钥。
    </para>
   </listitem>
   <listitem>
    <para>
    不支持加密密钥作为主控密钥。由于通常并不鼓励那种用法，这应该不是问题。
    </para>
   </listitem>
   <listitem>
    <para>
    不支持多个子密钥。这可能看起来像一个问题，因为在实践中普遍需要多个子密钥。在另一方面，你不能把你的常规 GPG/PGP 密钥用于<filename>pgcrypto</>，而是创建一些新的密钥，因为使用场景相当不同。
    </para>
   </listitem>
  </itemizedlist>
  </sect3>
 </sect2>

 <sect2>
  <title>原始的加密函数</title>

  <para>
   这些函数只在数据上运行一次加密，它们不具有 PGP 加密的任何先进特性。因此它们有一些主要的问题：
  </para>
  <orderedlist>
   <listitem>
    <para>
    它们直接把用户密钥用作加密密钥。
    </para>
   </listitem>
   <listitem>
    <para>
    它们不提供任何完整性检查来查看被加密数据是否被修改。
    </para>
   </listitem>
   <listitem>
    <para>
    它们希望用户自己管理所有加密参数，甚至是 IV。
    </para>
   </listitem>
   <listitem>
    <para>
    它们无法处理文本。
    </para>
   </listitem>
  </orderedlist>
  <para>
   因此，在介绍了 PGP 加密后，我们不鼓励使用原始的加密函数。
  </para>

  <indexterm>
   <primary>encrypt</primary>
  </indexterm>

  <indexterm>
   <primary>decrypt</primary>
  </indexterm>

  <indexterm>
   <primary>encrypt_iv</primary>
  </indexterm>

  <indexterm>
   <primary>decrypt_iv</primary>
  </indexterm>

<synopsis>
encrypt(data bytea, key bytea, type text) 返回 bytea
decrypt(data bytea, key bytea, type text) 返回 bytea

encrypt_iv(data bytea, key bytea, iv bytea, type text) 返回 bytea
decrypt_iv(data bytea, key bytea, iv bytea, type text) 返回 bytea
</synopsis>

  <para>
   使用<parameter>type</parameter>指定的密码方法加密/解密数据。<parameter>type</parameter>字符串的语法是：

<synopsis>
<replaceable>algorithm</> <optional> <literal>-</> <replaceable>mode</> </optional> <optional> <literal>/pad:</> <replaceable>padding</> </optional>
</synopsis>
   其中<replaceable>algorithm</>是下列之一：

  <itemizedlist>
   <listitem><para><literal>bf</literal> &mdash; Blowfish</para></listitem>
   <listitem><para><literal>aes</literal> &mdash; AES (Rijndael-128)</para></listitem>
  </itemizedlist>
   并且<replaceable>mode</>是下列之一：
  <itemizedlist>
   <listitem>
    <para>
    <literal>cbc</literal> &mdash; 下一个块依赖前一个（默认）
    </para>
   </listitem>
   <listitem>
    <para>
    <literal>ecb</literal> &mdash; 每一个块被独立加密（只用于测试）
    </para>
   </listitem>
  </itemizedlist>
   并且<replaceable>padding</>是下列之一：
  <itemizedlist>
   <listitem>
    <para>
    <literal>pkcs</literal> &mdash; 数据可以是任意长度（默认）
    </para>
   </listitem>
   <listitem>
    <para>
    <literal>none</literal> &mdash; 数据必须是密码块尺寸的倍数
    </para>
   </listitem>
  </itemizedlist>
  </para>
  <para>
   因此，例如这些是等效的：
<programlisting>
encrypt(data, 'fooz', 'bf')
encrypt(data, 'fooz', 'bf-cbc/pad:pkcs')
</programlisting>
  </para>
  <para>
   在<function>encrypt_iv</>和<function>decrypt_iv</>中，<parameter>iv</>参数是 CBC 模式的初始值，ECB 会忽略它。如果不是准确的块尺寸，它会被修剪或用零填充。在没有这个参数的函数中，它的值都被默认为零。
  </para>
 </sect2>

 <sect2>
  <title>随机数据函数</title>

  <indexterm>
   <primary>gen_random_bytes</primary>
  </indexterm>

<synopsis>
gen_random_bytes(count integer) 返回 bytea
</synopsis>
  <para>
   返回<parameter>count</>个密码上强壮的随机字节。一次最多可以抽取 1024 个字节。这是为了避免耗尽随机数发生池。
  </para>
  
  <indexterm>
   <primary>gen_random_uuid</primary>
  </indexterm>

<synopsis>
gen_random_uuid() 返回 uuid
</synopsis>
  <para>
   返回一个版本 4 的（随机的）UUID。
  </para>
 </sect2>

 <sect2>
  <title>注解</title>

  <sect3>
   <title>配置</title>

   <para>
    <filename>pgcrypto</>会根据查找主 PostgreSQL <literal>configure</literal>脚本配置它自身。影响它的选项是<literal>--with-zlib</literal>以及<literal>--with-openssl</literal>。
   </para>

   <para>
    在编译了 zlib 时，PGP 加密函数能够在加密前压缩数据。
   </para>

   <para>
    在编译了 OpenSSL 时，会有更多可用算法。公钥加密函数也会更快，因为 OpenSSL 有优化得更好的 BIGNUM 函数。
   </para>

   <table id="pgcrypto-with-without-openssl">
    <title>使用和不用 OpenSSL 的功能总结</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>功能</entry>
       <entry>内建</entry>
       <entry>使用 OpenSSL</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>MD5</entry>
       <entry>yes</entry>
       <entry>yes</entry>
      </row>
      <row>
       <entry>SHA1</entry>
       <entry>yes</entry>
       <entry>yes</entry>
      </row>
      <row>
       <entry>SHA224/256/384/512</entry>
       <entry>yes</entry>
       <entry>yes (注意 1)</entry>
      </row>
      <row>
       <entry>其他摘要算法</entry>
       <entry>no</entry>
       <entry>yes (注意 2)</entry>
      </row>
      <row>
       <entry>Blowfish</entry>
       <entry>yes</entry>
       <entry>yes</entry>
      </row>
      <row>
       <entry>AES</entry>
       <entry>yes</entry>
       <entry>yes (注意 3)</entry>
      </row>
      <row>
       <entry>DES/3DES/CAST5</entry>
       <entry>no</entry>
       <entry>yes</entry>
      </row>
      <row>
       <entry>原始加密</entry>
       <entry>yes</entry>
       <entry>yes</entry>
      </row>
      <row>
       <entry>PGP 对称加密</entry>
       <entry>yes</entry>
       <entry>yes</entry>
      </row>
      <row>
       <entry>PGP 公钥加密</entry>
       <entry>yes</entry>
       <entry>yes</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    注意：
   </para>

   <orderedlist>
    <listitem>
     <para>
      SHA2 算法是在版本 0.9.8 时被加入到 OpenSSL 的。对于旧版本，<filename>pgcrypto</>将使用内建的代码。
     </para>
    </listitem>
    <listitem>
     <para>
      OpenSSL 支持的任何摘要算法都是自动选取的。这对于使用密码来说是不可能的，因为需要被显式地支持。
     </para>
    </listitem>
    <listitem>
     <para>
      AES 从版本 0.9.7 就开始被包括在 OpenSSL 中。对于旧版本，<filename>pgcrypto</>将使用内建的代码。
     </para>
    </listitem>
   </orderedlist>
  </sect3>

  <sect3>
   <title>NULL 处理</title>

   <para>
    按照 SQL 中的标准，只要任何参数是 NULL， 所有的函数都会返回 NULL。在不当使用时这可能会导致安全风险。
   </para>
  </sect3>

  <sect3>
   <title>安全性限制</title>

   <para>
    所有<filename>pgcrypto</>函数都在数据库服务器内部运行。这意味着在<filename>pgcrypto</>和客户端应用之间移动的所有数据和口令都是明文。因此，你必须：
   </para>

   <orderedlist>
    <listitem>
     <para>本地连接或者使用 SSL 连接。</para>
    </listitem>
    <listitem>
     <para>信任系统管理员和数据库管理员。</para>
    </listitem>
   </orderedlist>

   <para>
    如果你不能这样做，那么最好在客户端应用中进行加密。
   </para>
   
   <para>
    该实现无法抵抗
    <ulink url="http://en.wikipedia.org/wiki/Side-channel_attack">
    侧信道攻击</ulink>。例如，一个<filename>pgcrypto</>解密函
    数完成所需的时间是随着密文尺寸变化的。
   </para>
  </sect3>

  <sect3>
   <title>有益的读物</title>

   <itemizedlist>
    <listitem>
     <para><ulink url="http://www.gnupg.org/gph/en/manual.html"></ulink></para>
     <para>The GNU Privacy Handbook.</para>
    </listitem>
    <listitem>
     <para><ulink url="http://www.openwall.com/crypt/"></ulink></para>
     <para>描述 crypt-blowfish 算法。</para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://www.stack.nl/~galactus/remailers/passphrase-faq.html"></ulink>
     </para>
     <para>如何选取一个好的口令。</para>
    </listitem>
    <listitem>
     <para><ulink url="http://world.std.com/~reinhold/diceware.html"></ulink></para>
     <para>选择口令的有趣的想法。</para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://www.interhack.net/people/cmcurtin/snake-oil-faq.html"></ulink>
     </para>
     <para>描述好的和不好的加密。</para>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3>
   <title>技术性参考</title>

   <itemizedlist>
    <listitem>
     <para><ulink url="http://www.ietf.org/rfc/rfc4880.txt"></ulink></para>
     <para>OpenPGP 消息格式。</para>
    </listitem>
    <listitem>
     <para><ulink url="http://www.ietf.org/rfc/rfc1321.txt"></ulink></para>
     <para>MD5 消息摘要算法。</para>
    </listitem>
    <listitem>
     <para><ulink url="http://www.ietf.org/rfc/rfc2104.txt"></ulink></para>
     <para>HMAC：用于消息认证的钥控哈希。</para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://www.usenix.org/events/usenix99/provos.html"></ulink>
     </para>
     <para>crypt-des、crypt-md5 以及 bcrypt 算法的比较。</para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://en.wikipedia.org/wiki/Fortuna_(PRNG)"></ulink>
     </para>
     <para>Fortuna CSPRNG 的描述。</para>
    </listitem>
    <listitem>
     <para><ulink url="http://jlcooke.ca/random/"></ulink></para>
     <para>Linux 的 Jean-Luc Cooke Fortuna-based <filename>/dev/random</>驱动。</para>
    </listitem>
    <listitem>
     <para><ulink url="http://research.cyber.ee/~lipmaa/crypto/"></ulink></para>
     <para>密码学线索的集合。</para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2>
  <title>作者</title>

  <para>
   Marko Kreen <email>markokr@gmail.com</email>
  </para>

  <para>
   <filename>pgcrypto</filename>使用了来自下列源码的代码：
  </para>

  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>算法</entry>
      <entry>作者</entry>
      <entry>源码起源</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>DES crypt</entry>
      <entry>David Burren 等</entry>
      <entry>FreeBSD libcrypt</entry>
     </row>
     <row>
      <entry>MD5 crypt</entry>
      <entry>Poul-Henning Kamp</entry>
      <entry>FreeBSD libcrypt</entry>
     </row>
     <row>
      <entry>Blowfish crypt</entry>
      <entry>Solar Designer</entry>
      <entry>www.openwall.com</entry>
     </row>
     <row>
      <entry>Blowfish cipher</entry>
      <entry>Simon Tatham</entry>
      <entry>PuTTY</entry>
     </row>
     <row>
      <entry>Rijndael cipher</entry>
      <entry>Brian Gladman</entry>
      <entry>OpenBSD sys/crypto</entry>
     </row>
     <row>
      <entry>MD5 hash and SHA1</entry>
      <entry>WIDE Project</entry>
      <entry>KAME kame/sys/crypto</entry>
     </row>
     <row>
      <entry>SHA256/384/512 </entry>
      <entry>Aaron D. Gifford</entry>
      <entry>OpenBSD sys/crypto</entry>
     </row>
     <row>
      <entry>BIGNUM math</entry>
      <entry>Michael J. Fromberger</entry>
      <entry>dartmouth.edu/~sting/sw/imath</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>

</sect1>

<!-- doc/src/sgml/xindex.sgml -->

<sect1 id="xindex">
 <title>索引的接口扩展</title>

 <indexterm zone="xindex">
  <primary>index</primary>
  <secondary>for user-defined data type</secondary>
 </indexterm>

  <para>
   迄今为止已经描述的过程让我们能够定义新的类型、新的函数以及新的
   操作符。但是，我们还不能在一种新数据类型的列上定义索引。要做这
   件事情，我们必须为新数据类型定义一个<firstterm>操作符类</>。
   在这一小节稍后的部分，我们将用一个例子阐述这部份内容：一个用于
   B-树索引方法的操作符类，它以绝对值的升序存储和排序复数。
  </para>

  <para>
   操作符类可以被分组成<firstterm>操作符族</>来体现语义兼容的类
   之间的联系。当只涉及到一种单一数据类型时，一个操作符类就足矣。
   因此我们将先把重点放在这种情况上，然后再回到操作符族。
  </para>

 <sect2 id="xindex-opclass">
  <title>索引方法和操作符类</title>

  <para>
   <classname>pg_am</classname>表为每一种索引方法都包含一行
   （内部被称为访问方法）。
   <productname>PostgreSQL</productname>中内建了对表常规
   访问的支持，但是所有的索引方法则是在
   <classname>pg_am</classname>中描述。可以通过定义所需的接口
   例程并且在<classname>pg_am</classname>中创建一行来增加一种
   新的索引方法 &mdash; 但这超出了本章的范围（见
   <xref linkend="indexam">）。
  </para>

  <para>
   一个索引方法的例程并不直接了解它将要操作的数据类型。而是由一个
   <firstterm>操作符类</><indexterm><primary>操作符类</>
   </indexterm>标识索引方法用来操作一种特定数据类型的一组操作。
   之所以被称为操作符类是因为它们指定的一件事情就是可以被用于一个
   索引的<literal>WHERE</>子句操作符集合（即，能被转换成一个索
   引扫描条件）。一个操作符类也能指定一些索引方法内部操作所需的
   <firstterm>支持过程</>，这些过程不能直接对应于能用于索引的任
   何<literal>WHERE</>子句操作符。
  </para>

  <para>
   可以为相同的数据类型和索引方法定义多个操作符类。通过这种方式，
   可以为一种数据类型定义多个索引语义集合。例如，一个B-树索引要求
   在它要操作的每一种数据类型上都定义一个排序顺序。对一种复数数据
   类型来说，拥有一个可以根据复数绝对值排序的 B-树操作符类和另一个
   可以根据实数部分排序的操作符类可能会有用。典型地，其中一个操作
   符类将被认为是最常用的并且将被标记为那种数据类型和索引方法的默
   认操作符类。
  </para>

  <para>
   相同的操作符类名称可以被用于多个不同的索引方法（例如，B-树和
   哈希索引方法都有名为<literal>int4_ops</literal>的操作符类）。
   但是每一个这样的类都是一个独立实体并且必须被单独定义。
  </para>
 </sect2>

 <sect2 id="xindex-strategies">
  <title>索引方法策略</title>

  <para>
   与一个操作符类关联的操作符通过<quote>策略号</>标识，它被用来
   标识每个操作符在其操作符类中的语义。例如，B-树在键上施行了一种
   严格的顺序（较小到较大），因此<quote>小于</>和<quote>大于等于</>
   这样的操作符就是 B-树所感兴趣的。因为
   <productname>PostgreSQL</productname>允许用户定义操作符，
   <productname>PostgreSQL</productname>不能看着一个操作符
   （如<literal>&lt;</>和<literal>&gt;=</>）的名字并且说出它是哪一
   种比较。取而代之的是，索引方法定义了一个<quote>策略</>集合，
   它们可以被看成是广义的操作符。每一个操作符类会说明对于一种特定
   的数据类型究竟是哪个实际的操作符对应于每一种策略以及该索引语义
   的解释。
  </para>

  <para>
   B-树索引方法定义了五种策略，如<xref
   linkend="xindex-btree-strat-table">所示。
  </para>

   <table tocentry="1" id="xindex-btree-strat-table">
    <title>B-树策略</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>操作</entry>
       <entry>策略号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>小于</entry>
       <entry>1</entry>
      </row>
      <row>
       <entry>小于等于</entry>
       <entry>2</entry>
      </row>
      <row>
       <entry>等于</entry>
       <entry>3</entry>
      </row>
      <row>
       <entry>大于等于</entry>
       <entry>4</entry>
      </row>
      <row>
       <entry>大于</entry>
       <entry>5</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   哈希索引只支持等值比较，因此它们只使用一种策略，如
   <xref linkend="xindex-hash-strat-table">所示。
  </para>

   <table tocentry="1" id="xindex-hash-strat-table">
    <title>哈希策略</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>操作</entry>
       <entry>策略号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>等于</entry>
       <entry>1</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   GiST 索引更加灵活：它们根本没有一个固定的策略集合。取而代之的是，
   每一个特定 GiST 操作符类的<quote>consistency</>支持例程会负责解
   释策略号。例如，一些内建的 GiST 索引操作符类索引二维几何对象，它们
   提供<xref linkend="xindex-rtree-strat-table">中所示的
   <quote>R-树</>策略。其中四个是真正的二维测试（重叠、相同、包含、
   被包含），其中四个只考虑 X 方向，其他四个提供 Y 方向上的相同测试。
  </para>

   <table tocentry="1" id="xindex-rtree-strat-table">
    <title>GiST 二维<quote>R-树</> 策略</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>操作</entry>
       <entry>策略号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>左参数严格地位于右参数的左边</entry>
       <entry>1</entry>
      </row>
      <row>
       <entry>左参数不会延伸到右参数的右边</entry>
       <entry>2</entry>
      </row>
      <row>
       <entry>重叠</entry>
       <entry>3</entry>
      </row>
      <row>
       <entry>左参数不会延伸到右参数的左边</entry>
       <entry>4</entry>
      </row>
      <row>
       <entry>左参数严格地位于右参数的右边</entry>
       <entry>5</entry>
      </row>
      <row>
       <entry>相同</entry>
       <entry>6</entry>
      </row>
      <row>
       <entry>包含</entry>
       <entry>7</entry>
      </row>
      <row>
       <entry>被包含</entry>
       <entry>8</entry>
      </row>
      <row>
       <entry>不会延伸到高于</entry>
       <entry>9</entry>
      </row>
      <row>
       <entry>严格低于</entry>
       <entry>10</entry>
      </row>
      <row>
       <entry>严格高于</entry>
       <entry>11</entry>
      </row>
      <row>
       <entry>不会延伸到低于</entry>
       <entry>12</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   SP-GiST 索引在灵活性上与索引相似：它们没有一个固定的策略集合。
   取而代之的是，每一个操作符类的支持例程负责根据该操作符类的定义
   解释策略号。例如，被内建操作符类用于点的策略号如<xref
   linkend="xindex-spgist-point-strat-table">中所示。
  </para>

   <table tocentry="1" id="xindex-spgist-point-strat-table">
    <title>SP-GiST 点策略</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>操作</entry>
       <entry>策略号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>左参数严格地位于右参数的左边</entry>
       <entry>1</entry>
      </row>
      <row>
       <entry>左参数严格地位于右参数的右边</entry>
       <entry>5</entry>
      </row>
      <row>
       <entry>相同</entry>
       <entry>6</entry>
      </row>
      <row>
       <entry>被包含</entry>
       <entry>8</entry>
      </row>
      <row>
       <entry>严格地低于</entry>
       <entry>10</entry>
      </row>
      <row>
       <entry>严格地高于</entry>
       <entry>11</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   GIN 索引与 GiST 和 SP-GiST 索引类似，它们也没有一个固定的策略集合。
   取而代之的是，每一个操作符类的支持例程负责根据该操作符类的定义
   解释策略号。例如，被内建操作符类用于数组的策略号如
   <xref linkend="xindex-gin-array-strat-table">所示。
  </para>

   <table tocentry="1" id="xindex-gin-array-strat-table">
    <title>GIN 数组策略</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>操作</entry>
       <entry>策略号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>重叠</entry>
       <entry>1</entry>
      </row>
      <row>
       <entry>包含</entry>
       <entry>2</entry>
      </row>
      <row>
       <entry>被包含</entry>
       <entry>3</entry>
      </row>
      <row>
       <entry>等于</entry>
       <entry>4</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   注意上文列出的所有操作符都返回布尔值。实际上，所有作为索引方法
   搜索操作符定义的操作符必须返回类型<type>boolean</type>，因为
   它们必须出现在一个<literal>WHERE</>子句的顶层来与一个索引一起
   使用（某些索引访问方法还支持<firstterm>排序操作符</>，它们通常
   不返回布尔值，这种特性在<xref linkend="xindex-ordering-ops">中
   讨论）。
  </para>
 </sect2>

 <sect2 id="xindex-support">
  <title>索引方法支持例程</title>

  <para>
   对于系统来说只有策略信息通常不足以断定如何使用一种索引。实际上，
   为了能工作，索引方法还要求额外的支持例程。例如，B-树索引方法必须
   能比较两个键并且决定其中一个是否大于、等于或小于另一个。类似地，
   哈希索引方法必须能够为键值计算哈希码。这些操作并不对应在 SQL 命令
   的条件中使用的操作符。它们是索引方法在内部使用的管理例程。
  </para>

  <para>
   与策略一样，操作符类会标识哪些函数应该为一种给定的数据类型扮演这些
   角色以及相应的语义解释。索引方法定义它需要的函数集合，而操作符类则
   会通过为函数分配由索引方法说明的<quote>支持函数号</>来标识正确的
   函数。
  </para>

  <para>
   如<xref linkend="xindex-btree-support-table">所示，
   B-树要求一个支持函数，并且根据操作符类作者的选项提供第二个。
  </para>

   <table tocentry="1" id="xindex-btree-support-table">
    <title>B-树支持函数</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>函数</entry>
       <entry>支持号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        比较两个键并且返回一个小于零、等于零或大于零的整数，
        它表示第一个键小于、等于或者大于第二个键。
       </entry>
       <entry>1</entry>
      </row>
      <row>
       <entry>
        按<filename>utils/sortsupport.h</>中的记载，
        返回 C 可调用的排序支持函数的地址（可选）。
       </entry>
       <entry>2</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   如<xref linkend="xindex-hash-support-table">所示，
   哈希索引要求一个支持函数。
  </para>

   <table tocentry="1" id="xindex-hash-support-table">
    <title>哈希支持函数</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>函数</entry>
       <entry>支持号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>为一个键计算哈希值</entry>
       <entry>1</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   如<xref linkend="xindex-gist-support-table">所示，
   GiST 索引要求七个支持函数，还可以选择性地提供第八个（
   详见<xref linkend="GiST">）。
  </para>

   <table tocentry="1" id="xindex-gist-support-table">
    <title>GiST 支持函数</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>函数</entry>
       <entry>描述</entry>
       <entry>支持号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><function>consistent</></entry>
       <entry>判断键是否满足查询修饰语</entry>
       <entry>1</entry>
      </row>
      <row>
       <entry><function>union</></entry>
       <entry>计算一个键集合的联合</entry>
       <entry>2</entry>
      </row>
      <row>
       <entry><function>compress</></entry>
       <entry>计算一个要被索引的键或值的压缩表达</entry>
       <entry>3</entry>
      </row>
      <row>
       <entry><function>decompress</></entry>
       <entry>计算一个压缩键的解压表达</entry>
       <entry>4</entry>
      </row>
      <row>
       <entry><function>penalty</></entry>
       <entry>计算把新键插入到带有给定子树键的子树中带来的罚值</entry>
       <entry>5</entry>
      </row>
      <row>
       <entry><function>picksplit</></entry>
       <entry>判断一个页面中的哪些项要被移动到新页面中
       并且计算结果页面的联合键</entry>
       <entry>6</entry>
      </row>
      <row>
       <entry><function>equal</></entry>
       <entry>比较两个键并且在它们相等时返回真</entry>
       <entry>7</entry>
      </row>
      <row>
       <entry><function>distance</></entry>
       <entry>判断键到查询值的距离（可选）</entry>
       <entry>8</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   如<xref linkend="xindex-spgist-support-table">所示，
   SP-GiST 索引要求五个支持函数（详见<xref linkend="SPGiST">）。
  </para>

   <table tocentry="1" id="xindex-spgist-support-table">
    <title>SP-GiST 支持函数</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>函数</entry>
       <entry>描述</entry>
       <entry>支持号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><function>config</></entry>
       <entry>提供有关该操作符类的基本信息</entry>
       <entry>1</entry>
      </row>
      <row>
       <entry><function>choose</></entry>
       <entry>判断如何把一个新值插入到一个内元组中</entry>
       <entry>2</entry>
      </row>
      <row>
       <entry><function>picksplit</></entry>
       <entry>判断如何划分一组值</entry>
       <entry>3</entry>
      </row>
      <row>
       <entry><function>inner_consistent</></entry>
       <entry>判断对于一个查询需要搜索哪一个子划分</entry>
       <entry>4</entry>
      </row>
      <row>
       <entry><function>leaf_consistent</></entry>
       <entry>判断键是否满足查询修饰语</entry>
       <entry>5</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   如<xref linkend="xindex-gin-support-table">所示，
   GIN 索引要求四个支持函数，还可以选择性地提供第五个（
   详见<xref linkend="GIN">）。
  </para>

   <table tocentry="1" id="xindex-gin-support-table">
    <title>GIN 支持函数</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>函数</entry>
       <entry>描述</entry>
       <entry>支持号</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><function>compare</></entry>
       <entry>
        比较两个键并且返回一个小于零、等于零或大于零的整数，
        它表示第一个键小于、等于或者大于第二个键
       </entry>
       <entry>1</entry>
      </row>
      <row>
       <entry><function>extractValue</></entry>
       <entry>从一个要被索引的值中抽取键</entry>
       <entry>2</entry>
      </row>
      <row>
       <entry><function>extractQuery</></entry>
       <entry>从一个查询条件中抽取键</entry>
       <entry>3</entry>
      </row>
      <row>
       <entry><function>consistent</></entry>
       <entry>
        判断值是否匹配查询条件（布尔变体）
        （如果支持函数 6 存在则是可选的）
       </entry>
       <entry>4</entry>
      </row>
      <row>
       <entry><function>comparePartial</></entry>
       <entry>
        比较来自查询的部分键和来自索引的键，并且返回一个
        小于零、等于零或大于零的整数，表示 GIN 是否应该
        忽略该索引项、把该项当做一个匹配或者停止索引扫描（可选）
       </entry>
       <entry>5</entry>
      </row>
      <row>
       <entry><function>triConsistent</></entry>
       <entry>
        判断值是否匹配查询条件（三元变体）
        （如果支持函数 4 存在则是可选的）
       </entry>
       <entry>6</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
   和搜索操作符不同，支持函数返回特定索引方法所期望的数据类型，例如在
   B 树的比较函数中是一个有符号整数。每个支持函数的参数数量和类型也取
   决于索引方法。对于 B 树和哈希，比较和哈希支持函数和包括在操作符类中
   的操作符接收一样的输入数据类型，但是大部分 GiST、SP-GiST 和 GIN 支
   持函数则不是这样。
  </para>
 </sect2>

 <sect2 id="xindex-example">
  <title>一个例子</title>

  <para>
   现在我们已经看过了基本思想，这里是创建一个新操作符类的例子（可以在
   源代码的<filename>src/tutorial/complex.c</filename>和
   <filename>src/tutorial/complex.sql</filename>中找到这个例子）。
   该操作符类封装了以绝对值顺序排序复数的操作符，因此我们为它取名为
   <literal>complex_abs_ops</literal>。首先，我们需要一个操作符集合。
   定义操作符的过程已经在<xref linkend="xoper">中讨论过。对于一个 B-树
   上的操作符类，我们需要的操作符有：

   <itemizedlist spacing="compact">
    <listitem><simpara>绝对值小于（策略 1）</></>
    <listitem><simpara>绝对值小于等于（策略 2）</></>
    <listitem><simpara>绝对值等于（策略 3）</></>
    <listitem><simpara>绝对值大于等于（策略 4）</></>
    <listitem><simpara>绝对值大于（策略 5）</></>
   </itemizedlist>
  </para>

  <para>
   定义一个比较操作符的相关集合最不容易出错的方式是，先编写 B-树比较支持
   函数，然后编写该支持函数的包装器函数。这降低了极端情况下得到不一致结
   果的几率。遵照这种方法，我们首先编写：

<programlisting><![CDATA[
#define Mag(c)  ((c)->x*(c)->x + (c)->y*(c)->y)

static int
complex_abs_cmp_internal(Complex *a, Complex *b)
{
    double      amag = Mag(a),
                bmag = Mag(b);

    if (amag < bmag)
        return -1;
    if (amag > bmag)
        return 1;
    return 0;
}
]]>
</programlisting>

   现在小于函数看起来像这样：

<programlisting><![CDATA[
PG_FUNCTION_INFO_V1(complex_abs_lt);

Datum
complex_abs_lt(PG_FUNCTION_ARGS)
{
    Complex    *a = (Complex *) PG_GETARG_POINTER(0);
    Complex    *b = (Complex *) PG_GETARG_POINTER(1);

    PG_RETURN_BOOL(complex_abs_cmp_internal(a, b) < 0);
}
]]>
</programlisting>

   其他四个函数的区别只在于它们如何比较内部函数的结果与 0。
  </para>

  <para>
   接下来我们基于这些函数声明 SQL 的函数和操作符：

<programlisting>
CREATE FUNCTION complex_abs_lt(complex, complex) RETURNS bool
    AS '<replaceable>filename</replaceable>', 'complex_abs_lt'
    LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR &lt; (
   leftarg = complex, rightarg = complex, procedure = complex_abs_lt,
   commutator = &gt; , negator = &gt;= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
</programlisting>
   指定正确的交换子和求反器操作符很重要，合适的限制和连接选择度函数
   也是一样，否则优化器将无法有效地利用索引。注意小于、等于和大于情
   况应该使用不同的选择度函数。
  </para>

  <para>
   其他值得注意的事情：

  <itemizedlist>
   <listitem>
    <para>
     只能有一个操作符被命名为<literal>=</literal>且两个操作数都为类型
     <type>complex</type>。在这种要求下，我们对于
     <type>complex</type>没有任何其他操作符<literal>=</literal>。
     但是如果我们是在构建一种实际的数据类型，我们可能想让
     <literal>=</literal>成为复数的普通等值操作（不是绝对值的相等）。
     这样，我们需要为<function>complex_abs_eq</>使用某种其他的
     操作符名称。
    </para>
   </listitem>

   <listitem>
    <para>
     尽管<productname>PostgreSQL</productname>能够处理具有相同
     SQL 名称的函数（只要它们具有不同的参数数据类型），但 C 只能处理
     具有给定名称一个全局函数。因此，我们不能简单地把 C 函数命名为
     <filename>abs_eq</filename>之类的东西。通常，在 C 函数名中包括
     数据类型的名称是一种好习惯，这样就不会与其他数据类型的函数发生冲突。
    </para>
   </listitem>

   <listitem>
    <para>
     我们可以让函数也具有<filename>abs_eq</filename>这样的 SQL 名称，
     而依靠<productname>PostgreSQL</productname>通过参数数据类型
     来区分它和其他同名 SQL 函数。为了保持例子的简洁，我们这里让 C 级别
     和 SQL 级别的函数具有相同的名称。
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <para>
   下一步是注册 B-树所要求的支持例程。实现支持例程的 C 代码例子在包含
   操作符函数的同一文件中。我们这样来声明该函数：

<programlisting>
CREATE FUNCTION complex_abs_cmp(complex, complex)
    RETURNS integer
    AS '<replaceable>filename</replaceable>'
    LANGUAGE C IMMUTABLE STRICT;
</programlisting>
  </para>

  <para>
   现在我们已经有了所需的操作符和支持例程，就可以最终创建操作符类：

<programlisting><![CDATA[
CREATE OPERATOR CLASS complex_abs_ops
    DEFAULT FOR TYPE complex USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       complex_abs_cmp(complex, complex);
]]>
</programlisting>
  </para>

  <para>
   做好了！现在应该可以在<type>complex</type>列上创建并且
   使用 B-树索引了。
  </para>

  <para>
   我们可以把操作符项写得更繁琐，像这样：
<programlisting>
        OPERATOR        1       &lt; (complex, complex) ,
</programlisting>
   但是当操作符操作的数据类型和正在定义的操作符类所服务的
   数据类型相同时可以不用这么做。
  </para>

  <para>
   上述例子假定这个新操作符类是<type>complex</type>数据类型
   的默认 B-树操作符类。如果不是这样，只需要省去关键词
   <literal>DEFAULT</>。
  </para>
 </sect2>

 <sect2 id="xindex-opfamily">
  <title>操作符类和操作符族</title>

  <para>
   到目前为止，我们暗地里假设一个操作符类只处理一种数据类型。虽然在
   一个特定的索引列中必定只有一种数据类型，但是把被索引列与一种不同
   数据类型的值比较的索引操作通常也很有用。还有，如果与一种操作符类
   相关的扩数据类型操作符有用，通常情况是其他数据类型也有其自身相关
   的操作符类。在相关的类之间建立起明确的联系会很有用，因为这可以帮
   助规划器进行 SQL 查询优化（尤其是对于 B-树操作符类，因为规划器包
   含了大量有关如何使用它们的知识）。
  </para>

  <para>
   为了处理这些需求，<productname>PostgreSQL</productname>
   使用了<firstterm>操作符族</>的概念<indexterm><primary>operator family</></indexterm>。
   一个操作符族包含一个或者多个操作符类，并且也能包含属于该族整体而
   不属于该族中任何单一类的可索引操作符和相应的支持函数。我们说这样的
   操作符和函数是<quote>松散地</>存在于该族中，而不是被绑定在一个
   特定的类中。通常每个操作符类包含单一数据类型的操作符，而跨数据类型
   操作符则松散地存在于操作符族中。
  </para>

  <para>
   一个操作符族中的所有操作符和函数必须具有兼容的语义，其中的兼容性要
   求由索引方法设定。你可能因此而奇怪为什么要这么麻烦地把族的特定子集
   单另出来成为操作符类，并且实际上（由于很多原因）这种划分与操作符之
   间没有什么直接的关联，只有操作符族才是实际的分组。定义操作符类的原
   因是，它们指定了特定索引对操作符族的依赖程度。如果一个索引使用着一
   个操作符类，那么不删除该索引是不能删除该操作符类的 &mdash; 但是操作符族的
   其他部分（即其他操作符类和松散的操作符）可以被删除。因此，一个操作
   符类应该包含一个索引在特定数据类型上正常工作所需要的最小操作符和函
   数集合，而相关但不关键的操作符可以作为操作符族的松散成员被加入。
  </para>

  <para>
   例如，<productname>PostgreSQL</productname>有一个内建的 B-树
   操作符族<literal>integer_ops</>，它包括分别用于类型
   <type>bigint</> (<type>int8</>)、
   <type>integer</> (<type>int4</>)和<type>smallint</> (<type>int2</>)
   列上索引的操作符类<literal>int8_ops</>、<literal>int4_ops</>以及
   <literal>int2_ops</>。这个族也包含跨数据类型比较操作符，它们允许对
   这些类型中的任意两种进行比较，这样可以通过一种类型的比较值来搜索另
   一种类型之上的索引。这个族可以用这些定义来重现：

<programlisting><![CDATA[
CREATE OPERATOR FAMILY integer_ops USING btree;

CREATE OPERATOR CLASS int8_ops
DEFAULT FOR TYPE int8 USING btree FAMILY integer_ops AS
  -- 标准 int8 比较
  OPERATOR 1 < ,
  OPERATOR 2 <= ,
  OPERATOR 3 = ,
  OPERATOR 4 >= ,
  OPERATOR 5 > ,
  FUNCTION 1 btint8cmp(int8, int8) ,
  FUNCTION 2 btint8sortsupport(internal) ;

CREATE OPERATOR CLASS int4_ops
DEFAULT FOR TYPE int4 USING btree FAMILY integer_ops AS
  -- 标准 int4 比较
  OPERATOR 1 < ,
  OPERATOR 2 <= ,
  OPERATOR 3 = ,
  OPERATOR 4 >= ,
  OPERATOR 5 > ,
  FUNCTION 1 btint4cmp(int4, int4) ,
  FUNCTION 2 btint4sortsupport(internal) ;

CREATE OPERATOR CLASS int2_ops
DEFAULT FOR TYPE int2 USING btree FAMILY integer_ops AS
  -- 标准 int2 比较
  OPERATOR 1 < ,
  OPERATOR 2 <= ,
  OPERATOR 3 = ,
  OPERATOR 4 >= ,
  OPERATOR 5 > ,
  FUNCTION 1 btint2cmp(int2, int2) ,
  FUNCTION 2 btint2sortsupport(internal) ;

ALTER OPERATOR FAMILY integer_ops USING btree ADD
  -- 跨类型比较 int8 vs int2
  OPERATOR 1 < (int8, int2) ,
  OPERATOR 2 <= (int8, int2) ,
  OPERATOR 3 = (int8, int2) ,
  OPERATOR 4 >= (int8, int2) ,
  OPERATOR 5 > (int8, int2) ,
  FUNCTION 1 btint82cmp(int8, int2) ,

  -- 跨类型比较 int8 vs int4
  OPERATOR 1 < (int8, int4) ,
  OPERATOR 2 <= (int8, int4) ,
  OPERATOR 3 = (int8, int4) ,
  OPERATOR 4 >= (int8, int4) ,
  OPERATOR 5 > (int8, int4) ,
  FUNCTION 1 btint84cmp(int8, int4) ,

  -- 跨类型比较 int4 vs int2
  OPERATOR 1 < (int4, int2) ,
  OPERATOR 2 <= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 >= (int4, int2) ,
  OPERATOR 5 > (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2) ,

  -- 跨类型比较 int4 vs int8
  OPERATOR 1 < (int4, int8) ,
  OPERATOR 2 <= (int4, int8) ,
  OPERATOR 3 = (int4, int8) ,
  OPERATOR 4 >= (int4, int8) ,
  OPERATOR 5 > (int4, int8) ,
  FUNCTION 1 btint48cmp(int4, int8) ,

  -- 跨类型比较 int2 vs int8
  OPERATOR 1 < (int2, int8) ,
  OPERATOR 2 <= (int2, int8) ,
  OPERATOR 3 = (int2, int8) ,
  OPERATOR 4 >= (int2, int8) ,
  OPERATOR 5 > (int2, int8) ,
  FUNCTION 1 btint28cmp(int2, int8) ,

  -- 跨类型比较 int2 vs int4
  OPERATOR 1 < (int2, int4) ,
  OPERATOR 2 <= (int2, int4) ,
  OPERATOR 3 = (int2, int4) ,
  OPERATOR 4 >= (int2, int4) ,
  OPERATOR 5 > (int2, int4) ,
  FUNCTION 1 btint24cmp(int2, int4) ;
]]>
</programlisting>

   注意这种定义<quote>重载</>了操作符策略和支持函数号：每一个编号在该
   族中出现多次。只要一个特定编号的每一个实例都有可区分的输入数据类型，
   就允许这样做。输入类型等于操作符类输入类型的实例是该操作符类的主要
   操作符和支持函数，并且在大部分情况下应该被声明为该操作符类的一部分而
   不是作为操作符族的松散成员存在。
  </para>

  <para>
   在一个 B-树操作符族中，所有该族中的操作符必须以兼容的方式排序，也就是
   在该族所支持的所有数据类型之间满足传递律：
   <quote>如果 A = B 并且 B = C，那么 A = C</>并且
   <quote>如果 A &lt; B 并且 B &lt; C，那么 A &lt; C</>。此外，表示在该
   操作符族中的类型之间的隐式或者二进制强制造型不能更改相关的排序顺序。对该族
   中的每一个操作符都必须有一个与该操作符具有相同的两个输入数据类型的支持
   函数。我们推荐让操作符族保持完整，即对每一种数据类型的组合都应该包括所
   有的操作符。每个操作符类只应该包括非跨类型操作符和用于其数据类型的支持
   函数。
  </para>

  <para>
   为了构建一个多数据类型的哈希操作符族，必须为该族支持的每一种数据类型
   创建相兼容的哈希支持函数。这里的兼容性是指这些函数对于任意两个被该族
   中等值操作符认为相等的值会保证返回相同的哈希码，即便这些值具有不同的
   类型时也是如此。当这些类型具有不同的物理表示时，这通常难以实现，但是
   在某些情况下是可以做到的。此外，将该操作符族中一种数据类型的值通过隐
   式或者二进制强制造型转换成该族中另一种数据类型时，不应该改变所计算出
   的哈希值。注意每种数据类型只有一个支持函数，而不是每个等值操作符一个。
   我们推荐让操作符族保持完整，即对每一种数据类型的组合提供一个等值操作
   符。每个操作符类只应该包括非跨类型等值操作符和用于其数据类型的支持
   函数。
  </para>

  <para>
   GiST、SP-GiST 和 GIN 索引没有任何明显的跨数据类型操作的概念。它们所
   支持的操作符集合就是一个给定操作符类能够处理的主要支持函数。
  </para>

  <note>
   <para>
    在<productname>PostgreSQL</productname> 8.3 之前，没有操作符族的
    概念，并且因此要在索引中使用的任何跨数据类型操作符必须被直接绑定到该索
    引的操作符类中。虽然这种方法仍然有效，但是已被废弃，因为它会让索引的依
    赖过于广泛，还因为当两种数据类型都在同一操作符族中有操作符时规划器可以
    更有效地处理跨数据类型比较。
   </para>
  </note>
 </sect2>

 <sect2 id="xindex-opclass-dependencies">
  <title>操作符类上的系统依赖</title>

   <indexterm>
    <primary>ordering operator</primary>
   </indexterm>

  <para>
   <productname>PostgreSQL</productname>使用操作符类来以更多方式
   推断操作符的属性，而不仅仅是它们是否能被用于索引。因此，即便不准备对
   你的数据类型的列建立索引，也可能想要创建操作符类。
  </para>

  <para>
   特别地，<literal>ORDER BY</>和<literal>DISTINCT</>等 SQL 特性要求
   对值的比较和排序。为了在用户定义的数据类型上实现这些特性，
   <productname>PostgreSQL</productname>会为数据类型查找默认 B-树
   操作符类。这个操作符类的<quote>equals</>成员定义了用于
   <literal>GROUP BY</>和<literal>DISTINCT</>的值的等值概念，而该操
   作符类施加的排序顺序定义了默认的<literal>ORDER BY</>顺序。
  </para>

  <para>
   用户定义类型的数组的比较也依赖于默认 B-树操作符类定义的语义。
  </para>

  <para>
   如果一种数据类型没有默认的 B-树操作符类，系统将查找默认的哈希操作符类。
   但由于这类操作符类只提供等值，所以实际上它只够用于支持数组等值。
  </para>

  <para>
   在一种数据类型没有默认操作符类时，如果尝试对该数据类型使用这些 SQL 
   特性，你将得到类似<quote>could not identify an ordering operator</>
   （无法标识排序操作符）的错误。
  </para>

   <note>
    <para>
     在版本 7.4 以前的<productname>PostgreSQL</productname>中，排序
     和分组操作将隐式地使用名为<literal>=</>、<literal>&lt;</>以及
     <literal>&gt;</>的操作符。新的依赖于默认操作符类的行为避免了对具有特
     定名字的操作符行为作出任何假设。
    </para>
   </note>

  <para>
   另一个要点是，出现在一个哈希操作符族中的操作符是哈希连接、哈希聚集和
   相关优化的候选。这些情况下哈希操作符族就是至关重要的，因为它标识了要
   使用的哈希函数。
  </para>
 </sect2>

 <sect2 id="xindex-ordering-ops">
  <title>排序操作符</title>

  <para>
   有些索引访问方法（当前只有 GiST）支持<firstterm>排序操作符</>的概念。
   到目前为止我们所讨论的都是<firstterm>搜索操作符</>。搜索索引时，会用
   搜索操作符来寻找所有满足
   <literal>WHERE</>
   <replaceable>indexed_column</>
   <replaceable>operator</>
   <replaceable>constant</>
   的行。
   注意被返回的匹配行的顺序是没有任何保证的。相反，一个排序操作符并不限制
   能被返回的行集合，而是决定它们的顺序。扫描索引时，会使用排序操作符来以
   <literal>ORDER BY</>
   <replaceable>indexed_column</>
   <replaceable>operator</>
   <replaceable>constant</>
   所表示的顺序返回行。这样定义排序操作符的原因是，如果该操作符能度量距离，
   它就能支持最近邻搜索。例如，这样的一个查询
<programlisting><![CDATA[
SELECT * FROM places ORDER BY location <-> point '(101,456)' LIMIT 10;
]]>
</programlisting>
   寻找离一个给定目标点最近的十个位置。位置列上的 GiST 索引可以有效地完成
   这个查询，因为<literal>&lt;-&gt;</>是一个排序操作符。
  </para>

  <para>
   搜索操作符必须返回布尔结果，排序操作符通常返回某种其他类型，例如浮点
   、数字或者距离。这种类型通常不同于被索引的数据类型。为了避免硬编码有
   关不同数据类型行为的假设，需要定义一个排序操作符来提名一个 B-树操作符
   族指定结果数据类型的排序顺序。正如我们在前一节介绍的，B-树操作符族定
   义了<productname>PostgreSQL</productname>的顺序概念，因此这是
   一种自然的表达。由于点<literal>&lt;-&gt;</>操作符返回<type>float8</>，
   可以在一个操作符类创建命令中这样指定它：
<programlisting><![CDATA[
OPERATOR 15    <-> (point, point) FOR ORDER BY float_ops
]]>
</programlisting>
   其中<literal>float_ops</>是包括<type>float8</>上操作的内建操作符族。
   这种声明说明该索引能够以<literal>&lt;-&gt;</>操作符的递增值顺序返回
   行。
  </para>
 </sect2>

 <sect2 id="xindex-opclass-features">
  <title>操作符类的特性</title>

  <para>
   有两个操作符类的特性我们还没有讨论，主要是因为它们对于最常用的索引
   方法不太有用。
  </para>

  <para>
   通常，把一个操作符声明为一个操作符类（或操作符族）的成员意味着该索引
   方法能够使用该操作符准确地检索满足<literal>WHERE</>条件的行集。例如：
<programlisting>
SELECT * FROM table WHERE integer_column &lt; 4;
</programlisting>
   恰好可以被该整数列上一个 B-树索引满足。但是也有情况下索引只是作为匹配
   行的非精确向导。例如，如果一个 GiST 索引只存储几何对象的边界框，那么它
   无法精确地满足测试非矩形对象（如多边形）之间相交的<literal>WHERE</>
   条件。但是我们可以使用该索引来寻找边界框与目标对象的边界框相交的对象，
   并且只在通过该索引找到的对象上做精确的相交测试。如果适用于这种场景，
   该索引被称为对该操作符是<quote>有损的</>。有损索引搜索通过在一行可能
   满足或者不满足该查询条件时返回一个<firstterm>recheck</>标志来实现。核
   心系统将接着在检索到的行上测试原始查询条件来看它是否应该被作为一个合法
   匹配返回。如果索引被保证能返回所有所需的行外加一些额外的行，这种方法就
   能有效，因为那些额外的行可以通过执行原始的操作符调用来消除。支持有损
   搜索的索引方法（当前有 GiST、SP-GiST 和 GIN）允许个别操作符类的支持函
   数设置 recheck 标志，因此这也是一种操作符类的重要特性。
  </para>

  <para>
   再次考虑在索引中只存储复杂对象（如多边形）的边界框的情况。在这种情况下，
   把整个多边形存储在索引项中没有很大价值 &mdash; 我们也可以只存储一个更
   简单的<type>box</>类型对象。这种情况通过
   <command>CREATE OPERATOR CLASS</>中的<literal>STORAGE</>选项
   表示：

<programlisting>
CREATE OPERATOR CLASS polygon_ops
    DEFAULT FOR TYPE polygon USING gist AS
        ...
        STORAGE box;
</programlisting>

   当前，只有 GiST 和 GIN 索引方法支持不同于列数据类型的
   <literal>STORAGE</>类型。在使用<literal>STORAGE</>时，
   GiST 的支持例程<function>compress</>和
   <function>decompress</>必须处理数据类型转换。在 GIN 中，
   <literal>STORAGE</>类型标识<quote>key</>值的类型，它通常不同于
   被索引列的类型 &mdash; 例如，一个用于整数数组列的操作符类可能具有整
   数键值。GIN 的支持例程<function>extractValue</>和
   <function>extractQuery</>负责从被索引值中抽取键。
  </para>
 </sect2>

</sect1>

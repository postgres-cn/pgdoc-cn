<!-- doc/src/sgml/datetime.sgml -->

 <appendix id="datetime-appendix">
  <title>日期/时间支持</title>

  <para>
   <productname>PostgreSQL</productname>使用一个内部的启发式解析器来进行所有日期/时间输入的支持。日期和时间被作为字符串输入，并且被分解为不同的域，这些域都已经预定义好了要存放哪一类信息。每个域会被解释并且被分配一个数字值或者被忽略、拒绝。该解析器为所有的文本形式的域都包含了内部查找表，包括月份、一周中的日和时区。
  </para>

  <para>
   这个附录包括这些查找表内容的信息并且描述了解析器解码日期和时间所用的步骤。
  </para>

  <sect1 id="datetime-input-rules">
   <title>日期/时间输入解释</title>

   <para>
    日期/时间类型输入都使用下面的过程解码。
   </para>

   <procedure>
    <step>
     <para>
      将输入字符串打断成记号并且把每一个记号分类为一个字符串、时间、时区或数字。
     </para>

     <substeps>
      <step>
       <para>
        如果数字记号包含一个分号（<literal>:</>），那么这是一个时间字符串。包括所有后续数位和分号。
       </para>
      </step>

      <step>
       <para>
        如果数字记号包含一个连字符（<literal>-</>）、斜线（<literal>/</>）或两个以上的句点（<literal>.</>），那么这是一个日期字符串，它可能含有一个文本形式的月份。如果一个日期记号已经被看到，它会转而被解释为一个时区名（例如<literal>America/New_York</>）。
       </para>
      </step>

      <step>
       <para>
        如果记号只是数字，那么它要么是一个单一域，要么是一个 ISO 8601 串连日期（例如 1999年1月13日是<literal>19990113</literal>）或时间（例如 14:15:16 是<literal>141516</literal>）。
       </para>
      </step>

      <step>
       <para>
        如果记号以一个加号（<literal>+</>）或减号（<literal>-</>）开始，那么它要么是一个数字的时区，要么是一个特殊域。
       </para>
      </step>
     </substeps>
    </step>

    <step>
     <para>
      如果记号是一个文本字符串，使之匹配可能的串：
     </para>

     <substeps>
      <step>
       <para>
        对作为一个时区缩写的记号做一次二分法表查找。
       </para>
      </step>

      <step>
       <para>
        如果没有找到，做一次类似的二分法表查找来将该记号匹配为一个特殊串（例如<literal>today</literal>）、日（例如<literal>Thursday</literal>）、月（例如<literal>January</literal>）或噪音词（例如<literal>at</literal>、<literal>on</literal>）。
       </para>
      </step>

      <step>
       <para>
        如果仍然没有找到，则抛出一个错误。
       </para>
      </step>
     </substeps>
    </step>

    <step>
     <para>
      当记号是一个数字或数字域时：
     </para>

     <substeps>
      <step>
       <para>
        如果有 8 位或 6 位，并且之前没有读到其他日期域，那么解释为一个<quote>串连日期</quote>（例如<literal>19990118</literal>或<literal>990118</literal>）。翻译是<literal>YYYYMMDD</>或<literal>YYMMDD</>。
       </para>
      </step>

      <step>
       <para>
        如果记号是 3 位并且已经读到了一个年域，那么解释为一年中的第几日。
       </para>
      </step>

      <step>
       <para>
        如果是 4 位或 6 位并且已经读到了一个年域，那么解释为一个时间域（<literal>HHMM</>或<literal>HHMMSS</>）。
       </para>
      </step>

      <step>
       <para>
        如果是 3 位或更多位并且还没有读到日期域，解释为一个年域（这会强制剩余日期域的 yy-mm-dd 顺序）。
       </para>
      </step>

      <step>
       <para>
        否则日期域顺序被假定为遵循<varname>DateStyle</>设置：mm-dd-yy、dd-mm-yy 或 yy-mm-dd。如果一个月或日域被发现超过范围，则抛出一个错误。
       </para>
      </step>
     </substeps>
    </step>

    <step>
     <para>
      如果已经指定了 BC ，对年求反并且加一用于内部存储（在格里高利历中没有 0 年，因此数字的 1 BC 就是 0 年）。
     </para>
    </step>

    <step>
     <para>
      如果没有指定 BC ，并且如果该年域长度为两位，那么把该年域调整为四位。如果该域小于 70，则增加 2000，否则增加 1900。

      <tip>
       <para>
        格里高利年 AD 1-99 可以使用带有前导零的 4 位形式录入（例如<literal>0099</>是 AD 99）。
       </para>
      </tip>
     </para>
    </step>
   </procedure>
  </sect1>


  <sect1 id="datetime-keywords">
   <title>日期/时间关键词</title>

   <para>
    <xref linkend="datetime-month-table">展示了被识别为月份名称的记号。
   </para>

    <table id="datetime-month-table">
     <title>月份名称</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>月份</entry>
        <entry>简写</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>一月</entry>
        <entry>Jan</entry>
       </row>
       <row>
        <entry>二月</entry>
        <entry>Feb</entry>
       </row>
       <row>
        <entry>三月</entry>
        <entry>Mar</entry>
       </row>
       <row>
        <entry>四月</entry>
        <entry>Apr</entry>
       </row>
       <row>
        <entry>五月</entry>
        <entry></entry>
       </row>
       <row>
        <entry>六月</entry>
        <entry>Jun</entry>
       </row>
       <row>
        <entry>七月</entry>
        <entry>Jul</entry>
       </row>
       <row>
        <entry>八月</entry>
        <entry>Aug</entry>
       </row>
       <row>
        <entry>九月</entry>
        <entry>Sep, Sept</entry>
       </row>
       <row>
        <entry>十月</entry>
        <entry>Oct</entry>
       </row>
       <row>
        <entry>十一月</entry>
        <entry>Nov</entry>
       </row>
       <row>
        <entry>十二月</entry>
        <entry>Dec</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    <para>
     <xref linkend="datetime-dow-table">展示了被识别为一周内每一天的名称的记号。
    </para>

     <table id="datetime-dow-table">
      <title>一周内每一天的名称</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>天</entry>
         <entry>简写</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>周日</entry>
         <entry>Sun</entry>
        </row>
        <row>
         <entry>周一</entry>
         <entry>Mon</entry>
        </row>
        <row>
         <entry>周二</entry>
         <entry>Tue, Tues</entry>
        </row>
        <row>
         <entry>周三</entry>
         <entry>Wed, Weds</entry>
        </row>
        <row>
         <entry>周四</entry>
         <entry>Thu, Thur, Thurs</entry>
        </row>
        <row>
         <entry>周五</entry>
         <entry>Fri</entry>
        </row>
        <row>
         <entry>周六</entry>
         <entry>Sat</entry>
        </row>
       </tbody>
      </tgroup>
     </table>

   <para>
    <xref linkend="datetime-mod-table">展示了服务于多种修饰目的的记号。
   </para>

    <table id="datetime-mod-table">
     <title>日期/时间域修饰语</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>标识符</entry>
        <entry>描述</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>AM</literal></entry>
        <entry>12:00 之前的时间</entry>
       </row>
       <row>
        <entry><literal>AT</literal></entry>
        <entry>被忽略</entry>
       </row>
       <row>
        <entry><literal>JULIAN</>, <literal>JD</>, <literal>J</></entry>
        <entry>下一个域是儒略日期</entry>
       </row>
       <row>
        <entry><literal>ON</literal></entry>
        <entry>被忽略</entry>
       </row>
       <row>
        <entry><literal>PM</literal></entry>
        <entry>12:00 之后的时间</entry>
       </row>
       <row>
        <entry><literal>T</literal></entry>
        <entry>下一个域是时间</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
  </sect1>

  <sect1 id="datetime-config-files">
  <title>日期/时间配置文件</title>

   <indexterm>
    <primary>time zone</primary>
    <secondary>input abbreviations</secondary>
   </indexterm>

   <para>
    因为时区缩写并未被很好地标准化，<productname>PostgreSQL</productname>提供了一种方法来自定义服务器所接受的缩写集合。<xref linkend="guc-timezone-abbreviations">运行时参数决定活动的缩写集合。虽然这个参数可以被任何数据库用户修改，但它的可能值是受到数据库管理员的控制的 &mdash; 它们实际上是存储在安装目录的<filename>.../share/timezonesets/</>子目录中的一些配置文件。通过在那个目录中增加或修改文件，管理员可以为时区缩写设定本地策略。
   </para>

   <para>
    <varname>timezone_abbreviations</>可以被设置为任何在<filename>.../share/timezonesets/</>中可以找到的文件名，前提该文件的名字完全是字母的（<varname>timezone_abbreviations</>中禁止非字母字符防止从预期目录的外面读取文件以及读取编辑器的备份文件和其他外部文件）。
   </para>

   <para>
    一个时区缩写文件可以包含空行和以<literal>#</>开始的注释。非注释行必须具有下列格式之一：

<synopsis>
<replaceable>zone_abbreviation</replaceable> <replaceable>offset</replaceable>
<replaceable>zone_abbreviation</replaceable> <replaceable>offset</replaceable> D
<replaceable>zone_abbreviation</replaceable> <replaceable>time_zone_name</replaceable>
@INCLUDE <replaceable>file_name</replaceable>
@OVERRIDE
</synopsis>
   </para>

   <para>
    一个<replaceable>zone_abbreviation</replaceable>就是被定义的缩写。
    <replaceable>offset</replaceable>是以秒计的到 UTC 的等效偏移量，为正表示东起
    格林威治，为负表示西起格林威治。例如， -18000 表示格林威治西边的五个小时，或者北美
    东海岸标准时间。<literal>D</>指示该区域名表示本地夏令时而非标准时间。
    另外，还可以给出一个<replaceable>time_zone_name</>，在这种情况下会查阅该时区
    定义，并且会使用该时区中的缩写含义。这种替代方案只用于那些含义在历史上有变化的缩写，
    因为比起使用一个固定的整数值，查找该含义开销要大得多。
   </para>

   <para>
    <literal>@INCLUDE</>语法允许包括<filename>.../share/timezonesets/</>目录中
    的其它文件。允许进行嵌套包括，但是嵌套深度有限制。
   </para>

   <para>
    <literal>@OVERRIDE</>语法表示文件中后续项可以覆盖前面的项（典型的：从被包括的文件中
    得到的项）。如果没有它，同一个时区缩写的相互冲突的定义会被认为是一种错误。
   </para>

   <para>
    在一个未被修改的安装中，文件<filename>Default</>包含用于世界大部分地区的非冲突时区缩
    写。附加文件<filename>Australia</>和<filename>India</>被提供给那些地区：这些文件
    首先会包括<literal>Default</>文件，并且接着根据需要增加或修改缩写。
   </para>

   <para>
    为了便于参考，标准安装也包含了<filename>Africa.txt</>、<filename>America.txt</>
    等文件，它们包含了所有根据IANA 时区数据库中已知正在使用的时区缩写信息。 如果需要，这些文件中的时区名定义可以复制并粘贴到自定义的配置文件中。注意这些文件名
    不能直接被<varname>timezone_abbreviations</>设置引用，因为它们的名称中嵌有句点。
   </para>

   <note>
    <para>
     如果在读取时区缩写集时发生错误，将不会应用任何新值并且保留旧的集合。如果该错误是在数据库
     启动时发生，那么启动将失败。
    </para>
   </note>

   <caution>
    <para>
     配置文件中定义的时区缩写将会覆盖<productname>PostgreSQL</productname>中内建的非
     时区含义。例如<filename>Australia</>配置文件定义了<literal>SAT</>（南澳洲标准时
     间）。当该文件为活动时，<literal>SAT</>将不会被识别为周六的缩写。
    </para>
   </caution>

   <caution>
    <para>
     如果你修改<filename>.../share/timezonesets/</>中的文件， 那么你必须自己创建备份 &mdash; 因为通常的数据库转储不会包括这个目录。
    </para>
   </caution>

  </sect1>

  <sect1 id="datetime-units-history">
  <title>单位的历史</title>

  <indexterm zone="datetime-units-history">
   <primary>格里高利历</primary>
  </indexterm>
  <indexterm zone="datetime-units-history">
   <primary>儒略日期</primary>
  </indexterm>

  <para>
   SQL 标准说到<quote>在一个<quote>日期时间文字</quote>的定义中，<quote>日期时间值</quote>根据格里高利历被日期和时间的自然规则所约束</quote>。<productname>PostgreSQL</>遵循 SQL 标准，导致只在格里高利历内计算日期，即使对于该历法开始使用之前的日期也是如此。这个规则被称作<firstterm>外推格里高利历</>。
  </para>

  <para>
   儒略日期是由 Julius Caesar 在公元前 45 年引入的。直到 1582 年开始转为使用公历之前，西方世界一直使用儒略日期。 在儒略日期中，一回归年近似等于 365 又 1/4 天 = 365.25 天。它大约在128年中会出现 1 天的误差。
  </para>

  <para>
   不断积累的历法错误促使教皇格里高利十三世按照特伦托会议的指示改革了历法。在格里高利历中，一回归年近似为 365 + 97/400 天 = 365.2425 天。因此对于格里高利历，大约要 3300 年一回归年才会积累一天的误差。
  </para>

  <para>
   近似值 365+97/400 是通过利用下面的规则，并规定每 400 年有 97 个闰年实现的：

   <simplelist>
    <member>
     每个可被 4 整除的年是一个闰年。
    </member>
    <member>
     不过，可被 100 整除的年不是闰年。
    </member>
    <member>
     但是，可以被 400 整除的年还是闰年。
    </member>
   </simplelist>

   因此，1700、1800、1900、2100 和 2200 都不是闰年。而 1600、2000、2400 是闰年。相比而言，旧式的儒略历法里面只有能被4整除的年是闰年。

   相反，在旧的儒略历法中所有能被 4 整除的年都是闰年。
  </para>

  <para>
   罗马教皇在 1582 年 2 月宣布从 1582 年的 10 月中减除 10 天，这样 10 月 15 日就紧跟在 10 月 4 日的后面。意大利、波兰、葡萄牙和西班牙遵守了这个要求。其他天主教的国家也紧跟它们的步伐。但新教国家拒绝改变，而希腊东正教国家却一直拖延到 20 世纪开始时才逐渐遵守这个规定。

   大英帝国及其殖民地（包含今天的美国）在 1752 年开始遵守这项改革。因此 1752 年 9 月 2 日之后紧跟着 14 日。

   这就是为什么 Unix 系统上的<command>cal</command>程序 会产生如下输出的原因：

<screen>
$ <userinput>cal 9 1752</userinput>
   September 1752
 S  M Tu  W Th  F  S
       1  2 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30
</screen>

   不过，这种历法只对大英帝国及其殖民地有效，对其他地方无效。因为尝试在多个地方多个时刻使用的实际历法很难并且也很让人困惑，<productname>PostgreSQL</>并没有做这种尝试，而是对所有日期遵循格里高利历规则，即使该方法在历史上是不精确的。
  </para>

  <para>
   在世界的多个地方，发展了不同的历法，很多比格里高利系统还早。

   例如，中国历法的开端可以追溯到公元前 14 世纪。传说黄帝在公元前 2637 年就发明了这个历法。

   中华人民共和国把格里高利历作为民用。中国历法则被用于决定节日/节气。
  </para>

  <para>
   <firstterm>儒略日期</firstterm>不是另一种类型的历法，虽然在命名上很相似，但是它和儒略历法无关。儒略日期系统是法国学者 Joseph Justus Scaliger（1540-1609）（可能是取自其父亲的名字，即意大利学者 Julius Caesar Scaliger（1484-1558））发明的。 在儒略日期系统中，每天都有一个序数，从 JD 0 开始（有时被叫做<emphasis>那个</>儒略日期）。 JD 0 在儒略历法中对应公元前 4713 年 1 月 1 日，或者在格里高利历中对应公元前 4714 年 12 月 24 日。儒略日期计数经常被天文学家用来标注夜间观测，并且因此一个日期就是从一个正午 UTC 到下一个正午 UTC，而不是从午夜到另一个午夜：JD 0 设计的 24 小时是从公元前 4714 年 12 月 24 日的正午 UTC 到公元前 4714 年 12 月 25 日的正午 UTC。
  </para>

  <para>
   尽管<productname>PostgreSQL</>在输入输出日期时支持儒略日期符号（并且也用在一些内部的日期时间计算上使用儒略日期），它不遵守从正午到正午。<productname>PostgreSQL</>把儒略日期当作是从午夜到午夜。
  </para>

 </sect1>
</appendix>

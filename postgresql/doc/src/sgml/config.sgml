<!-- doc/src/sgml/config.sgml -->

<chapter id="runtime-config">
  <!--
  <title>Server Configuration</title>
  -->
   <title>服务器配置</title>

  <indexterm>
   <primary>configuration</primary>
   <secondary>of the server</secondary>
  </indexterm>

  <!--
<para>
   There are many configuration parameters that affect the behavior of
   the database system. In the first section of this chapter we
   describe how to interact with configuration parameters. The subsequent sections
   discuss each parameter in detail.
  </para>
-->
<para>
   有一堆配置参数可以影响数据库系统的行为。本章第一节我们将描述一下如何与它们交互。
   然后随后的小节我们将逐个讨论它们。
</para>

  <sect1 id="config-setting">
  <!--
   <title>Setting Parameters</title>
   -->
   <title>设置参数</title>

   <sect2 id="config-setting-names-values">
   <!--
    <title>Parameter Names and Values</title>
-->
<title>参数名和值</title>

    <!--
<para>
     All parameter names are case-insensitive. Every parameter takes a
     value of one of five types: boolean, string, integer, floating point,
     or enumerated (enum).  The type determines the syntax for setting the
     parameter:
    </para>
-->
<para>
所有参数名都是大小写不敏感的。每个参数都可以接受五种类型之一：
布尔、字符串、整数、浮点数或枚举。类型决定了设置参数的语法：
</para>
    <itemizedlist>
     <listitem>
<!-- 
      <para>
       <emphasis>Boolean:</emphasis>
       Values can be written as
       <literal>on</literal>,
       <literal>off</literal>,
       <literal>true</literal>,
       <literal>false</literal>,
       <literal>yes</literal>,
       <literal>no</literal>,
       <literal>1</literal>,
       <literal>0</literal>
       (all case-insensitive) or any unambiguous prefix of one of these.
      </para>
-->
<para>
<emphasis>布尔：</emphasis>值可以是(都是大小写无关)
<literal>on</literal>、<literal>off</literal>、<literal>true</literal>、
<literal>false</literal>、<literal>yes</literal>、<literal>no</literal>、
<literal>1</literal>、<literal>0</literal>或这些东西的任意清晰无歧义的前缀。
</para>
     </listitem>

     <listitem>
<!-- 
      <para>
       <emphasis>String:</emphasis>
       In general, enclose the value in single quotes, doubling any single
       quotes within the value.  Quotes can usually be omitted if the value
       is a simple number or identifier, however.
      </para>
-->
<para>
<emphasis>字符串:</emphasis>
通常，把值包含在单引号中，双写值中的单引号。如果值是简单的数字或标识符，
那么通常可以省略单引号。
</para>
     </listitem>

     <listitem>
<!-- 
      <para>
       <emphasis>Numeric (integer and floating point):</emphasis>
       A decimal point is permitted only for floating-point parameters.
       Do not use thousands separators.  Quotes are not required.
      </para>
-->
<para>
<emphasis>数值（整数或浮点数）：</emphasis>
仅允许浮点数有小数点。不要使用千位分隔符。不需要加引号。
</para>
     </listitem>

     <listitem>
      <para>
<!-- 
       <emphasis>Numeric with Unit:</emphasis>
       Some numeric parameters have an implicit unit, because they describe
       quantities of memory or time. The unit might be kilobytes, blocks
       (typically eight kilobytes), milliseconds, seconds, or minutes.
       An unadorned numeric value for one of these settings will use the
       setting's default unit, which can be learned from
       <structname>pg_settings</>.<structfield>unit</>.
       For convenience, settings can be given with a unit specified explicitly,
       for example <literal>'120 ms'</> for a time value, and they will be
       converted to whatever the parameter's actual unit is.  Note that the
       value must be written as a string (with quotes) to use this feature.
       The unit name is case-sensitive, and there can be whitespace between
       the numeric value and the unit.
-->
<emphasis>带单位的数字：</emphasis>
一些数字参数有隐式的单位，因为它们描述存储器或时间的数量。
单位可以是千字节、块（通常是8个千字节）、毫秒、秒或分钟。
这些设定的普通数值将使用该设定的缺省单位，可以在
<structname>pg_settings</>.<structfield>unit</>中查看。
为了方便，可以明确的给出一个设定的单位，例如时间值<literal>'120 ms'</>，
它们将转换为任何该参数的实际单位。请注意，要使用该特性，
必须将值写作字符串（加引号）。单位名是大小写敏感的，
并且数值和单位之间可以有空格。

        <itemizedlist>
        <listitem>   
<!-- 
         <para>
          Valid memory units are <literal>kB</literal> (kilobytes),
          <literal>MB</literal> (megabytes), <literal>GB</literal>
          (gigabytes), and <literal>TB</literal> (terabytes).
          The multiplier for memory units is 1024, not 1000.
         </para>
-->
<para>
有效的存储单位是<literal>kB</literal>（千字节）、
<literal>MB</literal> (兆字节)、<literal>GB</literal>（千兆字节）
和<literal>TB</literal>（兆兆字节）。存储单元的乘数是1024，不是1000。
</para>
        </listitem>  

        <listitem>
<!-- 
         <para>
          Valid time units are <literal>ms</literal> (milliseconds),
          <literal>s</literal> (seconds), <literal>min</literal> (minutes),
          <literal>h</literal> (hours), and <literal>d</literal> (days).
         </para>
-->
<para>
有效的时间单位是<literal>ms</literal>（毫秒）、<literal>s</literal>（秒）、
<literal>min</literal>（分钟）、<literal>h</literal>（小时）
和<literal>d</literal>（天）。
</para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>

     <listitem>
<!-- 
      <para>
       <emphasis>Enumerated:</emphasis>
       Enumerated-type parameters are written in the same way as string
       parameters, but are restricted to have one of a limited set of
       values.  The values allowable for such a parameter can be found from
       <structname>pg_settings</>.<structfield>enumvals</>.
       Enum parameter values are case-insensitive.
      </para>
-->
<para>
<emphasis>枚举:</emphasis>
枚举类型的参数和字符串参数的书写方式相同，但是限制为一个值组当中的一个值。
允许的值可以在<structname>pg_settings</>.<structfield>enumvals</>中找到。
枚举参数值是不区分大小写的。
</para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 id="config-setting-configuration-file">
   <!--
    <title>Parameter Interaction via the Configuration File</title>
-->
<title>通过配置文件交互参数</title>

    
<para>
    <!--
     The most fundamental way to set these parameters is to edit the file
     <filename>postgresql.conf</><indexterm><primary>postgresql.conf</></>,
     which is normally kept in the data directory.  A default copy is
     installed when the database cluster directory is initialized.
     An example of what this file might look like is:
     -->
 设置这些参数的根本途径是编辑<filename>postgresql.conf</><indexterm><primary>postgresql.conf</></>文件，
 它通常在数据目录里。当数据库集群目录初始化的时候，会安装一个缺省拷贝。比如，
 下面是一个该文件的例子：

<programlisting>
# This is a comment
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB
</programlisting>
    <!--
     One parameter is specified per line. The equal sign between name and
     value is optional. Whitespace is insignificant (except within a quoted
     parameter value) and blank lines are
     ignored. Hash marks (<literal>#</literal>) designate the remainder
     of the line as a comment.  Parameter values that are not simple
     identifiers or numbers must be single-quoted.  To embed a single
     quote in a parameter value, write either two quotes (preferred)
     or backslash-quote.
 -->
 参数是每条一行。选项名和值之间的等号是可选的。
 空白（除了引号中参数值的空白）和空行被忽略。井号(<literal>#</literal>)引入注释。
 非简单标识符或者数字必须用单引号包围。
 如果需要在参数值里嵌入单引号，要么写两个单引号(推荐方法)，要么用反斜扛包围。
    </para>

<!-- 
    <para>
     Parameters set in this way provide default values for the cluster.
     The settings seen by active sessions will be these values unless they
     are overridden.  The following sections describe ways in which the
     administrator or user can override these defaults.
    </para>
-->
<para>
以这种方式设置的参数为集群提供了缺省值。活动会话看到的设置将会是这些值，
除非隐藏了它们。下面的章节描述管理员或用户重写这些缺省的方式。
</para>
    <!--
<para>
     <indexterm>
      <primary>SIGHUP</primary>
     </indexterm>
     The configuration file is reread whenever the main server process
     receives a <systemitem>SIGHUP</> signal; this signal is most easily
     sent by running <literal>pg_ctl reload</> from the command line or by
     calling the SQL function <function>pg_reload_conf()</function>. The main
     server process also propagates this signal to all currently running
     server processes, so that existing sessions also adopt the new values
     (this will happen after they complete any currently-executing client
     command).  Alternatively, you can
     send the signal to a single server process directly.  Some parameters
     can only be set at server start; any changes to their entries in the
     configuration file will be ignored until the server is restarted.
     Invalid parameter settings in the configuration file are likewise
     ignored (but logged) during <systemitem>SIGHUP</> processing.
    </para>
-->
<para>
     主服务器进程每次收到<systemitem>SIGHUP</>信号
 后都会重新读取这个配置文件，
 最简单的发送该信号的方法就是使用来自命令行的<literal>pg_ctl reload</>
 或者调用SQL函数<function>pg_reload_conf()</function>。 
 同时主服务器进程也将这个信号广播给所有正在运行的服务器进程，
 这样现有会话也采用新值（这将在它们完成任何当前正在执行的客户端命令后发生）。
 另外，你可以只向一个服务器进程直接发送信号。
 有些参数只能在服务器启动的时候设置；对这些条目的修改将被忽略，
 直到下次服务器重启。配置文件中的无效参数设置在<systemitem>SIGHUP</>处理中也被忽略（但已登录）。
</para>

<!-- 
    <para>
     In addition to <filename>postgresql.conf</>,
     a <productname>PostgreSQL</productname> data directory contains a file
     <filename>postgresql.auto.conf</><indexterm><primary>postgresql.auto.conf</></>,
     which has the same format as <filename>postgresql.conf</> but should
     never be edited manually.  This file holds settings provided through
     the <xref linkend="SQL-ALTERSYSTEM"> command.  This file is automatically
     read whenever <filename>postgresql.conf</> is, and its settings take
     effect in the same way.  Settings in <filename>postgresql.auto.conf</>
     override those in <filename>postgresql.conf</>.
    </para>
-->
<para>
除了<filename>postgresql.conf</>，<productname>PostgreSQL</productname>
数据目录包含一个文件
<filename>postgresql.auto.conf</><indexterm><primary>postgresql.auto.conf</></>，
它和<filename>postgresql.conf</>的格式相同，但是从来不用手动编辑。
这个文件保存通过<xref linkend="SQL-ALTERSYSTEM">命令提供的设置。
在读取<filename>postgresql.conf</>时自动读取该文件，
并且它的设置以相同的方式发生作用。<filename>postgresql.auto.conf</>
中的设置覆盖<filename>postgresql.conf</>中的设置。
</para>
   </sect2>

   <sect2 id="config-setting-sql-command-interaction">
    <!-- 
    <title>Parameter Interaction via SQL</title>
    -->
    <title>通过SQL交互参数</title>
    
<!-- 
     <para>
      <productname>PostgreSQL</productname> provides three SQL
      commands to establish configuration defaults.
      The already-mentioned <xref linkend="SQL-ALTERSYSTEM"> command
      provides a SQL-accessible means of changing global defaults; it is
      functionally equivalent to editing <filename>postgresql.conf</>.
      In addition, there are two commands that allow setting of defaults
      on a per-database or per-role basis:
     </para>
-->
<para>
<productname>PostgreSQL</productname>提供了三个SQL命令创建配置缺省。
已经提过的<xref linkend="SQL-ALTERSYSTEM">命令提供SQL可访问的修改全局缺省的方法；
它在功能上相当于编辑<filename>postgresql.conf</>。另外，
还有两个命令允许在每个数据库或每个角色的基础上设置缺省：
</para>

     <itemizedlist>
     <listitem>
<!-- 
      <para>
       The <xref linkend="sql-alterdatabase"> command allows global
       settings to be overridden on a per-database basis.
      </para>
-->
<para>
<xref linkend="sql-alterdatabase">命令允许在每个数据库的基础上重写全局设置。
</para>
     </listitem>

     <listitem>
<!-- 
      <para>
       The <xref linkend="sql-alterrole"> command allows both global and
       per-database settings to be overridden with user-specific values.
      </para>
-->
<para>
<xref linkend="sql-alterrole">命令允许用用户指定的值重写全局和每个数据库的设置。
</para>
     </listitem>
    </itemizedlist>

<!-- 
     <para>
      Values set with <command>ALTER DATABASE</> and <command>ALTER ROLE</>
      are applied only when starting a fresh database session.  They
      override values obtained from the configuration files or server
      command line, and constitute defaults for the rest of the session.
      Note that some settings cannot be changed after server start, and
      so cannot be set with these commands (or the ones listed below).
    </para>
-->
<para>
用<command>ALTER DATABASE</>和<command>ALTER ROLE</>
设置的值仅在开始一个新的数据库会话时应用。
它们重写从配置文件或服务器命令行中获取的值，构成其余会话的缺省。
请注意，一些设置在服务器重启后就不能改变了，并且因此不能用这些命令
（或者下面列出的命令）设置。
</para>

<!-- 
     <para>
      Once a client is connected to the database, <productname>PostgreSQL</>
      provides two additional SQL commands (and equivalent functions) to
      interact with session-local configuration settings:
    </para>
-->
<para>
一旦客户端连接到数据库，<productname>PostgreSQL</>
提供两个额外的SQL命令（和等价的函数）与会话本地配置设置交互：
</para>
    <itemizedlist>
     <listitem>
<!-- 
     <para>
      The <xref linkend="SQL-SHOW"> command allows inspection of the
      current value of all parameters.  The corresponding function is
      <function>current_setting(setting_name text)</function>.
     </para>
-->
<para>
<xref linkend="SQL-SHOW">命令允许检查所有参数的当前值。
对应的函数是<function>current_setting(setting_name text)</function>。
</para>
     </listitem>

     <listitem>
<!-- 
      <para>
       The <xref linkend="SQL-SET"> command allows modification of the
       current value of those parameters that can be set locally to a
       session; it has no effect on other sessions.
       The corresponding function is
       <function>set_config(setting_name, new_value, is_local)</function>.
      </para>
-->
<para>
<xref linkend="SQL-SET">命令允许修改可以本地设置会话的那些参数的当前值；
它对其他会话没有影响。对应的函数是
<function>set_config(setting_name, new_value, is_local)</function>。
</para>
     </listitem>
    </itemizedlist>

<!-- 
    <para>
     In addition, the system view <link
     linkend="view-pg-settings"><structname>pg_settings</></> can be
     used to view and change session-local values:
    </para>
-->
<para>
另外，系统视图<link linkend="view-pg-settings"><structname>pg_settings</></>
可以用来查看和修改会话本地值：
</para>

    <itemizedlist>
     <listitem>
<!-- 
      <para>
       Querying this view is similar to using <command>SHOW ALL</> but
       provides more detail.  It is also more flexible, since it's possible
       to specify filter conditions or join against other relations.
      </para>
-->
<para>
查询这个视图类似于使用<command>SHOW ALL</>，但是提供的信息更详细。
它也更加灵活，因为它可以指定过滤条件或链接其他关系。
</para>
     </listitem>

     <listitem>
      <para>
<!-- 
       Using <xref linkend="SQL-UPDATE"> on this view, specifically
       updating the <structname>setting</> column, is the equivalent
       of issuing <command>SET</> commands.  For example, the equivalent of
-->
在这个视图上使用<xref linkend="SQL-UPDATE">，明确的更新<structname>setting</>字段，
等价于发出<command>SET</>命令。例如：
<programlisting>
SET configuration_parameter TO DEFAULT;
</programlisting>
<!-- 
       is:
-->
的等价是：
<programlisting>
UPDATE pg_settings SET setting = reset_val WHERE name = 'configuration_parameter';
</programlisting>
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2>
    <!-- 
    <title>Parameter Interaction via the Shell</title>
    -->
    <title>通过Shell交互参数</title>
<!-- 
     <para>
      In addition to setting global defaults or attaching
      overrides at the database or role level, you can pass settings to
      <productname>PostgreSQL</productname> via shell facilities.
      Both the server and <application>libpq</> client library
      accept parameter values via the shell.
     </para>
-->
<para>
除了在数据库或用户级别设置全局缺省或重写，
还可以通过shell工具传递设置到<productname>PostgreSQL</productname>。
服务器和<application>libpq</>客户端库都接受通过shell设置的参数值。
</para>

     <itemizedlist>
      <listitem>
      <para>
<!-- 
       During server startup, parameter settings can be
       passed to the <command>postgres</command> command via the
       <option>-c</> command-line parameter.  For example,
-->
在服务器启动期间，可以通过<option>-c</>命令行参数传递参数设置到
<command>postgres</command>命令。例如：
<programlisting>
postgres -c log_connections=yes -c log_destination='syslog'
</programlisting>
<!-- 
       Settings provided in this way override those set via
       <filename>postgresql.conf</> or <command>ALTER SYSTEM</>,
       so they cannot be changed globally without restarting the server.
-->
以这种方式提供的设置覆盖通过<filename>postgresql.conf</>或
<command>ALTER SYSTEM</>提供的设置，所以它们在不重启服务器的情况下是不能全局修改的。
     </para>
    </listitem>
    <listitem>
     <para>
<!-- 
      When starting a client session via <application>libpq</>,
      parameter settings can be
      specified using the <envar>PGOPTIONS</envar> environment variable.
      Settings established in this way constitute defaults for the life
      of the session, but do not affect other sessions.
      For historical reasons, the format of <envar>PGOPTIONS</envar> is
      similar to that used when launching the <command>postgres</command>
      command; specifically, the <option>-c</> flag must be specified.
      For example,
-->
当通过<application>libpq</>启动客户端会话时，可以使用<envar>PGOPTIONS</envar>
环境变量指定参数设置。以这种方式建立的设置组成会话期间的缺省，
但是不影响其他会话。因为历史原因，<envar>PGOPTIONS</envar>
的格式类似于加载<command>postgres</command>命令时使用的那样；
特别的，必须指定<option>-c</>标志。例如：
<programlisting>
env PGOPTIONS="-c geqo=off -c statement_timeout=5min" psql
</programlisting>
     </para>
<!-- 
     <para>
      Other clients and libraries might provide their own mechanisms,
      via the shell or otherwise, that allow the user to alter session
      settings without direct use of SQL commands.
     </para>
-->
<para>
其他的客户端和库可能会提供它们自己的机制，通过shell或者其他方式，
允许用户不直接使用SQL命令修改会话设置。
</para>
    </listitem>
   </itemizedlist>
   </sect2>

   <sect2 id="config-includes">
    <!-- 
    <title>Managing Configuration File Contents</title>
    -->
    <title>管理配置文件内容</title>

<!-- 
     <para>
      <productname>PostgreSQL</> provides several features for breaking
      down complex <filename>postgresql.conf</> files into sub-files.
      These features are especially useful when managing multiple servers
      with related, but not identical, configurations.
     </para>
-->
<para>
<productname>PostgreSQL</>提供几个分离复杂<filename>postgresql.conf</>
文件为子文件的特性。这些特性在管理多个相关服务器（但不是完全相同）
的配置时特别有帮助。
</para>
    
<para>
      <indexterm>
       <primary><literal>include</></primary>
       <secondary>in configuration file</secondary>
       </indexterm>
<!-- 
      In addition to individual parameter settings,
      the <filename>postgresql.conf</> file can contain <firstterm>include
      directives</>, which specify another file to read and process as if
      it were inserted into the configuration file at this point.  This
      feature allows a configuration file to be divided into physically
      separate parts.  Include directives simply look like:
-->
除了个别的参数设置，<filename>postgresql.conf</>文件可以包含
<firstterm>包含指令</>，它们指定另一个文件的读取和处理，
就像在这个点插入了那个文件一样。这个特性允许配置文件被分成物理上单独的部分。
包含指令看起来像：
<programlisting>
include 'filename'
</programlisting>
        <!--
         If the file name is not an absolute path, it is taken as relative to
         the directory containing the referencing configuration file.
         Inclusions can be nested.
 -->
 如果文件名不是绝对路径，那么它被看成包含引用配置文件目录的相对路径。
 可以进行嵌套。
     </para>



     
<para>
      <indexterm>
       <primary><literal>include_if_exists</></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
  <!--
         There is also an <literal>include_if_exists</> directive, which acts
         the same as the <literal>include</> directive, except
         when the referenced file does not exist or cannot be read.  A regular
         <literal>include</> will consider this an error condition, but
         <literal>include_if_exists</> merely logs a message and continues
         processing the referencing configuration file.
 -->
 此外，还有一个<literal>include_if_exists</>指令，除了被引用的文件不存在或无法读取时，
 它的作用和<literal>include</>指令是相同的。
         规则的<literal>include</>会认为这是一个错误条件，但<literal>include_if_exists</>
 只是记录一条消息，并继续处理引用的配置文件。
     </para>


     
<para>
      <indexterm>
       <primary><literal>include_dir</></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
   <!--
        The <filename>postgresql.conf</> file can also contain
      <literal>include_dir</literal> directives, which specify an entire
      directory of configuration files to include.  These look like
-->
<filename>postgresql.conf</>文件也包含<literal>include_dir</literal>指令，声明了配置文件的
整个目录，它们看起来像：
 <programlisting>
 include_dir 'directory'
 </programlisting>
        <!--
      Non-absolute directory names are taken as relative to the directory
      containing the referencing configuration file.  Within the specified
      directory, only non-directory files whose names end with the
      suffix <literal>.conf</literal> will be included.  File names that
      start with the <literal>.</literal> character are also ignored, to
      prevent mistakes since such files are hidden on some platforms.  Multiple
      files within an include directory are processed in file name order
      (according to C locale rules, i.e. numbers before letters, and
      uppercase letters before lowercase ones).
-->
非绝对路径名被认为和包含引用配置文件的路径相关。在指定的路径中，
只有非目录的文件，其名带有后缀<literal>.conf</literal>的将被包括在内。
也忽略以<literal>.</literal>字符开头的文件名，
为防止自这些文件隐藏在一些平台上以来的出错。
在包含目录中的多个文件按照文件名的顺序进行处理
（根据C语言环境的规则，也就是数字在字母前面，大写字母在小写字母前面）。
     </para>


     
<para>
       <!--
      Include files or directories can be used to logically separate portions
      of the database configuration, rather than having a single large
      <filename>postgresql.conf</> file.  Consider a company that has two
      database servers, each with a different amount of memory.  There are
      likely elements of the configuration both will share, for things such
      as logging.  But memory-related parameters on the server will vary
      between the two.  And there might be server specific customizations,
      too.  One way to manage this situation is to break the custom
      configuration changes for your site into three files.  You could add
      this to the end of your <filename>postgresql.conf</> file to include
      them:
   -->   
   包含文件或目录可用于数据库配置逻辑上独立的部分，
   而不是单一的<filename>postgresql.conf</>文件。 
   考虑有两个数据库服务器公司，
   每一个有不同的内存量。   
   有可能有配置都共享的元素，比如日志。
   但是服务器内存相关参数两者之间不同。
   也有可能是服务器特定的自定义。
   管理这种情况的方法是打破了自定义配置更改为你的网站的三个文件。
   你可以添加这些到你的<filename>postgresql.conf</>文件末尾，包括：
 <programlisting>
 include 'shared.conf'
 include 'memory.conf'
 include 'server.conf'
 </programlisting>
      <!--
      All systems would have the same <filename>shared.conf</>.  Each
      server with a particular amount of memory could share the
      same <filename>memory.conf</>; you might have one for all servers
      with 8GB of RAM, another for those having 16GB.  And
      finally <filename>server.conf</> could have truly server-specific
      configuration information in it.
   -->
   所有系统可能有同样的<filename>shared.conf</>文件。具有特定内存量的每个服务器可以共享
   相同的<filename>memory.conf</>；可能有8GB内存的服务器，另一个是16GB。
   最后<filename>server.conf</>可能真正有服务器特定配置文件信息。
   
     </para>



     
<para>
      <!--
       Another possibility is to create a configuration file directory and
       put this information into files there. For example, a <filename>conf.d</>
       directory could be referenced at the end of<filename>postgresql.conf</>:
   -->
   另外一个可能是创建配置文件目录，并且将这些信息放入文件中。
   比如，<filename>conf.d</>目录可能在<filename>postgresql.conf</>末尾被引用：
<programlisting>
 include_dir 'conf.d'
</programlisting>
      <!--
      Then you could name the files in the <filename>conf.d</> directory
      like this:
   -->
   那么你可以像这样在<filename>conf.d</>目录中命名文件：
<programlisting>
 00shared.conf
 01memory.conf
 02server.conf
</programlisting>
     <!--
       This naming convention establishes a clear order in which these
       files will be loaded.  This is important because only the last
       setting encountered for a particular parameter while the server is
       reading configuration files will be used.  In this example,
       something set in <filename>conf.d/02server.conf</> would override a
       value set in <filename>conf.d/01memory.conf</>.
   -->
这个命名约定建立了一个这些文件被加载的明确顺序。这是非常重要的，
因为当服务器正在读取配置文件时，只使用参数最后的设置。
在这个例子中，<filename>conf.d/02server.conf</>的一些设置会覆盖
<filename>conf.d/01memory.conf</>中设置的值。
     </para>


     
<para>
      <!--
      You might instead use this approach to naming the files
      descriptively:
   -->
你可能会使用这个方法更详细的命名文件： 

<programlisting>
 00shared.conf
 01memory-8GB.conf
 02server-foo.conf
</programlisting>
      <!--
       This sort of arrangement gives a unique name for each configuration file
       variation.  This can help eliminate ambiguity when several servers have
       their configurations all stored in one place, such as in a version
       control repository.  (Storing database configuration files under version
      control is another good practice to consider.)
   -->
   这样的安排使每个配置文件的变化具有唯一名称。
   当一些服务器的配置都存储在一个地方的时候，这可以帮助消除歧义。比如版本 
       控制存储。（版本控制下存储数据库配置文件是另一种很好的做法。）  
     </para>


    </sect2>
   </sect1>

   <sect1 id="runtime-config-file-locations">
    <!--
    <title>File Locations</title>
-->
    <title>文件位置</title>

     <!--
<para>
      In addition to the <filename>postgresql.conf</filename> file
      already mentioned, <productname>PostgreSQL</productname> uses
      two other manually-edited configuration files, which control
      client authentication (their use is discussed in <xref
      linkend="client-authentication">).  By default, all three
      configuration files are stored in the database cluster's data
      directory.  The parameters described in this section allow the
      configuration files to be placed elsewhere.  (Doing so can ease
      administration.  In particular it is often easier to ensure that
      the configuration files are properly backed-up when they are
      kept separate.)
     </para>
-->
<para>
     除了已经提到过的<filename>postgresql.conf</filename>文件之外，<productname>PostgreSQL</productname>还使用另外两个手工编辑的配置文件，
 它们控制客户端认证(在<xref linkend="client-authentication">里讨论)。缺省时，所有三个配置文件都存放在数据库集群的数据目录里。
 本节描述的选项允许配置文件放在别的地方。这么做可以简化管理，
 特别是如果配置文件独立放置，通常可以很容易保证它得到恰当的备份。 
</para>

     <variablelist>
     <varlistentry id="guc-data-directory" xreflabel="data_directory">
      <term><varname>data_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>data_directory</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
         Specifies the directory to use for data storage.
         This parameter can only be set at server start.
       </para>
-->
<para>
       声明为数据存储使用的目录。这个选项只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-config-file" xreflabel="config_file">
      <term><varname>config_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>config_file</> configuration parameter</primary> 
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
         Specifies the main server configuration file
         (customarily called <filename>postgresql.conf</>).
         This parameter can only be set on the <command>postgres</command> command line.
       </para>
-->
<para>
      声明主服务器配置文件(通常叫<filename>postgresql.conf</>)。这个选项只能在<command>postgres</command>命令行上设置。


</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hba-file" xreflabel="hba_file">
      <term><varname>hba_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>hba_file</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
         Specifies the configuration file for host-based authentication
         (customarily called <filename>pg_hba.conf</>).
         This parameter can only be set at server start.
       </para>
-->
<para>
     声明基于主机的认证(HBA)配置文件(通常叫<filename>pg_hba.conf</>)。这个选项只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ident-file" xreflabel="ident_file">
      <term><varname>ident_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ident_file</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
         Specifies the configuration file for
         <xref linkend="auth-username-maps"> user name mapping
         (customarily called <filename>pg_ident.conf</>).
         This parameter can only be set at server start.
       </para>
-->
<para>
       声明用于<xref linkend="auth-username-maps">用户名匹配的配置文件(通常叫<filename>pg_ident.conf</>)。
   这个选项只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-external-pid-file" xreflabel="external_pid_file">
      <term><varname>external_pid_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>external_pid_file</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the name of an additional process-ID (PID) file that the
        server should create for use by server administration programs.
        This parameter can only be set at server start.
       </para>
-->
<para>
      声明可被服务器管理程序使用的额外PID文件。这个选项只能在服务器启动的时候设置。

</para>
      </listitem>
     </varlistentry>
     </variablelist>

     <!--
<para>
      In a default installation, none of the above parameters are set
      explicitly.  Instead, the
      data directory is specified by the <option>-D</option> command-line
      option or the <envar>PGDATA</envar> environment variable, and the
      configuration files are all found within the data directory.
     </para>
-->
<para>
    缺省安装不会明确设置这些参数。而是用命令行参数<option>-D</option>或者环境变量<envar>PGDATA</envar>声明数据目录，
并将上述配置文件都放在数据目录里。


</para>

     <!--
<para>
      If you wish to keep the configuration files elsewhere than the
      data directory, the <command>postgres</command> <option>-D</option>
      command-line option or <envar>PGDATA</envar> environment variable
      must point to the directory containing the configuration files,
      and the <varname>data_directory</> parameter must be set in
      <filename>postgresql.conf</filename> (or on the command line) to show
      where the data directory is actually located.  Notice that
      <varname>data_directory</> overrides <option>-D</option> and
      <envar>PGDATA</envar> for the location
      of the data directory, but not for the location of the configuration
      files.
     </para>
-->
<para>
     如果你想把配置文件放在别的地方，那么<command>postgres</command>的命令行参数<option>-D</option>或者环境变量 
     <envar>PGDATA</envar>必须指向包含配置文件的目录，而<filename>postgresql.conf</filename>里(或者命令行上)的<varname>data_directory</>选项
 必须设置为数据目录实际存放的地方。请注意，<varname>data_directory</>将覆盖<option>-D</option>和
      <envar>PGDATA</envar>指定的数据目录，
 但是不覆盖配置文件的目录。

</para>

     <!--
<para>
      If you wish, you can specify the configuration file names and locations
      individually using the parameters <varname>config_file</>,
      <varname>hba_file</> and/or <varname>ident_file</>.
      <varname>config_file</> can only be specified on the
      <command>postgres</command> command line, but the others can be
      set within the main configuration file.  If all three parameters plus
      <varname>data_directory</> are explicitly set, then it is not necessary
      to specify <option>-D</option> or <envar>PGDATA</envar>.
     </para>
-->
<para>
     如果你愿意，可以使用选项<varname>config_file</>，<varname>hba_file</> 和/或者<varname>ident_file</>
 分别声明配置文件的路径。<varname>config_file</>只能在<command>postgres</command>命令行上设置，
 但是其它的可以在主配置文件里设置。
 如果明确设置了所有三个选项和<varname>data_directory</>，那么就没必要声明<option>-D</option>或者<envar>PGDATA</envar>。
</para>

     <!--
<para>
      When setting any of these parameters, a relative path will be interpreted
      with respect to the directory in which <command>postgres</command>
      is started.
     </para>
-->
<para>
     在设置任何这些选项的时候，相对路径将被解释为相对于<command>postgres</command>启动时候的路径。

</para>
   </sect1>

   <sect1 id="runtime-config-connection">
    <!--
    <title>Connections and Authentication</title>
-->
<title>连接和认证</title>

    <sect2 id="runtime-config-connection-settings">
 <!--
     <title>Connection Settings</title>
 -->
 <title>连接设置</title>

     <variablelist>

     <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
      <term><varname>listen_addresses</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>listen_addresses</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
         Specifies the TCP/IP address(es) on which the server is
         to listen for connections from client applications.
         The value takes the form of a comma-separated list of host names
         and/or numeric IP addresses.  The special entry <literal>*</>
         corresponds to all available IP interfaces.  The entry
         <literal>0.0.0.0</> allows listening for all IPv4 addresses and
         <literal>::</> allows listening for all IPv6 addresses.
         If the list is empty, the server does not listen on any IP interface
         at all, in which case only Unix-domain sockets can be used to connect
         to it.
         The default value is <systemitem class="systemname">localhost</>,
         which allows only local TCP/IP <quote>loopback</> connections to be
         made.  While client authentication (<xref
         linkend="client-authentication">) allows fine-grained control
         over who can access the server, <varname>listen_addresses</varname>
         controls which interfaces accept connection attempts, which
         can help prevent repeated malicious connection requests on
         insecure network interfaces.  This parameter can only be set
         at server start.
       </para>
-->
<para>
     声明服务器监听客户端连接的TCP/IP地址。值是一个逗号分隔的主机名和/或数字IP地址。
 特殊项<literal>*</>对应所有可用IP接口。
 <literal>0.0.0.0</>允许监听所有IPV4地址，并且<literal>::</>允许监听所有IPV6地址。 
 如果这个列表是空的，那么服务器不会监听任何IP接口，
 这种情况下，只有Unix域套接字可以用于连接数据库。
 缺省值<systemitem class="systemname">localhost</>只允许进行本地<quote>回环</>连接。
 客户端认证(<xref linkend="client-authentication">)允许细粒度控制谁能访问服务器，
 <varname>listen_addresses</varname>控制尝试连接哪个接口。
 这个参数只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-port" xreflabel="port">
      <term><varname>port</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>port</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        The TCP port the server listens on; 5432 by default.  Note that the
        same port number is used for all IP addresses the server listens on.
        This parameter can only be set at server start.
       </para>
-->
<para>
     服务器监听的TCP端口；缺省是5432。请注意同一个端口号用于服务器监听的所有IP地址。
 这个参数只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-connections" xreflabel="max_connections">
      <term><varname>max_connections</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_connections</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Determines the maximum number of concurrent connections to the
        database server. The default is typically 100 connections, but
        might be less if your kernel settings will not support it (as
        determined during <application>initdb</>).  This parameter can
        only be set at server start.
       </para>
-->
<para>
    允许和数据库连接的最大并发连接数。缺省通常是100，
但是如果内核设置不支持这么大(在<application>initdb</>的时候判断)，可能会比这个数少。
这个参数只能在服务器启动的时候设置。
</para>

       <!--
<para>
        When running a standby server, you must set this parameter to the
        same or higher value than on the master server. Otherwise, queries
        will not be allowed in the standby server.
       </para>
-->
<para>
     当运行一个备用服务器，你必须将此参数设置为比主服务器上相同的或更高的值。否则，
 不允许在备用服务器上进行查询。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-superuser-reserved-connections"
     xreflabel="superuser_reserved_connections">
      <term><varname>superuser_reserved_connections</varname>
      (<type>integer</type>)
      <indexterm>
       <primary><varname>superuser_reserved_connections</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Determines the number of connection <quote>slots</quote> that
        are reserved for connections by <productname>PostgreSQL</>
        superusers.  At most <xref linkend="guc-max-connections">
        connections can ever be active simultaneously.  Whenever the
        number of active concurrent connections is at least
        <varname>max_connections</> minus
        <varname>superuser_reserved_connections</varname>, new
        connections will be accepted only for superusers, and no
        new replication connections will be accepted.
       </para>
-->
<para>
     决定为<productname>PostgreSQL</>超级用户连接而保留的连接<quote>槽位</quote>。
 一次最多可以同时激活<xref linkend="guc-max-connections">个连接。在活跃的并发连数接到了<varname>max_connections</>
 减去<varname>superuser_reserved_connections</varname>的时候，新的连接就只能由超级用户发起了，
 并且不接收新的复制连接。
</para>

       <!--
<para>
        The default value is three connections. The value must be less
        than the value of <varname>max_connections</varname>. This
        parameter can only be set at server start.
       </para>
-->
<para>
      缺省值是3。这个值必须小于<varname>max_connections</varname>的值。
  这个参数只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-directories" xreflabel="unix_socket_directories">
      <term><varname>unix_socket_directories</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>unix_socket_directories</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the directory of the Unix-domain socket(s) on which the
        server is to listen for connections from client applications.
        Multiple sockets can be created by listing multiple directories
        separated by commas.  Whitespace between entries is
        ignored; surround a directory name with double quotes if you need
        to include whitespace or commas in the name.
        An empty value
        specifies not listening on any Unix-domain sockets, in which case
        only TCP/IP sockets can be used to connect to the server.
        The default value is normally
        <filename>/tmp</filename>, but that can be changed at build time.
        This parameter can only be set at server start.
       </para>
-->
<para>
      指定Unix域套接字（S）的目录，
  并且服务器监听来自客户端应用程序的连接。
  多个套接字可以通过列出多个用逗号分隔的目录创建。
  忽略条目之间的空白;
  如果你需要包含空格或逗号的名字，增加带有双引号的目录名。
  空值指定不监听任何Unix域的套接字，
  在这种情况下，只有TCP/IP套接字可以用于连接到服务器。 
  默认值通常是<filename>/tmp</filename>，但可以在编译的时候改变。 
      这个参数只能在服务器启动的。
</para>

       <!--
<para>
        In addition to the socket file itself, which is named
        <literal>.s.PGSQL.<replaceable>nnnn</></literal> where
        <replaceable>nnnn</> is the server's port number, an ordinary file
        named <literal>.s.PGSQL.<replaceable>nnnn</>.lock</literal> will be
        created in each of the <varname>unix_socket_directories</> directories.
        Neither file should ever be removed manually.
       </para>
-->
<para>
       除套接字文件本身外，它被命名为
   <literal>.s.PGSQL.<replaceable>nnnn</></literal>，其中
   <replaceable>nnnn</>是服务器的端口号，普通文件 
   命名的<literal>.s.PGSQL.<replaceable>nnnn</>.lock</literal>
   将在每个<varname>unix_socket_directories</>目录中创建。 
   永远都不应该手动删除这两个文件。
</para>

       <!--
<para>
        This parameter is irrelevant on Windows, which does not have
        Unix-domain sockets.
       </para>
-->
<para>
       这个参数在Windows上是无关紧要的，它不具有Unix域套接字。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
      <term><varname>unix_socket_group</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>unix_socket_group</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the owning group of the Unix-domain socket(s).  (The owning
        user of the sockets is always the user that starts the
        server.)  In combination with the parameter
        <varname>unix_socket_permissions</varname> this can be used as
        an additional access control mechanism for Unix-domain connections.
        By default this is the empty string, which uses the default
        group of the server user.  This parameter can only be set at
        server start.
       </para>
-->
<para>
       设置Unix域套接字的所属组(套接字的所属用户总是启动服务器的用户)。
   可以与选项<varname>unix_socket_permissions</varname>一起用于对套接字进行访问控制。
   缺省是一个空字符串，
   表示当前服务器用户的缺省组。这个选项只能在服务器启动的时候设置。
</para>

       <!--
<para>
        This parameter is irrelevant on Windows, which does not have
        Unix-domain sockets.
       </para>
-->
<para>
       这个参数在Windows上是无关紧要的，它不具有Unix域套接字。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-permissions" xreflabel="unix_socket_permissions">
      <term><varname>unix_socket_permissions</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>unix_socket_permissions</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the access permissions of the Unix-domain socket(s).  Unix-domain
        sockets use the usual Unix file system permission set.
        The parameter value is expected to be a numeric mode
        specified in the format accepted by the
        <function>chmod</function> and <function>umask</function>
        system calls.  (To use the customary octal format the number
        must start with a <literal>0</literal> (zero).)
       </para>
-->
<para>
        设置Unix域套接字的访问权限。Unix域套接字使用普通的Unix文件系统权限集。
这个参数值应该是数值的形式，也就是系统调用<function>chmod</function>和<function>umask</function>
接受的形式。如果使用自定义的八进制格式，数字必须以<literal>0</literal>开头。
</para>

       <!--
<para>
        The default permissions are <literal>0777</literal>, meaning
        anyone can connect. Reasonable alternatives are
        <literal>0770</literal> (only user and group, see also
        <varname>unix_socket_group</varname>) and <literal>0700</literal>
        (only user). (Note that for a Unix-domain socket, only write
        permission matters, so there is no point in setting or revoking
        read or execute permissions.)
       </para>
-->
<para>
       缺省的权限是<literal>0777</literal>，意思是任何人都可以连接。合理的候选是<literal>0770</literal>
   (只有用户和同组的人可以访问，
   又见<varname>unix_socket_group</varname>)和<literal>0700</literal>(只有用户自己可以访问)。
   请注意，对于Unix域套接字，只有写权限有意义，
   因此在设置和撤销读和执行权限中没有任何意义。
</para>

       <!--
<para>
        This access control mechanism is independent of the one
        described in <xref linkend="client-authentication">.
       </para>
-->
<para>
      这个访问控制机制与<xref linkend="client-authentication">里描述的用户认证毫无关系。
</para>

       <!--
<para>
        This parameter can only be set at server start.
       </para>
-->
<para>
      这个参数只能在服务器启动的时候设置。
</para>

       <!--
<para>
        This parameter is irrelevant on systems, notably Solaris as of Solaris
        10, that ignore socket permissions entirely.  There, one can achieve a
        similar effect by pointing <varname>unix_socket_directories</> to a
        directory having search permission limited to the desired audience.
        This parameter is also irrelevant on Windows, which does not have
        Unix-domain sockets.
       </para>
-->
<para>
这个参数与系统无关，尤其是到了Solaris 10，完全忽略套接字权限。这里，
可以通过将<varname>unix_socket_directories</>指向一个将搜索权限限制为所需用户的路径来达到相似效果。
这个参数在Windows上也是无关紧要的，因为它不具有Unix域套接字。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour" xreflabel="bonjour">
      <term><varname>bonjour</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>bonjour</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables advertising the server's existence via
        <productname>Bonjour</productname>.  The default is off.
        This parameter can only be set at server start.
       </para>
-->
<para>
       通过<productname>Bonjour</productname>启动广播服务器的存在。缺省是关闭的。
   这个值只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour-name" xreflabel="bonjour_name">
      <term><varname>bonjour_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>bonjour_name</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the <productname>Bonjour</productname> service
        name.  The computer name is used if this parameter is set to the
        empty string <literal>''</> (which is the default).  This parameter is
        ignored if the server was not compiled with
        <productname>Bonjour</productname> support.
        This parameter can only be set at server start.
       </para>
-->
<para>
        声明<productname>Bonjour</productname>服务器名称。
空字符串<literal>''</>(缺省值)表示使用计算机名。
如果编译时没有打开<productname>Bonjour</productname>支持那么将忽略这个参数。
这个值只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-idle" xreflabel="tcp_keepalives_idle">
      <term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_idle</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the number of seconds of inactivity after which TCP
        should send a keepalive message to the client.  A value of 0 uses
        the system default.
        This parameter is supported only on systems that support the
        <symbol>TCP_KEEPIDLE</> or <symbol>TCP_KEEPALIVE</> symbols, and on
        Windows; on other systems, it must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
       </para>
-->
<para>
声明TCP应该发送保持活跃信息到客户端后不活跃的秒数。
   零使用系统默认值。该参数仅在支持
   <symbol>TCP_KEEPIDLE</>或者<symbol>TCP_KEEPALIVE</>符号以及
       Windows的系统上出现;在其它系统中，它必须是零。
   在通过Unix域套接字连接的会话中，这个参数被忽略，并且总是读为零。
</para>
       <note>
        <!--
<para>
         On Windows, a value of 0 will set this parameter to 2 hours,
         since Windows does not provide a way to read the system default value.
        </para>
-->
<para>
        在Windows中，0值将这个参数设置为2小时，
因为Windows不提供读取系统默认值的方法。
</para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-interval" xreflabel="tcp_keepalives_interval">
      <term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_interval</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the number of seconds after which a TCP keepalive message
        that is not acknowledged by the client should be retransmitted.
        A value of 0 uses the system default.
        This parameter is supported only on systems that support the
        <symbol>TCP_KEEPINTVL</> symbol, and on Windows; on other systems, it
        must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
       </para>
-->
<para>
声明TCP保持活跃信息不被客户端承认，应该被转发的秒数。
   零使用系统默认值。
       在那些支持<symbol>TCP_KEEPINTVL</>符号以及Windows的系统上支持这些参数。
   在其他系统上，这个参数必须为零。
   在通过Unix域套接字连接的会话中，这个参数被忽略，并且总是读为零。
</para>
       <note>
        <!--
<para>
         On Windows, a value of 0 will set this parameter to 1 second,
         since Windows does not provide a way to read the system default value.
        </para>
-->
<para>
        在Windows中，0值将这个参数设置为1秒，
因为Windows不提供读取系统默认值的方法。
</para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-count" xreflabel="tcp_keepalives_count">
      <term><varname>tcp_keepalives_count</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_count</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the number of TCP keepalives that can be lost before
        the server's connection to the client is considered dead.  A value of 0
        uses the system default.  This parameter is
        supported only on systems that support the <symbol>TCP_KEEPCNT</>
        symbol; on other systems, it must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
       </para>
-->
<para>
声明服务器到客户端的连接被认为关闭之前，TCP保持活跃信号可以丢失的数量。
    零使用系统默认值。
在那些支持<symbol>TCP_KEEPCNT</>的系统上支持这些参数。
在其他系统上，这个参数必须为零。
在通过Unix域套接字连接的会话中，这个选项被忽略，并且总是读为零。
</para>
       <note>
        <!--
<para>
         This parameter is not supported on Windows, and must be zero.
        </para>
-->
<para>
         在Windows上不支持这个参数，并且总是为零。
</para>
       </note>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-connection-security">
 <!--
     <title>Security and Authentication</title>
 -->
 <title>安全和认证</title>

     <variablelist>
     <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
      <term><varname>authentication_timeout</varname> (<type>integer</type>)
      <indexterm><primary>timeout</><secondary>client authentication</></indexterm>
      <indexterm><primary>client authentication</><secondary>timeout during</></indexterm>
      <indexterm>
       <primary><varname>authentication_timeout</> configuration parameter</primary>
      </indexterm>
      </term>

      <listitem>
       <!--
<para>
        Maximum time to complete client authentication, in seconds. If a
        would-be client has not completed the authentication protocol in
        this much time, the server closes the connection. This prevents
        hung clients from occupying a connection indefinitely.
        The default is one minute (<literal>1m</>).
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
       完成客户端认证的最长时间，以秒计。如果一个客户端没有在这段时间里完成认证协议，
   服务器将中断连接。这样就避免了出问题的客户端无限制地占据连接资源。缺省是60秒(<literal>1m</>)。
   这个选项只能在命令行上或者在<filename>postgresql.conf</>里设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl" xreflabel="ssl">
      <term><varname>ssl</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ssl</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables <acronym>SSL</> connections. Please read
        <xref linkend="ssl-tcp"> before using this. The default
        is <literal>off</>. This parameter can only be set at server
        start.  <acronym>SSL</> communication is only possible with
        TCP/IP connections.
       </para>
-->
<para>
       启用<acronym>SSL</>连接。请在使用这个选项之前阅读<xref linkend="ssl-tcp">。
   缺省是<literal>off</>。
   这个选项只能在服务器启动的时候设置。<acronym>SSL</>通讯与TCP/IP
   连接是唯一可能的。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-ca-file" xreflabel="ssl_ca_file">
      <term><varname>ssl_ca_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ca_file</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the name of the file containing the SSL server certificate
        authority (CA).  The default is empty, meaning no CA file is loaded,
        and client certificate verification is not performed.  (In previous
        releases of PostgreSQL, the name of this file was hard-coded
        as <filename>root.crt</filename>.)  Relative paths are relative to the
        data directory.  This parameter can only be set at server start.
       </para>
-->
<para>
      指定包含SSL服务器证书颁发机构（CA）的文件名称。
  默认值为空，意味着没有CA文件被加载，
  并且不进行客户端证书验证。 
  （在以前的PostgreSQL版本中，此文件的名称是作为<filename>root.crt</filename>的硬编码。）
  相对路径是相对于数据目录。这个参数只能在服务器启动进行设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-cert-file" xreflabel="ssl_cert_file">
      <term><varname>ssl_cert_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_cert_file</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the name of the file containing the SSL server certificate.
        The default is <filename>server.crt</filename>.  Relative paths are
        relative to the data directory.  This parameter can only be set at
        server start.
       </para>
-->
<para>
    指定包含SSL服务器证书的文件名称。 
默认值是<filename>server.crt</filename>。相对路径是 
相对于数据目录。这个参数只能在服务器启动时进行设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-crl-file" xreflabel="ssl_crl_file">
      <term><varname>ssl_crl_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_crl_file</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the name of the file containing the SSL server certificate
        revocation list (CRL).  The default is empty, meaning no CRL file is
        loaded.  (In previous releases of PostgreSQL, the name of this file was
        hard-coded as <filename>root.crl</filename>.)  Relative paths are
        relative to the data directory.  This parameter can only be set at
        server start.
       </para>
-->
<para>
      指定包含SSL服务器证书撤销列表(CRL)的文件名称。
  默认值为空，意味着没有CRL文件被加载。 
  （在PostgreSQL的早期版本中，该文件的名称为<filename>root.crl</filename>的 
  硬编码。）相对路径是相对于数据目录。这个参数只能在服务器启动时候进行设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-key-file" xreflabel="ssl_key_file">
      <term><varname>ssl_key_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_key_file</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the name of the file containing the SSL server private key.
        The default is <filename>server.key</filename>.  Relative paths are
        relative to the data directory.  This parameter can only be set at
        server start.
       </para>
-->
<para>
     指定包含SSL服务器私钥的文件名称。 
 默认值是<filename>server.key</filename>。相对路径是
 相对于数据目录。这个参数只能在服务器启动时设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-renegotiation-limit" xreflabel="ssl_renegotiation_limit">
      <term><varname>ssl_renegotiation_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>ssl_renegotiation_limit</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies how much data can flow over an <acronym>SSL</>-encrypted
        connection before renegotiation of the session keys will take
        place. Renegotiation decreases an attacker's chances of doing
        cryptanalysis when large amounts of traffic can be examined, but it
        also carries a large performance penalty. The sum of sent and received
        traffic is used to check the limit. If this parameter is set to 0,
        renegotiation is disabled. The default is <literal>512MB</>.
       </para>
-->
<para> 
 在会话密钥发生重新商议之前，指定多少数据可以进行<acronym>SSL</>-加密。 
 当大量流量被检查的时候，但它也会产生大量性能损失，重新谈判降低攻击者密码分析的机会 
 。总的发送和接收的流量用于检查极限。如果该参数被设置为0， 
 禁用重新谈判。默认值是<literal>512MB</>。
</para>
       <note>
        <!--
<para>
         SSL libraries from before November 2009 are insecure when using SSL
         renegotiation, due to a vulnerability in the SSL protocol. As a
         stop-gap fix for this vulnerability, some vendors shipped SSL
         libraries incapable of doing renegotiation. If any such libraries
         are in use on the client or server, SSL renegotiation should be
         disabled.
        </para>
-->
<para>
     当使用SSL时再商议时候，2009年11月之前的SSL库是不安全的，由于SSL协议的一个漏洞。
 作为这个漏洞修复，一些厂商出货的SSL库不能重新谈判。
 如果在客户端或服务器上使用任何库，应禁用SSL重新协商。
</para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-ciphers" xreflabel="ssl_ciphers">
      <term><varname>ssl_ciphers</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ciphers</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        Specifies a list of <acronym>SSL</> cipher suites that are allowed to be
        used on secure connections.  See
        the <citerefentry><refentrytitle>ciphers</></citerefentry> manual page
        in the <application>OpenSSL</> package for the syntax of this setting
        and a list of supported values.  The default value is
        <literal>HIGH:MEDIUM:+3DES:!aNULL</>.  It is usually reasonable,
        unless you have specific security requirements.
       </para>
-->
<para>
指定一列允许在安全连接上使用的<acronym>SSL</>密码组。参阅<application>OpenSSL</>
报中的<citerefentry><refentrytitle>ciphers</></citerefentry>手册页获取这个设置的语法，
和一系列支持的值。缺省值是<literal>HIGH:MEDIUM:+3DES:!aNULL</>。
它通常是合理的，除非你有特殊的安全需求。
</para>
       <para>
        <!-- 
        Explanation of the default value:
        -->
        缺省值的适用说明：
        <variablelist>
         <varlistentry>
          <term><literal>HIGH</literal></term>
          <listitem>
           <!-- 
           <para>
            Cipher suites that use ciphers from <literal>HIGH</> group (e.g.,
            AES, Camellia, 3DES)
           </para>
           -->
           <para>
            密码组使用来自<literal>HIGH</>组的密码（例如AES、Camellia、3DES）
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>MEDIUM</literal></term>
          <listitem>
           <!-- 
           <para>
            Cipher suites that use ciphers from <literal>MEDIUM</> group
            (e.g., RC4, SEED)
           </para>
           -->
           <para>
            密码组使用来自<literal>MEDIUM</>组的密码（例如RC4、SEED）
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>+3DES</literal></term>
          <listitem>
           <!-- 
           <para>
            The OpenSSL default order for <literal>HIGH</> is problematic
            because it orders 3DES higher than AES128.  This is wrong because
            3DES offers less security than AES128, and it is also much
            slower.  <literal>+3DES</> reorders it after all other
            <literal>HIGH</> and <literal>MEDIUM</> ciphers.
           </para>
           -->
           <para>
            OpenSSL对<literal>HIGH</>的默认顺序是有问题的，
            因为它认为3DES比AES128高。这是错误的，因为3DES提供的安全性比AES128要低。
            <literal>+3DES</>重新排列了所有其他<literal>HIGH</>和<literal>MEDIUM</>密码。
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term><literal>!aNULL</literal></term>
          <listitem>
           <!-- 
           <para>
            Disables anonymous cipher suites that do no authentication.  Such
            cipher suites are vulnerable to man-in-the-middle attacks and
            therefore should not be used.
           </para>
           -->
           <para>
            禁用没有认证的匿名密码组。这样的密码组容易受到中间人的攻击，
            因此应该不要使用。
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </para>
       <!-- 
       <para>
        Available cipher suite details will vary across OpenSSL versions.  Use
        the command
        <literal>openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</literal> to
        see actual details for the currently installed <application>OpenSSL</>
        version.  Note that this list is filtered at run time based on the
        server key type.
       </para>
       -->
       <para>
        可用的密码组明细随着OpenSSL的版本而变化，使用命令
        <literal>openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</literal>
        查看当前安装的OpenSSL版本的密码组明细。请注意，
        这个列表基于服务器秘钥类型在运行时过滤。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="guc-ssl-prefer-server-ciphers" xreflabel="ssl_prefer_server_ciphers">
      <term><varname>ssl_prefer_server_ciphers</varname> (<type>bool</type>)
      <indexterm>
       <primary><varname>ssl_prefer_server_ciphers</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!-- 
       <para>
        Specifies whether to use the server's SSL cipher preferences, rather
        than the client's.  The default is true.
       </para>
       -->
       <para>
        声明是否使用服务器的SSL预设密码，而不是客户端的。缺省是true。
       </para>
       <!-- 
       <para>
        Older PostgreSQL versions do not have this setting and always use the
        client's preferences.  This setting is mainly for backward
        compatibility with those versions.  Using the server's preferences is
        usually better because it is more likely that the server is appropriately
        configured.
       </para>
       -->
       <para>
        较老的PostgreSQL版本没有这个设置，并且总是使用客户端的预设。
        这个设置主要是为了向后兼容。通常使用服务器的预设更好一些，
        因为服务器更有可能适当的配置了。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="guc-ssl-ecdh-curve" xreflabel="ssl_ecdh_curve">
      <term><varname>ssl_ecdh_curve</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ecdh_curve</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!-- 
       <para>
        Specifies the name of the curve to use in <acronym>ECDH</> key
        exchange.  It needs to be supported by all clients that connect.
        It does not need to be same curve as used by server's Elliptic
        Curve key.  The default is <literal>prime256v1</>.
       </para>
       -->
       <para>
        声明在<acronym>ECDH</>秘钥交换中要使用的curve的名字。
        它需要所有连接客户端的支持。它不需要和服务器的Elliptic Curve秘钥相同。
        缺省是<literal>prime256v1</>。
       </para>
       <!-- 
       <para>
        OpenSSL names for most common curves:
        <literal>prime256v1</> (NIST P-256),
        <literal>secp384r1</> (NIST P-384),
        <literal>secp521r1</> (NIST P-521).
       </para>
       -->
       <para>
        大多数curve的OpenSSL名:
        <literal>prime256v1</> (NIST P-256)、
        <literal>secp384r1</> (NIST P-384)、
        <literal>secp521r1</> (NIST P-521)。
       </para>
       <!-- 
       <para>
        The full list of available curves can be shown with the command
        <command>openssl ecparam -list_curves</command>.  Not all of them
        are usable in <acronym>TLS</> though.
       </para>
       -->
       <para>
        使用命令<command>openssl ecparam -list_curves</command>
        可以显示所有可用的curve的列表。并不是所有的curve都可以在
        <acronym>TLS</>中使用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-password-encryption" xreflabel="password_encryption">
      <term><varname>password_encryption</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>password_encryption</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When a password is specified in <xref
        linkend="sql-createuser"> or
        <xref linkend="sql-alterrole">
        without writing either <literal>ENCRYPTED</> or
        <literal>UNENCRYPTED</>, this parameter determines whether the
        password is to be encrypted. The default is <literal>on</>
        (encrypt the password).
       </para>
-->
<para>
      在<xref linkend="sql-createuser">或者<xref linkend="sql-alterrole">里声明了一个口令，
  而又没有写<literal>ENCRYPTED</>或者<literal>UNENCRYPTED</>的时候，这个选项决定口令是否要加密。
  缺省是<literal>on</>(加密口令)。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
      <term><varname>krb_server_keyfile</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>krb_server_keyfile</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the location of the Kerberos server key file. See
        <xref linkend="gssapi-auth">
        for details. This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
-->
<para>
       设置Kerberos服务器键字文件的位置。参阅<xref linkend="gssapi-auth">获取细节。
   这个参数只能在<filename>postgresql.conf</>文件或者服务器命令行中设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-caseins-users" xreflabel="krb_caseins_users">
      <term><varname>krb_caseins_users</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>krb_caseins_users</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets whether GSSAPI user names should be treated
        case-insensitively.
        The default is <literal>off</> (case sensitive). This parameter can only be
        set in the <filename>postgresql.conf</> file or on the server command line.
       </para>
-->
<para>
      设置GSSAPI用户名是否大小写无关。
  缺省是<literal>off</>(大小写相关)。
  这个参数只能在<filename>postgresql.conf</>文件或者服务器命令行中设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-db-user-namespace" xreflabel="db_user_namespace">
      <term><varname>db_user_namespace</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>db_user_namespace</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This parameter enables per-database user names.  It is off by default.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
       这个参数启动每个数据库的用户名。
   缺省是关闭的。这个参数只能在命令行上或者在<filename>postgresql.conf</>里设置。
</para>

       <!--
<para>
        If this is on, you should create users as <literal>username@dbname</>.
        When <literal>username</> is passed by a connecting client,
        <literal>@</> and the database name are appended to the user
        name and that database-specific user name is looked up by the
        server. Note that when you create users with names containing
        <literal>@</> within the SQL environment, you will need to
        quote the user name.
       </para>
-->
<para>
   如果打开这个选项，你应该像<literal>username@dbname</>这样创建用户。
   在给一个正在连接的客户端传递<literal>username</>的时候，必须给用户名附加<literal>@</>和数据库名字，
   然后服务器查找该数据库相关的用户名字。请注意，如果你在SQL环境里创建包含<literal>@</>的名字时，
   你需要用引号包围用户名。
</para>

       <!--
<para>
        With this parameter enabled, you can still create ordinary global
        users.  Simply append <literal>@</> when specifying the user
        name in the client, e.g. <literal>joe@</>.  The <literal>@</>
        will be stripped off before the user name is looked up by the
        server.
       </para>
-->
<para>
    打开这个选项之后，你还是能够创建普通的全局用户。
只要在客户端声明用户的时候附加一个<literal>@</>即可。比如<literal>joe@</>。
在服务器查找这个用户名之前，这个<literal>@</>会被剥除。
</para>

       <!--
<para>
        <varname>db_user_namespace</> causes the client's and
        server's user name representation to differ.
        Authentication checks are always done with the server's user name
        so authentication methods must be configured for the
        server's user name, not the client's.  Because
        <literal>md5</> uses the user name as salt on both the
        client and server, <literal>md5</> cannot be used with
        <varname>db_user_namespace</>.
       </para>
-->
<para>
     <varname>db_user_namespace</>导致客户端和服务器端的用户名表示不同。 
 验证检查总是与该服务器的用户名一起进行， 
 所以验证方法必须配置为服务器的用户名，而不是客户端的。因为 
 <literal>md5</>在客户端和服务器上使用用户名，
 <literal>md5</>不能与<varname>db_user_namespace</>一起使用。 
</para>

       <note>
        <!--
<para>
         This feature is intended as a temporary measure until a
         complete solution is found.  At that time, this option will
         be removed.
        </para>
-->
<para>
     这个特性只是临时措施，直到找到一个完全的解决方案。那个时候，这个选项将被删除。
</para>
       </note>
      </listitem>
     </varlistentry>

    </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-resource">
   <!--
    <title>Resource Consumption</title>
-->
<title>资源消耗</title>

    <sect2 id="runtime-config-resource-memory">
<!--
     <title>Memory</title>
 -->
  <title>内存</title>

     <variablelist>
     <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
      <term><varname>shared_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>shared_buffers</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the amount of memory the database server uses for shared
        memory buffers.  The default is typically 128 megabytes
        (<literal>128MB</>), but might be less if your kernel settings will
        not support it (as determined during <application>initdb</>).
        This setting must be at least 128 kilobytes.  (Non-default
        values of <symbol>BLCKSZ</symbol> change the minimum.)  However,
        settings significantly higher than the minimum are usually needed
        for good performance.  This parameter can only be set at server start.
       </para>
-->
<para>
     设置数据库服务器将使用的共享内存缓冲区数量。缺省通常是128兆字节(<literal>128MB</>)，
 但是如果你的内核设置不支持这么大，那么可以少些(在<application>initdb</>的时候决定)。
 每个缓冲区大小的典型值是128千字节，（<symbol>BLCKSZ</symbol>的非缺省值改变最小值）
 不过，这个数值比最小值大一些通常需要更好的性能。
 这个选项只能在服务器启动的时候设置。
</para>

       <!--
<para>
        If you have a dedicated database server with 1GB or more of RAM, a
        reasonable starting value for <varname>shared_buffers</varname> is 25%
        of the memory in your system.  There are some workloads where even
        large settings for <varname>shared_buffers</varname> are effective, but
        because <productname>PostgreSQL</productname> also relies on the
        operating system cache, it is unlikely that an allocation of more than
        40% of RAM to <varname>shared_buffers</varname> will work better than a
        smaller amount.  Larger settings for <varname>shared_buffers</varname>
        usually require a corresponding increase in
        <varname>checkpoint_segments</varname>, in order to spread out the
        process of writing large quantities of new or changed data over a
        longer period of time.
       </para>
-->
<para>
     如果你有1GB或更多内存的专用数据库服务器， 
 对于<varname>shared_buffers</varname>合理的初始值是您的系统内存的25%。
     有一些工作负载，甚至在那里对于<varname>shared_buffers</varname>大设置是有效的， 
 但因为<productname>PostgreSQL</productname>也依赖于操作系统缓存，
 它是不可能的，RAM到<varname>shared_buffers</varname>的多于40%的分配比更少数量的工作的更好。
 对于<varname>shared_buffers</varname>的大量设置
 通常要求相应增加<varname>checkpoint_segments</varname>，
 为了延长写大量新的或者需较长时间修改的数据的进程。
</para>

       <!--
<para>
        On systems with less than 1GB of RAM, a smaller percentage of RAM is
        appropriate, so as to leave adequate space for the operating system.
        Also, on Windows, large values for <varname>shared_buffers</varname>
        aren't as effective.  You may find better results keeping the setting
        relatively low and using the operating system cache more instead.  The
        useful range for <varname>shared_buffers</varname> on Windows systems
        is generally from 64MB to 512MB.
       </para>
-->
<para>
      对于少于1GB RAM系统，
  较小百分比内存是相应的，
  以便为操作系统留有足够的空间。 
  此外，在Windows上，<varname>shared_buffers</varname>大点的值不是很有效。
  您可能会发现更好的结果保持设置相对较低，并且使用操作系统的缓存代替。
  在Windows系统上<varname>shared_buffers</varname>的有用范围一般是从64MB到512MB。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-huge-pages" xreflabel="huge_pages">
      <term><varname>huge_pages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>huge_pages</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!-- 
       <para>
        Enables/disables the use of huge memory pages. Valid values are
        <literal>try</literal> (the default), <literal>on</literal>,
        and <literal>off</literal>.
       </para>
       -->
       <para>
        启用/禁用大内存页的使用。有效值是<literal>try</literal>（缺省）、
        <literal>on</literal>和<literal>off</literal>。
       </para>
       <!-- 
       <para>
        At present, this feature is supported only on Linux. The setting is
        ignored on other systems when set to <literal>try</literal>.
       </para>
       -->
       <para>
        目前，仅在Linux上支持这个特性。当设置为<literal>try</literal>时，
        在其他系统上忽略该设置。
       </para>
       <!-- 
       <para>
        The use of huge pages results in smaller page tables and less CPU time
        spent on memory management, increasing performance. For more details,
        see <xref linkend="linux-huge-pages">.
       </para>
       -->
       <para>
        大内存页的使用，减小了页表，节省了CPU花费在内存管理上的时间，
        提高了性能。详细信息请查看<xref linkend="linux-huge-pages">。
       </para>
       <!-- 
       <para>
        With <varname>huge_pages</varname> set to <literal>try</literal>,
        the server will try to use huge pages, but fall back to using
        normal allocation if that fails. With <literal>on</literal>, failure
        to use huge pages will prevent the server from starting up. With
        <literal>off</literal>, huge pages will not be used.
       </para>
       -->
       <para>
        <varname>huge_pages</varname>设置为<literal>try</literal>时，
        服务器将尝试使用大页面，如果失败的话，再回滚使用普通配置。
        设置为<literal>on</literal>时，未能使用大页面将阻止服务器启动。
        设置为<literal>off</literal>时，将不使用大页面。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-buffers" xreflabel="temp_buffers">
      <term><varname>temp_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>temp_buffers</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the maximum number of temporary buffers used by each database
        session.  These are session-local buffers used only for access to
        temporary tables.  The default is eight megabytes
        (<literal>8MB</>).  The setting can be changed within individual
        sessions, but only before the first use of temporary tables
        within the session; subsequent attempts to change the value will
        have no effect on that session.
       </para>
-->
<para>
    设置每个数据库会话使用的临时缓冲区的最大数目。这些都是会话的本地缓冲区，
只用于访问临时表。缺省是8兆字节(<literal>8MB</>)。这个设置可以在独立的会话内部设置，
但是只有在会话第一次使用临时表的时候才能增长；
企图在该会话里随后改变该数值是无效的。
</para>

       <!--
<para>
        A session will allocate temporary buffers as needed up to the limit
        given by <varname>temp_buffers</>.  The cost of setting a large
        value in sessions that do not actually need many temporary
        buffers is only a buffer descriptor, or about 64 bytes, per
        increment in <varname>temp_buffers</>.  However if a buffer is
        actually used an additional 8192 bytes will be consumed for it
        (or in general, <symbol>BLCKSZ</symbol> bytes).
       </para>
-->
<para>
      一个会话将按照<varname>temp_buffers</>给出的限制，根据需要分配临时缓冲区。
  如果在一个并不需要大量临时缓冲区的会话里设置一个大的数值，
  其开销只是一个缓冲区描述符，或者说每个<varname>temp_buffers</>增加大概64字节。不过，
  如果一个缓冲区实际上被使用，那么就会额外消耗8192字节(或者说是<symbol>BLCKSZ</symbol>字节)。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-prepared-transactions" xreflabel="max_prepared_transactions">
      <term><varname>max_prepared_transactions</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_prepared_transactions</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the maximum number of transactions that can be in the
        <quote>prepared</> state simultaneously (see <xref
        linkend="sql-prepare-transaction">).
        Setting this parameter to zero (which is the default)
        disables the prepared-transaction feature.
        This parameter can only be set at server start.
       </para>
-->
<para>
      设置可以同时处于<quote>预备</>状态的事务的最大数目(参阅<xref linkend="sql-prepare-transaction">)。
  把这个参数设置为零（这是缺省值）则关闭预备事务的特性。
  这个值只能在服务器启动的时候设置。
</para>

       <!--
<para>
        If you are not planning to use prepared transactions, this parameter
        should be set to zero to prevent accidental creation of prepared
        transactions.  If you are using prepared transactions, you will
        probably want <varname>max_prepared_transactions</varname> to be at
        least as large as <xref linkend="guc-max-connections">, so that every
        session can have a prepared transaction pending.
       </para>
-->
<para>
      如果你不打算使用预备事务，这个参数也可以设置为零。
  避免预备事务的偶然建立。如果你使用它们，
  你可能会需要把<varname>max_prepared_transactions</varname>设置成至少和<xref linkend="guc-max-connections">
  一样大，以避免每个会话可以有预备事务挂起。
</para>

       <!--
<para>
        When running a standby server, you must set this parameter to the
        same or higher value than on the master server. Otherwise, queries
        will not be allowed in the standby server.
       </para>
-->
<para>
        当运行备库服务器时，你必须设置相同参数或者比主服务器上更高参数值。
否则，在备库服务器上不允许查询。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-work-mem" xreflabel="work_mem">
      <term><varname>work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>work_mem</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the amount of memory to be used by internal sort operations
        and hash tables before writing to temporary disk files. The value
        defaults to four megabytes (<literal>4MB</>).
        Note that for a complex query, several sort or hash operations might be
        running in parallel; each operation will be allowed to use as much memory
        as this value specifies before it starts to write data into temporary
        files. Also, several running sessions could be doing such operations
        concurrently.  Therefore, the total memory used could be many
        times the value of <varname>work_mem</varname>; it is necessary to
        keep this fact in mind when choosing the value. Sort operations are
        used for <literal>ORDER BY</>, <literal>DISTINCT</>, and
        merge joins.
        Hash tables are used in hash joins, hash-based aggregation, and
        hash-based processing of <literal>IN</> subqueries.
       </para>
-->
<para>
      声明内部排序操作和Hash表在开始使用临时磁盘文件之前使用的内存数目。
  缺省数值是4兆字节(<literal>4MB</>)。请注意对于复杂的查询，
  可能会同时并发运行好几个排序或者散列操作；每个都会被批准使用这个参数声明的这么多内存，
  然后才会开始求助于临时文件。同样，好几个正在运行的会话可能会同时进行排序操作。
  因此使用的总内存可能是<varname>work_mem</varname>的好几倍。
  当选择这个值的时候，必须记住这个事实。
  <literal>ORDER BY</>, <literal>DISTINCT</>和融合连接都要用到排序操作。 
  Hash表在散列连接、散列为基础的聚合、散列为基础的<literal>IN</>子查询处理中都要用到。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-maintenance-work-mem" xreflabel="maintenance_work_mem">
      <term><varname>maintenance_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>maintenance_work_mem</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the maximum amount of memory to be used by maintenance
        operations, such as <command>VACUUM</command>, <command>CREATE
        INDEX</>, and <command>ALTER TABLE ADD FOREIGN KEY</>.  It defaults
        to 64 megabytes (<literal>64MB</>).  Since only one of these
        operations can be executed at a time by a database session, and
        an installation normally doesn't have many of them running
        concurrently, it's safe to set this value significantly larger
        than <varname>work_mem</varname>.  Larger settings might improve
        performance for vacuuming and for restoring database dumps.
       </para>
-->
<para>
       声明在维护性操作(比如<command>VACUUM</command>, <command>CREATE
        INDEX</>和<command>ALTER TABLE ADD FOREIGN KEY</>)中使用的最大的内存数。
   缺省是64兆字节(<literal>64MB</>)。因为在一个数据库会话里，
   任意时刻只有一个这样的操作可以执行，并且一个数据库安装通常不会有太多这样的工作并发执行，
   把这个数值设置得比<varname>work_mem</varname>更大是安全的。
   更大的设置可以改进清理和恢复数据库转储的速度。
</para>
       <!--
<para>
        Note that when autovacuum runs, up to
        <xref linkend="guc-autovacuum-max-workers"> times this memory
        may be allocated, so be careful not to set the default value
        too high.  It may be useful to control for this by separately
        setting <xref linkend="guc-autovacuum-work-mem">.
       </para>
-->
<para>
       请注意，当自动清理运行时，
这个内存会被分配最多<xref linkend="guc-autovacuum-max-workers">次，
所以要小心，不要设置默认值太高。这对于单独设置
<xref linkend="guc-autovacuum-work-mem">来控制内存分配是有帮助的。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-work-mem" xreflabel="autovacuum_work_mem">
      <term><varname>autovacuum_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_work_mem</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!-- 
       <para>
        Specifies the maximum amount of memory to be used by each
        autovacuum worker process.  It defaults to -1, indicating that
        the value of <xref linkend="guc-maintenance-work-mem"> should
        be used instead.  The setting has no effect on the behavior of
        <command>VACUUM</command> when run in other contexts.
       </para>
       -->
       <para>
        声明每个自动清理工作进程可使用的最大内存数。
        缺省为-1，表明使用<xref linkend="guc-maintenance-work-mem">的值。
        该设置对<command>VACUUM</command>在其他环境中运行时的行为没有影响。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
      <term><varname>max_stack_depth</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_stack_depth</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the maximum safe depth of the server's execution stack.
        The ideal setting for this parameter is the actual stack size limit
        enforced by the kernel (as set by <literal>ulimit -s</> or local
        equivalent), less a safety margin of a megabyte or so.  The safety
        margin is needed because the stack depth is not checked in every
        routine in the server, but only in key potentially-recursive routines
        such as expression evaluation.  The default setting is two
        megabytes (<literal>2MB</>), which is conservatively small and
        unlikely to risk crashes.  However, it might be too small to allow
        execution of complex functions.  Only superusers can change this
        setting.
       </para>
-->
<para>
       声明服务器的执行堆栈的最大安全深度。
   为此设置一个参数的原因是内核强制的实际堆栈尺寸(就是<literal>ulimit -s</>或者局部等效物的设置)
   小于安全的一兆字节左右的范围。需要这个安全界限是因为在服务器里，并非所有过程都检查了堆栈深度，
   只是在可能递规的过程，比如表达式计算这样的过程里面才进行检查。缺省设置是2兆字节<literal>2MB</>，
   这个值相对比较小，不容易导致崩溃。但是，这个值可能太小了，以至于无法执行复杂的函数。
</para>

       <!--
<para>
        Setting <varname>max_stack_depth</> higher than
        the actual kernel limit will mean that a runaway recursive function
        can crash an individual backend process.  On platforms where
        <productname>PostgreSQL</productname> can determine the kernel limit,
        the server will not allow this variable to be set to an unsafe
        value.  However, not all platforms provide the information,
        so caution is recommended in selecting a value.
       </para>
-->
<para>
     把<varname>max_stack_depth</>参数设置得大于实际的内核限制意味着
 一个正在运行的递归函数可能会导致一个独立的服务器进程的崩溃。
 在<productname>PostgreSQL</productname>能够检测内核限制的平台上，
 服务器将不允许你将其设置为一个不安全的值。
 因为并非所有平台都能够检测，所以还是建议你在此设置一个明确的值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-dynamic-shared-memory-type" xreflabel="dynamic_shared_memory_type">
      <term><varname>dynamic_shared_memory_type</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>dynamic_shared_memory_type</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        Specifies the dynamic shared memory implementation that the server
        should use.  Possible values are <literal>posix</> (for POSIX shared
        memory allocated using <literal>shm_open</>), <literal>sysv</literal>
        (for System V shared memory allocated via <literal>shmget</>),
        <literal>windows</> (for Windows shared memory), <literal>mmap</>
        (to simulate shared memory using memory-mapped files stored in the
        data directory), and <literal>none</> (to disable this feature).
        Not all values are supported on all platforms; the first supported
        option is the default for that platform.  The use of the
        <literal>mmap</> option, which is not the default on any platform,
        is generally discouraged because the operating system may write
        modified pages back to disk repeatedly, increasing system I/O load;
        however, it may be useful for debugging, when the
        <literal>pg_dynshmem</> directory is stored on a RAM disk, or when
        other shared memory facilities are not available.
       </para>
-->
<para>
声明服务器应该使用的动态共享内存实现。可能的值有<literal>posix</>
（对于使用<literal>shm_open</>分配的POSIX共享内存）、<literal>sysv</literal>
（对于通过<literal>shmget</>分配的System V共享内存）、<literal>windows</>
（对于Windows共享内存）、<literal>mmap</>
（对于使用存储在数据目录中的内存映射文件的模仿共享内存）和<literal>none</>
（禁用此功能）。并不是在所有平台上都支持所有的值；第一个支持的选项是平台的默认值。
通常不推荐使用<literal>mmap</>选项，它不是任何平台的缺省值，
因为操作系统可能会反复的将修改了的页面写到磁盘，增加系统I/O负载；
不过，在<literal>pg_dynshmem</>目录存储在RAM磁盘上时，
或者其他共享内存工具不可用时，用它来调试是不错的。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>

     <sect2 id="runtime-config-resource-disk">
 <!--
     <title>Disk</title>
 -->
 <title>磁盘</title>

     <variablelist>
     <varlistentry id="guc-temp-file-limit" xreflabel="temp_file_limit">
      <term><varname>temp_file_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>temp_file_limit</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the maximum amount of disk space that a session can use
        for temporary files, such as sort and hash temporary files, or the
        storage file for a held cursor.  A transaction attempting to exceed
        this limit will be canceled.
        The value is specified in kilobytes, and <literal>-1</> (the
        default) means no limit.
        Only superusers can change this setting.
       </para>
-->
<para>
     指定会话可以使用临时文件的最大磁盘空间，如排序和哈希临时文件，
 或持有游标的存储文件。一个事务试图超过这个限制将被取消。
     该值是指定的千字节，并且<literal>-1</>（缺省）意味着没有限制。
     只有超级用户可以更改此设置。
</para>
       <!--
<para>
        This setting constrains the total space used at any instant by all
        temporary files used by a given <productname>PostgreSQL</> session.
        It should be noted that disk space used for explicit temporary
        tables, as opposed to temporary files used behind-the-scenes in query
        execution, does <emphasis>not</emphasis> count against this limit.
       </para>
-->
<para>
    此设置限制任何时刻通过临时文件使用给定<productname>PostgreSQL</>会话使用的总空间。
    应当指出的是，使用显式临时表的磁盘空间，
而不是使用查询执行的幕后临时文件，
并强调<emphasis>不</emphasis>影响这个限制。 
</para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>

     <sect2 id="runtime-config-resource-kernel">
 <!--
     <title>Kernel Resource Usage</title>
 -->
 <title>内核资源使用</title>

     <variablelist>
     <varlistentry id="guc-max-files-per-process" xreflabel="max_files_per_process">
      <term><varname>max_files_per_process</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_files_per_process</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the maximum number of simultaneously open files allowed to each
        server subprocess. The default is one thousand files. If the kernel is enforcing
        a safe per-process limit, you don't need to worry about this setting.
        But on some platforms (notably, most BSD systems), the kernel will
        allow individual processes to open many more files than the system
        can actually support if many processes all try to open
        that many files. If you find yourself seeing <quote>Too many open
        files</> failures, try reducing this setting.
        This parameter can only be set at server start.
       </para>
-->
<para>
      设置每个服务器进程允许同时打开的最大文件数目。缺省是1000。
  如果内核强制一个合理的每进程限制，那么你不用操心这个设置。
  但是在一些平台上(特别是大多数BSD系统)，
  内核允许独立进程打开比个系统真正可以支持的数目大得多得文件数。
  如果你发现有<quote>Too many open files</>这样的失败现像，那么就尝试缩小这个设置。
  这个值只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-resource-vacuum-cost">
     <!--
     <title>Cost-based Vacuum Delay</title>
 -->
 <title>基于开销的清理延迟</title>

     <!--
<para>
      During the execution of <xref linkend="sql-vacuum">
      and <xref linkend="sql-analyze">
      commands, the system maintains an
      internal counter that keeps track of the estimated cost of the
      various I/O operations that are performed.  When the accumulated
      cost reaches a limit (specified by
      <varname>vacuum_cost_limit</varname>), the process performing
      the operation will sleep for a short period of time, as specified by
      <varname>vacuum_cost_delay</varname>. Then it will reset the
      counter and continue execution.
     </para>
-->
<para>
   在<xref linkend="sql-vacuum">和<xref linkend="sql-analyze">命令执行过程中，
   系统维护一个内部的记数器，跟踪所执行的各种I/O操作的近似开销。
   如果积累的开销达到了<varname>vacuum_cost_limit</varname>声明的限制，
   那么执行这个操作的进程将睡眠<varname>vacuum_cost_delay</varname>指定的时间。
   然后它会重置记数器然后继续执行。
</para>

     <!--
<para>
      The intent of this feature is to allow administrators to reduce
      the I/O impact of these commands on concurrent database
      activity. There are many situations where it is not
      important that maintenance commands like
      <command>VACUUM</command> and <command>ANALYZE</command> finish
      quickly; however, it is usually very important that these
      commands do not significantly interfere with the ability of the
      system to perform other database operations. Cost-based vacuum
      delay provides a way for administrators to achieve this.
     </para>
-->
<para>
    这个特性的目的是允许管理员减少这些命令在并发活动的数据库上的I/O影响。
比如，像<command>VACUUM</command>和<command>ANALYZE</command>这样的维护命令并不需要迅速完成，
并且不希望它们严重干扰系统执行其它的数据库操作。
基于开销的清理延迟为管理员提供了一个实现这个目的的手段。
</para>

     <!--
<para>
      This feature is disabled by default for manually issued
      <command>VACUUM</command> commands. To enable it, set the
      <varname>vacuum_cost_delay</varname> variable to a nonzero
      value.
     </para>
-->
<para>
     这个特性缺省手动发出<command>VACUUM</command>命令是关闭的。 
 要想打开它，把<varname>vacuum_cost_delay</varname>变量设置为一个非零值。
</para>

     <variablelist>
      <varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
       <term><varname>vacuum_cost_delay</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_delay</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
        <!--
<para>
         The length of time, in milliseconds, that the process will sleep
         when the cost limit has been exceeded.
         The default value is zero, which disables the cost-based vacuum
         delay feature.  Positive values enable cost-based vacuuming.
         Note that on many systems, the effective resolution
         of sleep delays is 10 milliseconds; setting
         <varname>vacuum_cost_delay</varname> to a value that is
         not a multiple of 10 might have the same results as setting it
         to the next higher multiple of 10.
        </para>
-->
<para>
     以毫秒计的时间长度，如果超过了开销限制，那么进程将睡眠一会儿。
 缺省值0关闭基于开销的清理延迟特性。正数值打开基于开销的清理。
 不过，要注意在许多系统上，睡眠的有效分辨率是10毫秒；
 把<varname>vacuum_cost_delay</varname>设置为一个不是10的整数倍的数值与
 将它设置为下一个10的整数倍作用相同。
</para>

        <!--
<para>
         When using cost-based vacuuming, appropriate values for
         <varname>vacuum_cost_delay</> are usually quite small, perhaps
         10 or 20 milliseconds.  Adjusting vacuum's resource consumption
         is best done by changing the other vacuum cost parameters.
        </para>
-->
<para>
      当使用基于成本的清理，<varname>vacuum_cost_delay</>的适当值通常是相当小的，
  也许10或20毫秒。调节清理的资源消耗最好是通过改变其它清理开销参数完成的。
</para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
       <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_hit</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
        <!--
<para>
         The estimated cost for vacuuming a buffer found in the shared buffer
         cache. It represents the cost to lock the buffer pool, lookup
         the shared hash table and scan the content of the page. The
         default value is one.
        </para>
-->
<para>
   清理一个在共享缓存里找到的缓冲区的预计开销。
   它代表锁住缓冲池、查找共享的Hash表、扫描页面内容的开销。
   缺省值是1。
</para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
       <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_miss</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
        <!--
<para>
         The estimated cost for vacuuming a buffer that has to be read from
         disk.  This represents the effort to lock the buffer pool,
         lookup the shared hash table, read the desired block in from
         the disk and scan its content. The default value is 10.
        </para>
-->
<para>
    清理一个要从磁盘上读取的缓冲区的预计开销。
它代表锁住缓冲池、查找共享Hash表、从磁盘读取需要的数据块、
扫描它的内容的开销。缺省值是10。
</para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
       <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_dirty</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
        <!--
<para>
         The estimated cost charged when vacuum modifies a block that was
         previously clean. It represents the extra I/O required to
         flush the dirty block out to disk again. The default value is
         20.
        </para>
-->
<para>
      清理修改一个原先是干净的块的预计开销。
  它代表把一个脏的磁盘块再次刷新到磁盘上的额外开销。
  缺省值是20。
</para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
       <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_limit</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
        <!--
<para>
         The accumulated cost that will cause the vacuuming process to sleep.
         The default value is 200.
        </para>
-->
<para>
     导致清理进程休眠的积累开销。缺省是200。
</para>
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
      <!--
<para>
       There are certain operations that hold critical locks and should
       therefore complete as quickly as possible.  Cost-based vacuum
       delays do not occur during such operations.  Therefore it is
       possible that the cost accumulates far higher than the specified
       limit.  To avoid uselessly long delays in such cases, the actual
       delay is calculated as <varname>vacuum_cost_delay</varname> *
       <varname>accumulated_balance</varname> /
       <varname>vacuum_cost_limit</varname> with a maximum of
       <varname>vacuum_cost_delay</varname> * 4.
      </para>
-->
<para>
      有些操作会持有关键的锁，并且应该尽快结束。
  在这样的操作过程中，基于开销的清理延迟不会发生作用。
  因此开销积累远远高于指定的限制是可能的。
  为了避免在这种情况下的长延时，
  实际的延迟是<varname>vacuum_cost_delay</varname> *
       <varname>accumulated_balance</varname> / <varname>vacuum_cost_limit</varname>与<varname>vacuum_cost_delay</varname> * 4 
  两者之间的最大值。

</para>
     </note>
    </sect2>

    <sect2 id="runtime-config-resource-background-writer">
<!--
     <title>Background Writer</title>
 -->
  <title>后端写进程</title>

     <!--
<para>
      There is a separate server
      process called the <firstterm>background writer</>, whose function
      is to issue writes of <quote>dirty</> (new or modified) shared
      buffers.  It writes shared buffers so server processes handling
      user queries seldom or never need to wait for a write to occur.
      However, the background writer does cause a net overall
      increase in I/O load, because while a repeatedly-dirtied page might
      otherwise be written only once per checkpoint interval, the
      background writer might write it several times as it is dirtied
      in the same interval.  The parameters discussed in this subsection
      can be used to tune the behavior for local needs.
     </para>
-->
<para>
     从 PostgreSQL 8.0 开始，就有一个独立的服务器进程，叫做后端写进程，
 它唯一的功能就是发出写"脏"共享缓冲区的命令。
 这么做的目的是让持有用户查询的服务器进程应该很少或者几乎不等待写动作的发生，
 因为后端写进程会做这件事情。这样的安排同样也减少了检查点造成的性能下降。
 后端写进程将持续的把脏页面刷新到磁盘上，所以在检查点到来的时候，只有几个页面需要刷新到磁盘上。
 但是这样还是增加了 I/O 的总净负荷，因为以前的检查点间隔里，一个重复弄脏的页面可能只会冲刷一次，
 而同一个间隔里，后端写进程可能会写好几次。在大多数情况下，连续的低负荷要比周期性的尖峰负荷好，
 但是在本节讨论的参数可以用于按实际需要调节其行为。
</para>

     <variablelist>
      <varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
       <term><varname>bgwriter_delay</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_delay</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
        <!--
<para>
         Specifies the delay between activity rounds for the
         background writer.  In each round the writer issues writes
         for some number of dirty buffers (controllable by the
         following parameters).  It then sleeps for <varname>bgwriter_delay</>
         milliseconds, and repeats.  When there are no dirty buffers in the
         buffer pool, though, it goes into a longer sleep regardless of
         <varname>bgwriter_delay</>.  The default value is 200
         milliseconds (<literal>200ms</>). Note that on many systems, the
         effective resolution of sleep delays is 10 milliseconds; setting
         <varname>bgwriter_delay</> to a value that is not a multiple of 10
         might have the same results as setting it to the next higher multiple
         of 10.  This parameter can only be set in the
         <filename>postgresql.conf</> file or on the server command line.
        </para>
-->
<para>
    声明后端写进程活跃轮回之间的延迟。在每个轮回里，
    写进程都会为一些脏的缓冲区发出写操作(可以用下面的参数控制)。
    然后它就休眠<varname>bgwriter_delay</>毫秒，然后重复动作。
当在缓冲池中没有脏缓冲区时，但是，它会无论<varname>bgwriter_delay</>的值，进入一个较长的睡眠。
缺省值是200(<literal>200ms</>)。
请注意在许多系统上，休眠延时的有效分辨率是10毫秒；
因此，把<varname>bgwriter_delay</>设置为一个不是10的倍数的数值与
设置为下一个10的倍数是一样的效果。
    这个选项只能在服务器启动的时候或者在<filename>postgresql.conf</>文件里设置。
</para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-maxpages" xreflabel="bgwriter_lru_maxpages">
       <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_lru_maxpages</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
        <!--
<para>
         In each round, no more than this many buffers will be written
         by the background writer.  Setting this to zero disables
         background writing.  (Note that checkpoints, which are managed by
         a separate, dedicated auxiliary process, are unaffected.)
         The default value is 100 buffers.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
        </para>
-->
<para>
        在每个轮回里，
不超过这么多个缓冲区将通过后端写进程写入磁盘。
        设置为零启动后端写进程。（请注意检查点，通过单独的，专用辅助进程来管理，不受影响。）
缺省值是100。这个选项只能在服务器命令行或者在<filename>postgresql.conf</>文件里设置。
</para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-multiplier" xreflabel="bgwriter_lru_multiplier">
       <term><varname>bgwriter_lru_multiplier</varname> (<type>floating point</type>)
       <indexterm>
        <primary><varname>bgwriter_lru_multiplier</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
        <!--
<para>
         The number of dirty buffers written in each round is based on the
         number of new buffers that have been needed by server processes
         during recent rounds.  The average recent need is multiplied by
         <varname>bgwriter_lru_multiplier</> to arrive at an estimate of the
         number of buffers that will be needed during the next round.  Dirty
         buffers are written until there are that many clean, reusable buffers
         available.  (However, no more than <varname>bgwriter_lru_maxpages</>
         buffers will be written per round.)
         Thus, a setting of 1.0 represents a <quote>just in time</> policy
         of writing exactly the number of buffers predicted to be needed.
         Larger values provide some cushion against spikes in demand,
         while smaller values intentionally leave writes to be done by
         server processes.
         The default is 2.0.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
        </para>
-->
<para>
       写在每一轮的脏缓冲区数目是根据通过最近几轮服务器处理所需的新的缓冲区数。   
   最近平均需求乘以<varname>bgwriter_lru_multiplier</>到达将在下一轮中需要的缓冲区的数目的估计。
   脏缓冲区写入直到有许多干净的，可重复使用的缓冲区可用。    
   （但是，每回写入不超过<varname>bgwriter_lru_maxpages</>的缓冲区。）    
      因此，1.0的设置表示写入确切预测需要的缓冲区数量的<quote>合适</>策略。 
  较大的值提供针对需求高峰一定的缓冲作用， 
  而较小的值故意留下服务器进程完成写入。     
  默认值是2.0。  
  这个参数只能在<filename>postgresql.conf</>文件或者服务器命令行中设置。
</para>
       </listitem>
      </varlistentry>
     </variablelist>

     <!--
<para>
      Smaller values of <varname>bgwriter_lru_maxpages</varname> and
      <varname>bgwriter_lru_multiplier</varname> reduce the extra I/O load
      caused by the background writer, but make it more likely that server
      processes will have to issue writes for themselves, delaying interactive
      queries.
     </para>
-->
<para>
      小的<varname>bgwriter_lru_maxpages</varname>和
      <varname>bgwriter_lru_multiplier</varname>减少后端写进程导致的额外I/O负荷，
  但是会有可能使服务器进程不得不自己发出写动作，降低查询的交互性。
</para>
    </sect2>

    <sect2 id="runtime-config-resource-async-behavior">
     <title>Asynchronous Behavior</title>

     <variablelist>
      <varlistentry id="guc-effective-io-concurrency" xreflabel="effective_io_concurrency">
       <term><varname>effective_io_concurrency</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>effective_io_concurrency</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
        <!--
<para>
         Sets the number of concurrent disk I/O operations that
         <productname>PostgreSQL</> expects can be executed
         simultaneously.  Raising this value will increase the number of I/O
         operations that any individual <productname>PostgreSQL</> session
         attempts to initiate in parallel.  The allowed range is 1 to 1000,
         or zero to disable issuance of asynchronous I/O requests. Currently,
         this setting only affects bitmap heap scans.
        </para>
-->
<para>
      设置<productname>PostgreSQL</>预计可以同时执行的并发磁盘的I/O操作数。
  增大该数值将增加任何单独的<productname>PostgreSQL</>会话尝试并行启动的I/O操作数。
      允许的范围是1到1000，或者零禁用发出异步I/O请求。目前，此设置只影响堆位图扫描。
</para>

        <!--
<para>
         A good starting point for this setting is the number of separate
         drives comprising a RAID 0 stripe or RAID 1 mirror being used for the
         database.  (For RAID 5 the parity drive should not be counted.)
         However, if the database is often busy with multiple queries issued in
         concurrent sessions, lower values may be sufficient to keep the disk
         array busy.  A value higher than needed to keep the disks busy will
         only result in extra CPU overhead.
        </para>
-->
<para>
       这个设置很好的起点是包括一个RAID 0或用于数据库的RAID 1镜像的单独驱动器数。 
   （对于RAID 5奇偶校验驱动器不应该计算在内。） 
   然而，如果数据库经常忙于在并发会话中发出多个查询，
   更低的数值可能是足够的，以保持磁盘阵列繁忙。
   比需要保持磁盘繁忙更大的值将只会造成额外的CPU开销。
</para>

        <!--
<para>
         For more exotic systems, such as memory-based storage or a RAID array
         that is limited by bus bandwidth, the correct value might be the
         number of I/O paths available.  Some experimentation may be needed
         to find the best value.
        </para>
-->
<para>
       对于更奇特的系统，如基于内存的存储或由总线带宽限制的RAID阵列 
   ，正确的值可能是可用I/O路径数。一些试验可能需要找到最好的值。
</para>

        <!--
<para>
         Asynchronous I/O depends on an effective <function>posix_fadvise</>
         function, which some operating systems lack.  If the function is not
         present then setting this parameter to anything but zero will result
         in an error.  On some operating systems (e.g., Solaris), the function
         is present but does not actually do anything.
        </para>
-->
<para>
       异步I/O依赖于有效的<function>posix_fadvise</>功能，
   其中一些是操作系统所缺乏的。如果函数不存在，那么这个参数设置为任何东西，
   但是零将导致错误。在某些操作系统上（例如Solaris），函数存在，但实际上并没有做任何事情。
</para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-worker-processes" xreflabel="max_worker_processes">
       <term><varname>max_worker_processes</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_worker_processes</> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <!-- 
        <para>
         Sets the maximum number of background processes that the system
         can support.  This parameter can only be set at server start.
        </para>
        -->
        <para>
         设置系统可以支持的最大后端进程数量。
         这个参数只能在服务器启动时设置。
        </para>

        <!-- 
        <para>
         When running a standby server, you must set this parameter to the
         same or higher value than on the master server. Otherwise, queries
         will not be allowed in the standby server.
        </para>
        -->
        <para>
         当运行备用服务器时，这个参数值的设置必须等于或大于主服务器。
         否则，将不允许在备用服务器上查询。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-wal">
   <!--
    <title>Write Ahead Log</title>
-->
<title>预写式日志</title>

   <!--
<para>
    For additional information on tuning these settings,
    see <xref linkend="wal-configuration">.
   </para>
-->
<para>
    参阅<xref linkend="wal-configuration">获取调整这些设置的额外信息。
</para>

    <sect2 id="runtime-config-wal-settings">
<!--
     <title>Settings</title>
 -->
 <title>设置</title>
     <variablelist>

     <varlistentry id="guc-wal-level" xreflabel="wal_level">
      <term><varname>wal_level</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_level</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        <varname>wal_level</> determines how much information is written
        to the WAL. The default value is <literal>minimal</>, which writes
        only the information needed to recover from a crash or immediate
        shutdown. <literal>archive</> adds logging required for WAL archiving;
        <literal>hot_standby</> further adds information required to run
        read-only queries on a standby server; and, finally
        <literal>logical</> adds information necessary to support logical
        decoding.  Each level includes the information logged at all lower
        levels.  This parameter can only be set at server start.
       </para>
-->
<para>
     <varname>wal_level</>决定有多少信息被写入到WAL中。
 默认值是<literal>最小的</>，其中写入唯一从崩溃或立即关机中恢复的所需信息。
 <literal>archive</>补充WAL归档需要的日志记录； 
 <literal>hot_standby</>进一步增加在备用服务器上运行只读查询所需的信息；
 最终<literal>logical</>增加支持逻辑编码所必需的信息。
 每个级别都包括所有更低级别记录的信息。这个参数只能在服务器启动时设置。
</para>
       
<para>
       <!--
        In <literal>minimal</> level, WAL-logging of some bulk
        operations can be safely skipped, which can make those
        operations much faster (see <xref linkend="populate-pitr">).
        Operations in which this optimization can be applied include:
-->
  在<literal>最小</>级别中，安全地忽略一些批量操作的WAL-日志，
  这可以使那些操作快很多（参阅<xref linkend="populate-pitr">）。 
      这种优化可以应用到： 
        <simplelist>
         <member><command>CREATE TABLE AS</></member>
         <member><command>CREATE INDEX</></member>
         <member><command>CLUSTER</></member>
         <member><command>COPY</> into tables that were created or truncated in the same
         transaction</member>
        </simplelist>
<!--
        But minimal WAL does not contain enough information to reconstruct the
        data from a base backup and the WAL logs, so <literal>archive</> or
        higher must be used to enable WAL archiving
        (<xref linkend="guc-archive-mode">) and streaming replication.
-->
但是最小的WAL不包含从基本的备份和WAL日志中重建数据的足够信息，
所以<literal>archive</>或者更高级别必须用来启动WAL归档
(<xref linkend="guc-archive-mode">)和流复制。
       </para>
   
       <!--
<para>
        In <literal>hot_standby</> level, the same information is logged as
        with <literal>archive</>, plus information needed to reconstruct
        the status of running transactions from the WAL. To enable read-only
        queries on a standby server, <varname>wal_level</> must be set to
        <literal>hot_standby</> or higher on the primary, and
        <xref linkend="guc-hot-standby"> must be enabled in the standby. It is
        thought that there is little measurable difference in performance
        between using <literal>hot_standby</> and <literal>archive</> levels,
        so feedback is welcome if any production impacts are noticeable.
       </para>
-->
<para>
      在<literal>hot_standby</>级别，相同的信息被记录为<literal>archive</>，
  加上需要重建从WAL运行的事务状态信息。
  为了在备用服务器上启用只读查询，主库上<varname>wal_level</>必须设置为
  <literal>hot_standby</>或更高，
  必须启动备库上的<xref linkend="guc-hot-standby">。
      使用<literal>hot_standby</>和<literal>archive</>级别之间的性能几乎没有可测量的差异
  ，如果任何生产的影响是明显的，则是值得欢迎的。
</para>
<!-- 
       <para>
        In <literal>logical</> level, the same information is logged as
        with <literal>hot_standby</>, plus information needed to allow
        extracting logical changesets from the WAL. Using a level of
        <literal>logical</> will increase the WAL volume, particularly if many
        tables are configured for <literal>REPLICA IDENTITY FULL</literal> and
        many <command>UPDATE</> and <command>DELETE</> statements are
        executed.
       </para>
-->
<para>
在<literal>logical</>级别，记录和<literal>hot_standby</>相同的信息，
加上允许从WAL中提取逻辑修改所需的信息。使用<literal>logical</>
级别将增加WAL的量，尤其是如果为<literal>REPLICA IDENTITY FULL</literal>
分配了许多表，并且执行了许多<command>UPDATE</>和<command>DELETE</>语句。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-fsync" xreflabel="fsync">
      <term><varname>fsync</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>fsync</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If this parameter is on, the <productname>PostgreSQL</> server
        will try to make sure that updates are physically written to
        disk, by issuing <function>fsync()</> system calls or various
        equivalent methods (see <xref linkend="guc-wal-sync-method">).
        This ensures that the database cluster can recover to a
        consistent state after an operating system or hardware crash.
       </para>
-->
<para>
      如果打开这个选项，那么<productname>PostgreSQL</>服务器将在好几个地方使用<function>fsync()</>系统调用
  (或等价调用，参见<xref linkend="guc-wal-sync-method">)来确保更新已经物理上写到磁盘中。
  这样就保证了数据库集群将在操作系统或者硬件崩溃的情况下恢复到一个一致的状态。
</para>

       <!--
<para>
        While turning off <varname>fsync</varname> is often a performance
        benefit, this can result in unrecoverable data corruption in
        the event of a power failure or system crash.  Thus it
        is only advisable to turn off <varname>fsync</varname> if
        you can easily recreate your entire database from external
        data.
       </para>
-->
<para>
      当关闭<varname>fsync</varname>时通常是性能利益，
  这可能会导致发生断电或系统崩溃时不可恢复数据丢失。
  如果你可以很容易的从外部数据中创建您的整个数据库，
  因此关闭<varname>fsync</varname>是明智的。
</para>

       <!--
<para>
        Examples of safe circumstances for turning off
        <varname>fsync</varname> include the initial loading of a new
        database cluster from a backup file, using a database cluster
        for processing a batch of data after which the database
        will be thrown away and recreated,
        or for a read-only database clone which
        gets recreated frequently and is not used for failover.  High
        quality hardware alone is not a sufficient justification for
        turning off <varname>fsync</varname>.
       </para>
-->
<para>
     关闭<varname>fsync</varname>安全情况的例子包括备份文件中新的数据库集群的初始加载，
     数据库被丢弃和重新创建之后，使用数据库集群批处理数据，
 或者为只读数据库克隆被频繁重建并且不用于故障转移。
 为了关闭<varname>fsync</varname>高质量硬件本身是不充分的。
 
</para>

       <!--
<para>
        For reliable recovery when changing <varname>fsync</varname>
        off to on, it is necessary to force all modified buffers in the
        kernel to durable storage.  This can be done while the cluster
        is shutdown or while fsync is on by running <command>initdb
        -&#045;sync-only</command>, running <command>sync</>, unmounting the
        file system, or rebooting the server.
       </para>
-->
<para>
      当改变<varname>fsync</varname>从关闭到打开时，对于可靠的恢复，
  必须强制内核中所有被修改的缓冲区到持久存储。
  当集群宕机或当fsync通过运行<command>initdb--sync-only</command>，<command>sync</>，
  卸载文件系统，或重新启动服务器的时候，再完成这项工作。
</para>

       <!--
<para>
        In many situations, turning off <xref linkend="guc-synchronous-commit">
        for noncritical transactions can provide much of the potential
        performance benefit of turning off <varname>fsync</varname>, without
        the attendant risks of data corruption.
       </para>
-->
<para>
       在许多情况下，关闭<xref linkend="guc-synchronous-commit">
   为非关键的事务可以提供关闭<varname>fsync</varname>的潜力性能优势，
   没有数据损坏随之而来的风险。
</para>

       <!--
<para>
        <varname>fsync</varname> can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        If you turn this parameter off, also consider turning off
        <xref linkend="guc-full-page-writes">.
       </para>
-->
<para>
      <varname>fsync</varname>只能在postgresql.conf文件里或者服务器命令行里设置。
  如果这个参数被关闭，那么请考虑把<xref linkend="guc-full-page-writes">也关闭了。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronous-commit" xreflabel="synchronous_commit">
      <term><varname>synchronous_commit</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>synchronous_commit</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies whether transaction commit will wait for WAL records
        to be written to disk before the command returns a <quote>success</>
        indication to the client.  Valid values are <literal>on</>,
        <literal>remote_write</>, <literal>local</>, and <literal>off</>.
        The default, and safe, setting
        is <literal>on</>.  When <literal>off</>, there can be a delay between
        when success is reported to the client and when the transaction is
        really guaranteed to be safe against a server crash.  (The maximum
        delay is three times <xref linkend="guc-wal-writer-delay">.)  Unlike
        <xref linkend="guc-fsync">, setting this parameter to <literal>off</>
        does not create any risk of database inconsistency: an operating
        system or database crash might
        result in some recent allegedly-committed transactions being lost, but
        the database state will be just the same as if those transactions had
        been aborted cleanly.  So, turning <varname>synchronous_commit</> off
        can be a useful alternative when performance is more important than
        exact certainty about the durability of a transaction.  For more
        discussion see <xref linkend="wal-async-commit">.
       </para>
-->
<para>
     命令返回<quote>成功</>指示给客户端之前，指定是否事务提交将等待WAL记录被写入到磁盘。
 有效值是<literal>on</>,<literal>remote_write</>, <literal>local</>和<literal>off</>。
 默认情况下，安全设置是<literal>on</>。
 当<literal>off</>时，当成功报告给客户端，
 并当该事务真正保证是安全的，不会在服务器崩溃的时候，可以有一定的延时（最大
 延迟<xref linkend="guc-wal-writer-delay">的3倍）。 
 不同于<xref linkend="guc-fsync">，将此参数设置为<literal>off</>不会产生任何数据库不一致的风险： 
 操作系统或数据库崩溃可能导致丢失一些最近提交的事务， 
 但数据库状态将是一样的，正如该事务已经彻底终止。 
 因此，当性能比准确事务耐久性更重要时，关闭<varname>synchronous_commit</>是有效选择。
 获取更多讨论请参阅<xref linkend="wal-async-commit">。
</para>
       <!--
<para>
        If <xref linkend="guc-synchronous-standby-names"> is set, this
        parameter also controls whether or not transaction commits will wait
        for the transaction's WAL records to be replicated to the standby
        server.
        When set to <literal>on</>, commits will wait until a reply
        from the current synchronous standby indicates it has received
        the commit record of the transaction and flushed it to disk.  This
        ensures the transaction will not be lost unless both primary and
        standby suffer corruption of their database storage.
        When set to <literal>remote_write</>, commits will wait
        until a reply from the current synchronous standby indicates it has
        received the commit record of the transaction and written it out to
        the standby's operating system, but the data has not necessarily
        reached stable storage on the standby. This setting is sufficient to
        ensure data preservation even if the standby instance of
        <productname>PostgreSQL</> were to crash, but not if the standby
        suffers an operating-system-level crash.
       </para>
-->
<para>
      如果设置<xref linkend="guc-synchronous-standby-names">，
  该参数控制是否事务提交将等待它的WAL记录被复制到备用服务器。
  当设置<literal>on</>的时候，
  提交将等待直到回复当前同步备库表明它已收到事务提交记录，并刷新到磁盘。
  这确保事务不会丢失，除非主库和备库遭受他们的数据库存储崩溃。  
  当设置为<literal>remote_write</>，事务将等待
  直到当前同步备库的答复表明它已经收到事务的提交记录，并且写入到备用操作系统，  
  但是数据并不一定在备库中达到稳定存储。  
  即使<productname>PostgreSQL</>备库实例崩溃，但并非备库遭受操作系统级的崩溃，此设置足以
  确保数据的保存。
</para>
       <!--
<para>
        When synchronous
        replication is in use, it will normally be sensible either to wait
        for both local flush to disk and replication of WAL records, or
        to allow the transaction to commit asynchronously.  However, the
        setting <literal>local</> is available for transactions that
        wish to wait for local flush to disk, but not synchronous replication.
        If <varname>synchronous_standby_names</> is not set, the settings
        <literal>on</>, <literal>remote_write</> and <literal>local</> all
        provide the same synchronization level: transaction commits only wait
        for local flush to disk.
       </para>
-->
<para>
      当同步复制使用时，
  通常是明智的，要么等待本地刷新到磁盘和WAL记录的复制，要么
  允许异步提交事务。然而，该设置<literal>local</>可用于 
  希望等待本地刷新到磁盘上的事务，而不是同步复制。 
  如果不设置<varname>synchronous_standby_names</>，
  设置<literal>on</>, <literal>remote_write</>和<literal>local</> 
  提供相同的同步级别：事务提交只能等待本地刷新到磁盘。
</para>
       <!--
<para>
        This parameter can be changed at any time; the behavior for any
        one transaction is determined by the setting in effect when it
        commits.  It is therefore possible, and useful, to have some
        transactions commit synchronously and others asynchronously.
        For example, to make a single multistatement transaction commit
        asynchronously when the default is the opposite, issue <command>SET
        LOCAL synchronous_commit TO OFF</> within the transaction.
       </para>
-->
<para>
     该参数可以在任何时候被改变;对于任何事务的行为 
 是由该设置提交生效时确定的。
 因此，它是可能的，并且有用的，
 有一些事务同步提交，其他的异步提交。 
 例如，为了使单一多语句事务异步提交，缺省是相反的，
 在事务中发出<command>SET LOCAL synchronous_commit TO OFF</>命令。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
      <term><varname>wal_sync_method</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_sync_method</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Method used for forcing WAL updates out to disk.
        If <varname>fsync</varname> is off then this setting is irrelevant,
        since WAL file updates will not be forced out at all.
        Possible values are:
       </para>
-->
<para>
      用来向磁盘强制更新WAL数据的方法。如果<varname>fsync</varname>是关闭的，
  那么这个设置就没有意义，因为所有WAL文件更新都不会强制输出。
  可能的值是：
</para>
       <itemizedlist>
        <listitem>
        <!--
<para>
         <literal>open_datasync</> (write WAL files with <function>open()</> option <symbol>O_DSYNC</>)
        </para>
-->
<para>
     <literal>open_datasync</> (用带 <symbol>O_DSYNC</>选项的<function>open()</>打开WAL文件)
</para>
        </listitem>
        <listitem>
        <!--
<para>
         <literal>fdatasync</> (call <function>fdatasync()</> at each commit)
        </para>
-->
<para>
        <literal>fdatasync</>(每次提交的时候都调用<function>fdatasync()</>)
</para>
        </listitem>
        <listitem>
        <!--
<para>
         <literal>fsync</> (call <function>fsync()</> at each commit)
        </para>
-->
<para>
        <literal>fsync</> (每次提交的时候都调用<function>fsync()</>)
</para>
        </listitem>
        <listitem>
        <!--
<para>
         <literal>fsync_writethrough</> (call <function>fsync()</> at each commit, forcing write-through of any disk write cache)
        </para>
-->
<para>
        <literal>fsync_writethrough</> (每次提交的时候调用<function>fsync()</>强制写出任何磁盘写缓冲区)
</para>
        </listitem>
        <listitem>
        <!--
<para>
         <literal>open_sync</> (write WAL files with <function>open()</> option <symbol>O_SYNC</>)
        </para>
-->
<para>
       <literal>open_sync</>(用带<symbol>O_SYNC</>选项的<function>open()</>写WAL文件)
</para>
        </listitem>
       </itemizedlist>
       <!--
<para>
        The <literal>open_</>* options also use <literal>O_DIRECT</> if available.
        Not all of these choices are available on all platforms.
        The default is the first method in the above list that is supported
        by the platform, except that <literal>fdatasync</> is the default on
        Linux.  The default is not necessarily ideal; it might be
        necessary to change this setting or other aspects of your system
        configuration in order to create a crash-safe configuration or
        achieve optimal performance.
        These aspects are discussed in <xref linkend="wal-reliability">.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
     如果可用的话，该<literal>open_</>*选项也使用<literal>O_DIRECT</>。  
 并非所有这些选择在所有平台上都可用。  
 默认值是平台支持的上面列表中的第一个方法， 
 除了<literal>fdatasync</>在Linux上是缺省的。 
 缺省的也不一定理想;  
 为了创建安全配置或达到最佳性能，
 可能要改变这个设置或你的系统配置的其他方面， 
 将在<xref linkend="wal-reliability">中讨论。 
 这个参数只能在<filename>postgresql.conf</>文件或服务器命令行上设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
      <term><varname>full_page_writes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>full_page_writes</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When this parameter is on, the <productname>PostgreSQL</> server
        writes the entire content of each disk page to WAL during the
        first modification of that page after a checkpoint.
        This is needed because
        a page write that is in process during an operating system crash might
        be only partially completed, leading to an on-disk page
        that contains a mix of old and new data.  The row-level change data
        normally stored in WAL will not be enough to completely restore
        such a page during post-crash recovery.  Storing the full page image
        guarantees that the page can be correctly restored, but at the price
        of increasing the amount of data that must be written to WAL.
        (Because WAL replay always starts from a checkpoint, it is sufficient
        to do this during the first change of each page after a checkpoint.
        Therefore, one way to reduce the cost of full-page writes is to
        increase the checkpoint interval parameters.)
       </para>
-->
<para>
       打开这个选项的时候，<productname>PostgreSQL</>服务器在检查点之后对页面的第一次写入时将整个页面写到 WAL 里面。
   这么做是因为在操作系统崩溃过程中可能只有部分页面写入磁盘，
   从而导致在同一个页面中包含新旧数据的混合。在崩溃后的恢复期间，
   由于在WAL里面存储的行变化信息不够完整，因此无法完全恢复该页。
   把完整的页面影像保存下来就可以保证正确存储页面，
   代价是增加了写入WAL的数据量。因为WAL重放总是从一个检查点开始的，
   所以在检查点后每个页面第一次改变的时候做WAL备份就足够了。
   因此，一个减小全页面写开销的方法是增加检查点的间隔参数值。
</para>

       <!--
<para>
        Turning this parameter off speeds normal operation, but
        might lead to either unrecoverable data corruption, or silent
        data corruption, after a system failure. The risks are similar to turning off
        <varname>fsync</varname>, though smaller, and it should be turned off
        only based on the same circumstances recommended for that parameter.
       </para>
-->
<para>
    把这个选项关闭会加快正常操作的速度，
但是可能导致系统崩溃后不可恢复的数据损坏或者无记载数据损坏，
它的危害类似于<varname>fsync</varname>，只是比较小而已。并且在建议参数相同的情况下关闭这个选项。
</para>

       <!--
<para>
        Turning off this parameter does not affect use of
        WAL archiving for point-in-time recovery (PITR)
        (see <xref linkend="continuous-archiving">).
       </para>
-->
<para>
    关闭这个选项并不影响即时恢复(PITR)的WAL使用(参阅<xref linkend="continuous-archiving">)。
</para>

       <!--
<para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        The default is <literal>on</>.
       </para>
-->
<para>
     这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行设置。缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-log-hints" xreflabel="wal_log_hints">
      <term><varname>wal_log_hints</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_log_hints</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        When this parameter is <literal>on</>, the <productname>PostgreSQL</>
        server writes the entire content of each disk page to WAL during the
        first modification of that page after a checkpoint, even for
        non-critical modifications of so-called hint bits.
       </para>
-->
<para>
当这个参数是<literal>on</>时，<productname>PostgreSQL</>
服务器在检查点后第一次修改该页面期间，将每个磁盘页的全部内容都写入到WAL中，
即使没有所谓的提示信息的关键修改。
</para>

<!-- 
       <para>
        If data checksums are enabled, hint bit updates are always WAL-logged
        and this setting is ignored. You can use this setting to test how much
        extra WAL-logging would occur if your database had data checksums
        enabled.
       </para>
-->
<para>
如果启用了数据校验和，那么总是WAL记录提示信息的更新，并且忽略此设置。
你可以使用这个设置测试如果你的数据库启用了数据校验和，
那么会有多少额外的WAL记录发生。
</para>

<!-- 
       <para>
        This parameter can only be set at server start. The default value is <literal>off</>.
       </para>
-->
<para>
这个参数只能在服务器启动时设置。缺省值是<literal>off</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
      <term><varname>wal_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_buffers</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        The amount of shared memory used for WAL data that has not yet been
        written to disk.  The default setting of -1 selects a size equal to
        1/32nd (about 3%) of <xref linkend="guc-shared-buffers">, but not less
        than <literal>64kB</literal> nor more than the size of one WAL
        segment, typically <literal>16MB</literal>.  This value can be set
        manually if the automatic choice is too large or too small,
        but any positive value less than <literal>32kB</literal> will be
        treated as <literal>32kB</literal>.
        This parameter can only be set at server start.
       </para>
-->
<para>
     使用已经写入磁盘的WAL数据共享内存的数量。-1的默认设置选择大小等于 
<xref linkend="guc-shared-buffers">的1/32nd(大约3%)，
但不小于<literal>64kB</literal>也不超过一个WAL段大小，
通常<literal>16MB</literal>。如果自动选择过大或过小，则可以手动设置这个值。
但任何小于<literal>32kB</literal>的正值将 
当作<literal>32kB</literal>处理。
这个参数只能在服务器启动时设置。
</para>

       <!--
<para>
        The contents of the WAL buffers are written out to disk at every
        transaction commit, so extremely large values are unlikely to
        provide a significant benefit.  However, setting this value to at
        least a few megabytes can improve write performance on a busy
        server where many clients are committing at once.  The auto-tuning
        selected by the default setting of -1 should give reasonable
        results in most cases.
       </para>
-->
<para>
     WAL缓冲区的内容每次事务提交时写入到磁盘，
 这样非常大的值不可能提供显著的好处。
 但是，当有许多客户端都同时提交时，设置该值至少为几兆可以提高繁忙服务器的写入性能，
 在多数情况下，由-1的缺省设置选择自动调整应给予合理的结果。
</para>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-writer-delay" xreflabel="wal_writer_delay">
      <term><varname>wal_writer_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_delay</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the delay between activity rounds for the WAL writer.
        In each round the writer will flush WAL to disk. It then sleeps for
        <varname>wal_writer_delay</> milliseconds, and repeats.  The default
        value is 200 milliseconds (<literal>200ms</>).  Note that on many
        systems, the effective resolution of sleep delays is 10 milliseconds;
        setting <varname>wal_writer_delay</> to a value that is not a multiple
        of 10 might have the same results as setting it to the next higher
        multiple of 10. This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
-->
<para>
       声明WAL写入进程的活动轮回的延迟。在每一轮回中写入进程将刷新WAL到磁盘。
   然后，它会休眠<varname>wal_writer_delay</>毫秒，并重复。
  默认值是200毫秒(<literal>200ms</>)。注意，
  在许多系统上，睡眠延迟的有效分辨率为10毫秒; 
  把<varname>wal_writer_delay</>的值
  设置为一个不是10的倍数的数值与设置为下一个10的倍数是一样的效果。
  这个参数只能在<filename>postgresql.conf</>文件或服务器命令行上设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
      <term><varname>commit_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_delay</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        <varname>commit_delay</varname> adds a time delay, measured in
        microseconds, before a WAL flush is initiated.  This can improve
        group commit throughput by allowing a larger number of transactions
        to commit via a single WAL flush, if system load is high enough
        that additional transactions become ready to commit within the
        given interval.  However, it also increases latency by up to
        <varname>commit_delay</varname> microseconds for each WAL
        flush.  Because the delay is just wasted if no other transactions
        become ready to commit, a delay is only performed if at least
        <varname>commit_siblings</varname> other transactions are active
        when a flush is about to be initiated.  Also, no delays are
        performed if <varname>fsync</varname> is disabled.
        The default <varname>commit_delay</> is zero (no delay).
        Only superusers can change this setting.
       </para>
-->
<para>
     <varname>commit_delay</varname>增加了时间延迟，在WAL刷新启动之前，以微秒测量。 
 这可以提高通过单一WAL刷新提交大量事务的组提交吞吐量。 
 如果系统负载足够高，额外事务在给定时间间隔内成为提交。
 然而，它也增加了每个WAL刷新的最多<varname>commit_delay</varname>微秒的延迟时间。 
 但是如果没有其它事务准备提交，那么这个间隔就是在浪费时间。 
 如果至少<varname>commit_siblings</varname>个其它事务是活跃的，当刷新初始化的情况下。
 则仅仅只执行一个延迟。
如果禁用<varname>fsync</varname>，则不执行任何延迟。
缺省<varname>commit_delay</>是零（无延迟）。
只有超级用户可以更改此设置。
</para>
       <!--
<para>
        In <productname>PostgreSQL</> releases prior to 9.3,
        <varname>commit_delay</varname> behaved differently and was much
        less effective: it affected only commits, rather than all WAL flushes,
        and waited for the entire configured delay even if the WAL flush
        was completed sooner.  Beginning in <productname>PostgreSQL</> 9.3,
        the first process that becomes ready to flush waits for the configured
        interval, while subsequent processes wait only until the leader
        completes the flush operation.
       </para>
-->
<para>
     在<productname>PostgreSQL</>先于9.3发布的版本中， 
 <varname>commit_delay</varname>表现不同，更别说效能：
 它仅影响提交，而不是所有的WAL刷新，
 即使WAL刷新尽早完成了，也要等待整个配置延迟。
 在<productname>PostgreSQL</>9.3开始， 
 第一个过程准备刷新等待配置延迟，而随后的过程仅仅等待直到完成刷新操作。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
      <term><varname>commit_siblings</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_siblings</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Minimum number of concurrent open transactions to require
        before performing the <varname>commit_delay</> delay. A larger
        value makes it more probable that at least one other
        transaction will become ready to commit during the delay
        interval. The default is five transactions.
       </para>
-->
<para>
     在执行<varname>commit_delay</>延迟的时候，要求最少同时打开的并发事务数目。
 大一些的数值会导致在延迟期间另外一个事务准备好提交的可能性增大。
 缺省是5。 
</para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-checkpoints">
 <!--
     <title>Checkpoints</title>
 -->
 <title>检查点</title>

    <variablelist>
     <varlistentry id="guc-checkpoint-segments" xreflabel="checkpoint_segments">
      <term><varname>checkpoint_segments</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_segments</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Maximum number of log file segments between automatic WAL
        checkpoints (each segment is normally 16 megabytes). The default
        is three segments.  Increasing this parameter can increase the
        amount of time needed for crash recovery.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
    
    在自动的WAL检查点之间的日志文件段的最大数量(通常每个段16兆字节)。
缺省是3。增加这个参数可以增加崩溃恢复所需要的时间量。
这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行中设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
      <term><varname>checkpoint_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Maximum time between automatic WAL checkpoints, in
        seconds. The default is five minutes (<literal>5min</>).
        Increasing this parameter can increase the amount of time needed
        for crash recovery.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
     在自动WAL检查点之间的最长时间，以秒计。缺省是5分钟(<literal>5min</>)。
 增加这个参数可以增加崩溃恢复所需要的时间量。
 这个选项只能在<filename>postgresql.conf</>文件或者服务器命令行中设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-completion-target" xreflabel="checkpoint_completion_target">
      <term><varname>checkpoint_completion_target</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>checkpoint_completion_target</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the target of checkpoint completion, as a fraction of
        total time between checkpoints. The default is 0.5.

        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
     声明检查点完成的目标，作为检查点之间总时间的分数。缺省是0.5。
 这个参数只能在<filename>postgresql.conf</>文件中或者服务器命令行中设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
      <term><varname>checkpoint_warning</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_warning</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Write a message to the server log if checkpoints caused by
        the filling of checkpoint segment files happen closer together
        than this many seconds (which suggests that
        <varname>checkpoint_segments</> ought to be raised).  The default is
        30 seconds (<literal>30s</>).  Zero disables the warning.
        No warnings will be generated if <varname>checkpoint_timeout</varname>
        is less than <varname>checkpoint_warning</varname>.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
      如果由于填充检查点段文件导致的检查点发生时间间隔接近这个参数表示的秒数，
  那么就向服务器日志发送一个建议增加<varname>checkpoint_segments</>值的消息。
  缺省是30秒(<literal>30s</>)。零则关闭警告。
  如果<varname>checkpoint_timeout</varname>小于<varname>checkpoint_warning</varname>，
  则不产生警告。这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行中设置。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-archiving">
 <!--
     <title>Archiving</title>
 -->
 <title>归档</title>

    <variablelist>
     <varlistentry id="guc-archive-mode" xreflabel="archive_mode">
      <term><varname>archive_mode</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>archive_mode</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When <varname>archive_mode</> is enabled, completed WAL segments
        are sent to archive storage by setting
        <xref linkend="guc-archive-command">.
        <varname>archive_mode</> and <varname>archive_command</> are
        separate variables so that <varname>archive_command</> can be
        changed without leaving archiving mode.
        This parameter can only be set at server start.
        <varname>archive_mode</> cannot be enabled when
        <varname>wal_level</> is set to <literal>minimal</>.
       </para>
-->
<para>
       当启用<varname>archive_mode</>的时候，
   已完成的WAL段通过设置<xref linkend="guc-archive-command">
   发送到归档存储。
   <varname>archive_mode</>和<varname>archive_command</>是独立变量，
   以致于<varname>archive_command</>不留归档模式而被改变。 
   这个参数只能在服务器启动时设置。  
   当<varname>wal_level</>设置为<literal>minimal</>时，则不启用<varname>archive_mode</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-command" xreflabel="archive_command">
      <term><varname>archive_command</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>archive_command</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        The local shell command to execute to archive a completed WAL file
        segment.  Any <literal>%p</> in the string is
        replaced by the path name of the file to archive, and any
        <literal>%f</> is replaced by only the file name.
        (The path name is relative to the working directory of the server,
        i.e., the cluster's data directory.)
        Use <literal>%%</> to embed an actual <literal>%</> character in the
        command.  It is important for the command to return a zero
        exit status only if it succeeds. For more information see
        <xref linkend="backup-archiving-wal">.
       </para>
-->
<para>
     将一个完整的WAL文件序列归档的本地shell命令。
 字符串中任何<literal>%p</>都被要归档的文件的绝对路径代替，
 而任何<literal>%f</>都只被该文件名代替(非绝对路径都相对于集群的数据目录)。
 如果你需要在命令里嵌入<literal>%</>字符就必须双写<literal>%%</>。
 有一点很重要：这个命令必须是当且仅当成功的时候才返回零。
 参阅<xref linkend="backup-archiving-wal">获取更多的信息。
</para>
       <!--
<para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.  It is ignored unless
        <varname>archive_mode</> was enabled at server start.
        If <varname>archive_command</> is an empty string (the default) while
        <varname>archive_mode</> is enabled, WAL archiving is temporarily
        disabled, but the server continues to accumulate WAL segment files in
        the expectation that a command will soon be provided.  Setting
        <varname>archive_command</> to a command that does nothing but
        return true, e.g. <literal>/bin/true</> (<literal>REM</> on
        Windows), effectively disables
        archiving, but also breaks the chain of WAL files needed for
        archive recovery, so it should only be used in unusual circumstances.
       </para>
-->
<para>
     这个参数只能在<filename>postgresql.conf</>文件或服务器命令行上。
 除非在服务器启动时开启<varname>archive_mode</>，否则忽略它。
 如果<varname>archive_command</>是一个空字符串（缺省）而 
 <varname>archive_mode</>已启用，暂时禁用WAL归档，
 但是服务器仍继续堆积WAL段文件期望迅速提供一个命令。
 设置<varname>archive_command</>命令什么也不做但返回true
 <literal>/bin/true</> (Windows上的<literal>REM</>)，有效地禁用归档，
 但也为了归档恢复打破了所需WAL文件链，所以应该只在特殊情况下使用。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
      <term><varname>archive_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>archive_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        The <xref linkend="guc-archive-command"> is only invoked for
        completed WAL segments. Hence, if your server generates little WAL
        traffic (or has slack periods where it does so), there could be a
        long delay between the completion of a transaction and its safe
        recording in archive storage.  To limit how old unarchived
        data can be, you can set <varname>archive_timeout</> to force the
        server to switch to a new WAL segment file periodically.  When this
        parameter is greater than zero, the server will switch to a new
        segment file whenever this many seconds have elapsed since the last
        segment file switch, and there has been any database activity,
        including a single checkpoint.  (Increasing
        <varname>checkpoint_timeout</> will reduce unnecessary
        checkpoints on an idle system.)
        Note that archived files that are closed early
        due to a forced switch are still the same length as completely full
        files.  Therefore, it is unwise to use a very short
        <varname>archive_timeout</> &mdash; it will bloat your archive
        storage.  <varname>archive_timeout</> settings of a minute or so are
        usually reasonable.  You should consider using streaming replication,
        instead of archiving, if you want data to be copied off the master
        server more quickly than that.
        This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
-->
<para>
     <xref linkend="guc-archive-command">仅在已完成的WAL段上调用。
 因此，如果服务器只产生很少的WAL流量(或产生流量的周期很长)，
 那么在完成事务以及安全归档存储之间将有一个很长的延时。
 为了限制未归档数据的逗留时间，
 你可以强制服务器以<varname>archive_timeout</>指定的秒数为周期切换到新的WAL段文件。
 当这个参数大于零时，服务器将切换到新的段文件，无论从剩余段文件切换过去多少秒，
 并且有任何的数据库活动，包含一个单独的检查点（增加<varname>checkpoint_timeout</>
 将减少空闲系统上不必要的检查）。
 注意，由于强制切换而提早关闭的归档文件仍然与完整的归档文件长度相同。
 因此，将<varname>archive_timeout</> &mdash;设为很小的值是不明智的，它将导致占用巨大的归档存储空间。
 将<varname>archive_timeout</>设置为60秒左右是比较合理的。 
 如果你想要拷贝主服务器数据更加快速，你应该考虑使用流复制，而不是归档。
     这个选项只能在<filename>postgresql.conf</>文件或者服务器命令行里设置。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

   </sect1>

   <sect1 id="runtime-config-replication">
   <!--
    <title>Replication</title>
   -->
   <title>复制</title>
    <!--
<para>
     These settings control the behavior of the built-in
     <firstterm>streaming replication</> feature (see
     <xref linkend="streaming-replication">).  Servers will be either a
     Master or a Standby server.  Masters can send data, while Standby(s)
     are always receivers of replicated data.  When cascading replication
     (see <xref linkend="cascading-replication">) is used, Standby server(s)
     can also be senders, as well as receivers.
     Parameters are mainly for Sending and Standby servers, though some
     parameters have meaning only on the Master server.  Settings may vary
     across the cluster without problems if that is required.
    </para>
-->
<para>
     这些设置控制<firstterm>流复制</>特性(参见
     <xref linkend="streaming-replication">)。
 服务器将是任何一个主或备用服务器。主服务器可以发送数据，
 而备用(s)总是拷贝数据的接收器。当使用级联复制时(参见<xref linkend="cascading-replication">)，
 备用服务器(s)也可以是发送者，也可以是接收器。 
 参数主要用于发送和备用服务器，虽然有些参数仅在主服务器上。
 如果是必需的，那么通过集群设置可能会有所不同。 
</para>

    <sect2 id="runtime-config-replication-sender">
<!--
     <title>Sending Server(s)</title>
 -->
 <title>发送服务器</title>

     <!--
<para>
      These parameters can be set on any server that is
      to send replication data to one or more standby servers.
      The master is always a sending server, so these parameters must
      always be set on the master.
      The role and meaning of these parameters does not change after a
      standby becomes the master.
     </para>
-->
<para>
    这些参数可以在发送复制的数据给一个或多个备用服务器的任何服务器上进行设置。 
    主服务器总是发送服务器，所以这些参数必须总是在主服务器上设置。 
    备用成为主之后这些参数的作用和意义不会改变。
</para>

     <variablelist>
      <varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
       <term><varname>max_wal_senders</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_wal_senders</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
       <!--
<para>
        Specifies the maximum number of concurrent connections from
        standby servers or streaming base backup clients (i.e., the
        maximum number of simultaneously running WAL sender
        processes). The default is zero, meaning replication is
        disabled. WAL sender processes count towards the total number
        of connections, so the parameter cannot be set higher than
        <xref linkend="guc-max-connections">.  Abrupt streaming client
        disconnection might cause an orphaned connection slot until
        a timeout is reached, so this parameter should be set slightly
        higher than the maximum number of expected clients so disconnected
        clients can immediately reconnect.  This parameter can only
        be set at server start. <varname>wal_level</> must be set to
        <literal>archive</> or higher to allow connections from standby
        servers.
       </para>
-->
<para>
   指定来自备用服务器或流基础备份客户端的并发连接的最大数目
   （即同时运行WAL发送者进程的最大数目）。
   默认值是零，这意味着禁用复制。
   WAL发送者进程计算连接总数，
   因此参数不能高于<xref linkend="guc-max-connections">。
流客户端突然断开会导致单独的连接槽，直到超时，
所以这个参数应该设置的比预期的客户端的最大数量稍高一些，
这样断开的客户端可以立即重新连接。   
   这个参数只能在服务器启动时设置。<varname>wal_level</>必须设置 
   为<literal>archive</>或者更高允许来自备用服务器的连接。
</para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-replication-slots" xreflabel="max_replication_slots">
       <term><varname>max_replication_slots</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_replication_slots</> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>

<!-- 
        <para>
         Specifies the maximum number of replication slots
         (see <xref linkend="streaming-replication-slots">) that the server
         can support. The default is zero.  This parameter can only be set at
         server start.
         <varname>wal_level</varname> must be set
         to <literal>archive</literal> or higher to allow replication slots to
         be used. Setting it to a lower value than the number of currently
         existing replication slots will prevent the server from starting.
        </para>
-->
<para>
声明服务器可以支持的复制槽（参阅<xref linkend="streaming-replication-slots">）
的最大数量。缺省是0。这个参数只能在服务器启动时设置。<varname>wal_level</varname>
必须设置为<literal>archive</literal>或更高以允许使用复制槽。
将此值设置的比当前存在的复制槽数量低将阻止服务器启动。
</para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-wal-keep-segments" xreflabel="wal_keep_segments">
       <term><varname>wal_keep_segments</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>wal_keep_segments</> configuration parameter</primary>
       </indexterm>
      </term>
       <listitem>
       <!--
<para>
        Specifies the minimum number of past log file segments kept in the
        <filename>pg_xlog</>
        directory, in case a standby server needs to fetch them for streaming
        replication. Each segment is normally 16 megabytes. If a standby
        server connected to the sending server falls behind by more than
        <varname>wal_keep_segments</> segments, the sending server might remove
        a WAL segment still needed by the standby, in which case the
        replication connection will be terminated.  Downstream connections
        will also eventually fail as a result.  (However, the standby
        server can recover by fetching the segment from archive, if WAL
        archiving is in use.)
       </para>
-->
<para>
    指定在<filename>pg_xlog</>目录下的以往日志文件段的最小数量，
如果备用服务器为了流复制需要获取它们。
那么每个段通常是16兆字节。
如果备用服务器连接到发送服务器落后于<varname>wal_keep_segments</>段，那么发送服务器可能会删除WAL段仍需要待机状态，在这种情况下，
复制连接将被终止。下游连接也将最终失败，因为其结果。（但是，备用服务器可以从归档文件读取的段进行恢复，如果WAL归档在使用中。）
</para>

       <!--
<para>
        This sets only the minimum number of segments retained in
        <filename>pg_xlog</>; the system might need to retain more segments
        for WAL archival or to recover from a checkpoint. If
        <varname>wal_keep_segments</> is zero (the default), the system
        doesn't keep any extra segments for standby purposes, so the number
        of old WAL segments available to standby servers is a function of
        the location of the previous checkpoint and status of WAL
        archiving.
        This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
-->
<para>
    设置保留在<filename>pg_xlog</>中的段最小数量;
该系统可能需要为WAL归档或从检查点恢复保留更多段。
如果<varname>wal_keep_segments</>为0（默认），
系统不保留备用目的的任何额外段，
所以提供给备用服务器的旧WAL段数是以前检查点定位函数和WAL归档状态信息。 
这个参数只能在<filename>postgresql.conf</>文件或服务器命令行上设置。
</para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-wal-sender-timeout" xreflabel="wal_sender_timeout">
      <term><varname>wal_sender_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_sender_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Terminate replication connections that are inactive longer
        than the specified number of milliseconds. This is useful for
        the sending server to detect a standby crash or network outage.
        A value of zero disables the timeout mechanism.  This parameter
        can only be set in
        the <filename>postgresql.conf</> file or on the server command line.
        The default value is 60 seconds.
       </para>
-->
<para>
     终止比指定毫秒数闲置更长时间的复制连接。
 这对于发送服务器检测待机死机或网络中断是很有帮助的。 
     零值将禁用超时机制。
 此参数只能在<filename>postgresql.conf</>文件或服务器命令行上设置。 
     默认值是60秒。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-master">
<!--
     <title>Master Server</title>
 -->
 <title>主服务器</title>

     <!--
<para>
      These parameters can be set on the master/primary server that is
      to send replication data to one or more standby servers.
      Note that in addition to these parameters,
      <xref linkend="guc-wal-level"> must be set appropriately on the master
      server, and optionally WAL archiving can be enabled as
      well (see <xref linkend="runtime-config-wal-archiving">).
      The values of these parameters on standby servers are irrelevant,
      although you may wish to set them there in preparation for the
      possibility of a standby becoming the master.
     </para>
-->
<para>
    这些参数可以在主/首要的服务器上设置，它将复制的数据发送给一个或多个备用服务器。 
    需要注意的是，除了这些参数，<xref linkend="guc-wal-level">必须在主服务器上适当地设定，
并且启用任选的WAL归档（参见<xref linkend="runtime-config-wal-archiving">）。
备用服务器上这些参数值是不相关的，虽然你可能希望设置它们，为了备用的成为主服务器可能性做准备。
</para>

    <variablelist>

     <varlistentry id="guc-synchronous-standby-names" xreflabel="synchronous_standby_names">
      <term><varname>synchronous_standby_names</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>synchronous_standby_names</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies a comma-separated list of standby names that can support
        <firstterm>synchronous replication</>, as described in
        <xref linkend="synchronous-replication">.
        At any one time there will be at most one active synchronous standby;
        transactions waiting for commit will be allowed to proceed after
        this standby server confirms receipt of their data.
        The synchronous standby will be the first standby named in this list
        that is both currently connected and streaming data in real-time
        (as shown by a state of <literal>streaming</literal> in the
        <link linkend="monitoring-stats-views-table">
        <literal>pg_stat_replication</></link> view).
        Other standby servers appearing later in this list represent potential
        synchronous standbys.
        If the current synchronous standby disconnects for whatever reason,
        it will be replaced immediately with the next-highest-priority standby.
        Specifying more than one standby name can allow very high availability.
       </para>
-->
<para>
      指定用逗号分隔的备用名称列表，可以支持<firstterm>同步复制</>，
  如<xref linkend="synchronous-replication">描述的。
  任何一个时间将至多有一个活跃同步备用;
  这个备用服务器确认收到他们的数据后，等待提交事务将被允许进行。 
  同步待机是此列表中第一个备用。列表是当前连接和实时数据流（如通过
  <link linkend="monitoring-stats-views-table">
      <literal>pg_stat_replication</></link>视图中的<literal>streaming</literal>状态显示）。  
  之后出现在此列表中的其它备用服务器带来潜在的同步备用。
  如果无论出于何种原因当前同步待机断开，那么它会立即被下一个最高优先级的替换。
  指定多个备用名可以有非常高的可用性。
</para>
       <!--
<para>
        The name of a standby server for this purpose is the
        <varname>application_name</> setting of the standby, as set in the
        <varname>primary_conninfo</> of the standby's WAL receiver.  There is
        no mechanism to enforce uniqueness. In case of duplicates one of the
        matching standbys will be chosen to be the synchronous standby, though
        exactly which one is indeterminate.
        The special entry <literal>*</> matches any
        <varname>application_name</>, including the default application name
        of <literal>walreceiver</>.
       </para>
-->
<para>
      备用服务器用于此目的的名称是备用<varname>application_name</>的设定，
  正如备用WAL接收器中<varname>primary_conninfo</>的设置。
  没有任何机制来保证唯一性。重复匹配备用记录中的一个的情况下将被选作同步待机，
  虽然哪一个是不确定的。 特殊项<literal>*</>匹配任何的 
  <varname>application_name</>，包括<literal>walreceiver</>的默认应用程序名称。
</para>
       <!--
<para>
        If no synchronous standby names are specified here, then synchronous
        replication is not enabled and transaction commits will not wait for
        replication.  This is the default configuration.  Even when
        synchronous replication is enabled, individual transactions can be
        configured not to wait for replication by setting the
        <xref linkend="guc-synchronous-commit"> parameter to
        <literal>local</> or <literal>off</>.
       </para>
-->
<para>
     如果没有在这里指定同步备用名，那么不启用同步复制并且事务提交将不会等待复制。这是默认配置。
 即使当已经启用同步复制，个别事务可以配置而不等待复制，它通过设置
 <xref linkend="guc-synchronous-commit">参数到
     <literal>local</>或者<literal>off</>。
</para>
       <!--
<para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
       这个参数只能在<filename>postgresql.conf</>文件或者服务器命令行设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-defer-cleanup-age" xreflabel="vacuum_defer_cleanup_age">
      <term><varname>vacuum_defer_cleanup_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_defer_cleanup_age</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the number of transactions by which <command>VACUUM</> and
        <acronym>HOT</> updates will defer cleanup of dead row versions. The
        default is zero transactions, meaning that dead row versions can be
        removed as soon as possible, that is, as soon as they are no longer
        visible to any open transaction.  You may wish to set this to a
        non-zero value on a primary server that is supporting hot standby
        servers, as described in <xref linkend="hot-standby">.  This allows
        more time for queries on the standby to complete without incurring
        conflicts due to early cleanup of rows.  However, since the value
        is measured in terms of number of write transactions occurring on the
        primary server, it is difficult to predict just how much additional
        grace time will be made available to standby queries.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
     指定由<command>VACUUM</>和
     <acronym>HOT</>更新的事务数将延迟死行版本的清理。
 该默认值是零事务，这意味着死行版本可以尽快删除，
 也就是说，只要他们不再可见于任何打开的事务。
 你不妨将它设置为一个支持双机热备的主服务器上的非零值，
 正如<xref linkend="hot-standby">所描述的。
 这需要更多的时间完成待机状态的查询，由于行早期清除而不会产生冲突。
 然而，因为该值是依据发生在主服务器上的写入事务数量进行计算， 
 它是很难预测到底有多少额外的宽限时间将提供给备用查询。
 这个参数只能在<filename>postgresql.conf</>
 文件或服务器命令行上设置。
</para>
       <!--
<para>
        You should also consider setting <varname>hot_standby_feedback</>
        on standby server(s) as an alternative to using this parameter.
       </para>
-->
<para>
     你也应该考虑在备用服务器(s)设置<varname>hot_standby_feedback</>，作为使用该参数的另外一种选择。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-standby">
<!--
     <title>Standby Servers</title>
 -->
 <title>备用服务器</title>

     <!--
<para>
      These settings control the behavior of a standby server that is
      to receive replication data.  Their values on the master server
      are irrelevant.
     </para>
-->
<para>
     这些设置控制备用服务器的行为以接收复制数据。
 在主服务器上的值是不相关的。
</para>

    <variablelist>

     <varlistentry id="guc-hot-standby" xreflabel="hot_standby">
      <term><varname>hot_standby</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies whether or not you can connect and run queries during
        recovery, as described in <xref linkend="hot-standby">.
        The default value is <literal>off</literal>.
        This parameter can only be set at server start. It only has effect
        during archive recovery or in standby mode.
       </para>
-->
<para>
       指定恢复期间是否可以连接并运行查询，如在<xref linkend="hot-standby">中所描述的。 
   默认值是<literal>off</literal>。 
   这个参数只能在服务器启动时设置。它在存档恢复或处于待机模式时见效。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-archive-delay" xreflabel="max_standby_archive_delay">
      <term><varname>max_standby_archive_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_archive_delay</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When Hot Standby is active, this parameter determines how long the
        standby server should wait before canceling standby queries that
        conflict with about-to-be-applied WAL entries, as described in
        <xref linkend="hot-standby-conflict">.
        <varname>max_standby_archive_delay</> applies when WAL data is
        being read from WAL archive (and is therefore not current).
        The default is 30 seconds. Units are milliseconds if not specified.
        A value of -1 allows the standby to wait forever for conflicting
        queries to complete.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para> 
    当热备是活跃时，这个参数决定取消与应用的WAL项冲突的备用查询之前，备用服务器应等待多久。    
如<xref linkend="hot-standby-conflict">所描述的。
    <varname>max_standby_archive_delay</>适用于WAL数据从WAL归档读取（因此不是现在）。 
默认值是30秒。如果不指定，则单位是毫秒。 
值为-1允许待机永远等待完成查询冲突。 
这个参数只能在<filename>postgresql.conf</>文件或服务器命令行上设置。
</para>
       <!--
<para>
        Note that <varname>max_standby_archive_delay</> is not the same as the
        maximum length of time a query can run before cancellation; rather it
        is the maximum total time allowed to apply any one WAL segment's data.
        Thus, if one query has resulted in significant delay earlier in the
        WAL segment, subsequent conflicting queries will have much less grace
        time.
       </para>
-->
<para>
    注意，<varname>max_standby_archive_delay</>和 
运行查询取消之前的时间最大长度不一样;
    而是可以申请任何一个WAL段数据的最大总时间。 
因此，如果一个查询导致WAL段中早期显著延迟，
随后的冲突查询将有少得多的时间。  
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-streaming-delay" xreflabel="max_standby_streaming_delay">
      <term><varname>max_standby_streaming_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_streaming_delay</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When Hot Standby is active, this parameter determines how long the
        standby server should wait before canceling standby queries that
        conflict with about-to-be-applied WAL entries, as described in
        <xref linkend="hot-standby-conflict">.
        <varname>max_standby_streaming_delay</> applies when WAL data is
        being received via streaming replication.
        The default is 30 seconds. Units are milliseconds if not specified.
        A value of -1 allows the standby to wait forever for conflicting
        queries to complete.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
    当热备是活跃时，这个参数决定取消与应用的WAL项冲突的备用查询之前，备用服务器应等待多久。    
如<xref linkend="hot-standby-conflict">所描述的。
    <varname>max_standby_streaming_delay</>适用于WAL数据从流复制接收到。 
默认值是30秒。如果不指定，则单位是毫秒。 
值为-1允许待机永远等待完成查询冲突。 
这个参数只能在<filename>postgresql.conf</>文件或服务器命令行上设置。
</para>
       <!--
<para>
        Note that <varname>max_standby_streaming_delay</> is not the same as
        the maximum length of time a query can run before cancellation; rather
        it is the maximum total time allowed to apply WAL data once it has
        been received from the primary server.  Thus, if one query has
        resulted in significant delay, subsequent conflicting queries will
        have much less grace time until the standby server has caught up
        again.
       </para>
-->
<para>
注意，<varname>max_standby_streaming_delay</>和 
运行查询取消之前的时间最大长度不一样;
一旦已经从主服务器接收，则是可以申请任何一个WAL段数据的最大总时间。 
因此，如果一个查询导致显著延迟，
随后的冲突查询将有少得多的时间直到备用服务器再次追赶上。 
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-status-interval" xreflabel="wal_receiver_status_interval">
      <term><varname>wal_receiver_status_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_status_interval</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
      <!--
<para>
       Specifies the minimum frequency for the WAL receiver
       process on the standby to send information about replication progress
       to the primary or upstream standby, where it can be seen using the
       <link linkend="monitoring-stats-views-table">
       <literal>pg_stat_replication</></link> view.  The standby will report
       the last transaction log position it has written, the last position it
       has flushed to disk, and the last position it has applied.
       This parameter's
       value is the maximum interval, in seconds, between reports.  Updates are
       sent each time the write or flush positions change, or at least as
       often as specified by this parameter.  Thus, the apply position may
       lag slightly behind the true position.  Setting this parameter to zero
       disables status updates completely.  This parameter can only be set in
       the <filename>postgresql.conf</> file or on the server command line.
       The default value is 10 seconds.
      </para>
-->
<para>
     指定WAL接收的最小频率，处理备库上发送有关复制进程信息到主或上游待机状态，
 在那里可以使用可见的 <link linkend="monitoring-stats-views-table">
       <literal>pg_stat_replication</></link>视图。
  待机会报告它已写入的最后一个事务日志的位置，
  最后一个位置已经刷新到磁盘中，并已申请最后位置。
 此参数值的最大时间间隔，以秒为单位。
 更新每次写或刷新的位置变化，或者至少往往由这个参数所指定。因此，
 应用位置可能稍微落后于真实的位置。此参数设置为零完全禁用状态更新。这个参数只能在
 <filename>postgresql.conf</>文件或服务器命令行上设置。默认值是10秒。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hot-standby-feedback" xreflabel="hot_standby_feedback">
      <term><varname>hot_standby_feedback</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby_feedback</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem> 
       <!--
<para>
        Specifies whether or not a hot standby will send feedback to the primary
        or upstream standby
        about queries currently executing on the standby. This parameter can
        be used to eliminate query cancels caused by cleanup records, but
        can cause database bloat on the primary for some workloads.
        Feedback messages will not be sent more frequently than once per
        <varname>wal_receiver_status_interval</>. The default value is
        <literal>off</literal>. This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
-->
<para>
    指定热备是否将发送反馈到主或有关查询当前正在备机上执行的上游备机。此参数可以 
用于消除查询取消引起清除的记录，但可能会导致主机某些工作负载的数据库膨胀。 
反馈信息将不会被更频繁地发送超过一次<varname>wal_receiver_status_interval</>。缺省值是 
<literal>关闭的</literal>。这个参数只能在设置<filename>postgresql.conf</>文件或服务器命令行上。
</para>
       <!--
<para>
        If cascaded replication is in use the feedback is passed upstream
        until it eventually reaches the primary.  Standbys make no other use
        of feedback they receive other than to pass upstream.
       </para>
-->
<para>
     如果级联复制是使用中的反馈通过上游直到它最终到达主机。备用不作任何其他用途 
 反馈他们收到以外的其他上游传递。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-timeout" xreflabel="wal_receiver_timeout">
      <term><varname>wal_receiver_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Terminate replication connections that are inactive longer
        than the specified number of milliseconds. This is useful for
        the receiving standby server to detect a primary node crash or network
        outage.
        A value of zero disables the timeout mechanism.  This parameter
        can only be set in
        the <filename>postgresql.conf</> file or on the server command line.
        The default value is 60 seconds.
       </para>
-->
<para>
 终止比指定毫秒数闲置更长时间的复制连接。
 这对于发送服务器检测待机死机或网络中断是很有帮助的。 
     零值将禁用超时机制。
 此参数只能在<filename>postgresql.conf</>文件或服务器命令行上设置。 
     默认值是60秒。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-query">
   <!--
    <title>Query Planning</title>
-->
<title>查询规划</title>

    <sect2 id="runtime-config-query-enable">
<!--
     <title>Planner Method Configuration</title>
     -->
 <title>规划器方法配置</title>
      <!--
<para>
       These configuration parameters provide a crude method of
       influencing the query plans chosen by the query optimizer. If
       the default plan chosen by the optimizer for a particular query
       is not optimal, a <emphasis>temporary</> solution is to use one
       of these configuration parameters to force the optimizer to
       choose a different plan.
       Better ways to improve the quality of the
       plans chosen by the optimizer include adjusting the planer cost
       constants (see <xref linkend="runtime-config-query-constants">),
       running <xref linkend="sql-analyze"> manually, increasing
       the value of the <xref
       linkend="guc-default-statistics-target"> configuration parameter,
       and increasing the amount of statistics collected for
       specific columns using <command>ALTER TABLE SET
       STATISTICS</command>.
      </para>
-->
<para>
    这些配置参数提供了影响查询优化器选择查询规划的原始方法。
如果优化器为特定的查询选择的缺省规划并不是最优，
那么我们就可以通过使用这些配置参数强制优化器选择一个不同的规划来<emphasis>临时</>解决这个问题。
更好的改善优化器选择规划的方法 包括调节规划器开销常量、
手动运行<xref linkend="sql-analyze">、增大配置参数<xref linkend="guc-default-statistics-target">的值、
使用<command>ALTER TABLE SET STATISTICS</command>为某个字段增加收集的统计信息。
</para>

     <variablelist>
     <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
      <term><varname>enable_bitmapscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>bitmap scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_bitmapscan</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of bitmap-scan plan
        types. The default is <literal>on</>.
       </para>
-->
<para>
    打开或者关闭规划器对位图扫描规划类型的使用。缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
      <term><varname>enable_hashagg</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashagg</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of hashed
        aggregation plan types. The default is <literal>on</>.
       </para>
-->
<para>
      打开或者关闭规划器对Hash聚合规划类型的使用。缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
      <term><varname>enable_hashjoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashjoin</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of hash-join plan
        types. The default is <literal>on</>.
       </para>
-->
<para>
     打开或者关闭规划器对Hash连接规划类型的使用。缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
      <term><varname>enable_indexscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>index scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexscan</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of index-scan plan
        types. The default is <literal>on</>.
       </para>
-->
<para>
    打开或者关闭规划器对索引扫描规划类型的使用。缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-indexonlyscan" xreflabel="enable_indexonlyscan">
      <term><varname>enable_indexonlyscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>index-only scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexonlyscan</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of index-only-scan plan
        types. The default is <literal>on</>.
       </para>
-->
<para>
      打开或关闭规划器对唯一索引扫描规划类型的使用。缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-material" xreflabel="enable_material">
      <term><varname>enable_material</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_material</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of materialization.
        It is impossible to suppress materialization entirely,
        but turning this variable off prevents the planner from inserting
        materialize nodes except in cases where it is required for correctness.
        The default is <literal>on</>.
       </para>
-->
<para>
       打开或关闭查询规划器使用物化。不可能完全抑制物化，但是
   关闭这个变量会阻止规划器插入物化节点，除非它是必需正确的情况。 
       默认值是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
      <term><varname>enable_mergejoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_mergejoin</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of merge-join plan
        types. The default is <literal>on</>.
       </para>
-->
<para>
     打开或者关闭规划器对融合连接规划类型的使用。缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
      <term><varname>enable_nestloop</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_nestloop</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of nested-loop join
        plans. It is impossible to suppress nested-loop joins entirely,
        but turning this variable off discourages the planner from using
        one if there are other methods available. The default is
        <literal>on</>.
       </para>
-->
<para>
     打开或者关闭规划器对嵌套循环连接规划类型的使用。
 我们不可能完全消除嵌套循环连接，
 但是把这个变量关闭就会让规划器在存在其它方法的时候优先选择其它方法。
 缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
      <term><varname>enable_seqscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>sequential scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_seqscan</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of sequential scan
        plan types. It is impossible to suppress sequential scans
        entirely, but turning this variable off discourages the planner
        from using one if there are other methods available. The
        default is <literal>on</>.
       </para>
-->
<para>
     打开或者关闭规划器对顺序扫描规划类型的使用。我们不可能完全消除顺序扫描，
 但是把这个变量关闭会让规划器在存在其它方法的时候优先选择其它方法。
 缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
      <term><varname>enable_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_sort</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of explicit sort
        steps. It is impossible to suppress explicit sorts entirely,
        but turning this variable off discourages the planner from
        using one if there are other methods available. The default
        is <literal>on</>.
       </para>
-->
<para>
     打开或者关闭规划器使用明确的排序步骤。我们不可能完全消除明确的排序，
 但是把这个变量关闭可以让规划器在存在其它方法的时候优先选择其它方法。
 缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
      <term><varname>enable_tidscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_tidscan</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables the query planner's use of <acronym>TID</>
        scan plan types. The default is <literal>on</>.
       </para>
-->
<para>
      打开或者关闭规划器对<acronym>TID</>扫描规划类型的使用。缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-query-constants">
     
 <!--
     <title>Planner Cost Constants</title>
     -->
 <title>规划器开销常量</title>

    <!--
<para>
     The <firstterm>cost</> variables described in this section are measured
     on an arbitrary scale.  Only their relative values matter, hence
     scaling them all up or down by the same factor will result in no change
     in the planner's choices.  By default, these cost variables are based on
     the cost of sequential page fetches; that is,
     <varname>seq_page_cost</> is conventionally set to <literal>1.0</>
     and the other cost variables are set with reference to that.  But
     you can use a different scale if you prefer, such as actual execution
     times in milliseconds on a particular machine.
    </para>
-->
<para>
   本节中描述的<firstterm>开销</>可以按照任意标准度量。我们只关心其相对值，
   因此以相同的系数缩放它们将不会对规划器产生任何影响。传统上，
   它们以抓取顺序页的开销作为基准单位。也就是说将<varname>seq_page_cost</>设为<literal>1.0</>，
   同时其它开销参数对照它来设置。当然你也可以使用其它基准，
   比如以毫秒计的实际执行时间。
</para>

   <note>
    <!--
<para>
     Unfortunately, there is no well-defined method for determining ideal
     values for the cost variables.  They are best treated as averages over
     the entire mix of queries that a particular installation will receive.  This
     means that changing them on the basis of just a few experiments is very
     risky.
    </para>
-->
<para>
  糟糕的是，现在还没有定义得很合理的方法来判断下面出现的"开销"变量族的理想数值。
  它们最好按照某个特定安装的平均查询开销来衡量。
  这意味着仅仅根据很少量的试验结果来修改它们是很危险的。
</para>
   </note>

     <variablelist>

     <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
      <term><varname>seq_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>seq_page_cost</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the planner's estimate of the cost of a disk page fetch
        that is part of a series of sequential fetches.  The default is 1.0.
        This value can be overridden for tables and indexes in a particular
        tablespace by setting the tablespace parameter of the same name
        (see <xref linkend="sql-altertablespace">).
       </para>
-->
<para>
     设置规划器计算一次顺序磁盘页面抓取的开销。默认值是1.0。
 这个值可以通过设置同名表空间参数表的特定表和索引覆盖。
 （参阅<xref linkend="sql-altertablespace">）   
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
      <term><varname>random_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>random_page_cost</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the planner's estimate of the cost of a
        non-sequentially-fetched disk page.  The default is 4.0.
        This value can be overridden for tables and indexes in a particular
        tablespace by setting the tablespace parameter of the same name
        (see <xref linkend="sql-altertablespace">).
       </para>
-->
<para>
      设置规划器计算一次非顺序磁盘页面抓取的开销。默认值是4.0。
  这个值可以通过设置同名表空间参数表的特定表和索引覆盖。
  （参阅<xref linkend="sql-altertablespace">）。
</para>

       <!--
<para>
        Reducing this value relative to <varname>seq_page_cost</>
        will cause the system to prefer index scans; raising it will
        make index scans look relatively more expensive.  You can raise
        or lower both values together to change the importance of disk I/O
        costs relative to CPU costs, which are described by the following
        parameters.
       </para>
-->
<para>
     (相对于<varname>seq_page_cost</>)减少这个值将导致更倾向于使用索引扫描，
  而增加这个值将导致更倾向于使用顺序扫描。
  可以通过同时增加或减少这两个值来调整磁盘I/O相对于CPU的开销(在下面的参数中描述)。
</para>

       <!--
<para>
        Random access to mechanical disk storage is normally much more expensive
        than four times sequential access.  However, a lower default is used
        (4.0) because the majority of random accesses to disk, such as indexed
        reads, are assumed to be in cache.  The default value can be thought of
        as modeling random access as 40 times slower than sequential, while
        expecting 90% of random reads to be cached.
       </para>
-->
<para>
        机械磁盘存储的随机访问比4次顺序访问往往更加昂贵。然而，下面使用缺省（4.0），
因为大多数随机访问磁盘，比如索引读取是在缓存中。
默认值可以作为模拟随机存取比顺序存取慢40倍，而预计90％随机读取到缓存中。
</para>

       <!--
<para>
        If you believe a 90% cache rate is an incorrect assumption
        for your workload, you can increase random_page_cost to better
        reflect the true cost of random storage reads. Correspondingly,
        if your data is likely to be completely in cache, such as when
        the database is smaller than the total server memory, decreasing
        random_page_cost can be appropriate.  Storage that has a low random
        read cost relative to sequential, e.g. solid-state drives, might
        also be better modeled with a lower value for random_page_cost.
       </para>
-->
<para>
     如果您认为90％的缓存率是你的工作量的错误假设，
 你可以增加random_page_cost更好地 
 反映随机存储读取的真实成本。相应地， 
 如果你的数据很可能完全在高速缓存中，如当 
 数据库比总的服务器内存较小的时候，可以适当减少 
 random_page_cost。存储具有相对顺序的低随机读取成本，
 例如固态硬盘，可能还可以更好地与random_page_cost的低值建模。
</para>

       <tip>
        <!--
<para>
         Although the system will let you set <varname>random_page_cost</> to
         less than <varname>seq_page_cost</>, it is not physically sensible
         to do so.  However, setting them equal makes sense if the database
         is entirely cached in RAM, since in that case there is no penalty
         for touching pages out of sequence.  Also, in a heavily-cached
         database you should lower both values relative to the CPU parameters,
         since the cost of fetching a page already in RAM is much smaller
         than it would normally be.
        </para>
-->
<para>
     虽然允许你将<varname>random_page_cost</>设置的比<varname>seq_page_cost</>小，
 但是物理上的实际情况并不受此影响。然而当所有数据库都位于内存中时，
 两者设置为相等是非常合理的，因为在此情况下，乱序抓取并不比顺序抓取开销更大。同样，
 在缓冲率很高的数据库上，你应当相对于CPU开销同时降低这两个值，
 因为获取内存中的页比通常情况下的开销小许多。
</para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
      <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_tuple_cost</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the planner's estimate of the cost of processing
        each row during a query.
        The default is 0.01.
       </para>
-->
<para>
      设置规划器计算在一次查询中处理一个数据行的开销。缺省是0.01。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
      <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_index_tuple_cost</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the planner's estimate of the cost of processing
        each index entry during an index scan.
        The default is 0.005.
       </para>
-->
<para>
     设置规划器计算在一次索引扫描中处理每条索引行的开销。缺省是0.005。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
      <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_operator_cost</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the planner's estimate of the cost of processing each
        operator or function executed during a query.
        The default is 0.0025.
       </para>
-->
<para>
  设置规划器计算在一次查询中执行一个操作符或函数的开销。
  缺省是0.0025。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
      <term><varname>effective_cache_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>effective_cache_size</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the planner's assumption about the effective size of the
        disk cache that is available to a single query.  This is
        factored into estimates of the cost of using an index; a
        higher value makes it more likely index scans will be used, a
        lower value makes it more likely sequential scans will be
        used. When setting this parameter you should consider both
        <productname>PostgreSQL</productname>'s shared buffers and the
        portion of the kernel's disk cache that will be used for
        <productname>PostgreSQL</productname> data files.  Also, take
        into account the expected number of concurrent queries on different
        tables, since they will have to share the available
        space.  This parameter has no effect on the size of shared
        memory allocated by <productname>PostgreSQL</productname>, nor
        does it reserve kernel disk cache; it is used only for estimation
        purposes.  The system also does not assume data remains in
        the disk cache between queries.  The default is 4 gigabytes
        (<literal>4GB</>).
       </para>
-->
<para>
   为规划器设置在一次索引扫描中可用的磁盘缓冲区的有效大小。
   这个参数会在计算一个索引的预计开销值的时候加以考虑。更高的数值会导致更可能使用索引扫描，
   更低的数值会导致更有可能选择顺序扫描。在设置这个参数的时候，
   你还应该考虑<productname>PostgreSQL</productname>的数据文件会使用的共享缓冲区和内核的磁盘缓冲区。另外，
   还要考虑预计会使用不同索引的并发查询数目，因为它们必须共享可用的内存空间。
   这个参数对<productname>PostgreSQL</productname>分配的共享内存大小没有影响，它也不会使用内核磁盘缓冲，  
   它只用于估算。该系统还并未假设数据仍保留在查询之间的磁盘缓存中。默认值是4千兆字节(<literal>4GB</>)。  
</para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-query-geqo">
 <!--
     <title>Genetic Query Optimizer</title>
 -->
 <title>基因查询优化器</title>


     <!--
<para>
      The genetic query optimizer (GEQO) is an algorithm that does query
      planning using heuristic searching.  This reduces planning time for
      complex queries (those joining many relations), at the cost of producing
      plans that are sometimes inferior to those found by the normal
      exhaustive-search algorithm.
      For more information see <xref linkend="geqo">.
     </para>
-->
<para>
      基因查询优化（GEQO）是一种算法，采用启发式搜索查询规划。这样可以为复杂查询（链接着很多关系）减少规划时间，
  生产规划成本有时低于由正常穷举搜索算法发现的那些。 
  获取更多信息，请参阅<xref linkend="geqo">。
</para>

     <variablelist>

     <varlistentry id="guc-geqo" xreflabel="geqo">
      <term><varname>geqo</varname> (<type>boolean</type>)
      <indexterm>
       <primary>genetic query optimization</primary>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>genetic query optimization</see>
      </indexterm>
      <indexterm>
       <primary><varname>geqo</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables or disables genetic query optimization.
        This is on by default.  It is usually best not to turn it off in
        production; the <varname>geqo_threshold</varname> variable provides
        more granular control of GEQO.
       </para>
-->
<para>
    允许或禁止基因查询优化，这是缺省值。 在生产中最好不要关闭它。
<varname>geqo_threshold</varname>变量提供了GEQO的更精细方法。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
      <term><varname>geqo_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_threshold</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Use genetic query optimization to plan queries with at least
        this many <literal>FROM</> items involved. (Note that a
        <literal>FULL OUTER JOIN</> construct counts as only one <literal>FROM</>
        item.) The default is 12. For simpler queries it is usually best
        to use the regular, exhaustive-search planner, but for queries with
        many tables the exhaustive search takes too long, often
        longer than the penalty of executing a suboptimal plan.  Thus,
        a threshold on the size of the query is a convenient way to manage
        use of GEQO.
       </para>
-->
<para>
     只有当涉及的<literal>FROM</>关系数量至少有这么多个的时候，才使用基因查询优化。
 （请注意一个<literal>FULL OUTER JOIN</>构造只算一个<literal>FROM</>项）。缺省是12。
 对于数量小于此值的查询，也许使用判定性的穷举搜索更有效。但是对于有许多表的查询
 ，规划器做判断要花很多时间。往往比执行一个次优规划时间更长。
 因此，查询大小阈值是管理使用GEQO的简单方法。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
      <term><varname>geqo_effort</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_effort</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls the trade-off between planning time and query plan
        quality in GEQO. This variable must be an integer in the
        range from 1 to 10. The default value is five. Larger values
        increase the time spent doing query planning, but also
        increase the likelihood that an efficient query plan will be
        chosen.
       </para>
-->
<para>
    控制GEQO里规划时间和查询规划的有效性之间的平衡。这个变量必须是一个范围从1到10的整数。
缺省值是5。大的数值增加花在进行查询规划上面的时间，
但是也很可能会提高选中更有效的查询规划的几率。
</para>

       <!--
<para>
        <varname>geqo_effort</varname> doesn't actually do anything
        directly; it is only used to compute the default values for
        the other variables that influence GEQO behavior (described
        below). If you prefer, you can set the other parameters by
        hand instead.
       </para>
-->
<para>
     <varname>geqo_effort</varname>实际上并没有直接干什么事情；
 只是用于计算其它那些影响GEQO行为变量的缺省值(在下面描述)。
 如果你愿意，你可以手工设置其它参数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
      <term><varname>geqo_pool_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_pool_size</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls the pool size used by GEQO, that is the
        number of individuals in the genetic population.  It must be
        at least two, and useful values are typically 100 to 1000.  If
        it is set to zero (the default setting) then a suitable
        value is chosen based on <varname>geqo_effort</varname> and
        the number of tables in the query.
       </para>
-->
<para>
    控制GEQO使用的池大小。池大小是基因全体中的个体数量。它必须至少是2，
并且有用的数值通常在100和1000之间。如果把它设置为零(缺省)，
那么就会基于<varname>geqo_effort</varname>和查询中表的数量选取一个合适的值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
      <term><varname>geqo_generations</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_generations</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls the number of generations used by GEQO, that is
        the number of iterations of the algorithm.  It must
        be at least one, and useful values are in the same range as
        the pool size.  If it is set to zero (the default setting)
        then a suitable value is chosen based on
        <varname>geqo_pool_size</varname>.
       </para>
-->
<para>
    控制GEQO使用的子代数目。子代的意思是算法的迭代次数。它必须至少是1，
有用的值范围和池大小相同。如果设置为零(缺省)，那么将基于<varname>geqo_pool_size</varname>选取合适的值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-selection-bias" xreflabel="geqo_selection_bias">
      <term><varname>geqo_selection_bias</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_selection_bias</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls the selection bias used by GEQO. The selection bias
        is the selective pressure within the population. Values can be
        from 1.50 to 2.00; the latter is the default.
       </para>
-->
<para>
   控制GEQO使用的选择性偏好。选择性偏好是在一个种群中的选择性压力。数值可以是1.5到2.0之间；
   缺省是2.0。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-seed" xreflabel="geqo_seed">
      <term><varname>geqo_seed</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_seed</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls the initial value of the random number generator used
        by GEQO to select random paths through the join order search space.
        The value can range from zero (the default) to one.  Varying the
        value changes the set of join paths explored, and may result in a
        better or worse best path being found.
       </para>
-->
<para>
      控制随机数发生器的初始值，它使用由GEQO通过连接顺序搜索空间来选择随机路径。
  该值的范围可以从零（默认值）到一。
  各种不同的值改变探索连接路径的设置，
  并可能导致发现或好或坏的最佳路径。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-query-other">
 <!--
     <title>Other Planner Options</title>
 -->
 <title>其它规划器选项</title>

     <variablelist>

     <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
      <term><varname>default_statistics_target</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>default_statistics_target</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the default statistics target for table columns without
        a column-specific target set via <command>ALTER TABLE
        SET STATISTICS</>.  Larger values increase the time needed to
        do <command>ANALYZE</>, but might improve the quality of the
        planner's estimates. The default is 100. For more information
        on the use of statistics by the <productname>PostgreSQL</>
        query planner, refer to <xref linkend="planner-stats">.
       </para>
-->
<para>
      为没有用<command>ALTER TABLE SET STATISTICS</>设置字段相关目标的表中其它字段设置缺省统计目标。
  更大的数值增加了<command>ANALYZE</>所需要的时间，但是可能会改善规划器的估计质量。
  缺省值是100。
  有关<productname>PostgreSQL</>的查询规划器使用的统计的更多信息，请参考<xref linkend="planner-stats">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
      <term><varname>constraint_exclusion</varname> (<type>enum</type>)
      <indexterm>
       <primary>constraint exclusion</primary>
      </indexterm>
      <indexterm>
       <primary><varname>constraint_exclusion</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls the query planner's use of table constraints to
        optimize queries.
        The allowed values of <varname>constraint_exclusion</> are
        <literal>on</> (examine constraints for all tables),
        <literal>off</> (never examine constraints), and
        <literal>partition</> (examine constraints only for inheritance child
        tables and <literal>UNION ALL</> subqueries).
        <literal>partition</> is the default setting.
        It is often used with inheritance and partitioned tables to
        improve performance.
      </para>
-->
<para>
      控制查询规划器使用的表约束优化查询。<varname>constraint_exclusion</>允许的值是 
  <literal>on</>（检查所有表的约束）， 
  <literal>off</>（永远不检查约束），以及
  <literal>partition</>（检查仅用于继承子表和<literal>UNION ALL</>子查询的约束）。 
  <literal>partition</>是默认设置。它往往使用继承和分区表来提高性能。
</para>

       
<para>
        <!--
        When this parameter allows it for a particular table, the planner
        compares query conditions with the table's <literal>CHECK</>
        constraints, and omits scanning tables for which the conditions
        contradict the constraints.  For example:
-->
当这个参数为特定表允许时，那么规划器用查询条件和<literal>CHECK</>约束进行比较，
并且在查询条件和约束冲突的情况下，忽略对表的扫描。比如：

<programlisting>
CREATE TABLE parent(key integer, ...);
CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);
CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;
</programlisting>
        <!--
        With constraint exclusion enabled, this <command>SELECT</>
        will not scan <structname>child1000</> at all, improving performance.
        -->
       在打开约束排除的时候，这个<command>SELECT</>将完全不会扫描<structname>child1000</>。
   这样可以提高性能。
       </para>
       <!--
<para>
        Currently, constraint exclusion is enabled by default
        only for cases that are often used to implement table partitioning.
        Turning it on for all tables imposes extra planning overhead that is
        quite noticeable on simple queries, and most often will yield no
        benefit for simple queries.  If you have no partitioned tables
        you might prefer to turn it off entirely.
       </para>
-->
<para>
     目前，constraint exclusion默认启用， 
 仅适用于那些通常用来实现表分区情况。 
 在简单查询中为所有表强加额外开销计划而打开它是很明显的，
 并且经常会产生不受益于简单查询。
 如果你没有分区表，您可能更愿意将其完全关闭。
</para>

       <!--
<para>
        Refer to <xref linkend="ddl-partitioning-constraint-exclusion"> for
        more information on using constraint exclusion and partitioning.
       </para>
-->
<para>
    参考<xref linkend="ddl-partitioning-constraint-exclusion">获取有关使用约束排除和分区的更多信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cursor-tuple-fraction" xreflabel="cursor_tuple_fraction">
      <term><varname>cursor_tuple_fraction</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cursor_tuple_fraction</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the planner's estimate of the fraction of a cursor's rows that
        will be retrieved.  The default is 0.1.  Smaller values of this
        setting bias the planner towards using <quote>fast start</> plans
        for cursors, which will retrieve the first few rows quickly while
        perhaps taking a long time to fetch all rows.  Larger values
        put more emphasis on the total estimated time.  At the maximum
        setting of 1.0, cursors are planned exactly like regular queries,
        considering only the total estimated time and not how soon the
        first rows might be delivered.
       </para>
-->
<para>
      设置被检索的游标行分数的规划器估计。
  默认值是0.1。这个设置较小的值 
  偏好规划器使用<quote>fast start</>规划游标，
  当可能花费很长时间读取所有行时，这将很快检索出前几行 
  。较大的值把更多的重点放在总的估计时间上。
  1.0的最大设置，规划游标类似于定期查询， 
  只考虑总估计时间，而不是多长时间传递第一行。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>from_collapse_limit</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        The planner will merge sub-queries into upper queries if the
        resulting <literal>FROM</literal> list would have no more than
        this many items.  Smaller values reduce planning time but might
        yield inferior query plans.  The default is eight.
        For more information see <xref linkend="explicit-joins">.
       </para>
-->
<para>
    如果生成的<literal>FROM</literal>列表不超过这个限制的项数，规划器将把子查询融合到上层查询。
小的数值降低规划的时间，但是可能会生成差些的查询计划。缺省是8。
更多信息请查看<xref linkend="explicit-joins">。
</para>

       <!--
<para>
        Setting this value to <xref linkend="guc-geqo-threshold"> or more
        may trigger use of the GEQO planner, resulting in non-optimal
        plans.  See <xref linkend="runtime-config-query-geqo">.
       </para>
-->
<para>
       设置这个值到<xref linkend="guc-geqo-threshold">或者GEQO规划器触发，
   导致非最优规划。参阅<xref linkend="runtime-config-query-geqo">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
      <term><varname>join_collapse_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>join_collapse_limit</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        The planner will rewrite explicit <literal>JOIN</>
        constructs (except <literal>FULL JOIN</>s) into lists of
        <literal>FROM</> items whenever a list of no more than this many items
        would result.  Smaller values reduce planning time but might
        yield inferior query plans.
       </para>
-->
<para>
      如果得出的列表不超过这个数目的项，
  那么规划器将把除<literal>FULL JOIN</>之外的<literal>JOIN</>构造抹平到<literal>FROM</>列表项中。
  小的数值降低规划的时间，但是可能会生成差些的查询计划。
</para>

       <!--
<para>
        By default, this variable is set the same as
        <varname>from_collapse_limit</varname>, which is appropriate
        for most uses. Setting it to 1 prevents any reordering of
        explicit <literal>JOIN</>s. Thus, the explicit join order
        specified in the query will be the actual order in which the
        relations are joined. Because the query planner does not always choose
        the optimal join order, advanced users can elect to
        temporarily set this variable to 1, and then specify the join
        order they desire explicitly.
        For more information see <xref linkend="explicit-joins">.
       </para>
-->
<para>
      缺省时，这个值和<varname>from_collapse_limit</varname>相同，这样适合大多数场合。
  把它设置为1则避免任何<literal>JOIN</>的融合，这样就将明确使用语句中的连接顺序。
  查询优化器并不是总能选取最优的连接顺序；高级用户可以选择暂时把这个变量设置为1，
  然后明确地声明他们需要的连接顺序。更多信息参见<xref linkend="explicit-joins">。
</para>

       <!--
<para>
        Setting this value to <xref linkend="guc-geqo-threshold"> or more
        may trigger use of the GEQO planner, resulting in non-optimal
        plans.  See <xref linkend="runtime-config-query-geqo">.
       </para>
-->
<para>
     设置这个值到<xref linkend="guc-geqo-threshold">或者GEQO规划器触发，
 导致非最优规划。参阅<xref linkend="runtime-config-query-geqo">。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-logging">
   <!--
    <title>Error Reporting and Logging</title>
-->
<title>错误报告和日志</title>

    <indexterm zone="runtime-config-logging">
     <primary>server log</primary>
    </indexterm>

    <sect2 id="runtime-config-logging-where">
     <!--
     <title>Where To Log</title>
 -->
 <title>在哪里记录日志</title>


     <indexterm zone="runtime-config-logging-where">
      <primary>where to log</primary>
     </indexterm>

     <variablelist>

     <varlistentry id="guc-log-destination" xreflabel="log_destination">
      <term><varname>log_destination</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_destination</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        <productname>PostgreSQL</productname> supports several methods
         for logging server messages, including
         <systemitem>stderr</systemitem>, <systemitem>csvlog</systemitem> and
         <systemitem>syslog</systemitem>. On Windows,
         <systemitem>eventlog</systemitem> is also supported. Set this
         parameter to a list of desired log destinations separated by
         commas. The default is to log to <systemitem>stderr</systemitem>
         only.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
       </para>
-->
<para>
      <productname>PostgreSQL</productname>支持多种记录服务器日志的方法，包括<systemitem>stderr</systemitem>, <systemitem>csvlog</systemitem>和
         <systemitem>syslog</systemitem>。
  在Windows里，还支持<systemitem>eventlog</systemitem>。把这个选项设置为一个逗号分隔的日志目标的列表。
  缺省是只记录到<systemitem>stderr</systemitem>。这个选项只能在<filename>postgresql.conf</>文件
  或者服务器命令行设置。
</para>
       <!--
<para>
        If <systemitem>csvlog</> is included in <varname>log_destination</>,
        log entries are output in <quote>comma separated
        value</> (<acronym>CSV</>) format, which is convenient for
        loading logs into programs.
        See <xref linkend="runtime-config-logging-csvlog"> for details.
        <xref linkend="guc-logging-collector"> must be enabled to generate
        CSV-format log output.
       </para>
-->
<para>
     如果<systemitem>csvlog</>包含在<varname>log_destination</>中，
 日志项是用<quote>逗号分隔</>(<acronym>CSV</>)格式的输出，这便于加载日志到程序。参见<xref linkend="runtime-config-logging-csvlog">获取更多详情。 
 <xref linkend="guc-logging-collector">必须能够产生CSV格式的日志输出。
</para>

       <note>
      
<para>
          <!--
         On most Unix systems, you will need to alter the configuration of
         your system's <application>syslog</application> daemon in order
         to make use of the <systemitem>syslog</systemitem> option for
         <varname>log_destination</>.  <productname>PostgreSQL</productname>
         can log to <application>syslog</application> facilities
         <literal>LOCAL0</> through <literal>LOCAL7</> (see <xref
         linkend="guc-syslog-facility">), but the default
         <application>syslog</application> configuration on most platforms
         will discard all such messages.  You will need to add something like:
 -->
 在大多数Unix系统上，你将需要改变您的系统<application>syslog</application>守护进程的配置，
 以便充分利用<varname>log_destination</>的<systemitem>syslog</systemitem>选项。
 <productname>PostgreSQL</productname>可以通过<literal>LOCAL7</>(参见<xref linkend="guc-syslog-facility">)记录<application>syslog</application>设施<literal>LOCAL0</>，
 但缺省大多数平台上<application>syslog</application>配置将忽略所有这样的消息。
 你将需要添加类似于下面的信息：
<programlisting>
local0.*    /var/log/postgresql
</programlisting>
         <!--
         to the  <application>syslog</application> daemon's configuration file
         to make it work.
 -->
 
 到<application>syslog</application>守护程序的配置文件中，使其工作。
        </para>

        <!--
<para>
         On Windows, when you use the <literal>eventlog</literal>
         option for <varname>log_destination</>, you should
         register an event source and its library with the operating
         system so that the Windows Event Viewer can display event
         log messages cleanly.
         See <xref linkend="event-log-registration"> for details.
        </para>
-->
<para>
       在Windows上，当您使用<varname>log_destination</>的<literal>eventlog</literal>选项，
   你应该注册一个事件源及其操作系统作业库，
   使Windows事件查看器可以有规则的显示事件日志消息。
   参见<xref linkend="event-log-registration">获取更多详细信息。
</para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-logging-collector" xreflabel="logging_collector">
      <term><varname>logging_collector</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>logging_collector</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
         This parameter enables the <firstterm>logging collector</>, which
         is a background process that captures log messages
         sent to <systemitem>stderr</> and redirects them into log files.
         This approach is often more useful than
         logging to <application>syslog</>, since some types of messages
         might not appear in <application>syslog</> output.  (One common
         example is dynamic-linker failure messages; another is error messages
         produced by scripts such as <varname>archive_command</>.)
         This parameter can only be set at server start.
       </para>
-->
<para>
       这个参数启动<firstterm>日志收集</>，
   这是一个后台进程，抓取发送到<systemitem>stderr</>的日志消息，并会将他们重定向到日志文件。   
   这个方法通常比记录到<application>syslog</>更有用，
   因为有些消息类型可能不会出现在<application>syslog</>输出中
   (一个常见的例子是动态连接失败的消息；另外一个是通过脚本比如<varname>archive_command</>
   产生的错误消息。）
   这个值只能在服务器启动的时候设置。

</para>

       <note>
        <!--
<para>
         It is possible to log to <systemitem>stderr</> without using the
         logging collector; the log messages will just go to wherever the
         server's <systemitem>stderr</> is directed.  However, that method is
         only suitable for low log volumes, since it provides no convenient
         way to rotate log files.  Also, on some platforms not using the
         logging collector can result in lost or garbled log output, because
         multiple processes writing concurrently to the same log file can
         overwrite each other's output.
        </para>
-->
<para>
      不使用日志收集器可以登录到<systemitem>stderr</>;
  无论服务器的<systemitem>stderr</>被定向到哪，则日志消息就定位到那里。然而，
  该方法是只适用于低日志卷，因为它没有提供方便的方式来旋转日志文件。
  另外，在某些平台上不使用日志收集器可能会导致丢失或乱码日志输出，
  因为多个进程同时写入同一个日志文件可能覆盖彼此的输出。
</para>
       </note>

       <note>
        <!--
<para>
          The logging collector is designed to never lose messages.  This means
          that in case of extremely high load, server processes could be
          blocked while trying to send additional log messages when the
          collector has fallen behind.  In contrast, <application>syslog</>
          prefers to drop messages if it cannot write them, which means it
          may fail to log some messages in such cases but it will not block
          the rest of the system.
        </para>
-->
<para>
      日志收集器设计永远不会丢失消息。
  这意味着在非常高的负载情况下，
  当收集器已经落后而试图发送额外的日志消息的时候，封锁服务器进程。
  与此相反，<application>syslog</>更喜欢忽略消息，
  如果它无法写入，这意味着它可能无法记录这些消息，这种情况下，
  但它不会阻止该系统的其余部分。
</para>
       </note>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-directory" xreflabel="log_directory">
      <term><varname>log_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_directory</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When <varname>logging_collector</> is enabled,
        this parameter determines the directory in which log files will be created.
        It can be specified as an absolute path, or relative to the
        cluster data directory.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        The default is <literal>pg_log</literal>.
       </para>
-->
<para>
     在打开了<varname>logging_collector</>的时候，这个选项判断日志文件在哪个目录里创建。
 它可以声明成绝对路径，或者是与集群的数据目录相对的路径。
 这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行设置。
 缺省是<literal>pg_log</literal>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-filename" xreflabel="log_filename">
      <term><varname>log_filename</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_filename</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When <varname>logging_collector</varname> is enabled,
        this parameter sets the file names of the created log files.  The value
        is treated as a <function>strftime</function> pattern,
        so <literal>%</literal>-escapes can be used to specify time-varying
        file names.  (Note that if there are
        any time-zone-dependent <literal>%</literal>-escapes, the computation
        is done in the zone specified
        by <xref linkend="guc-log-timezone">.)
        The supported <literal>%</literal>-escapes are similar to those
        listed in the Open Group's <ulink
        url="http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime
        </ulink> specification.
        Note that the system's <systemitem>strftime</systemitem> is not used
        directly, so platform-specific (nonstandard) extensions do not work.
        The default is <literal>postgresql-%Y-%m-%d_%H%M%S.log</literal>.
       </para>
-->
<para>
       在打开了<varname>logging_collector</varname>的时候，这个选项设置所创建的日志文件的文件名。
   这个数值将被当作<function>strftime</function>模式看待。因此可以用<literal>%</literal>转义声明随时间而变的文件名。
   （注意，如果有任何时区相关<literal>%</literal>转义，由<xref linkend="guc-log-timezone">声明的时区进行计算。） 
   支持的<literal>%</literal>转义类似于Open Group上的<ulink url="http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime</ulink>规范列表中的。 
   注意，不直接使用这个系统的<systemitem>strftime</systemitem>，所以特定平台的（非标准）扩展不起作用。   
缺省是<literal>postgresql-%Y-%m-%d_%H%M%S.log</literal>。
   </para>
       <!--
<para>
        If you specify a file name without escapes, you should plan to
        use a log rotation utility to avoid eventually filling the
        entire disk.  In releases prior to 8.4, if
        no <literal>%</literal> escapes were
        present, <productname>PostgreSQL</productname> would append
        the epoch of the new log file's creation time, but this is no
        longer the case.
       </para>
-->
<para>
     如果您没有转义指定文件名，你应该计划使用日志旋转程序以避免最终填充 
 整个磁盘。在8.4之前的版本中，如果没有<literal>%</literal>的转义符出现，
 <productname>PostgreSQL</productname>将追加新日志文件创建时间的时间戳，
 但是不再是这种情况了。
</para>
       <!--
<para>
        If CSV-format output is enabled in <varname>log_destination</>,
        <literal>.csv</> will be appended to the timestamped
        log file name to create the file name for CSV-format output.
        (If <varname>log_filename</> ends in <literal>.log</>, the suffix is
        replaced instead.)
        In the case of the example above, the CSV
        file name will be <literal>server_log.1093827753.csv</literal>.
       </para>
-->
<para>
    如果启用<varname>log_destination</>中的CSV格式输出，
<literal>.csv</>将追加时间戳日志文件名来创建CSV格式输出的文件名。 
（如果<varname>log_filename</>以<literal>.log</>为结束，后缀代替）。
在上面的例子情况下，CSV文件名是<literal>server_log.1093827753.csv</literal>。
</para>
       <!--
<para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
      这个参数只能在<filename>postgresql.conf</>文件里或者服务器命令行上设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-file-mode" xreflabel="log_file_mode">
      <term><varname>log_file_mode</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_file_mode</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        On Unix systems this parameter sets the permissions for log files
        when <varname>logging_collector</varname> is enabled. (On Microsoft
        Windows this parameter is ignored.)
        The parameter value is expected to be a numeric mode
        specified in the format accepted by the
        <function>chmod</function> and <function>umask</function>
        system calls.  (To use the customary octal format the number
        must start with a <literal>0</literal> (zero).)
       </para>
-->
<para>
     在Unix系统上，当<varname>logging_collector</varname>已启用时（在Microsoft Windows上将忽略此参数），
 此参数用于设置日志文件的权限。   
 该参数值预期为通过<function>chmod</function>和<function>umask</function>
 系统调用接受的格式指定的数字模式。 
（为了使用习惯八进制格式的数字必须以<literal>0</literal>(zero)开始）。
</para>
       <!--
<para>
        The default permissions are <literal>0600</>, meaning only the
        server owner can read or write the log files.  The other commonly
        useful setting is <literal>0640</>, allowing members of the owner's
        group to read the files.  Note however that to make use of such a
        setting, you'll need to alter <xref linkend="guc-log-directory"> to
        store the files somewhere outside the cluster data directory.  In
        any case, it's unwise to make the log files world-readable, since
        they might contain sensitive data.
       </para>
-->
<para>
       默认的权限<literal>0600</>，只意味着 
   服务器拥有者可以读取或写入日志文件。其他较普遍 
   有用的设置是<literal>0640</>，让拥有者组成员来读取文件。
   但是请注意，为了充分使用这种设置，你需要改变<xref linkend="guc-log-directory">到集群数据目录之外的 
   某处存储这些文件。无论如何，使日志文件全局可读是不明智的，因为它们可能包含敏感数据。
</para>
       <!--
<para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
      这个参数可以在<filename>postgresql.conf</>文件或者服务器命令行上设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
      <term><varname>log_rotation_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_rotation_age</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When <varname>logging_collector</varname> is enabled,
        this parameter determines the maximum lifetime of an individual log file.
        After this many minutes have elapsed, a new log file will
        be created.  Set to zero to disable time-based creation of
        new log files.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
      在打开了<varname>logging_collector</varname>的时候，这个选项设置一个独立日志文件的最大生存期。
  在数值指定的分钟过去之后，将创建一个新的日志文件。设置为零可以关闭以时间为基础的新日志文件的创建。
  这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
      <term><varname>log_rotation_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_rotation_size</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When <varname>logging_collector</varname> is enabled,
        this parameter determines the maximum size of an individual log file.
        After this many kilobytes have been emitted into a log file,
        a new log file will be created.  Set to zero to disable size-based
        creation of new log files.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
     在打开了<varname>logging_collector</varname>的时候，这个选项设置一个独立的日志文件的最大尺寸。
 在数值指定的千字节写入日志文件之后，将会创建一个新的日志文件。
 设置为零可以关闭以尺寸为基础的新日志文件的创建。
 这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行上设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
      <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_truncate_on_rotation</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When <varname>logging_collector</varname> is enabled,
        this parameter will cause <productname>PostgreSQL</productname> to truncate (overwrite),
        rather than append to, any existing log file of the same name.
        However, truncation will occur only when a new file is being opened
        due to time-based rotation, not during server startup or size-based
        rotation.  When off, pre-existing files will be appended to in
        all cases.  For example, using this setting in combination with
        a <varname>log_filename</varname> like <literal>postgresql-%H.log</literal>
        would result in generating twenty-four hourly log files and then
        cyclically overwriting them.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
     在打开了<varname>logging_collector</varname>的时候，这个选项将导致<productname>PostgreSQL</productname>
 覆盖而不是附加到任何同名的现有日志文件上。
 不过，覆盖只是发生在基于时间滚动而创建的新文件上，而不是在服务器启动的时候或者以尺寸为基础的滚动上。
 如果为 off ，将始终向已存在的文件结尾追加。比如，
 使用这个选项和类似<literal>postgresql-%H.log</literal>这样的<varname>log_filename</varname>设置将导致生成 
 24个按小时生成的日志文件然后在这些文件上循环。
 这个选项只能在<filename>postgresql.conf</>文件里或者在服务器启动的时候设置。
</para>
       <!--
<para>
        Example:  To keep 7 days of logs, one log file per day named
        <literal>server_log.Mon</literal>, <literal>server_log.Tue</literal>,
        etc, and automatically overwrite last week's log with this week's log,
        set <varname>log_filename</varname> to <literal>server_log.%a</literal>,
        <varname>log_truncate_on_rotation</varname> to <literal>on</literal>, and
        <varname>log_rotation_age</varname> to <literal>1440</literal>.
       </para>
-->
<para>
       例子：保留 7 天的日志，每天一个日志文件，叫做<literal>server_log.Mon</literal>, <literal>server_log.Tue</literal>等等，
   并且上周的日志会自动被这周的日志覆盖。把<varname>log_filename</varname>设置为<literal>server_log.%a</literal>,
        把<varname>log_truncate_on_rotation</varname>设置为<literal>on</literal>，并且把
        <varname>log_rotation_age</varname>设置为<literal>1440</literal>。
</para>
       <!--
<para>
        Example: To keep 24 hours of logs, one log file per hour, but
        also rotate sooner if the log file size exceeds 1GB, set
        <varname>log_filename</varname> to <literal>server_log.%H%M</literal>,
        <varname>log_truncate_on_rotation</varname> to <literal>on</literal>,
        <varname>log_rotation_age</varname> to <literal>60</literal>, and
        <varname>log_rotation_size</varname> to <literal>1000000</literal>.
        Including <literal>%M</> in <varname>log_filename</varname> allows
        any size-driven rotations that might occur to select a file name
        different from the hour's initial file name.
       </para>
-->
<para>
      例子：保留 24 小时的日志，每小时一个日志，但是如果日志文件尺寸大于 1GB 也旋转日志。
  把<varname>log_filename</varname>设置为<literal>server_log.%H%M</literal>,
        <varname>log_truncate_on_rotation</varname>设置为<literal>on</literal>,
        <varname>log_rotation_age</varname>设置为<literal>60</literal>并且把
        <varname>log_rotation_size</varname>设置为<literal>1000000</literal>。
  在<varname>log_filename</varname>里包含<literal>%M</>
  允许任何尺寸驱动的旋转选取一个和开始的文件名同小时数但是名字不同的文件。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
      <term><varname>syslog_facility</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>syslog_facility</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When logging to <application>syslog</> is enabled, this parameter
        determines the <application>syslog</application>
        <quote>facility</quote> to be used.  You can choose
        from <literal>LOCAL0</>, <literal>LOCAL1</>,
        <literal>LOCAL2</>, <literal>LOCAL3</>, <literal>LOCAL4</>,
        <literal>LOCAL5</>, <literal>LOCAL6</>, <literal>LOCAL7</>;
        the default is <literal>LOCAL0</>. See also the
        documentation of your system's
        <application>syslog</application> daemon.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
    如果向<application>syslog</>进行记录，那么这个选项判断要使用的<application>syslog</application><quote>设施</quote>。
你可以从<literal>LOCAL0</>, <literal>LOCAL1</>,
        <literal>LOCAL2</>, <literal>LOCAL3</>, <literal>LOCAL4</>,
        <literal>LOCAL5</>, <literal>LOCAL6</>, <literal>LOCAL7</>中选择。缺省是<literal>LOCAL0</>。
又见你的系统的<application>syslog</application>守护进程文档。
这个选项只能在<filename>postgresql.conf</>文件里或者服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
      <term><varname>syslog_ident</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>syslog_ident</> configuration parameter</primary>
      </indexterm>
      </term>
       <listitem>
        <!--
<para>
         When logging to <application>syslog</> is enabled, this parameter
         determines the program name used to identify
         <productname>PostgreSQL</productname> messages in
         <application>syslog</application> logs. The default is
         <literal>postgres</literal>.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
        </para>
-->
<para>
      如果向<application>syslog</>进行记录，这个选项决定用于在<application>syslog</application>日志中标识<productname>PostgreSQL</productname>的程序名。
  缺省是<literal>postgres</literal>。这个选项只能在<filename>postgresql.conf</>文件里或者服务器启动的时候设置。
</para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-event-source" xreflabel="event_source">
      <term><varname>event_source</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>event_source</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When logging to <application>event log</> is enabled, this parameter
        determines the program name used to identify
        <productname>PostgreSQL</productname> messages in
        the log. The default is <literal>PostgreSQL</literal>.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
     当启用记录<application>event log</>时，此参数 
 确定用于识别<productname>PostgreSQL</productname>消息日志的程序名称。
 缺省是<literal>PostgreSQL</literal>。
 该参数只能在<filename>postgresql.conf</>文件或者服务器命令行上设置。
</para>
      </listitem>
     </varlistentry>

      </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-when">
 <!--
     <title>When To Log</title>
 -->
 <title>什么时候记录日志</title>

     <variablelist>

     <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
      <term><varname>client_min_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>client_min_messages</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls which message levels are sent to the client.
        Valid values are <literal>DEBUG5</>,
        <literal>DEBUG4</>, <literal>DEBUG3</>, <literal>DEBUG2</>,
        <literal>DEBUG1</>, <literal>LOG</>, <literal>NOTICE</>,
        <literal>WARNING</>, <literal>ERROR</>, <literal>FATAL</>,
        and <literal>PANIC</>.  Each level
        includes all the levels that follow it.  The later the level,
        the fewer messages are sent.  The default is
        <literal>NOTICE</>.  Note that <literal>LOG</> has a different
        rank here than in <varname>log_min_messages</>.
       </para>
-->
<para>
       这个选项控制哪些级别的消息发送到客户端。
   有效的数值是<literal>DEBUG5</>,
        <literal>DEBUG4</>, <literal>DEBUG3</>, <literal>DEBUG2</>,
        <literal>DEBUG1</>, <literal>LOG</>, <literal>NOTICE</>,
        <literal>WARNING</>, <literal>ERROR</>, <literal>FATAL</>,
        和<literal>PANIC</>。
   每个级别包含所有它后面的级别，级别越靠后，发送的消息越少。缺省是<literal>NOTICE</>。
   需要注意的是这里的<literal>LOG</>和<varname>log_min_messages</>里的级别不同。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
      <term><varname>log_min_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_min_messages</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls which message levels are written to the server log.
        Valid values are <literal>DEBUG5</>, <literal>DEBUG4</>,
        <literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>,
        <literal>INFO</>, <literal>NOTICE</>, <literal>WARNING</>,
        <literal>ERROR</>, <literal>LOG</>, <literal>FATAL</>, and
        <literal>PANIC</>.  Each level includes all the levels that
        follow it.  The later the level, the fewer messages are sent
        to the log.  The default is <literal>WARNING</>.  Note that
        <literal>LOG</> has a different rank here than in
        <varname>client_min_messages</>.
        Only superusers can change this setting.
       </para>
-->
<para>
     控制写到服务器日志里的消息的详细程度。
 有效值是<literal>DEBUG5</>, <literal>DEBUG4</>,
        <literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>,
        <literal>INFO</>, <literal>NOTICE</>, <literal>WARNING</>,
        <literal>ERROR</>, <literal>LOG</>, <literal>FATAL</>和
        <literal>PANIC</>。
 每个级别都包含它后面的级别。越靠后的数值发往服务器日志的消息越少。缺省是<literal>WARNING</>。
 需要注意的是这里的<literal>LOG</>和<varname>client_min_messages</>里的级别不同。只有超级用户可以修改这个设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
      <term><varname>log_min_error_statement</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_min_error_statement</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls which SQL statements that cause an error
        condition are recorded in the server log.  The current
        SQL statement is included in the log entry for any message of
        the specified severity or higher.
        Valid values are <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>,
        <literal>LOG</literal>,
        <literal>FATAL</literal>, and <literal>PANIC</literal>.
        The default is <literal>ERROR</literal>, which means statements
        causing errors, log messages, fatal errors, or panics will be logged.
        To effectively turn off logging of failing statements,
        set this parameter to <literal>PANIC</literal>.
        Only superusers can change this setting.
       </para>
-->
<para>
    控制在服务器日志里输出哪一条导致错误条件的SQL语句。
所有导致一个特定级别(或者更高级别)错误的 SQL 语句都要被记录。
有效的值有<literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>,
        <literal>LOG</literal>,
        <literal>FATAL</literal>和<literal>PANIC</literal>。
缺省是<literal>ERROR</literal>，
表示所有导致错误、日志信息，致命错误、恐慌的SQL语句都将被记录。
设置为<literal>PANIC</literal>表示把这个特性关闭。只有超级用户可以改变这个设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
      <term><varname>log_min_duration_statement</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_min_duration_statement</> configuration parameter</primary>
      </indexterm>
      </term>
       <listitem>
        <!--
<para>
         Causes the duration of each completed statement to be logged
         if the statement ran for at least the specified number of
         milliseconds.  Setting this to zero prints all statement durations.
         Minus-one (the default) disables logging statement durations.
         For example, if you set it to <literal>250ms</literal>
         then all SQL statements that run 250ms or longer will be
         logged.  Enabling this parameter can be helpful in tracking down
         unoptimized queries in your applications.
         Only superusers can change this setting.
        </para>
-->
<para>
      如果某个语句的持续时间大于或者等于这个毫秒数，那么在日志行上记录该语句及其持续时间。
  设置为零将打印所有查询和他们的持续时间。设置为-1(缺省值)关闭这个功能。比如，
  如果你把它设置为<literal>250ms</literal>，那么所有运行时间等于或者超过 250ms 的 SQL 语句都会被记录。
  打开这个选项可以很方便地跟踪需要优化的查询。只有超级用户可以改变这个设置。
</para>

        <!--
<para>
         For clients using extended query protocol, durations of the Parse,
         Bind, and Execute steps are logged independently.
        </para>
-->
<para>
    对于使用扩展查询协议的客户端，语法分析、邦定、执行每一步所花时间都分别记录。
</para>

       <note>
        <!--
<para>
         When using this option together with
         <xref linkend="guc-log-statement">,
         the text of statements that are logged because of
         <varname>log_statement</> will not be repeated in the
         duration log message.
         If you are not using <application>syslog</>, it is recommended
         that you log the PID or session ID using
         <xref linkend="guc-log-line-prefix">
         so that you can link the statement message to the later
         duration message using the process ID or session ID.
        </para>
-->
<para>
     当此选项与<xref linkend="guc-log-statement">同时使用时，
 已经被<varname>log_statement</>记录的语句文本不会被重复记录。
 如果没有使用<application>syslog</>的话，推荐使用<xref linkend="guc-log-line-prefix">记录
 PID 或会话ID，
 这样就可以使用它们将语句消息连接耗时消息。
</para>
       </note>
       </listitem>
      </varlistentry>

     </variablelist>

    <!--
<para>
     <xref linkend="runtime-config-severity-levels"> explains the message
     severity levels used by <productname>PostgreSQL</>.  If logging output
     is sent to <systemitem>syslog</systemitem> or Windows'
     <systemitem>eventlog</systemitem>, the severity levels are translated
     as shown in the table.
    </para>
-->
<para>
   <xref linkend="runtime-config-severity-levels">解释了<productname>PostgreSQL</>使用的
   消息严重程度。如果日志输出发送到<systemitem>syslog</systemitem>或者Windows的
     <systemitem>eventlog</systemitem>，则严重程度如下表所示。
</para>

    <table id="runtime-config-severity-levels">
<!--
     <title>Message Severity Levels</title>
 -->
 <title>消息严重级别</title>
     <tgroup cols="4">
      <thead>
       <row>
    <!--
        <entry>Severity</entry>
        <entry>Usage</entry>
-->
<entry>严重级别</entry>
        <entry>用法</entry>
        <entry><systemitem>syslog</></entry>
        <entry><systemitem>eventlog</></entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><literal>DEBUG1..DEBUG5</></entry>
<!--
        <entry>Provides successively-more-detailed information for use by
         developers.</entry>
 -->
 <entry>提供开发人员使用的连续更多详细信息</entry>
        <entry><literal>DEBUG</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>

       <row>
        <entry><literal>INFO</></entry>
<!--
        <entry>Provides information implicitly requested by the user,
         e.g., output from <command>VACUUM VERBOSE</>.</entry>
 -->
 <entry>提供用户隐含要求的信息，比如在<command>VACUUM VERBOSE</>过程输出的信息。</entry>
        <entry><literal>INFO</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>

       <row>
        <entry><literal>NOTICE</></entry>
<!--
        <entry>Provides information that might be helpful to users, e.g.,
         notice of truncation of long identifiers.</entry>
 -->
 <entry>提供可能对用户有帮助的信息，比如，长标识符的截断</entry>
        <entry><literal>NOTICE</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>

       <row>
        <entry><literal>WARNING</></entry>
<!--
        <entry>Provides warnings of likely problems, e.g., <command>COMMIT</>
         outside a transaction block.</entry>
 -->
 <entry>提供可能问题的警告，比如在事务块范围之外的<command>COMMIT</></entry>
        <entry><literal>NOTICE</></entry>
        <entry><literal>WARNING</></entry>
       </row>

       <row>
        <entry><literal>ERROR</></entry>
<!--
        <entry>Reports an error that caused the current command to
         abort.</entry>
 -->
 <entry>报告导致当前命令退出的错误。</entry>
        <entry><literal>WARNING</></entry>
        <entry><literal>ERROR</></entry>
       </row>

       <row>
        <entry><literal>LOG</></entry>
<!--
        <entry>Reports information of interest to administrators, e.g.,
         checkpoint activity.</entry>
 -->
 <entry>报告一些管理员感兴趣的信息，比如，检查点活跃性。</entry>
        <entry><literal>INFO</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>

       <row>
        <entry><literal>FATAL</></entry>
<!--
        <entry>Reports an error that caused the current session to
         abort.</entry>
 -->
 <entry>报告导致当前会话终止的错误。</entry>
        <entry><literal>ERR</></entry>
        <entry><literal>ERROR</></entry>
       </row>

       <row>
        <entry><literal>PANIC</></entry>
    <!--
        <entry>Reports an error that caused all database sessions to abort.</entry>
-->
<entry>报告导致所有数据库会话退出的错误。</entry>
        <entry><literal>CRIT</></entry>
        <entry><literal>ERROR</></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    </sect2>
     <sect2 id="runtime-config-logging-what">
 <!--
     <title>What To Log</title>
 -->
 <title>记录什么</title>

     <variablelist>

     <varlistentry id="guc-application-name" xreflabel="application_name">
      <term><varname>application_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>application_name</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        The <varname>application_name</varname> can be any string of less than
        <symbol>NAMEDATALEN</> characters (64 characters in a standard build).
        It is typically set by an application upon connection to the server.
        The name will be displayed in the <structname>pg_stat_activity</> view
        and included in CSV log entries.  It can also be included in regular
        log entries via the <xref linkend="guc-log-line-prefix"> parameter.
        Only printable ASCII characters may be used in the
        <varname>application_name</varname> value. Other characters will be
        replaced with question marks (<literal>?</literal>).
       </para>
-->
<para>
     该<varname>application_name</varname>可以是小于<symbol>NAMEDATALEN</>字符
 （标准构建64个字符）的任何字符串。它通常是由应用程序连接到服务器设置。 
 该名称将显示在<structname>pg_stat_activity</>视图中 
 并包含在CSV格式的日志项中。它也可以被包括在
 通过<xref linkend="guc-log-line-prefix">参数的常规日志项中。 
 只有可打印的ASCII字符可能用在<varname>application_name</varname>值中。其它字符会 
 用问号(<literal>?</literal>)代替。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>debug_print_parse</varname> (<type>boolean</type>)


      <indexterm>
       <primary><varname>debug_print_parse</> configuration parameter</primary>
      </indexterm>
      </term>
      <term><varname>debug_print_rewritten</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_rewritten</> configuration parameter</primary>
      </indexterm>
      </term>
      <term><varname>debug_print_plan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_plan</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        These parameters enable various debugging output to be emitted.
        When set, they print the resulting parse tree, the query rewriter
        output, or the execution plan for each executed query.
        These messages are emitted at <literal>LOG</> message level, so by
        default they will appear in the server log but will not be sent to the
        client.  You can change that by adjusting
        <xref linkend="guc-client-min-messages"> and/or
        <xref linkend="guc-log-min-messages">.
        These parameters are off by default.
       </para>
-->
<para>
     这些选项打开各种调试输出。当设置，它们打印生成的解析树，查询重写输出，
 或每个执行查询的执行计划。 这些消息在<literal>LOG</>消息级别发出的，
 所以默认情况下它们会出现在服务器日志中，但不会被发送到客户端。
 您可以通过调整<xref linkend="guc-client-min-messages">和/或
     <xref linkend="guc-log-min-messages">改变。这些参数缺省都是关闭的。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>debug_pretty_print</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_pretty_print</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When set, <varname>debug_pretty_print</varname> indents the messages
        produced by <varname>debug_print_parse</varname>,
        <varname>debug_print_rewritten</varname>, or
        <varname>debug_print_plan</varname>.  This results in more readable
        but much longer output than the <quote>compact</> format used when
        it is off.  It is on by default.
       </para>
-->
<para>
     当设置时，<varname>debug_pretty_print</varname>缩进<varname>debug_print_parse</varname>,
     <varname>debug_print_rewritten</varname>或者<varname>debug_print_plan</varname>产生的消息，
 这样更加可读，但是，当关闭它时，比<quote>紧凑型</>格式更长的输出，缺省是打开的。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-checkpoints" xreflabel="log_checkpoints">
      <term><varname>log_checkpoints</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_checkpoints</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Causes checkpoints and restartpoints to be logged in the server log.
        Some statistics are included in the log messages, including the number
        of buffers written and the time spent writing them.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line. The default is off.
       </para>
-->
<para>
       导致检查点和重启点被记录在服务器日志中。
   一些统计都包含在日志消息中，包括缓冲区写入数量和编写它们的花费的时间。
   这些参数只能在<filename>postgresql.conf</>文件或者服务器命令行上设置，缺省是off。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-connections" xreflabel="log_connections">
      <term><varname>log_connections</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_connections</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Causes each attempted connection to the server to be logged,
        as well as successful completion of client authentication.
        This parameter cannot be changed after session start.
        The default is off.
       </para>
-->
<para>
       导致记录到服务器的每个尝试连接，以及成功完成客户端认证。
   该参数在会话开始之后不能改变，缺省是off。
</para>

       <note>
        <!--
<para>
         Some client programs, like <application>psql</>, attempt
         to connect twice while determining if a password is required, so
         duplicate <quote>connection received</> messages do not
         necessarily indicate a problem.
        </para>
-->
<para>
      某些客户端程序，如<application>psql</>当确定是否需要密码的时候，
  企图连接两次。所以复制<quote>连接收到</>的消息不一定表示有问题。
</para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
      <term><varname>log_disconnections</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_disconnections</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This outputs a line in the server log similar to
        <varname>log_connections</varname> but at session termination,
        and includes the duration of the session.  This is off by
        default.
        This parameter cannot be changed after session start.
       </para>
-->
<para>
      这个选项类似<varname>log_connections</varname>，但是在会话结束的时候在服务器日志里输出一行。
  并且包含会话持续时间。
  缺省是关闭的。这个参数在会话开始之后不能被改变。
</para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-log-duration" xreflabel="log_duration">
      <term><varname>log_duration</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_duration</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Causes the duration of every completed statement to be logged.
        The default is <literal>off</>.
        Only superusers can change this setting.
       </para>
-->
<para>
       记录每个已完成语句的持续时间。默认值是<literal>off</>。只有超级用户可以改变这个设置。
</para>

       <!--
<para>
        For clients using extended query protocol, durations of the Parse,
        Bind, and Execute steps are logged independently.
       </para>
-->
<para>
      对于使用扩展查询协议的客户端，语法分析、邦定、执行每一步所花时间都分别记录。
</para>

       <note>
        <!--
<para>
         The difference between setting this option and setting
         <xref linkend="guc-log-min-duration-statement"> to zero is that
         exceeding <varname>log_min_duration_statement</> forces the text of
         the query to be logged, but this option doesn't.  Thus, if
         <varname>log_duration</> is <literal>on</> and
         <varname>log_min_duration_statement</> has a positive value, all
         durations are logged but the query text is included only for
         statements exceeding the threshold.  This behavior can be useful for
         gathering statistics in high-load installations.
        </para>
-->
<para>
     设置为0时该选项与<xref linkend="guc-log-min-duration-statement">
 的不同之处在于<varname>log_min_duration_statement</>
 强制记录查询文本。但是这个选项不可以。因此，如果<varname>log_duration</>为<literal>on</>并且<varname>log_min_duration_statement</>
 大于零将记录所有持续时间，但是仅记录那些超过阈值的语句。
 这可以用于在高负载情况下搜集统计信息。
</para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
      <term><varname>log_error_verbosity</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_error_verbosity</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls the amount of detail written in the server log for each
        message that is logged.  Valid values are <literal>TERSE</>,
        <literal>DEFAULT</>, and <literal>VERBOSE</>, each adding more
        fields to displayed messages.  <literal>TERSE</> excludes
        the logging of <literal>DETAIL</>, <literal>HINT</>,
        <literal>QUERY</>, and <literal>CONTEXT</> error information.
        <literal>VERBOSE</> output includes the <symbol>SQLSTATE</> error
        code (see also <xref linkend="errcodes-appendix">) and the source code file name, function name,
        and line number that generated the error.
        Only superusers can change this setting.
       </para>
-->
<para>
    控制记录的每条消息写到服务器日志里的详细程度。
有效的值是<literal>TERSE</>,<literal>DEFAULT</>和<literal>VERBOSE</>，
逐个向显示的消息里增加更多的字段。<literal>TERSE</>包含
    <literal>DETAIL</>的记录, <literal>HINT</>,<literal>QUERY</>和<literal>CONTEXT</>错误消息。
    <literal>VERBOSE</>输出包含<symbol>SQLSTATE</>错误代码
(参见<xref linkend="errcodes-appendix">)以及源代码文件名称，函数名称，以及产生错误的行数。
只有超级用户可以改变这个设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
      <term><varname>log_hostname</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_hostname</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        By default, connection log messages only show the IP address of the
        connecting host. Turning this parameter on causes logging of the
        host name as well.  Note that depending on your host name resolution
        setup this might impose a non-negligible performance penalty.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
     缺省时，连接日志只记录所连接主机的IP地址。打开这个选项导致同时记录主机名。
 请注意，这样有可能带来一些不可忽略的性能损失(取决于你的名字解析的设置)。
 这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
      <term><varname>log_line_prefix</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_line_prefix</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
      
<para>
        <!--
         This is a <function>printf</>-style string that is output at the
         beginning of each log line.
         <literal>%</> characters begin <quote>escape sequences</>
         that are replaced with status information as outlined below.
         Unrecognized escapes are ignored. Other
         characters are copied straight to the log line. Some escapes are
         only recognized by session processes, and will be treated as empty by
         background processes such as the main server process. Status
         information may be aligned either left or right by specifying a
         numeric literal after the % and before the option. A negative
         value will cause the status information to be padded on the
         right with spaces to give it a minimum width, whereas a positive
         value will pad on the left. Padding can be useful to aid human
         readability in log files.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line. The default is an empty string.
         -->
 这是一个<function>printf</>风格的字符串，在日志的每行开头输出。 
 <literal>%</>字符开始<quote>转义序列</>被如下所述状态信息替换。 
 无法识别的转义被忽略。其它字符都直接拷贝到日志行中。
 有些转义只被会话进程识别，被后端进程看做空，比如主服务器进程。
通过在%之后该选项之前声明有一个数字文字，状态信息可以左对齐或者右对齐。
负值将会使得该状态信息在右侧补齐空白到最小宽度，
正直将在左侧补齐空白。补齐可以有助于帮助人们读取日志文件。
 这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行设置。 
 缺省是空字符串。
 
         <informaltable>
          <tgroup cols="3">
           <thead>
            <row>
<!--
             <entry>Escape</entry>
             <entry>Effect</entry>
             <entry>Session only</entry>
 -->
 <entry>转义</entry>
             <entry>影响</entry>
             <entry>仅用于会话</entry>
             </row>
            </thead>
           <tbody>
            <row>
             <entry><literal>%a</literal></entry>
             <!-- 
             <entry>Application name</entry>
             <entry>yes</entry>
             -->
             <entry>应用名</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%u</literal></entry>
             <!-- 
             <entry>User name</entry>
             <entry>yes</entry>
             -->
             <entry>用户名</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%d</literal></entry>
             <!-- 
             <entry>Database name</entry>
             <entry>yes</entry>
             -->
             <entry>数据库名</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%r</literal></entry>
             <!-- 
             <entry>Remote host name or IP address, and remote port</entry>
             <entry>yes</entry>
             -->
             <entry>远程主机名或IP地址和远程端口</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%h</literal></entry>
             <!-- 
             <entry>Remote host name or IP address</entry>
             <entry>yes</entry>
             -->
             <entry>远程主机名或IP地址</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%p</literal></entry>
             <!-- 
             <entry>Process ID</entry>
             <entry>no</entry>
             -->
             <entry>进程 ID</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%t</literal></entry>
             <!-- 
             <entry>Time stamp without milliseconds</entry>
             <entry>no</entry>
             -->
             <entry>没有毫秒的时间戳</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%m</literal></entry>
             <!-- 
             <entry>Time stamp with milliseconds</entry>
             <entry>no</entry>
             -->
             <entry>有毫秒的时间戳</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%i</literal></entry>
             <!-- 
             <entry>Command tag: type of session's current command</entry>
             <entry>yes</entry>
             -->
             <entry>命令标签：会话的当前命令的类型</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%e</literal></entry>
             <!-- 
             <entry>SQLSTATE error code</entry>
             <entry>no</entry>
             -->
             <entry>SQLSTATE 错误代码</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%c</literal></entry>
             <!-- 
             <entry>Session ID: see below</entry>
             <entry>no</entry>
             -->
             <entry>会话 ID：见下文</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%l</literal></entry>
             <!-- 
             <entry>Number of the log line for each session or process, starting at 1</entry>
             <entry>no</entry>
             -->
             <entry>每个会话或进程的日志行数，从1开始</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%s</literal></entry>
             <!-- 
             <entry>Process start time stamp</entry>
             <entry>no</entry>
             -->
             <entry>进程开始的时间戳</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%v</literal></entry>
             <!-- 
             <entry>Virtual transaction ID (backendID/localXID)</entry>
             <entry>no</entry>
             -->
             <entry>虚拟事务 ID (backendID/localXID)</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%x</literal></entry>
             <!-- 
             <entry>Transaction ID (0 if none is assigned)</entry>
             <entry>no</entry>
             -->
             <entry>事务 ID (如果没有分配则为0)</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%q</literal></entry>
             <!-- 
             <entry>Produces no output, but tells non-session
             processes to stop at this point in the string; ignored by
             session processes</entry>
             <entry>no</entry>
             -->
             <entry>不产生输出，但是告诉非会话的进程在字符串的这个点停止；
             被会话进程忽略</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%%</literal></entry>
             <!-- 
             <entry>Literal <literal>%</></entry>
             <entry>no</entry>
             -->
             <entry>文字 <literal>%</></entry>
             <entry>否</entry>
            </row>
           </tbody>
          </tgroup>
         </informaltable>
         <!--
         The <literal>%c</> escape prints a quasi-unique session identifier,
         consisting of two 4-byte hexadecimal numbers (without leading zeros)
         separated by a dot.  The numbers are the process start time and the
         process ID, so <literal>%c</> can also be used as a space saving way
         of printing those items.  For example, to generate the session
         identifier from <literal>pg_stat_activity</>, use this query:
 -->
 <literal>%c</>转义打印唯一会话标识符， 
 由两个点号分隔的4字节的十六进制数字（没有前导零）组成。
 数字是该过程的开始时间和进程ID，
 所以<literal>%c</>也可以用做一种打印这些项目的节约空间的方法。
 例如，为了从<literal>pg_stat_activity</>中生成会话标识符，使用这个查询：
<programlisting>
SELECT to_hex(EXTRACT(EPOCH FROM backend_start)::integer) || '.' ||
       to_hex(pid)
FROM pg_stat_activity;
</programlisting>

       </para>


       <tip>
        <!--
<para>
         If you set a nonempty value for <varname>log_line_prefix</>,
         you should usually make its last character be a space, to provide
         visual separation from the rest of the log line.  A punctuation
         character can be used too.
        </para>
-->
<para>
      如果你设置<varname>log_line_prefix</>的非空值，你应该经常使其最后一个字符是一个空格，
  提供来自日志行的其余部分的视觉分离。一个标点符号也可以使用。
</para>
       </tip>

       <tip>
        <!--
<para>
         <application>Syslog</> produces its own
         time stamp and process ID information, so you probably do not want to
         include those escapes if you are logging to <application>syslog</>.
        </para>
-->
<para>
      <application>Syslog</>产生自身时间戳和进程ID信息，如果你记录到<application>syslog</>，
  所以你可能不想包括那些逃脱。
</para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-lock-waits" xreflabel="log_lock_waits">
      <term><varname>log_lock_waits</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_lock_waits</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls whether a log message is produced when a session waits
        longer than <xref linkend="guc-deadlock-timeout"> to acquire a
        lock.  This is useful in determining if lock waits are causing
        poor performance.  The default is <literal>off</>.
       </para>
-->
<para>
     当会话等待比<xref linkend="guc-deadlock-timeout">获得锁更长的时间时，控制是否产生一个日志消息。
 决定如果锁等待造成很差的性能，这是很有用处的。默认是<literal>off</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement" xreflabel="log_statement">
      <term><varname>log_statement</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_statement</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls which SQL statements are logged. Valid values are
        <literal>none</> (off), <literal>ddl</>, <literal>mod</>, and
        <literal>all</> (all statements). <literal>ddl</> logs all data definition
        statements, such as <command>CREATE</>, <command>ALTER</>, and
        <command>DROP</> statements. <literal>mod</> logs all
        <literal>ddl</> statements, plus data-modifying statements
        such as <command>INSERT</>,
        <command>UPDATE</>, <command>DELETE</>, <command>TRUNCATE</>,
        and <command>COPY FROM</>.
        <command>PREPARE</>, <command>EXECUTE</>, and
        <command>EXPLAIN ANALYZE</> statements are also logged if their
        contained command is of an appropriate type.  For clients using
        extended query protocol, logging occurs when an Execute message
        is received, and values of the Bind parameters are included
        (with any embedded single-quote marks doubled).
       </para>
-->
<para>
    控制记录哪些SQL语句。有效的值是<literal>none</> (off), <literal>ddl</>, <literal>mod</>和
    <literal>all</> (所有语句)。<literal>ddl</>记录所有数据定义命令，比如<command>CREATE</>, 
<command>ALTER</>和<command>DROP</>语句。
<literal>mod</>记录所有<literal>ddl</>语句，
加上数据修改语句<command>INSERT</>,<command>UPDATE</>, <command>DELETE</>, <command>TRUNCATE</>,
    和<command>COPY FROM</>。如果所包含的命令类型吻合，那么<command>PREPARE</>, <command>EXECUTE</>和
     <command>EXPLAIN ANALYZE</>语句也同样被记录。
对于使用扩展查询协议的客户端，记录发生在接受到扩展信息并包含邦定参数(内置单引号要双写)的时候。
</para>

       <!--
<para>
        The default is <literal>none</>. Only superusers can change this
        setting.
       </para>
-->
<para>
    缺省是<literal>none</>。只有超级用户可以改变这个设置。
</para>

       <note>
        <!--
<para>
         Statements that contain simple syntax errors are not logged
         even by the <varname>log_statement</> = <literal>all</> setting,
         because the log message is emitted only after basic parsing has
         been done to determine the statement type.  In the case of extended
         query protocol, this setting likewise does not log statements that
         fail before the Execute phase (i.e., during parse analysis or
         planning).  Set <varname>log_min_error_statement</> to
         <literal>ERROR</> (or lower) to log such statements.
        </para>
-->
<para>
     即使设置了<varname>log_statement</> = <literal>all</>，包含简单语法错误的语句也不会被记录。
 因为仅在完成基本的语法分析并确定了语句类型之后才记录日志。在使用扩展查询协议的情况下，
 在执行阶段之前(语法分析或规划阶段)同样不会记录。
 将<varname>log_min_error_statement</>设为<literal>ERROR</>或更低才能记录这些语句。
</para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-temp-files" xreflabel="log_temp_files">
      <term><varname>log_temp_files</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_temp_files</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls logging of temporary file names and sizes.
        Temporary files can be
        created for sorts, hashes, and temporary query results.
        A log entry is made for each temporary file when it is deleted.
        A value of zero logs all temporary file information, while positive
        values log only files whose size is greater than or equal to
        the specified number of kilobytes.  The
        default setting is -1, which disables such logging.
        Only superusers can change this setting.
       </para>
-->
<para>
       控件的临时文件名称和大小。临时文件可以创建的分类，哈希，和临时的查询结果。
   当它被删除时，一个日志项有利于每个临时文件。
   零值记录所有临时文件的信息，
   同时正值记录文件大小大于或等于千字节指定数量。
   默认设置是-1，禁用这样的日志。只有超级用户可以更改此设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-timezone" xreflabel="log_timezone">
      <term><varname>log_timezone</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_timezone</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the time zone used for timestamps written in the server log.
        Unlike <xref linkend="guc-timezone">, this value is cluster-wide,
        so that all sessions will report timestamps consistently.
        The built-in default is <literal>GMT</>, but that is typically
        overridden in <filename>postgresql.conf</>; <application>initdb</>
        will install a setting there corresponding to its system environment.
        See <xref linkend="datatype-timezones"> for more information.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
      设置用于写入服务器日志的时间戳的时区。不像<xref linkend="guc-timezone">，这个值是簇范围，
  因此，所有会话将持续报告时间戳。默认值<literal>GMT</>，但这通常被
  <filename>postgresql.conf</>覆盖；<application>initdb</>
  将安装与其系统环境一致的设置。参见<xref linkend="datatype-timezones">获取更多信息。
  这个参数只能在<filename>postgresql.conf</>文件或者服务器命令行上进行。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-csvlog">
 <!--
     <title>Using CSV-Format Log Output</title>
 -->
 <title>使用CSV-格式日志输出</title>

       
<para>
       <!--
        Including <literal>csvlog</> in the <varname>log_destination</> list
        provides a convenient way to import log files into a database table.
        This option emits log lines in comma-separated-values
        (<acronym>CSV</>) format,
        with these columns:
        time stamp with milliseconds,
        user name,
        database name,
        process ID,
        client host:port number,
        session ID,
        per-session line number,
        command tag,
        session start time,
        virtual transaction ID,
        regular transaction ID,
        error severity,
        SQLSTATE code,
        error message,
        error message detail,
        hint,
        internal query that led to the error (if any),
        character count of the error position therein,
        error context,
        user query that led to the error (if any and enabled by
        <varname>log_min_error_statement</>),
        character count of the error position therein,
        location of the error in the PostgreSQL source code
        (if <varname>log_error_verbosity</> is set to <literal>verbose</>),
        and application name.
        Here is a sample table definition for storing CSV-format log output:
      -->
  
  在<varname>log_destination</>列表中包含<literal>csvlog</>
  提供了一种便捷的方式导入日志文件到一个数据库表。
  此选项在逗号分隔值(<acronym>CSV</>)中发出日志行，这些列为：
  time stamp with milliseconds,
        user name,
        database name,
        process ID,
        client host:port number,
        session ID,
        per-session line number,
        command tag,
        session start time,
        virtual transaction ID,
        regular transaction ID,
        error severity,
        SQLSTATE code,
        error message,
        error message detail,
        hint,
导致错误的内部查询（如果有），字符计算错误位置，
包含错误文本，导致错误的用户查询（如果有并且通过<varname>log_min_error_statement</>启动），
    字符计算错误位置。其中有PostgreSQL源代码错误的位置（如果<varname>log_error_verbosity</>设置为<literal>verbose</>），
    以及应用程序的名称。这是一个用于存储CSV格式的日志输出样本表定义：
<programlisting>
CREATE TABLE postgres_log
(
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  PRIMARY KEY (session_id, session_line_num)
);
</programlisting>
       </para>


       
<para>
      <!--
        To import a log file into this table, use the <command>COPY FROM</>
        command:
      -->
  使用<command>COPY FROM</>命令，将日志文件导入到这个表中：
<programlisting>
COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;
</programlisting>
       </para>


       
<para>
      <!--
       There are a few things you need to do to simplify importing CSV log
       files:
     -->
   你需要做几件事情简化导入CSV日志文件：
       <orderedlist>
         <listitem>
           <para>
   <!--
            Set <varname>log_filename</varname> and
            <varname>log_rotation_age</> to provide a consistent,
            predictable naming scheme for your log files.  This lets you
            predict what the file name will be and know when an individual log
            file is complete and therefore ready to be imported.
-->
设置<varname>log_filename</varname>和
            <varname>log_rotation_age</>为你的日志文件
提供一个一致的，可预见的命名方式。
这让你预测哪些文件的名称以及独立日志文件是完整的，因此可以准备导入。
         </para>

        </listitem>

        <listitem>
           <!--
<para>
            Set <varname>log_rotation_size</varname> to 0 to disable
            size-based log rotation, as it makes the log file name difficult
            to predict.
           </para>
-->
<para>
      设置<varname>log_rotation_size</varname>为0以禁用基于大小的日志旋转，
  因为它很难预测日志文件名。
  
</para>
        </listitem>

        <listitem>
          <!--
<para>
           Set <varname>log_truncate_on_rotation</varname> to <literal>on</> so
           that old log data isn't mixed with the new in the same file.
          </para>
-->
<para>
       设置<varname>log_truncate_on_rotation</varname>到<literal>on</>，以致于
   旧的日志数据不与同一文件的新数据混合。
</para>
        </listitem>

        <listitem>
          <!--
<para>
           The table definition above includes a primary key specification.
           This is useful to protect against accidentally importing the same
           information twice.  The <command>COPY</> command commits all of the
           data it imports at one time, so any error will cause the entire
           import to fail.  If you import a partial log file and later import
           the file again when it is complete, the primary key violation will
           cause the import to fail.  Wait until the log is complete and
           closed before importing.  This procedure will also protect against
           accidentally importing a partial line that hasn't been completely
           written, which would also cause <command>COPY</> to fail.
          </para>
-->
<para>
     上面表定义包括主密钥规范。这是为了防止意外导入相同的有用信息两次。
 <command>COPY</>命令要求所有的数据一次导入，所以任何错误都将导致整个导入过程失败。
 如果你导入部分日志文件，当它完成时，然后再导入该文件，主键冲突会导致导入过程失败。
 等待直到日志是完整的，并且导入之前关闭。
 该程序也将防止意外导入尚未完全写入的局部行，
 这也将导致<command>COPY</>失败。
</para>
        </listitem>
        </orderedlist>
      </para>

    </sect2>
   </sect1>

   <sect1 id="runtime-config-statistics">
   <!--
    <title>Run-time Statistics</title>
   -->
    <title>运行时统计</title>

    <sect2 id="runtime-config-statistics-collector">
<!--
     <title>Query and Index Statistics Collector</title>
 -->
 <title>查询和索引统计收集器</title>


     <!--
<para>
      These parameters control server-wide statistics collection features.
      When statistics collection is enabled, the data that is produced can be
      accessed via the <structname>pg_stat</structname> and
      <structname>pg_statio</structname> family of system views.
      Refer to <xref linkend="monitoring"> for more information.
     </para>
-->
<para>
     下面的参数控制服务器范围的统计搜集特性。如果启用了统计搜集，
 那么生成的数据可以通过<structname>pg_stat</structname>和
      <structname>pg_statio</structname>系统视图家族访问。
 参见<xref linkend="monitoring">获取更多信息。
</para>

     <variablelist>

     <varlistentry id="guc-track-activities" xreflabel="track_activities">
      <term><varname>track_activities</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_activities</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables the collection of information on the currently
        executing command of each session, along with the time when
        that command began execution. This parameter is on by
        default. Note that even when enabled, this information is not
        visible to all users, only to superusers and the user owning
        the session being reported on, so it should not represent a
        security risk.
        Only superusers can change this setting.
       </para>
-->
<para>
     统计每个会话执行的命令及其开始执行的时间。这个选项缺省是开启的。
 请注意即使把它打开，这个信息也不是所有用户都可见的，
 只有超级用户和会话的所有者才能看到；因此它不应该是个安全漏洞。
 只有超级用户可以改变这个设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-activity-query-size" xreflabel="track_activity_query_size">
      <term><varname>track_activity_query_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>track_activity_query_size</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
       Specifies the number of bytes reserved to track the currently
       executing command for each active session, for the
       <structname>pg_stat_activity</>.<structfield>query</> field.
       The default value is 1024. This parameter can only be set at server
       start.
       </para>
-->
<para>
    指定跟踪当前执行命令的预留字节数，
为了每个活动会话，以及<structname>pg_stat_activity</>.<structfield>query</>字段。
    默认值是1024。这个参数只能在服务器启动时设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-counts" xreflabel="track_counts">
      <term><varname>track_counts</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_counts</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables collection of statistics on database activity.
        This parameter is on by default, because the autovacuum
        daemon needs the collected information.
        Only superusers can change this setting.
       </para>
-->
<para>
    打开数据库活动的统计收集。此参数缺省是开启的，因为自动清理守护进程需要收集信息。 
只有超级用户可以更改此设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-io-timing" xreflabel="track_io_timing">
      <term><varname>track_io_timing</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_io_timing</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables timing of database I/O calls.  This parameter is off by
        default, because it will repeatedly query the operating system for
        the current time, which may cause significant overhead on some
        platforms.  You can use the <xref linkend="pgtesttiming"> tool to
        measure the overhead of timing on your system.
        I/O timing information is
        displayed in <xref linkend="pg-stat-database-view">, in the output of
        <xref linkend="sql-explain"> when the <literal>BUFFERS</> option is
        used, and by <xref linkend="pgstatstatements">.  Only superusers can
        change this setting.
       </para>
-->
<para>
     启动数据库定时I/O调用。此参数缺省是关闭的，因为它会反复查询操作系统当前的时间，
 这可能会导致某些平台的显著开销。
 您可以使用<xref linkend="pgtesttiming">工具测量系统上的定时开销。 
 在<xref linkend="sql-explain">的输出中通过，
 <xref linkend="pgstatstatements">使用<literal>BUFFERS</>选项时。
 I/O时序信息显示在<xref linkend="pg-stat-database-view">上，
 只有超级用户才能更改此设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-functions" xreflabel="track_functions">
      <term><varname>track_functions</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>track_functions</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables tracking of function call counts and time used. Specify
        <literal>pl</literal> to track only procedural-language functions,
        <literal>all</literal> to also track SQL and C language functions.
        The default is <literal>none</literal>, which disables function
        statistics tracking.  Only superusers can change this setting.
       </para>
-->
<para>
    启用函数调用计数和时间跟踪。指定<literal>pl</literal>仅跟踪过程语言函数， 
<literal>all</literal>跟踪SQL和C语言函数。
默认是<literal>none</literal>，禁用函数统计跟踪。
只有超级用户可以更改此设置。
</para>

       <note>
        <!--
<para>
         SQL-language functions that are simple enough to be <quote>inlined</>
         into the calling query will not be tracked, regardless of this
         setting.
        </para>
-->
<para>
       足够简单的以便<quote>内联</>到调用查询的SQL语言函数将不被跟踪，
   而不管这些设置。
</para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-update-process-title" xreflabel="update_process_title">
      <term><varname>update_process_title</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>update_process_title</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables updating of the process title every time a new SQL command
        is received by the server.  The process title is typically viewed
        by the <command>ps</> command,
        or in Windows by using the <application>Process Explorer</>.
        Only superusers can change this setting.
       </para>
-->
<para> 
 服务器每收到一个新的SQL命令就更新进程标题。
 进程标题可以通过<command>ps</>命令或Windows下的进程管理器查看。
 只有超级用户可以改变这个设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-temp-directory" xreflabel="stats_temp_directory">
      <term><varname>stats_temp_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>stats_temp_directory</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the directory to store temporary statistics data in. This can be
        a path relative to the data directory or an absolute path. The default
        is <filename>pg_stat_tmp</filename>. Pointing this at a RAM-based
        file system will decrease physical I/O requirements and can lead to
        improved performance.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
      设置存储临时统计数据的目录。这可以是相对于数据目录的相对路径或绝对路径。
  缺省是<filename>pg_stat_tmp</filename>。
  指向基于RAM文件系统将减少物理I/O要求，并可能导致性能提升。
  此参数只能在<filename>postgresql.conf</>文件或者服务器命令行上设置。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-statistics-monitor">
<!--
     <title>Statistics Monitoring</title>
 -->
 <title>统计监控</title>
 
     <variablelist>

     <varlistentry>
      <term><varname>log_statement_stats</varname> (<type>boolean</type>)



      <indexterm>
       <primary><varname>log_statement_stats</> configuration parameter</primary>
      </indexterm>
      </term>
      <term><varname>log_parser_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_parser_stats</> configuration parameter</primary>
      </indexterm>
      </term>
      <term><varname>log_planner_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_planner_stats</> configuration parameter</primary>
      </indexterm>
      </term>
      <term><varname>log_executor_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_executor_stats</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        For each query, output performance statistics of the respective
        module to the server log. This is a crude profiling
        instrument, similar to the Unix <function>getrusage()</> operating
        system facility.  <varname>log_statement_stats</varname> reports total
        statement statistics, while the others report per-module statistics.
        <varname>log_statement_stats</varname> cannot be enabled together with
        any of the per-module options.  All of these options are disabled by
        default.   Only superusers can change these settings.
       </para>
-->
<para>
    对每条查询，向服务器日志里输出相应模块的性能统计。
这是原始的剖析工具。类似于Unix <function>getrusage()</>操作系统工具。
<varname>log_statement_stats</varname>报告总的语言统计，
而其它的报告针对每个模块的统计。<varname>log_statement_stats</varname>
不能和其它任何针对每个模块统计的选项一起打开。所有这些选项都是缺省关闭的。
只有超级用户才能修改这些设置。
</para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
   </sect1>

   <sect1 id="runtime-config-autovacuum">
   <!--
    <title>Automatic Vacuuming</title>
-->
 <title>自动清理</title>

    <indexterm>
     <primary>autovacuum</primary>
     <secondary>configuration parameters</secondary>
    </indexterm>

     <!--
<para>
      These settings control the behavior of the <firstterm>autovacuum</>
      feature.  Refer to <xref linkend="autovacuum"> for
      more information.
     </para>
-->
<para>
    这些设置控制<firstterm>自动清理</>的缺省行为。请参阅<xref linkend="autovacuum">获取更多信息。
</para>

    <variablelist>

     <varlistentry id="guc-autovacuum" xreflabel="autovacuum">
      <term><varname>autovacuum</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>autovacuum</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls whether the server should run the
        autovacuum launcher daemon.  This is on by default; however,
        <xref linkend="guc-track-counts"> must also be enabled for
        autovacuum to work.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
    控制服务器是否应该启动autovacuum守护进程。缺省是关闭的。然而，
<xref linkend="guc-track-counts">还必须启用自动清理工作。
这个选项只能在<filename>postgresql.conf</>文件里或者是服务器命令行中设置。
</para>
       <!--
<para>
        Note that even when this parameter is disabled, the system
        will launch autovacuum processes if necessary to
        prevent transaction ID wraparound.  See <xref
        linkend="vacuum-for-wraparound"> for more information.
       </para>
-->
<para>
       请注意，即使禁用该参数，如果有必要避免事务ID重叠，系统仍将启动自动清理进程。
   请参阅<xref linkend="vacuum-for-wraparound">获取更多详细信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-autovacuum-min-duration" xreflabel="log_autovacuum_min_duration">
      <term><varname>log_autovacuum_min_duration</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_autovacuum_min_duration</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Causes each action executed by autovacuum to be logged if it ran for at
        least the specified number of milliseconds.  Setting this to zero logs
        all autovacuum actions. Minus-one (the default) disables logging
        autovacuum actions.  For example, if you set this to
        <literal>250ms</literal> then all automatic vacuums and analyzes that run
        250ms or longer will be logged.  In addition, when this parameter is
        set to any value other than <literal>-1</literal>, a message will be
        logged if an autovacuum action is skipped due to the existence of a
        conflicting lock.  Enabling this parameter can be helpful
        in tracking autovacuum activity.  This setting can only be set in
        the <filename>postgresql.conf</> file or on the server command line.
       </para>
-->
<para>
       如果它运行至少毫秒指定数，导致记录自动清理所执行的每个动作。
   此设置为零记录所有自动清理操作。减一（默认）禁用日志记录 
   自动清理动作。例如，如果您将其设置为<literal>250ms</literal>，
   那么将记录运行250ms或更长时间的所有自动清理和分析。
   此外，当这个参数设置为除<literal>-1</literal>外的其他任何值，
   如果由于冲突锁的存在而忽略自动清理操作，则记录这条消息。
   启用此参数可以有益于跟踪自动清理活动。这个设置只能在<filename>postgresql.conf</>
   文件或者服务器命令行上设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-max-workers" xreflabel="autovacuum_max_workers">
      <term><varname>autovacuum_max_workers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_max_workers</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the maximum number of autovacuum processes (other than the
        autovacuum launcher) which may be running at any one time.  The default
        is three.  This parameter can only be set at server start.
       </para>
-->
<para>
       指定自动清理进程的最大数（除了自动清理发射器），它可以在任一时刻运行。
   默认是三。这个参数只能在服务器启动时设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-naptime" xreflabel="autovacuum_naptime">
      <term><varname>autovacuum_naptime</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_naptime</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the minimum delay between autovacuum runs on any given
        database.  In each round the daemon examines the
        database and issues <command>VACUUM</> and <command>ANALYZE</> commands
        as needed for tables in that database.  The delay is measured
        in seconds, and the default is one minute (<literal>1min</>).
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
      声明运行在任何给定数据库上的autovacuum之间的最小延迟。在每次运行的周期里，
  守护进程都会检查一个数据库，
  并根据需要为该数据库的表发出<command>VACUUM</>和<command>ANALYZE</>命令。
  这个延迟是以秒计的，缺省为1分钟(<literal>1min</>)。
  这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行中设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-threshold" xreflabel="autovacuum_vacuum_threshold">
      <term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_threshold</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the minimum number of updated or deleted tuples needed
        to trigger a <command>VACUUM</> in any one table.
        The default is 50 tuples.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
-->
<para>
     声明在任何表里触发<command>VACUUM</>所需最小的行更新或删除数量。缺省是500。
 这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行中设置。
 此处的设置可以被改变存储参数的独立的表覆盖。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-threshold" xreflabel="autovacuum_analyze_threshold">
      <term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_analyze_threshold</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the minimum number of inserted, updated or deleted tuples
        needed to trigger an <command>ANALYZE</> in any one table.
        The default is 50 tuples.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
-->
<para>
      声明在任何表里触发<command>ANALYZE</>所需最小的行插入、更新、删除数量。缺省是50。
  这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行中设置。
  此处的设置可以被改变存储参数的独立表覆盖。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-scale-factor" xreflabel="autovacuum_vacuum_scale_factor">
      <term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_scale_factor</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies a fraction of the table size to add to
        <varname>autovacuum_vacuum_threshold</varname>
        when deciding whether to trigger a <command>VACUUM</>.
        The default is 0.2 (20% of table size).
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
-->
<para>
       声明在判断是否触发一个<command>VACUUM</>时增加到<varname>autovacuum_vacuum_threshold</varname>
   参数里面的表尺寸的分数。
   缺省是0.2(表大小的20%)。这个选项只能在<filename>postgresql.conf</>文件里或者服务器命令行中设置。
   此处的设置可以被改变存储参数的独立表覆盖。 
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-scale-factor" xreflabel="autovacuum_analyze_scale_factor">
      <term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>autovacuum_analyze_scale_factor</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies a fraction of the table size to add to
        <varname>autovacuum_analyze_threshold</varname>
        when deciding whether to trigger an <command>ANALYZE</>.
        The default is 0.1 (10% of table size).
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
-->
<para>
       声明在判断是否触发一个<command>ANALYZE</>时增加到<varname>autovacuum_analyze_threshold</varname>
   参数里面的表尺寸的分数。缺省是0.1(表大小的10%)。
   这个选项只能在<filename>postgresql.conf</>文件里或者服务器启动的时候设置。
   此处的设置可以被改变存储参数的独立表覆盖。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-freeze-max-age" xreflabel="autovacuum_freeze_max_age">
      <term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_freeze_max_age</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the maximum age (in transactions) that a table's
        <structname>pg_class</>.<structfield>relfrozenxid</> field can
        attain before a <command>VACUUM</> operation is forced
        to prevent transaction ID wraparound within the table.
        Note that the system will launch autovacuum processes to
        prevent wraparound even when autovacuum is otherwise disabled.
       </para>
-->
<para>
       指定表的<structname>pg_class</>在事务中的最大寿命。<structfield>relfrozenxid</>字段能够在强制 
    <command>VACUUM</>操作以防止事务 
   ID在表内循环重复之前完成。需要注意的是，即使autovacuum被禁止系统也会调用
   autovacuum 进程来防止循环重复。
        
</para>

       <!--
<para>
        Vacuum also allows removal of old files from the
        <filename>pg_clog</> subdirectory, which is why the default
        is a relatively low 200 million transactions.
        This parameter can only be set at server start, but the setting
        can be reduced for individual tables by
        changing storage parameters.
        For more information see <xref linkend="vacuum-for-wraparound">.
       </para>
-->
<para>
      自动清理允许删除来自<filename>pg_clog</>子目录的旧文件，
       默认值是相对低于200百万事务。该参数只能在服务器启动时设置，
   但是此处的设置可以通过改变存储参数独立表减少。
   更多信息请参见<xref linkend="vacuum-for-wraparound">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-multixact-freeze-max-age" xreflabel="autovacuum_multixact_freeze_max_age">
      <term><varname>autovacuum_multixact_freeze_max_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_multixact_freeze_max_age</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        Specifies the maximum age (in multixacts) that a table's
        <structname>pg_class</>.<structfield>relminmxid</> field can
        attain before a <command>VACUUM</> operation is forced to
        prevent multixact ID wraparound within the table.
        Note that the system will launch autovacuum processes to
        prevent wraparound even when autovacuum is otherwise disabled.
       </para>
-->
<para>
声明在这个表中的<command>VACUUM</>操作被强迫阻止multixact ID wraparound
之前，<structname>pg_class</>.<structfield>relminmxid</>
字段可以达到的最大寿命（以multixact计）。请注意，
系统将发送自动清理进程阻止wraparound，即使是禁用了自动清理。
</para>

<!-- 
       <para>
        Vacuuming multixacts also allows removal of old files from the
        <filename>pg_multixact/members</> and <filename>pg_multixact/offsets</>
        subdirectories, which is why the default is a relatively low
        400 million multixacts.
        This parameter can only be set at server start, but the setting
        can be reduced for individual tables by changing storage parameters.
        For more information see <xref linkend="vacuum-for-multixact-wraparound">.
       </para>
-->
<para>
清理multixact也允许删除<filename>pg_multixact/members</>和
<filename>pg_multixact/offsets</>子目录中的老旧字段，
这也是multixact缺省是相当低的4亿的原因。这个参数只能在服务器启动的时候设置，
但是可以通过更改存储参数降低单个表的设置。更多信息请查阅
<xref linkend="vacuum-for-multixact-wraparound">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-delay" xreflabel="autovacuum_vacuum_cost_delay">
      <term><varname>autovacuum_vacuum_cost_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_cost_delay</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the cost delay value that will be used in automatic
        <command>VACUUM</> operations.  If -1 is specified, the regular
        <xref linkend="guc-vacuum-cost-delay"> value will be used.
        The default value is 20 milliseconds.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
-->
<para>
   声明将在自动<command>VACUUM</>操作里使用的开销延迟数值。
   声明-1将使用普通的<xref linkend="guc-vacuum-cost-delay">数值。
   缺省值是20毫秒。
   这个选项只能在<filename>postgresql.conf</>文件里或者在服务器启动的时候设置。
   此处的设置可以被改变存储参数的独立表覆盖。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-limit" xreflabel="autovacuum_vacuum_cost_limit">
      <term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_cost_limit</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the cost limit value that will be used in automatic
        <command>VACUUM</> operations.  If -1 is specified (which is the
        default), the regular
        <xref linkend="guc-vacuum-cost-limit"> value will be used.  Note that
        the value is distributed proportionally among the running autovacuum
        workers, if there is more than one, so that the sum of the limits of
        each worker never exceeds the limit on this variable.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        This setting can be overridden for individual tables by
        changing storage parameters.
       </para>
-->
<para>
     声明将在自动<command>VACUUM</>操作里使用的开销限制数值。
 -1(缺省值)将使用普通的<xref linkend="guc-vacuum-cost-limit">数值。 
 要注意的是值将按比例分配给运行autovacuum工作者，
 如果有一个以上，这样每个工作者限制总和不会超过此变量的极限。 
 这个选项只能在<filename>postgresql.conf</>文件里或者在服务器启动的时候设置。
 此处的设置可以通过改变存储参数独立表覆盖。
</para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-client">
   <!--
    <title>Client Connection Defaults</title>
-->
<title>客户端连接缺省</title>

    <sect2 id="runtime-config-client-statement">
<!--
     <title>Statement Behavior</title>
 -->
 <title>语句行为</title>
     <variablelist>

     <varlistentry id="guc-search-path" xreflabel="search_path">
      <term><varname>search_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>search_path</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>path</><secondary>for schemas</></>
      </term>
      <listitem>
       <!--
<para>
        This variable specifies the order in which schemas are searched
        when an object (table, data type, function, etc.) is referenced by a
        simple name with no schema specified.  When there are objects of
        identical names in different schemas, the one found first
        in the search path is used.  An object that is not in any of the
        schemas in the search path can only be referenced by specifying
        its containing schema with a qualified (dotted) name.
       </para>
-->
<para>
    这个变量声明模式的搜索顺序，在一个被引用对象(表、数据类型、函数等)只是一个简单名字，
没有声明模式时需要这样的搜索。如果在另外一个模式里有一个相同的对象名，
那么使用在这个搜索路径中找到的第一个。
一个不在搜索路径中任何一个模式里出现的对象只能通过其所在模式的全称(打点的)名字来声明。
</para>

       <!--
<para>
        The value for <varname>search_path</varname> must be a comma-separated
        list of schema names.  Any name that is not an existing schema, or is
        a schema for which the user does not have <literal>USAGE</>
        permission, is silently ignored.
       </para>
-->
<para>
    <varname>search_path</varname>的值必需是一个逗号分隔的模式名列表。
它不是一个现有的模式名，或者用户不具有<literal>USAGE</>权限的模式，都将被自动忽略。
</para>

       <!--
<para>
        If one of the list items is the special name
        <literal>$user</literal>, then the schema having the name returned by
        <function>SESSION_USER</> is substituted, if there is such a schema
        and the user has <literal>USAGE</> permission for it.
        (If not, <literal>$user</literal> is ignored.)
       </para>
-->
<para>
     如果列表项之一是特殊名称<literal>$user</literal>，
 那么通过<function>SESSION_USER</>返回的名称模式被取代，
 如果有这样一个模式并且用户已经有<literal>USAGE</>权限。 
 （如果不是，那么忽略<literal>$user</literal>。）
</para>

       <!--
<para>
        The system catalog schema, <literal>pg_catalog</>, is always
        searched, whether it is mentioned in the path or not.  If it is
        mentioned in the path then it will be searched in the specified
        order.  If <literal>pg_catalog</> is not in the path then it will
        be searched <emphasis>before</> searching any of the path items.
       </para>
-->
<para>
      系统表模式<literal>pg_catalog</>总是被搜索，不管是否在搜索路径。如果在路径中，
  那么按照路径指定的顺序搜索，
  如果<literal>pg_catalog</>不在路径中，那么将在任何路径<emphasis>之前</>搜索。
</para>

       <!--
<para>
        Likewise, the current session's temporary-table schema,
        <literal>pg_temp_<replaceable>nnn</></>, is always searched if it
        exists.  It can be explicitly listed in the path by using the
        alias <literal>pg_temp</><indexterm><primary>pg_temp</></>.  If it is not listed in the path then
        it is searched first (even before <literal>pg_catalog</>).  However,
        the temporary schema is only searched for relation (table, view,
        sequence, etc) and data type names.  It is never searched for
        function or operator names.
       </para>
-->
<para>
       同样，如果它存在，那么当前会话的临时表模式，
   <literal>pg_temp_<replaceable>nnn</></>总是被搜索。
   它可以通过使用别名<literal>pg_temp</><indexterm><primary>pg_temp</></>
   被明确地列在该路径中。如果没有列在路径中，那么它首先被搜索（甚至<literal>pg_catalog</>之前）。
   但是，临时模式只搜索关系（表，视图，序列等）以及数据类型名称。
   它从来没有搜索函数或运算符名称。
</para>

       <!--
<para>
        When objects are created without specifying a particular target
        schema, they will be placed in the first valid schema named in
        <varname>search_path</varname>.  An error is reported if the search
        path is empty.
       </para>
-->
<para>
    如果创建对象时没有声明特定的目标模式，那么它将被放进<varname>search_path</varname>中的第一个模式。
如果搜索路径是空的，那么会报告一个错误。
</para>

       <!--
<para>
        The default value for this parameter is
        <literal>"$user", public</literal>.
        This setting supports shared use of a database (where no users
        have private schemas, and all share use of <literal>public</>),
        private per-user schemas, and combinations of these.  Other
        effects can be obtained by altering the default search path
        setting, either globally or per-user.
       </para>
-->
<para>
     这个参数的缺省值是<literal>"$user", public</literal>。
 这样就支持共享使用一个数据库(没有用户拥有私有模式，所有人都共享使用<literal>public</>)、
 私有的针对每个用户的模式、以及两者的组合。
 其它效果可以通过全局或者针对每个用户修改搜索路径设置获取。
</para>

       <!--
<para>
        The current effective value of the search path can be examined
        via the <acronym>SQL</acronym> function
        <function>current_schemas</>
        (see <xref linkend="functions-info">).
        This is not quite the same as
        examining the value of <varname>search_path</varname>, since
        <function>current_schemas</> shows how the items
        appearing in <varname>search_path</varname> were resolved.
       </para>
-->
<para>
      搜索路径当前值可以用<acronym>SQL</acronym>函数<function>current_schemas</>（参阅<xref linkend="functions-info">）
  检查。它和检查<varname>search_path</varname>的值不太一样，因为<function>current_schemas</>
  显示的是在<varname>search_path</varname>里出现的项如何被处理。
</para>

       <!--
<para>
        For more information on schema handling, see <xref linkend="ddl-schemas">.
       </para>
-->
<para>
   有关模式处理的更多信息，参阅<xref linkend="ddl-schemas">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
      <term><varname>default_tablespace</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_tablespace</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>tablespace</><secondary>default</></>
      </term>
      <listitem>
       <!--
<para>
        This variable specifies the default tablespace in which to create
        objects (tables and indexes) when a <command>CREATE</> command does
        not explicitly specify a tablespace.
       </para>
-->
<para>
  这个变量声明当<command>CREATE</>命令没有明确声明表空间时，
  所创建对象(表和索引等)的缺省表空间。
</para>

       <!--
<para>
        The value is either the name of a tablespace, or an empty string
        to specify using the default tablespace of the current database.
        If the value does not match the name of any existing tablespace,
        <productname>PostgreSQL</> will automatically use the default
        tablespace of the current database.  If a nondefault tablespace
        is specified, the user must have <literal>CREATE</> privilege
        for it, or creation attempts will fail.
       </para>
-->
<para>
   值要么是一个表空间的名字，要么是一个表明使用当前数据库缺省表空间的空字符串。
   如果这个数值和任意现存表空间的名字都不匹配，
   那么<productname>PostgreSQL</>将自动使用当前数据库的缺省表空间。
   如果声明非缺省表空间，用户必须有<literal>CREATE</>权限，或者创建尝试将失败。
</para>

       <!--
<para>
        This variable is not used for temporary tables; for them,
        <xref linkend="guc-temp-tablespaces"> is consulted instead.
       </para>
-->
<para>
      这个变量不用于临时表;对他们来说，
  <xref linkend="guc-temp-tablespaces">提供谘询。
</para>

       <!--
<para>
        This variable is also not used when creating databases.
        By default, a new database inherits its tablespace setting from
        the template database it is copied from.
       </para>
-->
<para>
      这个变量在创建数据库时也没有使用。默认情况下，新的数据库继承了从
  模板数据库复制的表空间设置。
</para>

       <!--
<para>
        For more information on tablespaces,
        see <xref linkend="manage-ag-tablespaces">.
       </para>
-->
<para>
      关于表空间的更多信息，请参阅<xref linkend="manage-ag-tablespaces">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-tablespaces" xreflabel="temp_tablespaces">
      <term><varname>temp_tablespaces</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>temp_tablespaces</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>tablespace</><secondary>temporary</></>
      </term>
      <listitem>
       <!--
<para>
        This variable specifies tablespaces in which to create temporary
        objects (temp tables and indexes on temp tables) when a
        <command>CREATE</> command does not explicitly specify a tablespace.
        Temporary files for purposes such as sorting large data sets
        are also created in these tablespaces.
       </para>
-->
<para>
    当<command>CREATE</>命令不明确指定一个表空间时，
这个变量指定要在其中创建临时对象的表空间（临时表和临时表的索引）。 
    出于此目的的临时文件，比如排序大型数据集，也在这些表空间中创建。
</para>

       <!--
<para>
        The value is a list of names of tablespaces.  When there is more than
        one name in the list, <productname>PostgreSQL</> chooses a random
        member of the list each time a temporary object is to be created;
        except that within a transaction, successively created temporary
        objects are placed in successive tablespaces from the list.
        If the selected element of the list is an empty string,
        <productname>PostgreSQL</> will automatically use the default
        tablespace of the current database instead.
       </para>
-->
<para>
      该值是表空间名称的列表。当列表中有一个以上名称时，
  <productname>PostgreSQL</>每次临时对象被创建时选择一个列表中的随机数； 
  除了在一个事务中之外，先后创建临时 
  对象放置在列表连续的表空间中。 
  如果列表中选定的元素是一个空字符串， 
  <productname>PostgreSQL</>会自动使用当前数据库的缺省表空间。
</para>

       <!--
<para>
        When <varname>temp_tablespaces</> is set interactively, specifying a
        nonexistent tablespace is an error, as is specifying a tablespace for
        which the user does not have <literal>CREATE</> privilege.  However,
        when using a previously set value, nonexistent tablespaces are
        ignored, as are tablespaces for which the user lacks
        <literal>CREATE</> privilege.  In particular, this rule applies when
        using a value set in <filename>postgresql.conf</>.
       </para>
-->
<para>
     当<varname>temp_tablespaces</>交互设置时，指定
 不存在的表空间是一个错误，为 
 不具有<literal>CREATE</>权限的用户声明一个表空间。但是， 
 当使用事先设定的值时，则忽略不存在的表空间，
 因为对于缺少<literal>CREATE</>权限的用户是一个表空间。 
 特别是，该规则适用于使用<filename>postgresql.conf</>设置的值时。
</para>

       <!--
<para>
        The default value is an empty string, which results in all temporary
        objects being created in the default tablespace of the current
        database.
       </para>
-->
<para>
     默认值是一个空字符串，这会导致所有临时对象在当前数据库缺省表空间被创建。
</para>

       <!--
<para>
        See also <xref linkend="guc-default-tablespace">.
       </para>
-->
<para>
      参阅<xref linkend="guc-default-tablespace">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
      <term><varname>check_function_bodies</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>check_function_bodies</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This parameter is normally on. When set to <literal>off</>, it
        disables validation of the function body string during <xref
        linkend="sql-createfunction">.  Disabling validation avoids side
        effects of the validation process and avoids false positives due
        to problems such as forward references.  Set this parameter
        to <literal>off</> before loading functions on behalf of other
        users; <application>pg_dump</> does so automatically.
       </para>
-->
<para>
   这个参数通常是on。设置为<literal>off</>表示在<xref linkend="sql-createfunction">之间关闭函数体字符串的合法性检查。
禁用合法性检查避免了验证进程的副作用，并且避免了问题的误报，比如前向引用。
在加载函数之前代表其他用户设置该参数为<literal>off</>；
<application>pg_dump</>会自动这样做。
   </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
      <term><varname>default_transaction_isolation</varname> (<type>enum</type>)
      <indexterm>
       <primary>transaction isolation level</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_isolation</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Each SQL transaction has an isolation level, which can be
        either <quote>read uncommitted</quote>, <quote>read
        committed</quote>, <quote>repeatable read</quote>, or
        <quote>serializable</quote>.  This parameter controls the
        default isolation level of each new transaction. The default
        is <quote>read committed</quote>.
       </para>
-->
<para>
     每个SQL事务都有一个隔离级别，可以是<quote>读未提交</quote>，<quote>读已提交</quote>，
 <quote>可重复读</quote>或者是<quote>可串性化</quote>。
 这个参数控制每个新事务的缺省隔离级别。缺省是<quote>读已提交</quote>。
</para>

       <!--
<para>
        Consult <xref linkend="mvcc"> and <xref
        linkend="sql-set-transaction"> for more information.
       </para>
-->
<para>
      参考<xref linkend="mvcc">和<xref linkend="sql-set-transaction">获取更多信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
      <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)
      <indexterm>
       <primary>read-only transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_read_only</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        A read-only SQL transaction cannot alter non-temporary tables.
        This parameter controls the default read-only status of each new
        transaction. The default is <literal>off</> (read/write).
       </para>
-->
<para>
      只读的SQL事务不能修改非临时表。这个参数控制每个新事务的只读状态。缺省是<literal>off</>(读/写)。
</para>

       <!--
<para>
        Consult <xref linkend="sql-set-transaction"> for more information.
       </para>
-->
<para>
       参考<xref linkend="sql-set-transaction">获取更多信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-deferrable" xreflabel="default_transaction_deferrable">
      <term><varname>default_transaction_deferrable</varname> (<type>boolean</type>)
      <indexterm>
       <primary>deferrable transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_deferrable</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When running at the <literal>serializable</> isolation level,
        a deferrable read-only SQL transaction may be delayed before
        it is allowed to proceed.  However, once it begins executing
        it does not incur any of the overhead required to ensure
        serializability; so serialization code will have no reason to
        force it to abort because of concurrent updates, making this
        option suitable for long-running read-only transactions.
        </para>
-->
<para>
     当在<literal>可串行化</>隔离级别下运行时，
 延迟的只读SQL事务允许继续进行之前可能会延迟。
 然而，一旦开始执行不会产生任何开销要求，以确保串行化; 
 所以串行化代码没有理由迫使它终止，因为并发更新，
 这使这些选项适合长时间运行只读事务。
</para>

        <!--
<para>
        This parameter controls the default deferrable status of each
        new transaction.  It currently has no effect on read-write
        transactions or those operating at isolation levels lower
        than <literal>serializable</>. The default is <literal>off</>.
       </para>
-->
<para>
     此参数控制每个新事务缺省延迟状态。
 它目前对读写事务或那些比<literal>可串行化</>低的隔离级别下的操作没有影响。 
 缺省是<literal>off</>。
</para>

       <!--
<para>
        Consult <xref linkend="sql-set-transaction"> for more information.
       </para>
-->
<para>
      参阅<xref linkend="sql-set-transaction">获取更多详细信息。
</para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-session-replication-role" xreflabel="session_replication_role">
      <term><varname>session_replication_role</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>session_replication_role</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Controls firing of replication-related triggers and rules for the
        current session.  Setting this variable requires
        superuser privilege and results in discarding any previously cached
        query plans.  Possible values are <literal>origin</> (the default),
        <literal>replica</> and <literal>local</>.
        See <xref linkend="sql-altertable"> for
        more information.
       </para>
-->
<para>
      控制当前会话复制相关的触发器和规则。设置此变量需要 
  超级用户权限，并导致丢弃任何以前缓存查询规划。
  可能的值是<literal>origin</> (缺省)，<literal>replica</>和<literal>local</>。 
  参阅<xref linkend="sql-altertable">获取更多信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
      <term><varname>statement_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>statement_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Abort any statement that takes more than the specified number of
        milliseconds, starting from the time the command arrives at the server
        from the client.  If <varname>log_min_error_statement</> is set to
        <literal>ERROR</> or lower, the statement that timed out will also be
        logged.  A value of zero (the default) turns this off.
       </para>
-->
<para>
      退出任何使用了超过此参数指定时间(毫秒)的语句，从服务器收到命令时开始计时。
  如果<varname>log_min_error_statement</>设置为<literal>ERROR</>或者更低，
  那么也会在日志中记录超时。
  零值(缺省)关闭这个计时器。
</para>

       <!--
<para>
        Setting <varname>statement_timeout</> in
        <filename>postgresql.conf</> is not recommended because it would
        affect all sessions.
       </para>
-->
<para>
     不推荐设置<filename>postgresql.conf</>中的<varname>statement_timeout</>，
 因为它影响所有的会话。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lock-timeout" xreflabel="lock_timeout">
      <term><varname>lock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>lock_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Abort any statement that waits longer than the specified number of
        milliseconds while attempting to acquire a lock on a table, index,
        row, or other database object.  The time limit applies separately to
        each lock acquisition attempt.  The limit applies both to explicit
        locking requests (such as <command>LOCK TABLE</>, or <command>SELECT
        FOR UPDATE</> without <literal>NOWAIT</>) and to implicitly-acquired
        locks.  If <varname>log_min_error_statement</> is set to
        <literal>ERROR</> or lower, the statement that timed out will be
        logged.  A value of zero (the default) turns this off.
       </para>
-->
<para> 
当试图获取表、索引、行或其他数据库对象的锁时，终止等待时间超过指定毫秒数的任何语句。
时间限制分别适用于每个锁获取尝试。该限制适用于明确 
锁定请求（如<command>LOCK TABLE</>或者没有<literal>NOWAIT</>的<command>SELECT FOR UPDATE</>）
以及隐式获取的锁。
如果<varname>log_min_error_statement</>设置为<literal>ERROR</>或更低，
则记录超时的语句。零值（缺省值）关闭它。
</para>

       <!--
<para>
        Unlike <varname>statement_timeout</>, this timeout can only occur
        while waiting for locks.  Note that if <varname>statement_timeout</>
        is nonzero, it is rather pointless to set <varname>lock_timeout</> to
        the same or larger value, since the statement timeout would always
        trigger first.
       </para>
-->
<para>
     不像<varname>statement_timeout</>，此超时只能发生在等待锁的时候。
 请注意，如果<varname>statement_timeout</>是非零，
 设置<varname>lock_timeout</>相同或更大的值是相当没有意义的，
 因为该语句超时总是会首先触发。
</para>

       <!--
<para>
        Setting <varname>lock_timeout</> in
        <filename>postgresql.conf</> is not recommended because it would
        affect all sessions.
       </para>
-->
<para>
     不推荐设置<filename>postgresql.conf</>中的<varname>lock_timeout</>，
 因为它影响所有的会话。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-table-age" xreflabel="vacuum_freeze_table_age">
      <term><varname>vacuum_freeze_table_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_freeze_table_age</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        <command>VACUUM</> performs a whole-table scan if the table's
        <structname>pg_class</>.<structfield>relfrozenxid</> field has reached
        the age specified by this setting.  The default is 150 million
        transactions.  Although users can set this value anywhere from zero to
        two billions, <command>VACUUM</> will silently limit the effective value
        to 95% of <xref linkend="guc-autovacuum-freeze-max-age">, so that a
        periodical manual <command>VACUUM</> has a chance to run before an
        anti-wraparound autovacuum is launched for the table. For more
        information see
        <xref linkend="vacuum-for-wraparound">.
       </para>
-->
<para>
      如果该表<structname>pg_class</>.<structfield>relfrozenxid</>
  字段已达到此设置中指定的时间，<command>VACUUM</>执行全表扫描。
  默认值是1.5亿个事务。虽然用户可以从零到二亿设置此值。 
  <command>VACUUM</>会默默的限制<xref linkend="guc-autovacuum-freeze-max-age">的95%的有效值，
  从而使定期手动的<command>VACUUM</>在自动清理该表之前有运行机会。
  详细信息请见<xref linkend="vacuum-for-wraparound">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
      <term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_freeze_min_age</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Specifies the cutoff age (in transactions) that <command>VACUUM</>
        should use to decide whether to freeze row versions
        while scanning a table.
        The default is 50 million transactions.  Although
        users can set this value anywhere from zero to one billion,
        <command>VACUUM</> will silently limit the effective value to half
        the value of <xref linkend="guc-autovacuum-freeze-max-age">, so
        that there is not an unreasonably short time between forced
        autovacuums.  For more information see <xref
        linkend="vacuum-for-wraparound">.
       </para>
-->
<para>
 指定<command>VACUUM</>在扫描一个表时用于判断是否用冻结行版本(在同一个事务中)。
  缺省值为50百万。虽然用户可以指定一个 0-1000000000之间的值，
  但是<command>VACUUM</>将会悄无声息的将有效值限制在<xref linkend="guc-autovacuum-freeze-max-age">的一半之内。
  更多信息参见<xref linkend="vacuum-for-wraparound">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-multixact-freeze-table-age" xreflabel="vacuum_multixact_freeze_table_age">
      <term><varname>vacuum_multixact_freeze_table_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_table_age</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        <command>VACUUM</> performs a whole-table scan if the table's
        <structname>pg_class</>.<structfield>relminmxid</> field has reached
        the age specified by this setting.  The default is 150 million multixacts.
        Although users can set this value anywhere from zero to two billions,
        <command>VACUUM</> will silently limit the effective value to 95% of
        <xref linkend="guc-autovacuum-multixact-freeze-max-age">, so that a
        periodical manual <command>VACUUM</> has a chance to run before an
        anti-wraparound is launched for the table.
        For more information see <xref linkend="vacuum-for-multixact-wraparound">.
       </para>
-->
<para>
如果表的<structname>pg_class</>.<structfield>relminmxid</>
字段已经达到了该设置声明的寿命，则<command>VACUUM</>执行一个全表扫描。
缺省是1.5亿multixact。尽管用户可以从0到2亿在任何位置设置该值，
<command>VACUUM</>将自动限制有效值为
<xref linkend="guc-autovacuum-multixact-freeze-max-age">的95%，
所以在为该表加载一个反概括之前，有机会周期性的手动运行<command>VACUUM</>。
更多信息请查看<xref linkend="vacuum-for-multixact-wraparound">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-multixact-freeze-min-age" xreflabel="vacuum_multixact_freeze_min_age">
      <term><varname>vacuum_multixact_freeze_min_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_min_age</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        Specifies the cutoff age (in multixacts) that <command>VACUUM</>
        should use to decide whether to replace multixact IDs with a newer
        transaction ID or multixact ID while scanning a table.  The default
        is 5 million multixacts.
        Although users can set this value anywhere from zero to one billion,
        <command>VACUUM</> will silently limit the effective value to half
        the value of <xref linkend="guc-autovacuum-multixact-freeze-max-age">,
        so that there is not an unreasonably short time between forced
        autovacuums.
        For more information see <xref linkend="vacuum-for-multixact-wraparound">.
       </para>
-->
<para>
声明<command>VACUUM</>应该使用的中断寿命（以multixact计），
以决定在扫描一个表时是否用一个新的事务ID或multixact ID替换multixact ID。
缺省是5百万multixact。尽管用户可以从0到1百万在任何位置设置该值，
<command>VACUUM</>将自动限制有效值为
<xref linkend="guc-autovacuum-multixact-freeze-max-age">的一半，
所以在强制自动清理之间没有不合理的短时间。请多信息请查看
<xref linkend="vacuum-for-multixact-wraparound">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bytea-output" xreflabel="bytea_output">
      <term><varname>bytea_output</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>bytea_output</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the output format for values of type <type>bytea</type>.
        Valid values are <literal>hex</literal> (the default)
        and <literal>escape</literal> (the traditional PostgreSQL
        format).  See <xref linkend="datatype-binary"> for more
        information.  The <type>bytea</type> type always
        accepts both formats on input, regardless of this setting.
       </para>
-->
<para>
       设置<type>bytea</type>类型值的输出格式。 
       有效值为<literal>hex</literal> (缺省)
        和<literal>escape</literal> (传统PostgreSQL
        格式)。参见<xref linkend="datatype-binary">获取更多信息。
不管这些设置，其中<type>bytea</type>类型总是接受这两种格式的输入。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmlbinary" xreflabel="xmlbinary">
      <term><varname>xmlbinary</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmlbinary</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets how binary values are to be encoded in XML.  This applies
        for example when <type>bytea</type> values are converted to
        XML by the functions <function>xmlelement</function> or
        <function>xmlforest</function>.  Possible values are
        <literal>base64</literal> and <literal>hex</literal>, which
        are both defined in the XML Schema standard.  The default is
        <literal>base64</literal>.  For further information about
        XML-related functions, see <xref linkend="functions-xml">.
       </para>
-->
<para>
    设置二进制值是如何在XML中进行编码的。
这适用于当<type>bytea</type>值通过<function>xmlelement</function>
或者<function>xmlforest</function>函数被转换为XML。
可能的值是<literal>base64</literal>和<literal>hex</literal>，
这在XML模式标准中定义。默认值是<literal>base64</literal>。
关于XML相关的函数的进一步信息，请参阅<xref linkend="functions-xml">。
</para>

       <!--
<para>
        The actual choice here is mostly a matter of taste,
        constrained only by possible restrictions in client
        applications.  Both methods support all possible values,
        although the hex encoding will be somewhat larger than the
        base64 encoding.
       </para>
-->
<para>
      这里的实际选择主要是口味问题，
  只有在客户端应用程序中可能存在某些限制约束。
  这两种方法都支持所有可能的值， 
  虽然十六进制编码将会比base64编码大一些。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmloption" xreflabel="xmloption">
      <term><varname>xmloption</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmloption</> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>SET XML OPTION</></primary>
      </indexterm>
      <indexterm>
       <primary>XML option</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets whether <literal>DOCUMENT</literal> or
        <literal>CONTENT</literal> is implicit when converting between
        XML and character string values.  See <xref
        linkend="datatype-xml"> for a description of this.  Valid
        values are <literal>DOCUMENT</literal> and
        <literal>CONTENT</literal>.  The default is
        <literal>CONTENT</literal>.
       </para>
-->
<para>
     当XML和字符串值之间进行转换时，设置<literal>DOCUMENT</literal>或
     <literal>CONTENT</literal>是否是隐含的。
 参见<xref linkend="datatype-xml">获取更多详细信息。有效 
 值<literal>DOCUMENT</literal>和<literal>CONTENT</literal>。缺省是
     <literal>CONTENT</literal>。
</para>

       
<para>
        <!--
        According to the SQL standard, the command to set this option is
-->
按照SQL标准，设置这个选项的命令是：
<synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
</synopsis>
        <!--
        This syntax is also available in PostgreSQL.
-->
这种语法在PostgreSQL中是可用的。
       </para>

      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-client-format">
 <!--
     <title>Locale and Formatting</title>
 -->
  <title>区域和格式化</title>


     <variablelist>

     <varlistentry id="guc-datestyle" xreflabel="DateStyle">
      <term><varname>DateStyle</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>DateStyle</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the display format for date and time values, as well as the
        rules for interpreting ambiguous date input values. For
        historical reasons, this variable contains two independent
        components: the output format specification (<literal>ISO</>,
        <literal>Postgres</>, <literal>SQL</>, or <literal>German</>)
        and the input/output specification for year/month/day ordering
        (<literal>DMY</>, <literal>MDY</>, or <literal>YMD</>). These
        can be set separately or together. The keywords <literal>Euro</>
        and <literal>European</> are synonyms for <literal>DMY</>; the
        keywords <literal>US</>, <literal>NonEuro</>, and
        <literal>NonEuropean</> are synonyms for <literal>MDY</>. See
        <xref linkend="datatype-datetime"> for more information. The
        built-in default is <literal>ISO, MDY</>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        behavior of the chosen <varname>lc_time</varname> locale.
       </para>
-->
<para>
     设置日期和时间值的显示格式，以及有歧义的输入值的解析规则。
 由于历史原因，这个变量包含两个独立的部分：输出格式声明(<literal>ISO</>,
        <literal>Postgres</>, <literal>SQL</>或者<literal>German</>)、
 输入输出的年/月/日顺序(<literal>DMY</>, <literal>MDY</>或者<literal>YMD</>)。
 这两个可以独立设置或者一起设置。
 关键字<literal>Euro</>和<literal>European</> 等价于<literal>DMY</>；
 关键字<literal>US</>, <literal>NonEuro</>和
        <literal>NonEuropean</>等价于<literal>MDY</>。
 参阅<xref linkend="datatype-datetime">获取更多信息。内置缺省是<literal>ISO, MDY</>，
 但是<application>initdb</application>将在初始化配置文件时根据<varname>lc_time</varname>选择一个合适的默认设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-intervalstyle" xreflabel="IntervalStyle">
      <term><varname>IntervalStyle</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>IntervalStyle</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the display format for interval values.
        The value <literal>sql_standard</> will produce
        output matching <acronym>SQL</acronym> standard interval literals.
        The value <literal>postgres</> (which is the default) will produce
        output matching <productname>PostgreSQL</> releases prior to 8.4
        when the <xref linkend="guc-datestyle">
        parameter was set to <literal>ISO</>.
        The value <literal>postgres_verbose</> will produce output
        matching <productname>PostgreSQL</> releases prior to 8.4
        when the <varname>DateStyle</>
        parameter was set to non-<literal>ISO</> output.
        The value <literal>iso_8601</> will produce output matching the time
        interval <quote>format with designators</> defined in section
        4.4.3.2 of ISO 8601.
       </para>
-->
<para>
      设置区间值的显示格式。
  <literal>sql_standard</>将产生输出匹配<acronym>SQL</acronym>标准时间间隔。 
  <literal>postgres</>的值（默认值）会产生输出匹配<productname>PostgreSQL</>8.4之前的版本。
  当<xref linkend="guc-datestyle">参数设置为<literal>ISO</>时。 
  <literal>postgres_verbose</>将产生输出匹配<productname>PostgreSQL</>8.4之前的版本。
  当<varname>DateStyle</>参数被设置成非-<literal>ISO</>输出时。
  <literal>iso_8601</>将产生输出匹配4.4.3.2节中ISO 8601定义的时间间隔格式。
</para>
       <!--
<para>
        The <varname>IntervalStyle</> parameter also affects the
        interpretation of ambiguous interval input.  See
        <xref linkend="datatype-interval-input"> for more information.
       </para>
-->
<para>
     <varname>IntervalStyle</>参数也会影响不明确的间隔输入的说明。
 参阅<xref linkend="datatype-interval-input">获取更多详细信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone" xreflabel="TimeZone">
      <term><varname>TimeZone</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>TimeZone</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>time zone</></>
      </term>
      <listitem>
       <!--
<para>
        Sets the time zone for displaying and interpreting time stamps.
        The built-in default is <literal>GMT</>, but that is typically
        overridden in <filename>postgresql.conf</>; <application>initdb</>
        will install a setting there corresponding to its system environment.
        See <xref linkend="datatype-timezones"> for more information.
       </para>
-->
<para>
    设置用于显示和解析时间戳的时区。内置缺省值<literal>GMT</>，
但是，这通常被<filename>postgresql.conf</>改写；<application>initdb</>
    将安装设置对应它的系统环境。
意味着使用系统环境声明的时区。
参阅<xref linkend="datatype-timezones">获取更多信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
      <term><varname>timezone_abbreviations</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>timezone_abbreviations</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>time zone names</></>
      </term>
      <listitem>
       <!--
<para>
        Sets the collection of time zone abbreviations that will be accepted
        by the server for datetime input.  The default is <literal>'Default'</>,
        which is a collection that works in most of the world; there are
        also <literal>'Australia'</literal> and <literal>'India'</literal>,
        and other collections can be defined for a particular installation.
        See <xref linkend="datetime-config-files"> for more information.
       </para>
-->
<para>
      设置服务器接受日期时间输入中使用的时区缩写集合。缺省值<literal>'Default'</>，
  在全世界大多数地方都能工作的很好。
  另外的可用值还有<literal>'Australia'</literal>和<literal>'India'</literal>等其它值。
  参见<xref linkend="datetime-config-files">以获取更多信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
      <term><varname>extra_float_digits</varname> (<type>integer</type>)
      <indexterm>
       <primary>significant digits</primary>
      </indexterm>
      <indexterm>
       <primary>floating-point</primary>
       <secondary>display</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>extra_float_digits</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This parameter adjusts the number of digits displayed for
        floating-point values, including <type>float4</>, <type>float8</>,
        and geometric data types.  The parameter value is added to the
        standard number of digits (<literal>FLT_DIG</> or <literal>DBL_DIG</>
        as appropriate).  The value can be set as high as 3, to include
        partially-significant digits; this is especially useful for dumping
        float data that needs to be restored exactly.  Or it can be set
        negative to suppress unwanted digits.
        See also <xref linkend="datatype-float">.
       </para>
-->
<para>
      这个参数为浮点数值调整显示的数据位数，浮点类型包括<type>float4</>, <type>float8</>以及几何数据类型。
  参数值加在标准的数据位数上(<literal>FLT_DIG</>或者<literal>DBL_DIG</>中合适的)。
  数值可以设置为最高3，
  以包括部分关键的数据位；这个功能对转储那些需要精确恢复的浮点数据特别有用。
  或者你也可以把它设置位负数以消除不需要的数据位。
  参阅<xref linkend="datatype-float">。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
      <term><varname>client_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>client_encoding</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>character set</></>
      </term>
      <listitem>
       <!--
<para>
        Sets the client-side encoding (character set).
        The default is to use the database encoding.
        The character sets supported by the <productname>PostgreSQL</productname>
        server are described in <xref linkend="multibyte-charset-supported">.
       </para>
-->
<para>
      设置客户端编码(字符集)。缺省使用数据库编码。
  字符集通过<xref linkend="multibyte-charset-supported">里描述的
  <productname>PostgreSQL</productname>服务器支持。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
      <term><varname>lc_messages</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_messages</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the language in which messages are displayed.  Acceptable
        values are system-dependent; see <xref linkend="locale"> for
        more information.  If this variable is set to the empty string
        (which is the default) then the value is inherited from the
        execution environment of the server in a system-dependent way.
       </para>
-->
<para>
  设置信息显示的语言。可接受的值是系统相关的；
  参阅<xref linkend="locale">获取更多信息。如果这个变量设置为空字符串(缺省值)，
  那么其值将以一种系统相关的方式从服务器的执行环境中继承。
</para>

       <!--
<para>
        On some systems, this locale category does not exist.  Setting
        this variable will still work, but there will be no effect.
        Also, there is a chance that no translated messages for the
        desired language exist.  In that case you will continue to see
        the English messages.
       </para>
-->
<para>
    在一些系统上，这个区域范畴并不存在，不过仍然允许设置这个变量，
只是不会有任何效果。同样，也有可能是所期望的语言的翻译信息不存在。
在这种情况下，你仍然能看到英文信息。

</para>

       <!--
<para>
        Only superusers can change this setting, because it affects the
        messages sent to the server log as well as to the client, and
        an improper value might obscure the readability of the server
        logs.
       </para>
-->
<para>
     只有超级用户可以改变这个设置。因为它同时影响发送到服务器日志和客户端的信息。
 并且不正确的值可能会掩盖服务器日志的可读性。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
      <term><varname>lc_monetary</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_monetary</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the locale to use for formatting monetary amounts, for
        example with the <function>to_char</function> family of
        functions.  Acceptable values are system-dependent; see <xref
        linkend="locale"> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
       </para>
-->
<para>
        为格式化金额数量设置区域。比如用于<function>to_char</function>函数族。可接受的值是系统相关的；
参阅<xref linkend="locale">获取更多信息。如果这个变量设置为空字符串(缺省值)，
那么其值将以一种系统相关的方式从服务器的执行环境中继承。 
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
      <term><varname>lc_numeric</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_numeric</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the locale to use for formatting numbers, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
       </para>
-->
<para>
      设置用于格式化数字的区域，比如用于<function>to_char</function>函数族。可接受的值是系统相关的；
  参阅<xref linkend="locale">获取更多信息。如果这个变量设置为空字符串(缺省值)，
  那么其值将以一种系统相关的方式从服务器的执行环境中继承。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-time" xreflabel="lc_time">
      <term><varname>lc_time</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_time</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Sets the locale to use for formatting dates and times, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
       </para>
-->
<para>
       设置用于格式化日期和时间值的区域。比如<function>to_char</function>函数族，
   可接受的值是系统相关的；参阅<xref linkend="locale">获取更多信息。
   如果这个变量设置为空字符串(缺省值)，
   那么其值将以一种系统相关的方式从服务器的执行环境中继承。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-text-search-config" xreflabel="default_text_search_config">
      <term><varname>default_text_search_config</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_text_search_config</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Selects the text search configuration that is used by those variants
        of the text search functions that do not have an explicit argument
        specifying the configuration.
        See <xref linkend="textsearch"> for further information.
        The built-in default is <literal>pg_catalog.simple</>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        chosen <varname>lc_ctype</varname> locale, if a configuration
        matching that locale can be identified.
       </para>
-->
<para>
     选择文本搜索函数使用的那些变量的文本搜索配置没有声明配置的明确参数。 
 参见<xref linkend="textsearch">获取进一步信息。 
 内置缺省值是<literal>pg_catalog.simple</>，
 如果配置匹配可以被识别的区域，则<application>initdb</application>将初始化该设置的配置文件， 
 它对应于已选择的<varname>lc_ctype</varname>区域。 
</para>
      </listitem>
     </varlistentry>
     </variablelist>
    </sect2>
    <sect2 id="runtime-config-client-preload">
     <!-- 
     <title>Shared Library Preloading</title>
     -->
     <title>共享库的预加载</title>
<!-- 
     <para>
      Several settings are available for preloading shared libraries into the
      server, in order to load additional functionality or achieve performance
      benefits.  For example, a setting of
      <literal>'$libdir/mylib'</literal> would cause
      <literal>mylib.so</> (or on some platforms,
      <literal>mylib.sl</>) to be preloaded from the installation's standard
      library directory.  The differences between the settings are when they
      take effect and what privileges are required to change them.
     </para>
-->
<para>
有几个设置可以用于预加载共享库到服务器中，以便加载额外的功能或达到性能效益。
例如 ，<literal>'$libdir/mylib'</literal>设置会导致<literal>mylib.so</>
（或在一些平台上是<literal>mylib.sl</>）从安装的标准库路径中预加载。
这些设置之间的不同在于它们何时产生影响和修改它们所需的权限。
</para>
<!-- 
     <para>
      <productname>PostgreSQL</productname> procedural language libraries can
      be preloaded in this way, typically by using the
      syntax <literal>'$libdir/plXXX'</literal> where
      <literal>XXX</literal> is <literal>pgsql</>, <literal>perl</>,
      <literal>tcl</>, or <literal>python</>.
     </para>
-->
<para>
可以用这种方式预加载<productname>PostgreSQL</productname>过程语言库，
通常使用语法<literal>'$libdir/plXXX'</literal>，这里的<literal>XXX</literal>
是<literal>pgsql</>、<literal>perl</>、<literal>tcl</>或<literal>python</>。
</para>
<!-- 
     <para>
      For each parameter, if more than one library is to be loaded, separate
      their names with commas.  All library names are converted to lower case
      unless double-quoted.
     </para>
-->
<para>
对于每个参数，如果多于一个库被加载，就用逗号分隔它们。
所有库的名字都被转换成小写，除非用双引号引用了它们。
</para>
<!-- 
     <para>
      Only shared libraries specifically intended to be used with PostgreSQL
      can be loaded this way.  Every PostgreSQL-supported library has
      a <quote>magic block</> that is checked to guarantee compatibility.  For
      this reason, non-PostgreSQL libraries cannot be loaded in this way.  You
      might be able to use operating-system facilities such
      as <envar>LD_PRELOAD</envar> for that.
     </para>
-->
<para>
只有明确打算用于PostgreSQL的共享库可以用这种方式加载。
每个PostgreSQL支持的库都有一个<quote>魔法块</>被选作保障兼容性。
因为这个原因，非PostgreSQL的库不能用这种方式加载。
可以使用操作系统工具比如<envar>LD_PRELOAD</envar>预加载。
</para>
<!-- 
     <para>
      In general, refer to the documentation of a specific module for the
      recommended way to load that module.
     </para>
-->
<para>
通常，查阅特定模块的文档获取加载该模块的推荐方式。
</para>
     <variablelist>
     <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
      <term><varname>local_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>local_preload_libraries</> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><filename>$libdir/plugins</></primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.  This parameter cannot be changed after
        the start of a particular session.  If a specified library is not
        found, the connection attempt will fail.
       </para>
-->
<para>
这个变量声明一个或多个在连接开始被预加载的共享库。
这个参数在特定会话开始之后不能被修改。如果没有找到指定的库，
那么该连接尝试将会失败。
</para>
<!-- 
       <para>
        This option can be set by any user.  Because of that, the libraries
        that can be loaded are restricted to those appearing in the
        <filename>plugins</> subdirectory of the installation's
        standard library directory.  (It is the database administrator's
        responsibility to ensure that only <quote>safe</> libraries
        are installed there.)  Entries in <varname>local_preload_libraries</>
        can specify this directory explicitly, for example
        <literal>$libdir/plugins/mylib</literal>, or just specify
        the library name &mdash; <literal>mylib</literal> would have
        the same effect as <literal>$libdir/plugins/mylib</literal>.
       </para>
-->
<para>
任何用户都可以设置这个选项。
  因此只能加载安装的标准库目录下<filename>plugins</>子目录中的库文件，
  数据库管理员有责任确保该目录中的库都是<quote>安全的</>。
  <varname>local_preload_libraries</>中的项可以明确指定该目录，
  例如<literal>$libdir/plugins/mylib</literal>；也可以仅指定库的名字&mdash;
  例如<literal>mylib</literal>等价于<literal>$libdir/plugins/mylib</literal>。
</para>
<!-- 
       <para>
        Unless a module is specifically designed to be used in this way by
        non-superusers, this is usually not the right setting to use.  Look
        at <xref linkend="guc-session-preload-libraries"> instead.
       </para>
-->
<para>
除非一个模块是特别设计来通过非超级用户以这种方式使用，
否则这通常不是要使用的正确设置。
查阅<xref linkend="guc-session-preload-libraries">。
</para>
      </listitem>
     </varlistentry>
     <varlistentry id="guc-session-preload-libraries" xreflabel="session_preload_libraries">
      <term><varname>session_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>session_preload_libraries</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.  Only superusers can change this setting.
        The parameter value only takes effect at the start of the connection.
        Subsequent changes have no effect.  If a specified library is not
        found, the connection attempt will fail.
       </para>
-->
<para>
这个变量声明在连接开始时预加载的一个或几个共享库。
只用超级用户可以修改这个设置。该参数值仅在连接启动时起作用。
随后的修改没有什么影响。如果没有找到指定的库，那么连接尝试将会失败。
</para>
<!-- 
       <para>
        The intent of this feature is to allow debugging or
        performance-measurement libraries to be loaded into specific sessions
        without an explicit
        <command>LOAD</> command being given.  For
        example, <xref linkend="auto-explain"> could be enabled for all
        sessions under a given user name by setting this parameter
        with <command>ALTER ROLE SET</>.  Also, this parameter can be changed
        without restarting the server (but changes only take effect when a new
        session is started), so it is easier to add new modules this way, even
        if they should apply to all sessions.
       </para>
-->
<para>
这个特性的目的是允许调试或性能测试库被加载到指定的会话，
而不用给出明确的<command>LOAD</>命令。例如，通过使用
<command>ALTER ROLE SET</>设置这个参数，可以为给出用户名下的所有会话启用
<xref linkend="auto-explain">。另外，可以不用重启服务器就改变这个参数
（但是修改仅在新会话启动后起作用），所以可以很方便的添加新的模块，
尽管它们应该应用到所有会话。
</para>

<!-- 
       <para>
        Unlike <xref linkend="guc-shared-preload-libraries">, there is no large
        performance advantage to loading a library at session start rather than
        when it is first used.  There is some advantage, however, when
        connection pooling is used.
       </para>
-->
<para>
不像<xref linkend="guc-shared-preload-libraries">，
在会话开始而不是它第一次使用时加载一个库并没有太大的性能优势。
不过，在使用了连接池时，还是有一些优势的。
</para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
      <term><varname>shared_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>shared_preload_libraries</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        This variable specifies one or more shared libraries to be preloaded at
        server start.  with commas.  This parameter can only be set at server
        start.  If a specified library is not found, the server will fail to
        start.
       </para>
-->
<para>
这个变量指定在服务器启动时要预加载的一个或多个共享库。用逗号隔开。
这个参数只能在服务器启动时设置。如果没有找到指定的库，
那么服务器启动将会失败。
</para>
<!-- 
       <para>
        Some libraries need to perform certain operations that can only take
        place at postmaster start, such as allocating shared memory, reserving
        light-weight locks, or starting background workers.  Those libraries
        must be loaded at server start through this parameter.  See the
        documentation of each library for details.
       </para>
-->
<para>
一些库需要执行仅能在服务器启动时放置的某些操作，比如分配共享内存，
预定轻量级锁或启动后端进程。这些库必须通过这个参数在服务器启动时加载。
参阅每个库的文档获取详细信息。
</para>
<!-- 
       <para>
        Other libraries can also be preloaded.  By preloading a shared library,
        the library startup time is avoided when the library is first used.
        However, the time to start each new server process might increase
        slightly, even if that process never uses the library.  So this
        parameter is recommended only for libraries that will be used in most
        sessions.  Also, changing this parameter requires a server restart, so
        this is not the right setting to use for short-term debugging tasks,
        say.  Use <xref linkend="guc-session-preload-libraries"> for that
        instead.
       </para>
-->
<para>
也可以预加载其他的库。通过预加载一个库，节省了该库第一次使用时的启动时间。
不过，每个新服务器进程的启动时间可能会稍微增加，即使是进程从未使用该库。
所以仅建议将要用于多数会话的库使用该参数。另外，修改该参数需要重启服务器，
所以说这不是用于短期调试任务的正确设置。
取而代之的是使用<xref linkend="guc-session-preload-libraries">。
</para>
      <note>
<!-- 
       <para>
        On Windows hosts, preloading a library at server start will not reduce
        the time required to start each new server process; each server process
        will re-load all preload libraries.  However, <varname>shared_preload_libraries
        </varname> is still useful on Windows hosts for libraries that need to
        perform operations at postmaster start time.
       </para>
-->
<para>
在Windows主机上，在服务器启动时预加载一个库将不会减少启动每个新服务器进程的时间；
每个服务器进程将重新加载所有预加载了的库。不过，<varname>shared_preload_libraries</varname>
在Windows主机上对于需要在主进程启动时执行操作的库仍然有用。
</para>
      </note>
      </listitem>
     </varlistentry>
     </variablelist>
    </sect2>
    
     <sect2 id="runtime-config-client-other">
 <!--
     <title>Other Defaults</title>
 -->
  <title>其他缺省</title>

     <variablelist>

     <varlistentry id="guc-dynamic-library-path" xreflabel="dynamic_library_path">
      <term><varname>dynamic_library_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>dynamic_library_path</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>dynamic loading</></>
      </term>
      <listitem>
       <!--
<para>
        If a dynamically loadable module needs to be opened and the
        file name specified in the <command>CREATE FUNCTION</command> or
        <command>LOAD</command> command
        does not have a directory component (i.e., the
        name does not contain a slash), the system will search this
        path for the required file.
       </para>
-->
<para>
      如果需要打开一个可以动态装载的模块并且在<command>CREATE FUNCTION</command>或者
      <command>LOAD</command>命令里面声明的名字没有目录部分(也就是说名字里不包含斜杠)，
  那么系统将搜索这个目录以查找声明的文件。
</para>

       
<para>
       <!--
        The value for <varname>dynamic_library_path</varname> must be a
        list of absolute directory paths separated by colons (or semi-colons
        on Windows).  If a list element starts
        with the special string <literal>$libdir</literal>, the
        compiled-in <productname>PostgreSQL</productname> package
        library directory is substituted for <literal>$libdir</literal>; this
        is where the modules provided by the standard
        <productname>PostgreSQL</productname> distribution are installed.
        (Use <literal>pg_config -&#045;pkglibdir</literal> to find out the name of
        this directory.) For example:
-->
用于<varname>dynamic_library_path</varname>的数值必须是一个冒号分隔
(或者是在Windows上分号分隔)的绝对路径列表。
如果一个路径名字以特殊变量<literal>$libdir</literal>
(<productname>PostgreSQL</productname>编译好的库目录)开头，
那么就替换为<productname>PostgreSQL</productname>发布提供的模块安装路径。
(使用<literal>pg_config --pkglibdir</literal>打印这个目录名)。比如：

<programlisting>
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'
</programlisting>
        <!--
        or, in a Windows environment:
-->
或者是在Windows环境里：
<programlisting>
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'
</programlisting>
       </para>

       <!--
<para>
        The default value for this parameter is
        <literal>'$libdir'</literal>. If the value is set to an empty
        string, the automatic path search is turned off.
       </para>
-->
<para>
    这个参数的缺省值是<literal>'$libdir'</literal>。
如果把这个值设置为一个空字符串，则关闭自动路径搜索。
</para>

       <!--
<para>
        This parameter can be changed at run time by superusers, but a
        setting done that way will only persist until the end of the
        client connection, so this method should be reserved for
        development purposes. The recommended way to set this parameter
        is in the <filename>postgresql.conf</filename> configuration
        file.
       </para>
-->
<para>
      这个参数可以在运行时由超级用户修改，但是这么修改的设置只能保持到这个客户端连接的结束，
  因此这个方法应该保留给开发用途使用。我们建议在<filename>postgresql.conf</filename>配置文件里设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
      <term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_fuzzy_search_limit</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Soft upper limit of the size of the set returned by GIN index scans. For more
        information see <xref linkend="gin-tips">.
       </para>
-->
<para>
       GIN索引扫描返回的集合尺寸软上限。更多信息参见<xref linkend="gin-tips">。
</para>
      </listitem>
     </varlistentry>


     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-locks">
   <!--
    <title>Lock Management</title>
-->
<title>锁管理</title>


     <variablelist>

     <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
      <term><varname>deadlock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout during</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>deadlock_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This is the amount of time, in milliseconds, to wait on a lock
        before checking to see if there is a deadlock condition. The
        check for deadlock is relatively expensive, so the server doesn't run
        it every time it waits for a lock. We optimistically assume
        that deadlocks are not common in production applications and
        just wait on the lock for a while before checking for a
        deadlock. Increasing this value reduces the amount of time
        wasted in needless deadlock checks, but slows down reporting of
        real deadlock errors. The default is one second (<literal>1s</>),
        which is probably about the smallest value you would want in
        practice. On a heavily loaded server you might want to raise it.
        Ideally the setting should exceed your typical transaction time,
        so as to improve the odds that a lock will be released before
        the waiter decides to check for deadlock.  Only superusers can change
        this setting.
       </para>
-->
<para>
     以毫秒计的时间，用于设置在检查是否存在死锁条件之前等待的时间。
 检查是否存在死锁条件是一个昂贵的过程，因此服务器不会在每次等待锁的时候都运行这个过程。
 我们乐观地假设在生产应用中的死锁是不常出现的，
 因此我们在开始询问是否可以解锁之前只等待一个相对较短的时间。
 增加这个值就减少了浪费在无用的死锁检查上的时间，但是减慢了报告真正死锁错误的速度。
 缺省是1秒(<literal>1s</>)，这可能是你能够耐心等待的最短时间。在一个重负载的服务器上，
 你可能需要增大它。这个值的典型设置应该超过你的事务持续时间，
 这样就可以减少在锁释放之前就开始死锁检查的问题。
 只有超级用户可以改变这个设置。
</para>

       <!--
<para>
        When <xref linkend="guc-log-lock-waits"> is set,
        this parameter also determines the length of time to wait before
        a log message is issued about the lock wait.  If you are trying
        to investigate locking delays you might want to set a shorter than
        normal <varname>deadlock_timeout</varname>.
       </para>
-->
<para>
      当<xref linkend="guc-log-lock-waits">被设置时，
  此参数也决定在发出有关锁等待的日志信息之前的等待时间长度。
  如果您正在尝试调查锁定延迟，
  你可能想设置一个小于正常<varname>deadlock_timeout</varname>的值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_locks_per_transaction</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        The shared lock table tracks locks on
        <varname>max_locks_per_transaction</varname> * (<xref
        linkend="guc-max-connections"> + <xref
        linkend="guc-max-prepared-transactions">) objects (e.g.,  tables);
        hence, no more than this many distinct objects can be locked at
        any one time.  This parameter controls the average number of object
        locks allocated for each transaction;  individual transactions
        can lock more objects as long as the locks of all transactions
        fit in the lock table.  This is <emphasis>not</> the number of
        rows that can be locked; that value is unlimited.  The default,
        64, has historically proven sufficient, but you might need to
        raise this value if you have queries that touch many different
        tables in a single transaction, e.g. query of a parent table with
        many children.  This parameter can only be set at server start.
       </para>
-->
<para>
      共享的锁表的大小是以假设任意时刻最多只有
  <varname>max_locks_per_transaction</varname> * (<xref
        linkend="guc-max-connections"> + <xref
        linkend="guc-max-prepared-transactions">)
  个独立的对象需要被锁住为基础进行计算的。
  这个参数控制分配给每个事务的锁定对象平均数。
  单独事务只要所有事务锁适合在锁表中都可以锁定多个对象。   
  这<emphasis>不是</>锁定行的数目，
  该值是无限的。缺省值64，已经经历史证明是足够的了，
  不过如果你有在一个事务里接触很多不同的表的查询，那么你就可能需要提高这个数值。
  比如带有很多孩子的父表查询。
  这个值只能在服务器启动的时候设置。
</para>

       <!--
<para>
        When running a standby server, you must set this parameter to the
        same or higher value than on the master server. Otherwise, queries
        will not be allowed in the standby server.
       </para>
-->
<para>
      当运行备用服务器时，你必须将此参数设置为比主服务器上相同或更高的值。否则，
  不允许在备用服务器进行查询。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-transaction" xreflabel="max_pred_locks_per_transaction">
      <term><varname>max_pred_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_transaction</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        The shared predicate lock table tracks locks on
        <varname>max_pred_locks_per_transaction</varname> * (<xref
        linkend="guc-max-connections"> + <xref
        linkend="guc-max-prepared-transactions">) objects (e.g., tables);
        hence, no more than this many distinct objects can be locked at
        any one time.  This parameter controls the average number of object
        locks allocated for each transaction;  individual transactions
        can lock more objects as long as the locks of all transactions
        fit in the lock table.  This is <emphasis>not</> the number of
        rows that can be locked; that value is unlimited.  The default,
        64, has generally been sufficient in testing, but you might need to
        raise this value if you have clients that touch many different
        tables in a single serializable transaction. This parameter can
        only be set at server start.
       </para>
-->
<para>
     共享谓词锁表跟踪锁定在 
 <varname>max_pred_locks_per_transaction</varname> * (<xref linkend="guc-max-connections"> + <xref linkend="guc-max-prepared-transactions">)对象上（例如，表）; 
 因此，只是许多不同的对象更可以在任何一个时间锁定。 
 此参数控制对象锁定分配给每个事务的平均数; 
 个别事务可以锁定多个对象，
 只要所有事务的锁适合在锁表中。这<emphasis>不是</>
 可以锁定的行数;该值是无限的。 
 在默认情况下，64对测试已经足够了，
 如果在可串行化事务中你有接触许多不同表的客户，那么您可能需要增大这个值。   
 此参数只能在服务器启动时设置。
</para>

      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-compatible">
   <!--
    <title>Version and Platform Compatibility</title>
-->
<title>版本和平台兼容性</title>


    <sect2 id="runtime-config-compatible-version">
<!--
     <title>Previous PostgreSQL Versions</title>
 -->
  <title>以前的PostgreSQL版本</title>

     <variablelist>

     <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
      <term><varname>array_nulls</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>array_nulls</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This controls whether the array input parser recognizes
        unquoted <literal>NULL</> as specifying a null array element.
        By default, this is <literal>on</>, allowing array values containing
        null values to be entered.  However, <productname>PostgreSQL</> versions
        before 8.2 did not support null values in arrays, and therefore would
        treat <literal>NULL</> as specifying a normal array element with
        the string value <quote>NULL</>.  For backward compatibility with
        applications that require the old behavior, this variable can be
        turned <literal>off</>.
       </para>
-->
<para>
    控制数组输入解析器是否将未用引号界定的<literal>NULL</>作为数组的一个NULL元素。
默认为<literal>on</>表示允许向数组中输入NULL值。但8.2之前的<productname>PostgreSQL</>版本不支持这么做，
因此将把<literal>NULL</>当作字符串<quote>NULL</>。如果希望向后兼容这种旧式行为，
那么可以设为<literal>off</>。
</para>

       <!--
<para>
        Note that it is possible to create array values containing null values
        even when this variable is <literal>off</>.
       </para>
-->
<para>
      即使该值被设为<literal>off</>也仍然能够创建包含NULL值的数组。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
      <term><varname>backslash_quote</varname> (<type>enum</type>)
      <indexterm><primary>strings</><secondary>backslash quotes</></>
      <indexterm>
       <primary><varname>backslash_quote</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This controls whether a quote mark can be represented by
        <literal>\'</> in a string literal.  The preferred, SQL-standard way
        to represent a quote mark is by doubling it (<literal>''</>) but
        <productname>PostgreSQL</> has historically also accepted
        <literal>\'</>. However, use of <literal>\'</> creates security risks
        because in some client character set encodings, there are multibyte
        characters in which the last byte is numerically equivalent to ASCII
        <literal>\</>.  If client-side code does escaping incorrectly then a
        SQL-injection attack is possible.  This risk can be prevented by
        making the server reject queries in which a quote mark appears to be
        escaped by a backslash.
        The allowed values of <varname>backslash_quote</> are
        <literal>on</> (allow <literal>\'</> always),
        <literal>off</> (reject always), and
        <literal>safe_encoding</> (allow only if client encoding does not
        allow ASCII <literal>\</> within a multibyte character).
        <literal>safe_encoding</> is the default setting.
       </para>
-->
<para>
     控制字符串文本中的单引号是否能够用<literal>\'</>来表示。
 首选的符合SQL标准的方法是将其双写(<literal>''</>)，但是<productname>PostgreSQL</>
 在历史上也可以用<literal>\'</>来表示。
 不过使用<literal>\'</>容易导致安全漏洞，
 因为在某些多字节字符集中存在最后一个字节等于<literal>\</>的 ASCII 值的字符。
 如果客户端代码没有做到正确转义，那么将会导致SQL注入攻击。
 如果服务器拒绝使用反斜杠转义来表示单引号的查询，那么就可以避免这种风险。
 <varname>backslash_quote</>的可用值是<literal>on</>(总是允许<literal>\'</>),
 <literal>off</>(总是拒绝), <literal>safe_encoding</>
 (仅在客户端字符集编码不会在多字节字符末尾包含<literal>\</>的ASCII值时允许)。
 <literal>safe_encoding</>是缺省设置。
</para>

       <!--
<para>
        Note that in a standard-conforming string literal, <literal>\</> just
        means <literal>\</> anyway.  This parameter only affects the handling of
        non-standard-conforming literals, including
        escape string syntax (<literal>E'...'</>).
       </para>
-->
<para>
     需要注意的是，在字符串文本符合SQL标准的情况下，<literal>\</>没有任何其它含义。
 这个参数影响的只是如何处理不符合标准的字符串文本，
 包括明确的字符串转义语法(<literal>E'...'</>)。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-with-oids" xreflabel="default_with_oids">
      <term><varname>default_with_oids</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>default_with_oids</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This controls whether <command>CREATE TABLE</command> and
        <command>CREATE TABLE AS</command> include an OID column in
        newly-created tables, if neither <literal>WITH OIDS</literal>
        nor <literal>WITHOUT OIDS</literal> is specified. It also
        determines whether OIDs will be included in tables created by
        <command>SELECT INTO</command>. The parameter is <literal>off</>
        by default; in <productname>PostgreSQL</> 8.0 and earlier, it
        was on by default.
       </para>
-->
<para>
    这个选项控制<command>CREATE TABLE</command>和
    <command>CREATE TABLE AS</command>在既没有声明<literal>WITH OIDS</literal>
也没有声明<literal>WITHOUT OIDS</literal>的情况下，
是否在新创建的表中包含OID字段。它还决定<command>SELECT INTO</command>创建的表里面是否包含OID。
参数缺省是<literal>off</>；在<productname>PostgreSQL</> 8.0之前缺省为on。
</para>

       <!--
<para>
        The use of OIDs in user tables is considered deprecated, so
        most installations should leave this variable disabled.
        Applications that require OIDs for a particular table should
        specify <literal>WITH OIDS</literal> when creating the
        table. This variable can be enabled for compatibility with old
        applications that do not follow this behavior.
       </para>
-->
<para>
     我们反对在用户表中使用 OID ，因此大多数安装应该关闭这个变量。
 需要OID的表应该在创建表的时候声明<literal>WITH OIDS</literal>。
 启用这个变量可以与不遵循这一行为的旧的应用程序兼容。 
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
      <term><varname>escape_string_warning</varname> (<type>boolean</type>)
      <indexterm><primary>strings</><secondary>escape warning</></>
      <indexterm>
       <primary><varname>escape_string_warning</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When on, a warning is issued if a backslash (<literal>\</>)
        appears in an ordinary string literal (<literal>'...'</>
        syntax) and <varname>standard_conforming_strings</varname> is off.
        The default is <literal>on</>.
       </para>
-->
<para>
     打开的时候，如果在普通的字符串文本里(<literal>'...'</>语法)出现了一个反斜扛(<literal>\</>)并且
 <varname>standard_conforming_strings</varname>被关闭，那么就会发出一个警告。缺省是<literal>on</>。
</para>
       <!--
<para>
        Applications that wish to use backslash as escape should be
        modified to use escape string syntax (<literal>E'...'</>),
        because the default behavior of ordinary strings is now to treat
        backslash as an ordinary character, per SQL standard.  This variable
        can be enabled to help locate code that needs to be changed.
       </para>
-->
<para>
      想要使用反斜杠作为转义的应用程序
  应该使用转义字符串语法(<literal>E'...'</>)进行修改，
  因为通的字符串缺省行为作为普通字符的反斜扛对待。
  启动这个变量帮助找到需要修改的代码。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lo-compat-privileges" xreflabel="lo_compat_privileges">
      <term><varname>lo_compat_privileges</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>lo_compat_privileges</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        In <productname>PostgreSQL</> releases prior to 9.0, large objects
        did not have access privileges and were, therefore, always readable
        and writable by all users.  Setting this variable to <literal>on</>
        disables the new privilege checks, for compatibility with prior
        releases.  The default is <literal>off</>.
        Only superusers can change this setting.
       </para>
-->
<para>
     在<productname>PostgreSQL</>9.0之前，大对象没有访问权限，因此，总是被所有用户可读可写。
 设置这个变量到<literal>on</>禁用新权限检查，为了兼容先前版本。
 缺省是<literal>off</>。只要超级用户可以改变此设置。 
</para>
       <!--
<para>
        Setting this variable does not disable all security checks related to
        large objects &mdash; only those for which the default behavior has
        changed in <productname>PostgreSQL</> 9.0.
        For example, <literal>lo_import()</literal> and
        <literal>lo_export()</literal> need superuser privileges regardless
        of this setting.
       </para>
-->
<para>
     设置这些变量不会禁用所有与大对象相关的安全检查&mdash;仅仅是在<productname>PostgreSQL</> 9.0
 已经改变了的缺省操作。比如，<literal>lo_import()</literal> 和<literal>lo_export()</literal>
 不管这些设置都需要超级用户权限。
</para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-quote-all-identifiers" xreflabel="quote-all-identifiers">
      <term><varname>quote_all_identifiers</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>quote_all_identifiers</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When the database generates SQL, force all identifiers to be quoted,
        even if they are not (currently) keywords.  This will affect the
        output of <command>EXPLAIN</> as well as the results of functions
        like <function>pg_get_viewdef</>.  See also the
        <option>-&#045;quote-all-identifiers</option> option of
        <xref linkend="app-pgdump"> and <xref linkend="app-pg-dumpall">.
       </para>
-->
<para>
      当数据库生成SQL，强制引用所有标示符，即使它们（当前）不是关键字。这也将影响
  <command>EXPLAIN</>的输出以及像<function>pg_get_viewdef</>函数的结果。
  参见<xref linkend="app-pgdump">和<xref linkend="app-pg-dumpall">的<option>-&#045;quote-all-identifiers</option>
  选项。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-sql-inheritance" xreflabel="sql_inheritance">
      <term><varname>sql_inheritance</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>sql_inheritance</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>inheritance</></>
      </term>
      <listitem>
       <!--
<para>
        This setting controls whether undecorated table references are
        considered to include inheritance child tables.  The default is
        <literal>on</>, which means child tables are included (thus,
        a <literal>*</> suffix is assumed by default).  If turned
        <literal>off</>, child tables are not included (thus, an
        <literal>ONLY</literal> prefix is assumed).  The SQL standard
        requires child tables to be included, so the <literal>off</> setting
        is not spec-compliant, but it is provided for compatibility with
        <productname>PostgreSQL</> releases prior to 7.1.
        See <xref linkend="ddl-inherit"> for more information.
       </para>
-->
<para>
      这个设置控制着未修饰的表引用是否包含继承的子表。缺省是<literal>on</>，
  这意味着包含子表（因此，缺省假定<literal>*</>后缀）。如果返回<literal>off</>，
  则不包含子表（因此，假定<literal>ONLY</literal>前缀）。SQL标准需要包含子表。
  因此<literal>off</> 设置不符合规范，但是它提供了<productname>PostgreSQL</> 7.1版本之前的兼容性。
  参见<xref linkend="ddl-inherit">获取更多详细信息。
</para>

       <!--
<para>
        Turning <varname>sql_inheritance</> off is deprecated, because that
        behavior has been found to be error-prone as well as contrary to SQL
        standard.  Discussions of inheritance behavior elsewhere in this
        manual generally assume that it is <literal>on</>.
       </para>
-->
<para>
       不赞成关闭<varname>sql_inheritance</>，因为发现操作有错误而且违反SQL标准。
   关于继承操作的讨论在手册中通常假定它是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
      <term><varname>standard_conforming_strings</varname> (<type>boolean</type>)
      <indexterm><primary>strings</><secondary>standard conforming</></>
      <indexterm>
       <primary><varname>standard_conforming_strings</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This controls whether ordinary string literals
        (<literal>'...'</>) treat backslashes literally, as specified in
        the SQL standard.
        Beginning in <productname>PostgreSQL</productname> 9.1, the default is
        <literal>on</> (prior releases defaulted to <literal>off</>).
        Applications can check this
        parameter to determine how string literals will be processed.
        The presence of this parameter can also be taken as an indication
        that the escape string syntax (<literal>E'...'</>) is supported.
        Escape string syntax (<xref linkend="sql-syntax-strings-escape">)
        should be used if an application desires
        backslashes to be treated as escape characters.
       </para>
-->
<para>
     控制普通字符串文本(<literal>'...'</>)中是否按照SQL标准把反斜扛当普通文本。
 <productname>PostgreSQL</productname> 9.1开始，缺省是<literal>on</>（
 之前缺省是<literal>off</>）。
 应用可以检查这个参数来判断字符串文本如何被处理。
 这个参数的出现也建议明确使用转义字符串语法(<literal>E'...'</>)来转义字符。
 如果应用希望反斜杠作为转义字符对待，则使用转义字符串语法(<xref linkend="sql-syntax-strings-escape">)。

</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronize-seqscans" xreflabel="synchronize_seqscans">
      <term><varname>synchronize_seqscans</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>synchronize_seqscans</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        This allows sequential scans of large tables to synchronize with each
        other, so that concurrent scans read the same block at about the
        same time and hence share the I/O workload.  When this is enabled,
        a scan might start in the middle of the table and then <quote>wrap
        around</> the end to cover all rows, so as to synchronize with the
        activity of scans already in progress.  This can result in
        unpredictable changes in the row ordering returned by queries that
        have no <literal>ORDER BY</> clause.  Setting this parameter to
        <literal>off</> ensures the pre-8.3 behavior in which a sequential
        scan always starts from the beginning of the table.  The default
        is <literal>on</>.
       </para>
-->
<para>
      这允许大表进行顺序扫描以同步其他的，所以并发扫描读取同一时间的同一批，
  从而共享I/O负载。启用此功能后，扫描可能会在表中间开始，
  然后<quote>包装开始环绕</>以覆盖所有的行，
  从而同步已在进行的扫描活动。
  这可能导致没有<literal>ORDER BY</>子句的查询返回排序行的不可预测变化。
  设置这个参数为<literal>off</>确保预8.3行为，
  其中一个顺序扫描总是从表的开头开始。缺省是<literal>on</>。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-compatible-clients">
<!--
     <title>Platform and Client Compatibility</title>
 -->
 <title>平台和客户端兼容</title>
     <variablelist>

     <varlistentry id="guc-transform-null-equals" xreflabel="transform_null_equals">
      <term><varname>transform_null_equals</varname> (<type>boolean</type>)
      <indexterm><primary>IS NULL</></>
      <indexterm>
       <primary><varname>transform_null_equals</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When on, expressions of the form <literal><replaceable>expr</> =
        NULL</literal> (or <literal>NULL =
        <replaceable>expr</></literal>) are treated as
        <literal><replaceable>expr</> IS NULL</literal>, that is, they
        return true if <replaceable>expr</> evaluates to the null value,
        and false otherwise. The correct SQL-spec-compliant behavior of
        <literal><replaceable>expr</> = NULL</literal> is to always
        return null (unknown). Therefore this parameter defaults to
        <literal>off</>.
       </para>
-->
<para>
     如果打开，那么表达式<literal><replaceable>expr</> = NULL</literal> 或者<literal>NULL =
     <replaceable>expr</></literal>将被当做<literal><replaceable>expr</> IS NULL</literal>处理，
 也就是说，如果<replaceable>expr</>得出 NULL 值则返回真，否则返回假。
 正确的 SQL 标准兼容的<literal><replaceable>expr</> = NULL</literal>行为总是返回NULL(未知)。
 因此这个选项缺省是<literal>off</>。
</para>

       <!--
<para>
        However, filtered forms in <productname>Microsoft
        Access</productname> generate queries that appear to use
        <literal><replaceable>expr</> = NULL</literal> to test for
        null values, so if you use that interface to access the database you
        might want to turn this option on.  Since expressions of the
        form <literal><replaceable>expr</> = NULL</literal> always
        return the null value (using the SQL standard interpretation), they are not
        very useful and do not appear often in normal applications so
        this option does little harm in practice.  But new users are
        frequently confused about the semantics of expressions
        involving null values, so this option is off by default.
       </para>
-->
<para>
    不过，在<productname>Microsoft Access</productname>里的过滤表单生成的查询好像使用的是
<literal><replaceable>expr</> = NULL</literal>测试 NULL ，因此，
如果你使用这个界面访问数据库，你可能想把这个选项打开。
因为形如<literal><replaceable>expr</> = NULL</literal>的表达式总是返回NULL（使用SQL标准说明），
它们不是很有用而且在应用中也不常见，
因此这个选项实际上没有什么害处。但是新用户常常在涉及NULL的表达式语义上感到糊涂，
因此缺省时不打开这个选项。
</para>

       <!--
<para>
        Note that this option only affects the exact form <literal>= NULL</>,
        not other comparison operators or other expressions
        that are computationally equivalent to some expression
        involving the equals operator (such as <literal>IN</literal>).
        Thus, this option is not a general fix for bad programming.
       </para>
-->
<para>
      请注意这个选项只影响<literal>= NULL</>形式，
  不包括其它比较操作符或者其它与一些涉及等号操作符的表达式计算(比如<literal>IN</literal>)。
  因此，这个选项不是垃圾程序的普遍修复。
</para>

       <!--
<para>
        Refer to <xref linkend="functions-comparison"> for related information.
       </para>
-->
<para>
    请参考<xref linkend="functions-comparison">获取相关信息。
</para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-error-handling">
    <!-- 
    <title>Error Handling</title>
    -->
    <title>错误处理</title>

    <variablelist>

     <varlistentry id="guc-exit-on-error" xreflabel="exit_on_error">
      <term><varname>exit_on_error</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>exit_on_error</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If true, any error will terminate the current session.  By default,
        this is set to false, so that only FATAL errors will terminate the
        session.
       </para>
-->
<para>
    如果为真，那么任何错误都将终止当前事务。缺省时，设置为假，所以只有致命错误将终止会话。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-restart-after-crash" xreflabel="restart_after_crash">
      <term><varname>restart_after_crash</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>restart_after_crash</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        When set to true, which is the default, <productname>PostgreSQL</>
        will automatically reinitialize after a backend crash.  Leaving this
        value set to true is normally the best way to maximize the availability
        of the database.  However, in some circumstances, such as when
        <productname>PostgreSQL</> is being invoked by clusterware, it may be
        useful to disable the restart so that the clusterware can gain
        control and take any actions it deems appropriate.
       </para>
-->
<para>
    当缺省设置为真时，<productname>PostgreSQL</>将在后端崩溃后自动重新初始化。
设置这些值为真往往是优化数据库的最佳方式。然而，在某些情况下，比如当<productname>PostgreSQL</>
正由集群调用时，它可能禁用启动非常有益，使得集群可以得到控制并采取其认为适当的任何行动。
</para>
      </listitem>
     </varlistentry>

    </variablelist>

   </sect1>

   <sect1 id="runtime-config-preset">
   <!--
    <title>Preset Options</title>
-->
<title>预置选项</title>

    <!--
<para>
     The following <quote>parameters</> are read-only, and are determined
     when <productname>PostgreSQL</productname> is compiled or when it is
     installed. As such, they have been excluded from the sample
     <filename>postgresql.conf</> file.  These options report
     various aspects of <productname>PostgreSQL</productname> behavior
     that might be of interest to certain applications, particularly
     administrative front-ends.
    </para>
-->
<para>
    下面的<quote>参数</>是只读的，它们是在编译或安装<productname>PostgreSQL</productname>的时候决定的。
因此，他们被排除在了<filename>postgresql.conf</>文件之外。
这些选项报告各种<productname>PostgreSQL</productname>某些应用可能感兴趣的行为，
特别是管理性的前端。
</para>

    <variablelist>

     <varlistentry id="guc-block-size" xreflabel="block_size">
      <term><varname>block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>block_size</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the size of a disk block.  It is determined by the value
        of <literal>BLCKSZ</> when building the server. The default
        value is 8192 bytes.  The meaning of some configuration
        variables (such as <xref linkend="guc-shared-buffers">) is
        influenced by <varname>block_size</varname>. See <xref
        linkend="runtime-config-resource"> for information.
       </para>
-->
<para>
  报告磁盘块的大小。它是由编译服务器时<literal>BLCKSZ</>的值确定的。缺省值是 8192 字节。
  有些配置变量的含义(比如<xref linkend="guc-shared-buffers">)会被<varname>block_size</varname>影响。
  参阅<xref linkend="runtime-config-resource">获取信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-data-checksums" xreflabel="data_checksums">
      <term><varname>data_checksums</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>data_checksums</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!-- 
       <para>
        Reports whether data checksums are enabled for this cluster.
        See <xref linkend="app-initdb-data-checksums"> for more information.
       </para>
-->
<para>
报告是否为这个群集启动了数据校验和。参阅<xref linkend="app-initdb-data-checksums">
获取更多信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
      <term><varname>integer_datetimes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>integer_datetimes</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports whether <productname>PostgreSQL</> was built with
        support for 64-bit-integer dates and times.  This can be
        disabled by configuring with <literal>-&#045;disable-integer-datetimes</>
        when building <productname>PostgreSQL</>.  The default value is
        <literal>on</literal>.
       </para>
-->
<para>
     报告<productname>PostgreSQL</> 是否在编译时打开了 64 位整数日期和时间。
 这是当编译<productname>PostgreSQL</>时，通过配置选项<literal>--disable-integer-datetimes</>禁用的。
 缺省值是<literal>on</literal>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-collate" xreflabel="lc_collate">
      <term><varname>lc_collate</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_collate</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the locale in which sorting of textual data is done.
        See <xref linkend="locale"> for more information.
        This value is determined when a database is created.
       </para>
-->
<para>
    报告文本数据排序使用的区域。参阅<xref linkend="locale">获取更多信息。
该值是在初始化数据库集群的时候确定的。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-ctype" xreflabel="lc_ctype">
      <term><varname>lc_ctype</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_ctype</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the locale that determines character classifications.
        See <xref linkend="locale"> for more information.
        This value is determined when a database is created.
        Ordinarily this will be the same as <varname>lc_collate</varname>,
        but for special applications it might be set differently.
       </para>
-->
<para>
      报告决定字符分类的区域。参阅<xref linkend="locale">获取更多信息。
  该值是在数据库集群初始化的时候决定的。
  通常它和<varname>lc_collate</varname>一样，但是可以为特殊应用设置成不同的值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
      <term><varname>max_function_args</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_function_args</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the maximum number of function arguments. It is determined by
        the value of <literal>FUNC_MAX_ARGS</> when building the server. The
        default value is 100 arguments.
       </para>
-->
<para>
     报告函数参数的最大个数。它是由编译服务器时的<literal>FUNC_MAX_ARGS</>值决定的。缺省是100。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
      <term><varname>max_identifier_length</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_identifier_length</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the maximum identifier length. It is determined as one
        less than the value of <literal>NAMEDATALEN</> when building
        the server. The default value of <literal>NAMEDATALEN</> is
        64; therefore the default
        <varname>max_identifier_length</varname> is 63 bytes, which
        can be less than 63 characters when using multibyte encodings.
       </para>
-->
<para>
     报告最大标识符长度。它是由编译服务器时的<literal>NAMEDATALEN</>值减一决定的。
 <literal>NAMEDATALEN</>的缺省值是 64 ；
 因此<varname>max_identifier_length</varname>的缺省是63。
 当使用多字节编码时小于63字符。 
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
      <term><varname>max_index_keys</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_index_keys</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the maximum number of index keys. It is determined by
        the value of <literal>INDEX_MAX_KEYS</> when building the server. The
        default value is 32 keys.
       </para>
-->
<para>
     报告最大索引键字的个数。它是由编译服务器时的<literal>INDEX_MAX_KEYS</>值决定的。
 缺省值是32。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-segment-size" xreflabel="segment_size">
      <term><varname>segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>segment_size</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the number of blocks (pages) that can be stored within a file
        segment.  It is determined by the value of <literal>RELSEG_SIZE</>
        when building the server.  The maximum size of a segment file in bytes
        is equal to <varname>segment_size</> multiplied by
        <varname>block_size</>; by default this is 1GB.
       </para>
-->
<para>
    报告可以存储在一个文件段中的块（页）数。当构建服务器时，
它是由<literal>RELSEG_SIZE</>的值决定的。
字节中段文件的最大大小等于<varname>segment_size</>
乘以<varname>block_size</>；默认情况下为1GB。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
      <term><varname>server_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_encoding</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>character set</></>
      </term>
      <listitem>
       <!--
<para>
        Reports the database encoding (character set).
        It is determined when the database is created.  Ordinarily,
        clients need only be concerned with the value of <xref
        linkend="guc-client-encoding">.
       </para>
-->
<para>
      报告数据库编码(字符集)。这是在创建数据库的时候决定的。
  通常，客户端只需要关心<xref linkend="guc-client-encoding">的值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version" xreflabel="server_version">
      <term><varname>server_version</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_version</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the version number of the server. It is determined by the
        value of <literal>PG_VERSION</> when building the server.
       </para>
-->
<para>
      报告服务器版本号。它是由编译服务器时的<literal>PG_VERSION</>值决定的。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
      <term><varname>server_version_num</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>server_version_num</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the version number of the server as an integer. It is determined
        by the value of <literal>PG_VERSION_NUM</> when building the server.
       </para>
-->
<para>
      报告服务器版本号的整数值。它是由编译服务器时的<literal>PG_VERSION_NUM</>值决定的。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-block-size" xreflabel="wal_block_size">
      <term><varname>wal_block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_block_size</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the size of a WAL disk block.  It is determined by the value
        of <literal>XLOG_BLCKSZ</> when building the server. The default value
        is 8192 bytes.
       </para>
-->
<para>
     报告WAL磁盘块大小。当构建服务时，它是通过<literal>XLOG_BLCKSZ</>的值决定的。
 缺省值时8192字节。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-segment-size" xreflabel="wal_segment_size">
      <term><varname>wal_segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_segment_size</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Reports the number of blocks (pages) in a WAL segment file.
        The total size of a WAL segment file in bytes is equal to
        <varname>wal_segment_size</> multiplied by <varname>wal_block_size</>;
        by default this is 16MB.  See <xref linkend="wal-configuration"> for
        more information.
       </para>
-->
<para>
      报告在WAL段文件中块（页）数。字节中WAL段文件总的大小等于<varname>wal_segment_size</>
  乘以<varname>wal_block_size</>；缺省是16MB。参见<xref linkend="wal-configuration">
  获取更多详细信息。
</para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-custom">
   <!--
    <title>Customized Options</title>
    -->
<title>自定义选项</title>
    <!--
<para>
     This feature was designed to allow parameters not normally known to
     <productname>PostgreSQL</productname> to be added by add-on modules
     (such as procedural languages).  This allows extension modules to be
     configured in the standard ways.
    </para>
-->
<para>
这个特性用来允许那些由附加模块添加(比如过程语言)的选项，
通常<productname>PostgreSQL</productname>并不知道它们。这样，扩展的模块就可以用标准的方式配置。

</para>

    <!--
<para>
     Custom options have two-part names: an extension name, then a dot, then
     the parameter name proper, much like qualified names in SQL.  An example
     is <literal>plpgsql.variable_conflict</>.
    </para>
-->
<para>
    自定义选项有两部分名称：一个扩展名，一个点， 
    参数名称合适，类似于SQL中限定名称。例子是<literal>plpgsql.variable_conflict</>。
</para>

    <!--
<para>
     Because custom options may need to be set in processes that have not
     loaded the relevant extension module, <productname>PostgreSQL</>
     will accept a setting for any two-part parameter name.  Such variables
     are treated as placeholders and have no function until the module that
     defines them is loaded. When an extension module is loaded, it will add
     its variable definitions, convert any placeholder values according to
     those definitions, and issue warnings for any unrecognized placeholders
     that begin with its extension name.
    </para>
-->
<para>
     因为自定义选项可能需要在没有加载相关扩展模块的过程中进行设置 ，
 <productname>PostgreSQL</>将接受任何两部分参数名称的设置。
 这样的变量被视为占位符，并没有功能，直到模块定义它们被加载。
 当加载一个扩展模块时，这将增加它的变量定义，根据这些定义转换任何占位符值，
 以及任何以扩展名开头的未确认的占位符发出的警告。
</para>
   </sect1>

   <sect1 id="runtime-config-developer">
   <!--
    <title>Developer Options</title>
-->
 <title>开发人员选项</title>

    <!--
<para>
     The following parameters are intended for work on the
     <productname>PostgreSQL</productname> source code, and in some cases
     to assist with recovery of severely damaged databases.  There
     should be no reason to use them on a production database.
     As such, they have been excluded from the sample
     <filename>postgresql.conf</> file.  Note that many of these
     parameters require special source compilation flags to work at all.
    </para>
-->
<para>
   下面的选项目的是在<productname>PostgreSQL</productname>代码上使用，并且在某些情况下可以帮助恢复严重损坏了的数据库。
   在生产环境里没有理由使用这些设置。因此，我们把他们从样例<filename>postgresql.conf</>文件中排除了出去。
   请注意许多这些选项要求特殊的源代码编译标志才能运转。
</para>

    <variablelist>
     <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
      <term><varname>allow_system_table_mods</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>allow_system_table_mods</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Allows modification of the structure of system tables.
        This is used by <command>initdb</command>.
        This parameter can only be set at server start.
       </para>
-->
<para>
     允许修改系统表的结构。它可以被<command>initdb</command>使用。这个值只能在服务器启动的时候设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
      <term><varname>debug_assertions</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_assertions</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Turns on various assertion checks. This is a debugging aid. If
        you are experiencing strange problems or crashes you might want
        to turn this on, as it might expose programming mistakes. To use
        this parameter, the macro <symbol>USE_ASSERT_CHECKING</symbol>
        must be defined when <productname>PostgreSQL</productname> is
        built (accomplished by the <command>configure</command> option
        <option>-&#045;enable-cassert</option>). Note that
        <varname>debug_assertions</varname> defaults to <literal>on</>
        if <productname>PostgreSQL</productname> has been built with
        assertions enabled.
       </para>
-->
<para>
    打开各种断言检查。这是调试助手。如果你经历了奇怪的问题或者崩溃，
那么你可能会想把这个打开，因为它可能暴露编程的错误。要使用这个选项，
我们必须在编译<productname>PostgreSQL</productname>的时候定义宏<symbol>USE_ASSERT_CHECKING</symbol>
(通过<command>configure</command>选项<option>--enable-cassert</option>完成)。
请注意，如果启用断言选项编译<productname>PostgreSQL</productname>，那么<varname>debug_assertions</varname>缺省就是<literal>on</>
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
      <term><varname>ignore_system_indexes</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>ignore_system_indexes</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Ignore system indexes when reading system tables (but still
        update the indexes when modifying the tables).  This is useful
        when recovering from damaged system indexes.
        This parameter cannot be changed after session start.
       </para>
-->
<para>
    读取系统表时忽略系统索引(但是修改系统表时依然同时修改索引)。
这个在从系统索引被破坏的表中恢复数据的时候很有用。该参数不能在会话启动之后修改。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
      <term><varname>post_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>post_auth_delay</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If nonzero, a delay of this many seconds occurs when a new
        server process is started, after it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger.
        This parameter cannot be changed after session start.
       </para>
-->
<para>
    如果为非零，那么在一个新的服务器进程启动并完成认证过程之后，
就会延迟这么多秒。这样就给开发人员一个机会用调试器附着在一个服务器进程上。
该参数不能在会话启动之后修改。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
      <term><varname>pre_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>pre_auth_delay</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If nonzero, a delay of this many seconds occurs just after a
        new server process is forked, before it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger to
        trace down misbehavior in authentication.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
     如果为非零，那么在一个新的服务器进程派生出来之后，
 就会延迟这么多秒，然后才会继续认证过程。
 这样就给开发人员一个机会用调试器附着在一个服务器进程上跟踪认证里面的异常行为。
 这个选项只能在服务器启动的时候或者在<filename>postgresql.conf</>文件里设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
      <term><varname>trace_notify</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_notify</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Generates a great amount of debugging output for the
        <command>LISTEN</command> and <command>NOTIFY</command>
        commands.  <xref linkend="guc-client-min-messages"> or
        <xref linkend="guc-log-min-messages"> must be
        <literal>DEBUG1</literal> or lower to send this output to the
        client or server logs, respectively.
       </para>
-->
<para>
     为<command>LISTEN</command>和<command>NOTIFY</command>命令生成大量调试输出。
 <xref linkend="guc-client-min-messages">或者<xref linkend="guc-log-min-messages">
 必须是<literal>DEBUG1</literal>。
 或者更低才能把这些输出分别发送到客户端或者服务器日志。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-recovery-messages" xreflabel="trace_recovery_messages">
      <term><varname>trace_recovery_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>trace_recovery_messages</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Enables logging of recovery-related debugging output that otherwise
        would not be logged. This parameter allows the user to override the
        normal setting of <xref linkend="guc-log-min-messages">, but only for
        specific messages. This is intended for use in debugging Hot Standby.
        Valid values are <literal>DEBUG5</>, <literal>DEBUG4</>,
        <literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>, and
        <literal>LOG</>.  The default, <literal>LOG</>, does not affect
        logging decisions at all.  The other values cause recovery-related
        debug messages of that priority or higher to be logged as though they
        had <literal>LOG</> priority; for common settings of
        <varname>log_min_messages</> this results in unconditionally sending
        them to the server log.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
-->
<para>
      启用恢复相关的调试输出的日志记录，否则 
  不会被记录。该参数允许用户覆盖<xref linkend="guc-log-min-messages">的正常设置，  
  但仅限于特定消息。打算调试双机热备时使用。 
  有效值<literal>DEBUG5</>, <literal>DEBUG4</>,<literal>DEBUG3</>, <literal>DEBUG2</>, 
  <literal>DEBUG1</>和<literal>LOG</>。
  默认情况下，<literal>LOG</>不影响记录决定。其他值会导致恢复相关的 
  记录优先级或更高的调试消息，虽然他们 
  有<literal>LOG</>的优先级;对于<varname>log_min_messages</>常用的设置 
  导致无条件地发送这些到服务器日志。
  这个参数只能在<filename>postgresql.conf</>文件或者服务器命令行中设置。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
      <term><varname>trace_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_sort</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If on, emit information about resource usage during sort operations.
        This parameter is only available if the <symbol>TRACE_SORT</symbol> macro
        was defined when <productname>PostgreSQL</productname> was compiled.
        (However, <symbol>TRACE_SORT</symbol> is currently defined by default.)
       </para>
-->
<para>
     如果打开，发出在排序操作中的资源使用的有关信息。
 这个选项只有在编译<productname>PostgreSQL</productname>的时候定义了<symbol>TRACE_SORT</symbol>
 宏的时候才可用(不过，目前<symbol>TRACE_SORT</symbol>缺省就是定义了的)。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_locks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_locks</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
      
<para>
      <!--
        If on, emit information about lock usage.  Information dumped
        includes the type of lock operation, the type of lock and the unique
        identifier of the object being locked or unlocked.  Also included
        are bit masks for the lock types already granted on this object as
        well as for the lock types awaited on this object.  For each lock
        type a count of the number of granted locks and waiting locks is
        also dumped as well as the totals.  An example of the log file output
        is shown here:
-->
如果打开，发出关于锁用法信息。信息转储包括锁定操作的类型，锁定类型和 
    被锁定或解锁的对象的唯一标识符。
还包括已授权在该对象上的锁类型 
以及等待此对象上的锁类型的位掩码。
对于每个锁类型的授予锁和等待锁的数量计数以及总数都被转储。
该日志文件输出的例子在这显示：
<screen>
LOG:  LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
      wait(0) type(AccessShareLock)
LOG:  UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(INVALID)
</screen>
        <!--
        Details of the structure being dumped may be found in
        <filename>src/include/storage/lock.h</filename>.
-->
结构详情可以从<filename>src/include/storage/lock.h</filename>里找到。
       </para>


       <!--
<para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
-->
<para>
       当编译<productname>PostgreSQL</productname>时，如果定义了<symbol>LOCK_DEBUG</symbol>
   宏指令，则只能使用这个参数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_lwlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_lwlocks</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If on, emit information about lightweight lock usage.  Lightweight
        locks are intended primarily to provide mutual exclusion of access
        to shared-memory data structures.
       </para>
-->
<para>
       如果打开，则发出轻量级锁用法信息。轻量级锁主要提供访问互斥以共享内存数据结构。
</para>
       <!--
<para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
-->
<para>
      当编译<productname>PostgreSQL</productname>时，如果定义了<symbol>LOCK_DEBUG</symbol>
   宏指令，则只能使用这个参数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_userlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_userlocks</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If on, emit information about user lock usage.  Output is the same
        as for <symbol>trace_locks</symbol>, only for advisory locks.
       </para>
-->
<para>
     如果打开，则发出关于用户锁用法的信息。输出类似于<symbol>trace_locks</symbol>，
 仅仅为了咨询锁。
</para>
       <!--
<para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
-->
<para>
    当编译<productname>PostgreSQL</productname>时，如果定义了<symbol>LOCK_DEBUG</symbol>
宏指令，则只能使用这个参数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_lock_oidmin</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_oidmin</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If set, do not trace locks for tables below this OID. (use to avoid
        output on system tables)
       </para>
-->
<para>
      如果设置，不跟踪低于这个OID的表锁。（为了避免系统表输出）
</para>
       <!--
<para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
-->
<para>
     当编译<productname>PostgreSQL</productname>时，如果定义了<symbol>LOCK_DEBUG</symbol>
宏指令，则只能使用这个参数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>trace_lock_table</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_table</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Unconditionally trace locks on this table (OID).
       </para>
-->
<para>
        无条件跟踪表（OID）上的锁。
</para>
       <!--
<para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
-->
<para>
    当编译<productname>PostgreSQL</productname>时，如果定义了<symbol>LOCK_DEBUG</symbol>
宏指令，则只能使用这个参数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>debug_deadlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_deadlocks</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If set, dumps information about all current locks when a
        deadlock timeout occurs.
       </para>
-->
<para>
     当死锁发生超时，如果设置，那么备份所有当前锁的信息。
</para>
       <!--
<para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
-->
<para>
    当编译<productname>PostgreSQL</productname>时，如果定义了<symbol>LOCK_DEBUG</symbol>
宏指令，则只能使用这个参数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_btree_build_stats</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If set, logs system resource usage statistics (memory and CPU) on
        various B-tree operations.
       </para>
-->
<para>
      如果设置，日志系统资源用法在各种B-tree操作上统计(内存和CPU)。 
</para>
       <!--
<para>
        This parameter is only available if the <symbol>BTREE_BUILD_STATS</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
-->
<para>
    当编译<productname>PostgreSQL</productname>时，如果定义了<symbol>BTREE_BUILD_STATS</symbol>
宏指令，则只能使用这个参数。
</para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
      <term><varname>wal_debug</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_debug</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        If on, emit WAL-related debugging output. This parameter is
        only available if the <symbol>WAL_DEBUG</symbol> macro was
        defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
-->
<para>
     打开 WAL 相关的调试输出。只有在编译<productname>PostgreSQL</productname>的时候打开了
 <symbol>WAL_DEBUG</symbol>宏定义的情况下，这个选项才可用。

</para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-ignore-checksum-failure" xreflabel="ignore_checksum_failure">
      <term><varname>ignore_checksum_failure</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ignore_checksum_failure</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Only has effect if <xref linkend="app-initdb-data-checksums"> are enabled.
       </para>
-->
<para>
        如果启动<xref linkend="app-initdb-data-checksums">，已经受到影响。
</para>
       <!--
<para>
        Detection of a checksum failure during a read normally causes
        <productname>PostgreSQL</> to report an error, aborting the current
        transaction.  Setting <varname>ignore_checksum_failure</> to on causes
        the system to ignore the failure (but still report a warning), and
        continue processing.  This behavior may <emphasis>cause crashes, propagate
        or hide corruption, or other serious problems</>.  However, it may allow
        you to get past the error and retrieve undamaged tuples that might still be
        present in the table if the block header is still sane. If the header is
        corrupt an error will be reported even if this option is enabled. The
        default setting is <literal>off</>, and it can only be changed by a superuser.
       </para>
-->
<para>
      在读期间校验失败检测导致<productname>PostgreSQL</>报告错误，
  终止当前事务。设置<varname>ignore_checksum_failure</>的原因系统忽略失败
  （但仍然报告一个警告），并且
     继续处理。这种行为可能<emphasis>造成死机，传播或隐藏的崩溃，或其他严重的问题</>。
 然而，如果块头仍然是清醒的，它可能允许你获取错误并且检索仍然完好无损出现在表中未处理元组 。 
 如果头部崩溃，即使启用这个选项也将报告一个错误。
 默认设置为<literal>off</>，它只能由超级用户改变。
</para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
      <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>zero_damaged_pages</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <!--
<para>
        Detection of a damaged page header normally causes
        <productname>PostgreSQL</> to report an error, aborting the current
        transaction.  Setting <varname>zero_damaged_pages</> to on causes
        the system to instead report a warning, zero out the damaged
        page in memory, and continue processing.  This behavior <emphasis>will destroy data</>,
        namely all the rows on the damaged page.  However, it does allow you to get
        past the error and retrieve rows from any undamaged pages that might
        be present in the table.  It is useful for recovering data if
        corruption has occurred due to a hardware or software error.  You should
        generally not set this on until you have given up hope of recovering
        data from the damaged pages of a table.  Zeroed-out pages are not
        forced to disk so it is recommended to recreate the table or
        the index before turning this parameter off again.  The
        default setting is <literal>off</>, and it can only be changed
        by a superuser.
       </para>
-->
<para>
    如果侦测到一个损坏了的页面头通常会导致<productname>PostgreSQL</>报告一个错误，并且退出当前事务。
把<varname>zero_damaged_pages</>设置为 on 则令系统报告一个警告，把内存中损坏的页面填充零，然后继续处理。
这种行为会<emphasis>破坏数据</>，也就是所有在已经损坏页面上的行。
但是它允许你绕开坏页面然后从表中尚存的未损坏页面上继续检索数据行。
因此它在因为硬件或者软件错误导致的崩溃中进行恢复是很有用的。
通常你不应该把它设置为 on ，
除非你已经彻底放弃从崩溃的页面中恢复数据。
零填充页面不强制到磁盘，所以建议重新创建表或再次关闭此参数之前的索引。
缺省的设置是<literal>off</>，并且只有超级用户可以改变它。
</para>
      </listitem>
     </varlistentry>
   </variablelist>
  </sect1>
  <sect1 id="runtime-config-short">
  <!--
   <title>Short Options</title>
   -->
   <title>短选项</title>

   <!--
<para>
    For convenience there are also single letter command-line option
    switches available for some parameters.  They are described in
    <xref linkend="runtime-config-short-table">.  Some of these
    options exist for historical reasons, and their presence as a
    single-letter option does not necessarily indicate an endorsement
    to use the option heavily.
   </para>
-->
<para>
    为了方便起见，这里还为一些参数提供了好多单字母命令行选项开关。
它们在下面的<xref linkend="runtime-config-short-table">里描述。
其中一些选项仅仅是因为历史原因而存在的，尽管它们是单字母选项，
但是并不表示它们很常用。
</para>

    <table id="runtime-config-short-table">
<!--
     <title>Short Option Key</title>
 -->
 <title>短选项键字</title>
     <tgroup cols="2">
      <thead>
       <row>
    <!--
        <entry>Short Option</entry>
        <entry>Equivalent</entry>
-->
<entry>短选项</entry>
        <entry>等效</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry><option>-A <replaceable>x</replaceable></option></entry>
        <entry><literal>debug_assertions = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-B <replaceable>x</replaceable></option></entry>
        <entry><literal>shared_buffers = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-d <replaceable>x</replaceable></option></entry>
        <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-e</option></entry>
        <entry><literal>datestyle = euro</></entry>
       </row>
       <row>
        <entry>
          <option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
          <option>-fm</option>, <option>-fn</option>, <option>-fo</option>,
          <option>-fs</option>, <option>-ft</option>
         </entry>
         <entry>
          <literal>enable_bitmapscan = off</>,
          <literal>enable_hashjoin = off</>,
          <literal>enable_indexscan = off</>,
          <literal>enable_mergejoin = off</>,
          <literal>enable_nestloop = off</>,
          <literal>enable_indexonlyscan = off</>,
          <literal>enable_seqscan = off</>,
          <literal>enable_tidscan = off</>
         </entry>
       </row>
       <row>
        <entry><option>-F</option></entry>
        <entry><literal>fsync = off</></entry>
       </row>
       <row>
        <entry><option>-h <replaceable>x</replaceable></option></entry>
        <entry><literal>listen_addresses = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-i</option></entry>
        <entry><literal>listen_addresses = '*'</></entry>
       </row>
       <row>
        <entry><option>-k <replaceable>x</replaceable></option></entry>
        <entry><literal>unix_socket_directories = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-l</option></entry>
        <entry><literal>ssl = on</></entry>
       </row>
       <row>
        <entry><option>-N <replaceable>x</replaceable></option></entry>
        <entry><literal>max_connections = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-O</option></entry>
        <entry><literal>allow_system_table_mods = on</></entry>
       </row>
       <row>
        <entry><option>-p <replaceable>x</replaceable></option></entry>
        <entry><literal>port = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-P</option></entry>
        <entry><literal>ignore_system_indexes = on</></entry>
       </row>
       <row>
        <entry><option>-s</option></entry>
        <entry><literal>log_statement_stats = on</></entry>
       </row>
       <row>
        <entry><option>-S <replaceable>x</replaceable></option></entry>
        <entry><literal>work_mem = <replaceable>x</replaceable></></entry>
       </row>
       <row>
        <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
        <entry><literal>log_parser_stats = on</>,
        <literal>log_planner_stats = on</>,
        <literal>log_executor_stats = on</></entry>
       </row>
       <row>
        <entry><option>-W <replaceable>x</replaceable></option></entry>
        <entry><literal>post_auth_delay = <replaceable>x</replaceable></></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>
</chapter>

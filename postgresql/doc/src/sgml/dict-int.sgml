<!-- doc/src/sgml/dict-int.sgml -->

<sect1 id="dict-int" xreflabel="dict_int">
 <title>dict_int</title>

 <indexterm zone="dict-int">
  <primary>dict_int</primary>
 </indexterm>

 <para>
  <filename>dict_int</>是一个附加全文搜索词典模板的例子。这个例子词典的动机是控制整数（有符号和无符号）的索引，允许在阻止唯一词数量的过度增长（会严重影响搜索性能）时也能索引这些数字。
 </para>

 <sect2>
  <title>配置</title>

  <para>
   该词典接受两个选项：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <literal>maxlen</>参数指定在一个整数词中允许的最大位数。默认值为 6。
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>rejectlong</>参数指定一个超长整数是否应该被截断或忽略。如果<literal>rejectlong</>为<literal>false</>（默认），该词典返回该整数的第一个数字。如果<literal>rejectlong</>为<literal>true</>，该词典将一个超长整数作为一个停用词对待，因此它将不会被索引。注意这也意味着这样一个整数不能被搜索。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
  <title>用法</title>

  <para>
   安装<literal>dict_int</>扩展会使用默认参数创建一个文本搜索模板<literal>intdict_template</>和一个基于它的词典<literal>intdict</>。你可以修改参数，例如

<programlisting>
mydb# ALTER TEXT SEARCH DICTIONARY intdict (MAXLEN = 4, REJECTLONG = true);
ALTER TEXT SEARCH DICTIONARY
</programlisting>

   或者创建基于该模板的新词典。
  </para>

  <para>
   要测试该词典，可以尝试

<programlisting>
mydb# select ts_lexize('intdict', '12345678');
 ts_lexize
-----------
 {123456}
</programlisting>

   但是现实世界的用法将涉及将它包括在一个<xref linkend="textsearch">中描述的文本搜索配置中。看起来像这样：

<programlisting>
ALTER TEXT SEARCH CONFIGURATION english
    ALTER MAPPING FOR int, uint WITH intdict;
</programlisting>

  </para>
 </sect2>

</sect1>

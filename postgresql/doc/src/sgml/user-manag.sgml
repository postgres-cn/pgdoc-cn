<!-- doc/src/sgml/user-manag.sgml -->

<chapter id="user-manag">
 <title>数据库角色</title>

 <para>
  <productname>PostgreSQL</productname>使用<firstterm>角色</>的概念管理数据库访问权限。一个角色可以被看成是一个数据库用户或者是一个数据库用户组，这取决于角色被怎样设置。角色可以拥有数据库对象（例如，表）并且能够把那些对象上的权限赋予给其他角色来控制谁能访问哪些对象。此外，还可以把一个角色中的<firstterm>成员资格</>授予给另一个角色，这样允许成员角色使用被赋予给另一个角色的权限。
 </para>

 <para>
  角色的概念把<quote>用户</>和<quote>组</>的概念都包括在内。在<productname>PostgreSQL</productname>版本 8.1 之前，用户和组是完全不同的两种实体，但是现在只有角色。任意角色都可以扮演用户、组或者两者。
 </para>

 <para>
  本章描述如何创建和管理角色。更多角色权限在多个数据库对象上的效果可以在<xref linkend="ddl-priv">中找到。
 </para>

 <sect1 id="database-roles">
  <title>数据库角色</title>

  <indexterm zone="database-roles">
   <primary>角色</primary>
  </indexterm>

  <indexterm zone="database-roles">
   <primary>用户</primary>
  </indexterm>

  <indexterm>
   <primary>CREATE ROLE</primary>
  </indexterm>

  <indexterm>
   <primary>DROP ROLE</primary>
  </indexterm>

  <para>
   数据库角色在概念上已经完全与操作系统用户独立开来。事实上可能维护一个对应关系会比较方便，但是这并非必需。数据库角色在一个数据库集簇安装范围内是全局的（而不是独立数据库内）。要创建一个角色，可使用<xref linkend="sql-createrole"> SQL 命令：
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
   <replaceable>name</replaceable>遵循 SQL 标识符的规则：或是未经装饰没有特殊字符，或是用双引号包围（实际上，你将总是给该命令要加上额外选项，例如<literal>LOGIN</>。更多细节可见下文）。要移除一个已有的角色，使用相似的<xref linkend="sql-droprole">命令：
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
  </para>

  <indexterm>
   <primary>createuser</primary>
  </indexterm>

  <indexterm>
   <primary>dropuser</primary>
  </indexterm>

  <para>
   为了方便，<xref linkend="app-createuser">和<xref linkend="app-dropuser">程序被提供作为这些 SQL 命令的包装器，它们可以从 shell 命令行调用：
<synopsis>
createuser <replaceable>name</replaceable>
dropuser <replaceable>name</replaceable>
</synopsis>
  </para>

  <para>
   要决定现有角色的集合，检查<structname>pg_roles</>系统目录，例如：
<synopsis>
SELECT rolname FROM pg_roles;
</synopsis>
   <xref linkend="app-psql">程序的<literal>\du</>元命令也可以用来列出现有角色。
  </para>

  <para>
   为了引导数据库系统，一个刚刚被初始化好的系统总是包含一个预定义角色。这个角色总是一个<quote>superuser</>，并且默认情况下（除非在运行<command>initdb</command>时修改）它的名字和初始化数据库集簇的操作系统用户相同。习惯上，这个角色将被命名为<literal>postgres</literal>。为了创建更多角色，你首先必须以初始角色的身份连接。
  </para>

  <para>
   每一个到数据库服务器的连接都是使用某个特定角色名建立的，并且这个角色决定发起连接的命令的初始访问权限。要使用一个特定数据库连接的角色名由客户端指示，该客户端以一种应用相关的风格发起连接请求。例如，<command>psql</command>程序使用<option>-U</option>命令行选项来指定要以哪个角色连接。很多应用假定该名字默认是当前操作系统用户（包括<command>createuser</>和<command>psql</>）。因此在角色和操作系统用户之间维护一个名字对应关系通常是很方便的。
  </para>

  <para>
   一个给定客户端连接能够用来连接的数据库角色的集合由该客户端的认证设置决定，这些在<xref linkend="client-authentication">中有解释（因此，一个客户端不止限于以匹配其操作系统用户的角色连接，就像一个人的登录名不需要匹配她的真实名字一样）。因为角色身份决定一个已连接客户端可用的权限集合，在设置一个多用户环境时要小心地配置权限。
  </para>
 </sect1>

 <sect1 id="role-attributes">
  <title>角色属性</title>

   <para>
    一个数据库角色可以有一些属性，它们定义角色的权限并且与客户端认证系统交互。

    <variablelist>
     <varlistentry>
      <term>login privilege<indexterm><primary>login privilege</></></term>
      <listitem>
       <para>
        只有具有<literal>LOGIN</>属性的角色才能被用于一个数据库连接的初始角色名称。一个带有<literal>LOGIN</>属性的角色可以被认为和一个<quote>数据库用户</>相同。要创建一个带有登录权限的角色，使用两者之一：
<programlisting>
CREATE ROLE <replaceable>name</replaceable> LOGIN;
CREATE USER <replaceable>name</replaceable>;
</programlisting>
        （<command>CREATE USER</>和<command>CREATE ROLE</>等效，除了<command>CREATE USER</>默认假定有<literal>LOGIN</>，而<command>CREATE ROLE</>不这样认为）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>superuser status<indexterm><primary>superuser</></></term>
      <listitem>
       <para>
        一个数据库超级用户会绕开所有权限检查，除了登入的权利。这是一个危险的权限并且应该小心使用，最好用一个不是超级用户的角色来完成你的大部分工作。要创建一个新数据库超级用户，使用<literal>CREATE ROLE <replaceable>name</replaceable> SUPERUSER</literal>。你必须作为一个超级用户来完成这些。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>database creation<indexterm><primary>database</><secondary>privilege to create</></></term>
      <listitem>
       <para>
        一个角色必须被显式给予权限才能创建数据库（除了超级用户，因为它们会绕开所有权限检查）。要创建这样一个角色，使用<literal>CREATE ROLE <replaceable>name</replaceable> CREATEDB</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>role creation<indexterm><primary>role</><secondary>privilege to create</></></term>
      <listitem>
       <para>
        一个角色必须被显式给予权限才能创建更多角色（除了超级用户，因为它们会绕开所有权限检查）。要创建这样一个角色，使用<literal>CREATE ROLE <replaceable>name</replaceable> CREATEROLE</literal>。一个带有<literal>CREATEROLE</>权限的角色也可以修改和删除其他角色，还可以授予或回收角色中的成员关系。然而，要创建、修改、删除或修改一个超级用户角色的成员关系，需要以超级用户的身份操作。<literal>CREATEROLE</>不足以完成这一切。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>initiating replication<indexterm><primary>role</><secondary>privilege to initiate replication</></></term>
      <listitem>
       <para>
        一个角色必须被显式给予权限才能发起流复制（除了超级用户，因为它们会绕开所有权限检查）。一个被用于流复制的角色必须总是还有<literal>LOGIN</>权限。要创建这样一个角色，使用<literal>CREATE ROLE <replaceable>name</replaceable> REPLICATION LOGIN</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>password<indexterm><primary>password</></></term>
      <listitem>
       <para>
        只有当客户端认证方法要求用户在连接数据库时提供一个口令时，一个口令才有意义。<option>password</>和<option>md5</>认证方法使用口令。数据库口令与操作系统命令独立。在角色创建时指定一个口令：<literal>CREATE ROLE <replaceable>name</replaceable> PASSWORD '<replaceable>string</>'</literal>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    在创建后可以用<command>ALTER ROLE</command>修改一个角色属性。<indexterm><primary>ALTER ROLE</></><xref linkend="sql-createrole">和<xref linkend="sql-alterrole">命令的细节可见参考页。
   </para>

  <tip>
   <para>
    一个好习惯是创建一个具有<literal>CREATEDB</>和<literal>CREATEROLE</>权限的角色，而不是创建一个超级用户，并且然后用这个角色来完成对数据库和角色的例行管理。这种方法避免了在非必要时作为超级用户操作任务的风险。
   </para>
  </tip>

  <para>
   对于<xref linkend="runtime-config">中描述的运行时配置设置，一个角色也可以有角色相关的默认值。例如，如果出于某些原因你希望在每次连接时禁用索引扫描（提示：不是好主意），你可以使用：
<programlisting>
ALTER ROLE myname SET enable_indexscan TO off;
</programlisting>
   这将保存设置（但是不会立刻设置它）。在这个角色的后续连接中，它就表现得像在会话开始之前执行过<literal>SET enable_indexscan TO off</literal>。你也可以在会话期间改变该设置，它将只是作为默认值。要移除一个角色相关的默认设置，使用<literal>ALTER ROLE <replaceable>rolename</> RESET <replaceable>varname</></literal>。注意附加到没有<literal>LOGIN</>权限的角色的角色相关默认值相当无用，因为它们从不会被调用。
  </para>
 </sect1>

 <sect1 id="role-membership">
  <title>角色成员关系</title>

  <indexterm zone="role-membership">
   <primary>role</><secondary>membership in</>
  </indexterm>

  <para>
   把用户分组在一起来便于管理权限常常很方便：那样，权限可以被授予一整个组或从一整个组回收。在<productname>PostgreSQL</productname>中通过创建一个表示组的角色来实现，并且然后将在该组角色中的<firstterm>成员关系</>授予给单独的用户角色。
  </para>

  <para>
   要建立一个组角色，首先创建该角色：
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
   通常被用作一个组的角色不需要有<literal>LOGIN</>属性，不过如果你希望你也可以设置它。
  </para>

  <para>
   一旦组角色存在，你可以使用<xref linkend="sql-grant">和<xref linkend="sql-revoke">命令增加和移除成员：
<synopsis>
GRANT <replaceable>group_role</replaceable> TO <replaceable>role1</replaceable>, ... ;
REVOKE <replaceable>group_role</replaceable> FROM <replaceable>role1</replaceable>, ... ;
</synopsis>
   你也可以为其他组角色授予成员关系（因为组角色和非组角色之间其实没有任何区别）。数据库将不会让你设置环状的成员关系。另外，不允许把一个角色中的成员关系授予给<literal>PUBLIC</literal>。
  </para>

  <para>
   组角色的成员可以以两种方式使用角色的权限。第一，一个组的每一个成员可以显式地做<xref linkend="sql-set-role">来临时<quote>称为</>组角色。在这种状态中，数据库会话可以访问组角色而不是原始登录角色的权限，并且任何被创建的数据库对象被认为属于组角色而不是登录角色。第二，有<literal>INHERIT</>属性的成员角色自动地具有它们所属角色的权限，包括任何组角色继承得到的权限。作为一个例子，假设我们已经有：
<programlisting>
CREATE ROLE joe LOGIN INHERIT;
CREATE ROLE admin NOINHERIT;
CREATE ROLE wheel NOINHERIT;
GRANT admin TO joe;
GRANT wheel TO admin;
</programlisting>
   在作为角色<literal>joe</>连接后，一个数据库会话将立即拥有直接授予给<literal>joe</>的权限，外加任何授予给<literal>admin</>的权限，因为<literal>joe</><quote>继承了</> <literal>admin</>的权限。然而，授予给<literal>wheel</>的权限不可用，因为即使<literal>joe</>是<literal>wheel</>的一个间接成员，但是该成员关系是通过带<literal>NOINHERIT</>属性的<literal>admin</>得到的。在：
<programlisting>
SET ROLE admin;
</programlisting>
   之后，该会话将只拥有授予给<literal>admin</>的权限，但是没有授予给<literal>joe</>的权限。在执行：
<programlisting>
SET ROLE wheel;
</programlisting>
   之后，该会话将只拥有授予给<literal>wheel</>的权限，但是没有授予给<literal>joe</>或<literal>admin</>的权限。初始的权限状态可以使用下面命令之一恢复：
<programlisting>
SET ROLE joe;
SET ROLE NONE;
RESET ROLE;
</programlisting>
  </para>

  <note>
   <para>
    <command>SET ROLE</>命令总是允许选择原始登录角色的直接或间接组角色。因此，在上面的例子中，在成为<literal>wheel</>之前不必先成为<literal>admin</>。
   </para>
  </note>

  <note>
   <para>
    在 SQL 标准中，用户和角色之间的区别很清楚，并且用户不会自动继承权限而角色会继承。这种行为在<productname>PostgreSQL</productname>中也可以实现：为要用作 SQL 角色的角色给予<literal>INHERIT</>属性，而为要用作 SQL 用户的角色给予<literal>NOINHERIT</>属性。不过，为了向后兼容 8.1 以前的发布（在其中用户总是拥有它们所在组的权限），<productname>PostgreSQL</productname>默认给所有的角色<literal>INHERIT</>属性。
   </para>
  </note>

  <para>
   角色属性<literal>LOGIN</>、<literal>SUPERUSER</>、<literal>CREATEDB</>和<literal>CREATEROLE</>可以被认为是一种特殊权限，但是它们从来不会像数据库对象上的普通权限那样被继承。要使用这些属性，你必须实际<command>SET ROLE</>到一个有这些属性之一的特定角色。继续上述例子，我们可以选择授予<literal>CREATEDB</>和<literal>CREATEROLE</>给<literal>admin</>角色。然后一个以<literal>joe</>角色连接的会话将不会立即有这些权限，只有在执行了<command>SET ROLE admin</>之后才会拥有。
  </para>

  <para>
  </para>

  <para>
   要销毁一个组角色，使用<xref linkend="sql-droprole">：
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
   任何在该组角色中的成员关系会被自动撤销（但是成员角色不会受到影响）。不过注意该组角色所拥有的任何对象必须首先被丢弃或重新分配给其他属主；并且任何授予给组角色的权限必须被撤销。
  </para>
 </sect1>

 <sect1 id="perm-functions">
  <title>函数和触发器安全性</title>

  <para>
   函数和触发器允许用户在后端服务器中插入代码，其他用户不会注意到这些代码的执行。因此，两种机制允许用户相对容易地为其他人设置<quote>特洛伊木马</quote>。唯一真正的保护是收紧对能定义函数的用户的控制。
  </para>

  <para>
   在后端服务器进程中运行的函数带有数据库服务器守护进程的操作系统权限。如果用于函数的编程语言允许非检查的内存访问，它就可能改变服务器的内部数据结构。因此，在很多其他事情中，这些函数可能绕开任何系统访问控制。允许这种访问的函数语言被认为是<quote>不可信的</>，并且<productname>PostgreSQL</productname>只允许超级用户创建用这些语言编写的函数。
  </para>
 </sect1>

</chapter>

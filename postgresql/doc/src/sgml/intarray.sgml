<!-- doc/src/sgml/intarray.sgml -->

<sect1 id="intarray" xreflabel="intarray">
 <title>intarray</title>

 <indexterm zone="intarray">
  <primary>intarray</primary>
 </indexterm>

 <para>
  <filename>intarray</>模块提供了一些有用的函数和操作符来操纵不含空值的整数数组。也提供了对使用某些操作符的索引搜索的支持。
 </para>

 <para>
  如果一个提供的数组中包含任何 NULL 元素，所有这些操作都将抛出一个错误。
 </para>

 <para>
  很多这些操作只对一维数组有意义。尽管它们将接受更多维数的数组输入，数据将被当作一个按照存储顺序排列的线性数组对待。
 </para>

 <sect2>
  <title><filename>intarray</> 函数和操作符</title>

  <para>
   <filename>intarray</filename>模块提供的函数被列在<xref linkend="intarray-func-table">中，操作符被列在<xref linkend="intarray-op-table">中。
  </para>

  <table id="intarray-func-table">
   <title><filename>intarray</> 函数</title>

   <tgroup cols="5">
    <thead>
     <row>
      <entry>函数</entry>
      <entry>返回类型</entry>
      <entry>描述</entry>
      <entry>例子</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>icount(int[])</function><indexterm><primary>icount</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <entry>数组中元素的数量</entry>
      <entry><literal>icount('{1,2,3}'::int[])</literal></entry>
      <entry><literal>3</literal></entry>
     </row>

     <row>
      <entry><function>sort(int[], text dir)</function><indexterm><primary>sort</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>排序数组 &mdash; <parameter>dir</>必须是<literal>asc</>或<literal>desc</></entry>
      <entry><literal>sort('{1,2,3}'::int[], 'desc')</literal></entry>
      <entry><literal>{3,2,1}</literal></entry>
     </row>

     <row>
      <entry><function>sort(int[])</function></entry>
      <entry><type>int[]</type></entry>
      <entry>以升序排序</entry>
      <entry><literal>sort(array[11,77,44])</literal></entry>
      <entry><literal>{11,44,77}</literal></entry>
     </row>

     <row>
      <entry><function>sort_asc(int[])</function><indexterm><primary>sort_asc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>以升序排序</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>sort_desc(int[])</function><indexterm><primary>sort_desc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>以降序排序</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>uniq(int[])</function><indexterm><primary>uniq</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>移除临近的重复</entry>
      <entry><literal>uniq(sort('{1,2,3,2,1}'::int[]))</literal></entry>
      <entry><literal>{1,2,3}</literal></entry>
     </row>

     <row>
      <entry><function>idx(int[], int item)</function><indexterm><primary>idx</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <entry>匹配<parameter>item</>的第一个元素的索引（如果没有为 0）</entry>
      <entry><literal>idx(array[11,22,33,22,11], 22)</literal></entry>
      <entry><literal>2</literal></entry>
     </row>

     <row>
      <entry><function>subarray(int[], int start, int len)</function><indexterm><primary>subarray</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>从位置<parameter>start</>开始的由<parameter>len</>个元素组成的元组部分</entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2, 3)</literal></entry>
      <entry><literal>{2,3,2}</literal></entry>
     </row>

     <row>
      <entry><function>subarray(int[], int start)</function></entry>
      <entry><type>int[]</type></entry>
      <entry>从位置<parameter>start</>开始的元组部分</entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2)</literal></entry>
      <entry><literal>{2,3,2,1}</literal></entry>
     </row>

     <row>
      <entry><function>intset(int)</function><indexterm><primary>intset</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>创建单一元素数组</entry>
      <entry><literal>intset(42)</literal></entry>
      <entry><literal>{42}</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <table id="intarray-op-table">
   <title><filename>intarray</> 操作符</title>

   <tgroup cols="3">
    <thead>
     <row>
      <entry>操作符</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>int[] &amp;&amp; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>重叠 &mdash; 如果数组有至少一个公共元素，则为<literal>true</></entry>
     </row>
     <row>
      <entry><literal>int[] @&gt; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>包含 &mdash; 如果左数组包含右数组，则为<literal>true</></entry>
     </row>
     <row>
      <entry><literal>int[] &lt;@ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>被包含 &mdash; 如果左数组被右数组包含，则为<literal>true</></entry>
     </row>
     <row>
      <entry><literal># int[]</literal></entry>
      <entry><type>int</type></entry>
      <entry>数组中元素的数目</entry>
     </row>
     <row>
      <entry><literal>int[] # int</literal></entry>
      <entry><type>int</type></entry>
      <entry>索引（与<function>idx</>函数相同）</entry>
     </row>
     <row>
      <entry><literal>int[] + int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>把元素推到数组中（增加到数组末尾）</entry>
     </row>
     <row>
      <entry><literal>int[] + int[]  </literal></entry>
      <entry><type>int[]</type></entry>
      <entry>数组串接（把右数组增加到左数组的末尾）</entry>
     </row>
     <row>
      <entry><literal>int[] - int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>从数组中移除匹配右参数的项</entry>
     </row>
     <row>
      <entry><literal>int[] - int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>从左数组中移除右数组的元素</entry>
     </row>
     <row>
      <entry><literal>int[] | int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>参数的联合</entry>
     </row>
     <row>
      <entry><literal>int[] | int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>数组的联合</entry>
     </row>
     <row>
      <entry><literal>int[] &amp; int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>数组的交</entry>
     </row>
     <row>
      <entry><literal>int[] @@ query_int</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>如果数组满足查询（见下文），则为<literal>true</></entry>
     </row>
     <row>
      <entry><literal>query_int ~~ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>如果数组满足查询（<literal>@@</>交换子），则为<literal>true</></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   （在 PostgreSQL 8.2 之前，包含操作符<literal>@&gt;</>和<literal>&lt;@</>分别被称为<literal>@</>和<literal>~</>。这些名称仍然有效，但是已被弃用并且将最终被移除。注意旧名称与核心几何数据类型之前所遵循的习惯相反！）
  </para>

  <para>
   操作符<literal>&amp;&amp;</>、<literal>@&gt;</>和<literal>&lt;@</>等效于<productname>PostgreSQL</>的内建同名操作符，不过它们只能在不含空值的整数数组上工作，而内建的操作符可以对任何数组类型工作。这种限制使它们在很多情况下比内建操作符更快。
  </para>

  <para>
   <literal>@@</>和<literal>~~</>操作符测试一个数组是否满足一个<firstterm>query</>，它被表示成一种特殊数据类型<type>query_int</>的一个值。一个由整数值组成的<firstterm>查询</>会被针对数组的元素检查，可能会组合使用操作符<literal>&amp;</>（AND）、<literal>|</>（OR）以及<literal>!</>（NOT）。根据需要可以使用圆括号。例如，查询<literal>1&amp;(2|3)</>匹配包含 1 并且还包括 2 或 3 的数组。
  </para>
 </sect2>

 <sect2>
  <title>索引支持</title>

  <para>
   <filename>intarray</>提供对于<literal>&amp;&amp;</>、<literal>@&gt;</>、<literal>&lt;@</>和<literal>@@</>操作符以及常规数组相等的索引支持。
  </para>

  <para>
   提供了两种 GiST 索引操作符类：<literal>gist__int_ops</>（被默认使用）适合于中小尺寸的数据集，而<literal>gist__intbig_ops</>使用一种更大的签名并且更适合于索引大型数据集（即，包含大量可区分数组值的列）。该实现使用了一种带有内建有损压缩的 RD 树结构。
  </para>

  <para>
   也有一种非默认的 GIN 操作符类<literal>gin__int_ops</>支持相同的操作符。
  </para>

  <para>
   在 GiST 和 GIN 索引之间的选择取决于 GiST 和 GIN 的相对性能特点，这将在其他地方讨论。作为一种经验法则，搜索 GIN 索引比 GiST 索引更快，但是在构建或更新上较慢。因此 GIN 更适合于静态数据，而 GiST 更适合于经常更新的数据。
  </para>
 </sect2>

 <sect2>
  <title>例子</>

<programlisting>
-- 一个消息可以在一个或多个<quote>小节</>中
CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);

-- 创建专门的索引
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops);

-- 选择小节 1 或 2 中的消息 - OVERLAP 操作符
SELECT message.mid FROM message WHERE message.sections &amp;&amp; '{1,2}';

-- 选择小节 1 和 2 中的消息 - CONTAINS 操作符
SELECT message.mid FROM message WHERE message.sections @&gt; '{1,2}';

-- 相同，使用 QUERY 操作符
SELECT message.mid FROM message WHERE message.sections @@ '1&amp;2'::query_int;
</programlisting>
 </sect2>

 <sect2>
  <title>测试基准</title>

  <para>
   源代码目录<filename>contrib/intarray/bench</>包含有一个基准测试套件。要运行：
  </para>

<programlisting>
cd .../bench
createdb TEST
psql TEST &lt; ../_int.sql
./create_test.pl | psql TEST
./bench.pl
</programlisting>

  <para>
   <filename>bench.pl</>脚本有多个选项，当它不使用任何参数运行时会显示这些选项。
  </para>
 </sect2>

 <sect2>
  <title>作者</title>

  <para>
   所有工作由 Teodor Sigaev（<email>teodor@sigaev.ru</email>）和 Oleg Bartunov（<email>oleg@sai.msu.su</email>）完成。更多信息请见<ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>。Andrey Oktyabrski 完成了一项伟大的工作，他增加了新的函数和操作。
  </para>
 </sect2>

</sect1>

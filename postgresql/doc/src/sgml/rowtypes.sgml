<!-- doc/src/sgml/rowtypes.sgml -->

<sect1 id="rowtypes">
 <title>组合类型</title>

 <indexterm>
  <primary>组合类型</primary>
 </indexterm>

 <indexterm>
  <primary>行类型</primary>
 </indexterm>

 <para>
  一个<firstterm>组合类型</>表示一行或一个记录的结构，它本质上就是一个域名和它们数据类型的列表。<productname>PostgreSQL</productname>允许把组合类型用在很多能用简单类型的地方。例如，一个表的一列可以被声明为一种组合类型。
 </para>

 <sect2>
  <title>组合类型的声明</title>

 <para>
  这里有两个定义组合类型的简单例子：
<programlisting>
CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
</programlisting>
  该语法堪比<command>CREATE TABLE</>，不过只能指定域名和类型，当前不能包括约束（例如<literal>NOT NULL</>）。注意<literal>AS</>关键词是必不可少的，如果没有它，系统将认为用户想要的是一种不同类型的<command>CREATE TYPE</>命令，并且你将得到奇怪的语法错误。
 </para>

 <para>
  定义了类型之后，我们可以用它们来创建表：

<programlisting>
CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);

INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);
</programlisting>

  or functions:

<programlisting>
CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric
AS 'SELECT $1.price * $2' LANGUAGE SQL;

SELECT price_extension(item, 10) FROM on_hand;
</programlisting>

 </para>

 <para>
  只要你创建了一个表，也会自动创建一个组合类型来表示表的行类型，它具有和表一样的名称。例如，如果我们说：
<programlisting>
CREATE TABLE inventory_item (
    name            text,
    supplier_id     integer REFERENCES suppliers,
    price           numeric CHECK (price &gt; 0)
);
</programlisting>
  那么和上面所示相同的<literal>inventory_item</>组合类型将成为一种副产品，并且可以按上面所说的进行使用。不过要注意当前实现的一个重要限制：因为没有约束与一个组合类型相关，显示在表定义中的约束<emphasis>不会应用</>于表外组合类型的值（一种部分的变通方案是用域类型作为组合类型的成员）。
 </para>
 </sect2>

 <sect2>
  <title>组合值输入</title>

  <indexterm>
   <primary>组合类型</primary>
   <secondary>常量</secondary>
  </indexterm>

  <para>
   要把一个组合值写作一个文字常量，将该域值封闭在圆括号中并且用逗号分隔它们。你可以在任何域值周围放上双引号，并且如果该域值包含逗号或圆括号则必须这样做（更多细节见下文）。这样，一个组合常量的一般格式是下面这样的：
<synopsis>
'( <replaceable>val1</replaceable> , <replaceable>val2</replaceable> , ... )'
</synopsis>
   一个例子是：
<programlisting>
'("fuzzy dice",42,1.99)'
</programlisting>
   这将是上文定义的<literal>inventory_item</>类型的一个合法值。要让一个域为 NULL，在列表中它的位置上根本不写字符。例如，这个常量指定其第三个域为 NULL：
<programlisting>
'("fuzzy dice",42,)'
</programlisting>
   如果你写一个空字符串而不是 NULL，写上两个引号：
<programlisting>
'("",42,)'
</programlisting>
   这里第一个域是一个非 NULL 空字符串，第三个是 NULL。
  </para>

  <para>
   （这些常量实际上只是<xref linkend="sql-syntax-constants-generic">中讨论的一般类型常量的特殊类型。该常量最初被当做一个字符串并且被传递给组合类型输入转换例程。一次显式类型说明可能是必要的）。
  </para>

 <para>
  <literal>ROW</literal>表达式也能被用来构建组合值。在大部分情况下，比起使用字符串语法，这相当简单易用，因为你不必担心多层引用。我们已经在上文用过这种方法：
<programlisting>
ROW('fuzzy dice', 42, 1.99)
ROW('', 42, NULL)
</programlisting>
  只要在表达式中有多于一个域，ROW 关键词实际上就是可选的，因此这些可以简化成：
<programlisting>
('fuzzy dice', 42, 1.99)
('', 42, NULL)
</programlisting>
  <xref linkend="sql-syntax-row-constructors">中更加详细地讨论了<literal>ROW</>表达式语法。
 </para>
 </sect2>

 <sect2>
  <title>访问组合类型</title>

 <para>
  要访问一个组合列的一个域，可以写成一个点和域的名称，更像从一个表名中选择一个域。事实上，它太像从一个表名中选择，这样我们不得不使用圆括号来避免让解析器混淆。例如，你可能尝试从例子表<literal>on_hand</>中选取一些子域：

<programlisting>
SELECT item.name FROM on_hand WHERE item.price &gt; 9.99;
</programlisting>

  这不会有用，因为名称<literal>item</>会被当成是一个表名，而不是<literal>on_hand</>的一个列名。你必须写成这样：

<programlisting>
SELECT (item).name FROM on_hand WHERE (item).price &gt; 9.99;
</programlisting>

  或者你还需要使用表名（例如在一个多表查询中），像这样：

<programlisting>
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price &gt; 9.99;
</programlisting>

  现在加上括号的对象就被正确地解释为对<literal>item</>列的引用，然后可以从中选出子域。
 </para>

 <para>
  只要你从一个组合值中选择一个域，相似的语法问题就适用。例如，要从一个返回组合值的函数的结果中选取一个域，你需要这样写：

<programlisting>
SELECT (my_func(...)).field FROM ...
</programlisting>

  如果没有额外的圆括号，这将生成一个语法错误。
 </para>
 </sect2>

 <sect2>
  <title>修改组合类型</title>

 <para>
  这里有一些插入和更新组合列的正确语法的例子。首先，插入或者更新一整个列：

<programlisting>
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));

UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;
</programlisting>

  第一个例子忽略<literal>ROW</>，第二个例子使用它，我们可以用两者之一完成。
 </para>

 <para>
  我们能够更新一个组合列的单个子域：

<programlisting>
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;
</programlisting>

  注意这里我们不需要（事实上也不能）把圆括号放在正好出现在<literal>SET</>之后的列名周围，但是当在等号右边的表达式中引用同一列时确实需要圆括号。
 </para>

 <para>
  并且我们也可以指定子域作为<command>INSERT</>的目标：

<programlisting>
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);
</programlisting>

  如果我们没有为该列的所有子域提供值，剩下的子域将用空值填充。
 </para>
 </sect2>

 <sect2 id="rowtypes-io-syntax">
  <title>组合类型输入和输出语法</title>

  <para>
   一个组合值的外部文本表达由根据域类型的 I/O 转换规则解释的项，外加指示组合结构的装饰组成。装饰由整个值周围的圆括号（<literal>(</>和<literal>)</>），外加相邻项之间的逗号（<literal>,</>）组成。圆括号之外的空格会被忽略，但是在圆括号之内空格会被当成域值的一部分，并且根据域数据类型的输入转换规则可能有意义，也可能没有意义。例如，在
<programlisting>
'(  42)'
</programlisting>
   中，如果域类型是整数则空格会被忽略，而如果是文本则空格不会被忽略。
  </para>

  <para>
   如前所示，在写一个组合值时，你可以在任意域值周围写上双引号。如果不这样做会让域值迷惑组合值解析器，你就<emphasis>必须</>这么做。特别地，包含圆括号、逗号、双引号或反斜线的域必须用双引号引用。要把一个双引号或者反斜线放在一个被引用的组合域值中，需要在它前面放上一个反斜线（还有，一个双引号引用的域值中的一对双引号被认为是表示一个双引号字符，这和 SQL 字符串中单引号的规则类似）。另一种办法是，你可以避免引用以及使用反斜线转义来保护所有可能被当作组合语法的数据字符。
  </para>

  <para>
   一个全空的域值（在逗号或圆括号之间完全没有字符）表示一个 NULL。要写一个空字符串值而不是 NULL，可以写成<literal>""</>。
  </para>

  <para>
   如果域值是空串或者包含圆括号、逗号、双引号、反斜线或空格，组合输出例程将在域值周围放上双引号（对空格这样处理并不是不可缺少的，但是可以提高可读性）。嵌入在域值中的双引号及反斜线将被双写。
  </para>

 <note>
  <para>
   记住你在一个 SQL 命令中写的东西将首先被解释为一个字符串，然后才会被解释为一个组合。这就让你所需要的反斜线数量翻倍（假定使用了转义字符串语法）。例如，要在组合值中插入一个含有一个双引号和一个反斜线的<type>text</>域，你需要写成：
<programlisting>
INSERT ... VALUES (E'("\\"\\\\")');
</programlisting>
   字符串处理器会移除一层反斜线，这样在组合值解析器那里看到的就会是<literal>("\"\\")</>。接着，字符串被交给<type>text</>数据类型的输入例程并且变成<literal>"\</>（如果我们使用的数据类型的输入例程也会特别处理反斜线，例如<type>bytea</>，在命令中我们可能需要八个反斜线用来在组合域中存储一个反斜线）。美元引用（见<xref linkend="sql-syntax-dollar-quoting">）可以被用来避免双写反斜线。
  </para>
 </note>

 <tip>
  <para>
   当在 SQL 命令中书写组合值时，<literal>ROW</>构造器语法通常比组合文字语法更容易使用。在<literal>ROW</>中，单个域值可以按照平时不是组合值成员的写法来写。
  </para>
 </tip>
 </sect2>

</sect1>

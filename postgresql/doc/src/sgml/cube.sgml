<!-- doc/src/sgml/cube.sgml -->

<sect1 id="cube" xreflabel="cube">
 <title>cube</title>

 <indexterm zone="cube">
  <primary>cube（扩展）</primary>
 </indexterm>

 <para>
  这个模块实现了一种数据类型<type>cube</>来表示多维立方体。
 </para>

 <sect2>
  <title>语法</title>

  <para>
   <xref linkend="cube-repr-table">展示了<type>cube</>类型有效的外部表示。<replaceable>x</>、<replaceable>y</>等表示浮点数。
  </para>

  <table id="cube-repr-table">
   <title>立方体外部表示</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal><replaceable>x</></literal></entry>
      <entry>一个一维点（或者长度为零的一维区间）
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</>)</literal></entry>
      <entry>同上</entry>
     </row>
     <row>
      <entry><literal><replaceable>x1</>,<replaceable>x2</>,...,<replaceable>xn</></literal></entry>
      <entry>n-维空间中的一个点，内部表示为一个零容积立方体
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</>,<replaceable>x2</>,...,<replaceable>xn</>)</literal></entry>
      <entry>同上</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</>),(<replaceable>y</>)</literal></entry>
      <entry>开始于<replaceable>x</>并且结束于<replaceable>y</>的一个一维区间，反之亦然。顺序并不重要
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal></entry>
      <entry>同上</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</>,...,<replaceable>xn</>),(<replaceable>y1</>,...,<replaceable>yn</>)</literal></entry>
      <entry>一个 n-维立方体，用它的对角顶点对表示
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x1</>,...,<replaceable>xn</>),(<replaceable>y1</>,...,<replaceable>yn</>)]</literal></entry>
      <entry>同上</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   一个立方体的对角录入的顺序无关紧要。如果需要创建一种统一的<quote>左下 &mdash; 右上</>的内部表示，<type>cube</>函数会自动地交换值。
  </para>

  <para>
   空白空间会被忽略，因此<literal>[(<replaceable>x</>),(<replaceable>y</>)]</literal>与<literal>[ ( <replaceable>x</> ), ( <replaceable>y</> ) ]</literal>相同。
  </para>
 </sect2>

 <sect2>
  <title>精度</title>

  <para>
   值在内部被存储为 64 位浮点数。这意味着超过 16 位有效位的数字将被截断。
  </para>
 </sect2>

 <sect2>
  <title>用法</title>

  <para>
   <filename>cube</>模块包括一个用于<type>cube</>值的 GiST 索引操作符类。<xref linkend="cube-gist-operators">中展示了 GiST 操作符类支持的操作符。
  </para>

  <table id="cube-gist-operators">
   <title>立方体 GiST 操作符</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>操作符</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>a = b</></entry>
      <entry>立方体 a 和 b 相同。</entry>
     </row>

     <row>
      <entry><literal>a &amp;&amp; b</></entry>
      <entry>立方体 a 和 b 重叠。</entry>
     </row>

     <row>
      <entry><literal>a @&gt; b</></entry>
      <entry>立方体 a 包含 立方体 b。</entry>
     </row>

     <row>
      <entry><literal>a &lt;@ b</></entry>
      <entry>立方体 a 被包含在立方体 b 中。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   （在 PostgreSQL 8.2 之前，包含操作符<literal>@&gt;</>和<literal>&lt;@</>分别被称为<literal>@</>和<literal>~</>。这些名称仍然可用，但是已经被废弃并且最终将会退休。注意旧的名字与之前核心几何数据类型遵循的习惯相反！）
  </para>

  <para>
   也提供了标准的 B-树操作符，例如

   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>操作符</entry>
       <entry>描述</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal>[a, b] &lt; [c, d]</literal></entry>
       <entry>小于</entry>
      </row>

      <row>
       <entry><literal>[a, b] &gt; [c, d]</literal></entry>
       <entry>大于</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

   这些操作符除了排序之外没有什么实际意义。这些操作符首先比较 a 和 c，如果相等再比较 b 和 d。这在大部分情况下能导致不错的排序，如果你想对这种类型使用 ORDER BY 这将有所帮助。
  </para>

  <para>
   <xref linkend="cube-functions-table">展示了可用的函数。
  </para>

  <table id="cube-functions-table">
   <title>立方体函数</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal>cube(float8) 返回 cube</literal></entry>
      <entry>制造一个一维立方体，坐标都是相同的。
       <literal>cube(1) == '(1)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8, float8) 返回 cube</literal></entry>
      <entry>制造一个一维立方体。
       <literal>cube(1,2) == '(1),(2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8[]) 返回 cube</literal></entry>
      <entry>使用数组定义的坐标制造一个零容积的立方体。
       <literal>cube(ARRAY[1,2]) == '(1,2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(float8[], float8[]) 返回 cube</literal></entry>
      <entry>用由两个数组定义的右上和左下坐标制造一个立方体，两个数组必须等长。
       <literal>cube('{1,2}'::float[], '{3,4}'::float[]) == '(1,2),(3,4)'
       </literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(cube, float8) 返回 cube</literal></entry>
      <entry>在一个现有的立方体上增加一维来制造一个新立方体，对新坐标的各个部分都采用相同的值。这可以用于从计算得到的值逐渐地构建立方体。
       <literal>cube('(1)',2) == '(1,2),(1,2)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube(cube, float8, float8) 返回 cube</literal></entry>
      <entry>在一个现有的立方体上增加一维来制造一个新立方体。这可以用于从计算得到的值逐渐地构建立方体。<literal>cube('(1,2)',3,4) == '(1,3),(2,4)'</literal>
      </entry>
     </row>

     <row>
      <entry><literal>cube_dim(cube) 返回 int</literal></entry>
      <entry>返回该立方体的维数
      </entry>
     </row>

     <row>
      <entry><literal>cube_ll_coord(cube, int) 返回 double </literal></entry>
      <entry>返回一个立方体的左下角的第 n 个坐标值
      </entry>
     </row>

    <row>
      <entry><literal>cube_ur_coord(cube, int) 返回 double
      </literal></entry>
      <entry>返回一个立方体的右上角的第 n 个坐标值
      </entry>
     </row>

     <row>
      <entry><literal>cube_is_point(cube) 返回 bool</literal></entry>
      <entry>如果一个立方体是一个点则返回真，也就是两个定义点相同。</entry>
     </row>

     <row>
      <entry><literal>cube_distance(cube, cube) 返回 double</literal></entry>
      <entry>返回两个立方体之间的距离。如果两个都是点，这就是普通距离函数。
      </entry>
     </row>

     <row>
      <entry><literal>cube_subset(cube, int[]) 返回 cube
      </literal></entry>
      <entry>从一个现有的立方体制造一个新立方体，使用来自于一个数组的维索引列表。它可以被用来查找一个单一维度的 LL 和 UR 坐标，例如<literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[2]) = '(3),(7)'</>。或者它可以被用来去除维度，或者按照需要对它们重新排序，例如
       <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[3,2,1,1]) = '(5, 3,
       1, 1),(8, 7, 6, 6)'</>。
      </entry>
     </row>

     <row>
      <entry><literal>cube_union(cube, cube) 返回 cube</literal></entry>
      <entry>产生两个立方体的并
      </entry>
     </row>

     <row>
      <entry><literal>cube_inter(cube, cube) 返回 cube</literal></entry>
      <entry>产生两个立方体的交
      </entry>
     </row>

     <row>
      <entry><literal>cube_enlarge(cube c, double r, int n) 返回 cube</literal></entry>
      <entry>用一个指定的半径在至少 n 个维度上增加立方体的尺寸。如果该半径是负值，则该立方体会收缩。这有助于围绕一个点创建一个外包盒来搜索附近点。所有已定义的维度都会按照半径 r 被改变。LL 坐标按照 r 被减小并且 UR 坐标按照 r 被增加。如果一个 LL 坐标被增加得超过对应的 UR 坐标（这只会发生在 r &lt; 0 时），则两个坐标会被设置为它们的均值。如果 n 大于已定义的维度数并且该立方体被增加（r &gt;= 0），那么 0 被用作额外坐标的基础。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>默认值</title>

  <para>
   我相信这个并：
  </para>
<programlisting>
select cube_union('(0,5,2),(2,3,1)', '0');
cube_union
-------------------
(0, 0, 0),(2, 5, 2)
(1 row)
</programlisting>

   <para>
    不会与常识矛盾，下面的交也不会
   </para>

<programlisting>
select cube_inter('(0,-1),(1,1)', '(-2),(2)');
cube_inter
-------------
(0, 0),(1, 0)
(1 row)
</programlisting>

   <para>
    在所有不同维度立方体的二元操作中，我假定低纬度的那一个要做笛卡尔投影，即为字符串表示中被省略的坐标取零。上面的例子等同于：
   </para>

<programlisting>
cube_union('(0,5,2),(2,3,1)','(0,0,0),(0,0,0)');
cube_inter('(0,-1),(1,1)','(-2,0),(2,0)');
</programlisting>

   <para>
    下列包含谓词使用点语法，不过实际上第二个参数在内部被表示为一个盒子。这种语法让我们不必定义一种单独的点类型以及用于（盒子, 点）谓词的函数。
   </para>

<programlisting>
select cube_contains('(0,0),(1,1)', '0.5,0.5');
cube_contains
--------------
t
(1 row)
</programlisting>
 </sect2>

 <sect2>
  <title>注解</title>

  <para>
   用法的例子可见回归测试<filename>sql/cube.sql</>。
  </para>

  <para>
   为了不容易出问题，对于立方体的维度数有 100 的限制。如果你想要更大的立方体，可以在<filename>cubedata.h</>中修改。
  </para>
 </sect2>

 <sect2>
  <title>工作人员</title>

  <para>
   原作者：Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>，数学与计算机科学部，阿尔贡国家实验室。
  </para>

  <para>
   我的感谢主要要献给 Joe Hellerstein 教授（<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>），他阐明了 GiST （<ulink url="http://gist.cs.berkeley.edu/"></ulink>），还要送给他以前的学生 Andy Dong，他为 Illustra 编写了例子。我也对所有的 Postgres 开发者（现在的和以前的）心存感激，他们让我能够创造自己的世界并且宁静地生活在其中。我也要感谢阿尔贡实验室和美国能源局对我多年数据库研究的支持。
  </para>

  <para>
   这个包的小更新由 Bruno Wolff III <email>bruno@wolff.to</email>于 2002 年 8/9 月完成。这些修改包括将精度从单精度改为双精度以及增加了一些新的函数。
  </para>

  <para>
   额外的更新由 Joshua Reich <email>josh@root.net</email> 在 2006 年 7 月做出。其中包括<literal>cube(float8[], float8[])</literal>并且将代码从废弃的 V0 协议改到 V1 调用协议。
  </para>
 </sect2>

</sect1>

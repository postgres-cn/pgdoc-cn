<!-- doc/src/sgml/manage-ag.sgml -->

<chapter id="managing-databases">
 <!-- 
 <title>Managing Databases</title> 
 -->
 <title>管理数据库</title>

 <!-- 
 <indexterm zone="managing-databases"><primary>database</></> 
 -->
 <indexterm zone="managing-databases"><primary>数据库</></>
 <!--
<para>
  Every instance of a running <productname>PostgreSQL</productname>
  server manages one or more databases.  Databases are therefore the
  topmost hierarchical level for organizing <acronym>SQL</acronym>
  objects (<quote>database objects</quote>).  This chapter describes
  the properties of databases, and how to create, manage, and destroy
  them.
 </para>
-->
<para>
每个正在运行的<productname>PostgreSQL</productname>服务器实例都管理着一个或多个数据库。
因此，在组织<acronym>SQL</acronym>对象(<quote>数据库对象</quote>)的层次中，数据库位于最顶层。
本章描述数据库的属性，以及如何创建、管理、删除它们。
</para>

 <sect1 id="manage-ag-overview">
  <!-- 
  <title>Overview</title> 
  -->
  <title>概述</title>

  <indexterm zone="manage-ag-overview">
   <!-- 
   <primary>schema</primary> 
   -->
   <primary>概要</primary>
  </indexterm>

  <!--
<para>
   A database is a named collection of <acronym>SQL</acronym> objects
   (<quote>database objects</quote>).  Generally, every database
   object (tables, functions, etc.) belongs to one and only one
   database.  (However there are a few system catalogs, for example
   <literal>pg_database</>, that belong to a whole cluster and
   are accessible from each database within the cluster.)  More
   accurately, a database is a collection of schemas and the schemas
   contain the tables, functions, etc.  So the full hierarchy is:
   server, database, schema, table (or some other kind of object,
   such as a function).
  </para>
-->
<para>
数据库是一些<acronym>SQL</acronym>对象(<quote>数据库对象</quote>)的集合；
通常每个数据库对象(表、函数等)属于并且只属于一个数据库。不过有几个系统表
(比如<literal>pg_database</>)属于整个集群并且可以在集群之内的每个数据库里访问。
更准确地说，一个数据库是一个模式的集合，而模式包含表、函数等等。
因此完整的层次是这样的：服务器→数据库→模式→表(或者其它类型对象，比如函数)。
</para>

  <!--
<para>
   When connecting to the database server, a client must specify in
   its connection request the name of the database it wants to connect
   to. It is not possible to access more than one database per
   connection. However, an application is not restricted in the number of
   connections it opens to the same or other databases.  Databases are
   physically separated and access control is managed at the
   connection level.  If one <productname>PostgreSQL</> server
   instance is to house projects or users that should be separate and
   for the most part unaware of each other, it is therefore
   recommended to put them into separate databases.  If the projects
   or users are interrelated and should be able to use each other's
   resources, they should be put in the same database but possibly
   into separate schemas.  Schemas are a purely logical structure and who can
   access what is managed by the privilege system.  More information about
   managing schemas is in <xref linkend="ddl-schemas">.
  </para>
-->
<para>
在与数据库服务器连接的时候，应用应该在它的连接请求里指明它想连接的数据库名称。
不允许在一次连接里访问多个数据库(不过没有限制一个应用可以建立的连接数量)。
数据库是物理上相互隔离的，对它们的访问控制是在连接层次进行的。如果一个
<productname>PostgreSQL</>服务器实例用于承载那些应该分隔并且相互之间并不知晓的用户和项目，
那么我们建议把它们放在不同的数据库里。如果项目或者用户是相互关联的，
并且可以相互使用对方的资源，那么应该把它们放在同一个数据库里，但可能在不同的模式中。
模式只是一个纯粹的逻辑结构，谁能访问某个模式由权限系统控制。
有关管理模式的更多信息在<xref linkend="ddl-schemas">里。
</para>
  
<para>
<!--
   Databases are created with the <command>CREATE DATABASE</> command
   (see <xref linkend="manage-ag-createdb">) and destroyed with the
   <command>DROP DATABASE</> command
   (see <xref linkend="manage-ag-dropdb">).
   To determine the set of existing databases, examine the
   <structname>pg_database</> system catalog, for example
-->
数据库是使用<command>CREATE DATABASE</>命令创建的(参阅<xref linkend="manage-ag-createdb">)，
用<command>DROP DATABASE</>命令删除(参阅<xref linkend="manage-ag-dropdb">)。
要查看现有数据库的集合，可以检查系统表<structname>pg_database</>，比如
<synopsis>
SELECT datname FROM pg_database;
</synopsis>
<!-- 
   The <xref linkend="app-psql"> program's <literal>\l</> meta-command
   and <option>-l</> command-line option are also useful for listing the
   existing databases. 
-->
<xref linkend="app-psql">程序的<literal>\l</>元命令和<option>-l</>
命令行选项也可以用来列出现存的数据库。
  </para>

  <note>
   <!--
<para>
    The <acronym>SQL</> standard calls databases <quote>catalogs</>, but there
    is no difference in practice.
   </para>
-->
<para>
<acronym>SQL</>标准把数据库称作<quote>目录</>(catalog)，不过这两个东西实际上没有什么区别。
</para>
  </note>
 </sect1>

 <sect1 id="manage-ag-createdb">
  <!-- 
  <title>Creating a Database</title> 
  -->
  <title>创建一个数据库</title>

  <!-- 
  <indexterm><primary>CREATE DATABASE</></> 
  -->
  <indexterm><primary>创建数据库</></>

  <!--
<para>
   In order to create a database, the <productname>PostgreSQL</>
   server must be up and running (see <xref
   linkend="server-start">).
  </para>
-->
<para>
为了创建数据库，必须先运行<productname>PostgreSQL</>服务器(参阅<xref linkend="server-start">)。
</para>

  
<para>
<!--
   Databases are created with the SQL command
   <xref linkend="sql-createdatabase">:
-->
数据库是用 SQL 命令<xref linkend="sql-createdatabase">创建的：
<synopsis>
CREATE DATABASE <replaceable>name</>;
</synopsis>
<!-- 
   where <replaceable>name</> follows the usual rules for
   <acronym>SQL</acronym> identifiers.  The current role automatically
   becomes the owner of the new database. It is the privilege of the
   owner of a database to remove it later (which also removes all
   the objects in it, even if they have a different owner). 
-->
这里的<replaceable>name</>遵循<acronym>SQL</acronym>标识符的一般规则。
当前角色自动成为此新数据库的所有者。同时，以后删除这个数据库也是这个用户的特权
(同时还会删除其中的所有对象，即使那些对象有不同的所有者也这样)。
  </para>
  <!--
<para>
   The creation of databases is a restricted operation. See <xref
   linkend="role-attributes"> for how to grant permission.
  </para>
-->
<para>
创建数据库是一个有限制的操作。参阅<xref linkend="role-attributes">获取如何赋予权限的信息。
</para>

  <!--
<para>
   Since you need to be connected to the database server in order to
   execute the <command>CREATE DATABASE</command> command, the
   question remains how the <emphasis>first</> database at any given
   site can be created. The first database is always created by the
   <command>initdb</> command when the data storage area is
   initialized. (See <xref linkend="creating-cluster">.)  This
   database is called
   <literal>postgres</>.<indexterm><primary>postgres</></> So to
   create the first <quote>ordinary</> database you can connect to
   <literal>postgres</>.
  </para>
-->
<para>
因为你需要与数据库服务器连接才能执行<command>CREATE DATABASE</command>命令，
那么还有一个问题是<emphasis>第一个</>数据库是怎样创建的?
第一个数据库总是由<command>initdb</>命令在初始化数据存储区的时候创建的
(参阅<xref linkend="creating-cluster">)。这个数据库叫<literal>postgres</>
<indexterm><primary>postgres</></>。因此要创建第一个<quote>真正</>
的数据库时你可以与<literal>postgres</>连接。
</para>

  <!--
<para>
   A second database,
   <literal>template1</literal>,<indexterm><primary>template1</></>
   is also created during database cluster initialization.  Whenever a
   new database is created within the
   cluster, <literal>template1</literal> is essentially cloned.
   This means that any changes you make in <literal>template1</> are
   propagated to all subsequently created databases. Because of this,
   avoid creating objects in <literal>template1</> unless you want them
   propagated to every newly created database.  More details
   appear in <xref linkend="manage-ag-templatedbs">.
  </para>
-->
<para>
在数据库集群初始化时会创建另一个名为<literal>template1</literal>
<indexterm><primary>template1</></>的数据库。在创建一个新的数据库时，
实际上就是克隆(复制)了<literal>template1</literal>数据库。
这就意味着你对<literal>template1</>所做的任何修改都会传播到所有随后创建的数据库中。
因此，避免在<literal>template1</>中创建对象，除非你想要这些对象传播到每个新建的数据库中。
更多细节见<xref linkend="manage-ag-templatedbs">。
</para>
 
<para>
 <!--
 As a convenience, there is a program you can
   execute from the shell to create new databases,
   <command>createdb</>.<indexterm><primary>createdb</></>
-->
另外，为了方便，你还可以在shell中用<command>createdb</><indexterm><primary>createdb</></>
程序来创建新数据库：
<synopsis>
createdb <replaceable class="parameter">dbname</replaceable>
</synopsis>
<!-- 
   <command>createdb</> does no magic. It connects to the <literal>postgres</>
   database and issues the <command>CREATE DATABASE</> command,
   exactly as described above.
   The <xref linkend="app-createdb"> reference page contains the invocation
   details. Note that <command>createdb</> without any arguments will create
   a database with the current user name.
-->
<command>createdb</>没变什么魔术，它和<literal>postgres</>连接并执行<command>CREATE DATABASE</>
命令，就像上面描述的那样。<xref linkend="app-createdb">的手册页包含使用它的细节。
注意不带任何参数调用<command>createdb</>将创建与当前用户名同名的数据库。
  </para>

  <note>
   <!--
<para>
    <xref linkend="client-authentication"> contains information about
    how to restrict who can connect to a given database.
   </para>
-->
<para>
<xref linkend="client-authentication">包含有关如何限制哪些用户可以连接某个特定数据库的信息。
</para>
  </note>

  
<para>
<!--
   Sometimes you want to create a database for someone else, and have him
   become the owner of the new database, so he can
   configure and manage it himself.  To achieve that, use one of the
   following commands:
-->
有时候你想为其它人创建一个数据库，并且使他应该成为新数据库的所有者，
这样他就可以自己配置和管理这个数据库。要实现这个目标，使用下列命令中的一条：
<programlisting>
CREATE DATABASE <replaceable>dbname</> OWNER <replaceable>rolename</>;
</programlisting>
<!-- 
   from the SQL environment, or: 
-->
用于 SQL 环境，或：
<programlisting>
createdb -O <replaceable>rolename</> <replaceable>dbname</>
</programlisting>
<!-- 
   from the shell.
   Only the superuser is allowed to create a database for
   someone else (that is, for a role you are not a member of). 
-->
用于命令行。只有数据库的超级用户才能为其它用户创建数据库。
  </para>
 </sect1>

 <sect1 id="manage-ag-templatedbs">
  <!-- 
  <title>Template Databases</title> 
  -->
  <title>模板数据库</title>

  <!--
<para>
   <command>CREATE DATABASE</> actually works by copying an existing
   database.  By default, it copies the standard system database named
   <literal>template1</>.<indexterm><primary>template1</></> Thus that
   database is the <quote>template</> from which new databases are
   made.  If you add objects to <literal>template1</>, these objects
   will be copied into subsequently created user databases.  This
   behavior allows site-local modifications to the standard set of
   objects in databases.  For example, if you install the procedural
   language <application>PL/Perl</> in <literal>template1</>, it will
   automatically be available in user databases without any extra
   action being taken when those databases are created.
  </para>
-->
<para>
<command>CREATE DATABASE</>实际上是通过拷贝一个现有的数据库进行工作的。缺省时，
它拷贝名为<literal>template1</><indexterm><primary>template1</></>的标准系统数据库。
所以该数据库是创建新数据库的<quote>模板</>。如果你给<literal>template1</>增加对象，
这些对象将被拷贝到随后创建的用户数据库中。这样的行为允许节点对数据库中的标准套件进行修改。
比如，如果你把过程语言<application>PL/Perl</>安装到<literal>template1</>里，
那么你在创建用户数据库的时候它们就会自动可得，而不需要额外的动作。
</para>

  <!--
<para>
   There is a second standard system database named
   <literal>template0</>.<indexterm><primary>template0</></> This
   database contains the same data as the initial contents of
   <literal>template1</>, that is, only the standard objects
   predefined by your version of
   <productname>PostgreSQL</productname>.  <literal>template0</>
   should never be changed after the database cluster has been
   initialized.  By instructing
   <command>CREATE DATABASE</> to copy <literal>template0</> instead
   of <literal>template1</>, you can create a <quote>virgin</> user
   database that contains none of the site-local additions in
   <literal>template1</>.  This is particularly handy when restoring a
   <literal>pg_dump</> dump: the dump script should be restored in a
   virgin database to ensure that one recreates the correct contents
   of the dumped database, without conflicting with objects that
   might have been added to <literal>template1</> later on.
  </para>
-->
<para>
系统里还有名为<literal>template0</><indexterm><primary>template0</></>的第二个标准系统数据库，
这个数据库包含和<literal>template1</>初始时一样的数据内容，也就是说，
只包含标准的<productname>PostgreSQL</productname>对象。在数据库集群初始化之后，
我们不应该对<literal>template0</>做任何修改。通过告诉<command>CREATE DATABASE</>使用
<literal>template0</>而不是<literal>template1</>进行拷贝，你可以创建一个<quote>纯净</>
的用户数据库，它不会包含任何<literal>template1</>里所特有的东西。
这一点在恢复<literal>pg_dump</>转储的时候是非常方便的：
转储脚本应该在一个纯净的数据库中恢复以确保我们正确创建了被转储出的数据库内容，
而不会随后和可能已经添加到<literal>template1</>中的对象相冲突。
</para>

  <!--
<para>
   Another common reason for copying <literal>template0</> instead
   of <literal>template1</> is that new encoding and locale settings
   can be specified when copying <literal>template0</>, whereas a copy
   of <literal>template1</> must use the same settings it does.
   This is because <literal>template1</> might contain encoding-specific
   or locale-specific data, while <literal>template0</> is known not to.
  </para>
-->
<para>
拷贝<literal>template0</>而不是<literal>template1</>的另一个常见原因是在拷贝
<literal>template0</>时，可以指定新的编码和本地设置，而拷贝<literal>template1</>
时必须使用和<literal>template1</>相同的设置。这是因为<literal>template1</>
可能包含编码指定或本地指定的数据，而<literal>template0</>不这样。
</para>

  
<para>
<!--
   To create a database by copying <literal>template0</literal>, use:
-->
要通过拷贝<literal>template0</literal>的方法创建一个数据库，可使用：
<programlisting>
CREATE DATABASE <replaceable>dbname</> TEMPLATE template0;
</programlisting>
 <!-- 
 from the SQL environment, or: 
 -->
 用于 SQL 环境，或：
<programlisting>
createdb -T template0 <replaceable>dbname</>
</programlisting>
<!-- 
   from the shell. 
-->
用于 shell 环境。
  </para>
  <!--
<para>
   It is possible to create additional template databases, and indeed
   one can copy any database in a cluster by specifying its name
   as the template for <command>CREATE DATABASE</>.  It is important to
   understand, however, that this is not (yet) intended as
   a general-purpose <quote><command>COPY DATABASE</command></quote> facility.
   The principal limitation is that no other sessions can be connected to
   the source database while it is being copied.  <command>CREATE
   DATABASE</> will fail if any other connection exists when it starts;
   during the copy operation, new connections to the source database
   are prevented.
  </para>
-->
<para>
我们可以创建额外的模板数据库，而且实际上我们可以在一个集群中通过将
<command>CREATE DATABASE</>的模板声明为相应的数据库名拷贝任何数据库。不过，
我们必需明白，这个功能并非一般性的<quote><command>COPY DATABASE</command></quote>工具。
实际上，在拷贝操作的过程中，源数据库必需是空闲状态(没有正在处理的数据修改事务)。
如果在<command>CREATE DATABASE</>开始的时候存在其它连接，那么操作将会失败，
在拷贝期间，到源数据库的新连接都被阻止。
</para>

  <!--
<para>
   Two useful flags exist in <literal>pg_database</literal><indexterm><primary>pg_database</></> for each
   database: the columns <literal>datistemplate</literal> and
   <literal>datallowconn</literal>.  <literal>datistemplate</literal>
   can be set to indicate that a database is intended as a template for
   <command>CREATE DATABASE</>.  If this flag is set, the database can be
   cloned by any user with <literal>CREATEDB</> privileges; if it is not set,
   only superusers and the owner of the database can clone it.
   If <literal>datallowconn</literal> is false, then no new connections
   to that database will be allowed (but existing sessions are not terminated
   simply by setting the flag false).  The <literal>template0</literal>
   database is normally marked <literal>datallowconn = false</> to prevent its modification.
   Both <literal>template0</literal> and <literal>template1</literal>
   should always be marked with <literal>datistemplate = true</>.
  </para>
-->
<para>
在<literal>pg_database</literal><indexterm><primary>pg_database</></>里有两个有用的标志可以用于每个数据库：
<literal>datistemplate</literal>和<literal>datallowconn</literal>字段。<literal>datistemplate</literal>
表示该数据库是准备用作<command>CREATE DATABASE</>模板的。如果设置了这个标志，
那么该数据库可以由任何有<literal>CREATEDB</>权限的用户克隆；如果没有设置，
那么只有超级用户和该数据库的所有者可以克隆它。如果<literal>datallowconn</literal>为假，
那么将不允许与该数据库发生任何新的连接(不过现有的会话不会因为把该标志设置为假而终止)。
<literal>template0</literal>数据库通常被标记为<literal>datallowconn = false</>以避免对它的修改。
<literal>template0</literal>和<literal>template1</literal>都应该总是标记为<literal>datistemplate = true</>。
</para>

  <note>
   <!--
<para>
    <literal>template1</> and <literal>template0</> do not have any special
    status beyond the fact that the name <literal>template1</> is the default
    source database name for <command>CREATE DATABASE</>.
    For example, one could drop <literal>template1</> and recreate it from
    <literal>template0</> without any ill effects.  This course of action
    might be advisable if one has carelessly added a bunch of junk in
    <literal>template1</>. (To delete <literal>template1</literal>,
    it must have <literal>pg_database.datistemplate = false</>.)
   </para>
-->
<para>
<literal>template1</>和<literal>template0</>没有任何特殊的状态，
除了<literal>template1</>是<command>CREATE DATABASE</>的缺省源数据库名之外。比如，
我们可以删除<literal>template1</>然后从<literal>template0</>中创建它而不会有任何不良效果。
如果我们不小心在<literal>template1</>里加了一堆垃圾，那么我们就会建议做这样的操作。
（要删除<literal>template1</>，必须使<literal>pg_database.datistemplate = false</>。）
</para>

   <!--
<para>
    The <literal>postgres</> database is also created when a database
    cluster is initialized.  This database is meant as a default database for
    users and applications to connect to. It is simply a copy of
    <literal>template1</> and can be dropped and recreated if necessary.
   </para>
-->
<para>
在初始化数据库集群的时候，也会创建<literal>postgres</>数据库。
这个数据库用于做为用户和应用连接的缺省数据库。它只是<literal>template1</>的一个简单拷贝，
需要的时候可以删除或者重建。
</para>
  </note>
 </sect1>

 <sect1 id="manage-ag-config">
  <!-- 
  <title>Database Configuration</title> 
  -->
  <title>数据库配置</title>

  <!--
<para>
   Recall from <xref linkend="runtime-config"> that the
   <productname>PostgreSQL</> server provides a large number of
   run-time configuration variables.  You can set database-specific
   default values for many of these settings.
  </para>
-->
<para>
回顾一下<xref linkend="runtime-config"> 我们知道<productname>PostgreSQL</>
服务器提供了大量的运行时配置变量。你可以为许多这样的变量设置特定于数据库的缺省数值。
</para>

<para>
<!--
   For example, if for some reason you want to disable the
   <acronym>GEQO</acronym> optimizer for a given database, you'd
   ordinarily have to either disable it for all databases or make sure
   that every connecting client is careful to issue <literal>SET geqo
   TO off</literal>.  To make this setting the default within a particular
   database, you can execute the command:
-->
比如，如果由于某种原因，你想关闭某个数据库上的<acronym>GEQO</acronym>优化器，
你就不得不要么在一开始就在所有数据库中关闭它，
要么是保证每个连接过来的客户端都很小心地发出了<literal>SET geqo TO off</literal>命令。
要令这个设置在特定数据库里成为缺省，你可以执行下面的命令：
<programlisting>
ALTER DATABASE mydb SET geqo TO off;
</programlisting>
<!-- 
   This will save the setting (but not set it immediately).  In
   subsequent connections to this database it will appear as though
   <literal>SET geqo TO off;</literal> had been executed just before the
   session started.
   Note that users can still alter this setting during their sessions; it
   will only be the default.  To undo any such setting, use
   <literal>ALTER DATABASE <replaceable>dbname</> RESET
   <replaceable>varname</></literal>. 
-->
这样将保存该设置(但不是立即设置它)。在随后的连接中它将表现的像在会话开始后马上调用
<literal>SET geqo TO off;</literal>一样。请注意用户仍然可以在该会话中更改这个设置(它只是缺省)。
要撤消这样的设置，使用<literal>ALTER DATABASE <replaceable>dbname</> RESET <replaceable>varname</></literal>。
  </para>
 </sect1>

 <sect1 id="manage-ag-dropdb">
  <!-- 
  <title>Destroying a Database</title> 
  -->
  <title>删除数据库</title>

  
<para>
<!--
   Databases are destroyed with the command
   <xref linkend="sql-dropdatabase">:<indexterm><primary>DROP DATABASE</></>
-->
数据库是用<xref linkend="sql-dropdatabase"><indexterm><primary>DROP DATABASE</></>命令删除的：
<synopsis>
DROP DATABASE <replaceable>name</>;
</synopsis>
<!-- 
   Only the owner of the database, or
   a superuser, can drop a database. Dropping a database removes all objects
   that were
   contained within the database. The destruction of a database cannot
   be undone. 
-->
只有数据库的所有者或者超级用户才可以删除数据库。
删除数据库会删除数据库中包括的所有对象。数据库的删除是不可恢复的。
  </para>
  <!--
<para>
   You cannot execute the <command>DROP DATABASE</command> command
   while connected to the victim database. You can, however, be
   connected to any other database, including the <literal>template1</>
   database.
   <literal>template1</> would be the only option for dropping the last user database of a
   given cluster.
  </para>
-->
<para>
你不能在与目标库连接的时候执行<command>DROP DATABASE</command>命令。不过，
你可以和其它数据库连接，包括<literal>template1</>数据库。<literal>template1</>
也是你删除集群中最后一个库的唯一方法。
</para>

  
<para>
<!--
   For convenience, there is also a shell program to drop
   databases, <xref linkend="app-dropdb">:<indexterm><primary>dropdb</></>
-->
为了方便，有一个在 shell 上运行的删除数据库的<xref linkend="app-dropdb"><indexterm><primary>dropdb</></>程序：
<synopsis>
dropdb <replaceable class="parameter">dbname</replaceable>
</synopsis>
<!-- 
   (Unlike <command>createdb</>, it is not the default action to drop
   the database with the current user name.) 
-->
它和<command>createdb</>不一样，没有缺省删除的数据库名称。
  </para>
 </sect1>

 <sect1 id="manage-ag-tablespaces">
  <!-- 
  <title>Tablespaces</title> 
  -->
  <title>表空间</title>

  <indexterm zone="manage-ag-tablespaces">
   <!-- 
   <primary>tablespace</primary> 
   -->
   <primary>表空间</primary>
  </indexterm>

  <!--
<para>
   Tablespaces in <productname>PostgreSQL</> allow database administrators to
   define locations in the file system where the files representing
   database objects can be stored. Once created, a tablespace can be referred
   to by name when creating database objects.
  </para>
-->
<para>
<productname>PostgreSQL</>里的表空间允许数据库管理员在文件系统里定义那些代表数据库对象的文件存放位置。
一旦创建了表空间，那么就可以在创建数据库对象的时候引用它。
</para>

  <!--
<para>
   By using tablespaces, an administrator can control the disk layout
   of a <productname>PostgreSQL</> installation. This is useful in at
   least two ways. First, if the partition or volume on which the
   cluster was initialized runs out of space and cannot be extended,
   a tablespace can be created on a different partition and used
   until the system can be reconfigured.
  </para>
-->
<para>
通过使用表空间，管理员可以控制一个<productname>PostgreSQL</>安装的磁盘布局。
这么做至少有两个用处。首先，如果初始化集群所在的分区或者卷用光了空间，
而又不能扩展，那么表空间可以在一个不同的分区上创建和使用，
直到系统可以重新配置。
</para>

  <!--
<para>
   Second, tablespaces allow an administrator to use knowledge of the
   usage pattern of database objects to optimize performance. For
   example, an index which is very heavily used can be placed on a
   very fast, highly available disk, such as an expensive solid state
   device. At the same time a table storing archived data which is
   rarely used or not performance critical could be stored on a less
   expensive, slower disk system.
  </para>
-->
<para>
第二，表空间允许管理员根据数据库对象的使用模式安排数据位置，从而优化性能。比如，
一个很频繁使用的索引可以放在非常快并且非常可靠的磁盘上，比如一种非常贵的固态设备。而同时，
一个存储归档的数据，很少使用的或者对性能要求不高的表可以存储在一个便宜但比较慢的磁盘系统上。
</para>
  <warning>
<!--
   <para>
     Even though located outside the main PostgreSQL data directory,
     tablespaces are an integral part of the database cluster and
     <emphasis>cannot</emphasis> be treated as an autonomous collection
     of data files. They are dependent on metadata contained in the main
     data directory, and therefore cannot be attached to a different
     database cluster or backed up individually.  Similarly, if you lose
     a tablespace (file deletion, disk failure, etc), the database cluster
     might become unreadable or unable to start.  Placing a tablespace
     on a temporary file system like a ramdisk risks the reliability of
     the entire cluster.
   </para>
-->
<para>
尽管位于PostgreSQL主数据目录之外，表空间作为数据库集群不可分割的一部分，
<emphasis>不能</emphasis>被看做是自主采集数据文件的。
它们依赖于包含在主数据目录中的元数据，并且因此不能附属于不同的数据库集群或单独备份。
相似的，如果你丢失了一个表空间（文件删除，磁盘失败等等），
数据库集群可能会变成不可读的或者不能启动。
将一个表空间放置在临时文件系统上（比如内存盘）会使整个集群的可靠性有风险。
</para>
  </warning>
  
<para>
<!--
   To define a tablespace, use the <xref
   linkend="sql-createtablespace">
   command, for example:<indexterm><primary>CREATE TABLESPACE</></>:
-->
要定义一个表空间，使用<xref linkend="sql-createtablespace">命令，比如：<indexterm><primary>CREATE TABLESPACE</></>
<programlisting>
CREATE TABLESPACE fastspace LOCATION '/ssd1/postgresql/data';
</programlisting>
<!-- 
   The location must be an existing, empty directory that is owned by
   the <productname>PostgreSQL</> operating system user.  All objects subsequently
   created within the tablespace will be stored in files underneath this
   directory.   The location must not be on removable or transient storage,
   as the cluster might fail to function if the tablespace is missing
   or lost.
-->
这个位置必须是一个现有的空目录，并且属于<productname>PostgreSQL</>系统用户。
所有随后在该表空间创建的对象都将被存放在这个目录下的文件里。
该目录必须不能再可移动或短暂的存储上，因为如果表空间找不到或丢失，
那么该集群的功能可能会失败。
  </para>

  <note>
   <!--
<para>
    There is usually not much point in making more than one
    tablespace per logical file system, since you cannot control the location
    of individual files within a logical file system.  However,
    <productname>PostgreSQL</> does not enforce any such limitation, and
    indeed it is not directly aware of the file system boundaries on your
    system.  It just stores files in the directories you tell it to use.
   </para>
-->
<para>
通常在一个逻辑文件系统上建立多个表空间没有什么意义，
因为无法控制一个逻辑文件系统里不同文件的位置。不过，<productname>PostgreSQL</>
并不做这方面的任何强制，并且它实际上并不知道文件系统边界。
它只知道在指定的目录里存储文件。
</para>
  </note>

  <!--
<para>
   Creation of the tablespace itself must be done as a database superuser,
   but after that you can allow ordinary database users to use it.
   To do that, grant them the <literal>CREATE</> privilege on it.
  </para>
-->
<para>
创建表空间本身必须用数据库超级用户身份进行，但之后你就可以允许普通数据库用户利用它了。
要做这件事情，在表空间上给这些用户授予<literal>CREATE</>权限。
</para>
  
<para>
<!--
   Tables, indexes, and entire databases can be assigned to
   particular tablespaces. To do so, a user with the <literal>CREATE</>
   privilege on a given tablespace must pass the tablespace name as a
   parameter to the relevant command. For example, the following creates
   a table in the tablespace <literal>space1</>:
-->
表、索引和整个数据库都可以放在特定的表空间里。想要这么做的话，
在给定表空间上有<literal>CREATE</>权限的用户必须把表空间的名字以一个参数的形式传递给相关的命令。
比如，下面的命令在表空间<literal>space1</>上创建一个表：
<programlisting>
CREATE TABLE foo(i int) TABLESPACE space1;
</programlisting>
  </para>
  
<para>
<!--
   Alternatively, use the <xref linkend="guc-default-tablespace"> parameter:
-->
另外，还可以使用<xref linkend="guc-default-tablespace">参数：
<programlisting>
SET default_tablespace = space1;
CREATE TABLE foo(i int);
</programlisting>
<!-- 
   When <varname>default_tablespace</> is set to anything but an empty
   string, it supplies an implicit <literal>TABLESPACE</> clause for
   <command>CREATE TABLE</> and <command>CREATE INDEX</> commands that
   do not have an explicit one. 
-->
只要<varname>default_tablespace</>被设置为非空字符串，
那么它就为没有明确使用<literal>TABLESPACE</>子句的<command>CREATE TABLE</>
和<command>CREATE INDEX</>命令提供一个隐含的子句。
  </para>

  <!--
<para>
   There is also a <xref linkend="guc-temp-tablespaces"> parameter, which
   determines the placement of temporary tables and indexes, as well as
   temporary files that are used for purposes such as sorting large data
   sets.  This can be a list of tablespace names, rather than only one,
   so that the load associated with temporary objects can be spread over
   multiple tablespaces.  A random member of the list is picked each time
   a temporary object is to be created.
  </para>
-->
<para>
也有一个<xref linkend="guc-temp-tablespaces">参数，决定临时表和索引的放置，
就和用于像存储大数据集这样的目的临时文件一样。这可能是一个表空间名字的列表，
而不是只有一个名字，所以与临时对象相关联的负载可以散布到多个表空间中。
每次创建临时对象时选择一个随机的成员列表。
</para>

  <!--
<para>
   The tablespace associated with a database is used to store the system
   catalogs of that database.  Furthermore, it is the default tablespace
   used for tables, indexes, and temporary files created within the database,
   if no <literal>TABLESPACE</> clause is given and no other selection is
   specified by <varname>default_tablespace</> or
   <varname>temp_tablespaces</> (as appropriate).
   If a database is created without specifying a tablespace for it,
   it uses the same tablespace as the template database it is copied from.
  </para>
-->
<para>
与一个数据库相关联的表空间用于存储该数据库的系统表。另外，
如果没有给出<literal>TABLESPACE</>子句，并且没有通过<varname>default_tablespace</>
或<varname>temp_tablespaces</>（视情况而定）指定其他选项，那么在数据库中创建表，
索引和临时文件时使用的是缺省表空间。如果创建数据库时没有给它声明一个表空间，
那么它使用与它拷贝的模版数据库相同的表空间。
</para>

  <!--
<para>
   Two tablespaces are automatically created when the database cluster
   is initialized.  The
   <literal>pg_global</> tablespace is used for shared system catalogs. The
   <literal>pg_default</> tablespace is the default tablespace of the
   <literal>template1</> and <literal>template0</> databases (and, therefore,
   will be the default tablespace for other databases as well, unless
   overridden by a <literal>TABLESPACE</> clause in <command>CREATE
   DATABASE</>).
  </para>
-->
<para>
当数据库集群初始化时，自动创建两个表空间。<literal>pg_global</>表空间用于共享的系统表。
<literal>pg_default</>是<literal>template1</>和<literal>template0</>数据库的缺省表空间
(因此，这个表空间也将是任何其它数据库的缺省表空间，除非在<command>CREATE DATABASE</>
中通过<literal>TABLESPACE</>子句重写)。
</para>

  <!--
<para>
   Once created, a tablespace can be used from any database, provided
   the requesting user has sufficient privilege. This means that a tablespace
   cannot be dropped until all objects in all databases using the tablespace
   have been removed.
  </para>
-->
<para>
创建了表空间之后，它就可以用于任何数据库，只要请求的用户有足够权限。
这意味着除非我们把使用这个表空间的所有数据库里的所有对象都删除掉，否则我们不能删除该表空间。
</para>

  <!--
<para>
   To remove an empty tablespace, use the <xref
   linkend="sql-droptablespace">
   command.
  </para>
-->
<para>
要删除一个空的表空间，使用<xref linkend="sql-droptablespace">命令。
</para>

  
<para>
<!--
   To determine the set of existing tablespaces, examine the
   <link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname>
   </link> system catalog, for example
-->
检查<link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>
系统表就可以获取现有的表空间，比如
<synopsis>
SELECT spcname FROM pg_tablespace;
</synopsis>
<!-- 
   The <xref linkend="app-psql"> program's <literal>\db</> meta-command
   is also useful for listing the existing tablespaces. 
-->
<xref linkend="app-psql">程序的<literal>\db</>元命令也可以用于列出现有表空间。
  </para>

  <!--
<para>
   <productname>PostgreSQL</> makes use of symbolic links
   to simplify the implementation of tablespaces. This
   means that tablespaces can be used <emphasis>only</> on systems
   that support symbolic links.
  </para>
-->
<para>
为了简化表空间的实现，<productname>PostgreSQL</>使用了符号连接。
这就意味着表空间<emphasis>只能</>在支持符号连接的系统上使用。
</para>

  <!--
<para>
   The directory <filename>$PGDATA/pg_tblspc</> contains symbolic links that
   point to each of the non-built-in tablespaces defined in the cluster.
   Although not recommended, it is possible to adjust the tablespace
   layout by hand by redefining these links. Under no circumstances perform
   this operation while the server is running. Note that in PostgreSQL 9.1
   and earlier you will also need to update the <structname>pg_tablespace</>
   catalog with the new locations. (If you do not, <literal>pg_dump</> will
   continue to output the old tablespace locations.)
  </para>
-->
<para>
目录<filename>$PGDATA/pg_tblspc</>包含指向集群里定义的每个非内置表空间的符号连接。
尽管我们不建议，但是我们还是可能通过手工重定义这些连接来调整表空间的布局。
在服务器运行的时候不要这么干。注意在PostgreSQL 9.1及以前，你仍需要用新的位置更新
<structname>pg_tablespace</>表。如果你不这么做，<literal>pg_dump</>将继续显示旧的表空间位置。
</para>

 </sect1>
</chapter>

<!-- doc/src/sgml/arch-dev.sgml -->

 <chapter id="overview">
  <title>PostgreSQL内部概述</title>

  <note>
   <title>作者</title>
   <para>
    这一章的内容来自于<xref linkend="SIM98">的一部分，它是Stefan Simkovics在维也纳技术大学的硕士学位论文，指导人是 Georg Gottlob教授和Mag. Katrin Seyr。
   </para>
  </note>

  <para>
   本章给出了<productname>PostgreSQL</productname>后台内部结构的一个总览。在阅读了下面的小节后，你将对一个查询是如何被执行的有一定了解。本章并非要对<productname>PostgreSQL</productname>的内部操作给出一个详细的介绍，否则这个文档将会变得非常长。本章希望帮助读者理解当后台收到一个查询后，在结果被返回给客户之前通常会发生怎样的操作。
  </para>

  <sect1 id="query-path">
   <title>一个查询的路径</title>

   <para>
    这里我们将介绍为了获取结果，一个查询将会经历那些阶段。
   </para>

   <procedure>
    <step>
     <para>
      一个由应用程序到<productname>PostgreSQL</productname>服务器的连接必须被建立。应用程序传递一个查询给服务器并等待接收由服务器传回的结果。
     </para>
    </step>

    <step>
     <para>
      <firstterm>分析阶段</firstterm>对由应用程序传递的查询进行语法检查，并创建一个<firstterm>查询树</firstterm>。
     </para>
    </step>

    <step>
     <para>
      <firstterm>重写系统</firstterm>得到分析阶段创建的查询树，并查找可以应用到该查询树的任何<firstterm>规则</firstterm>（存储在<firstterm>系统目录</firstterm>中）。对找到的规则，它会执行<firstterm>规则体</firstterm>中给定的转换。
     </para>

     <para>
      重写系统的一个应用是实现<firstterm>视图</firstterm>。不论何时发生一个视图（即一个<firstterm>虚拟表</firstterm>）上的查询，重写系统将用户查询重写为一个访问<firstterm>视图定义</firstterm>中给定的<firstterm>基本表</firstterm>的查询来替代。
     </para>
    </step>

    <step>
     <para>
      <firstterm>规划器/优化器</firstterm>接手（重写过的）查询树并创建一个将被作为<firstterm>执行器</firstterm>输入的<firstterm>查询计划</firstterm>。
     </para>

     <para>
      它会先创建所有可能导向相同结果的<firstterm>路径</firstterm>。例如，如果在一个被扫描的关系上有一个索引，则有两条可供扫描的路径。其中之一是一个简单的顺序扫描，而另一个则是使用索引。接下来执行每条路径所需的代价被估算出来并且代价最低的路径将被选中。代价最低的路径将被扩展成一个完整的计划可供执行器使用。
     </para>
    </step>

    <step>
     <para>
      执行器递归地逐步通过<firstterm>计划树</firstterm>并按照计划表述的方式获取行。执行器在扫描关系时会使用<firstterm>存储系统</firstterm>、执行<firstterm>排序</firstterm>和<firstterm>连接</firstterm>、估算<firstterm>条件</firstterm>并最后归还得到的行。
     </para>
    </step>
   </procedure>

   <para>
    在下面的小节中我们将覆盖上述列出的每一项的详细内容，以便更好地理解<productname>PostgreSQL</productname>的内部控制和数据结构。
   </para>
  </sect1>

  <sect1 id="connect-estab">
   <title>连接如何建立</title>

   <para>
    <productname>PostgreSQL</productname>以一种简单的<quote>一用户一进程</>的客户端/服务器模型实现。在该模型中，一个<firstterm>客户端进程</firstterm>仅连接到一个<firstterm>服务器进程</firstterm>。由于我们无法预先知道会有多少连接被建立，我们必须使用一个<firstterm>主进程</firstterm>在每次连接请求时生产一个新的服务器进程。该主进程被称为<literal>postgres</literal>，它在一个特定的TCP/IP端口监听进入的连接。当一个连接请求被监测到时，<literal>postgres</literal>会产生一个新的服务器进程。服务器作业之间通过<firstterm>信号</firstterm>和<firstterm>共享内存</firstterm>通信，以保证并发数据访问时的数据完整性。
   </para>

   <para>
    客户端进程可以是任何符合<productname>PostgreSQL</productname>协议（见<xref linkend="protocol">）的程序。很多客户端基于C语言库<application>libpq</>，但也有一些该协议的独立实现存在，例如Java的<application>JDBC</>驱动。
   </para>

   <para>
    一旦一个连接被建立，客户端进程就能发送一个查询给<firstterm>后端</firstterm>（服务器）。查询被以纯文本传送，即在<firstterm>前端</firstterm>（客户端）不做任何分析。服务器会分析查询，创建一个<firstterm>执行计划</firstterm>，然后执行之并通过已建立的连接向客户端返回检索到的行。   </para>
  </sect1>

  <sect1 id="parser-stage">
   <title>分析器阶段</title>

   <para>
    <firstterm>分析器阶段</firstterm>由两部分组成：

    <itemizedlist>
     <listitem>
      <para>
       <firstterm>分析器</firstterm>定义在<filename>gram.y</filename>和<filename>scan.l</filename>中，它使用Unix工具<application>bison</application>和<application>flex</application>构建。
      </para>
     </listitem>
     <listitem>
      <para>
       <firstterm>转换处理</firstterm>将对分析器返回的数据结构进行修改和增加。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <sect2>
    <title>分析器</title>

    <para>
     分析器必须检查查询字符串（以纯文本形式到达）是否为合法语法。如果语法正确将建立一个<firstterm>分析树</firstterm>并返回之，否则将返回一个错误。 语法分析器和词法分析器使用著名的Unix工具<application>bison</>和<application>flex</>实现。
    </para>

    <para>
     <firstterm>词法分析器</firstterm>定义在文件<filename>scan.l</filename>中，并负责识别<firstterm>标识符</firstterm>、<firstterm>SQL关键词</firstterm>等。对于找到的每一个关键词或标识符将生成一个<firstterm>记号</firstterm>并返回给语法分析器。
    </para>

    <para>
     语法分析器定义在<filename>gram.y</filename>文件中，它由一组<firstterm>语法规则</firstterm> 和<firstterm>动作</firstterm>，动作将在规则被触发时被执行。动作的代码（实际上是C代码）将被用于构建分析树。
    </para>

    <para>
     程序<application>flex</application>把文件<filename>scan.l</filename>转换成C源文件<filename>scan.c</filename>， 程序<application>bison</application>把文件<filename>gram.y</filename>转换为<filename>gram.c</filename>。在这些转换结束后，一个正规的C编译器就可以用于创建分析器。绝不要对生成的C文件做任何修改，因为每次<application>flex</application>或<application>bison</application>被调用都会重写它们。

     <note>
      <para>
       前面提到的转换和编译通常是由随<productname>PostgreSQL</productname>源代码发布的<firstterm>makefiles</firstterm>自动完成。
      </para>
     </note>
    </para>

    <para>
     对于<application>bison</application>的详细介绍或者<filename>gram.y</filename>中的语法规则超出了本文的范围。有很多书籍和文档介绍<application>flex</application>和<application>bison</application>。在学习<filename>gram.y</filename>中的语法之前你应该先熟悉<application>bison</application>，否则你将无法理解发生了什么。
    </para>

   </sect2>

   <sect2>
     <title>转换处理</title>

    <para>
     分析阶段根据SQL的语法结构的固定规则创建一个分析树。它不会在系统目录做任何查找，这样它不可能了解所请求的操作的详细语义。在分析器完成之后，<firstterm>转换处理</firstterm>接手分析器返还的树，并进行语义解释来理解该查询引用了哪些表、函数和操作符。用于表示该信息的数据结构被称为<firstterm>查询树</>。
    </para>

    <para>
     将原始分析从语义分析中分离出来的原因是系统目录的查找只能在一个事务中完成，而我们不希望在收到一个查询字符串时立即开始一个事务。原始分析阶段足以识别事务控制命令（<command>BEGIN</>、<command>ROLLBACK</>等），并且这些可以在没有任何进一步分析之前正确地被执行。一旦我们知道我们正在处理一个确切的查询（例如<command>SELECT</>或<command>UPDATE</>），就可以开始一个事务（如果我们还不在其中）。只有到这时转换处理才能被调用。
    </para>

    <para>
     由转换处理创建的查询树在结构上和原始分析树有很多地方相似，但是在细节上有很多不同之处。例如，分析树中的一个<structname>FuncCall</>节点表示某些在语法上看起来像一个函数调用的东西。它可能被转换成一个<structname>FuncExpr</>或<structname>Aggref</>节点，取决于被引用的名字是一个普通函数或是一个聚集函数。此外，关于列和表达式结果的实际数据类型的信息被加入到了查询树中。
    </para>
   </sect2>
  </sect1>

  <sect1 id="rule-system">
   <title><productname>PostgreSQL</productname>规则系统</title>

   <para>
    <productname>PostgreSQL</productname>支持一个强大的 supports a powerful
    <firstterm>规则系统</firstterm>用于支持<firstterm>视图</firstterm>说明和模糊不清的<firstterm>视图更新</firstterm>。本来<productname>PostgreSQL</productname>规则系统由两种实现组成：

    <itemizedlist>
     <listitem>
      <para>
       第一种利用<firstterm>行级</firstterm>处理工作，并且被实现于<firstterm>执行器</firstterm>深层。当单独一行被访问时规则系统被调用。这种实现在1995年被移除，那时最后一个<productname>Berkeley Postgres</productname>项目的官方发布被转换为<productname>Postgres95</productname>。
      </para>
     </listitem>

     <listitem>
      <para>
       第二种规则系统的实现是一种称为<firstterm>查询重写</firstterm>的技术。<firstterm>重写系统</firstterm>是一个存在于<firstterm>分析器阶段</firstterm>和<firstterm>规划器/优化器</firstterm>之间的模块。这种技术也被实现了。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    更多关于查询重写器的讨论可见<xref linkend="rules">，因此没有必要在这里涉及这些内容。我们将仅指出重写器的输入和输出都是查询树，即在树的表现形式或语义细节层次上都没有改变。重写可以被看成是某种形式的宏扩展。
   </para>

  </sect1>

  <sect1 id="planner-optimizer">
   <title>规划器/优化器</title>

   <para>
    <firstterm>规划器/优化器</firstterm>的任务是创建一个最佳的执行计划。一个给定的SQL查询（今后将是一个查询树）实际上可以以很多种不同的方式被执行，其中的每一种都会产生相同的结果集。如果在计算上可行，查询优化器将检查这些可能的执行计划中的每一个，最后选择其中被期望“跑得最快的”那一个。
   </para>

   <note>
    <para>
     在某些情况下，检查一个查询的每一种可能的执行方式会耗费非常多的时间和内存空间。特别是当查询涉及到大量连接操作时。为了能在合理的时间内决定一个合理的（不一定是最佳的）查询计划，当连接数量超过一个阈值（见<xref linkend="guc-geqo-threshold">）时<productname>PostgreSQL</productname>使用了一种<firstterm>遗传查询优化器</firstterm> （见<xref linkend="geqo">）。
    </para>
   </note>

   <para>
    规划器搜索过程实际上依靠称为<firstterm>路径</>的数据结构工作，它是一种缩短版的计划，其中只包含规划器做决定所需要的信息。当最低代价的路径被确定后，一个全功能的<firstterm>计划树</>将被建立并传递给执行器。这表示所期望的执行计划已经拥有足够的细节以供执行器执行它。在本节剩下的部分，我们将忽略路径和计划之间的区别。
   </para>

   <sect2>
    <title>生成可能的计划</title>

    <para>
     规划器/优化器从扫描查询中用到的每一个单独的关系（表）开始生成计划。可能的计划根据每一个关系上可用的索引决定。在一个关系上总是有执行一个顺序扫描的可能，因此一个顺序扫描计划总是会被创建。假设在一个关系上定义有一个索引（例如一个B-tree索引）并且查询包含限制<literal>relation.attribute OPR constant</literal>。如果<literal>relation.attribute</literal>正好匹配该B-tree索引的键并且<literal>OPR</literal>是该索引的<firstterm>操作符类</>之一，另一个使用B-tree索引扫描该索引的计划将被创建。如果还有索引存在且查询中的限制正好匹配一个索引的键，其他计划也会被考虑。如果有索引的顺序能匹配<literal>ORDER BY</>子句（如果有）或者对于归并连接有用（见下文），也会为该索引创建索引扫描计划。
    </para>

    <para>
     如果查询需要连接两个或更多关系，在所有扫描单个关系的可能计划都被找到后，连接计划将会被考虑。三种可用的连接策略是：

     <itemizedlist>
      <listitem>
       <para>
        <firstterm>嵌套循环连接</firstterm>: 对左关系找到的每一行都要扫描右关系一次。这种策略最容易实现但是可能非常耗时（但是，如果右关系可以通过索引扫描，这将是一个不错的策略。因为可以用左关系当前行的值来作为右关系上索引扫描的键）。
       </para>
      </listitem>

      <listitem>
       <para>
        <firstterm>归并连接</firstterm>：在连接开始之前，每一个关系都按照连接属性排好序。然后两个关系会被并行扫描，匹配的行被整合成连接行。由于这种连接中每个关系只被扫描一次，因此它很具有吸引力。它所要求的排序可以通过一个显式的排序步骤得到，或使用一个连接键上的索引按适当顺序扫描关系得到。
       </para>
      </listitem>

      <listitem>
       <para>
        <firstterm>哈希连接</firstterm>：右关系先被扫描并且被载入到一个哈希表，使用连接属性作为哈希键。接下来左关系被扫描，扫描中找到的每一行的连接属性值被用作哈希键在哈希表中查找匹配的行。
       </para>
      </listitem>
     </itemizedlist>
    </para>

    <para>
     当查询涉及两个以上的关系时，最终结果必须由一个连接步骤树构成，每个连接步骤有两个输入。规划器会检查不同可能的连接序列来找到代价最小的那一个。
    </para>

    <para>
     如果查询是用的关系数少于<xref linkend="guc-geqo-threshold">，将使用一次接近穷举的搜索来查找最好的连接顺序。如果任何两个关系在<literal>WHERE</literal>条件中存在一个相应的连接子句（即存在类似于<literal>where rel1.attr1=rel2.attr2</literal>的限制），规划器会有限考虑它们之间的连接。没有任何连接子句的连接对只有在别无选择时才会被考虑，即一个关系没有任何可用的对于其他关系的连接子句。对规划器所考虑的每一个连接对会生成所有可能的计划，其中代价（被估计为）最低的一个将被选择。
    </para>

    <para>
     当连接关系数超过<varname>geqo_threshold</varname>时，连接序列将考虑通过启发式方法来确定，详见<xref linkend="geqo">。否则处理将和前面相同。
    </para>

    <para>
     成品计划树包含基本关系的顺序或索引扫描，外加所需的嵌套循环、归并或哈希连接节点，以及任何所需的辅助步骤，例如排序节点或聚集函数计算节点。这些节点中的大部分具有执行<firstterm>选择</>（丢弃不符合指定布尔条件的行）和<firstterm>投影</>（根据指定列值计算派生列，即标量表达式的计算）的能力。规划器的职责之一就是在计划树最合适的节点上附加来自于子句的选择条件和需要的输出表达式。
    </para>
   </sect2>
  </sect1>

  <sect1 id="executor">
   <title>执行器</title>

   <para>
    <firstterm>执行器</firstterm>接手规划器/优化器创建的计划，并递归地处理之以抽取所需的行集。这本质上是一种需求拉动的管道机制。每次一个计划节点被调用时，它必须交付一个或多个行，或者报告已经完成了行的交付。
   </para>

   <para>
    为了提供一个具体例子，假设顶层节点是一个<literal>MergeJoin</literal>节点。在归并完成之前，两个行必须先被获取（每一个来自于一个子计划）。因此执行器递归地调用它自己去处理子计划（从附加在<literal>lefttree</literal>的子计划开始）。新的顶层节点（左子计划的顶层节点），我们说是一个<literal>Sort</literal>节点，并且又要递归来获取一个输入行。<literal>Sort</literal>的子节点可以是一个<literal>SeqScan</>节点，表示真正地读取一个表。该节点的执行将会使执行器从表中获取一行并将它返回给调用节点。<literal>Sort</literal>节点将反复调用它的子节点来获得所有需要排序的行。当输入耗尽后（子节点将返回一个NULL来标识），<literal>Sort</literal>节点执行排序，并且最后能够返回它的第一个输出行，及排序后的第一个。它会把剩下的行保存下来，这样它可以根据后续的要求按照排好的顺序返回这些行。
   </para>

   <para>
    <literal>MergeJoin</literal>节点也会相似地从其右子计划要求第一个行。然后它会比较两个子节点提供的行看它们是否能被连接，如果可以它会返回一个连接行给调用者。在下一次调用时，或者它无法连接当前的输入对时，它会前进到一个表或另一个表的下一行（取决于比较的结果），并再次检查匹配。最后，某个子计划耗尽，<literal>MergeJoin</literal>节点返回NULL表示它没有更多连接行可以提供。
   </para>

   <para>
    复杂的查询可能涉及多层计划节点，但是一般的方法是相同的：每个节点在被调用时计算并返回它的下一个输出行。每个节点同时也负责应用由规划器分配给它的选择或投影表达式。
   </para>

   <para>
    执行器机制被用于四种基本SQL查询类型：<command>SELECT</>、<command>INSERT</>、 <command>UPDATE</>以及<command>DELETE</>。对于<command>SELECT</>，顶层执行器代码只需要发送查询计划树返回的每个行给客户端。对于<command>INSERT</>，每一个被返回的行被插入到<command>INSERT</>中指定的目标表中。这通过一个被称为<literal>ModifyTable</>的特殊顶层计划节点完成（一个简单的<command>INSERT ... VALUES</>命令会创建一个由一个<literal>Result</>节点组成的简单计划树，该节点只计算一个结果行，在它之上的<literal>ModifyTable</>节点会执行插入。但是<command>INSERT ... SELECT</>可以用到执行器机制的全部功能）。对于<command>UPDATE</>，规划器会安排每一个计算行包含所有被更新的列值加上原始目标行的<firstterm>TID</>（元组ID或行ID），这些数据也会被输入到一个<literal>ModifyTable</>节点，该节点将利用这些信息创建一个新的被更新行并标记旧行为被删除。对于<command>DELETE</>，唯一被计划返回的列是TID，<literal>ModifyTable</>节点简单地使用TID访问每一个目标行并将其标记为被删除。
   </para>

  </sect1>

 </chapter>

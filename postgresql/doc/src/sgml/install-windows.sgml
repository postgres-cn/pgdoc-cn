<!-- doc/src/sgml/install-windows.sgml -->
<chapter id="install-windows">
 <!--
 <title>Installation from Source Code on <productname>Windows</productname></title>
   -->
 <title><productname>Windows</productname>下用源代码安装</title>

 <indexterm>
  <primary>installation</primary>
  <secondary>on Windows</secondary>
 </indexterm>

 <!--
 <para>
  It is recommended that most users download the binary distribution for
  Windows, available as a graphical installer package
  from the <productname>PostgreSQL</productname> website. Building from source
  is only intended for people developing <productname>PostgreSQL</productname>
  or extensions.
 </para>
   -->
 <para>
  对于需要在windows下安装<productname>PostgreSQL</productname>的大多数普通用户来说， 
  推荐从官网下载图形化界面的二进制安装包。源代码安装主要面向<productname>PostgreSQL</productname>开发人员及相关扩展插件的开发人员。
 </para>

 <!--
 <para>
  There are several different ways of building PostgreSQL on
  <productname>Windows</productname>. The simplest way to build with
  Microsoft tools is to install <productname>Visual Studio Express 2013
  for Windows Desktop</productname> and use the included
  compiler. It is also possible to build with the full
  <productname>Microsoft Visual C++ 2005 to 2013</productname>. In some cases
  that requires the installation of the <productname>Windows SDK</productname>
  in addition to the compiler.
 </para>
   -->
 <para>
  在<productname>Windows</productname>中,有多种方法编译PostgreSQL。
  对于微软工具的话，最简单的方法是安装一个<productname>Visual Studio Express 2013 for Windows Desktop</productname>，并使用它自带的编译器进行编译。
  也可以使用<productname>Microsoft Visual C++ 2005 to 2013</productname>来编译。
  在一些情况下，除了编译器还需要安装<productname>Windows SDK</productname>。
 </para>

 <!--
 <para>
  It is also possible to build PostgreSQL using the GNU compiler tools
  provided by <productname>MinGW</productname>, or using
  <productname>Cygwin</productname> for older versions of
  <productname>Windows</productname>.
 </para>
   -->
 <para>
  此外，可以使用<productname>MinGW</productname>提供的GNU编译工具来编译PostgreSQL。
  如果<productname>Windows</productname>系统版本比较旧，
  可以使用<productname>Cygwin</productname>进行编译。
 </para>

 <!--
 <para>
  Finally, the client access library
  (<application>libpq</application>) can be built using
  <productname>Visual C++ 7.1</productname> or
  <productname>Borland C++</productname> for compatibility with statically
  linked applications built using these tools.
 </para>
   -->
 <para>
  最后，可以使用<productname>Visual C++ 7.1</productname>或<productname>Borland C++</productname> 编译
  客户端访问库(<application>libpq</application>)，以兼容使用这些工具编译出来的静态链接程序。
 </para>

 <!--
 <para>
  Building using <productname>MinGW</productname> or
  <productname>Cygwin</productname> uses the normal build system, see
  <xref linkend="installation"> and the specific notes in
  <xref linkend="installation-notes-mingw"> and <xref linkend="installation-notes-cygwin">.
  To produce native 64 bit binaries in these environments, use the tools from
  <productname>MinGW-w64</productname>. These tools can also be used to
  cross-compile for 32 bit and 64 bit <productname>Windows</productname>
  targets on other hosts, such as <productname>Linux</productname> and
  <productname>Darwin</productname>.
  <productname>Cygwin</productname> is not recommended for running a
  production server, and it should only be used for running on
  older versions of <productname>Windows</productname> where
  the native build does not work, such as
  <productname>Windows 98</productname>. The official
  binaries are built using <productname>Visual Studio</productname>.
 </para>
  -->
 <para>
  使用<productname>MinGW</productname> 或者<productname>Cygwin</productname>的普通编译系统的话，
  可以参看<xref linkend="installation">及<xref linkend="installation-notes-mingw">和<xref linkend="installation-notes-cygwin">中的详细记录。
  要在这些环境中生成本地的64位二进制文件，可以使用<productname>MinGW-w64</productname>工具。
  这些工具也可以在其它的主机上执行交叉编译，生成32位或64位的<productname>Windows</productname>可执行程序，
  例如<productname>Linux</productname> 和<productname>Darwin</productname>系统。
  在生产环境中不推荐使用<productname>Cygwin</productname>，
  它仅适合用于<productname>Windows 98</productname>等比较旧的<productname>Windows</productname>版本上，本地编译器编译不了时使用。
  官方的的二进制文件是由<productname>Visual Studio</productname>编译的。
 </para>

 <!--
 <para>
  Native builds of <application>psql</application> don't support command
  line editing. The <productname>Cygwin</productname> build does support
  command line editing, so it should be used where psql is needed for
  interactive use on  <productname>Windows</productname>.
 </para>
  -->
 <para>
  原生的<application>psql</application>可执行程序不支持命令行编辑。
  而<productname>Cygwin</productname>编译的可执行文件支持命令行编辑，
  因此需要在<productname>Windows</productname>下交互式使用psql的话，应该使用这种方式编译。
 </para>

 <sect1 id="install-windows-full">
  <!--
  <title>Building with <productname>Visual C++</productname> or the
  <productname>Microsoft Windows SDK</productname></title>
  -->
  <title>用<productname>Visual C++</productname>或<productname>Microsoft Windows SDK</productname>编译</title>

 <!--
 <para>
  PostgreSQL can be built using the Visual C++ compiler suite from Microsoft.
  These compilers can be either from <productname>Visual Studio</productname>,
  <productname>Visual Studio Express</productname> or some versions of the
  <productname>Microsoft Windows SDK</productname>. If you do not already have a
  <productname>Visual Studio</productname> environment set up, the easiest
  ways are to use the compilers from <productname>Visual Studio Express 2013
  for Windows Desktop</productname> or those in the <productname>Windows SDK
  7.1</productname>, which are both free downloads from Microsoft.
 </para>
  -->
 <para>
  PostgreSQL可以使用微软的Visual C++编译器套件来编译。
  这些编译器可以是<productname>Visual Studio</productname>,
  <productname>Visual Studio Express</productname>或者某些版本的<productname>Microsoft Windows SDK</productname>。
  如果没有安装<productname>Visual Studio</productname>的环境，
  最简单的方法是使用<productname>Visual Studio Express 2012 for Windows Desktop</productname>
  或者<productname>Windows SDK 7.1</productname>中的编译器,
  它们都可以从微软官网免费下载。
 </para>

 <!--
 <para>
  PostgreSQL is known to support compilation using the compilers shipped with
  <productname>Visual Studio 2005</productname> to
  <productname>Visual Studio 2013</productname> (including Express editions),
  as well as standalone Windows SDK releases 6.0 to 7.1.
  64-bit PostgreSQL builds are only supported with
  <productname>Microsoft Windows SDK</productname> version 6.0a to 7.1 or
  <productname>Visual Studio 2008</productname> and above.
 </para>
  -->
 <para>
  PostgreSQL支持从<productname>Visual Studio 2005</productname>到<productname>Visual Studio 2013</productname>(包括精简版)的编译器,
  以及6.0到7.1版本的独立的Windows SDK编译器。
  64位的PostgreSQL只支持6.0a到7.1版本的<productname>Microsoft Windows SDK</productname>和<productname>Visual Studio 2008</productname>及其以上版本。
 </para>

 <!--
 <para>
  The tools for building using <productname>Visual C++</productname> or
  <productname>Platform SDK</productname> are in the
  <filename>src/tools/msvc</filename> directory. When building, make sure
  there are no tools from <productname>MinGW</productname> or
  <productname>Cygwin</productname> present in your system PATH. Also, make
  sure you have all the required Visual C++ tools available in the PATH. In
  <productname>Visual Studio</productname>, start the
  <application>Visual Studio Command Prompt</application>.
  If you wish to build a 64-bit version, you must use the 64-bit version of
  the command, and vice versa.
  In the <productname>Microsoft Windows SDK</productname>, start the
  <application>CMD shell</application> listed under the SDK on the Start Menu.
  In recent SDK versions you can change the targeted CPU architecture, build
  type, and target OS by using the <command>setenv</command> command, e.g.
  <command>setenv /x86 /release /xp</command> to target Windows XP or later
  with a 32-bit release build. See <command>/?</command> for other options to
  <command>setenv</command>.  All commands should be run from the
  <filename>src\tools\msvc</filename> directory.
 </para>
  -->
 <para>
  用<productname>Visual C++</productname>或<productname>Platform SDK</productname>编译的工具在<filename>src/tools/msvc</filename>目录下。
  编译时，确保系统路径下没有包含<productname>MinGW</productname>或<productname>Cygwin</productname>的工具，同时确保需要的Visual C++的所有工具在系统路径中。
  在<productname>Visual Studio</productname>中，启动<application>Visual Studio Command Prompt</application>。
  如果需要编译64位的版本，使用64位版本的命令，反之亦然。在<productname>Microsoft Windows SDK</productname>中，
  从开始菜单中SDK下的列表启动<application>CMD shell</application>。在最新版的SDK中，
  你可以使用<command>setenv</command>等命令来更改目标的CPU架构，编译类型和操作系统类型等。
  指令<command>setenv /x86 /release /xp</command>用来编译Windows XP或更新的32位版本。
  使用<command>/?</command>命令可以查看<command>setenv</command>的其它选项。
  所有命令都应该在<filename>src\tools\msvc</filename>目录下运行。
 </para>

 <!--
 <para>
  Before you build, you may need to edit the file <filename>config.pl</filename>
  to reflect any configuration options you want to change, or the paths to
  any third party libraries to use. The complete configuration is determined
  by first reading and parsing the file <filename>config_default.pl</filename>,
  and then apply any changes from <filename>config.pl</filename>. For example,
  to specify the location of your <productname>Python</productname> installation,
  put the following in <filename>config.pl</filename>:
<programlisting>
$config->{python} = 'c:\python26';
</programlisting>
  You only need to specify those parameters that are different from what's in
  <filename>config_default.pl</filename>.
 </para>
  -->
 <para>
  在编译前，根据需要修改<filename>config.pl</filename>中相应选项和使用到的第三方库的路径。
  完整的配置由首先读取和解析的<filename>config_default.pl</filename>决定，然后从<filename>config.pl</filename>适用所有的变更。
  例如，为了指定<productname>Python</productname>的安装路径，在<filename>config.pl</filename>文件中添加以下语句:
<programlisting>
$config->{python} = 'c:\python26';
</programlisting>
  只需要指定和<filename>config_default.pl</filename>文件中有差别的参数。
 </para>

 <!--
 <para>
  If you need to set any other environment variables, create a file called
  <filename>buildenv.pl</filename> and put the required commands there. For
  example, to add the path for bison when it's not in the PATH, create a file
  containing:
<programlisting>
$ENV{PATH}=$ENV{PATH} . ';c:\some\where\bison\bin';
</programlisting>
 </para>
  -->
 <para>
  如果需要指定其它的环境变量，创建一个<filename>buildenv.pl</filename>文件并写入所需要的命令。
  例如，为了在PATH中添加还不存在的bison的位置，创建一个文件包含以下内容：
<programlisting>
$ENV{PATH}=$ENV{PATH} . ';c:\some\where\bison\bin';
</programlisting>
 </para>

 <sect2>
  <!--
  <title>Requirements</title>
  -->
  <title>要求</title>
  <!--
  <para>
   The following additional products are required to build
   <productname>PostgreSQL</productname>. Use the
   <filename>config.pl</filename> file to specify which directories the libraries
   are available in.

   <variablelist>
    <varlistentry>
     <term><productname>Microsoft Windows SDK</productname></term>
     <listitem><para>
      If your build environment doesn't ship with a supported version of the
      <productname>Microsoft Windows SDK</productname> it
      is recommended that you upgrade to the latest version (currently
      version 7.1), available for download from
      <ulink url="http://www.microsoft.com/downloads/"></>.
     </para>
     <para>
      You must always include the
      <application>Windows Headers and Libraries</application> part of the SDK.
      If you install a <productname>Windows SDK</productname>
      including the <application>Visual C++ Compilers</application>,
      you don't need <productname>Visual Studio</productname> to build.
      Note that as of Version 8.0a the Windows SDK no longer ships with a
      complete command-line build environment.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
      ActiveState Perl is required to run the build generation scripts. MinGW
      or Cygwin Perl will not work. It must also be present in the PATH.
      Binaries can be downloaded from
      <ulink url="http://www.activestate.com"></> (Note: version 5.8 or later is required,
      the free Standard Distribution is sufficient).
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
  -->
  <para>
   编译<productname>PostgreSQL</productname>还需要以下几个工具。
   使用<filename>config.pl</filename>文件来指定这些库的路径。

   <variablelist>
    <varlistentry>
     <term><productname>Microsoft Windows SDK</productname></term>
     <listitem><para>
      如果编译环境不兼容所支持的<productname>Microsoft Windows SDK</productname>版本，
      建议把SDK的版本升级到最新的版本(目前为7.1版本),下载地址为<ulink url="http://www.microsoft.com/downloads/"></>。
     </para>
     <para>
      你必需包含SDK的<application>Windows头文件和库</application>。
      如果安装的<productname>Windows SDK</productname>中已经包含了<application>Visual C++ Compilers</application>，
      就不再需要使用<productname>Visual Studio</productname>进行编译了。
      注意Windows SDK 8.0a之后的版本不再附有完整的命令行编译环境。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
      运行编译生成脚本时需要ActiveState Perl。而MinGW或Cygwin的Perl则不起作用。
      同样，它的路径也要添加到系统路径中。二进制文件下载地址为<ulink url="http://www.activestate.com"></> (注意: 必须使用5.8或者更新的版本， 免费的标准版既可）。
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>


  <!--
  <para>
   The following additional products are not required to get started,
   but are required to build the complete package. Use the
   <filename>config.pl</filename> file to specify which directories the libraries
   are available in.
  -->
  <para>
   下面的工具在开始时是不需要的，但是对于完整的包的编译是必须的。
   使用<filename>config.pl</filename>文件来指定这些库的路径。

   <variablelist>
  <!--
    <varlistentry>
     <term><productname>ActiveState TCL</productname></term>
     <listitem><para>
      Required for building <application>PL/TCL</application> (Note: version
      8.4 is required, the free Standard Distribution is sufficient).
     </para></listitem>
    </varlistentry>
  -->
    <varlistentry>
     <term><productname>ActiveState TCL</productname></term>
     <listitem><para>
      用于编译<application>PL/TCL</application>(注意:要求8.4版本， 
      免费的标准版既可）。
     </para></listitem>
    </varlistentry>

  <!--
    <varlistentry>
     <term><productname>Bison</productname> and 
      <productname>Flex</productname></term>
     <listitem>
     <para>
      <productname>Bison</productname> and <productname>Flex</productname> are
      required to build from Git, but not required when building from a release
      file. Only <productname>Bison</productname> 1.875 or versions 2.2 and later
      will work. <productname>Flex</productname> must be version 2.5.31 or later.
     </para>
  -->
    <varlistentry>
     <term><productname>Bison</productname> 和 
      <productname>Flex</productname></term>
     <listitem>
     <para>
      <productname>Bison</productname> 和 <productname>Flex</productname>用来从GIT进行编译，对于发行版文件的编译是不需要的。
    <productname>Bison</productname>需要1.875或2.2及更新版本。<productname>Flex</productname>需要使用2.5.31或更新版本。
     </para>

   <!--
     <para>
      Both <productname>Bison</productname> and <productname>Flex</productname>
      are included in the <productname>msys</productname> tool suite, available
      from <ulink url="http://www.mingw.org/wiki/MSYS"></> as part of the
      <productname>MinGW</productname> compiler suite. You can also get
      <productname>msys</productname> as part of
      <productname>msysGit</productname> from <ulink url="http://git-scm.com/"></>.
     </para>
  -->
     <para>
      <productname>Bison</productname> 和 <productname>Flex</productname>包含在<productname>msys</productname>工具套件内。
      作为<productname>MinGW</productname>编译器套件的一部分，msys可以从<ulink url="http://www.mingw.org/wiki/MSYS"></>获得。
      同时作为<productname>msysGit</productname>的一部分，<productname>msys</productname>也可以从<ulink url="http://git-scm.com/"></>获得。
     </para>

   <!--
     <para>
      You will need to add the directory containing
      <filename>flex.exe</filename> and <filename>bison.exe</filename> to the
      PATH environment variable in <filename>buildenv.pl</filename> unless
      they are already in PATH. In the case of MinGW, the directory is the
      <filename>\msys\1.0\bin</filename> subdirectory of your MinGW
      installation directory. For msysGit, it's the <filename>bin</filename>
      directory in your Git install directory. Do not add the MinGW compiler
      tools themselves to PATH.
     </para>
  -->
     <para>
    在<filename>buildenv.pl</filename>中，需要把包含<filename>flex.exe</filename>和<filename>bison.exe</filename>的目录添加到系统路径中，
    除非它们已经存在于系统路径中。对于MinGW, 要把MinGW安装目录的子目录路径<filename>\msys\1.0\bin</filename>添加到系统路径中。
    对于msysGit,要把Git安装目录下的<filename>bin</filename>目录添加到系统路径中。不要添加MinGW编译工具本身的目录到系统路径中。
     </para>

   <!--
     <note>
      <para>
        The Bison distribution from GnuWin32 appears to have a bug that
        causes Bison to malfunction when installed in a directory with
        spaces in the name, such as the default location on English
        installations <filename>C:\Program Files\GnuWin32</filename>.
        Consider installing into <filename>C:\GnuWin32</filename> or use the
        NTFS short name path to GnuWin32 in your PATH environment setting
        (e.g. <filename>C:\PROGRA~1\GnuWin32</filename>).
       </para>
     </note>
  -->
     <note>
      <para>
    GnuWin32中的Bison存在一个bug，当文件安装的路径中含有空格的时候，会导致Bison出现故障。
    例如，用英文安装时的默认路径<filename>C:\Program Files\GnuWin32</filename>时会出现上述问题，解决办法是安装在类似<filename>C:\GnuWin32</filename>这样的目录，
    或者在GnuWin32的环境变量PATH中使用NTFS短名称路径(例如<filename>C:\PROGRA~1\GnuWin32</filename>)。
       </para>
     </note>

     <note>
     <!--
       <para>
       The obsolete "winflex" binaries distributed on the PostgreSQL FTP site
       and referenced in older documentation will fail with "flex: fatal
       internal error, exec failed" on 64-bit Windows hosts. Use flex from
       msys instead.
       </para>
       -->
       <para>
     在PostgreSQL FTP上的winflex是旧的二进制版本并且引用旧的文档，在64位Windows主机上执行时，
     会报"flex: fatal internal error, exec failed"的错误。可以使用msys中的flex来替代以避免这个问题。
       </para>
     </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Diff</productname></term>
   <!--
     <listitem><para>
      Diff is required to run the regression tests, and can be downloaded
      from <ulink url="http://gnuwin32.sourceforge.net"></>.
     </para></listitem>
       -->
   <listitem><para>
      Diff用于进行回归测试，可以从<ulink url="http://gnuwin32.sourceforge.net"></>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Gettext</productname></term>
   <!--
     <listitem><para>
      Gettext is required to build with NLS support, and can be downloaded
      from <ulink url="http://gnuwin32.sourceforge.net"></>. Note that binaries,
      dependencies and developer files are all needed.
     </para></listitem>
     -->
     <listitem><para>
      Gettext用于编译NLS支持，可以从<ulink url="http://gnuwin32.sourceforge.net"></>下载。
    需要注意的是二进制文件，依赖项和开发文件都需要。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>MIT Kerberos</productname></term>
   <!--
     <listitem><para>
      Required for GSSAPI authentication support. MIT Kerberos can be
      downloaded from
      <ulink url="http://web.mit.edu/Kerberos/dist/index.html"></>.
     </para></listitem>
     -->
     <listitem><para>
      MIT Kerberos 用于提供GSSAPI认证支持，可以从<ulink url="http://web.mit.edu/Kerberos/dist/index.html"></>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
<!-- 
    <term><productname>libxml2</productname> and
      <productname>libxslt</productname></term>
-->
    <term><productname>libxml2</productname> 和
      <productname>libxslt</productname></term>
   <!--
     <listitem><para>
      Required for XML support. Binaries can be downloaded from
      <ulink url="http://zlatkovic.com/pub/libxml"></> or source from
      <ulink url="http://xmlsoft.org"></>. Note that libxml2 requires iconv,
      which is available from the same download location.
     </para></listitem>
     -->
     <listitem><para>
      libxml2和libxslt用于提供XML支持。可以从<ulink url="http://zlatkovic.com/pub/libxml"></>下载二进制文件，
      也可以从<ulink url="http://xmlsoft.org"></>下载源代码。需要注意，libxml2需要iconv，也在上面的地址下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>openssl</productname></term>
   <!--
     <listitem><para>
      Required for SSL support. Binaries can be downloaded from
      <ulink url="http://www.slproweb.com/products/Win32OpenSSL.html"></>
      or source from <ulink url="http://www.openssl.org"></>.
     </para></listitem>
     -->
     <listitem><para>
      openssl用于提供SSL支持。可以从<ulink url="http://www.slproweb.com/products/Win32OpenSSL.html"></>下载二进制文件，
      或者在<ulink url="http://www.openssl.org"></>下载源代码。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ossp-uuid</productname></term>
   <!--
     <listitem><para>
      Required for UUID-OSSP support (contrib only). Source can be
      downloaded from
      <ulink url="http://www.ossp.org/pkg/lib/uuid/"></>.
     </para></listitem>
     -->
     <listitem><para>
      ossp-uuid用于提供UUID-OSSP支持(仅用于contrib)。可以从<ulink url="http://www.ossp.org/pkg/lib/uuid/"></>下载源码。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Python</productname></term>
   <!--
     <listitem><para>
      Required for building <application>PL/Python</application>. Binaries can
      be downloaded from <ulink url="http://www.python.org"></>.
     </para></listitem>
     -->
     <listitem><para>
      Python用于编译<application>PL/Python</application>。可以从<ulink url="http://www.python.org"></>下载二进制文件。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>zlib</productname></term>
   <!--
     <listitem><para>
      Required for compression support in <application>pg_dump</application>
      and <application>pg_restore</application>. Binaries can be downloaded
      from <ulink url="http://www.zlib.net"></>.
     </para></listitem>
     -->
     <listitem><para>
      zlib用于为<application>pg_dump</application>和<application>pg_restore</application>提供压缩支持。可以从<ulink url="http://www.zlib.net"></>下载二进制文件。
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
 </sect2>

 <sect2>
  <!--
  <title>Special Considerations for 64-bit Windows</title>
    -->
  <title>针对64位Windows的注意事项</title>

  <!--
  <para>
   PostgreSQL will only build for the x64 architecture on 64-bit Windows, there
   is no support for Itanium processors.
  </para>
    -->
  <para>
   在64位Windows上只能编译x64架构的PostgreSQL，不支持安腾的处理器。
  </para>

  <!--
  <para>
   Mixing 32- and 64-bit versions in the same build tree is not supported.
   The build system will automatically detect if it's running in a 32- or
   64-bit environment, and build PostgreSQL accordingly. For this reason, it
   is important to start the correct command prompt before building.
  </para>
  -->
  <para>
   同一个编译树上不支持32位和64位的混编。编译系统能自动检测平台环境是32位或64位，
   并编译出对应版本。因此，在编译前启动正确的命令行很重要。
  </para>

  <!--
  <para>
   To use a server-side third party library such as <productname>python</> or
   <productname>openssl</>, this library <emphasis>must</emphasis> also be
   64-bit. There is no support for loading a 32-bit library in a 64-bit
   server. Several of the third party libraries that PostgreSQL supports may
   only be available in 32-bit versions, in which case they cannot be used with
   64-bit PostgreSQL.
  </para>
    -->
  <para>
   要使用服务器端的第三方库，如<productname>python</>或<productname>openssl</>，这些库<emphasis>必须</emphasis>是64位的。64位服务器上不支持对32位库的加载。
   一些PostgreSQL支持的第三方库只有32位的版本，这种情形下，它们不能被64位的PostgreSQL使用。
  </para>
 </sect2>

 <sect2>
  <!--
  <title>Building</title>
    -->
  <title>编译</title>

  <para>
   <!--
   To build all of PostgreSQL in release configuration (the default), run the
   command:
     -->
   使用发行版配置(默认)来编译完整的PostgreSQL，运行命令：
<screen>
<userinput>build</userinput>
</screen>
   <!--
   To build all of PostgreSQL in debug configuration, run the command:
     -->
   使用调试配置来编译完整的PostgreSQL，运行命令：
<screen>
<userinput>build DEBUG</userinput>
</screen>
   <!--
   To build just a single project, for example psql, run the commands:
     -->
   只编译单个项目，例如psql，运行命令：
<screen>
<userinput>build psql</userinput>
<userinput>build DEBUG psql</userinput>
</screen>
   <!--
   To change the default build configuration to debug, put the following
   in the <filename>buildenv.pl</filename> file:
     -->
   要将默认的编译配置改为调试配置，需要在<filename>buildenv.pl</filename>文件中加入下面的内容：
<programlisting>
$ENV{CONFIG}="Debug";
</programlisting>
  </para>

  <para>
   <!--
   It is also possible to build from inside the Visual Studio GUI. In this
   case, you need to run:
     -->
   也可以Visual Studio的图形化界面来编译，这时需要在命令行中运行：
<screen>
<userinput>perl mkvcbuild.pl</userinput>
</screen>
   <!--
   from the command prompt, and then open the generated
   <filename>pgsql.sln</filename> (in the root directory of the source tree)
   in Visual Studio.
     -->
   然后在Visual Studio中打开生成的<filename>pgsql.sln</filename>文件(源码树的根目录)。
  </para>
 </sect2>

 <sect2>
  <!--
  <title>Cleaning and Installing</title>
    -->
  <title>清除和安装</title>

  <!--
  <para>
   Most of the time, the automatic dependency tracking in Visual Studio will
   handle changed files. But if there have been large changes, you may need
   to clean the installation. To do this, simply run the
   <filename>clean.bat</filename> command, which will automatically clean out
   all generated files. You can also run it with the
   <parameter>dist</parameter> parameter, in which case it will behave like
   <userinput>make distclean</userinput> and remove the flex/bison output files
   as well.
  </para>
  -->
  <para>
   大多数时候，Visual Studio会自动追踪所依赖的文件的改动。但是当有大量改动的的时候，可能需要清除安装。
   要做到这一点，只需简单的运行<filename>clean.bat</filename>，它将自动的清除生成的所有文件。
   也可以在运行时添加<parameter>dist</parameter>参数，它的行为和<userinput>make distclean</userinput>命令比较相似，同时会清除flex/bison的输出文件。
  </para>

  <!--
  <para>
   By default, all files are written into a subdirectory of the
   <filename>debug</filename> or <filename>release</filename> directories. To
   install these files using the standard layout, and also generate the files
   required to initialize and use the database, run the command:
<screen>
<userinput>install c:\destination\directory</userinput>
</screen>
  </para>
  -->
  <para>
   默认情况下，所有的文件都会写在<filename>debug</filename>或<filename>release</filename>目录的一个子目录下面。要使用标准设置安装这些文件，
   初始化这些生成的文件并使用数据库，运行命令：
<screen>
<userinput>install c:\destination\directory</userinput>
</screen>
  </para>
<!--
  <para>
   If you want to install only the client applications and
   interface libraries, then you can use these commands:
<screen>
<userinput>install c:\destination\directory client</userinput>
</screen>
  </para>
-->
  <para>
   如果你只想安装客户端应用和接口库，那么你可以使用这个命令：
<screen>
<userinput>install c:\destination\directory client</userinput>
</screen>
  </para>
 </sect2>

 <sect2>
  <!--
  <title>Running the Regression Tests</title>
    -->
  <title>运行回归测试</title>

  <para>
   <!--
   To run the regression tests, make sure you have completed the build of all
   required parts first. Also, make sure that the DLLs required to load all
   parts of the system (such as the Perl and Python DLLs for the procedural
   languages) are present in the system path. If they are not, set it through
   the <filename>buildenv.pl</filename> file. To run the tests, run one of
   the following commands from the <filename>src\tools\msvc</filename>
   directory:
     -->
   要运行回归测试，首先确保已经完成所需的部分的编译。同时，确保用来加载系统所有部分(例如程序语言Perl和Python的DLLs)的DLLs已经在系统路径中存在。
   如果没有，通过<filename>buildenv.pl</filename>文件来设置。要运行测试，在<filename>src\tools\msvc</filename>目录中运行下面命令中的一个：
<screen>
<userinput>vcregress check</userinput>
<userinput>vcregress installcheck</userinput>
<userinput>vcregress plcheck</userinput>
<userinput>vcregress contribcheck</userinput>
</screen>

   <!--
   To change the schedule used (default is parallel), append it to the
   command line like:
  -->
   要改变调度方式(默认是并行),将它加在命令行后：
<screen>
<userinput>vcregress check serial</userinput>
</screen>

   <!--
   For more information about the regression tests, see
   <xref linkend="regress">.
     -->
   关于回归测试的更多内容，参见<xref linkend="regress">。
  </para>
 </sect2>

 <sect2>
  <!--
  <title>Building the Documentation</title>
    -->
  <title>编译文档</title>

  <para>
   <!--
   Building the PostgreSQL documentation in HTML format requires several tools
   and files. Create a root directory for all these files, and store them
   in the subdirectories in the list below.
     -->
   把PostgreSQL文档编译成HTML格式需要一些工具和文件。为所有这些文件创建一个根目录，将它们存储在下列的子目录中。
   <variablelist>
    <varlistentry>
     <term>OpenJade 1.3.1-2</term>
     <listitem><para>
    <!--
      Download from
      <ulink url="http://sourceforge.net/projects/openjade/files/openjade/1.3.1/openjade-1_3_1-2-bin.zip/download"></>
      and uncompress in the subdirectory <filename>openjade-1.3.1</filename>.
      -->
      从 <ulink url="http://sourceforge.net/projects/openjade/files/openjade/1.3.1/openjade-1_3_1-2-bin.zip/download"></>下载并解压到子目录<filename>openjade-1.3.1</filename>中。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DTD 4.2</term>
     <listitem><para>
    <!--
      Download from
      <ulink url="http://www.oasis-open.org/docbook/sgml/4.2/docbook-4.2.zip"></>
      and uncompress in the subdirectory <filename>docbook</filename>.
      -->
      从<ulink url="http://www.oasis-open.org/docbook/sgml/4.2/docbook-4.2.zip"></>下载并解压到子目录<filename>docbook</filename>中。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DSSSL 1.79</term>
     <listitem><para>
    <!--
      Download from
      <ulink url="http://sourceforge.net/projects/docbook/files/docbook-dsssl/1.79/docbook-dsssl-1.79.zip/download"></>
      and uncompress in the subdirectory
      <filename>docbook-dsssl-1.79</filename>.
      -->
      从<ulink url="http://sourceforge.net/projects/docbook/files/docbook-dsssl/1.79/docbook-dsssl-1.79.zip/download"></>下载并解压到子目录<filename>docbook-dsssl-1.79</filename>中。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>ISO character entities</term>
     <listitem><para>
    <!--
      Download from
      <ulink url="http://www.oasis-open.org/cover/ISOEnts.zip"></> and
      uncompress in the subdirectory <filename>docbook</filename>.
      -->
      从<ulink url="http://www.oasis-open.org/cover/ISOEnts.zip"></>下载并解压到子目录<filename>docbook</filename>中。
     </para></listitem>
    </varlistentry>
   </variablelist>
   <!--
   Edit the <filename>buildenv.pl</filename> file, and add a variable for the
   location of the root directory, for example:
     -->
   编辑<filename>buildenv.pl</filename>文件，为根目录的地址增加一个变量，如：
<programlisting>
$ENV{DOCROOT}='c:\docbook';
</programlisting>
   <!--
   To build the documentation, run the command
   <filename>builddoc.bat</filename>. Note that this will actually run the
   build twice, in order to generate the indexes. The generated HTML files
   will be in <filename>doc\src\sgml</filename>.
     -->
   要编译文档，运行<filename>builddoc.bat</filename>文件。注意为了生成索引，
   实际上编译会运行两次。生成的HTML文件存在于<filename>doc\src\sgml</filename>中。
  </para>
 </sect2>

 </sect1>

 <sect1 id="install-windows-libpq">
  <!--
  <title>Building <application>libpq</application> with
  <productname>Visual C++</productname> or
  <productname>Borland C++</productname></title>
    -->
  <title>用<productname>Visual C++</productname>或
  <productname>Borland C++</productname>编译
  <application>libpq</application></title>

 <!--
 <para>
  Using <productname>Visual C++ 7.1-9.0</productname> or
  <productname>Borland C++</productname> to build libpq is only recommended
  if you need a version with different debug/release flags, or if you need a
  static library to link into an application. For normal use the
  <productname>MinGW</productname> or
  <productname>Visual Studio</productname> or
  <productname>Windows SDK</productname> method is recommended.
 </para>
   -->
 <para>
  只有在需要一个含有不同的调试和发行版标记的版本，或者需要一个静态库来链接应用程序时，
  才推荐使用<productname>Visual C++ 7.1-9.0</productname>或<productname>Borland C++</productname>来编译libpq。
  一般情况下，推荐使用<productname>MinGW</productname>或<productname>Visual Studio</productname>或<productname>Windows SDK</productname>的方法。
 </para>

 <para>
  <!--
  To build the <application>libpq</application> client library using
  <productname>Visual Studio 7.1 or later</productname>, change into the
  <filename>src</filename> directory and type the command:
    -->
  
  使用<productname>Visual Studio 7.1或更新版本</productname>编译<application>libpq</application>的客户端库时，在<filename>src</filename>目录下输入下面的命令： 
<screen>
<userinput>nmake /f win32.mak</userinput>
</screen>
 </para>
 <para>
 <!--
 To build a 64-bit version of the <application>libpq</application>
 client library using <productname>Visual Studio 8.0 or
 later</productname>, change into the <filename>src</filename>
 directory and type in the command:
   -->
 使用<productname>Visual Studio 8.0或更新版本</productname>编译64位的<application>libpq</application>客户端库时，在<filename>src</filename>目录下输入下面的命令：
<screen>
<userinput>nmake /f win32.mak CPU=AMD64</userinput>
</screen>
 <!--
 See the <filename>win32.mak</filename> file for further details
 about supported variables.
   -->
 关于支持的变量的更多细节参考<filename>win32.mak</filename>文件。 
 </para>

 <para>
  <!--
  To build the <application>libpq</application> client library using
  <productname>Borland C++</productname>, change into the
  <filename>src</filename> directory and type the command:
    -->
  使用<productname>Borland C++</productname>编译<application>libpq</application>的客户端库时，在<filename>src</filename>目录下输入下面的命令：
<screen>
<userinput>make -N -DCFG=Release /f bcc32.mak</userinput>
</screen>
 </para>

 <sect2>
 <!--
 <title>Generated Files</title>
   -->
 <title>生成文件</title>
 <para>
  <!--
  The following files will be built:
    -->
  下面的文件会被编译：

  <variablelist>
   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.dll</filename></term>
    <listitem>
   <!--
     <para>
      The dynamically linkable frontend library
     </para>
     -->
     <para>
      可链接的前端动态库
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpqdll.lib</filename></term>
    <listitem>
   <!--
     <para>
      Import library to link your programs to <filename>libpq.dll</filename>
     </para>
     -->
     <para>
      导入库链接你的程序和<filename>libpq.dll</filename>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.lib</filename></term>
    <listitem>
   <!--
     <para>
      Static version of the frontend library
     </para>
     -->
     <para>
      静态版的前端库
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>

 <!--
 <para>
  Normally you do not need to install any of the client files. You should
  place the <filename>libpq.dll</filename> file in the same directory
  as your applications executable file. Do not install
  <filename>libpq.dll</filename> into your <filename>Windows</>,
  <filename>System</> or <filename>System32</> directory unless
  absolutely necessary.
  If this file is installed using a setup program, then it should
  be installed with version checking using the
  <symbol>VERSIONINFO</symbol> resource included in the file, to
  ensure that a newer version of the library is not overwritten.
 </para>
   -->
 <para>
  通常不需要安装任何的客户端文件。应该将<filename>libpq.dll</filename>文件放在和可执行的应用程序文件在同一个目录下。
  除非必要，否则不要把<filename>libpq.dll</filename>放入<filename>Windows</>,<filename>System</>或<filename>System32</>的目录下。
  如果这个文件是使用安装程序安装的，那么需要使用文件中包含的<symbol>VERSIONINFO</symbol>进行版本检查，以免被新版本的库覆盖掉。
 </para>

 <para>
  <!--
  If you are planning to do development using <application>libpq</application>
  on this machine, you will have to add the
  <filename>src\include</filename> and
  <filename>src\interfaces\libpq</filename> subdirectories of the source
  tree to the include path in your compiler's settings.
    -->
  如果需要在本机器上使用<application>libpq</application>进行开发，要将源码树中的<filename>src\include</filename>和<filename>src\interfaces\libpq</filename>子目录加入到编译器的配置中。
 </para>

 <para>
  <!--
  To use the library, you must add the
  <filename>libpqdll.lib</filename> file to your project.  (In Visual
  C++, just right-click on the project and choose to add it.)
    -->
  要使用这个库，你必须将<filename>libpqdll.lib</filename>添加到项目中。(在Visual C++中,只需在项目上右键单击并选择添加。)</para>
 </sect2>
 </sect1>
</chapter>

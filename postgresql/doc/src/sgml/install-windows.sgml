<!-- doc/src/sgml/install-windows.sgml -->

<chapter id="install-windows">
 <title>在<productname>Windows</productname>上从源代码安装</title>

 <indexterm>
  <primary>installation</primary>
  <secondary>on Windows</secondary>
 </indexterm>

 <para>
  对于大部分用户，推荐下载Windows的二进制发布，它在<productname>PostgreSQL</productname>的网站上作为一个图形化安装包可供下载。从源代码构建的方式只适合于希望开发或者扩展<productname>PostgreSQL</productname>的人们。
 </para>

 <para>
  有多种不同的方式可以在<productname>Windows</productname>上构建PostgreSQL。用微软工具进行构建的最简单方式是安装<productname>Visual Studio Express 2013 for Windows Desktop</productname>并使用其中包含的编译器。也可以使用完整的<productname>Microsoft Visual C++ 2005到2013</productname>来构建。在某些情况中除了编译器还需要安装<productname>Windows SDK</productname>。
 </para>

 <para>
  也可以使用由<productname>MinGW</productname>提供的GNU编译器工具来构建PostgreSQL，或者使用适合于旧版本<productname>Windows</productname>的<productname>Cygwin</productname>。
 </para>

 <para>
  最后，客户端访问库（<application>libpq</application>）可以使用<productname>Visual C++ 7.1</productname>或<productname>Borland C++</productname>构建，以便兼容哪些使用这些工具构建的静态链接应用。
 </para>

 <para>
  使用<productname>MinGW</productname>或<productname>Cygwin</productname>的构建用到普通构建系统，见<xref linkend="installation">、<xref linkend="installation-notes-mingw">和<xref linkend="installation-notes-cygwin">。在这些环境下，要产生原生的64位二进制代码，请使用<productname>MinGW-w64</productname>中的工具。这些工具同样可以被用于在32位和64位 <productname>Windows</productname>上交叉编译其他主机上的目标，例如<productname>Linux</productname>和<productname>Darwin</productname>。不推荐将<productname>Cygwin</productname>用于一个产品服务器，它只应被用于老版本的<productname>Windows</productname>，因为在这些系统中原生构建无法工作，例如<productname>Windows 98</productname>。官方的二进制代码使用<productname>Visual Studio</productname>构建。
 </para>

 <para>
  <application>psql</application>的原生构建不支持命令行编辑。<productname>Cygwin</productname>构建能支持命令行编辑，因此如果需要在<productname>Windows</productname>上交互式地使用psql可以用到它。
 </para>

 <sect1 id="install-windows-full">
  <title>使用<productname>Visual C++</productname>或<productname>Microsoft Windows SDK</productname>构建</title>

 <para>
  PostgreSQL可以使用来自微软的Visual C++编译器套件构建。这些编译器可以来自于<productname>Visual Studio</productname>、<productname>Visual Studio Express</productname>或者<productname>Microsoft Windows SDK</productname>的某些版本。如果你还没有准备好一个<productname>Visual Studio</productname>环境设置，最简单的方式是使用<productname>Visual Studio Express 2013 for Windows Desktop</productname>中的编译器，或者<productname>Windows SDK 7.1</productname>中的，两者都可以从微软免费下载。
 </para>

 <para>
  PostgreSQL已知可以支持使用随<productname>Visual Studio 2005</productname>至<productname>Visual Studio 2013</productname>（包括精简版）发行的编译器进行编译，单独的Windows SDK 6.0至7.1亦可。64位PostgreSQL的构建只被<productname>Microsoft Windows SDK</productname>版本6.0a至7.1或<productname>Visual Studio 2008</productname>及以上版本支持。
 </para>

 <para>
  使用<productname>Visual C++</productname>或<productname>Platform SDK</productname>构建的工具在<filename>src/tools/msvc</filename>目录中。在构建时，请确定在系统路径中没有来自于<productname>MinGW</productname>或的<productname>Cygwin</productname>工具。同样，确保所有需要的Visual C++工具都在PATH中。在<productname>Visual Studio</productname>中，启动<application>Visual Studio Command Prompt</application>。如果你希望构建一个64位版本，你必须使用64位版本的命令，反之亦然。在<productname>Microsoft Windows SDK</productname>中，启动该SDK在启动菜单中的<application>CMD shell</application>。在最近的SDK版本中你可以使用<command>setenv</command>命令改变目标CPU架构、构建类型以及目标OS，例如<command>setenv /x86 /release /xp</command>会设置为Windows XP或更高版本上的32位发布构建。使用<command>/?</command>来了解<command>setenv</command>的其他选项。所有命令应该从<filename>src\tools\msvc</filename>目录运行。
 </para>

 <para>
  在开始构建之前，你还需要编辑文件<filename>config.pl</filename>来反映任何你想改变的配置选项，或者要使用的任何第三方库目录。完整的配置在第一次读取并解析文件<filename>config_default.pl</filename>时确定，然后应用<filename>config.pl</filename>中的任何改变。例如，要制定你的<productname>Python</productname>安装的位置，将下面的内容放在<filename>config.pl</filename>中：
<programlisting>
$config->{python} = 'c:\python26';
</programlisting>
  你只需要指定那些和<filename>config_default.pl</filename>中不同的参数即可。
 </para>

 <para>
  如果你希望设置任何其他环境变量，可创建一个名为<filename>buildenv.pl</filename>的文件并将需要的命令放在其中。例如，要把不在PATH中的bison路径加上，创建一个包含以下内容的文件：
<programlisting>
$ENV{PATH}=$ENV{PATH} . ';c:\some\where\bison\bin';
</programlisting>
 </para>

 <sect2>
  <title>要求</title>
  <para>
   构建<productname>PostgreSQL</productname>时需要下列附加产品。使用<filename>config.pl</filename>文件来指定这些库所在的目录。

   <variablelist>
    <varlistentry>
     <term><productname>Microsoft Windows SDK</productname></term>
     <listitem><para>
      如果你的构建环境中没有一个受支持的<productname>Microsoft Windows SDK</productname>版本，推荐你升级到最新版（当前版本为7.1，可从<ulink url="http://www.microsoft.com/downloads/"></>下载）。
     </para>
     <para>
      你必须总是包括SDK中的<application>Windows头文件和库</application>部分。如果你安装的是一个包括<application>Visual C++ 编译器</application>的<productname>Windows SDK</productname>，构建时不需要<productname>Visual Studio</productname>。注意在版本8.0a，Windows SDK中不再包括一个完整的命令行构建环境。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
      ActiveState Perl被用来运行构建生成脚本。MinGW或Cygwin Perl是不符合要求的。AcitveState Perl也必须存在于PATH中。其二进制文件可以从<ulink url="http://www.activestate.com"></>下载（注意：需要版本5.8及以上，免费标准发布就足够了）。
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
  <para>
   下面的附加产品在开始时并不要求，但是如果要构建完整的包就需要它们。使用<filename>config.pl</filename>文件来指定这些库所在的目录。

   <variablelist>
    <varlistentry>
     <term><productname>ActiveState TCL</productname></term>
     <listitem><para>
      用于构建<application>PL/TCL</application>（注意：要求版本8.4，免费标准发布即可）。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Bison</productname>和
      <productname>Flex</productname></term>
     <listitem>
     <para>
      <productname>Bison</productname>和<productname>Flex</productname>用来从Git构建，但使用发行文件构建时可以不要求。只有<productname>Bison</productname> 1.875或2.2及以上才能正常工作。<productname>Flex</productname>则必须是版本2.5.31或以上。
     </para>

     <para>
    <productname>Bison</productname>和<productname>Flex</productname>都包括在<productname>msys</productname>工具套件中，它作为<productname>MinGW</productname>编译器套件的一部分可以从<ulink url="http://www.mingw.org/wiki/MSYS"></>得到。<productname>msys</productname>也可以作为<productname>msysGit</productname>的一部分从<ulink url="http://git-scm.com/"></>得到。
     </para>

     <para>
      你将需要把包含<filename>flex.exe</filename>和<filename>bison.exe</filename>的目录加入到<filename>buildenv.pl</filename>中的PATH环境变量中，除非它们已经存在于PATH中。在MinGW的情况下，目录将是MinGW安装目录的<filename>\msys\1.0\bin</filename>子目录。对于msysGit，目录将是Git安装目录的<filename>bin</filename>目录。不要将MinGW编译器工具本身加入到PATH中。
     </para>

     <note>
      <para>
        来自GnuWin32的Bison发布似乎有一个故障，它会导致Bison安装于名称中有空格的目录时发生故障，例如英语安装的默认位置<filename>C:\Program Files\GnuWin32</filename>。考虑将它安装到<filename>C:\GnuWin32</filename>或者在PATH环境设置中使用NTFS段路径名（例如<filename>C:\PROGRA~1\GnuWin32</filename>）。
       </para>
     </note>

     <note>
       <para>
       在PostgreSQL的FTP站点上的以及被旧文档引用的老式“winflex”二进制程序在64位Windows主机上会出现"flex: fatal
       internal error, exec failed"的错误。请使用来自msys的flex。
       </para>
     </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Diff</productname></term>
     <listitem><para>
      Diff是回归测试所需要的，可以从<ulink url="http://gnuwin32.sourceforge.net"></>得到。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Gettext</productname></term>
     <listitem><para>
      Gettext用于NLS支持，可以从<ulink url="http://gnuwin32.sourceforge.net"></>得到。注意二进制程序、依赖文件以及开发者文件都需要。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>MIT Kerberos</productname></term>
     <listitem><para>
      用于 GSSAPI 认证支持。MIT Kerberos可以从<ulink url="http://web.mit.edu/Kerberos/dist/index.html"></>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>libxml2</productname> and
      <productname>libxslt</productname></term>
     <listitem><para>
      用于XML支持。二进制文件可以从<ulink url="http://zlatkovic.com/pub/libxml"></>得到，源代码可以从<ulink url="http://xmlsoft.org"></>得到。注意libxml2需要iconv，后者也可以在相同的下载位置得到。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>openssl</productname></term>
     <listitem><para>
      用于SSL支持。二进制文件可以从<ulink url="http://www.slproweb.com/products/Win32OpenSSL.html"></>下载，源代码可以从<ulink url="http://www.openssl.org"></>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ossp-uuid</productname></term>
     <listitem><para>
      用于UUID-OSSP支持（contrib only）。源代码可以从<ulink url="http://www.ossp.org/pkg/lib/uuid/"></>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Python</productname></term>
     <listitem><para>
      用于构建<application>PL/Python</application>。二进制文件可以从<ulink url="http://www.python.org"></>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>zlib</productname></term>
     <listitem><para>
      用于<application>pg_dump</application>和<application>pg_restore</application>中的压缩支持。二进制文件可以从<ulink url="http://www.zlib.net"></>下载。
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
 </sect2>

 <sect2>
  <title>针对64位Windows的特殊考虑</title>

  <para>
   在64位Windows上，PostgreSQL只能为x64架构构建，因此无法支持安腾处理器。
  </para>

  <para>
   不支持在同一个构建树中混合32位和64位版本。构建系统会自动检测它运行在32位还是64位环境中，然后相应地构建PostgreSQL。鉴于此，在构建前启动正确的命令提示很重要。
  </para>

  <para>
   要使用服务器端的第三方库如<productname>python</>或<productname>openssl</>，该库<emphasis>必须</emphasis>也是64位。在一个64位服务器上载入一个32位库是不被支持的。PostgreSQL支持的一些第三方库可能只有32位版本，在这种情况下它们就不能被用于64位PostgreSQL。
  </para>
 </sect2>

 <sect2>
  <title>构建</title>

  <para>
   要在发行配置中构建PostgreSQL的所有部分（默认），运行命令：
<screen>
<userinput>build</userinput>
</screen>
   要在调试配置中构建PostgreSQL的所有部分，运行命令：
<screen>
<userinput>build DEBUG</userinput>
</screen>
   要构建单独一个对象，例如psql，运行命令：
<screen>
<userinput>build psql</userinput>
<userinput>build DEBUG psql</userinput>
</screen>
   要将默认的构建配置改变成调试，将下面的内容放在<filename>buildenv.pl</filename>文件中：
<programlisting>
$ENV{CONFIG}="Debug";
</programlisting>
  </para>

  <para>
   也可以在Visual Studio的图形界面中进行构建。在这种情况下，你需要在命令提示符下运行：
<screen>
<userinput>perl mkvcbuild.pl</userinput>
</screen>
   然后在Visual Studio中打开生成的<filename>pgsql.sln</filename>（在源代码树的根目录中）。
  </para>
 </sect2>

 <sect2>
  <title>清理和安装</title>

  <para>
   在大部分时间里，Visual Studio的自动依赖跟踪会处理发生改变的文件。但是如果发生了大量的改变，你也许需要清理整个安装。为此，只要运行<filename>clean.bat</filename>命令，它将会自动清除所有生成的文件。你也可以使用<parameter>dist</parameter>参数运行它，这种情况下它的效果和<userinput>make distclean</userinput>一样，并且会移除flex/bison的输出文件。
  </para>

  <para>
   默认情况下，所有的文件都被写入到名为<filename>debug</filename>或<filename>release</filename>的子目录中。要将这些文件以标准布局进行安装并且生成初始化和使用数据库所需的文件 ，运行命令：
<screen>
<userinput>install c:\destination\directory</userinput>
</screen>
  </para>
  
  <para>
   如果你想只安装客户端应用和接口库，那么你可以使用这些命令：
<screen>
<userinput>install c:\destination\directory client</userinput>
</screen>
  </para>
 </sect2>

 <sect2>
  <title>运行回归测试</title>

  <para>
   要运行回归测试，确保你已经完成了所有所需部分的构建。另外，确保载入整个系统所需的DLL（例如Perl和Python过程语言所需的DLL）都在系统路径中。如果它们不在路径中，通过<filename>buildenv.pl</filename>文件设置。要运行测试，可以从<filename>src\tools\msvc</filename>目录运行以下命令之一：
<screen>
<userinput>vcregress check</userinput>
<userinput>vcregress installcheck</userinput>
<userinput>vcregress plcheck</userinput>
<userinput>vcregress contribcheck</userinput>
<userinput>vcregress ecpgcheck</userinput>
<userinput>vcregress isolationcheck</userinput>
<userinput>vcregress upgradecheck</userinput>
</screen>

   要更改使用的调度方式（默认为并行），在命令行后增加调度方式，如：
<screen>
<userinput>vcregress check serial</userinput>
</screen>

   关于回归测试详见<xref linkend="regress">。
  </para>
 </sect2>

 <sect2>
  <title>构建文档</title>

  <para>
   构建HTML格式的PostgreSQL文档需要一些工具和文件。为所有这些文件创建一个根目录，然后将下面列出的它们分别放在相应子目录中。   <variablelist>
    <varlistentry>
     <term>OpenJade 1.3.1-2</term>
     <listitem><para>
      从<ulink url="http://sourceforge.net/projects/openjade/files/openjade/1.3.1/openjade-1_3_1-2-bin.zip/download"></>下载并解压到<filename>openjade-1.3.1</filename>子目录。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DTD 4.2</term>
     <listitem><para>
      从<ulink url="http://www.oasis-open.org/docbook/sgml/4.2/docbook-4.2.zip"></>下载并解压到<filename>docbook</filename>子目录。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DSSSL 1.79</term>
     <listitem><para>
      从<ulink url="http://sourceforge.net/projects/docbook/files/docbook-dsssl/1.79/docbook-dsssl-1.79.zip/download"></>下载并解压到<filename>docbook-dsssl-1.79</filename>子目录。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>ISO字符实体</term>
     <listitem><para>
      从<ulink url="http://www.oasis-open.org/cover/ISOEnts.zip"></>下载并解压到<filename>docbook</filename>子目录。
     </para></listitem>
    </varlistentry>
   </variablelist>
   编辑<filename>buildenv.pl</filename>文件，为根目录的位置增加一个变量，例如：
<programlisting>
$ENV{DOCROOT}='c:\docbook';
</programlisting>
   要构建文档，运行命令<filename>builddoc.bat</filename>。注意这实际会运行构建两次以生成索引。生成好的HTML文件将在<filename>doc\src\sgml</filename>中。
  </para>
 </sect2>

 </sect1>

 <sect1 id="install-windows-libpq">
  <title>使用<productname>Visual C++</productname>或
  <productname>Borland C++</productname>构建<application>libpq</application></title>

 <para>
  如果你需要一个具有不同调试/发行标记的版本，或者你需要一个静态库来链接到一个应用，使用<productname>Visual C++ 7.1-9.0</productname>或<productname>Borland C++</productname>构建libpq是唯一被推荐的方式。对于正常的使用，推荐用<productname>MinGW</productname>或<productname>Visual Studio</productname>或<productname>Windows SDK</productname>。
 </para>

 <para>
  要使用<productname>Visual Studio 7.1或以上</productname>构建<application>libpq</application>客户端库，转入到<filename>src</filename>目录并输入命令：
<screen>
<userinput>nmake /f win32.mak</userinput>
</screen>
 </para>
 <para>
 要使用<productname>Visual Studio 8.0或以上</productname>构建64位版本的<application>libpq</application>，转入到<filename>src</filename>目录并输入命令：
<screen>
<userinput>nmake /f win32.mak CPU=AMD64</userinput>
</screen>
 更多变量细节参见<filename>win32.mak</filename>文件。
 </para>

 <para>
  要使用<productname>Borland C++</productname>构建<application>libpq</application>客户端库，转入到<filename>src</filename>目录并输入命令：
<screen>
<userinput>make -N -DCFG=Release /f bcc32.mak</userinput>
</screen>
 </para>

 <sect2>
 <title>生成的文件</title>
 <para>
  下列文件将被构建：

  <variablelist>
   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.dll</filename></term>
    <listitem>
     <para>
      可动态链接的前端库
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpqdll.lib</filename></term>
    <listitem>
     <para>
      用于链接程序到<filename>libpq.dll</filename>的导入库
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.lib</filename></term>
    <listitem>
     <para>
      前端库的静态版本
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>

 <para>
  通常你不需要安装任何一个客户端文件。你应该将<filename>libpq.dll</filename>文件放在你的可执行应用文件的同一目录下。如非必要，不要将<filename>libpq.dll</filename>安装到你的<filename>Windows</>、<filename>System</>或<filename>System32</>目录中。如果该文件通过一个安装程序安装，则在安装时会使用文件中包含的<symbol>VERSIONINFO</symbol>资源进行版本检查， 以保证更新版本的库不会被覆盖。
 </para>

 <para>
  如果你打算在这台机器上使用<application>libpq</application>进行开发，你还需要把源代码树中的<filename>src\include</filename>和<filename>src\interfaces\libpq</filename>子目录加入到编译器设置的include路径中。
 </para>

 <para>
  要使用该库，你必须把<filename>libpqdll.lib</filename>文件加入到你的项目（在Visual C++中，只需要在项目上单击右键并选择加入它）。
 </para>
 </sect2>
 </sect1>
</chapter>

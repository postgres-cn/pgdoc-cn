<!-- doc/src/sgml/advanced.sgml -->

 <chapter id="tutorial-advanced">
  <!-- <title>Advanced Features</title> -->
<title>高级特性</title>
  <sect1 id="tutorial-advanced-intro">
   <!-- <title>Introduction</title> -->
<title>介绍</title>
   <!-- 
   <para>
    In the previous chapter we have covered the basics of using
    <acronym>SQL</acronym> to store and access your data in
    <productname>PostgreSQL</productname>.  We will now discuss some
    more advanced features of <acronym>SQL</acronym> that simplify
    management and prevent loss or corruption of your data.  Finally,
    we will look at some <productname>PostgreSQL</productname>
    extensions.
   </para> 
   -->
<para>
在前面几章里，我们介绍了使用<acronym>SQL</acronym>存储和访问在<productname>PostgreSQL</productname>
里的数据的基本方法。我们现在将讨论一些<acronym>SQL</acronym>更高级的特性，
这些特性可以简化管理和避免数据的丢失或损坏。最后，我们将看看一些<productname>PostgreSQL</productname>
的扩展。
</para> 
   <!-- 
   <para>
    This chapter will on occasion refer to examples found in <xref
    linkend="tutorial-sql"> to change or improve them, so it will be
    useful to have read that chapter.  Some examples from
    this chapter can also be found in
    <filename>advanced.sql</filename> in the tutorial directory.  This
    file also contains some sample data to load, which is not
    repeated here.  (Refer to <xref linkend="tutorial-sql-intro"> for
    how to use the file.)
   </para> 
   -->
<para>   
本章将不时引用<xref linkend="tutorial-sql"> 中的例子，并且对它们进行修改和提高，
因此如果你已经看过那章会更好。本章的一些例子也可以在 tutorial 目录里的<filename>advanced.sql</filename>
文件里找到。这个文件还包括一些要装载的例子数据，这些数据没有在这里介绍。
请参考<xref linkend="tutorial-sql-intro">获取如何使用该文件的方法。   
</para>    
  </sect1>


  <sect1 id="tutorial-views">
   <!-- <title>Views</title> -->
<title>视图</title>
   <indexterm zone="tutorial-views">
    <primary>view</primary>
   </indexterm>

   <para>
    <!-- 
Refer back to the queries in <xref linkend="tutorial-join">.
    Suppose the combined listing of weather records and city location
    is of particular interest to your application, but you do not want
    to type the query each time you need it.  You can create a
    <firstterm>view</firstterm> over the query, which gives a name to
    the query that you can refer to like an ordinary table: 
-->
回头看看<xref linkend="tutorial-join">里的查询。假设你的应用对天气记录和城市位置的
组合列表特别感兴趣，而你又不想每次键入这些查询。那么你可以在这个查询上创建一个<firstterm>视图</firstterm>，
它给这个查询一个名字，你可以像普通表那样引用它。
<programlisting>
CREATE VIEW myview AS
    SELECT city, temp_lo, temp_hi, prcp, date, location
        FROM weather, cities
        WHERE city = name;

SELECT * FROM myview;
</programlisting>
   </para>

   <!-- 
   <para>
    Making liberal use of views is a key aspect of good SQL database
    design.  Views allow you to encapsulate the details of the
    structure of your tables, which might change as your application
    evolves, behind consistent interfaces.
   </para> 
   -->
<para>
自由地运用视图是好的 SQL 数据库设计的一个关键要素。视图允许我们把表结构的细节封装起来，
这些表可能随你的应用进化而变化，但这些变化却可以隐藏在一个一致的接口后面。
</para>
   <!-- 
   <para>
    Views can be used in almost any place a real table can be used.
    Building views upon other views is not uncommon.
   </para>
   -->
   <para>
视图几乎可以在一个真正的表可以使用的任何地方使用。在其它视图上面再创建视图也并非罕见。
   </para>
  </sect1>


  <sect1 id="tutorial-fk">
   <!-- <title>Foreign Keys</title> -->
<title>外键</title>
   <indexterm zone="tutorial-fk">
    <primary>foreign key</primary>
   </indexterm>

   <indexterm zone="tutorial-fk">
    <primary>referential integrity</primary>
   </indexterm>

   <!-- 
   <para>
    Recall the <classname>weather</classname> and
    <classname>cities</classname> tables from <xref
    linkend="tutorial-sql">.  Consider the following problem:  You
    want to make sure that no one can insert rows in the
    <classname>weather</classname> table that do not have a matching
    entry in the <classname>cities</classname> table.  This is called
    maintaining the <firstterm>referential integrity</firstterm> of
    your data.  In simplistic database systems this would be
    implemented (if at all) by first looking at the
    <classname>cities</classname> table to check if a matching record
    exists, and then inserting or rejecting the new
    <classname>weather</classname> records.  This approach has a
    number of problems and is very inconvenient, so
    <productname>PostgreSQL</productname> can do this for you.
   </para> 
   -->
 <para>
回忆一下<xref linkend="tutorial-sql">里的<classname>weather</classname>和<classname>cities</classname>表。
考虑下面的问题：你想确保没有人可以在<classname>weather</classname>表里插入一条在<classname>cities</classname>
表里没有匹配记录的数据行。这就叫维护表的<firstterm>参照完整性</firstterm>。在简单的数据库系统里，
实现(如果也叫实现)这个特性的方法通常是先看看<classname>cities</classname>表里是否有匹配的记录，
然后插入或者拒绝新的<classname>weather</classname>记录。这个方法有许多问题，而且非常不便，
因此<productname>PostgreSQL</productname>可以为你做这些。 
</para>
   <para>
    <!-- The new declaration of the tables would look like this: -->
新的表声明看起来会像下面这样：
<programlisting>
CREATE TABLE cities (
        city     varchar(80) primary key,
        location point
);

CREATE TABLE weather (
        city      varchar(80) references cities(city),
        temp_lo   int,
        temp_hi   int,
        prcp      real,
        date      date
);
</programlisting>

    <!-- Now try inserting an invalid record: -->
然后我们试图插入一条非法的记录：
<programlisting>
INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');
</programlisting>

<screen>
ERROR:  insert or update on table "weather" violates foreign key constraint "weather_city_fkey"
DETAIL:  Key (city)=(Berkeley) is not present in table "cities".
</screen>
   </para>

   <!-- 
   <para>
    The behavior of foreign keys can be finely tuned to your
    application.  We will not go beyond this simple example in this
    tutorial, but just refer you to <xref linkend="ddl">
    for more information.  Making correct use of
    foreign keys will definitely improve the quality of your database
    applications, so you are strongly encouraged to learn about them.
   </para> 
   -->
<para>  
外键的行为可以根据你的应用仔细调节。在这份教程里我们就不再多说了，请你参考<xref linkend="ddl">
以获取更多的信息。正确使用外键无疑将改进你的数据库应用，所以我们强烈建议你学习它们。   
</para>   
  </sect1>


  <sect1 id="tutorial-transactions">
   <!-- <title>Transactions</title> -->
<title>事务</title>
   <indexterm zone="tutorial-transactions">
    <primary>transaction</primary>
   </indexterm>

   <!-- 
   <para>
    <firstterm>Transactions</> are a fundamental concept of all database
    systems.  The essential point of a transaction is that it bundles
    multiple steps into a single, all-or-nothing operation.  The intermediate
    states between the steps are not visible to other concurrent transactions,
    and if some failure occurs that prevents the transaction from completing,
    then none of the steps affect the database at all.
   </para> 
   -->
<para>
<firstterm>事务</>是所有数据库系统的一个基本概念。一次事务的要点就是把多个步骤捆绑成一个单一的、
不成功则成仁的操作。其它并发的事务是看不到在这些步骤之间的中间状态的，并且如果发生了一些问题，
导致该事务无法完成，那么所有这些步骤都完全不会影响数据库。
</para>
   <para>
    <!-- 
For example, consider a bank database that contains balances for various
    customer accounts, as well as total deposit balances for branches.
    Suppose that we want to record a payment of $100.00 from Alice's account
    to Bob's account.  Simplifying outrageously, the SQL commands for this
    might look like: 
-->
比如，假设一个银行的数据库包含各种客户帐户的余额，以及每个分行的总余额。
假设我们要记录一次从 Alice 的帐户到 Bob 的帐户的金额为 $100.00 的支付动作。
那么，完成这个任务的简单到极点的 SQL 命令像下面这样：
<programlisting>
UPDATE accounts SET balance = balance - 100.00
    WHERE name = 'Alice';
UPDATE branches SET balance = balance - 100.00
    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Alice');
UPDATE accounts SET balance = balance + 100.00
    WHERE name = 'Bob';
UPDATE branches SET balance = balance + 100.00
    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Bob');
</programlisting>
   </para>

   <!-- 
   <para>
    The details of these commands are not important here; the important
    point is that there are several separate updates involved to accomplish
    this rather simple operation.  Our bank's officers will want to be
    assured that either all these updates happen, or none of them happen.
    It would certainly not do for a system failure to result in Bob
    receiving $100.00 that was not debited from Alice.  Nor would Alice long
    remain a happy customer if she was debited without Bob being credited.
    We need a guarantee that if something goes wrong partway through the
    operation, none of the steps executed so far will take effect.  Grouping
    the updates into a <firstterm>transaction</> gives us this guarantee.
    A transaction is said to be <firstterm>atomic</>: from the point of
    view of other transactions, it either happens completely or not at all.
   </para> 
   -->
<para>   
这些命令的细节在这儿并不重要；重要的是这里牵涉到了好几个独立的更新来完成这个相当简单的操作。
银行官员会希望要么所有这些更新全部生效，要么全部不起作用。我们当然不希望一次系统崩溃就导致
 Bob 收到 100 块不是 Alice 支付的钱，也不希望 Alice 老是不花钱从 Bob 那里拿到物品。我们需要保证：
如果在操作的过程中出了差错，那么所有这些步骤都不会发生效果。
把这些更新组合成一个<firstterm>事务</>就给予我们这样的保证。事务被认为是<firstterm>原子的</>：
从其它事务的角度来看，它要么是全部发生，要么完全不发生。   
</para>   

   <!-- 
   <para>
    We also want a
    guarantee that once a transaction is completed and acknowledged by
    the database system, it has indeed been permanently recorded
    and won't be lost even if a crash ensues shortly thereafter.
    For example, if we are recording a cash withdrawal by Bob,
    we do not want any chance that the debit to his account will
    disappear in a crash just after he walks out the bank door.
    A transactional database guarantees that all the updates made by
    a transaction are logged in permanent storage (i.e., on disk) before
    the transaction is reported complete.
   </para> 
   -->
<para>
我们还需要保证：一旦一个事务完成并且得到数据库系统的认可，那么它必须被真正永久地存储，
并且不会在随后的崩溃中消失。比如，如果我们记录到了一个 Bob 撤单的动作，
那么我们不希望仅仅在他走出银行大门之后的一次崩溃就会导致对他的帐户的扣减动作消失。
一个事务型数据库保证一个事务所做的所有更新在事务发出完成响应之前都记录到永久的存储中(也就是磁盘)。   
</para>    
   <!-- 
   <para>
    Another important property of transactional databases is closely
    related to the notion of atomic updates: when multiple transactions
    are running concurrently, each one should not be able to see the
    incomplete changes made by others.  For example, if one transaction
    is busy totalling all the branch balances, it would not do for it
    to include the debit from Alice's branch but not the credit to
    Bob's branch, nor vice versa.  So transactions must be all-or-nothing
    not only in terms of their permanent effect on the database, but
    also in terms of their visibility as they happen.  The updates made
    so far by an open transaction are invisible to other transactions
    until the transaction completes, whereupon all the updates become
    visible simultaneously.
   </para> 
   -->
<para>
事务型数据库的另外一个重要的性质和原子更新的概念关系密切：当多个事务并发地运行的时候，
每个事务都不应看到其它事务所做的未完成的变化。比如，如果一个事务正忙着计算所有分行的余额总和，
那么它不应该包括来自 Alice 的分行的扣帐和来自 Bob 分行的入帐，反之亦然。所以事务必须是黑白分明的，
不仅仅体现在它们在数据库上产生的永久影响上，而且体现在它们运转时的自身的可视性上。
一个打开的事务所做的更新在它完成之前是无法被其它事务看到的，而到提交的时候所有更新同时可见。   
</para>   
   <para>
    <!-- 
In <productname>PostgreSQL</>, a transaction is set up by surrounding
    the SQL commands of the transaction with
    <command>BEGIN</> and <command>COMMIT</> commands.  So our banking
    transaction would actually look like: 
-->
在<productname>PostgreSQL</>里，一个事务是通过把 SQL 命令用<command>BEGIN</>和<command>COMMIT</>
命令包围实现的。因此我们的银行事务实际上看起来像下面这样：
<programlisting>
BEGIN;
UPDATE accounts SET balance = balance - 100.00
    WHERE name = 'Alice';
-- 等等
COMMIT;
</programlisting>
   </para>

   <!-- 
   <para>
    If, partway through the transaction, we decide we do not want to
    commit (perhaps we just noticed that Alice's balance went negative),
    we can issue the command <command>ROLLBACK</> instead of
    <command>COMMIT</>, and all our updates so far will be canceled.
   </para> 
   -->
<para>
如果在该事务的过程中，我们决定不做提交(可能是我们刚发现 Alice 的余额是负数)，
那么我们可以发出<command>ROLLBACK</>而不是<command>COMMIT</>命令，
那么到目前为止我们的所有更新都会被取消。   
</para>   
   <!-- 
   <para>
    <productname>PostgreSQL</> actually treats every SQL statement as being
    executed within a transaction.  If you do not issue a <command>BEGIN</>
    command,
    then each individual statement has an implicit <command>BEGIN</> and
    (if successful) <command>COMMIT</> wrapped around it.  A group of
    statements surrounded by <command>BEGIN</> and <command>COMMIT</>
    is sometimes called a <firstterm>transaction block</>.
   </para> 
   -->
<para>   
<productname>PostgreSQL</> 实际上把每个 SQL 语句当做在一个事务中执行来看待。
如果你没有发出<command>BEGIN</>命令，那么每个独立的语句都被一个隐含的<command>BEGIN</>
和(如果成功的话)<command>COMMIT</>包围。一组包围在<command>BEGIN</>和<command>COMMIT</>
之间的语句有时候被称做<firstterm>事务块</>。   
</para>
   <note>
    <!-- 
<para>
     Some client libraries issue <command>BEGIN</> and <command>COMMIT</>
     commands automatically, so that you might get the effect of transaction
     blocks without asking.  Check the documentation for the interface
     you are using.
    </para> 
-->
<para>
一些客户端库自动发出<command>BEGIN</>和<command>COMMIT</>，
因此你可能不需要特意请求就可以获得事务块的效果。查看你使用的接口的文档。
</para> 
   </note>

   <!-- 
   <para>
    It's possible to control the statements in a transaction in a more
    granular fashion through the use of <firstterm>savepoints</>.  Savepoints
    allow you to selectively discard parts of the transaction, while
    committing the rest.  After defining a savepoint with
    <command>SAVEPOINT</>, you can if needed roll back to the savepoint
    with <command>ROLLBACK TO</>.  All the transaction's database changes
    between defining the savepoint and rolling back to it are discarded, but
    changes earlier than the savepoint are kept.
   </para>
   -->
<para>
我们可以通过使用<firstterm>保存点</>的方法，在一个事务里更加精细地控制其中的语句。
保存点允许你选择性地抛弃事务中的某些部分，而提交剩下的部分。在用<command>SAVEPOINT</>
定义了一个保存点后，如果需要，你可以使用<command>ROLLBACK TO</>回滚到该保存点。
则该事务在定义保存点到 ROLLBACK TO 之间的所有数据库更改都被抛弃，
但是在保存点之前的修改将被保留。
</para>
   <!-- 
   <para>
    After rolling back to a savepoint, it continues to be defined, so you can
    roll back to it several times.  Conversely, if you are sure you won't need
    to roll back to a particular savepoint again, it can be released, so the
    system can free some resources.  Keep in mind that either releasing or
    rolling back to a savepoint
    will automatically release all savepoints that were defined after it.
   </para> 
   -->
<para>
在回滚到一个保存点之后，这个保存点仍然保存着其定义，所以你可以回滚到这个位置好几次。
当然，如果你确信你不需要再次回滚到一个保存点，那么你可以释放它，这样系统可以释放一些资源。
要记住：释放或者回滚到一个保存点都会自动释放在其后定义的所有保存点。
</para>
   <!-- 
   <para>
    All this is happening within the transaction block, so none of it
    is visible to other database sessions.  When and if you commit the
    transaction block, the committed actions become visible as a unit
    to other sessions, while the rolled-back actions never become visible
    at all.
   </para> 
   -->
<para>
所有这些都发生在一个事务块内部，所以所有这些都不可能被其它事务会话看到。
当且仅当你提交了这个事务块，这些提交了的动作才能以一个单元的方式被其它会话看到，
而回滚的动作完全不会被看到。
</para>
   <para>
    <!-- 
Remembering the bank database, suppose we debit $100.00 from Alice's
    account, and credit Bob's account, only to find later that we should
    have credited Wally's account.  We could do it using savepoints like
    this: 
-->
记得我们的银行数据库吗? 假设我们从 Alice 的帐户上消费 $100.00 ，然后给 Bob 的帐户进行加款，
稍后我们发现我们应该给 Wally 的账号加款。那么我们可以像下面这样使用保存点：
<programlisting>
BEGIN;
UPDATE accounts SET balance = balance - 100.00
    WHERE name = 'Alice';
SAVEPOINT my_savepoint;
UPDATE accounts SET balance = balance + 100.00
    WHERE name = 'Bob';
-- 呀！加错钱了，应该用 Wally 的账号
ROLLBACK TO my_savepoint;
UPDATE accounts SET balance = balance + 100.00
    WHERE name = 'Wally';
COMMIT;
</programlisting>
   </para>

   <!-- 
   <para>
    This example is, of course, oversimplified, but there's a lot of control
    possible in a transaction block through the use of savepoints.
    Moreover, <command>ROLLBACK TO</> is the only way to regain control of a
    transaction block that was put in aborted state by the
    system due to an error, short of rolling it back completely and starting
    again.
   </para> 
   -->
<para>
这个例子当然是实在太简单了，但是通过使用保存点，我们可以对事务块有大量的控制。
并且，<command>ROLLBACK TO</>是除了事务全部回滚，重新来过之外，
唯一可以用于重新控制一个因错误而被系统置于退出状态事务的方法。
</para> 
  </sect1>


  <sect1 id="tutorial-window">
   <!-- <title>Window Functions</title> -->
<title>窗口函数</title>
   <indexterm zone="tutorial-window">
    <primary>window function</primary>
   </indexterm>

   <!-- 
   <para>
    A <firstterm>window function</> performs a calculation across a set of
    table rows that are somehow related to the current row.  This is comparable
    to the type of calculation that can be done with an aggregate function.
    But unlike regular aggregate functions, use of a window function does not
    cause rows to become grouped into a single output row &mdash; the
    rows retain their separate identities.  Behind the scenes, the window
    function is able to access more than just the current row of the query
    result.
   </para> 
   -->
<para>
<firstterm>窗口函数</>在和当前行相关的一组表行上执行计算。
这相当于一个可以由聚合函数完成的计算类型。但不同于常规的聚合函数，
使用的窗口函数不会导致行被分组到一个单一的输出行；行保留其独立的身份。
在后台，窗口函数能够访问的不止查询结果的当前行。   
</para>   
   <para>
    <!-- 
Here is an example that shows how to compare each employee's salary
    with the average salary in his or her department: 
-->
这里是一个例子，说明如何比较每个员工的工资和在他或她的部门的平均工资： 
<programlisting>
SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;
</programlisting>

<screen>
  depname  | empno | salary |          avg          
-----------+-------+--------+-----------------------
 develop   |    11 |   5200 | 5020.0000000000000000
 develop   |     7 |   4200 | 5020.0000000000000000
 develop   |     9 |   4500 | 5020.0000000000000000
 develop   |     8 |   6000 | 5020.0000000000000000
 develop   |    10 |   5200 | 5020.0000000000000000
 personnel |     5 |   3500 | 3700.0000000000000000
 personnel |     2 |   3900 | 3700.0000000000000000
 sales     |     3 |   4800 | 4866.6666666666666667
 sales     |     1 |   5000 | 4866.6666666666666667
 sales     |     4 |   4800 | 4866.6666666666666667
(10 rows)
</screen>

    <!-- 
The first three output columns come directly from the table
    <structname>empsalary</>, and there is one output row for each row in the
    table.  The fourth column represents an average taken across all the table
    rows that have the same <structfield>depname</> value as the current row.
    (This actually is the same function as the regular <function>avg</>
    aggregate function, but the <literal>OVER</> clause causes it to be
    treated as a window function and computed across an appropriate set of
    rows.) 
-->
前三输出列直接来自表<structname>empsalary</>，并有一个针对表中的每一行的输出行。
第四列将代表所有含有相同的<structfield>depname</>值的表行的平均值作为当前值。
（这实际上与标准<function>avg</>聚合函数的功能相同，
但是<literal>OVER</>子句使其被视为一个窗口函数并在一组合适的行上执行计算。）
   </para>

   <!-- 
   <para>
    A window function call always contains an <literal>OVER</> clause
    directly following the window function's name and argument(s).  This is what
    syntactically distinguishes it from a regular function or aggregate
    function.  The <literal>OVER</> clause determines exactly how the
    rows of the query are split up for processing by the window function.
    The <literal>PARTITION BY</> list within <literal>OVER</> specifies
    dividing the rows into groups, or partitions, that share the same
    values of the <literal>PARTITION BY</> expression(s).  For each row,
    the window function is computed across the rows that fall into the
    same partition as the current row.
   </para> 
   -->
<para>
窗口函数的调用总是包含一个<literal>OVER</>子句，后面直接跟着窗口函数的名称和参数。
这是它在语法上区别于普通函数或聚合功能的地方。
<literal>OVER</>子句决定如何将查询的行进行拆分以便给窗口函数处理。
<literal>OVER</>子句内的<literal>PARTITION BY</>列表指定将行划分成组或分区，
组或分区共享相同的<literal>PARTITION BY</>表达式的值。
对于每一行，窗口函数在和当前行落在同一个分区的所有行上进行计算。
</para>
   <para>
    <!-- 
You can also control the order in which rows are processed by
    window functions using <literal>ORDER BY</> within <literal>OVER</>.
    (The window <literal>ORDER BY</> does not even have to match the
    order in which the rows are output.)  Here is an example: 
-->
你还可以使用窗口函数<literal>OVER</>内的<literal>ORDER BY</>来控制行的顺序。
（<literal>ORDER BY</>窗口甚至不需要与行的输出顺序相匹配。）下面是一个例子： 
<programlisting>
SELECT depname, empno, salary,
       rank() OVER (PARTITION BY depname ORDER BY salary DESC)
FROM empsalary;
</programlisting>

<screen>
  depname  | empno | salary | rank 
-----------+-------+--------+------
 develop   |     8 |   6000 |    1
 develop   |    10 |   5200 |    2
 develop   |    11 |   5200 |    2
 develop   |     9 |   4500 |    4
 develop   |     7 |   4200 |    5
 personnel |     2 |   3900 |    1
 personnel |     5 |   3500 |    2
 sales     |     1 |   5000 |    1
 sales     |     4 |   4800 |    2
 sales     |     3 |   4800 |    2
(10 rows)
</screen>

    <!-- 
As shown here, the <function>rank</> function produces a numerical rank
    within the current row's partition for each distinct <literal>ORDER BY</>
    value, in the order defined by the <literal>ORDER BY</> clause.
    <function>rank</> needs no explicit parameter, because its behavior
    is entirely determined by the <literal>OVER</> clause. 
-->
正如此处所示，<function>rank</>函数按照由<literal>ORDER BY</>子句定义的顺序，
在当前行的分区里为每个不同的<literal>ORDER BY</>值产生了一个数值排名。
<function>rank</> 不需要明确的参数，因为它的行为完全取决于<literal>OVER</>子句。 
   </para>

   <!-- 
   <para>
    The rows considered by a window function are those of the <quote>virtual
    table</> produced by the query's <literal>FROM</> clause as filtered by its
    <literal>WHERE</>, <literal>GROUP BY</>, and <literal>HAVING</> clauses
    if any.  For example, a row removed because it does not meet the
    <literal>WHERE</> condition is not seen by any window function.
    A query can contain multiple window functions that slice up the data
    in different ways by means of different <literal>OVER</> clauses, but
    they all act on the same collection of rows defined by this virtual table.
   </para> 
   -->
<para>   
窗口函数的行来自查询的<literal>FROM</>子句产生，并且如果有的话，
经过<literal>WHERE</>,<literal>GROUP BY</>和<literal>HAVING</>子句过滤的<quote>虚拟表</>。
比如，被移除掉的行，因为不符合<literal>WHERE</>条件，所以是不能被任何窗口函数可见的。
一个查询可以包含多个窗口函数，通过不同的<literal>OVER</>子句用不同的方式分割数据，
但是他们都作用在这个虚拟表定义的同一个行集合。    
</para>
   <!-- 
   <para>
    We already saw that <literal>ORDER BY</> can be omitted if the ordering
    of rows is not important.  It is also possible to omit <literal>PARTITION
    BY</>, in which case there is just one partition containing all the rows.
   </para> 
   -->
<para>   
我们已经看到了，如果行排序并不重要，<literal>ORDER BY</>可以省略。
在只有一个包含了所有行的分区情况下，也可以省略<literal>PARTITION BY</>。    
</para>
   <para>
    <!-- 
There is another important concept associated with window functions:
    for each row, there is a set of rows within its partition called its
    <firstterm>window frame</>.  Many (but not all) window functions act only
    on the rows of the window frame, rather than of the whole partition.
    By default, if <literal>ORDER BY</> is supplied then the frame consists of
    all rows from the start of the partition up through the current row, plus
    any following rows that are equal to the current row according to the
    <literal>ORDER BY</> clause.  When <literal>ORDER BY</> is omitted the
    default frame consists of all rows in the partition. 
-->
还有一个与窗口函数相关的重要的概念：对于每一行，有在其分区范围内的行集，
又称为它的<firstterm>window frame</>。许多（但不是全部）窗口函数，只作用于window frame中的行上，
而不是整个分区。默认情况下，如果使用<literal>ORDER BY</>，
那么这个frame包含从分区开始到当前行的所有行，以及那些当前行后面的，根据<literal>ORDER BY</>
子句等于当前行的所有行，如果省略<literal>ORDER BY</>，那么，frame默认包含分区中的所有行。
     <footnote>
      <!-- 
  <para>
       There are options to define the window frame in other ways, but
       this tutorial does not cover them.  See
       <xref linkend="syntax-window-functions"> for details.
      </para> 
  -->
<para>  
当然，还有其他定义window frame的方法，但本教程并不包括它们。详情请参阅<xref linkend="syntax-window-functions">。
</para>  
     </footnote>
    <!-- 
Here is an example using <function>sum</>: 
-->
下面是一个使用<function>sum</>的例子：
</para>

<programlisting>
SELECT salary, sum(salary) OVER () FROM empsalary;
</programlisting>

<screen>
 salary |  sum  
--------+-------
   5200 | 47100
   5000 | 47100
   3500 | 47100
   4800 | 47100
   3900 | 47100
   4200 | 47100
   4500 | 47100
   4800 | 47100
   6000 | 47100
   5200 | 47100
(10 rows)
</screen>

   <!-- 
   <para>
    Above, since there is no <literal>ORDER BY</> in the <literal>OVER</>
    clause, the window frame is the same as the partition, which for lack of
    <literal>PARTITION BY</> is the whole table; in other words each sum is
    taken over the whole table and so we get the same result for each output
    row.  But if we add an <literal>ORDER BY</> clause, we get very different
    results:
   </para> 
   -->
<para>
如上，因为在<literal>OVER</>子句中没有使用<literal>ORDER BY</>，因此，
window frame与分区(不使用<literal>PARTITION BY</>时即整个表)相同；换句话说，
每一次sum求和都是使用表中所有的salary，所以我们得到的每个输出行的结果相同。
但是，如果我们添加<literal>ORDER BY</>子句，我们会得到不同的结果：    
</para>   
<programlisting>
SELECT salary, sum(salary) OVER (ORDER BY salary) FROM empsalary;
</programlisting>

<screen>
 salary |  sum  
--------+-------
   3500 |  3500
   3900 |  7400
   4200 | 11600
   4500 | 16100
   4800 | 25700
   4800 | 25700
   5000 | 30700
   5200 | 41100
   5200 | 41100
   6000 | 47100
(10 rows)
</screen>

   <!-- 
   <para>
    Here the sum is taken from the first (lowest) salary up through the
    current one, including any duplicates of the current one (notice the
    results for the duplicated salaries).
   </para> 
   -->
<para> 
这里的总和是从第一个（最低）工资到当前一个，包括任何当前重复的（注意重复薪金的结果）。   
</para> 
   <!-- 
   <para>
    Window functions are permitted only in the <literal>SELECT</literal> list
    and the <literal>ORDER BY</> clause of the query. They are forbidden
    elsewhere, such as in <literal>GROUP BY</>, <literal>HAVING</>
    and <literal>WHERE</literal> clauses.  This is because they logically
    execute after the processing of those clauses.  Also, window functions
    execute after regular aggregate functions.  This means it is valid to
    include an aggregate function call in the arguments of a window function,
    but not vice versa.
   </para> 
   -->
<para>
窗口函数仅允许在查询的<literal>SELECT</literal>列表和<literal>ORDER BY</>子句中使用。
在其他地方禁止使用，比如<literal>GROUP BY</>,<literal>HAVING</>和<literal>WHERE</literal>子句。
这是因为它们逻辑上在处理这些子句之后执行。此外，窗口函数在标准聚合函数之后执行。
这意味在一个窗口函数的参数中包含一个标准聚合函数的调用是有效的，但反过来不行。
</para>
   <para>
    <!-- 
If there is a need to filter or group rows after the window calculations
    are performed, you can use a sub-select.  For example: 
-->
执行窗口计算后，如果有必要对行进行过滤或分组，你可以使用子查询。例如：
<programlisting>
SELECT depname, empno, salary, enroll_date
FROM
  (SELECT depname, empno, salary, enroll_date,
          rank() OVER (PARTITION BY depname ORDER BY salary DESC, empno) AS pos
     FROM empsalary
  ) AS ss
WHERE pos &lt; 3;
</programlisting>

    <!-- 
The above query only shows the rows from the inner query having
    <literal>rank</> less than 3. 
-->
上面的查询只显示内部查询结果中<literal>rank</>小于3的行。 
   </para>

   <para>
    <!-- 
When a query involves multiple window functions, it is possible to write
    out each one with a separate <literal>OVER</> clause, but this is
    duplicative and error-prone if the same windowing behavior is wanted
    for several functions.  Instead, each windowing behavior can be named
    in a <literal>WINDOW</> clause and then referenced in <literal>OVER</>.
    For example: 
-->
当查询涉及多个窗口函数时，可以写成每一个都带有单独的<literal>OVER</>子句，
但是，如果期待为多个窗口函数采用相同的窗口行为，这样做就会产生重复，并且容易出错。
作为代替，每个窗口行为可以在<literal>WINDOW</>子句中进行命名，然后再被<literal>OVER</>引用。
例如： 
<programlisting>
SELECT sum(salary) OVER w, avg(salary) OVER w
  FROM empsalary
  WINDOW w AS (PARTITION BY depname ORDER BY salary DESC);
</programlisting>
   </para>

   <!-- 
   <para>
    More details about window functions can be found in
    <xref linkend="syntax-window-functions">,
    <xref linkend="functions-window">,
    <xref linkend="queries-window">, and the
    <xref linkend="sql-select"> reference page.
   </para> 
   -->
<para>
有关窗口函数的更多详细信息请查阅<xref linkend="syntax-window-functions">,
<xref linkend="functions-window">,<xref linkend="queries-window">,和
<xref linkend="sql-select">的参考页。 
</para> 
   </sect1>


  <sect1 id="tutorial-inheritance">
   <!-- <title>Inheritance</title> -->
<title>继承</title>
   <indexterm zone="tutorial-inheritance">
    <primary>inheritance</primary>
   </indexterm>

   <!-- 
   <para>
    Inheritance is a concept from object-oriented databases.  It opens
    up interesting new possibilities of database design.
   </para> 
   -->
<para>   
继承是面向对象的数据库的概念。它开启了数据库设计的有趣的新的可能性。   
</para>
   <para>
    <!-- 
Let's create two tables:  A table <classname>cities</classname>
    and a table <classname>capitals</classname>.  Naturally, capitals
    are also cities, so you want some way to show the capitals
    implicitly when you list all cities.  If you're really clever you
    might invent some scheme like this: 
-->
让我们创建两个表：一个<classname>cities</classname>表和一个<classname>capitals</classname>表。
自然，首府(capital)也是城市(cities)，因此在列出所有城市时你想要某种方法隐含地显示首府。
如果你已经很高明了，那么你可能会创造类似下面这样的模式：
<programlisting>
CREATE TABLE capitals (
  name       text,
  population real,
  altitude   int,    -- (单位是英尺)
  state      char(2)
);

CREATE TABLE non_capitals (
  name       text,
  population real,
  altitude   int     -- (单位是英尺)
);

CREATE VIEW cities AS
  SELECT name, population, altitude FROM capitals
    UNION
  SELECT name, population, altitude FROM non_capitals;
</programlisting>

    <!-- 
This works OK as far as querying goes, but it gets ugly when you
    need to update several rows, for one thing. 
-->
如果只是查询，那么这个方法运转得很好，但是如果你需要更新某几行，那这个方法就很难看了。
   </para>

   <para>
    <!-- A better solution is this: -->
一种更好的方法是：
<programlisting>
CREATE TABLE cities (
  name       text,
  population real,
  altitude   int     -- (单位是英尺)
);

CREATE TABLE capitals (
  state      char(2)
) INHERITS (cities);
</programlisting>
   </para>

   <!-- 
   <para>
    In this case, a row of <classname>capitals</classname>
    <firstterm>inherits</firstterm> all columns (<structfield>name</>,
    <structfield>population</>, and <structfield>altitude</>) from its
    <firstterm>parent</firstterm>, <classname>cities</classname>.  The
    type of the column <structfield>name</structfield> is
    <type>text</type>, a native <productname>PostgreSQL</productname>
    type for variable length character strings.  State capitals have
    an extra column, <structfield>state</>, that shows their state.  In
    <productname>PostgreSQL</productname>, a table can inherit from
    zero or more other tables.
   </para> 
   -->
<para>
在这个例子里，<classname>capitals</classname><firstterm>继承</firstterm>了其<firstterm>父表</firstterm>
<classname>cities</classname>的所有字段(<structfield>name</>,<structfield>population</>
和<structfield>altitude</>)。字段<structfield>name</structfield>的类型<type>text</type>是
<productname>PostgreSQL</productname>用于变长字符串的固有类型。州首府有一个额外的字段
<structfield>state</>显示其所处的州。在<productname>PostgreSQL</productname>里，
一个表可以从零个或者更多其它表中继承过来。   
</para>    
   <para>
    <!-- 
For example, the  following  query finds the  names  of  all  cities,
    including  state capitals, that are located at an altitude
    over 500 feet: 
-->
比如，下面的查询找出所有海拔超过 500 英尺的城市的名字，包括州首府：
<programlisting>
SELECT name, altitude
  FROM cities
  WHERE altitude &gt; 500;
</programlisting>

    <!-- which returns: -->
它返回：
<screen>
   name    | altitude
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
 Madison   |      845
(3 rows)
</screen>
   </para>

   <para>
    <!-- 
On the other hand, the  following  query  finds
    all  the cities that are not state capitals and
    are situated at an altitude over 500 feet:
-->
另一方面，下面的查询找出所有不是州首府并且位于海拔超过500英尺的城市：
<programlisting>
SELECT name, altitude
    FROM ONLY cities
    WHERE altitude &gt; 500;
</programlisting>

<screen>
   name    | altitude
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
(2 rows)
</screen>
   </para>

   <!-- 
   <para>
    Here the <literal>ONLY</literal> before <literal>cities</literal>
    indicates that the query should be run over only the
    <classname>cities</classname> table, and not tables below
    <classname>cities</classname> in the inheritance hierarchy.  Many
    of the commands that we have already discussed &mdash;
    <command>SELECT</command>, <command>UPDATE</command>, and
    <command>DELETE</command> &mdash; support this <literal>ONLY</literal>
    notation.
   </para> 
   -->
<para>   
<literal>cities</literal>前面的<literal>ONLY</literal>指示系统只对<classname>cities</classname>
表运行查询，而不包括继承级别中低于<classname>cities</classname>的表。
许多我们已经讨论过的命令&mdash;<command>SELECT</command>, <command>UPDATE</command>和
<command>DELETE</command>&mdash;都支持这个<literal>ONLY</literal>表示法。   
</para>
   <note>
    <!-- 
<para>
     Although inheritance is frequently useful, it has not been integrated
     with unique constraints or foreign keys, which limits its usefulness.
     See <xref linkend="ddl-inherit"> for more detail.
    </para> 
-->
<para>
尽管继承经常是有用的，但是它还没有集成唯一约束或者外键，因此制约了其实用性。
参阅<xref linkend="ddl-inherit">以获取更多细节。
</para>
   </note>
  </sect1>


  <sect1 id="tutorial-conclusion">
   <!-- <title>Conclusion</title> -->
<title>结论</title>

   <!-- 
   <para>
    <productname>PostgreSQL</productname> has many features not
    touched upon in this tutorial introduction, which has been
    oriented toward newer users of <acronym>SQL</acronym>.  These
    features are discussed in more detail in the remainder of this
    book.
   </para> 
   -->
 <para> 
<productname>PostgreSQL</productname>有许多这份教程里没有谈到的特性，
因为这份教程主要是面向新<acronym>SQL</acronym>用户的。
这些特性在本书剩余部分将有更详细的介绍。 
</para> 
   <!-- 
   <para>
    If you feel you need more introductory material, please visit the PostgreSQL
    <ulink url="http://www.postgresql.org">web site</ulink>
    for links to more resources.
   </para> 
   -->
<para>   
如果你觉得自己需要更多介绍材料，请访问 PostgreSQL<ulink url="http://www.postgresql.org">网站</ulink>获取更多资源的链接。   
</para>    
  </sect1>
 </chapter>

<!-- doc/src/sgml/xtypes.sgml -->

 <sect1 id="xtypes">
  <!-- <title>User-defined Types</title> -->
<title>用户定义类型</title>
  <indexterm zone="xtypes">
   <primary>data type</primary>
   <secondary>user-defined</secondary>
  </indexterm>

<!-- 
  <para>
   As described in <xref linkend="extend-type-system">,
   <productname>PostgreSQL</productname> can be extended to support new
   data types.  This section describes how to define new base types,
   which are data types defined below the level of the <acronym>SQL</>
   language.  Creating a new base type requires implementing functions
   to operate on the type in a low-level language, usually C.
  </para> 
-->
<para>
正如<xref linkend="extend-type-system">所说，<productname>PostgreSQL</productname>
可以扩展为支持新的数据类型。本节描述如何定义新的基本类型，
这些类型是那些定义在<acronym>SQL</>语言之下的数据类型。
创建一个新的基本类型要求实现函数在低层语言(通常是 C)的类型上操作。
</para>

<!-- 
  <para>
   The examples in this section can be found in
   <filename>complex.sql</filename> and <filename>complex.c</filename>
   in the <filename>src/tutorial</> directory of the source distribution.
   See the <filename>README</> file in that directory for instructions
   about running the examples.
  </para> 
-->
<para>
本节的例子可以在源码发布中<filename>src/tutorial</>目录的<filename>complex.sql</filename>
和<filename>complex.c</filename>里找到。参见同目录下的<filename>README</>
文件获取关于如何运行例子的指示。
</para>
 <para>
  <indexterm>
   <primary>input function</primary>
  </indexterm>
  <indexterm>
   <primary>output function</primary>
  </indexterm>
<!-- 

  A user-defined type must always have input and output functions.
  These functions determine how the type appears in strings (for input
  by the user and output to the user) and how the type is organized in
  memory.  The input function takes a null-terminated character string
  as its argument and returns the internal (in memory) representation
  of the type.  The output function takes the internal representation
  of the type as argument and returns a null-terminated character
  string.  If we want to do anything more with the type than merely
  store it, we must provide additional functions to implement whatever
  operations we'd like to have for the type. 
-->
一个用户定义的类型总是有输入和输出函数。
这些函数决定该类型如何在字符串里出现(让用户输入和输出给用户)以及类型如何在内存里组织。
输入函数以一个以空(null)结尾的字符串为参数并且返回该类型的内部(内存里)的表现形式。
输出类型以该类型的内部表现形式为参数并且返回一个以空(null)结尾的字符串。
如果我们想做任何比简单存储它更多的事情，我们必须提供额外的函数来实现我们想要对这个类型的操作。
 </para>

 <para>
<!-- 
  Suppose we want to define a type <type>complex</> that represents
  complex numbers. A natural way to represent a complex number in
  memory would be the following C structure: 
-->
假设要定义一个<type>complex</>类型来表示复数。通常，
选用下面的 C 结构来在内存里表现复数：
<programlisting>
typedef struct Complex {
    double      x;
    double      y;
} Complex;
</programlisting>

<!-- 
  We will need to make this a pass-by-reference type, since it's too
  large to fit into a single <type>Datum</> value. 
-->
我们需要将它变成引用传递类型，因为它太大，不能放在一个单独的<type>Datum</>值中。
 </para>

<!-- 
 <para>
  As the external string representation of the type, we choose a
  string of the form <literal>(x,y)</literal>.
 </para> 
-->
<para>
对于该类型的外部表现形式，选择形如<literal>(x,y)</literal>的字符串。
</para>
 <para>
<!-- 
  The input and output functions are usually not hard to write,
  especially the output function.  But when defining the external
  string representation of the type, remember that you must eventually
  write a complete and robust parser for that representation as your
  input function.  For instance: 
-->
输入输出函数通常并不难写，尤其是输出函数。但是，在定义你的外部(字符串)表现形式时，
要注意你最后必须为该表现形式写一个完整而且健壮的分析器作为输入函数。比如：
<programlisting><![CDATA[
PG_FUNCTION_INFO_V1(complex_in);

Datum
complex_in(PG_FUNCTION_ARGS)
{
    char       *str = PG_GETARG_CSTRING(0);
    double      x,
                y;
    Complex    *result;

    if (sscanf(str, " ( %lf , %lf )", &x, &y) != 2)
        ereport(ERROR,
                (errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),
                 errmsg("invalid input syntax for complex: \"%s\"",
                        str)));

    result = (Complex *) palloc(sizeof(Complex));
    result->x = x;
    result->y = y;
    PG_RETURN_POINTER(result);
}
]]>
</programlisting>

<!-- 
  The output function can simply be: 
-->
输出函数可以简单的写成：
<programlisting><![CDATA[
PG_FUNCTION_INFO_V1(complex_out);

Datum
complex_out(PG_FUNCTION_ARGS)
{
    Complex    *complex = (Complex *) PG_GETARG_POINTER(0);
    char       *result;

    result = psprintf("(%g,%g)", complex->x, complex->y);
    PG_RETURN_CSTRING(result);
}
]]>
</programlisting>
 </para>

<!-- 
 <para>
  You should be careful to make the input and output functions inverses of
  each other.  If you do not, you will have severe problems when you
  need to dump your data into a file and then read it back in.  This
  is a particularly common problem when floating-point numbers are
  involved.
 </para> 
-->
<para>
你应该把你的输入和输出函数做成互逆函数。
如果不这样做就可能在需要把数据输出来再加载回去时碰到很严重的问题，
当涉及浮点数时，这是非常普遍的问题。
</para>
 <para>
<!-- 
  Optionally, a user-defined type can provide binary input and output
  routines.  Binary I/O is normally faster but less portable than textual
  I/O.  As with textual I/O, it is up to you to define exactly what the
  external binary representation is.  Most of the built-in data types
  try to provide a machine-independent binary representation.  For
  <type>complex</type>, we will piggy-back on the binary I/O converters
  for type <type>float8</>: 
-->
另外，一个用户定义类型可以提供二进制输入和输出过程。二进制 I/O 通常更快，
但是没有文本 I/O 移植性好。因为对于文本 I/O 而言，完全由你来定义外部的二进制形式。
大多数内置的数据类型都尽可能提供一个与机器无关的二进制形式。对于<type>complex</type>，
将把二进制 I/O 建立在<type>float8</>的基础上：
<programlisting><![CDATA[
PG_FUNCTION_INFO_V1(complex_recv);

Datum
complex_recv(PG_FUNCTION_ARGS)
{
    StringInfo  buf = (StringInfo) PG_GETARG_POINTER(0);
    Complex    *result;

    result = (Complex *) palloc(sizeof(Complex));
    result->x = pq_getmsgfloat8(buf);
    result->y = pq_getmsgfloat8(buf);
    PG_RETURN_POINTER(result);
}

PG_FUNCTION_INFO_V1(complex_send);

Datum
complex_send(PG_FUNCTION_ARGS)
{
    Complex    *complex = (Complex *) PG_GETARG_POINTER(0);
    StringInfoData buf;

    pq_begintypsend(&buf);
    pq_sendfloat8(&buf, complex->x);
    pq_sendfloat8(&buf, complex->y);
    PG_RETURN_BYTEA_P(pq_endtypsend(&buf));
}
]]>
</programlisting>
 </para>

 <para>
<!-- 
  Once we have written the I/O functions and compiled them into a shared
  library, we can define the <type>complex</type> type in SQL.
  First we declare it as a shell type: 
-->
一旦我们写好 I/O 函数并将其编译为共享库，就可以定义 SQL 中的<type>complex</type>类型。
我们首先声明其为 shell 类型：
<programlisting>
CREATE TYPE complex;
</programlisting>

<!-- 
  This serves as a placeholder that allows us to reference the type while
  defining its I/O functions.  Now we can define the I/O functions: 
-->
这将作为一个占位符以允许在定义其 I/O 函数时引用该类型。现在我们定义其 I/O 函数：
<programlisting>
CREATE FUNCTION complex_in(cstring)
    RETURNS complex
    AS '<replaceable>filename</replaceable>'
    LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION complex_out(complex)
    RETURNS cstring
    AS '<replaceable>filename</replaceable>'
    LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION complex_recv(internal)
   RETURNS complex
   AS '<replaceable>filename</replaceable>'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION complex_send(complex)
   RETURNS bytea
   AS '<replaceable>filename</replaceable>'
   LANGUAGE C IMMUTABLE STRICT;
</programlisting>
 </para>

 <para>
<!-- 
  Finally, we can provide the full definition of the data type: 
-->
最后，可以完整定义该数据类型：
<programlisting>
CREATE TYPE complex (
   internallength = 16,
   input = complex_in,
   output = complex_out,
   receive = complex_recv,
   send = complex_send,
   alignment = double
);
</programlisting>
 </para>

 <para>
  <indexterm>
    <primary>array</primary>
    <secondary>of user-defined type</secondary>
  </indexterm>
<!-- 
  When you define a new base type,
  <productname>PostgreSQL</productname> automatically provides support
  for arrays of that type.  The array type typically
  has the same name as the base type with the underscore character
  (<literal>_</>) prepended. 
-->
当你定义一种新的基本类型时，<productname>PostgreSQL</productname>
自动提供对该类型的数组支持。因为历史原因，
数组类型的类型名是与该类型同名的字符串前面加个下划线字符(<literal>_</>)。
 </para>

<!-- 
 <para>
  Once the data type exists, we can declare additional functions to
  provide useful operations on the data type.  Operators can then be
  defined atop the functions, and if needed, operator classes can be
  created to support indexing of the data type.  These additional
  layers are discussed in following sections.
 </para> 
-->
<para>
一旦数据类型存在，就可以声明额外的函数以提供在该数据类型上的操作，
然后就可以在这些函数上定义操作符。如果需要，
还可以创建操作符类支持该数据类型的索引。这些将在后面的章节介绍。
</para>
 <para>
   <indexterm>
    <primary>TOAST</primary>
    <secondary>and user-defined types</secondary>
   </indexterm>
<!-- 
  If the values of your data type vary in size (in internal form), you should
  make the data type <acronym>TOAST</>-able (see <xref
  linkend="storage-toast">). You should do this even if the data are always
  too small to be compressed or stored externally, because
  <acronym>TOAST</> can save space on small data too, by reducing header
  overhead. 
-->
如果你的数据类型的大小是变化的(内部形式)，那么你应该把它们标记为可
<acronym>TOAST</>的(参阅<xref linkend="storage-toast">)。
即使数据总是太小以至于被压缩或存储在外部你也应该这样做，因为<acronym>TOAST</>
可以通过减少头开销在小数据上节约空间。
 </para>

<!--
  <para>
  To do this, the internal representation must follow the standard layout for
  variable-length data: the first four bytes must be a <type>char[4]</type>
  field which is never accessed directly (customarily named
  <structfield>vl_len_</>). You
  must use <function>SET_VARSIZE()</function> to store the size of the datum
  in this field and <function>VARSIZE()</function> to retrieve it. The C
  functions operating on the data type must always be careful to unpack any
  toasted values they are handed, by using <function>PG_DETOAST_DATUM</>.
  (This detail is customarily hidden by defining type-specific
  <function>GETARG_DATATYPE_P</function> macros.) Then, when running the
  <command>CREATE TYPE</command> command, specify the internal length as
  <literal>variable</> and select the appropriate storage option.
 </para> 
-->
<para>
要做到这一点，该类型的内部形式必需遵循变长数据内部形式的标准布局：
头四个字节必需是一个从来没有直接访问的 <type>char[4]</type>字段（通常叫
<structfield>vl_len_</>）。你必须使用<function>SET_VARSIZE()</function>
来存储这个字段里的数据的长度，使用<function>VARSIZE()</function>来取回这个长度。
在该类型上操作的 C 函数必须通过使用 <function>PG_DETOAST_DATUM</>
小心地解开它们处理的任何"烘烤"过的数值(这些细节通常都可以通过定义类型相关的
<function>GETARG_DATATYPE_P</function>宏掩盖)。最后，
在使用<command>CREATE TYPE</command>命令的时候，声明内部长度为<literal>variable</>
并且选择恰当的存储选项。
</para>
<!-- 
 <para>
  If the alignment is unimportant (either just for a specific function or
  because the data type specifies byte alignment anyway) then it's possible
  to avoid some of the overhead of <function>PG_DETOAST_DATUM</>. You can use
  <function>PG_DETOAST_DATUM_PACKED</> instead (customarily hidden by
  defining a <function>GETARG_DATATYPE_PP</> macro) and using the macros
  <function>VARSIZE_ANY_EXHDR</> and <function>VARDATA_ANY</> to access
  a potentially-packed datum.
  Again, the data returned by these macros is not aligned even if the data
  type definition specifies an alignment. If the alignment is important you
  must go through the regular <function>PG_DETOAST_DATUM</> interface.
 </para> 
-->
<para>
如果对齐是不重要的（不管是只是对于一个特定的函数还是因为数据类型指定字节对齐）
那么避免<function>PG_DETOAST_DATUM</>的一些开销是可能的。
你可以使用<function>PG_DETOAST_DATUM_PACKED</>代替（通常通过定义一个
<function>GETARG_DATATYPE_PP</>宏指令），并且使用宏指令<function>VARSIZE_ANY_EXHDR</>
和<function>VARDATA_ANY</>来使用一个潜在封装的数据。
另外，由这些宏指令返回的数据是不对齐的，即使数据类型定义声明了一个对齐。
如果对齐是重要的，那么你必须通过正规的<function>PG_DETOAST_DATUM</>接口。
</para>
 <note>
<!-- 
  <para>
   Older code frequently declares <structfield>vl_len_</> as an
   <type>int32</> field instead of <type>char[4]</>.  This is OK as long as
   the struct definition has other fields that have at least <type>int32</>
   alignment.  But it is dangerous to use such a struct definition when
   working with a potentially unaligned datum; the compiler may take it as
   license to assume the datum actually is aligned, leading to core dumps on
   architectures that are strict about alignment.
  </para> 
-->
<para>
旧代码经常声明<structfield>vl_len_</>为一个<type>int32</>字段而不是<type>char[4]</>。
只要结构体的定义中其他字段至少有<type>int32</>个队列的话这么做是可以的。
但是当使用一个潜在的对齐数据时，使用这样一个结构体定义是危险的；
编译器可能把它当做一个许可来假设数据实际上已经对齐，导致在架构上的核心转储严格对齐。
</para>
 </note>

<!-- 
 <para>
  For further details see the description of the
  <xref linkend="sql-createtype"> command.
 </para> 
-->
<para>
更多细节请参阅<xref linkend="sql-createtype">命令。
</para>
</sect1>

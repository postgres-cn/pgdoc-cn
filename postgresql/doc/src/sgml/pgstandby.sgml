<!-- doc/src/sgml/pgstandby.sgml -->

<refentry id="pgstandby">
 <indexterm zone="pgstandby">
  <primary>pg_standby</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle><application>pg_standby</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_standby</refname>
  <refpurpose>对创建一个<productname>PostgreSQL</productname>温备服务器提供支持</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_standby</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="plain"><replaceable>archivelocation</replaceable></arg>
   <arg choice="plain"><replaceable>nextwalfile</replaceable></arg>
   <arg choice="plain"><replaceable>xlogfilepath</replaceable></arg>
   <arg choice="opt"><replaceable>restartwalfile</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>描述</title>

 <para>
  <application>pg_standby</>用于支持创建一个<quote>温备</>数据库服务器。它被设计为一个可以随时投入生产的程序，以及一个可定制的模板供你进行特定的修改。
 </para>

 <para>
  <application>pg_standby</>被设计成一个等待着的<varname>restore_command</>，它被用来把一次标准的归档恢复变成一次温备操作。还需要一些其他的配置，所有这些配置都在主服务器手册中有相应的描述（见<xref linkend="warm-standby">）。
 </para>

  <para>
   要配置一台后备服务器去使用<application>pg_standby</>，可以把下面的内容放在<filename>recovery.conf</filename>配置文件中：
<programlisting>
restore_command = 'pg_standby <replaceable>archiveDir</> %f %p %r'
</programlisting>
   其中<replaceable>archiveDir</>是 WAL 段文件应该被存储的目录。
  </para>
  <para>
   如果指定了<replaceable>restartwalfile</>（通常用<literal>%r</literal>宏指定），那么所有在逻辑上位于这个文件之前的 WAL 文件都将被从<replaceable>archivelocation</>中移除。这使需要被保留的文件数最小化，与此同时能够保持崩溃重启的能力。如果<replaceable>archivelocation</>对于这个特定后备服务器是一个瞬态区域，使用这个参数是合适的，但当<replaceable>archivelocation</>是一个长期 WAL 归档区域时则<emphasis>不是</>合适的。
  </para>
  <para>
   <application>pg_standby</application>假定<replaceable>archivelocation</>是一个拥有服务器的用户可读的目录。如果指定了<replaceable>restartwalfile</>（或者<literal>-k</>），<replaceable>archivelocation</>目录必须也是可写的。
  </para>
  <para>
   当主服务器失效时，有两种方式转移到一个<quote>温备</>数据库服务器：

   <variablelist>
    <varlistentry>
     <term>智能失效备援</term>
     <listitem>
      <para>
       在智能失效备援中，服务器在应用归档中可用的所有 WAL 文件之后被提升。即便后备服务器落后于主服务器，这也会导致零数据丢失，但是如果有很多未应用的 WAL，在后备服务器准备好之前就需要比较长的时间。要触发一次智能失效备援，创建一个包含单词<literal>smart</>的触发文件，或者只创建一个空文件。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>快速失效备援</term>
     <listitem>
      <para>
       在快速失效备援中，服务器被立即提升。归档中任何还未被应用的 WAL 文件将被忽略，并且这些文件中的所有事务都会丢失。要触发一次快速失效备援，创建一个触发文件并且把单词<literal>fast</>写在其中。<application>pg_standby</>也能被配置为在一段定义好的区间内没有新 WAL 文件出现时自动执行一次快速失效备援。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1>
  <title>选项</title>

   <para>
    <application>pg_standby</application>接受下列命令行参数：

    <variablelist>

     <varlistentry>
      <term><option>-c</option></term>
      <listitem>
       <para>
        使用<literal>cp</>或者<literal>copy</>命令来存储来自归档的 WAL 文件。这是唯一支持的行为，因此这个选项是无用的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option></term>
      <listitem>
       <para>
        在<filename>stderr</>上打印大量调试日志输出。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-k</option></term>
      <listitem>
       <para>
        从<replaceable>archivelocation</replaceable>移除文件，这样当前 WAL 文件之前不超过这么多个 WAL 文件会被保留在归档中。零（默认值）意味着不从<replaceable>archivelocation</replaceable>移除任何文件。如果指定了<replaceable>restartwalfile</replaceable>，这个参数将被安静地忽略，因为那种说明方法对于决定正确的归档切断点更为精确。从<productname>PostgreSQL</> 8.3 开始，这个参数的使用已经被<emphasis>废弃</>，指定一个<replaceable>restartwalfile</replaceable>参数更加安全和有效。一个太小的值可能导致后备服务器的重启仍需要已经被移除的文件，而一个太大的值则浪费归档空间。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option> <replaceable>maxretries</></term>
      <listitem>
       <para>
        设定拷贝命令失败时重试的最大次数（默认为 3）。在每一次失败后，我们等待<replaceable>sleeptime</> * <replaceable>num_retries</>，这样等待时间会逐步增加。因此默认情况下，我们将等待 5 秒、10 秒、15秒，然后向后备服务器报告失败。这将被解释为恢复的终点并且该后备服务器将会完全被提升。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>sleeptime</></term>
      <listitem>
       <para>
        设置在检查要被恢复的 WAL 文件在归档中是否可用的测试之间休眠的秒数（最高 60，默认为 5）。默认设置并不一定值得推荐，相关的讨论可参考<xref linkend="warm-standby">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t</option> <replaceable>triggerfile</></term>
      <listitem>
       <para>
        指定一个触发文件，它的出现将会导致失效备援。我们推荐使用一个有结构的文件名，这样可以避免在同一个系统上有多个服务器存在时无法确定是要触发哪个服务器。例如可以用<filename>/tmp/pgsql.trigger.5432</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</></term>
      <term><option>--version</></term>
      <listitem>
       <para>
        打印<application>pg_standby</application>版本并退出。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</option> <replaceable>maxwaittime</></term>
      <listitem>
       <para>
        设置等待下一个 WAL 文件的最大秒数，之后将会执行一次快速失效备援。设置为 0 （默认值）表示永远等待。默认设置并不一定值得推荐，相关讨论可以参考<xref linkend="warm-standby">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</></term>
      <term><option>--help</></term>
      <listitem>
       <para>
        显示有关<application>pg_standby</application>的命令行参数，然后退出。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

 </refsect1>

 <refsect1>
  <title>注解</title>

  <para>
   <application>pg_standby</application>被设计为配合<productname>PostgreSQL</> 8.2 及后续版本工作。
  </para>
  <para>
   <productname>PostgreSQL</> 8.3 提供<literal>%r</literal>宏，它被设计用来让<application>pg_standby</application>知道它需要保留的最后一个文件。在<productname>PostgreSQL</> 8.2 中，如果要求归档清理则必须使用<literal>-k</literal>选项。在 8.3 中该选项仍然存在，但是其使用已被废弃。
  </para>
  <para>
   <productname>PostgreSQL</> 8.4 提供<varname>recovery_end_command</>选项。没有这个选项一个残留的触发文件能够导致灾难。
  </para>

  <para>
   <application>pg_standby</application>由 C 写成并且其代码易于修改，其中的小节经过特别设计以便按你的需要修改。
  </para>
 </refsect1>

 <refsect1>
  <title>例子</title>

  <para>在 Linux 或 Unix 系统上，你可能会使用：

<programlisting>
archive_command = 'cp %p .../archive/%f'

restore_command = 'pg_standby -d -s 2 -t /tmp/pgsql.trigger.5442 .../archive %f %p %r 2>>standby.log'

recovery_end_command = 'rm -f /tmp/pgsql.trigger.5442'
</programlisting>
   其中归档目录被物理防止在后备服务器上，因此<varname>archive_command</>通过 NFS 访问它，但是那些文件对于后备服务器是本地的（启用<literal>ln</>）。这将：
  <itemizedlist>
   <listitem>
    <para>
     在<filename>standby.log</>中产生调试输出
    </para>
   </listitem>
   <listitem>
    <para>
     在检查下一个 WAL 文件的可用性之间睡眠 2 秒
    </para>
   </listitem>
   <listitem>
    <para>
     只有当一个名为<filename>/tmp/pgsql.trigger.5442</>的触发文件出现时停止等待并且根据其内容执行失效备援
    </para>
   </listitem>
   <listitem>
    <para>
     在恢复结束时移除触发文件
    </para>
   </listitem>
   <listitem>
    <para>
     从归档目录中移除不再需要的文件
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <para>在 Windows 上，你可能会用：

<programlisting>
archive_command = 'copy %p ...\\archive\\%f'

restore_command = 'pg_standby -d -s 5 -t C:\pgsql.trigger.5442 ...\archive %f %p %r 2>>standby.log'

recovery_end_command = 'del C:\pgsql.trigger.5442'
</programlisting>
   注意<varname>archive_command</>中的反斜线需要被双写，但是在<varname>restore_command</>或者<varname>recovery_end_command</>中<emphasis>不</emphasis>需要。这将：
  <itemizedlist>
   <listitem>
    <para>
     使用<literal>copy</>命令恢复来自归档的 WAL 文件
    </para>
   </listitem>
   <listitem>
    <para>
     在<filename>standby.log</>中产生调试输出
    </para>
   </listitem>
   <listitem>
    <para>
     在检查下一个 WAL 文件的可用性之间睡眠 5 秒
    </para>
   </listitem>
   <listitem>
    <para>
     只有当一个名为<filename>C:\pgsql.trigger.5442</>的触发文件出现时停止等待并且根据其内容执行失效备援
    </para>
   </listitem>
   <listitem>
    <para>
     在恢复结束时移除触发文件
    </para>
   </listitem>
   <listitem>
    <para>
     从归档目录中移除不再需要的文件
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <para>
   Windows 上的<literal>copy</>命令在文件被完全拷贝之前就会设置最终的文件尺寸，这通常会迷惑<application>pg_standby</application>。因此一旦看到正确的文件尺寸，<application>pg_standby</application>会等待<literal>sleeptime</>秒。GNUWin32 的<literal>cp</>只会在文件拷贝完成后设置文件尺寸。
  </para>

  <para>
   由于 Windows 的例子在两端都使用<literal>copy</>，一个或者两个服务器可能通过网络访问归档目录。
  </para>

 </refsect1>

 <refsect1>
  <title>作者</title>

  <para>
   Simon Riggs <email>simon@2ndquadrant.com</email>
  </para>
 </refsect1>

 <refsect1>
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="pgarchivecleanup"></member>
  </simplelist>
 </refsect1>
</refentry>

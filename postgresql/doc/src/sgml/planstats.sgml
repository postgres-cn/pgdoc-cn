<!-- doc/src/sgml/planstats.sgml -->

<chapter id="planner-stats-details">
 <title>规划器如何使用统计信息</title>

  <para>
   本章建立在<xref linkend="using-explain">和<xref linkend="planner-stats">中讨论的材料之上，展示了关于规划器如何使用系统统计信息来估计一个查询的各个部分可能返回的行数。这是规划处理中的一个重要的部分，它提供了代价计算中的很多原始材料。
  </para>

  <para>
   本章的目的不是详细地解释代码，而是给出一个规划器如何使用统计信息的概述。这样可能可以降低那些想以后阅读这部份代码的人的学习曲线。
  </para>

 <sect1 id="row-estimation-examples">
  <title>行估计例子</title>

  <indexterm zone="row-estimation-examples">
   <primary>行估计</primary>
   <secondary>规划器</secondary>
  </indexterm>

  <para>
   下面展示的例子使用<productname>PostgreSQL</>回归测试数据库中的表。输出结果是从版本 8.3 获得。之前（或之后）版本的动作可能会有所变化。同时还要注意的是，由于<command>ANALYZE</>使用随机采样来产生统计信息，在任何新的<command>ANALYZE</>之后结果将有轻微改变。
  </para>

  <para>
   让我们从一个很简单的查询开始：

<programlisting>
EXPLAIN SELECT * FROM tenk1;

                         QUERY PLAN
-------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..458.00 rows=10000 width=244)
</programlisting>

   规划器如何判断<structname>tenk1</structname>的势在<xref linkend="planner-stats">中介绍，但为了完整还会在这里重复介绍。行数或页数是从<structname>pg_class</structname>中查出来的：

<programlisting>
SELECT relpages, reltuples FROM pg_class WHERE relname = 'tenk1';

 relpages | reltuples
----------+-----------
      358 |     10000
</programlisting>

    这些数字是在表上的最后一次<command>VACUUM</>或<command>ANALYZE</>以来的当前值。之后，规划器取出该表中实际的当前页数（这个操作的开销很小，不需要扫描全表）。如果与<structfield>relpages</structfield>不同，则对<structfield>reltuples</structfield>进行相应的缩放以得到一个当前的行数估计。在这种情况下，<structfield>relpages</structfield>的值是最新的，因此行估计与<structfield>reltuples</structfield>相同。
  </para>

  <para>
   换一个在<literal>WHERE</literal>子句中带有范围条件的例子：

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 1000;

                                   QUERY PLAN
--------------------------------------------------------------------------------
 Bitmap Heap Scan on tenk1  (cost=24.06..394.64 rows=1007 width=244)
   Recheck Cond: (unique1 &lt; 1000)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)
         Index Cond: (unique1 &lt; 1000)
</programlisting>

   规划器检查<literal>WHERE</literal>子句条件，并在<structname>pg_operator</structname>中查找<literal>&lt;</literal>操作符的选择度函数。这被保持在<structfield>oprrest</structfield>列中， 并且在这个例子中的项是<function>scalarltsel</function>。 <function>scalarltsel</function>函数从<structname>pg_statistics</structname>为<structfield>unique1</structfield>检索直方图。 对于手工查询来说，查看更简单的<structname>pg_stats</structname>视图会更方便：

<programlisting>
SELECT histogram_bounds FROM pg_stats
WHERE tablename='tenk1' AND attname='unique1';

                   histogram_bounds
------------------------------------------------------
 {0,993,1997,3050,4040,5036,5957,7057,8029,9016,9995}
</programlisting>

   然后，把直方图里面被<quote>&lt; 1000</quote>占据的部分找出来。这就是选择度。直方图把范围分隔成等频的桶， 所以我们要做的只是把我们的值所在的桶找出来，然后计数其中的<emphasis>部分</emphasis>以及<emphasis>所有</emphasis>该值之前的部分。值 1000 很明显在第二个桶（970-1943）中。假设每个桶中的值是线性分布，那么就可以计算出选择度：

<programlisting>
selectivity = (1 + (1000 - bucket[2].min)/(bucket[2].max - bucket[2].min))/num_buckets
            = (1 + (1000 - 993)/(1997 - 993))/10
            = 0.100697
</programlisting>

   也就是一整个桶加上第二个桶的线性部分，除以桶数。那么估计的行数现在可以用选择度乘以<structname>tenk1</structname>的势来计算：

<programlisting>
rows = rel_cardinality * selectivity
     = 10000 * 0.100697
     = 1007  (rounding off)
</programlisting>
  </para>

  <para>
   然后让我们考虑一个在<literal>WHERE</literal>子句有等于条件的例子：

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'CRAAAA';

                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=30 width=244)
   Filter: (stringu1 = 'CRAAAA'::name)
</programlisting>

   规划器还是检查<literal>WHERE</literal>子句条件，并为<literal>=</literal>查找选择度函数（这次是<function>eqsel</function>）。对于等值估计而言，直方图是没用的；相反，<firstterm>最常见值</>（<acronym>MCV</acronym>）列表可以用来决定选择度。让我们来看一下 MCV，以及一些额外的后面用得上的列：

<programlisting>
SELECT null_frac, n_distinct, most_common_vals, most_common_freqs FROM pg_stats
WHERE tablename='tenk1' AND attname='stringu1';

null_frac         | 0
n_distinct        | 676
most_common_vals  | {EJAAAA,BBAAAA,CRAAAA,FCAAAA,FEAAAA,GSAAAA,JOAAAA,MCAAAA,NAAAAA,WGAAAA}
most_common_freqs | {0.00333333,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003}

</programlisting>

   因为<literal>CRAAAA</>出现在 MCV 列表中，那么选择度只是最常见频度（<acronym>MCF</acronym>）列表中的一个对应项：

<programlisting>
selectivity = mcf[3]
            = 0.003
</programlisting>

   像之前一样，行数的估计只是和前面一样用<structname>tenk1</structname>的势乘以选择度：

<programlisting>
rows = 10000 * 0.003
     = 30
</programlisting>
  </para>

  <para>
   现在看看同样的查询，但是常量不在<acronym>MCV</acronym>列表中：

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'xxx';

                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=15 width=244)
   Filter: (stringu1 = 'xxx'::name)
</programlisting>

   这是完全不同的一个问题：当值<emphasis>不</emphasis>在<acronym>MCV</acronym>列表中时， 如何估计选择度。解决方法是利用该值不在列表中的事实，结合所有<acronym>MCV</acronym>出现的频率的知识：

<programlisting>
selectivity = (1 - sum(mvf))/(num_distinct - num_mcv)
            = (1 - (0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003 +
                    0.003 + 0.003 + 0.003 + 0.003))/(676 - 10)
            = 0.0014559
</programlisting>

   也就是，把所有<acronym>MCV</acronym>的频度加起来并从 1 减去，然后除以<emphasis>其他</emphasis>可区分值的个数。这相当于假设不是 MCV 中的列的部分均匀分布在所有其他可区分值上。 需要注意的是，这里没有空值，因此我们不需要担心这些（否则需要从分子中减去空值的部分）。估计的行数然后按照常规计算：

<programlisting>
rows = 10000 * 0.0014559
     = 15  (rounding off)
</programlisting>
  </para>

  <para>
   之前带有<literal>unique1 &lt; 1000</>的例子是<function>scalarltsel</function>实际工作的过度简化。 现在我们已经看过了使用 MCV 的例子，可以增加一些具体细节了。 这个例子到目前为止是正确的，因为<structfield>unique1</>是一个唯一列，它没有 MCV（显然， 没有一个值能比其他值更通用）。对一个非唯一列而言，通常会有直方图和 MCV 列表， 并且<emphasis>直方图不包括由 MCV 表示的那部分列</>。之所以这样做是因为可以得到更精确的估计。在这种情况下，<function>scalarltsel</function>直接应用条件（如<quote>&lt; 1000</>）到 MCV 列表中的每个值，并且把那些条件判断为真的 MCV 的频度加起来。这对表中是 MCV 的那一部分给出了准确的选择度估计。然后以上述同样的方式使用直方图估计表中不是 MCV 的那部分的选择度，并且组合这两个数字来估计总的选择读。例如，考虑：

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 &lt; 'IAAAAA';

                         QUERY PLAN
------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=3077 width=244)
   Filter: (stringu1 &lt; 'IAAAAA'::name)
</programlisting>

   我们已看到<structfield>stringu1</>的 MCV 信息，这里是它的直方图：

<programlisting>
SELECT histogram_bounds FROM pg_stats
WHERE tablename='tenk1' AND attname='stringu1';

                                histogram_bounds
--------------------------------------------------------------------------------
 {AAAAAA,CQAAAA,FRAAAA,IBAAAA,KRAAAA,NFAAAA,PSAAAA,SGAAAA,VAAAAA,XLAAAA,ZZAAAA}
</programlisting>

   检查 MCV 列表，我们发现前 6 项满足条件<literal>stringu1 &lt; 'IAAAAA'</>，而最后 4 项不满足， 所以 MCV 部分的选择度是：

<programlisting>
selectivity = sum(relevant mvfs)
            = 0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003
            = 0.01833333
</programlisting>

   累加所有的 MCF 也告诉我们由 MCV 表示的群体中的比例是 0.03033333，并且因此由直方图表示的 比例是 0.96966667（同样，没有空值，否则我们在这里必须排除它们）。我们可以看到值<literal>IAAAAA</>差不多落在第三个直方图桶的结尾。通过使用一些关于不同字符频率的相当漂亮的假设，规划器对小于<literal>IAAAAA</>的直方图群体部分得到估计值 0.298387。我们然后组合 MCV 和非 MCV 群体的估计：

<programlisting>
selectivity = mcv_selectivity + histogram_selectivity * histogram_fraction
            = 0.01833333 + 0.298387 * 0.96966667
            = 0.307669

rows        = 10000 * 0.307669
            = 3077  (rounding off)
</programlisting>

   在这个特别的例子中，来自 MCV 列表的纠正相当小，因为列分布实际上很平坦（统计显示这些特殊值比其它值更常见的原因大部分是由于抽样误差）。 在更典型的情况下某些值显著地比其它的更常见，这种复杂的处理过程有助于提高准确度，因为那些最常见值的选择度可以被准确地找到。
  </para>

  <para>
   现在考虑一个<literal>WHERE</literal>子句中带有多个条件的情况：

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 1000 AND stringu1 = 'xxx';

                                   QUERY PLAN
--------------------------------------------------------------------------------
 Bitmap Heap Scan on tenk1  (cost=23.80..396.91 rows=1 width=244)
   Recheck Cond: (unique1 &lt; 1000)
   Filter: (stringu1 = 'xxx'::name)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)
         Index Cond: (unique1 &lt; 1000)
</programlisting>

   规划器假定这两个条件是独立的，因此子句各自的选择度可以被乘在一起：

<programlisting>
selectivity = selectivity(unique1 &lt; 1000) * selectivity(stringu1 = 'xxx')
            = 0.100697 * 0.0014559
            = 0.0001466

rows        = 10000 * 0.0001466
            = 1  (rounding off)
</programlisting>

   需要注意的是，从位图索引扫描中返回的估计行数只反映和索引一起使用的条件； 这一点很重要，因为它会影响后续取堆元组的代价估计。
  </para>

  <para>
   最后我们将检查一个涉及连接的查询：

<programlisting>
EXPLAIN SELECT * FROM tenk1 t1, tenk2 t2
WHERE t1.unique1 &lt; 50 AND t1.unique2 = t2.unique2;

                                      QUERY PLAN
--------------------------------------------------------------------------------------
 Nested Loop  (cost=4.64..456.23 rows=50 width=488)
   -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=4.64..142.17 rows=50 width=244)
         Recheck Cond: (unique1 &lt; 50)
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..4.63 rows=50 width=0)
               Index Cond: (unique1 &lt; 50)
   -&gt;  Index Scan using tenk2_unique2 on tenk2 t2  (cost=0.00..6.27 rows=1 width=244)
         Index Cond: (unique2 = t1.unique2)
</programlisting>

   在<structname>tenk1</structname>上的限制<literal>unique1 &lt; 50</literal>在嵌套循环连接之前被计算。它的处理类似之前的那个范围查询例子。但是这次值 50 落在<structfield>unique1</structfield>直方图的第一个桶内：

<programlisting>
selectivity = (0 + (50 - bucket[1].min)/(bucket[1].max - bucket[1].min))/num_buckets
            = (0 + (50 - 0)/(993 - 0))/10
            = 0.005035

rows        = 10000 * 0.005035
            = 50  (rounding off)
</programlisting>

   连接的限制是<literal>t2.unique2 = t1.unique2</>。操作符是我们熟悉的<literal>=</literal>，然而选择度函数是从<structname>pg_operator</structname>的<structfield>oprjoin</structfield>列获得的，并且是<function>eqjoinsel</function>。<function>eqjoinsel</function>为<structname>tenk2</structname>和<structname>tenk1</structname>查找统计信息：

<programlisting>
SELECT tablename, null_frac,n_distinct, most_common_vals FROM pg_stats
WHERE tablename IN ('tenk1', 'tenk2') AND attname='unique2';

tablename  | null_frac | n_distinct | most_common_vals
-----------+-----------+------------+------------------
 tenk1     |         0 |         -1 |
 tenk2     |         0 |         -1 |
</programlisting>

   在这种情况中，没有<structfield>unique2</structfield>的<acronym>MCV</acronym>信息，因为所有值看上去都是唯一的，因此我们可以为关系和它们的空值部分使用一个只依赖可区分值数目的算法：

<programlisting>
selectivity = (1 - null_frac1) * (1 - null_frac2) * min(1/num_distinct1, 1/num_distinct2)
            = (1 - 0) * (1 - 0) / max(10000, 10000)
            = 0.0001
</programlisting>

   也就是说，从 1 中减去每个表的空值部分，并且除以可区分值的最大数目。连接可能发出的行数的计算是：嵌套循环里的两个输入值的笛卡尔积的势乘以选择度：

<programlisting>
rows = (outer_cardinality * inner_cardinality) * selectivity
     = (50 * 10000) * 0.0001
     = 50
</programlisting>
  </para>

  <para>
   这里有两列的 MCV 列表，<function>eqjoinsel</function>将使用 MCV 列表的直接比较来决定在由 MCV 表示的列群体部分中的连接选择度。群体剩下部分的估计遵循这里展示的相同方法。
  </para>

  <para>
   需要注意的是，我们把<literal>inner_cardinality</>显示为 10000，也就是未修改的<structname>tenk2</>尺寸。它可能出现于EXPLAIN输出检查，连接行的估计来自 50 * 1，即由 outer 行数乘以由<structname>tenk2</>上每个 inner 索引扫描的估计行数。但是这不是那种情况： 连接关系尺寸的估计在任何特定的连接计划被考虑之前进行。如果一切顺利，那么两种方式估计的连接尺寸将产生 大概同样的答案，但是由于舍入误差和其它因素它们有时差别显著。
  </para>

  <para>
   如果对更进一步的细节感兴趣，一个表的尺寸（在任何<literal>WHERE</>子句之前）的估计在<filename>src/backend/optimizer/util/plancat.c</filename>中完成。子句选择度的一般逻辑在<filename>src/backend/optimizer/path/clausesel.c</filename>中。操作符相关的选择度函数大部分可以在<filename>src/backend/utils/adt/selfuncs.c</filename>中找到。
  </para>

 </sect1>

</chapter>

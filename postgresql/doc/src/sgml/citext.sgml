<!-- doc/src/sgml/citext.sgml -->

<sect1 id="citext" xreflabel="citext">
 <title>citext</title>

 <indexterm zone="citext">
  <primary>citext</primary>
 </indexterm>

 <para>
  <filename>citext</>模块提供了一种大小写不敏感的字符串类型：<type>citext</>。特别地，它在比较值时内部调用的是<function>lower</>。除此之外，它的行为几乎与<type>text</>完全相同。
 </para>

 <sect2>
  <title>基本原理</title>

  <para>
   在<productname>PostgreSQL</>中做大小写不敏感匹配的标准方法曾经是在比较值时使用<function>lower</>函数，例如：

<programlisting>
SELECT * FROM tab WHERE lower(col) = LOWER(?);
</programlisting>
  </para>

  <para>
   这工作得比较好，但是有一些缺点：
  </para>

   <itemizedlist>
    <listitem>
     <para>
      它让你的 SQL 语句冗长，并且你必须总是要记住在列和查询值上使用<function>lower</>。
     </para>
    </listitem>
    <listitem>
     <para>
      它不会使用一个索引，除非你使用<function>lower</>创建一个函数索引。
     </para>
    </listitem>
    <listitem>
     <para>
      如果你声明一个列为<literal>UNIQUE</>或<literal>PRIMARY KEY</>，隐式生成的索引是大小写敏感的。因此，它对于大小写不敏感的搜索是没有用处的，并且它不会强制大小写不敏感的唯一性。
     </para>
    </listitem>
   </itemizedlist>

   <para>
    <type>citext</>数据类型允许你在 SQL 查询中消除对<function>lower</>的调用，并且允许一个主键是大小写无关的。就和<type>text</>一样，<type>citext</>是区域相关的，这意味着大写和小写字符的匹配依赖于数据库<literal>LC_CTYPE</>设置的规则。此外，这种行为和在查询中使用<function>lower</>是一样的。但是因为它是由数据类型以透明的方式完成的，你不需要记住在你的查询中做任何特殊的事情。
   </para>

 </sect2>

 <sect2>
  <title>如何使用它</title>

  <para>
   这里是一个简单的用法示例：

<programlisting>
CREATE TABLE users (
    nick CITEXT PRIMARY KEY,
    pass TEXT   NOT NULL
);

INSERT INTO users VALUES ( 'larry',  md5(random()::text) );
INSERT INTO users VALUES ( 'Tom',    md5(random()::text) );
INSERT INTO users VALUES ( 'Damian', md5(random()::text) );
INSERT INTO users VALUES ( 'NEAL',   md5(random()::text) );
INSERT INTO users VALUES ( 'Bj&oslash;rn',  md5(random()::text) );

SELECT * FROM users WHERE nick = 'Larry';
</programlisting>

   即使<structfield>nick</>列被设置为<literal>larry</>而查询是<literal>Larry</>，<command>SELECT</>语句也将只返回一个元组。
  </para>
 </sect2>

 <sect2>
  <title>串比较行为</title>

  <para>
   <type>citext</>执行比较时先将每一个串转换成小写形式（调用<function>lower</>）然后正常地比较结果。因此，如果两个串通过<function>lower</>产生相同的结果，它们就被认为是相等。
  </para>

  <para>
   为了尽可能接近地模拟一种大小写不敏感的排序规则，一些串处理操作符和函数有<type>citext</>相关的版本。例如，当应用到<type>citext</>时，正则表达式操作符<literal>~</>和<literal>~*</>会展现出相同的行为：它们都以大小写不敏感的方式匹配。<literal>!~</>和<literal>!~*</>也是一样，以及<literal>LIKE</>操作符<literal>~~</>和<literal>~~*</>，以及<literal>!~~</>和<literal>!~~*</>。如果你想以大小写敏感的方式匹配，你可以把该操作符的参数造型成<type>text</>。
  </para>

  <para>
   相似地，如果下列函数的参数是<type>citext</>，它们会以大小写不敏感的方式执行匹配：
  </para>

  <itemizedlist>
   <listitem>
    <para>
      <function>regexp_matches()</>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>regexp_replace()</>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>regexp_split_to_array()</>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>regexp_split_to_table()</>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>replace()</>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>split_part()</>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>strpos()</>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>translate()</>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   对于 regexp 函数，如果你想要以大小写敏感的方式匹配，你可以指定<quote>c</>标志来强制大小写敏感的匹配。否则，如果你想要大小写敏感的行为，你必须在使用这些函数之一之前造型到<type>text</>。
  </para>

 </sect2>

 <sect2>
  <title>限制</title>

   <itemizedlist>
    <listitem>
     <para>
      <type>citext</>的大小写折叠行为取决于你的数据库的<literal>LC_CTYPE</>设置。因此它如何比较值是在数据库被创建时决定的。在 Unicode 标准定义的术语中没有真正的大小写不敏感。实际上，它的含义是，只要你对你的排序规则满意，你就应该对<type>citext</>的比较满意。但是如果在你的数据库中存储有不同语言的数据，当排序规则是用于一种语言时，另一种语言的用户可能会发现他们的查询结果并不是所期待的。
     </para>
    </listitem>

    <listitem>
     <para>
      自<productname>PostgreSQL</> 9.1 其，你可以为<type>citext</>列或数据值附加一个<literal>COLLATE</>说明。当前，在比较大小写折叠过的字符串时，<type>citext</>操作符将尊重一种非默认的<literal>COLLATE</>说明，但是最初到小写形式的折叠是根据数据库的 <literal>LC_CTYPE</>设置完成的（就是说，尽管给出了<literal>COLLATE "default"</>）。这可能在未来的发行中被改变，这样两步都能遵循输入的<literal>COLLATE</>说明。
     </para>
    </listitem>

    <listitem>
     <para>
       <type>citext</>的效率不如<type>text</>，因为操作符函数和 B 树比较函数必须创建数据的拷贝并且将它转换为小写形式来进行比较。不过，它比使用<function>lower</>进行大小写不敏感的匹配的效率要略高。
     </para>
    </listitem>

    <listitem>
     <para>
      如果你在某些环境下需要以大小写敏感的方式比较数据并且在另一些环境下需要以大小写不敏感的方式比较数据，<type>citext</>就帮不上什么忙。标准的答案是使用<type>text</>类型并且在你需要以大小写不敏感的方式比较时手工使用<function>lower</>函数。如果大小写不敏感的比较需求不频繁，这会工作得不错。如果你大部分时间需要大小写不敏感的行为，考虑将数据存储为<type>citext</>并且在进行大小写敏感比较时显式地将列造型为<type>text</>。不管在那种情况下，你都需要两个索引来让两种类型的搜索更快。
    </para>
    </listitem>

    <listitem>
     <para>
      包含<type>citext</>操作符的模式必须在当前的<varname>search_path</>（通常是<literal>public</>）中。如果它不在搜索路径中，普通的大小写敏感的<type>text</>操作符将会取而代之。
    </para>
    </listitem>
   </itemizedlist>
 </sect2>

 <sect2>
  <title>作者</title>

  <para>
   David E. Wheeler <email>david@kineticode.com</email>
  </para>

  <para>
    受 Donald Fraser 的<type>citext</>模块启发。
  </para>

 </sect2>

</sect1>

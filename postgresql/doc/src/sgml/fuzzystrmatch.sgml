<!-- doc/src/sgml/fuzzystrmatch.sgml -->

<sect1 id="fuzzystrmatch" xreflabel="fuzzystrmatch">
 <title>fuzzystrmatch</title>

 <indexterm zone="fuzzystrmatch">
  <primary>fuzzystrmatch</primary>
 </indexterm>

 <para>
  <filename>fuzzystrmatch</>模块提供多个函数来判断字符串之间的相似性和距离。
 </para>

 <caution>
  <para>
   当前，<function>soundex</>、<function>metaphone</>、<function>dmetaphone</>和<function>dmetaphone_alt</>函数使用多字节编码（例如 UTF-8）下工作得不好。
  </para>
 </caution>

 <sect2>
  <title>Soundex</title>

  <para>
   语音表示法系统是一种将相似发音的名字转换成相同的代码来匹配它们的方法。这最初由美国国家统计局在 1880 年、1900 年和 1910 年使用。注意语音表示法对于非英语名称不是很有用。
  </para>

  <para>
   <filename>fuzzystrmatch</>模块提供了两个函数用于语音表示法代码：
  </para>

  <indexterm>
   <primary>soundex</primary>
  </indexterm>

  <indexterm>
   <primary>difference</primary>
  </indexterm>

<synopsis>
soundex(text) 返回 text
difference(text, text) 返回 int
</synopsis>

  <para>
   <function>soundex</>函数将一个字符串转换成它的语音表示法代码。<function>difference</>函数将两个字符串转换成它们的语音表示法代码并且接着报告能匹配代码位置的数量。由于语音表示法代码具有四个字符，结果可以从零到四，零表示没有匹配而四表示完全匹配（因此这个函数的命名并不适当 &mdash; <function>similarity</>才是更合适的名称）。
  </para>

  <para>
   这里有一些例子：
  </para>

<programlisting>
SELECT soundex('hello world!');

SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');
SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');
SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');

CREATE TABLE s (nm text);

INSERT INTO s VALUES ('john');
INSERT INTO s VALUES ('joan');
INSERT INTO s VALUES ('wobbly');
INSERT INTO s VALUES ('jack');

SELECT * FROM s WHERE soundex(nm) = soundex('john');

SELECT * FROM s WHERE difference(s.nm, 'john') &gt; 2;
</programlisting>
 </sect2>

 <sect2>
  <title>Levenshtein</title>

  <para>
   这个函数计算两个字符串之间的编辑距离。
  </para>

  <indexterm>
   <primary>levenshtein</primary>
  </indexterm>

  <indexterm>
   <primary>levenshtein_less_equal</primary>
  </indexterm>

<synopsis>
levenshtein(text source, text target, int ins_cost, int del_cost, int sub_cost) 返回 int
levenshtein(text source, text target) 返回 int
levenshtein_less_equal(text source, text target, int ins_cost, int del_cost, int sub_cost, int max_d) 返回 int
levenshtein_less_equal(text source, text target, int max_d) 返回 int
</synopsis>

  <para>
   <literal>source</literal>以及<literal>target</literal>都可以是任何非空字符串，最长为 255 字节。代价参数分别指定一个字符插入、删除或替换的开销。你可以像这个函数的第二种版本那样忽略代价参数，那样它们都会默认为 1。<literal>levenshtein_less_equal</literal>是用于低值距离的加速版本的编辑距离函数。如果实际的距离低于或等于 max_d，那么<literal>levenshtein_less_equal</literal>返回精确值 1。否则这个函数返回大于 max_d 的值。
  </para>

  <para>
   例子：
  </para>

<screen>
test=# SELECT levenshtein('GUMBO', 'GAMBOL');
 levenshtein
-------------
           2
(1 row)

test=# SELECT levenshtein('GUMBO', 'GAMBOL', 2,1,1);
 levenshtein
-------------
           3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',2);
 levenshtein_less_equal
------------------------
                      3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',4);
 levenshtein_less_equal
------------------------
                      4
(1 row)
</screen>
 </sect2>

 <sect2>
  <title>Metaphone</title>

  <para>
   和 Soundex 相似，Metaphone 的思想是构建一个输入字符串的一种代码。如果两个字符串具有相同的代码则认为它们相似。
  </para>

  <para>
   这个函数计算一个输入字符串的变音位代码：
  </para>

  <indexterm>
   <primary>metaphone</primary>
  </indexterm>

<synopsis>
metaphone(text source, int max_output_length) 返回 text
</synopsis>

  <para>
   <literal>source</literal>必须是一个非空字符串，最大长度为 255 个字符。<literal>max_output_length</literal>设置输出的变音位代码的最大长度，如果超长，输出会被截断到这个长度。
  </para>

  <para>
   例子：
  </para>

<screen>
test=# SELECT metaphone('GUMBO', 4);
 metaphone
-----------
 KM
(1 row)
</screen>
 </sect2>

 <sect2>
  <title>双 Metaphone</title>

  <para>
   双变音位系统为一个给定输入字符串计算两个<quote>听起来像的</>字符串 &mdash; 一个<quote>主要</>代码和一个<quote>次要</>代码。在大部分情况下它们是相同的，但是对于非英语名称它们可能有一点不同，这取决于发音。这些函数计算主要和次要代码：
  </para>

  <indexterm>
   <primary>dmetaphone</primary>
  </indexterm>

  <indexterm>
   <primary>dmetaphone_alt</primary>
  </indexterm>

<synopsis>
dmetaphone(text source) 返回 text
dmetaphone_alt(text source) 返回 text
</synopsis>

  <para>
   对输入字符串没有长度限制。
  </para>

  <para>
   例子：
  </para>

<screen>
test=# select dmetaphone('gumbo');
 dmetaphone
------------
 KMP
(1 row)
</screen>
 </sect2>

</sect1>

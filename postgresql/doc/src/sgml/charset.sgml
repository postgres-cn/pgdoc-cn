<!-- doc/src/sgml/charset.sgml -->

<chapter id="charset">
 <title>本地化</title>

 <para>
  本章从管理员的角度描述可用的本地化特性。<productname>PostgreSQL</productname>支持两种本地化方法：

   <itemizedlist>
    <listitem>
     <para>
      利用操作系统的区域（locale）特性，提供对区域相关的排序顺序、数字格式、 翻译过的信息和其它方面。这种方法在<xref linkend="locale">和<xref linkend="collation">中。
     </para>
    </listitem>

    <listitem>
     <para>
      提供一些不同的字符集来支持存储所有种类语言的文本，并提供在客户端和服务器之间的字符集转换。这种方法在<xref linkend="multibyte">中。
     </para>
    </listitem>
   </itemizedlist>
  </para>


 <sect1 id="locale">
  <title>区域支持</title>

  <indexterm zone="locale"><primary>locale</></>

  <para>
   <firstterm>区域</>支持指的是应用遵守文化偏好的问题，包括字母表、排序、数字格式等。<productname>PostgreSQL</>使用服务器操作系统提供的标准 ISO C 和<acronym>POSIX</acronym>的区域机制。更多的信息请参考你的系统的文档。
  </para>

  <sect2>
   <title>概述</title>

   <para>
    区域支持是在使用<command>initdb</command>创建一个数据库集簇时自动被初始化的。默认情况下，<command>initdb</command>将会按照它的执行环境的区域设置初始化数据库集簇； 因此如果你的系统已经设置为你的数据库集簇想要使用的区域， 那么你就没有什么可干的。如果你想使用其它的区域（或者你还不知道你的系统设置的区域是什么），那么你可以用<option>--locale</option>选项准确地告诉<command>initdb</command>你要用哪一个区域。 比如：
<screen>
initdb --locale=sv_SE
</screen>
   </para>

   <para>
    这个Unix系统上的例子把区域设置为瑞典（<literal>SE</>）瑞典语（<literal>sv</>）。 其他的可能性包括 <literal>en_US</>（美国英语）和<literal>fr_CA</>（加拿大法语）。如果有多于一种字符集可以用于区域，那么声明可以采用如下的形式：<replaceable>language_territory.codeset</>。例如<literal>fr_BE.UTF-8</>表示在比利时（BE）讲的法语（fr），使用一个<acronym>UTF-8</>字符集编码。
   </para>

   <para>
    在你的系统上有哪些区域可用取决于操作系统提供商提供了什么以及安装了什么。在大部分Unix系统上，命令<literal>locale -a</>将会提供一个所有可用区域的列表。Windows使用一些更繁琐的区域名，例如<literal>German_Germany</>或者<literal>Swedish_Sweden.1252</>，但是其原则是相同的。
   </para>

   <para>
    有时候，把几种区域规则混合起来也很有用，比如，使用英语排序规则而用西班牙语消息。 为了支持这些，我们有一套区域子类用于控制本地化规则的某些方面：

    <informaltable>
     <tgroup cols="2">
      <tbody>
       <row>
        <entry><envar>LC_COLLATE</></>
        <entry>字符串排序顺序</>
       </row>
       <row>
        <entry><envar>LC_CTYPE</></>
        <entry>字符分类（什么是一个字符？它的大写形式是否等效？）</>
       </row>
       <row>
        <entry><envar>LC_MESSAGES</></>
        <entry>消息使用的语言Language of messages</>
       </row>
       <row>
        <entry><envar>LC_MONETARY</></>
        <entry>货币数量使用的格式</>
       </row>
       <row>
        <entry><envar>LC_NUMERIC</></>
        <entry>数字的格式</>
       </row>
       <row>
        <entry><envar>LC_TIME</></>
        <entry>日期和时间的格式</>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

    这些类名转换成<command>initdb</command>的选项名来覆盖某个特定分类的区域选择。比如，要把区域设置为加拿大法语，但使用 U.S. 规则格式化货币，可以使用<literal>initdb --locale=fr_CA --lc-monetary=en_US</literal>。
   </para>

   <para>
    如果你想让系统表现得象没有区域支持，那么使用特殊的区域名<literal>C</>或者等效的<literal>POSIX</>。
   </para>

   <para>
    一些区域分类的值必需在数据库被创建时的就被固定。你可以为不同的数据库使用不同的设置，但是一旦一个数据库被创建，你就不能在数据库上修改这些区域分类的值。<literal>LC_COLLATE</literal>和<literal>LC_CTYPE</literal>就是这样的分类。它们影响索引的排序顺序，因此它们必需保持固定， 否则在文本列上的索引将会崩溃（但是你可以使用排序规则放松这种限制，讨论见<xref linkend="collation">）。这些分类的默认值在<command>initdb</command>运行时被确定，并且这些值在新数据库被创建时使用，除非在<command>CREATE DATABASE</command>命令中特别指定。
   </para>

   <para>
    其它区域分类可以在任何时候被更改，更改的方式是设置与区域分类同名的服务器配置参数（详见<xref linkend="runtime-config-client-format">）。被<command>initdb</command>选中的值实际上只是被写入到配置文件<filename>postgresql.conf</filename>中作为服务器启动时的默认值。如果你将这些赋值从<filename>postgresql.conf</filename>中除去，那么服务器将会从其执行环境中继承该设置。
   </para>

   <para>
    请注意服务器的区域行为是由它看到的环境变量决定的，而不是由任何客户端的环境变量影响的。 因此，我们要在启动服务器之前认真地设置好这些变量。这样带来的一种后果是如果客户端和服务器设置成不同的区域， 那么消息可能以不同的语言呈现，实际情况取决于它们的起源地。
   </para>

   <note>
    <para>
     在我们谈到从执行环境继承区域的时候，我们的意思是在大多数操作系统上的下列动作： 对于一个给定的区域分类，比如排序规则，按照下面的顺序评估这些环境变量， 直到找到一个被设置了的：<envar>LC_ALL</envar>、 <envar>LC_COLLATE</envar>（或者对应于相应分类的变量）、<envar>LANG</envar>。如果这些环境变量一个都没有被设置，那么将区域缺省设置为<literal>C</literal>。
    </para>

    <para>
     一些消息本地化库也查看环境变量<envar>LANGUAGE</envar>，它覆盖所有其它用于设置消息语言的区域设置。如果有疑问， 请参考你的操作系统的文档，特别是有关<application>gettext</>的文档。
    </para>
   </note>

   <para>
    要允许消息被翻译成用户喜欢的语言，编译时必需打开<acronym>NLS</acronym>（<literal>configure --enable-nls</>）。所有其他区域支持都会被自动编译。
   </para>
  </sect2>

  <sect2>
   <title>行为</title>

   <para>
    区域设置特别影响下面的 SQL 特性：

    <itemizedlist>
     <listitem>
      <para>
       在文本数据上使用<literal>ORDER BY</>或标准比较操作符的查询中的排序顺序
       <indexterm><primary>ORDER BY</><secondary>与区域</></indexterm>
      </para>
     </listitem>

     <listitem>
      <para>
       函数<function>upper</>、<function>lower</>和<function>initcap</>
       <indexterm><primary>upper</><secondary>与区域</></indexterm>
       <indexterm><primary>lower</><secondary>与区域</></indexterm>
      </para>
     </listitem>

     <listitem>
      <para>
       模式匹配操作符（<literal>LIKE</>、<literal>SIMILAR TO</>和POSIX风格的正则表达式）；区域影响大小写不敏感匹配和通过字符类正则表达式的字符分类
       <indexterm><primary>LIKE</><secondary>与区域</></indexterm>
       <indexterm><primary>regular expressions</><secondary>与区域</></indexterm>
      </para>
     </listitem>

     <listitem>
      <para>
       <function>to_char</>函数家族
       <indexterm><primary>to_char</><secondary>与区域</></indexterm>
      </para>
     </listitem>

     <listitem>
      <para>
       为<literal>LIKE</>子句使用索引的能力
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <productname>PostgreSQL</>中使用非<literal>C</>或非<literal>POSIX</>区域的缺点是性能影响。它降低了字符处理的速度并且阻止了在<literal>LIKE</>中对普通索引的使用。因此，只能在真正需要的时候才使用它。
   </para>

   <para>
    作为允许<productname>PostgreSQL</>在非 C 区域下为<literal>LIKE</>子句使用索引， 有好几种自定义操作符类可用。这些操作符类允许创建一个执行严格按字符比较的索引。详见<xref linkend="indexes-opclass">。另一种方法是创建使用<literal>C</>排序规则的索引，如<xref linkend="collation">所讨论的。
   </para>
  </sect2>

  <sect2>
   <title>问题</title>

   <para>
    如果根据上面解释区域支持仍然不能运转，检查一下操作系统的区域支持是否被正确配置。 要检查系统中安装了哪些区域，你可以使用命令<literal>locale -a</literal>（如果你的操作系统提供了该命令）。
   </para>

   <para>
    请检查<productname>PostgreSQL</>确实正在使用你认为它该用的区域设置。<envar>LC_COLLATE</>和<envar>LC_CTYPE</>设置都是在数据库创建时决定的，并且在除了创建数据库之外的操作中都不能被更改。其它的区域设置包括<envar>LC_MESSAGES</>和<envar>LC_MONETARY</>都是由服务器启动的环境决定的， 但是可以在运行时修改。你可以用<command>SHOW</>命令检查活跃的区域设置。
   </para>

   <para>
    源代码目录的<filename>src/test/locale</>中包含<productname>PostgreSQL</>的区域支持的测试套件。
   </para>

   <para>
    那些通过分析错误消息来处理服务器端错误的客户端应用很明显会有问题，因为服务器来的消息可能会是以不同语言表示的。 我们建议这类应用的开发人员改用错误代码机制。
   </para>

   <para>
    维护消息翻译目录需要许多志愿者的坚持不懈的努力， 他们希望<productname>PostgreSQL</>以他们的语言说话。 如果以你的语言表示的消息目前还不可用或者没有完全翻译完成，那么我们很感谢你的协助。如果你想帮忙，那么请参考<xref linkend="nls">或者向开发者邮递列表发邮件。
   </para>
  </sect2>
 </sect1>


 <sect1 id="collation">
  <title>排序规则支持</title>

  <indexterm zone="collation"><primary>排序规则</></>

  <para>
   排序规则特性允许指定每一列甚至每一个操作的数据的排序顺序和字符分类行为。这放松了数据库的<symbol>LC_COLLATE</symbol>和<symbol>LC_CTYPE</symbol>设置自创建以后就不能更改这一限制。
  </para>

  <sect2>
   <title>概念</title>

   <para>
    在概念上，一种可排序数据类型的每一种表达式都有一个排序规则（内建的可排序数据类型是<type>text</type>、<type>varchar</type>和<type>char</type>。用户定义的基础类型也可以被标记为可排序的，并且在一种可排序数据类型上的域也是可排序的）。如果该表达式是一个列引用，该表达式的排序规则就是列所定义的排序规则。如果该表达式是一个常量，排序规则就是该常量数据类型的默认排序规则。更复杂表达式的排序规则根据其输入的排序规则得来，如下所述：
   </para>

   <para>
    一个表达式的排序规则可以是<quote>默认</quote>排序规则，它表示数据库的区域设置。一个表达式的排序规则也可能是不确定的。在这种情况下，排序操作和其他需要知道排序规则的操作会失败。
   </para>

   <para>
    当数据库系统必须要执行一次排序或者字符分类时，它使用输入表达式的排序规则。这会在使用例如<literal>ORDER BY</literal>子句以及函数或操作符调用（如<literal>&lt;</literal>）时发生。应用于<literal>ORDER BY</literal>子句的排序规则就是排序键的排序规则。应用于函数或操作符调用的排序规则从它们的参数得来，具体如下文所述。除比较操作符之外，在大小写字母之间转换的函数会考虑排序规则，例如<function>lower</>、<function>upper</>和<function>initcap</>。模式匹配操作符和<function>to_char</>及相关函数也会考虑排序规则。
   </para>

   <para>
    对于一个函数或操作符调用，其排序规则通过检查在执行指定操作时参数的排序规则来获得。如果该函数或操作符调用的结果是一种可排序的数据类型，万一有外围表达式要求函数或操作符表达式的排序规则，在解析时结果的排序规则也会被用作函数或操作符表达式的排序规则。
   </para>

   <para>
    一个表达式的<firstterm>排序规则派生</firstterm>可以是显式或隐式。该区别会影响多个不同的排序规则出现在同一个表达式中时如何组合它们。当使用一个<literal>COLLATE</literal>子句时，将发生显式排序规则派生。所有其他排序规则派生都是隐式的。当多个排序规则需要被组合时（例如在一个函数调用中），将使用下面的规则：

    <orderedlist>
     <listitem>
      <para>
       如果任何一个输入表达式具有一个显式排序规则派生，则在输入表达式之间的所有显式派生的排序规则必须相同，否则将产生一个错误。如果任何一个显式派生的排序规则存在，它就是排序规则组合的结果。
      </para>
     </listitem>

     <listitem>
      <para>
       否则，所有输入表达式必须具有相同的隐式排序规则派生或默认排序规则。如果任何一个非默认排序规则存在，它就是排序规则组合的结果。否则，结果是默认排序规则。
      </para>
     </listitem>

     <listitem>
      <para>
       如果在输入表达式之间存在冲突的非默认隐式排序规则，则组合被认为是具有不确定排序规则。这并非一种错误情况，除非被调用的特定函数要求提供排序规则的知识。如果它确实这样做，运行时将发生一个错误。
      </para>
     </listitem>
    </orderedlist>

    例如，考虑这个表定义：
<programlisting>
CREATE TABLE test1 (
    a text COLLATE "de_DE",
    b text COLLATE "es_ES",
    ...
);
</programlisting>

    然后在
<programlisting>
SELECT a &lt; 'foo' FROM test1;
</programlisting>
    中，<literal>&lt;</literal>比较被根据<literal>de_DE</literal>规则执行，因为表达式组合了一个隐式派生的排序规则和默认排序规则。但是在
<programlisting>
SELECT a &lt; ('foo' COLLATE "fr_FR") FROM test1;
</programlisting>
    中，比较被使用<literal>fr_FR</literal>规则执行，因为显式排序规则派生重载了隐式排序规则。更进一步，给定
<programlisting>
SELECT a &lt; b FROM test1;
</programlisting>
    解析器不能确定要应用哪个排序规则，因为<structfield>a</>列和<structfield>b</>列具有冲突的隐式排序规则。由于<literal>&lt;</literal>操作符不需要知道到底使用哪一个排序规则，这将会导致一个错误。该错误可以通过在一个输入表达式上附加一个显式排序规则说明符来解决，因此：
<programlisting>
SELECT a &lt; b COLLATE "de_DE" FROM test1;
</programlisting>
    或者等效的
<programlisting>
SELECT a COLLATE "de_DE" &lt; b FROM test1;
</programlisting>
    在另一方面，结构相似的情况
<programlisting>
SELECT a || b FROM test1;
</programlisting>
    不会导致一个错误，因为<literal>||</>操作符不关心排序规则：不管排序规则怎样它的结果都相同。
   </para>

   <para>
    如果一个函数或操作符发送一个具有可排序数据类型的结果，分配给该函数或操作符的组合输入表达式的排序规则也被考虑应用在函数或操作符的结果。因此，在
<programlisting>
SELECT * FROM test1 ORDER BY a || 'foo';
</programlisting>
    中排序将根据<literal>de_DE</literal>规则完成。但这个查询：
<programlisting>
SELECT * FROM test1 ORDER BY a || b;
</programlisting>
    会导致一个错误，因为即使<literal>||</>操作符不需要知道排序规则，但<literal>ORDER BY</>子句需要。按照以前，冲突可以通过使用一个显式排序规则说明符来解决：
<programlisting>
SELECT * FROM test1 ORDER BY a || b COLLATE "fr_FR";
</programlisting>
   </para>
  </sect2>

  <sect2>
   <title>管理排序规则</title>

   <para>
    一个排序规则是一个SQL模式对象，它将一个SQL名字映射到一个操作系统区域。特别地，它映射到一个<symbol>LC_COLLATE</symbol> 和<symbol>LC_CTYPE</symbol>的组合（正如其名字所说的，一个排序规则的主要目的是设置<symbol>LC_COLLATE</symbol>它控制排序顺序。但是在实际中很少有必要有一个不同于<symbol>LC_COLLATE</symbol>的<symbol>LC_CTYPE</symbol>设置，因此通过一个概念来收集这些信息比为了设置每一个表达式的<symbol>LC_CTYPE</symbol>而创建另一种架构要更加方便）。此外，一个排序规则是和一个字符集编码（见<xref linkend="multibyte">）绑定在一起的。相同的排序规则名字可能存在于不同的编码中。
   </para>

   <para>
    在所有的平台上，名为<literal>default</>、<literal>C</>和<literal>POSIX</>的排序规则都可用。附加的排序规则是否可用取决于操作系统的支持。<literal>default</>排序规则选择在数据库创建时指定的<symbol>LC_COLLATE</symbol>和<symbol>LC_CTYPE</symbol>值。<literal>C</>和<literal>POSIX</>排序规则都指定了<quote>传统的C</>行为，在其中只有ASCII字母<quote><literal>A</></quote>到<quote><literal>Z</></quote>被视为字母，并且排序严格地按照字符编码的字节值完成。
   </para>

   <para>
    如果操作系统支持在一个程序中使用多个区域（<function>newlocale</>和相关函数），那么在一个数据集簇被初始化时，<command>initdb</command>将以它在操作系统上能找到的所有区域为基础在系统目录<literal>pg_collation</literal>中填充排序规则。例如，操作系统可能会提供一个名为<literal>de_DE.utf8</literal>的区域。<command>initdb</command>则会创建一个用于编码<literal>UTF8</literal>的名为<literal>de_DE.utf8</literal>的排序规则，在其中<symbol>LC_COLLATE</symbol>和<symbol>LC_CTYPE</symbol>都被设置为<literal>de_DE.utf8</literal>。它也会创建一个具有去掉名称的<literal>.utf8</literal>标签的排序规则。这样你也可以使用名字<literal>de_DE</literal>来使用该排序规则，这写起来更简单并且使得名字更加独立于编码。不过要注意，最初的排序规则名称的集合是平台依赖的。
   </para>

   <para>
    万一所需要的一个排序规则具有和<symbol>LC_COLLATE</symbol>及<symbol>LC_CTYPE</symbol>不同的值，可以使用<xref linkend="sql-createcollation">命令创建一个新的排序规则。该命令也可以被用于从一个现有的排序规则创建一个新的排序规则，这样对于可以在应用中使用操作系统独立的排序规则名很有用。
   </para>

   <para>
    在任何特定的数据库中，只有使用数据库编码的排序规则是令人感兴趣的。其他<literal>pg_collation</literal>中的项会被忽略。因此，一个如<literal>de_DE</literal>的被剥离的排序规则名在一个给定数据库中可以被认为是唯一的，即使它在全局上并不唯一。我们推荐使用被剥离的排序规则名，因为在你决定要更改到另一个数据库编码时需要做的事情更少。但是要注意<literal>default</>、<literal>C</>和<literal>POSIX</>排序规则在使用时可以不考虑数据库编码。
   </para>

   <para>
    <productname>PostgreSQL</productname>在碰到具有相同属性的不同排序规则对象时会认为它们是不兼容的。因此对于例子：
<programlisting>
SELECT a COLLATE "C" &lt; b COLLATE "POSIX" FROM test1;
</programlisting>
    将会得到一个错误，即使<literal>C</>和<literal>POSIX</>排序规则具有相同的行为。因此，我们不推荐混合使用被剥离的和非被剥离的排序规则名。
   </para>
  </sect2>
 </sect1>

 <sect1 id="multibyte">
  <title>字符集支持</title>

  <indexterm zone="multibyte"><primary>字符集</></>

  <para>
   <productname>PostgreSQL</productname>里面的字符集支持你能够以各种字符集存储文本，包括单字节字符集，比如 ISO 8859 系列，以及多字节字符集 ，比如<acronym>EUC</>（扩展 Unix 编码 Extended Unix Code）、UTF-8 和 Mule 内部编码。所有被支持的字符集都可以被客户端透明地使用，但少数只能在服务器上使用（即作为一种服务器方编码）。默认的字符集是在使用 <command>initdb</>初始化你的<productname>PostgreSQL</productname>数据库集簇时选择的。在你创建一个数据库时可以重载它，因此你可能会有多个数据库并且每一个使用不同的字符集。
  </para>

  <para>
   但是，一个重要的限制是每个数据库的字符集必须和数据库的<envar>LC_CTYPE</>（字符分类）和<envar>LC_COLLATE</> （字符串排序顺序）设置兼容。对于<literal>C</>或<literal>POSIX</>区域，任何字符集都是允许的，但是对于其他区域只有一种字符集可以正确工作（不过，在Windows上UTF-8编码可以和任何区域配合使用）。
  </para>

   <sect2 id="multibyte-charset-supported">
    <title>被支持的字符集</title>

    <para>
     <xref linkend="charset-table">显示了<productname>PostgreSQL</productname>中可用的字符集。
    </para>

     <table id="charset-table">
      <title><productname>PostgreSQL</productname>字符集</title>
      <tgroup cols="6">
       <thead>
        <row>
         <entry>名称</entry>
         <entry>描述</entry>
         <entry>语言</entry>
         <entry>是否服务器端？</entry>
         <!--
          The Bytes/Char field is populated by looking at the values returned
          by pg_wchar_table.mblen function for each encoding.
         -->
         <entry>字节/字符</entry>
         <entry>别名</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>BIG5</literal></entry>
         <entry>Big Five</entry>
         <entry>繁体中文</entry>
         <entry>否</entry>
         <entry>1-2</entry>
         <entry><literal>WIN950</>, <literal>Windows950</></entry>
        </row>
        <row>
         <entry><literal>EUC_CN</literal></entry>
         <entry>扩展UNIX编码-中国</entry>
         <entry>简体中文</entry>
         <entry>是</entry>
         <entry>1-3</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>EUC_JP</literal></entry>
         <entry>扩展UNIX编码-日本</entry>
         <entry>日文</entry>
         <entry>是</entry>
         <entry>1-3</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>EUC_JIS_2004</literal></entry>
         <entry>扩展UNIX编码-日本, JIS X 0213</entry>
         <entry>日文</entry>
         <entry>是</entry>
         <entry>1-3</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>EUC_KR</literal></entry>
         <entry>扩展UNIX编码-韩国</entry>
         <entry>韩文</entry>
         <entry>是</entry>
         <entry>1-3</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>EUC_TW</literal></entry>
         <entry>扩展UNIX编码-台湾</entry>
         <entry>繁体中文，台湾话</entry>
         <entry>是</entry>
         <entry>1-3</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>GB18030</literal></entry>
         <entry>国家标准</entry>
         <entry>中文</entry>
         <entry>否</entry>
         <entry>1-4</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>GBK</literal></entry>
         <entry>扩展国家标准</entry>
         <entry>简体中文</entry>
         <entry>否</entry>
         <entry>1-2</entry>
         <entry><literal>WIN936</>, <literal>Windows936</></entry>
        </row>
        <row>
         <entry><literal>ISO_8859_5</literal></entry>
         <entry>ISO 8859-5, <acronym>ECMA</> 113</entry>
         <entry>拉丁语/西里尔语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>ISO_8859_6</literal></entry>
         <entry>ISO 8859-6, <acronym>ECMA</> 114</entry>
         <entry>拉丁语/阿拉伯语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>ISO_8859_7</literal></entry>
         <entry>ISO 8859-7, <acronym>ECMA</> 118</entry>
         <entry>拉丁语/希腊语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>ISO_8859_8</literal></entry>
         <entry>ISO 8859-8, <acronym>ECMA</> 121</entry>
         <entry>拉丁语/希伯来语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>JOHAB</literal></entry>
         <entry><acronym>JOHAB</></entry>
         <entry>韩语</entry>
         <entry>否</entry>
         <entry>1-3</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>KOI8R</literal></entry>
         <entry><acronym>KOI</acronym>8-R</entry>
         <entry>西里尔语（俄语）</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>KOI8</></entry>
        </row>
        <row>
         <entry><literal>KOI8U</literal></entry>
         <entry><acronym>KOI</acronym>8-U</entry>
         <entry>西里尔语（乌克兰语）</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>LATIN1</literal></entry>
         <entry>ISO 8859-1, <acronym>ECMA</> 94</entry>
         <entry>西欧</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO88591</></entry>
        </row>
        <row>
         <entry><literal>LATIN2</literal></entry>
         <entry>ISO 8859-2, <acronym>ECMA</> 94</entry>
         <entry>中欧</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO88592</></entry>
        </row>
        <row>
         <entry><literal>LATIN3</literal></entry>
         <entry>ISO 8859-3, <acronym>ECMA</> 94</entry>
         <entry>南欧</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO88593</></entry>
        </row>
        <row>
         <entry><literal>LATIN4</literal></entry>
         <entry>ISO 8859-4, <acronym>ECMA</> 94</entry>
         <entry>北欧</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO88594</></entry>
        </row>
        <row>
         <entry><literal>LATIN5</literal></entry>
         <entry>ISO 8859-9, <acronym>ECMA</> 128</entry>
         <entry>土耳其语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO88599</></entry>
        </row>
        <row>
         <entry><literal>LATIN6</literal></entry>
         <entry>ISO 8859-10, <acronym>ECMA</> 144</entry>
         <entry>日耳曼语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO885910</></entry>
        </row>
        <row>
         <entry><literal>LATIN7</literal></entry>
         <entry>ISO 8859-13</entry>
         <entry>波罗的海</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO885913</></entry>
        </row>
        <row>
         <entry><literal>LATIN8</literal></entry>
         <entry>ISO 8859-14</entry>
         <entry>凯尔特语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO885914</></entry>
        </row>
        <row>
         <entry><literal>LATIN9</literal></entry>
         <entry>ISO 8859-15</entry>
         <entry>带欧罗巴和口音的LATIN1</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO885915</></entry>
        </row>
        <row>
         <entry><literal>LATIN10</literal></entry>
         <entry>ISO 8859-16, <acronym>ASRO</> SR 14111</entry>
         <entry>罗马尼亚语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ISO885916</></entry>
        </row>
        <row>
         <entry><literal>MULE_INTERNAL</literal></entry>
         <entry>Mule内部编码</entry>
         <entry>多语种编辑器</entry>
         <entry>是</entry>
         <entry>1-4</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>SJIS</literal></entry>
         <entry>Shift JIS</entry>
         <entry>日语</entry>
         <entry>否</entry>
         <entry>1-2</entry>
         <entry><literal>Mskanji</>, <literal>ShiftJIS</>, <literal>WIN932</>, <literal>Windows932</></entry>
        </row>
        <row>
         <entry><literal>SHIFT_JIS_2004</literal></entry>
         <entry>Shift JIS, JIS X 0213</entry>
         <entry>日语</entry>
         <entry>否</entry>
         <entry>1-2</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>SQL_ASCII</literal></entry>
         <entry>未指定（见文本）</entry>
         <entry><emphasis>任意</></entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>UHC</literal></entry>
         <entry>统一韩语编码</entry>
         <entry>韩语</entry>
         <entry>否</entry>
         <entry>1-2</entry>
         <entry><literal>WIN949</>, <literal>Windows949</></entry>
        </row>
        <row>
         <entry><literal>UTF8</literal></entry>
         <entry>Unicode, 8-bit</entry>
         <entry><emphasis>所有</></entry>
         <entry>是</entry>
         <entry>1-4</entry>
         <entry><literal>Unicode</></entry>
        </row>
        <row>
         <entry><literal>WIN866</literal></entry>
         <entry>Windows CP866</entry>
         <entry>西里尔语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ALT</></entry>
        </row>
        <row>
         <entry><literal>WIN874</literal></entry>
         <entry>Windows CP874</entry>
         <entry>泰语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>WIN1250</literal></entry>
         <entry>Windows CP1250</entry>
         <entry>中欧</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>WIN1251</literal></entry>
         <entry>Windows CP1251</entry>
         <entry>西里尔语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>WIN</></entry>
        </row>
        <row>
         <entry><literal>WIN1252</literal></entry>
         <entry>Windows CP1252</entry>
         <entry>西欧</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>WIN1253</literal></entry>
         <entry>Windows CP1253</entry>
         <entry>希腊语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>WIN1254</literal></entry>
         <entry>Windows CP1254</entry>
         <entry>土耳其语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>WIN1255</literal></entry>
         <entry>Windows CP1255</entry>
         <entry>希伯来语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>WIN1256</literal></entry>
         <entry>Windows CP1256</entry>
         <entry>阿拉伯语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>WIN1257</literal></entry>
         <entry>Windows CP1257</entry>
         <entry>波罗的海</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry></entry>
        </row>
        <row>
         <entry><literal>WIN1258</literal></entry>
         <entry>Windows CP1258</entry>
         <entry>越南语</entry>
         <entry>是</entry>
         <entry>1</entry>
         <entry><literal>ABC</>, <literal>TCVN</>, <literal>TCVN5712</>, <literal>VSCII</></entry>
        </row>
       </tbody>
      </tgroup>
     </table>

     <para>
      并非所有的客户端<acronym>API</>都支持上面列出的字符集。比如，<productname>PostgreSQL</>的JDBC 驱动就不支持<literal>MULE_INTERNAL</>、<literal>LATIN6</>、<literal>LATIN8</>和<literal>LATIN10</>。
     </para>

     <para>
      <literal>SQL_ASCII</>设置与其他设置表现得相当不同。如果服务器字符集是<literal>SQL_ASCII</>，服务器把字节值0-127根据 ASCII标准解释，而字节值128-255则当作无法解析的字符。如果设置为<literal>SQL_ASCII</>，就不会有编码转换。因此，这个设置基本不是用来声明所使用的指定编码， 因为这个声明会忽略编码。在大多数情况下，如果你使用了任何非ASCII数据，那么使用 <literal>SQL_ASCII</>设置都是不明智的，因为<productname>PostgreSQL</productname>将无法帮助你转换或者校验非ASCII字符。
     </para>
    </sect2>

   <sect2>
    <title>设置字符集</title>

    <para>
     <command>initdb</>为一个<productname>PostgreSQL</productname>集簇定义缺省的字符集（编码）。比如：

<screen>
initdb -E EUC_JP
</screen>

     把缺省字符集设置为<literal>EUC_JP</literal>（用于日文的扩展Unix 编码）。如果你喜欢用长选项字符串，你可以用<option>--encoding</option>代替<option>-E</option>。 如果没有给出<option>-E</option>或者<option>--encoding</option>选项，<command>initdb</>会尝试基于指定的或者默认的区域判断要使用的合适编码。
    </para>

    <para>
     你可以在数据库创建时指定一个非默认编码，提供的编码应和选择的区域兼容：

<screen>
createdb -E EUC_KR -T template0 --lc-collate=ko_KR.euckr --lc-ctype=ko_KR.euckr korean
</screen>

     将创建一个使用<literal>EUC_KR</literal>字符集和<literal>ko_KR</literal>区域的名为<literal>korean</literal>的数据库。 另外一种实现方法是使用 SQL 命令：

<programlisting>
CREATE DATABASE korean WITH ENCODING 'EUC_KR' LC_COLLATE='ko_KR.euckr' LC_CTYPE='ko_KR.euckr' TEMPLATE=template0;
</programlisting>

     注意上述命令指定拷贝<literal>template0</>数据库。在拷贝任何其他数据库时，不能更改从源数据库得来的编码和区域设置，因为这可能会导致破坏数据。详见<xref linkend="manage-ag-templatedbs">。
    </para>

    <para>
     数据库的编码存储在系统目录<literal>pg_database</literal>中。你可以使用<command>psql</command> <option>-l</option>选项或者<command>\l</command>命令来查看。

<screen>
$ <userinput>psql -l</userinput>
                                         List of databases
   Name    |  Owner   | Encoding  |  Collation  |    Ctype    |          Access Privileges
-----------+----------+-----------+-------------+-------------+-------------------------------------
 clocaledb | hlinnaka | SQL_ASCII | C           | C           |
 englishdb | hlinnaka | UTF8      | en_GB.UTF8  | en_GB.UTF8  |
 japanese  | hlinnaka | UTF8      | ja_JP.UTF8  | ja_JP.UTF8  |
 korean    | hlinnaka | EUC_KR    | ko_KR.euckr | ko_KR.euckr |
 postgres  | hlinnaka | UTF8      | fi_FI.UTF8  | fi_FI.UTF8  |
 template0 | hlinnaka | UTF8      | fi_FI.UTF8  | fi_FI.UTF8  | {=c/hlinnaka,hlinnaka=CTc/hlinnaka}
 template1 | hlinnaka | UTF8      | fi_FI.UTF8  | fi_FI.UTF8  | {=c/hlinnaka,hlinnaka=CTc/hlinnaka}
(7 rows)
</screen>
    </para>

    <important>
     <para>
      在大部分现代操作系统上，<productname>PostgreSQL</productname>可以判断<envar>LC_CTYPE</>设置意味着哪一种字符集，并且它强制只有匹配的数据库编码被使用。在老的系统上你需要自己负责确保所使用的编码就是你所选择的区域所期望的。在这里的一个错误很可能导致区域依赖的操作产生奇怪的行为，例如排序。
     </para>

     <para>
      即使<envar>LC_CTYPE</>不是<literal>C</>或<literal>POSIX</>时，<productname>PostgreSQL</productname>将允许超级用户使用<literal>SQL_ASCII</>编码创建数据库。正如前文所述，<literal>SQL_ASCII</>并不强制存储在数据库中的数据具有任何特定的编码，并且这样这种选择存在着区域依赖的不正当行为的风险。使用这种设置组合的做法已经被废弃，并且在某天将被完全禁止。
     </para>
    </important>
   </sect2>

   <sect2>
    <title>服务器和客户端之间的自动字符集转换</title>

    <para>
     <productname>PostgreSQL</productname>支持一些编码在服务器和前端之间的自动编码转换。转换信息在系统目录<literal>pg_conversion</>中存储。<productname>PostgreSQL</>带着一些预定义的转换，如<xref linkend="multibyte-translation-table">所示。你可以使用SQL命令<command>CREATE CONVERSION</command>创建一个新的转换。
    </para>

     <table id="multibyte-translation-table">
      <title>客户/服务器字符集转换</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>服务器字符集</entry>
         <entry>可用的客户端字符集</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>BIG5</literal></entry>
         <entry><emphasis>不支持作为一个服务器编码</emphasis>
         </entry>
        </row>
        <row>
         <entry><literal>EUC_CN</literal></entry>
         <entry><emphasis>EUC_CN</emphasis>,
         <literal>MULE_INTERNAL</literal>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>EUC_JP</literal></entry>
         <entry><emphasis>EUC_JP</emphasis>,
         <literal>MULE_INTERNAL</literal>,
         <literal>SJIS</literal>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>EUC_KR</literal></entry>
         <entry><emphasis>EUC_KR</emphasis>,
         <literal>MULE_INTERNAL</literal>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>EUC_TW</literal></entry>
         <entry><emphasis>EUC_TW</emphasis>,
         <literal>BIG5</literal>,
         <literal>MULE_INTERNAL</literal>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>GB18030</literal></entry>
         <entry><emphasis>不支持作为一个服务器编码</emphasis>
         </entry>
        </row>
        <row>
         <entry><literal>GBK</literal></entry>
         <entry><emphasis>不支持作为一个服务器编码</emphasis>
         </entry>
        </row>
        <row>
         <entry><literal>ISO_8859_5</literal></entry>
         <entry><emphasis>ISO_8859_5</emphasis>,
         <literal>KOI8R</literal>,
         <literal>MULE_INTERNAL</literal>,
         <literal>UTF8</literal>,
         <literal>WIN866</literal>,
         <literal>WIN1251</literal>
         </entry>
        </row>
        <row>
         <entry><literal>ISO_8859_6</literal></entry>
         <entry><emphasis>ISO_8859_6</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>ISO_8859_7</literal></entry>
         <entry><emphasis>ISO_8859_7</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>ISO_8859_8</literal></entry>
         <entry><emphasis>ISO_8859_8</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>JOHAB</literal></entry>
         <entry><emphasis>JOHAB</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>KOI8R</literal></entry>
         <entry><emphasis>KOI8R</emphasis>,
         <literal>ISO_8859_5</literal>,
         <literal>MULE_INTERNAL</literal>,
         <literal>UTF8</literal>,
         <literal>WIN866</literal>,
         <literal>WIN1251</literal>
         </entry>
        </row>
        <row>
         <entry><literal>KOI8U</literal></entry>
         <entry><emphasis>KOI8U</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN1</literal></entry>
         <entry><emphasis>LATIN1</emphasis>,
         <literal>MULE_INTERNAL</literal>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN2</literal></entry>
         <entry><emphasis>LATIN2</emphasis>,
         <literal>MULE_INTERNAL</literal>,
         <literal>UTF8</literal>,
         <literal>WIN1250</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN3</literal></entry>
         <entry><emphasis>LATIN3</emphasis>,
         <literal>MULE_INTERNAL</literal>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN4</literal></entry>
         <entry><emphasis>LATIN4</emphasis>,
         <literal>MULE_INTERNAL</literal>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN5</literal></entry>
         <entry><emphasis>LATIN5</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN6</literal></entry>
         <entry><emphasis>LATIN6</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN7</literal></entry>
         <entry><emphasis>LATIN7</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN8</literal></entry>
         <entry><emphasis>LATIN8</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN9</literal></entry>
         <entry><emphasis>LATIN9</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>LATIN10</literal></entry>
         <entry><emphasis>LATIN10</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>MULE_INTERNAL</literal></entry>
         <entry><emphasis>MULE_INTERNAL</emphasis>,
          <literal>BIG5</literal>,
          <literal>EUC_CN</literal>,
          <literal>EUC_JP</literal>,
          <literal>EUC_KR</literal>,
          <literal>EUC_TW</literal>,
          <literal>ISO_8859_5</literal>,
          <literal>KOI8R</literal>,
          <literal>LATIN1</literal> to <literal>LATIN4</literal>,
          <literal>SJIS</literal>,
          <literal>WIN866</literal>,
          <literal>WIN1250</literal>,
          <literal>WIN1251</literal>
         </entry>
        </row>
        <row>
         <entry><literal>SJIS</literal></entry>
         <entry><emphasis>不支持作为一个服务器编码</emphasis>
         </entry>
        </row>
        <row>
         <entry><literal>SQL_ASCII</literal></entry>
         <entry><emphasis>任意（不会执行任何转换）</emphasis>
         </entry>
        </row>
        <row>
         <entry><literal>UHC</literal></entry>
         <entry><emphasis>不支持作为一个服务器编码</emphasis>
         </entry>
        </row>
        <row>
         <entry><literal>UTF8</literal></entry>
         <entry><emphasis>所有支持的编码</emphasis>
         </entry>
        </row>
        <row>
         <entry><literal>WIN866</literal></entry>
         <entry><emphasis>WIN866</emphasis>,
          <literal>ISO_8859_5</literal>,
          <literal>KOI8R</literal>,
          <literal>MULE_INTERNAL</literal>,
          <literal>UTF8</literal>,
          <literal>WIN1251</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN874</literal></entry>
         <entry><emphasis>WIN874</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN1250</literal></entry>
         <entry><emphasis>WIN1250</emphasis>,
          <literal>LATIN2</literal>,
          <literal>MULE_INTERNAL</literal>,
          <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN1251</literal></entry>
         <entry><emphasis>WIN1251</emphasis>,
          <literal>ISO_8859_5</literal>,
          <literal>KOI8R</literal>,
          <literal>MULE_INTERNAL</literal>,
          <literal>UTF8</literal>,
          <literal>WIN866</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN1252</literal></entry>
         <entry><emphasis>WIN1252</emphasis>,
          <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN1253</literal></entry>
         <entry><emphasis>WIN1253</emphasis>,
          <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN1254</literal></entry>
         <entry><emphasis>WIN1254</emphasis>,
          <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN1255</literal></entry>
         <entry><emphasis>WIN1255</emphasis>,
          <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN1256</literal></entry>
         <entry><emphasis>WIN1256</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN1257</literal></entry>
         <entry><emphasis>WIN1257</emphasis>,
          <literal>UTF8</literal>
         </entry>
        </row>
        <row>
         <entry><literal>WIN1258</literal></entry>
         <entry><emphasis>WIN1258</emphasis>,
         <literal>UTF8</literal>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>

    <para>
     要想启用自动字符集转换功能，你必须告诉<productname>PostgreSQL</productname>你想在客户端使用的字符集（编码）。你可以用好几种方法来完成：

     <itemizedlist>
      <listitem>
       <para>
        用<application>psql</application>里的<command>\encoding</command>命令。<command>\encoding</command>允许你动态修改客户端编码。比如，把编码改变为<literal>SJIS</literal>，键入：

<programlisting>
\encoding SJIS
</programlisting>
       </para>
      </listitem>

      <listitem>
       <para>
        <application>libpq</>（见<xref linkend="libpq-control">）中提供函数控制客户端编码。
       </para>
      </listitem>

      <listitem>
       <para>
        使用<command>SET client_encoding TO</command>。

        可以使用这个SQL命令设置客户端编码：

<programlisting>
SET CLIENT_ENCODING TO '<replaceable>value</>';
</programlisting>

        你还可以把标准SQL语法里的<literal>SET NAMES</literal>用于这个目的：

<programlisting>
SET NAMES '<replaceable>value</>';
</programlisting>

        要查询当前客户端编码：

<programlisting>
SHOW client_encoding;
</programlisting>

        要返回到缺省编码：

<programlisting>
RESET client_encoding;
</programlisting>
       </para>
      </listitem>

      <listitem>
       <para>
        使用<envar>PGCLIENTENCODING</envar>。如果在客户端的环境里定义了<envar>PGCLIENTENCODING</envar>环境变量， 那么在与服务器进行了连接后将自动选择客户端编码（这个设置随后可以用上文提到的任何其他方法重载）。
       </para>
      </listitem>

      <listitem>
      <para>
       使用<xref linkend="guc-client-encoding">配置变量。如果<varname>client_encoding</>变量被设置， 那么在与服务器建立了连接之后，这个客户端编码将备自动选定（这个设置随后可以用上文提到的其他方法重载）。
       </para>
      </listitem>

     </itemizedlist>
    </para>

    <para>
     假如无法进行一个特定字符的转换 &mdash; 假如你选的服务器编码是<literal>EUC_JP</literal>而 客户端是<literal>LATIN1</literal>，那么有些日文字符不能转换成<literal>LATIN1</literal> &mdash; 将会报告一个错误。
    </para>

    <para>
     如果客户端字符集定义成了<literal>SQL_ASCII</>，那么编码转换会被禁用， 不管服务器的字符集是什么都一样。和服务器一样，除非你的工作环境全部是 ASCII 数据， 否则使用<literal>SQL_ASCII</>是不明智的。
    </para>
   </sect2>

   <sect2>
    <title>进一步阅读</title>

    <para>
     下面是学习各种类型的编码系统的好资源。

     <variablelist>
      <varlistentry>
       <term><citetitle>CJKV Information Processing: Chinese, Japanese, Korean &amp; Vietnamese Computing</citetitle></term>

       <listitem>
        <para>
         包含对<literal>EUC_JP</literal>、
         <literal>EUC_CN</literal>、<literal>EUC_KR</literal>、
         <literal>EUC_TW</literal>的详细解释。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><ulink url="http://www.unicode.org/"></ulink></term>

       <listitem>
        <para>
         Unicode联盟的网站。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>RFC 3629</term>

       <listitem>
        <para>
         <acronym>UTF</acronym>-8 （8-bit UCS/Unicode转换格式）在这里定义。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </sect2>

  </sect1>

</chapter>

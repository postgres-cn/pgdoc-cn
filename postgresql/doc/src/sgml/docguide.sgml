<!-- doc/src/sgml/docguide.sgml -->

<appendix id="docguide">
 <title>文档</title>

 <para>
  <productname>PostgreSQL</productname>有四种主要的文档格式：

  <itemizedlist>
   <listitem>
    <para>
     纯文本，用于安装前信息
    </para>
   </listitem>
   <listitem>
    <para>
     <acronym>HTML</acronym>，用于在线浏览和参考
    </para>
   </listitem>
   <listitem>
    <para>
     PDF 或 Postscript，用于打印
    </para>
   </listitem>
   <listitem>
    <para>
     手册页，用于快速参考
    </para>
   </listitem>
  </itemizedlist>

  另外，在<productname>PostgreSQL</productname>源码树里面还有许多纯文本风格的<filename>README</filename>文件，它们记录各种实现问题。
 </para>

 <para>
  <acronym>HTML</acronym>文档和手册页是标准发布的一部分并且被默认安装。Postscript 格式的文档可以独立地下载。
 </para>

 <sect1 id="docguide-docbook">
  <title>DocBook</title>
  <para>
   文档源码是用<firstterm>DocBook</firstterm>编写的，它是一种标记语言，表面上和<acronym>HTML</acronym>相似。这两种语言都是 <firstterm>标准通用标记语言</firstterm>（<acronym>SGML</acronym>）的应用，它本质上是描述另外一种语言的语言。在下文中，虽然术语 DocBook 和<acronym>SGML</acronym>都被使用，但在技术上它们是不能互换的。
  </para>

  <para>
  <productname>DocBook</productname>允许作者指定一份技术文档的结构和内容，而不需要关心表现的细节。一份文档风格定义其内容如何呈现为几种最终形式之一。DocBook 由<ulink url="http://www.oasis-open.org">OASIS group</ulink>工作组维护。<ulink url="http://www.oasis-open.org/docbook/">官方 DocBook 站点</ulink>有很好的介绍和参考文档以及一整本 O'Reilly 的书可供你在线阅读。<ulink url="http://newbiedoc.sourceforge.net/metadoc/docbook-guide.html">NewbieDoc Docbook Guide</ulink>非常适合初学者。 <ulink url="http://www.freebsd.org/docproj/docproj.html">FreeBSD 文档项目</ulink>也使用 DocBook 并且有一些很好 的信息，包括一些很值得考虑的风格参考。
  </para>
 </sect1>


 <sect1 id="docguide-toolsets">
  <title>工具集</title>

  <para>
   下面的工具用于处理此文档。如标注所示，有些工具可能是可选的。

   <variablelist>
    <varlistentry>
     <term><ulink url="http://www.oasis-open.org/docbook/">DocBook DTD</ulink></term>
     <listitem>
      <para>
       这是 DocBook 本身的定义。我们目前使用版本 4.2；你不能使用更新或者更早的版本。你需要 DocBook DTD 的<acronym>SGML</acronym>变体，但是要构建手册页还需要相同版本的<acronym>XML</acronym>变体。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><ulink url="http://www.oasis-open.org/cover/ISOEnts.zip">ISO 8879 字符实体</ulink></term>
     <listitem>
      <para>
       这是 DocBook 需要的，但是被独立发布，因为它们由 ISO 维护。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><ulink url="http://wiki.docbook.org/DocBookDssslStylesheetDocs">DocBook DSSSL 样式表</ulink></term>
     <listitem>
      <para>
       这些包含了将 DocBook 源码转换到其他格式（如<acronym>HTML</acronym>）所要用的处理指令。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><ulink url="http://wiki.docbook.org/DocBookXslStylesheets">DocBook XSL 样式表</ulink></term>
     <listitem>
      <para>
       这是另一个将 DocBook 转化为其它格式的样式表。我们当前用它来产生手册页和可选的 HTMLHelp。 你也可以使用这个工具链生产 HTML 或 PDF 输出，但是官方 PostgreSQL 发布会使用 DSSSL 样式表来做这些工作。
      </para>

      <para>
       最低要求的版本当前是 1.74.0。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><ulink url="http://openjade.sourceforge.net">OpenJade</ulink></term>
     <listitem>
      <para>
       这是<acronym>SGML</acronym>处理的基本包。它包含一个<acronym>SGML</acronym>解析器，一个<acronym>DSSSL</acronym>处理器（即使用<acronym>DSSSL</acronym>样式表把<acronym>SGML</acronym>转换成其它格式的程序）以及一系列相关工具。目前<productname>Jade</productname>由 OpenJade 组维护， 而不再由 James Clark 维护。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
    <term><command>xmllint</command>的<ulink url="http://xmlsoft.org/">Libxml2</ulink></term>
     <listitem>
      <para>
       该库和<command>xmllint</command>工具用于处理XML。
       许多开发者已经有<application>Libxml2</application>安装，
       因为当构建PostgreSQL代码时使用。
       注意，<command>xmllint</command>可能需要安装独立分包。
      </para>
     </listitem>
     </varlistentry>

    <varlistentry>
     <term><command>xsltproc</command>的<ulink url="http://xmlsoft.org/XSLT/">Libxslt</ulink></term>
     <listitem>
      <para>
       这是与 XSLT 样式表一起使用的处理工具（像<command>jade</command>是 DSSSL 样式表的处理工具）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><ulink url="http://jadetex.sourceforge.net">JadeTeX</ulink></term>
     <listitem>
      <para>
       如果你需要，你还可以安装<productname>JadeTeX</productname>把<productname>TeX</productname>作为<productname>Jade</productname>的一种格式化后端。<application>JadeTeX</application>可以创建 Postscript 或者<acronym>PDF</acronym>文件（后者带书签）。
      </para>

      <para>
       不过，来自<application>JadeTeX</application>的输出比你从<acronym>RTF</acronym>后端得到的输出要稍差一点。主要的问题区域是表格和各种竖直和水平空白的效果。而且，你还没有机会手工润色输出结果。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
   我们已经在文档中记录了几种安装处理此文档所需的各种工具的方法。它们将在下文中描述。也可能有这些工具的其他打包发布。请向文档邮件列表报告那些包的状态，我们就会在这里包括它们的信息。
  </para>

  <sect2>
   <title>在Fedora，RHEL以及衍生产品上安装</title>

   <para>
    安装所需的包，使用:
<programlisting>
yum install docbook-dtds docbook-style-dsssl docbook-style-xsl libxslt openjade
</programlisting>
   </para>
  </sect2>

  <sect2>
   <title>FreeBSD 安装</title>

   <para>
    FreeBSD 文档计划本身就是 DocBook 的重度使用者，所以在 FreeBSD 中有一整套文档工具的<quote>移植</quote>可用也就不足为奇。要在 FreeBSD 中编译文档，你必须安装下面的移植。
    <itemizedlist>
     <listitem>
      <para><filename>textproc/docbook-sgml</filename></para>
     </listitem>
     <listitem>
      <para><filename>textproc/docbook-xml</filename></para>
     </listitem>
     <listitem>
      <para><filename>textproc/docbook-xsl</filename></para>
     </listitem>
     <listitem>
      <para><filename>textproc/dsssl-docbook-modular</filename></para>
     </listitem>
     <listitem>
      <para><filename>textproc/libxslt</filename></para>
     </listitem>
     <listitem>
      <para><filename>textproc/openjade</filename></para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    你可能也会对来自<filename>/usr/ports/print</filename>（<filename>tex</filename>、<filename>jadetex</filename>）的很多东西有兴趣。
   </para>

   <para>
    你可以在<ulink url="http://www.freebsd.org/doc/en_US.ISO8859-1/books/fdp-primer/tools.html">FreeBSD 文档项目指导</ulink>中找到更多有关 FreeBSD 文档工具的信息。
   </para>
  </sect2>

  <sect2>
   <title>Debian 包</title>

   <para>
    <productname>Debian GNU/Linux</productname>也有一整套可以用的文档工具包。要安装，只需简单地使用：
<programlisting>
apt-get install docbook docbook-dsssl docbook-xsl libxml2-utils openjade1.3 opensp xsltproc
</programlisting>
   </para>
  </sect2>

  <sect2>
   <title>OS X</title>

   <para>
    如果你使用 MacPorts，下面的命令可以帮你设置：
<programlisting>
sudo port install docbook-dsssl docbook-sgml-4.2 docbook-xml-4.2 docbook-xsl libxslt openjade opensp
</programlisting>
   </para>
  </sect2>

  <sect2>
   <title>从源代码手工安装</title>

   <para>
    DocBook 工具的手工安装过程有些复杂，因此如果你有预编译的包，最好还是用它们。我们在这里只描述一个标准的安装，使用合理的标准安装路径，并且没有<quote>花哨</quote>的特性。如果想了解细节，你应该学习相关包的文档，并且阅读<acronym>SGML</acronym>介绍性材料。
   </para>

   <sect3>
    <title>安装 OpenJade</title>

    <procedure>
      <step>
       <para>
        OpenJade 的安装提供了一个 GNU 风格的<literal>./configure; make; make install</literal>编译过程。 你可以在 OpenJade 源代码包里找到详细内容。在一个 nutshell 中：
<synopsis>
./configure --enable-default-catalog=/usr/local/share/sgml/catalog
make
make install
</synopsis>
        确保记住你放置<quote>default catalog</quote>的位置， 后面将需要它。你也可以不用在意这一点，但是后面任何时候使用<application>jade</application>时，你将不得不把环境变量<envar>SGML_CATALOG_FILES</envar>设置为指向该文件（如果 OpenJade 已经安装，并且你想在本地安装剩余的工具链时，这也是个可选的方法）。
       </para>

       <note>
       <para>
        一些用户已经报告过在使用 OpenJade 1.4devel 编译 PDF 时会遇到段错误的问题，错误消息是：
<screen>
openjade:./stylesheet.dsl:664:2:E: flow object not accepted by port; only display flow objects accepted
make: *** [postgres-A4.tex-pdf] Segmentation fault
</screen>
        降级到 OpenJade 1.3 应该会消除这个错误。
       </para>
       </note>

      </step>

      <step id="doc-openjade-install">
       <para>
        此外，你应该从在某个地方的<filename>dsssl</filename>目录中安装<filename>dsssl.dtd</filename>、<filename>fot.dtd</filename>、<filename>style-sheet.dtd</filename>和<filename>catalog</filename>文件，也许是安装到<filename>/usr/local/share/sgml/dsssl</filename>中。最简单的可能就是拷贝整个目录：
<synopsis>
cp -R dsssl /usr/local/share/sgml
</synopsis>
       </para>
      </step>

      <step>
       <para>
        最后，创建文件<filename>/usr/local/share/sgml/catalog</filename>并且加入下面这行：
<programlisting>
CATALOG "dsssl/catalog"
</programlisting>
        这是一个相对路径引用安装文件在step 2。 如果你选择不同的安装布局，请你务必调整它。
        （这是一个引用在<xref linkend="doc-openjade-install">中安装的文件的相对路径。如果你选择你自己的不同的安装布局，记住要调整它）。
       </para>
      </step>
     </procedure>
   </sect3>

   <sect3>
    <title>安装 <productname>DocBook</productname> <acronym>DTD</acronym> 工具箱</title>

    <procedure>
     <step>
      <para>
       获取<ulink url="http://www.docbook.org/sgml/4.2/docbook-4.2.zip">DocBook V4.2 发布</ulink>。
      </para>
     </step>

     <step>
      <para>
       创建目录<filename>/usr/local/share/sgml/docbook-4.2</filename>并切换到其中（准确的路径可能不相干，但是在我们这里遵循的布局中它是合理的）。
<screen>
<prompt>$ </prompt><userinput>mkdir /usr/local/share/sgml/docbook-4.2</userinput>
<prompt>$ </prompt><userinput>cd /usr/local/share/sgml/docbook-4.2</userinput>
</screen>
      </para>
     </step>

     <step>
      <para>
       解压：
<screen>
<prompt>$ </prompt><userinput>unzip -a ...../docbook-4.2.zip</userinput>
</screen>
       （压缩包会把它的文件解包到当前目录中）。
      </para>
     </step>

     <step>
      <para>
       编辑文件<filename>/usr/local/share/sgml/catalog</filename>（或者你在安装中告诉 jade 的任何东西）并且把类似下面一行的内容加入进去：
<programlisting>
CATALOG "docbook-4.2/docbook.cat"
</programlisting>
      </para>
     </step>

     <step>
      <para>
       下载<ulink url="http://www.oasis-open.org/cover/ISOEnts.zip">ISO 8879 字符实体压缩包</ulink>，解压它并且将文件放在与 DocBook 文件相同的目录中：
<screen>
<prompt>$ </prompt><userinput>cd /usr/local/share/sgml/docbook-4.2</userinput>
<prompt>$ </prompt><userinput>unzip ...../ISOEnts.zip</userinput>
</screen>
      </para>
     </step>

     <step>
      <para>
       在 DocBook 和 ISO 文件所在的目录中运行下列命令：
<programlisting>
perl -pi -e 's/iso-(.*).gml/ISO\1/g' docbook.cat
</programlisting>
       （这会修复 DocBook 目录文件中使用的名称和 ISO 字符实体文件的真实名称之间的混合）。
      </para>
     </step>
    </procedure>
   </sect3>

   <sect3>
    <title>安装 DocBook <acronym>DSSSL</acronym> 样式表</title>

    <para>
     要安装样式表，unzip 并 untar 发行包并把它移动到一个合适的位置，例如<filename>/usr/local/share/sgml</filename>（压缩包会自动创建一个子目录）。
<screen>
<prompt>$</prompt> <userinput>gunzip docbook-dsssl-1.<replaceable>xx</>.tar.gz</userinput>
<prompt>$</prompt> <userinput>tar -C /usr/local/share/sgml -xf docbook-dsssl-1.<replaceable>xx</>.tar</userinput>
</screen>
    </para>

    <para>
     <filename>/usr/local/share/sgml/catalog</filename>中常用的目录项也可以被创建：
<programlisting>
CATALOG "docbook-dsssl-1.<replaceable>xx</>/catalog"
</programlisting>
     因为样式表改变得相当频繁，并且有时尝试其他版本也是有益的，<productname>PostgreSQL</productname>没有使用这个目录项。关于如何选择样式表的信息请见<xref linkend="docguide-toolsets-configure">。
    </para>
   </sect3>

   <sect3>
    <title>安装 <productname>JadeTeX</productname></title>

    <para>
     要安装并使用<productname>JadeTeX</productname>，你将需要一个<productname>TeX</productname>和<productname>LaTeX2e</productname>的可工作的安装，包括提供支持的<productname>tools</productname>和<productname>graphics</productname>包、<productname>Babel</productname>、<productname><acronym>AMS</acronym> 字体</productname>和<productname>AMS-LaTeX</productname>、<productname><acronym>PSNFSS</acronym></productname>扩展和<quote>the 35 fonts</quote>的伴侣工具集、生成<productname>PostScript</productname>的<productname>dvips</productname>程序、宏包<productname>fancyhdr</productname>、<productname>hyperref</productname>、<productname>minitoc</productname>、<productname>url</productname>和<productname>ot2enc</productname>。所有这些可以在你临近的<ulink url="http://www.ctan.org"><acronym>CTAN</acronym> 站点</ulink>上找到。<application>TeX</application>基础系统的安装已经超出了本介绍的范围。任何可以运行<application>TeX</application>的系统上应该都有可用的二进制包。
    </para>

    <para>
     在你可以对<productname>PostgreSQL</productname>文档源代码使用<application>JadeTeX</application>之前，你将需要增加<application>TeX</application>的内部数据结构的尺寸。有关于此的细节可以在<application>JadeTeX</application>的安装指南中找到。
    </para>

    <para>
     一旦完成这些，你就可以安装<application>JadeTeX</application>了：
<screen>
<prompt>$</prompt> <userinput>gunzip jadetex-<replaceable>xxx</replaceable>.tar.gz</userinput>
<prompt>$</prompt> <userinput>tar xf jadetex-<replaceable>xxx</replaceable>.tar</userinput>
<prompt>$</prompt> <userinput>cd jadetex</userinput>
<prompt>$</prompt> <userinput>make install</userinput>
<prompt>$</prompt> <userinput>mktexlsr</userinput>
</screen>
     最后两个操作需要以<systemitem>root</systemitem>身份完成。
    </para>

   </sect3>

  </sect2>

  <sect2 id="docguide-toolsets-configure">
   <title>用<command>configure</command>检测</title>

  <para>
   在你能编译文档之前，你需要运行<filename>configure</filename>脚本，就像你在编译<productname>PostgreSQL</productname>程序本身时所作的那样。检查运行末尾附近的输出，应该看起来像这样：
<screen>
<computeroutput>
checking for onsgmls... onsgmls
checking for openjade... openjade
checking for DocBook V4.2... yes
checking for DocBook stylesheets... /usr/share/sgml/docbook/stylesheet/dsssl/modular
checking for collateindex.pl... /usr/bin/collateindex.pl
checking for xsltproc... xsltproc
checking for osx... osx
</computeroutput>
</screen>
   如果没有找到<filename>onsgmls</filename>或<filename>nsgmls</filename>，那么一些后续测试将被跳过。<filename>nsgmls</filename>是 Jade 包的一部分。如果它们没有被自动找到，你可以向 configure 传递环境变量<envar>JADE</envar>和<envar>NSGMLS</envar>来指出这些程序。如果没有找到<quote>DocBook V4.2</quote>，那么你就没有把 DocBook DTD 工具集安装在 Jade 能找到它的地方，或者你还没有正确地设置目录文件。见上文的安装提示。会在多个相关的标准位置查找 DocBook 样式表，但是如果如果你把它们放在某个其他地方，那么你需要设置环境变量<envar>DOCBOOKSTYLE</envar>指向该位置并且之后再运行<filename>configure</filename>。
  </para>

  </sect2>
 </sect1>

 <sect1 id="docguide-build">
  <title>编译文档</title>

  <para>
   一旦你把所有的东西都设置好以后，切换到<filename>doc/src/sgml</filename>目录，并且运行下面小节中介绍的命令之一就可以编译文档（记住使用 GNU make）。
  </para>

  <sect2>
   <title>HTML</title>

   <para>
    要编译文档的<acronym>HTML</acronym>版本：
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make html</userinput>
</screen>
    这也是默认的目标。这个命令的输出将出现在子目录<filename>html</filename>中。
   </para>

   <para>
    要创建正确的索引，编译可能要处理几个不同的阶段。如果你不关心索引，并且只希望校对输出，可以使用<literal>draft</>目标：
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make draft</userinput>
</screen>
   </para>

   <para>
    要把文档编译成单个 HTML 页面，可以使用：
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make postgres.html</userinput>
</screen>
   </para>
 </sect2>

 <sect2>
  <title>手册页</title>

  <para>
   我们使用 DocBook XSL 样式表来把<productname>DocBook</productname>
   <sgmltag>refentry</sgmltag>页转换成适合于手册页的 *roff 输出。和<acronym>HTML</acronym>版本相似，手册页也是以一个 tar 档案被发布的。要创建手册页，使用命令：
<programlisting>
cd doc/src/sgml
make man
</programlisting>
  </para>
 </sect2>

  <sect2>
   <title>通过<application>JadeTeX</application>打印输出</title>

   <para>
    如果你希望使用<application>JadeTex</application>产生一个本文档的可打印形式，你可以使用下列命令之一：

    <itemizedlist>
     <listitem>
      <para>
       要通过<acronym>DVI</acronym>产生 A4 格式的 PostScript：
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make postgres-A4.ps</userinput>
</screen>
       产生 U.S. 信纸格式：
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make postgres-US.ps</userinput>
</screen>
      </para>
     </listitem>

     <listitem>
      <para>
       要创建一个<acronym>PDF</acronym>：
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make postgres-A4.pdf</userinput>
</screen>
       或
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make postgres-US.pdf</userinput>
</screen>
       （当然你也可以从 PostScript 创建一个<acronym>PDF</acronym>版本，但是如果你直接生成<acronym>PDF</acronym>，它会具有超链接和其他增强特性）。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    在使用 JadeTeX 编译 PostgreSQL 文档时，你将可能需要增大某些 TeX 的内部参数。可以在文件<filename>texmf.cnf</filename>中设置。在编写本文当时下列的设置是可以工作的：
<programlisting>
hash_extra.jadetex  = 200000
hash_extra.pdfjadetex  = 200000
pool_size.jadetex = 2000000
pool_size.pdfjadetex = 2000000
string_vacancies.jadetex = 150000
string_vacancies.pdfjadetex = 150000
max_strings.jadetex = 300000
max_strings.pdfjadetex = 300000
save_size.jadetex = 15000
save_size.pdfjadetex = 15000
</programlisting>
   </para>

  </sect2>

  <sect2>
   <title>溢出文本</title>

   <para>
    有时文本对于打印边距会太宽，并且在极限情况中对于打印页面都会太宽，例如无回卷的文本、很宽的表格。过宽的文本会在 TeX 日志输出文件中产生<quote>Overfull hbox</quote>消息，例如<filename>postgres-US.log</>或<filename>postgres-A4.log</>。在一英寸中有 72 个点，因此任何被报告为超过 72 个点而过宽的东西都将可能无法放在一个打印页中（假设边距为一英寸）。要寻找导致溢出的<acronym>SGML</acronym>文本，找到提到上述溢出消息的第一页的页号，如<literal>[50 ###]</>（第 50 页），并且在<acronym>PDF</acronym>文件中查看该页号后的页面（如第 51 页），从中找到溢出文本并且相应地调整<acronym>SGML</acronym>。
   </para>
  </sect2>

  <sect2>
   <title>通过<acronym>RTF</acronym>打印输出</title>

   <para>
    你也可以通过把文档转换到<acronym>RTF</acronym>并且使用一个办公套件应用小幅的格式更正来创建一个<productname>PostgreSQL</productname>文档的可打印版本。基于特定办公套件的能力，你可以把文档转换为<acronym>PDF</acronym>的 PostScript。下面的过程展示了使用<productname>Applixware</productname>进行这种处理：
   </para>

   <note>
    <para>
     It appears that current versions of the 似乎当前版本的<productname>PostgreSQL</productname>文档会触发 OpenJade 的某些缺陷或者超过它的一些尺寸限制。如果<acronym>RTF</acronym>版本的编译处理挂起很长时间并且输出文件大小仍然为 0，那么你可能遇到了那个问题（但是记住一次正常的编译需要 5 到 10 分钟，因此不要太快中止它）。
    </para>
   </note>

   <procedure>
    <title><productname>Applixware</productname> <acronym>RTF</acronym> Cleanup</title>

    <para>
     <application>OpenJade</application>忽略为正文文本指定一个默认风格。在过去，这个未被诊断的问题会导致表格内容生成的长时间处理。不过，在<productname>Applixware</productname>兄弟们的大力帮助下，这个症状已经被诊断出来并且已经有可用的解决方法。
    </para>

    <step performance="required">
     <para>
      通过输入以下命令生成<acronym>RTF</acronym>版本：
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make postgres.rtf</userinput>
</screen>
     </para>
    </step>

    <step performance="required">
     <para>
      修复 RTF 文件来正确地指定所有风格，特别是默认风格。如果文档包含<sgmltag>refentry</sgmltag>节，我们也必须替换将前一段联系到当前段落的格式化提示，并且将当前段落联系到下一个段落。一个小工具<command>fixrtf</command>（<filename>doc/src/sgml</filename>中可用）可以用来完成这些修复：
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>./fixrtf --refentry postgres.rtf</userinput>
</screen>
     </para>

     <para>
      该脚本增加<literal>{\s0 Normal;}</literal>作为文档中的零号风格。根据<productname>Applixware</productname>，RTF 标准将禁止增加一个隐式的零号风格，尽管微软的 Word 可以处理这种情况。为了修复<sgmltag>refentry</sgmltag>节，该脚本用<literal>\keep</literal>标记替换<literal>\keepn</literal>标记。
     </para>
    </step>

    <step performance="required">
     <para>
      在<productname>Applixware Words</productname>中打开一个新文档并导入<acronym>RTF</acronym>文件。
     </para>
    </step>

    <step performance="required">
     <para>
      使用<productname>Applixware</productname>生成一个内容的新表（TOC）。
     </para>

     <substeps>
      <step>
       <para>
        从第一行的第一个字符到最后一行的最后一个字符，选择现有的 ToC 行。
       </para>
      </step>

      <step>
       <para>
        使用<menuchoice><guimenu>Tools</guimenu><guisubmenu>Book
        Building</guisubmenu><guimenuitem>Create Table of
        Contents</guimenuitem></menuchoice>建立一个新的 ToC。选择前三级 header 用于包含在 ToC中。这将把 RTF 中现有的导入行替换为一个本地的<productname>Applixware</productname> ToC。
       </para>
      </step>

      <step>
       <para>
        通过使用<menuchoice><guimenu>Format</guimenu><guimenuitem>Style</guimenuitem></menuchoice>调整 ToC 格式，选择三个 ToC 风格中的每一个并且为<literal>First</literal>和<literal>Left</literal>调整缩进。使用下列值：

        <informaltable>
         <tgroup cols="3">
          <thead>
           <row>
            <entry>风格</entry>
            <entry>First 缩进（英寸）</entry>
            <entry>Left 缩进（英寸）</entry>
           </row>
          </thead>

          <tbody>
           <row>
            <entry><literal>TOC-Heading 1</literal></entry>
            <entry><literal>0.4</literal></entry>
            <entry><literal>0.4</literal></entry>
           </row>

           <row>
            <entry><literal>TOC-Heading 2</literal></entry>
            <entry><literal>0.8</literal></entry>
            <entry><literal>0.8</literal></entry>
           </row>

           <row>
            <entry><literal>TOC-Heading 3</literal></entry>
            <entry><literal>1.2</literal></entry>
            <entry><literal>1.2</literal></entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
       </para>
      </step>
     </substeps>
    </step>

    <step performance="required">
     <para>
      遍历文档：

      <itemizedlist>
       <listitem>
        <para>
         调整分页。
        </para>
       </listitem>

       <listitem>
        <para>
         调整表格列宽。
        </para>
       </listitem>
      </itemizedlist>
     </para>
    </step>

    <step performance="required">
     <para>
      将该 ToC 中的例子和图表部分中的右对齐页号替换为正确的值。这只需要几分钟。
     </para>
    </step>

    <step performance="optional">
     <para>
       如果索引节为空，则从文档中删除索引节。
     </para>
    </step>

    <step performance="required">
     <para>
       重新生成并调整内容的表格。
     </para>

      <substeps>
       <step>
        <para>
         选择  ToC 域。
        </para>
       </step>

       <step>
        <para>
         选择<menuchoice><guimenu>Tools</guimenu><guisubmenu>Book
         Building</guisubmenu><guimenuitem>Create Table of
         Contents</guimenuitem></menuchoice>。
        </para>
       </step>

       <step>
        <para>
         通过选择<menuchoice><guimenu>Tools</guimenu><guisubmenu>Field
         Editing</guisubmenu><guimenuitem>Unprotect</guimenuitem></menuchoice>解除 ToC 绑定。
        </para>
       </step>

       <step>
        <para>
         删除 ToC 中的第一行，它是用于 ToC 本身的项。
         ToC itself.
        </para>
       </step>
      </substeps>
    </step>

    <step performance="required">
     <para>
      把文档保存为本地<productname>Applixware
      Words</productname>格式来使最后一分钟的编辑更容易。
     </para>
    </step>

    <step performance="required">
     <para>
      把文档<quote>打印</quote>到一个 PostScript 格式的文件。
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2>
   <title>Plain Text Files</title>

   <para>
    安装指导也被发布为纯文本，它们被用于那些没有好的阅读工具的情况。<filename>INSTALL</filename>文件对应于<xref linkend="installation">，但针对不同的环境做了小幅修改。要重建该文件，切换到目录<filename>doc/src/sgml</filename>并输入<userinput>make INSTALL</userinput>。
   </para>

   <para>
    在过去，发行注记和回归测试指导也被作为纯文本发布，但是事实上已经没有这样做了。
   </para>
  </sect2>

  <sect2>
   <title>语法检查</title>

   <para>
    便以文档可能会花很长时间。但是有办法只检查文档中的语法，这个过程只需要数秒：
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make check</userinput>
</screen>
   </para>
  </sect2>
 </sect1>


 <sect1 id="docguide-authoring">
  <title>文档写作</title>

   <para>
    <acronym>SGML</acronym>和<productname>DocBook</productname>没有受到开源写作工具的过度影响。最常用的工具集是带有适当编辑模式的<productname>Emacs</productname>/<productname>XEmacs</productname>编辑器。在某些系统上这些工具通常以完全安装的方式提供。
   </para>

   <sect2>
    <title>Emacs/PSGML</title>

    <para>
     <productname>PSGML</productname>是编辑<acronym>SGML</acronym>文档最常用也是最强大的模式。配置正确时，它将允许你使用<application>Emacs</application>来插入标签并且检查标记的一致性。你也可以把它用于<acronym>HTML</acronym>。可以从<ulink url="http://www.lysator.liu.se/projects/about_psgml.html">PSGML 网站</ulink>找到下载、安装指导和详细文档。
    </para>

    <para>
     There is one important thing to note with
     关于<productname>PSGML</productname>有一件重要的事情需要注意：它的作者假定你的主<acronym>SGML</acronym> <acronym>DTD</acronym>目录是<filename>/usr/local/lib/sgml</filename>。如果你采用本章的例子中的做法使用<filename>/usr/local/share/sgml</filename>，你必须对此进行补偿，要么设置<envar>SGML_CATALOG_FILES</envar>环境变量，要么自定义你的<productname>PSGML</productname>安装（其手册会告诉你怎么做）。
    </para>

    <para>
     把下面的东西放在你的<filename>~/.emacs</filename>环境文件中（把路径名调整为适合于你的系统）：

<programlisting>
; ********** for SGML mode (psgml)

(setq sgml-omittag t)
(setq sgml-shorttag t)
(setq sgml-minimize-attributes nil)
(setq sgml-always-quote-attributes t)
(setq sgml-indent-step 1)
(setq sgml-indent-data t)
(setq sgml-parent-document nil)
(setq sgml-exposed-tags nil)
(setq sgml-catalog-files '("/usr/local/share/sgml/catalog"))

(autoload 'sgml-mode "psgml" "Major mode to edit SGML files." t )
</programlisting>

     并且在同一个文件中在现有<varname>auto-mode-alist</varname>定义中为<acronym>SGML</acronym>增加一个项：
<programlisting>
(setq
  auto-mode-alist
  '(("\\.sgml$" . sgml-mode)
   ))
</programlisting>
    </para>

    <para>
     你可能发现当使用<productname>PSGML</productname>时，一种在书籍各部分独立文件上工作的舒服的方法是在编辑它们时插入一个适当的<literal>DOCTYPE</literal>声明。如果你在这个源代码上工作，例如是附录章，那么你可以指定文档为一个 DocBook 文档的一个<quote>appendix</quote>实例，通过将其第一行变成：

<programlisting>
&lt;!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook V4.2//EN"&gt;
</programlisting>

     这意味着任何和所有读取<acronym>SGML</acronym>的东西将会回答正确，并且我可以用<command>nsgmls -s docguide.sgml</command>验证该文档（但是在编译整个文档集之前你需要去掉那一行）。
    </para>
   </sect2>

   <sect2>
    <title>其他 Emacs 模式</title>

    <para>
     <productname>GNU Emacs</productname>带有一种不同的<acronym>SGML</acronym>模式，但是它不如<productname>PSGML</productname>那么强大，但是它更直观并且更轻量级。同样，它提供很有用的语法高亮（字体锁）。<filename>src/tools/editors/emacs.samples</filename>包含用于这种模式的设置实例。
    </para>

    <para>
     Norm Walsh 为 DocBook 专门提供了一种<ulink url="http://nwalsh.com/emacs/docbookide/index.html">主模式</ulink>，它也有字体锁和一些减少录入的特性。
    </para>
   </sect2>

 </sect1>


 <sect1 id="docguide-style">
  <title>样式指导</title>

  <sect2>
   <title>参考页</title>

   <para>
    参考页应该遵循一种标准布局。这允许用户更快找到想要的信息，并且它也鼓励作者记录一个命令的所有相关方面。不止在<productname>PostgreSQL</productname>参考页中需要一致性，操作系统或其他包提供的参考页也需要。因此人们开发了下列方针。它们的大部分与由多个操作系统建立的类似方针保持一致。
   </para>

   <para>
    描述可执行命令的参考页应该包含以下的小节，并且是按照介绍的顺序。不适用的小节可以被忽略。额外的顶层小节应该只被用在特殊的环境下；通常那些信息属于<quote>Usage</quote>小节。

    <variablelist>
     <varlistentry>
      <term>名称</term>
      <listitem>
       <para>
        这个小节是自动生成的。它包含命令名称和对其功能的一个半句话摘要。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>概要</term>
      <listitem>
       <para>
        这个小节包含该命令的语法表。概要通常应该不列出每个命令行选项；那些东西由后续小节介绍。概要应该列出命令行的主要部分，比如输入和输出文件会到哪里去。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>描述</term>
      <listitem>
       <para>
        解释命令干什么的几个段落。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>选项</term>
      <listitem>
       <para>
        一个描述每一个命令行选项的列表。如果有很多选项，可以使用子节。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>退出状态</term>
      <listitem>
       <para>
        如果程序用 0 表示成功，非零表示失败，那么你不需要为此写文档。如果在每个非零退出码有不同的含义，那么在这里列出它们。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>用法</term>
      <listitem>
       <para>
        描述程序的任意子语言或者运行时接口。如果程序不是交互式的，那么本节通常可以省略。否则，本节是全方位描述运行时特性的地方。如果需要可以使用子小节。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>环境</term>
      <listitem>
       <para>
        列出所有程序可能使用的环境变量。尽量完整；即使是那些看起来很琐碎的变量，比如<envar>SHELL</envar>都可能让读者感兴趣。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>文件</term>
      <listitem>
       <para>
        列出程序可能隐式访问的任何文件。也就是说，不要列出在命令行上指定的输入和输出文件，但是要列出配置文件等。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>诊断</term>
      <listitem>
       <para>
        解释程序可能生成的任何不正常的输出。避免列出所有可能的错误消息。 这样做工作量很大但没有太多实际用处。但是如果错误消息有一种用户可以解析的标准格式，那么它应当在这里解释。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>注意</term>
      <listitem>
       <para>
        任何放在其他地方都不合适的东西可以放在这里，但是特别是缺陷、实现瑕疵、安全考虑、兼容性问题。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>例子</term>
      <listitem>
       <para>
        例子
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>历史</term>
      <listitem>
       <para>
        如果在程序的历史上有一些主要的里程碑，那么可以在这里列出。通常，这个小节可以被省略。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>作者</term>
      <listitem>
       <para>
        作者（只在 contrib 节中使用）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>另见</term>
      <listitem>
       <para>
        交叉引用，按照下面的顺序列出：其它<productname>PostgreSQL</productname>命令参考页、<productname>PostgreSQL</productname> SQL命令参考页、引用<productname>PostgreSQL</productname>手册、 其它参考页（如操作系统、其它包）、其它文档。在同一组中的项按照字母表顺序列出。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

   <para>
    描述 SQL 命令的参考页应该包含下列小节：名称、概要、描述、参数、输出、注意、例子、兼容性、历史、另见。 用法、诊断、注意、例子、兼容性、历史、又见。参数小节类似选项小节， 但是在选择哪些子句是可列出的方面有更多自由。输出小节只有在命令返回非命令结束标签的东西时才需要。兼容性小节应该解释此命令遵循 SQL 标准的程度，或者它兼容哪种其它数据库系统。SQL 命令的另见小节应该在交叉引用其它程序之前列出 SQL 命令。
   </para>
  </sect2>

 </sect1>
</appendix>

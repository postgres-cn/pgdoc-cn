<!-- doc/src/sgml/bki.sgml -->

<chapter id="bki">
 <title><acronym>BKI</acronym>后端接口</title>

 <para>
  后端接口（<acronym>BKI</acronym>）文件是一种由特殊语言写成的脚本，它可以被运行在<quote>自举</quote>模式的<productname>PostgreSQL</productname>后端所理解。自举模式允许从零开始创建系统目录并填充之，而普通SQL命令的执行要求系统目录已经存在。因此<acronym>BKI</acronym>文件可以被用来在第一时间创建数据库系统（除此之外它们可能没有别的用处）。
 </para>

 <para>
  在创建一个新的数据库集簇时，<application>initdb</application>使用一个<acronym>BKI</acronym>文件来完成它的一部分工作。<application>initdb</application>所使用的输入文件是在编译和安装<productname>PostgreSQL</productname>过程中，由一个名为<filename>genbki.pl</filename>的程序创建的，它读入源代码树中<filename>src/include/catalog/</>目录下的某些特殊格式的C头文件并创建该文件。创建好的<acronym>BKI</acronym>文件名为<filename>postgres.bki</filename>，通常被安装在安装树的<filename>share</filename>子目录中。
 </para>

 <para>
  相关信息可以在<application>initdb</application>的文档中找到。
 </para>

 <sect1 id="bki-format">
  <title><acronym>BKI</acronym>文件格式</title>

  <para>
   本节描述<productname>PostgreSQL</productname>后端如何解释<acronym>BKI</acronym>文件。结合一份实际的<filename>postgres.bki</filename>文件，本节的内容将会更容易理解。
  </para>

  <para>
   <acronym>BKI</acronym>输入由一个命令序列组成。根据命令的语法，命令由一系列记号构成。记号之间通常由空白分隔，但是在没有歧义时也可不用。没有什么特殊的命令分隔符；语法上无法属于前一命令的记号将开始新的一条命令（通常你会把一个新命令放在一个新行上以保持清晰）。 记号可以是某些关键字、特殊字符（圆括弧，逗号等）、数字或者双引号字串。 所有东西都是大小写敏感的。
  </para>

  <para>
   以<literal>#</literal>开头的行会被忽略。
  </para>

 </sect1>

 <sect1 id="bki-commands">
  <title><acronym>BKI</acronym>命令</title>

  <variablelist>
   <varlistentry>
    <term>
     <literal>create</>
     <replaceable class="parameter">tablename</replaceable>
     <replaceable class="parameter">tableoid</replaceable>
     <optional><literal>bootstrap</></optional>
     <optional><literal>shared_relation</></optional>
     <optional><literal>without_oids</></optional>
     <optional><literal>rowtype_oid</> <replaceable>oid</></optional>
     (<replaceable class="parameter">name1</replaceable> =
     <replaceable class="parameter">type1</replaceable>
     <optional>FORCE NOT NULL | FORCE NULL </optional> <optional>,
     <replaceable class="parameter">name2</replaceable> =
     <replaceable class="parameter">type2</replaceable>
     <optional>FORCE NOT NULL | FORCE NULL </optional>,
     ...</optional>)
    </term>

    <listitem>
     <para>
      创建一个叫做<replaceable class="parameter">tablename</replaceable>，OID为<replaceable class="parameter">tableoid</replaceable>的表，它的列在圆括弧中给出。
     </para>

     <para>
      <filename>bootstrap.c</>直接支持下列列类型：<type>bool</type>、<type>bytea</type>、<type>char</type>（1 字节）、<type>name</type>、<type>int2</type>、<type>int4</type>、<type>regproc</type>、<type>regclass</type>、<type>regtype</type>、<type>text</type>、<type>oid</type>、<type>tid</type>、<type>xid</type>、<type>cid</type>、<type>int2vector</type>、<type>oidvector</type>、<type>_int4</type>（数组）、<type>_text</type>（数组）、<type>_oid</type>（数组）、<type>_char</type>（数组）、<type>_aclitem</type>（数组）。尽管我们可以创建包含其它类型列的表， 但是我们只有在创建完<structname>pg_type</>并且填充了合适的记录之后才行（这实际上就意味着在自举表中，只能使用这些列类型，而非自举目录可以使用任意内置类型）。
     </para>

     <para>
      如果声明了<literal>bootstrap</>，那么该表将只在磁盘上创建；不会向<structname>pg_class</structname>、<structname>pg_attribute</structname>等表里面输入任何与该表相关的东西。因此这样的表将无法被普通的SQL操作访问，直到那些记录被用硬办法（用<literal>insert</>命令）建立。 这个选项用于创建<structname>pg_class</structname>等表本身。
     </para>

     <para>
      如果声明了<literal>shared_relation</>，那么表就作为共享表创建。除非声明了<literal>without_oids</>，否则表将会有OID。表的行类型OID（<structname>pg_type</>的OID）可以有选择性地通过<literal>rowtype_oid</>子句指定。如果没有指定，会为之自产生一个OID（如果<literal>bootstrap</>被指定，则<literal>rowtype_oid</>是无效的，但不管怎样它还是被写在了文档中）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>open</> <replaceable class="parameter">tablename</replaceable>
    </term>

    <listitem>
     <para>
      打开名为<replaceable class="parameter">tablename</replaceable>的表进行数据插入。任何当前打开的表将被关闭。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>close</> <optional><replaceable class="parameter">tablename</replaceable></optional>
    </term>

    <listitem>
     <para>
      关闭打开着的表。给出的表名用于交叉检查，但并不是必须的。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>insert</> <optional><literal>OID =</> <replaceable class="parameter">oid_value</replaceable></optional> <literal>(</> <replaceable class="parameter">value1</replaceable> <replaceable class="parameter">value2</replaceable> ... <literal>)</>
    </term>

    <listitem>
     <para>
      用<replaceable class="parameter">value1</replaceable>、<replaceable class="parameter">value2</replaceable> 等作为列值以及<replaceable class="parameter">oid_value</replaceable>作为其 OID向打开的表插入一条新记录。如果<replaceable class="parameter">oid_value</replaceable>为零（0）或者该子句被忽略而表可以具有OID，则会为之赋予下一个可用的OID。
     </para>

     <para>
      NULL 可以用特殊的关键字<literal>_null_</literal>指定。包含空白的值必须用双引号引用。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>declare</> <optional><literal>unique</></optional>
     <literal>index</> <replaceable class="parameter">indexname</replaceable>
     <replaceable class="parameter">indexoid</replaceable>
     <literal>on</> <replaceable class="parameter">tablename</replaceable>
     <literal>using</> <replaceable class="parameter">amname</replaceable>
     <literal>(</> <replaceable class="parameter">opclass1</replaceable>
     <replaceable class="parameter">name1</replaceable>
     <optional>, ...</optional> <literal>)</>
    </term>

    <listitem>
     <para>
      在名为<replaceable class="parameter">tablename</replaceable>的表上用<replaceable class="parameter">amname</replaceable>访问方法创建一个OID为<replaceable class="parameter">indexoid</replaceable>的名为<replaceable class="parameter">indexname</replaceable>的索引。 索引的域被称为<replaceable class="parameter">name1</replaceable>、<replaceable class="parameter">name2</replaceable>等，而使用的操作符类分别是<replaceable class="parameter">opclass1</replaceable>, <replaceable class="parameter">opclass2</replaceable>等。 该命令将会创建索引文件和适当的系统目录项，但是索引内容不会被此命令初始化。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>declare toast</>
     <replaceable class="parameter">toasttableoid</replaceable>
     <replaceable class="parameter">toastindexoid</replaceable>
     <literal>on</> <replaceable class="parameter">tablename</replaceable>
    </term>

    <listitem>
     <para>
      为名为<replaceable class="parameter">tablename</replaceable>的表创建一个TOAST表。该TOAST表将被赋予由<replaceable class="parameter">toasttableoid</replaceable>表示的OID，且它的索引将被赋予由<replaceable class="parameter">toastindexoid</replaceable>表示的OID。和<literal>declare index</>一样，索引的填充将被推迟。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>build indices</></term>

    <listitem>
     <para>
      填充之前声明的索引。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

 </sect1>

 <sect1 id="bki-structure">
  <title>自举<acronym>BKI</acronym>文件的结构</title>

  <para>
   在<literal>open</>命令打开某个表时，它需要系统中已经存在一些表并且其中要具有与被打开表相关的项，在这些先决条件满足之前，<literal>open</>命令不能被使用（这些至少应该存在的表是<structname>pg_class</>、<structname>pg_attribute</>、<structname>pg_proc</>和<structname>pg_type</>）。 为了允许这些表本身被填充，带着<literal>bootstrap</>选项的<literal>create</>将会隐式打开所创建的表用于插入数据。
  </para>

  <para>
   同样，<literal>declare index</>和<literal>declare toast</>命令也必须在相关系统目录被创建和填充之后才能被使用。
  </para>

  <para>
   因此，<filename>postgres.bki</filename>文件的结构必须是：
   <orderedlist>
    <listitem>
     <para>
      <literal>create bootstrap</>其中一个关键表
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>insert</>数据，这些数据至少要能描述这些关键表
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>close</>
     </para>
    </listitem>
    <listitem>
     <para>
      重复创建其他关键表。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>create</>（不带<literal>bootstrap</>）一个非关键表
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>open</>
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>insert</>需要的数据
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>close</>
     </para>
    </listitem>
    <listitem>
     <para>
      重复创建其他非关键表。
     </para>
    </listitem>
    <listitem>
     <para>
      定义索引和TOAST表。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>构建索引</>
     </para>
    </listitem>
   </orderedlist>
  </para>

  <para>
   无疑还有其它未被文档记录的顺序依赖关系。
  </para>
 </sect1>

 <sect1 id="bki-example">
  <title>例子</title>

  <para>
   下面的命令集将创建名为<literal>test_table</literal>的表，它有两个列<literal>cola</literal>和<literal>colb</literal>，类型分别为<type>int4</type>和<type>text</type>的表，且表的OID为420， 然后向该表插入两行：
<programlisting>
create test_table 420 (cola = int4, colb = text)
open test_table
insert OID=421 ( 1 "value1" )
insert OID=422 ( 2 _null_ )
close test_table
</programlisting>
  </para>
 </sect1>
</chapter>

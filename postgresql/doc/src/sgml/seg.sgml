<!-- doc/src/sgml/seg.sgml -->

<sect1 id="seg" xreflabel="seg">
 <title>seg</title>

 <indexterm zone="seg">
  <primary>seg</primary>
 </indexterm>

 <para>
  这个模块为表示线段或者浮点区间实现了一种数据类型<type>seg</>。
  <type>seg</>可以表示区间端点中的不确定性，这使得它对表达实验室测量特别有用。
 </para>

 <sect2>
  <title>原理</title>

  <para>
   度量的几何结构通常比一个数字连续区中的一个点更复杂。
   一个度量通常是具有一些模糊限制的连续区的一个分段。
   由于不确定性和随机性，也因为被度量的值可能天然地就是
   一个指示某种情况的区间（例如一种蛋白质的稳态的温度范围），
   度量呈现为区间的形式。
  </para>

  <para>
   只用常识，我们就知道将这类数据存储为区间比存储为数字对更加方便。
   实际上，这样做在大部分应用中也更有效。
  </para>

  <para>
   还是根据常识，限度的模糊性意味着使用传统的数字数据类型会导致信息丢失。
   试想：你的仪器读到 6.50，并且你把这个读数输入到数据库。在你取出它时会
   得到什么？看看：

<screen>
test=> select 6.50 :: float8 as "pH";
 pH
---
6.5
(1 row)
</screen>

   在度量世界里，6.50 和 6.5 并不相同。有时候它们可能很不同。实验者们通常会
   写下（并且发表）他们信任的数字。6.50 实际上是一个模糊的区间，它被包含于
   一个更大的而且更模糊的区间 6.5 中，它们的中心点（可能）是它们唯一共享的
   公共特征。我们绝对不希望这类不同的数据项表现得相同。
  </para>

  <para>
   结论？一种能够记录具有任意可变精度的区间的限度的特殊数据类型是很好的。
   这种意义下，每一个数据元素都记录其自身的精度。
  </para>

  <para>
   来看看这个：

<screen>
test=> select '6.25 .. 6.50'::seg as "pH";
          pH
------------
6.25 .. 6.50
(1 row)
</screen>
  </para>
 </sect2>

 <sect2>
  <title>语法</title>

  <para>
   一个区间的外部表达由通过范围操作符（<literal>..</literal>或者<literal>...</literal>）连接的一个或者两个浮点数构成。
   或者，它也可以被指定为一个中心点加上或者减去一个偏差值。
   也能够存储可选的确定性指示符（<literal>&lt;</literal>、
   <literal>&gt;</literal>或者<literal>~</literal>）。不过，所有内建操作符会忽略确定性指示符。
   <xref linkend="seg-repr-table">给出了所有允许的表达形式，<xref linkend="seg-input-examples">展示了一些例子。
  </para>

  <para>
   在<xref linkend="seg-repr-table">中，<replaceable>x</>、<replaceable>y</>和<replaceable>delta</>表示浮点数。
   <replaceable>x</>和<replaceable>y</>可以前置一个确定性指示符，但是<replaceable>delta</>不行。
  </para>

  <table id="seg-repr-table">
   <title><type>seg</>外部表达</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal><replaceable>x</></literal></entry>
      <entry>单一值（零长度区间）
      </entry>
     </row>
     <row>
      <entry><literal><replaceable>x</> .. <replaceable>y</></literal></entry>
      <entry>从<replaceable>x</>到<replaceable>y</>的区间
      </entry>
     </row>
     <row>
      <entry><literal><replaceable>x</> (+-) <replaceable>delta</></literal></entry>
      <entry>从<replaceable>x</> - <replaceable>delta</>到
      <replaceable>x</> + <replaceable>delta</>的区间
      </entry>
     </row>
     <row>
      <entry><literal><replaceable>x</> ..</literal></entry>
      <entry>下界为<replaceable>x</>的开区间
      </entry>
     </row>
     <row>
      <entry><literal>.. <replaceable>x</></literal></entry>
      <entry>上界为<replaceable>x</>的开区间
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="seg-input-examples">
   <title>合法<type>seg</>输入的例子</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal>5.0</literal></entry>
      <entry>
       创建一个零长度的段（一个点）
      </entry>
     </row>
     <row>
      <entry><literal>~5.0</literal></entry>
      <entry>
       创建一个零长度的段并且在数据中记录<literal>~</>。
       <literal>~</literal>会被<type>seg</>操作忽略，但是会被保留为一个注释。
      </entry>
     </row>
     <row>
      <entry><literal>&lt;5.0</literal></entry>
      <entry>
       在 5.0 创建一个点。<literal>&lt;</literal>会被忽略，但是被保留为一个注释。
      </entry>
     </row>
     <row>
      <entry><literal>&gt;5.0</literal></entry>
      <entry>
       在 5.0 创建一个点。<literal>&gt;</literal>会被忽略，但是被保留为一个注释。
      </entry>
     </row>
     <row>
      <entry><literal>5(+-)0.3</literal></entry>
      <entry>
        创建一个区间<literal>4.7 .. 5.3</literal>。注意<literal>(+-)</>标记不会被保留。
      </entry>
     </row>
     <row>
      <entry><literal>50 .. </literal></entry>
      <entry>大于或等于 50 的所有东西</entry>
     </row>
     <row>
      <entry><literal>.. 0</literal></entry>
      <entry>小于或等于 0 的所有东西</entry>
     </row>
     <row>
      <entry><literal>1.5e-2 .. 2E-2 </literal></entry>
      <entry>创建一个区间<literal>0.015 .. 0.02</literal></entry>
     </row>
     <row>
      <entry><literal>1 ... 2</literal></entry>
      <entry>
       与<literal>1...2</literal>、<literal>1 .. 2</literal>或者<literal>1..2</literal>相同
       （范围操作符周围的空格会被忽略）
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   由于<literal>...</>被广泛地用在数据源中，它被允许作为<literal>..</>的一种替代。
   不幸地是，这会带来解析歧义：分不清<literal>0...23</>的上界是<literal>23</>或者<literal>0.23</>。
   通过要求<type>seg</>输入中所有数字的小数点前至少有一位可以解决这个问题。
  </para>

  <para>
   作为一种完整性检查，<type>seg</>会拒绝下界大于上界的区间，例如<literal>5 .. 2</>。
  </para>

 </sect2>

 <sect2>
  <title>精度</title>

  <para>
   <type>seg</>值在内部被存储为一对 32 位浮点数。这意味着具有超过 7 个有效位的数字会被截断。
  </para>

  <para>
   具有 7 个或者更少有效位的数字会保留它们的原有精度。即，如果你的查询返回 0.00，
   你可以确信拖尾的零不是人工造成的，它们反映了原始数据的精度。前导零的数量不影响精度：
   值 0.0067 被认为只有 2 个有效位。
  </para>
 </sect2>

 <sect2>
  <title>用法</title>

  <para>
   <filename>seg</>模块包括了用于<type>seg</>值的一个 GiST 索引操作符类。
   该 GiST 操作符类所支持的操作符在<xref linkend="seg-gist-operators">中展示。
  </para>

  <table id="seg-gist-operators">
   <title>Seg GiST 操作符</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>操作符</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>[a, b] &lt;&lt; [c, d]</literal></entry>
      <entry>[a, b] 完全位于 [c, d] 左边。即如果b &lt; c 则 [a,
       b] &lt;&lt; [c, d] 为真，否则为假。</entry>
     </row>

     <row>
      <entry><literal>[a, b] &gt;&gt; [c, d]</literal></entry>
      <entry>[a, b] 完全位于 [c, d] 右边。即如果b &gt; c 则 [a,
       b] &gt;&gt; [c, d] 为真，否则为假。</entry>
     </row>

     <row>
      <entry><literal>[a, b] &amp;&lt; [c, d]</literal></entry>
      <entry>重叠或者是在左边 &mdash; 这最好读作
       <quote>不超过右边</quote>。当 b &lt;= d 时为真。</entry>
     </row>

     <row>
      <entry><literal>[a, b] &amp;&gt; [c, d]</literal></entry>
      <entry>重叠或者是在右边 &mdash; 这最好读作
       <quote>不超过左边</quote>。当 a &gt;= c 时为真。</entry>
     </row>

     <row>
      <entry><literal>[a, b] = [c, d]</literal></entry>
      <entry>相等 &mdash; 段 [a, b] 和 [c, d] 是一样的，也就是 a = c 并且 b = d。</entry>
     </row>

     <row>
      <entry><literal>[a, b] &amp;&amp; [c, d]</literal></entry>
      <entry>段 [a, b] 和 [c, d] 重叠。</entry>
     </row>

     <row>
      <entry><literal>[a, b] @&gt; [c, d]</literal></entry>
      <entry>段 [a, b] 包含段 [c, d]，也就是
       a &lt;= c 并且 b &gt;= d。</entry>
     </row>

     <row>
      <entry><literal>[a, b] &lt;@ [c, d]</literal></entry>
      <entry>段 [a, b] 被包含在 [c, d] 中，也就是
       &gt;= c 并且 b &lt;= d。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   （在 PostgreSQL 8.2 之前，包含操作符 <literal>@&gt;</> 和 <literal>&lt;@</> 分别被
   称为<literal>@</> 和 <literal>~</>。这些名称仍然可用，但是已被废弃并且最终会消失。
   注意旧的名称与核心几何数据类型之前遵循的习惯相反！）
  </para>

  <para>
   也提供了标准的 B-树操作符，例如

  <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>操作符</entry>
       <entry>描述</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><literal>[a, b] &lt; [c, d]</literal></entry>
       <entry>小于</entry>
      </row>

      <row>
       <entry><literal>[a, b] &gt; [c, d]</literal></entry>
       <entry>大于</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

   这些操作符对除了排序之外的任何实际目的都没有什么意义。
   这些操作符首先比较 a 和 c，并且如果它们相等则比较 b 和 d。
   在大部分情况下这会得到相当好的排序，如果你想对这种类型使用 ORDER BY，
   这会很有用。
  </para>
 </sect2>

 <sect2>
  <title>注解</title>

  <para>
   使用的例子，请见回归测试<filename>sql/seg.sql</>。
  </para>

  <para>
   将<literal>(+-)</>转换成常规范围的机制在确定边界的有效位数时并不完全准确。
   例如，如果结果区间包括一个 10 的幂时，它会加上一个额外的位：

<screen>
postgres=> select '10(+-)1'::seg as seg;
      seg
---------
9.0 .. 11             -- should be: 9 .. 11
</screen>
  </para>

  <para>
   一个 R-树索引的性能很大程度上依赖于输入值的初始顺序。
   将输入表以<type>seg</>列进行排序将会非常有帮助，
   例子可见脚本<filename>sort-segments.pl</>。
  </para>
 </sect2>

 <sect2>
  <title>开发人员</title>

  <para>
   原始作者： Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>，
   阿尔贡国家实验室数学和计算机科学部。
  </para>

  <para>
   我要感谢 Joe Hellerstein 教授
   （<ulink url="http://db.cs.berkeley.edu/jmh/"></ulink>）解释了 GiST（<ulink url="http://gist.cs.berkeley.edu/"></ulink>）。
   我也要向现在和过去的所有 Postgres 开发者致敬，让我能创造自己的世界并且不受打扰地生活在其中。我也要感谢阿尔贡实验室以及美国能源部多年来对我数据库研究的支持。  </para>

 </sect2>

</sect1>

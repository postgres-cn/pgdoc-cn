<!-- doc/src/sgml/xplang.sgml -->

 <chapter id="xplang">
  <title>过程语言</title>

  <indexterm zone="xplang">
   <primary>过程语言</primary>
  </indexterm>

  <para>
   <productname>PostgreSQL</productname>允许使用除了 SQL 和 C 之外的其他语言编写用户定义的函数。这些其他的语言通常被称作<firstterm>过程语言</firstterm>（<acronym>PL</>）。对于一个用过程语言编写的函数，数据库服务器没有关于如何解释该函数的源文本的内建知识。因此，这个任务被交给一个了解语言细节的特殊处理器。该处理器能够自己处理所有的解析、语法分析、执行工作，或者它可以作为一种<productname>PostgreSQL</productname>和编程语言既有实现之间的<quote>粘合剂</quote>。就像任何其他 C 函数一样，处理器本身是一个编译到共享对象并且按需载入的 C 语言函数。
  </para>

  <para>
   在<productname>PostgreSQL</productname>的标准发布中当前有四种过程语言可用：
   <application>PL/pgSQL</application>（<xref linkend="plpgsql">）、
   <application>PL/Tcl</application>（<xref linkend="pltcl">）、
   <application>PL/Perl</application>（<xref linkend="plperl">）以及
   <application>PL/Python</application>（<xref linkend="plpython">）。
   还有其他过程语言可用，但是它们没有被包括在核心发布中。在<xref linkend="external-projects">中可以了解如何找到它们。另外，用户可以定义其他语言，<xref linkend="plhandler">中介绍了开发一种新过程语言的基础知识。
  </para>

  <sect1 id="xplang-install">
   <title>安装过程语言</title>

   <para>
    在每一个要使用过程语言的数据库中都必须<quote>安装</quote>相应的过程语言。不过安装在数据库<literal>template1</>中的过程语言会被后续创建的数据库自动继承，因为<literal>template1</>中与过程语言相关的项会被<command>CREATE DATABASE</>复制。因此，数据库管理员可以决定在哪些数据库中可以使用哪些语言，并且按照选择让一些语言默认可用。
   </para>

   <para>
    对于标准发布所提供的语言，只需要执行<command>CREATE EXTENSION</>
    <replaceable>language_name</>来把该语言安装在当前数据库中。此外，程序<xref linkend="app-createlang">可以从 shell 命令行来完成同样的操作。例如，要把语言<application>PL/Perl</application>安装在数据库<literal>template1</>中，可以使用：
<programlisting>
createlang plperl template1
</programlisting>
    下文所述的手工过程主要是为了安装没有被包装成扩展的语言。
   </para>

   <procedure>
    <title>
     手工安装过程语言
    </title>

    <para>
     安装一个过程语言到一个数据库中包括五个步骤，且必须由一个数据库超级用户来执行。在大部分情况下，所需的 SQL 命令应该被打包成一个<quote>扩展</>的安装脚本，这样可以用<command>CREATE EXTENSION</>来执行它们。
    </para>

    <step performance="required" id="xplang-install-cr1">
     <para>
      用于语言处理器的共享对象必须被编译并安装到一个合适的库目录中。这和编译和安装常规的用户定义 C 函数一样，参见<xref linkend="dfunc">。通常，语言处理器将依赖于一个实际提供编程语言引擎的外部库，如果是这样，那些外部库也应该被安装。
     </para>
    </step>

    <step performance="required" id="xplang-install-cr2">
     <para>
      处理器必须用下面的命令声明
<synopsis>
CREATE FUNCTION <replaceable>handler_function_name</replaceable>()
    RETURNS language_handler
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
      特殊的返回类型<type>language_handler</type>告诉数据库系统，这个函数不返回已定义的<acronym>SQL</acronym>数据类型，并且不能直接在<acronym>SQL</acronym>语句中使用。
     </para>
    </step>

    <step performance="optional" id="xplang-install-cr3">
     <para>
      可选地，语言处理器能提供一个<quote>内联</>处理器函数来执行用这种语言编写的匿名代码块（<xref linkend="sql-do">命令）。如果该语言提供了一个内联函数，用类似下面的命令声明它
<synopsis>
CREATE FUNCTION <replaceable>inline_function_name</replaceable>(internal)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
     </para>
    </step>

    <step performance="optional" id="xplang-install-cr4">
     <para>
      可选地，语言处理器能提供一个<quote>验证器</>函数用来检查一个函数定义的正确性而无需实际执行它。如果验证器函数存在，它将被<command>CREATE FUNCTION</>调用。如果该语言提供了一个验证器函数，用类似下面的命令声明它
<synopsis>
CREATE FUNCTION <replaceable>validator_function_name</replaceable>(oid)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C STRICT;
</synopsis>
     </para>
    </step>

    <step performance="required" id="xplang-install-cr5">
     <para>
      最后，PL 必须用下面的命令声明
<synopsis>
CREATE <optional>TRUSTED</optional> <optional>PROCEDURAL</optional> LANGUAGE <replaceable>language-name</replaceable>
    HANDLER <replaceable>handler_function_name</replaceable>
    <optional>INLINE <replaceable>inline_function_name</replaceable></optional>
    <optional>VALIDATOR <replaceable>validator_function_name</replaceable></optional> ;
</synopsis>
      可选的关键词<literal>TRUSTED</literal>指定，如果用户不具有访问数据的权限，该语言不会授予对数据的访问。可信的语言是为普通数据库用户（没有超级用户特权）设计的并且允许他们安全地创建函数和触发器过程。由于 PL 函数是在数据库内部执行的，<literal>TRUSTED</literal>标志只应被给予不允许访问数据库服务器内部或文件系统的语言。语言
      <application>PL/pgSQL</application>、
      <application>PL/Tcl</application>以及
      <application>PL/Perl</application>被认为是可信的，语言
      <application>PL/TclU</application>、
      <application>PL/PerlU</application>以及
      <application>PL/PythonU</application>是被设计用来提供无限制功能的并且<emphasis>不</emphasis>应该被标记为可信。
     </para>
    </step>
   </procedure>

   <para>
    <xref linkend="xplang-install-example">展示了手工安装过程如何安装语言<application>PL/Perl</application>。
   </para>

   <example id="xplang-install-example">
    <title><application>PL/Perl</application>的手工安装</title>

     <para>
      下列命令告诉数据库服务器在哪里寻找用于<application>PL/Perl</application>语言调用处理器函数的共享对象：

<programlisting>
CREATE FUNCTION plperl_call_handler() RETURNS language_handler AS
    '$libdir/plperl' LANGUAGE C;
</programlisting>
     </para>

     <para>
      <application>PL/Perl</application>有一个内联处理器函数和一个验证器函数，因此我们也要声明它们：

<programlisting>
CREATE FUNCTION plperl_inline_handler(internal) RETURNS void AS
    '$libdir/plperl' LANGUAGE C;

CREATE FUNCTION plperl_validator(oid) RETURNS void AS
    '$libdir/plperl' LANGUAGE C STRICT;
</programlisting>
     </para>

     <para>
      命令
<programlisting>
CREATE TRUSTED PROCEDURAL LANGUAGE plperl
    HANDLER plperl_call_handler
    INLINE plperl_inline_handler
    VALIDATOR plperl_validator;
</programlisting>
      则定义了前面声明的函数会为语言属性为<literal>plperl</literal>的函数及触发器过程所调用。
     </para>
  </example>

   <para>
    在一个默认的<productname>PostgreSQL</productname>安装中，用于<application>PL/pgSQL</application>语言的处理器会被编译并且安装到<quote>library</quote>目录，此外<application>PL/pgSQL</application>语言本身会被安装在所有的数据库中。如果配置了<application>Tcl</>支持，用于<application>PL/Tcl</>和<application>PL/TclU</>的处理器会被编译并且安装到库目录中，但语言本身默认不会被安装在任何数据库中。同样地，<application>PL/Perl</>和<application>PL/PerlU</>处理器在配置了 Perl 支持时被编译和安装，并且<application>PL/PythonU</>处理器在配置了 Python 支持时被安装，但是这些语言默认都不会被安装。
   </para>

  </sect1>

</chapter>

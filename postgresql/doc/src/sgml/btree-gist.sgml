<!-- doc/src/sgml/btree-gist.sgml -->

<sect1 id="btree-gist" xreflabel="btree_gist">
 <title>btree_gist</title>

 <indexterm zone="btree-gist">
  <primary>btree_gist</primary>
 </indexterm>

 <para>
  <filename>btree_gist</>为数据类型
  <type>int2</>、<type>int4</>、<type>int8</>、<type>float4</>、
  <type>float8</>、<type>numeric</>、<type>timestamp with time zone</>、
  <type>timestamp without time zone</>、<type>time with time zone</>、
  <type>time without time zone</>、<type>date</>、<type>interval</>、
  <type>oid</>、<type>money</>、<type>char</>、
  <type>varchar</>、<type>text</>、<type>bytea</>、<type>bit</>、
  <type>varbit</>、<type>macaddr</>、<type>inet</>和<type>cidr</>提供了实现 B 树等效行为的 GiST 索引操作符类。
 </para>

 <para>
  通常，这些操作符类不会比等效的标准 B 树索引方法更好，并且它们缺少标准 B 树代码的一个主要特性：强制一致性的能力。但是，如下文所述，它们提供了在一个 B 树索引中没有的一些其他特性。另外，当需要一个多列 GiST 索引，并且其某些列的数据类型只在 GiST 中是可索引的而其他列是简单数据类型时，这些操作符类就有用了。最后，这些操作符可以用于 GiST 测试以及作为开发其他 GiST 操作符类的基础。
 </para>

 <para>
  除了典型的 B 树搜索操作符之外，<filename>btree_gist</>也为<literal>&lt;&gt;</literal>（<quote>不等于</quote>）提供了索引支持。这可能与下文描述的<link linkend="SQL-CREATETABLE-EXCLUDE">排他约束</link>组合在一起产生作用。
 </para>

 <para>
  另外，对于那些具有自然距离度量的数据类型，<filename>btree_gist</>定义了一个距离操作符<literal>&lt;-&gt;</>，并且为使用这个操作符的最近邻搜索提供了 GiST 索引支持。距离操作符还提供给了：<type>int2</>、<type>int4</>、 <type>int8</>、<type>float4</>、
  <type>float8</>、<type>timestamp with time zone</>、
  <type>timestamp without time zone</>、
  <type>time without time zone</>、<type>date</>、<type>interval</>、
  <type>oid</>和<type>money</>。
 </para>

 <sect2>
  <title>用法示例</title>

  <para>
   使用<literal>btree_gist</literal>代替<literal>btree</literal>的简单例子：
  </para>

<programlisting>
CREATE TABLE test (a int4);
-- create index
CREATE INDEX testidx ON test USING gist (a);
-- query
SELECT * FROM test WHERE a &lt; 10;
-- nearest-neighbor search: find the ten entries closest to "42"
SELECT *, a &lt;-&gt; 42 AS dist FROM test ORDER BY a &lt;-&gt; 42 LIMIT 10;
</programlisting>

  <para>
   使用一个<link linkend="SQL-CREATETABLE-EXCLUDE">排他约束</link>来强制规则：一个动物园里的一个笼子只能装一种动物：
  </para>

<programlisting>
=&gt; CREATE TABLE zoo (
  cage   INTEGER,
  animal TEXT,
  EXCLUDE USING gist (cage WITH =, animal WITH &lt;&gt;)
);

=&gt; INSERT INTO zoo VALUES(123, 'zebra');
INSERT 0 1
=&gt; INSERT INTO zoo VALUES(123, 'zebra');
INSERT 0 1
=&gt; INSERT INTO zoo VALUES(123, 'lion');
ERROR:  conflicting key value violates exclusion constraint "zoo_cage_animal_excl"
DETAIL:  Key (cage, animal)=(123, lion) conflicts with existing key (cage, animal)=(123, zebra).
=&gt; INSERT INTO zoo VALUES(124, 'lion');
INSERT 0 1
</programlisting>

 </sect2>

 <sect2>
  <title>作者</title>

  <para>
   Teodor Sigaev（<email>teodor@stack.net</email>）、
   Oleg Bartunov（<email>oleg@sai.msu.su</email>）和
   Janko Richter（<email>jankorichter@yahoo.de</email>）。详见
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>。
  </para>

 </sect2>

</sect1>

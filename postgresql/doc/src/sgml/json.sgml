<!-- doc/src/sgml/json.sgml -->

<sect1 id="datatype-json">
 <!--
 <title><acronym>JSON</> Types</title>
 -->
 <title><acronym>JSON</> 类型</title>

 <indexterm zone="datatype-json">
  <primary>JSON</primary>
 </indexterm>

 <indexterm zone="datatype-json">
  <primary>JSONB</primary>
 </indexterm>

 <!--
<para>
  JSON data types are for storing JSON (JavaScript Object Notation)
  data, as specified in <ulink url="http://rfc7159.net/rfc7159">RFC
  7159</ulink>. Such data can also be stored as <type>text</type>, but
  the JSON data types have the advantage of enforcing that each
  stored value is valid according to the JSON rules.  There are also
  assorted JSON-specific functions and operators available for data stored
  in these data types; see <xref linkend="functions-json">.
 </para>
-->
<para>
JSON数据类型可以用来存储JSON（JavaScript Object Notation）数据，
就像<ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink>中指定的那样。
这样的数据也可以存储为<type>text</type>，
但是JSON数据类型更有利于检查每个存储的数值是可用的JSON值。
这里也有相关的JSON特定函数和操作符用于存储在这些数据类型中的数据；
参阅<xref linkend="functions-json">。
</para>

 <!--
<para>
  There are two JSON data types: <type>json</> and <type>jsonb</>.
  They accept <emphasis>almost</> identical sets of values as
  input.  The major practical difference is one of efficiency.  The
  <type>json</> data type stores an exact copy of the input text,
  which processing functions must reparse on each execution; while
  <type>jsonb</> data is stored in a decomposed binary format that
  makes it slightly slower to input due to added conversion
  overhead, but significantly faster to process, since no reparsing
  is needed.  <type>jsonb</> also supports indexing, which can be a
  significant advantage.
 </para>
-->
<para>
有两个JSON数据类型：<type>json</>和<type>jsonb</>。它们接受<emphasis>几乎</>
相同的值组作为输入。它们实际的主要差别是效率。<type>json</>
数据类型存储输入文本的精确拷贝，处理函数必须在每个执行上重新解析；
而<type>jsonb</>数据以分解的二进制格式存储，
这使得它由于添加了转换机制而在输入上稍微慢些，但是在处理上明显更快，
因为不需要重新解析。<type>jsonb</>也支持索引，这也是一个明显的优势。
</para>

 <!--
<para>
  Because the <type>json</> type stores an exact copy of the input text, it
  will preserve semantically-insignificant white space between tokens, as
  well as the order of keys within JSON objects. Also, if a JSON object
  within the value contains the same key more than once, all the key/value
  pairs are kept.  (The processing functions consider the last value as the
  operative one.)  By contrast, <type>jsonb</> does not preserve white
  space, does not preserve the order of object keys, and does not keep
  duplicate object keys.  If duplicate keys are specified in the input,
  only the last value is kept.
 </para>
-->
<para>
因为<type>json</>类型存储输入文本的精确拷贝，它将保存令牌间语义上无关紧要的空格，
和JSON对象中键的顺序。另外，如果值中的一个JSON对象多次包含相同的键，
那么保存所有的键/值对。（处理函数将最后一个值当做操作值。）相比之下，
<type>jsonb</>不保存空格，也不保存对象键的顺序，并且不保存重复对象键。
如果在输入中指定了重复的键，那么只保存最后一个值。
</para>

 <!--
<para>
  In general, most applications should prefer to store JSON data as
  <type>jsonb</>, unless there are quite specialized needs, such as
  legacy assumptions about ordering of object keys.
 </para>
-->
<para>
通常，大多数应用更喜欢存储JSON数据为<type>jsonb</>，除非有很专业的需要，
比如传统假设对象键的顺序。
</para>

 <!--
<para>
  <productname>PostgreSQL</productname> allows only one character set
  encoding per database.  It is therefore not possible for the JSON
  types to conform rigidly to the JSON specification unless the database
  encoding is UTF8. Attempts to directly include characters that
  cannot be represented in the database encoding will fail; conversely,
  characters that can be represented in the database encoding but not
  in UTF8 will be allowed.
 </para>
-->
<para>
<productname>PostgreSQL</productname>只允许每个数据库用一种字符集编码。
因此，使JSON严格符合规范是不可能的，除非数据库编码是UTF8。
试图直接包含不能在数据库编码中表示的字符将会失败；相反的，
能在数据库编码中表示但是不在UTF8中的字符是被允许的。
</para>

 <!--
<para>
  RFC 7159 permits JSON strings to contain Unicode escape sequences
  denoted by <literal>\u<replaceable>XXXX</></literal>.  In the input
  function for the <type>json</> type, Unicode escapes are allowed
  regardless of the database encoding, and are checked only for syntactic
  correctness (that is, that four hex digits follow <literal>\u</>).
  However, the input function for <type>jsonb</> is stricter: it disallows
  Unicode escapes for non-ASCII characters (those above <literal>U+007F</>)
  unless the database encoding is UTF8.  The <type>jsonb</> type also
  rejects <literal>\u0000</> (because that cannot be represented in
  <productname>PostgreSQL</productname>'s <type>text</> type), and it insists
  that any use of Unicode surrogate pairs to designate characters outside
  the Unicode Basic Multilingual Plane be correct.  Valid Unicode escapes
  are converted to the equivalent ASCII or UTF8 character for storage;
  this includes folding surrogate pairs into a single character.
 </para>
-->
<para>
RFC 7159允许JSON字符串包含以<literal>\u<replaceable>XXXX</></literal>
表示的Unicode逃逸序列。在<type>json</>类型的输入函数中，允许Unicode逃逸，
无视服务器编码，并且只检查语法的正确性（也就是，跟随<literal>\u</>的四个十六进制位）。
不过，<type>jsonb</>的输入函数更加严格：它不允许非ASCII字符（那些在<literal>U+007F</>
之上的）的Unicode逃逸，除非数据库编码是UTF8。<type>jsonb</>类型也拒绝<literal>\u0000</>
（因为<literal>\u0000</>不能以<productname>PostgreSQL</productname>的<type>text</>类型表示），
并且它坚持任何在Unicode Basic Multilingual Plane之外使用Unicode代理对指定字符的都是正确的。
有效的Unicode逃逸为了存储被转换为相等的ASCII或UTF8字符；这包括折叠代理对为单个字符。
</para>

 <note>
  <!--
<para>
   Many of the JSON processing functions described
   in <xref linkend="functions-json"> will convert Unicode escapes to
   regular characters, and will therefore throw the same types of errors
   just described even if their input is of type <type>json</>
   not <type>jsonb</>. The fact that the <type>json</> input function does
   not make these checks may be considered a historical artifact, although
   it does allow for simple storage (without processing) of JSON Unicode
   escapes in a non-UTF8 database encoding.  In general, it is best to
   avoid mixing Unicode escapes in JSON with a non-UTF8 database encoding,
   if possible.
  </para>
-->
<para>
许多在<xref linkend="functions-json">函数和操作符章节描述的JSON处理函数将转换
Unicode逃逸为普通字符，并且将因此抛出刚刚描述的相同类型的错误，
即使它们的输入是<type>json</>类型而不是<type>jsonb</>类型。
<type>json</>输入函数并不做这些检查的事实可以被认为是一个历史遗留，
尽管它确实允许在非UTF8数据库编码中简单的存储（不处理）JSON Unicode逃逸。通常，
如果可以，最好避免在非UTF8的数据库编码中混合Unicode逃逸到JSON。
</para>
 </note>

 <!--
<para>
  When converting textual JSON input into <type>jsonb</>, the primitive
  types described by <acronym>RFC</> 7159 are effectively mapped onto
  native <productname>PostgreSQL</productname> types, as shown
  in <xref linkend="json-type-mapping-table">.
  Therefore, there are some minor additional constraints on what
  constitutes valid <type>jsonb</type> data that do not apply to
  the <type>json</type> type, nor to JSON in the abstract, corresponding
  to limits on what can be represented by the underlying data type.
  Notably, <type>jsonb</> will reject numbers that are outside the
  range of the <productname>PostgreSQL</productname> <type>numeric</> data
  type, while <type>json</> will not.  Such implementation-defined
  restrictions are permitted by <acronym>RFC</> 7159.  However, in
  practice such problems are far more likely to occur in other
  implementations, as it is common to represent JSON's <type>number</>
  primitive type as IEEE 754 double precision floating point
  (which <acronym>RFC</> 7159 explicitly anticipates and allows for).
  When using JSON as an interchange format with such systems, the danger
  of losing numeric precision compared to data originally stored
  by <productname>PostgreSQL</productname> should be considered.
 </para>
-->
<para>
当转换文本JSON输入到<type>jsonb</>时，<acronym>RFC</> 7159
描述的基本类型有效的映射到本地<productname>PostgreSQL</productname>类型，
就如<xref linkend="json-type-mapping-table">中显示的那样。因此，
在没有应用到<type>json</type>类型、也没有应用到抽象的JSON的组成有效的<type>jsonb</type>
数据上有一些小的额外的约束，相当于限制可以通过底层数据类型表示的数据。特别的，
<type>jsonb</>拒绝超出<productname>PostgreSQL</productname> <type>numeric</>
数据类型范围的数字，而<type>json</>不拒绝。这样的实现定义限制是<acronym>RFC</> 7159允许的。
不过，在实际中，这样的问题更有可能在其他实现中发生，因为它通常代表JSON的<type>number</>
原始类型，就是IEEE 754双精度浮点数那样（这是<acronym>RFC</> 7159明确预期和允许的）。
当使用JSON作为这样系统的交换格式时，应该考虑和<productname>PostgreSQL</productname>
原始存储的数据相比，丢失数值精度的风险。
</para>

 <!--
<para>
  Conversely, as noted in the table there are some minor restrictions on
  the input format of JSON primitive types that do not apply to
  the corresponding <productname>PostgreSQL</productname> types.
 </para>
-->
<para>
相反的，就像在表中指出的那样，在JSON原始类型的输入格式上有一些小的限制，
没有应用到相应的<productname>PostgreSQL</productname>类型。
</para>

  <table id="json-type-mapping-table">
     <!--
	 <title>JSON primitive types and corresponding <productname>PostgreSQL</productname> types</title>
	 -->
	 <title>JSON原始类型和相应的<productname>PostgreSQL</productname>类型</title>
     <tgroup cols="3">
      <thead>
       <row>
        <!--
		<entry>JSON primitive type</entry>
        <entry><productname>PostgreSQL</productname> type</entry>
        <entry>Notes</entry>
		-->
		<entry>JSON原始类型</entry>
        <entry><productname>PostgreSQL</productname>类型</entry>
        <entry>说明</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><type>string</></entry>
        <entry><type>text</></entry>
        <!--
		<entry><literal>\u0000</> is disallowed, as are non-ASCII Unicode
         escapes if database encoding is not UTF8</entry>
		 -->
		 <entry><literal>\u0000</>是不允许的，如果数据库编码不是UTF8，
		 那么非ASCII Unicode逃逸也一样</entry>
       </row>
       <row>
        <entry><type>number</></entry>
        <entry><type>numeric</></entry>
        <!--
		<entry><literal>NaN</literal> and <literal>infinity</literal> values are disallowed</entry>
		-->
		<entry>不允许<literal>NaN</literal>和<literal>infinity</literal>值</entry>
       </row>
       <row>
        <entry><type>boolean</></entry>
        <entry><type>boolean</></entry>
        <!--
		<entry>Only lowercase <literal>true</literal> and <literal>false</literal> spellings are accepted</entry>
		-->
		<entry>只接受小写的<literal>true</literal>和<literal>false</literal></entry>
       </row>
       <row>
        <entry><type>null</></entry>
        <entry>(none)</entry>
        <!--
		<entry>SQL <literal>NULL</literal> is a different concept</entry>
		-->
		<entry>SQL <literal>NULL</literal> 是一个不同的概念</entry>
       </row>
      </tbody>
     </tgroup>
   </table>

 <sect2 id="json-keys-elements">
  <!--
  <title>JSON Input and Output Syntax</title>
  -->
  <title>JSON输入和输出语法</title>
  <!--
<para>
   The input/output syntax for the JSON data types is as specified in
   <acronym>RFC</> 7159.
  </para>
-->
<para>
JSON数据类型的输入/输出语法是在<acronym>RFC</> 7159中指定的。
</para>

<para>
   <!--
   The following are all valid <type>json</> (or <type>jsonb</>) expressions:
   -->
   下列都是有效的 <type>json</>（或<type>jsonb</>）表达式：
<programlisting>
-- <!-- Simple scalar/primitive value -->简单的标量/原始值
<!-- Primitive values can be numbers, quoted strings, true, false, or null -->
-- 原始值可以是数字、加引号的字符串、true、false或null
SELECT '5'::json;

<!-- Array of zero or more elements (elements need not be of same type) -->
-- 零个或者多个元素的数组 (元素不需要是相同的类型)
SELECT '[1, 2, "foo", null]'::json;

-- <!-- Object containing pairs of keys and values -->包含键/值对的对象
 <!-- Note that object keys must always be quoted strings -->
-- 注意对象的键必须总是加双引号的字符串
SELECT '{"bar": "baz", "balance": 7.77, "active": false}'::json;

--<!--  Arrays and objects can be nested arbitrarily -->数组和对象可以任意的嵌套
SELECT '{"foo": [true, "bar"], "tags": {"a": 1, "b": null}}'::json;
</programlisting>
  </para>

<para>
<!--
   As previously stated, when a JSON value is input and then printed without
   any additional processing, <type>json</> outputs the same text that was
   input, while <type>jsonb</> does not preserve semantically-insignificant
   details such as whitespace.  For example, note the differences here:
-->
如前面所述，当输入一个JSON值并且然后没有任何处理的打印时，
<type>json</>输出和输入相同的文本，而<type>jsonb</>没有保存语义上无关紧要的细节，
如空格。例如，注意这里的不同：
<programlisting>
SELECT '{"bar": "baz", "balance": 7.77, "active":false}'::json;
                      json                       
-------------------------------------------------
 {"bar": "baz", "balance": 7.77, "active":false}
(1 row)

SELECT '{"bar": "baz", "balance": 7.77, "active":false}'::jsonb;
                      jsonb                       
--------------------------------------------------
 {"bar": "baz", "active": false, "balance": 7.77}
(1 row)
</programlisting>
<!-- 
   One semantically-insignificant detail worth noting is that
   in <type>jsonb</>, numbers will be printed according to the behavior of the
   underlying <type>numeric</> type.  In practice this means that numbers
   entered with <literal>E</> notation will be printed without it, for
   example: 
-->
在<type>jsonb</>中一个语义上无关紧要的细节是值的注意的，
数字将根据底层<type>numeric</>类型的行为输出。
在实际中这意味着带着<literal>E</>符号输入的数字在输出时将没有<literal>E</>，例如：
<programlisting>
SELECT '{"reading": 1.230e-5}'::json, '{"reading": 1.230e-5}'::jsonb;
         json          |          jsonb          
-----------------------+-------------------------
 {"reading": 1.230e-5} | {"reading": 0.00001230}
(1 row)
</programlisting>
<!-- 
   However, <type>jsonb</> will preserve trailing fractional zeroes, as seen
   in this example, even though those are semantically insignificant for
   purposes such as equality checks.
-->
不过，<type>jsonb</>将保存尾随的小数零，就像这个例子中看到的，
即使这些对于目的（例如相等检查）是语义上无关紧要的。
  </para>
 </sect2>

 <sect2 id="json-doc-design">
  <!--
  <title>Designing JSON documents effectively</title>
  -->
  <title>设计有效的JSON文档</title>
  <!--
<para>
   Representing data as JSON can be considerably more flexible than
   the traditional relational data model, which is compelling in
   environments where requirements are fluid.  It is quite possible
   for both approaches to co-exist and complement each other within
   the same application.  However, even for applications where maximal
   flexibility is desired, it is still recommended that JSON documents
   have a somewhat fixed structure.  The structure is typically
   unenforced (though enforcing some business rules declaratively is
   possible), but having a predictable structure makes it easier to write
   queries that usefully summarize a set of <quote>documents</> (datums)
   in a table.
  </para>
-->
<para>
以JSON表示数据比传统的关系数据模型更加灵活，这在流动的需求环境中是引人注目的。
这两种方法在同一个应用中共存和相互补足是可能的。然而，即使是在需要最大灵活性的应用中，
仍然建议JSON文档有一个固定的结构。通常不强制使用哪种结构
（尽管有可能强制一些业务规则声明），但是有一个可以预见的结构使得它更容易书写查询，
有效的在一个表中总结一组<quote>文档</>（datums）。
</para>
  <!--
<para>
   JSON data is subject to the same concurrency-control
   considerations as any other data type when stored in a table.
   Although storing large documents is practicable, keep in mind that
   any update acquires a row-level lock on the whole row.
   Consider limiting JSON documents to a
   manageable size in order to decrease lock contention among updating
   transactions.  Ideally, JSON documents should each
   represent an atomic datum that business rules dictate cannot
   reasonably be further subdivided into smaller datums that
   could be modified independently.
  </para>
-->
<para>
当存储到一个表时，JSON数据和任何其他数据类型一样受到相同的并发性控制的考虑。
尽管存储大文档是可行的，但是要记住任何更新都在整个行上获得一个行级锁。
考虑限制JSON文档到一个易管理的尺寸，以便减少更新事务上的锁竞争。理想上，
JSON文档应该每个代表一个原子数据，
原子数据是业务规则命令不能再合理的细分为更小的可以被独立修改的数据。
</para>
 </sect2>

 <sect2 id="json-containment">
  <!--
  <title><type>jsonb</> Containment and Existence</title>
  -->
  <title><type>jsonb</>包含和存在</title>
  <indexterm>
    <primary>jsonb</primary>
    <!-- 
	<secondary>containment</secondary>
	-->
	<secondary>包含</secondary>
  </indexterm>
  <indexterm>
    <primary>jsonb</primary>
    <!--
	<secondary>existence</secondary>
	-->
	<secondary>存在</secondary>
  </indexterm>
  <!--
<para>
    Testing <firstterm>containment</> is an important capability of
    <type>jsonb</>.  There is no parallel set of facilities for the
    <type>json</> type.  Containment tests whether
    one <type>jsonb</> document has contained within it another one.
    These examples return true except as noted:
  </para>
-->
<para>
测试<firstterm>包含</>是<type>jsonb</>的一个重要能力。没有<type>json</>
类型的平行设置的设施。包含测试一个<type>jsonb</>文档是否包含在另一个当中。
这些示例除了注释了返回假之外的都返回真：
</para>
<programlisting>
<!-- Simple scalar/primitive values contain only the identical value: -->
-- 简单的标量/原始值只包含相同的值：
SELECT '"foo"'::jsonb @> '"foo"'::jsonb;

<!-- The array on the right side is contained within the one on the left: -->
-- 右侧的数组包含在左侧的数组当中：
SELECT '[1, 2, 3]'::jsonb @> '[1, 3]'::jsonb;

<!-- Order of array elements is not significant, so this is also true: -->
-- 数组元素的顺序不重要，所以这个也为真：
SELECT '[1, 2, 3]'::jsonb @> '[3, 1]'::jsonb;

<!-- Duplicate array elements don't matter either: -->
-- 重复的数组元素也不重要：
SELECT '[1, 2, 3]'::jsonb @> '[1, 2, 2]'::jsonb;

<!-- The object with a single pair on the right side is contained -->
-- 右侧只包含一对值的对象包含在左侧的对象中：
<!-- &#045;- within the object on the left side: -->
SELECT '{"product": "PostgreSQL", "version": 9.4, "jsonb":true}'::jsonb @> '{"version":9.4}'::jsonb;

<!--
&#045;- The array on the right side is <emphasis>not</> considered contained within the
&#045;- array on the left, even though a similar array is nested within it:
-->
-- <emphasis>不</>认为右侧的数组包含在左侧的数组中，尽管一个相似的数组嵌套在它里面
SELECT '[1, 2, [1, 3]]'::jsonb @> '[1, 3]'::jsonb;  -- <!-- yields false -->产生假

-- <!-- But with a layer of nesting, it is contained: -->但是有一个嵌套，它就被包含了：
SELECT '[1, 2, [1, 3]]'::jsonb @> '[[1, 3]]'::jsonb;

-- <!-- Similarly, containment is not reported here: -->相似的，包含在这里也不报告
SELECT '{"foo": {"bar": "baz"}}'::jsonb @> '{"bar": "baz"}'::jsonb;  -- <!-- yields false -->产生假
</programlisting>

  <!--
<para>
   The general principle is that the contained object must match the
   containing object as to structure and data contents, possibly after
   discarding some non-matching array elements or object key/value pairs
   from the containing object.
   But remember that the order of array elements is not significant when
   doing a containment match, and duplicate array elements are effectively
   considered only once.
  </para>
-->
<para>
一般原理是被包含的对象必须在结构和数据内容上匹配包含对象，
可能是在包含对象中丢弃一些不匹配的数组元素或对象键/值对之后。但是要记住，
当做一个包含匹配时，数组元素的顺序是不重要的，并且重复的数组元素实际上只考虑一次。
</para>

  <!--
<para>
   As a special exception to the general principle that the structures
   must match, an array may contain a primitive value:
  </para>
-->
<para>
作为一般原则中结构必须匹配的一个特别例外，一个数组可以包含一个原始值：
</para>
<programlisting>
-- <!-- This array contains the primitive string value: -->这个数组包含这个原始字符串值：
SELECT '["foo", "bar"]'::jsonb @> '"bar"'::jsonb;

<!-- &#045;- This exception is not reciprocal &#045;- non-containment is reported here: -->
-- 这个例外反过来不可以 -- 在这里没有报告包含：
SELECT '"bar"'::jsonb @> '["bar"]'::jsonb;  -- <!-- yields false -->产生假
</programlisting>

  <!--
<para>
    <type>jsonb</> also has an <firstterm>existence</> operator, which is
    a variation on the theme of containment: it tests whether a string
    (given as a <type>text</> value) appears as an object key or array
    element at the top level of the <type>jsonb</> value.
    These examples return true except as noted:
  </para>
-->
<para>
<type>jsonb</>还有一个<firstterm>存在</>操作符，它是包含的一个变种：
它测试一个字符串（作为<type>text</>值给出）
是否作为一个对象键或者数组元素中顶级的<type>jsonb</>值出现。
这些示例除了注释为假的之外都返回真：
</para>
<programlisting>
-- <!-- String exists as array element: -->字符串作为数组元素存在：
SELECT '["foo", "bar", "baz"]'::jsonb ? 'bar';

-- <!-- String exists as object key: -->字符串作为对象键存在：
SELECT '{"foo": "bar"}'::jsonb ? 'foo';

-- <!-- Object values are not considered: -->不考虑对象值：
SELECT '{"foo": "bar"}'::jsonb ? 'bar';  -- <!-- yields false -->产生假

<!--  As with containment, existence must match at the top level: -->
-- 和包含一样，存在必须在顶级匹配：
SELECT '{"foo": {"bar": "baz"}}'::jsonb ? 'bar'; -- <!-- yields false -->产生假

<!-- A string is considered to exist if it matches a primitive JSON string: -->
-- 如果字符串匹配一个原始JSON字符串，那么认为它存在：
SELECT '"foo"'::jsonb ? 'foo';
</programlisting>

  <!--
<para>
    JSON objects are better suited than arrays for testing containment or
    existence when there are many keys or elements involved, because
    unlike arrays they are internally optimized for searching, and do not
    need to be searched linearly.
  </para>
-->
<para>
当包含许多键或元素时，JSON对象比数组更适合测试包含或存在，
因为JSON对象不像数组那样为了查找而内部优化，并且不需要线性搜索。
</para>

  <!--
<para>
    The various containment and existence operators, along with all other
    JSON operators and functions are documented
    in <xref linkend="functions-json">.
  </para>
-->
<para>
各种包含和存在操作符，还有所有其他JSON操作符和函数都在
<xref linkend="functions-json">中记录。
</para>
 </sect2>

 <sect2 id="json-indexing">
  <!--
  <title><type>jsonb</> Indexing</title>
  -->
  <title><type>jsonb</> 索引</title>
  <indexterm>
    <primary>jsonb</primary>
    <secondary>indexes on</secondary>
  </indexterm>

  <!--
<para>
    GIN indexes can be used to efficiently search for
    keys or key/value pairs occurring within a large number of
    <type>jsonb</> documents (datums).
    Two GIN <quote>operator classes</> are provided, offering different
    performance and flexibility trade-offs.
  </para>
-->
<para>
GIN索引可以用来有效的搜索出现在大量<type>jsonb</>文档（datums）
中的键或者键/值对。提供了两个GIN<quote>操作符类</>，提供了不同的性能和灵活性取舍。
</para>

<para>
<!-- 
    The default GIN operator class for <type>jsonb</> supports queries with
    the <literal>@&gt;</>, <literal>?</>, <literal>?&amp;</>
    and <literal>?|</> operators.
    (For details of the semantics that these operators
    implement, see <xref linkend="functions-jsonb-op-table">.)
    An example of creating an index with this operator class is: 
-->
<type>jsonb</>缺省的GIN操作符类支持使用<literal>@&gt;</>、<literal>?</>、
<literal>?&amp;</>和<literal>?|</>操作符查询。（要查看这些操作符实现的详细语义信息，
请参阅<xref linkend="functions-jsonb-op-table">。）用这个操作符类创建一个索引的示例是：
<programlisting>
CREATE INDEX idxgin ON api USING gin (jdoc);
</programlisting>
<!-- 
    The non-default GIN operator class <literal>jsonb_path_ops</>
    supports indexing the <literal>@&gt;</> operator only.
    An example of creating an index with this operator class is: 
-->
非缺省的GIN操作符类<literal>jsonb_path_ops</>只支持索引<literal>@&gt;</>操作符。
用这个操作符类创建一个索引的示例是：
<programlisting>
CREATE INDEX idxginp ON api USING gin (jdoc jsonb_path_ops);
</programlisting>
  </para>

<para>
<!-- 
    Consider the example of a table that stores JSON documents
    retrieved from a third-party web service, with a documented schema
    definition.  A typical document is: 
-->
考虑一个存储从第三方web服务器上检索出来的JSON文档的表的例子，
该表带有文档模式定义。一个典型的文档是：
<programlisting>
{
    "guid": "9c36adc1-7fb5-4d5b-83b4-90356a46061a",
    "name": "Angela Barton",
    "is_active": true,
    "company": "Magnafone",
    "address": "178 Howard Place, Gulf, Washington, 702",
    "registered": "2009-11-07T08:53:22 +08:00",
    "latitude": 19.793713,
    "longitude": 86.513373,
    "tags": [
        "enim",
        "aliquip",
        "qui"
    ]
}
</programlisting>
<!-- 
    We store these documents in a table named <structname>api</>,
    in a <type>jsonb</> column named <structfield>jdoc</>.
    If a GIN index is created on this column,
    queries like the following can make use of the index: 
-->
我们在一个名为<structname>api</>的表中存储这些文档，
在一个名为<structfield>jdoc</>的<type>jsonb</>字段中。
如果在这个字段上创建了一个GIN索引，那么像下面这样的查询可以利用该索引：
<programlisting>
<!-- &#045;- Find documents in which the key "company" has value "Magnafone" -->
-- 在键"company"有值"Magnafone"的地方找到文档
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc @&gt; '{"company": "Magnafone"}';
</programlisting>
<!-- 
    However, the index could not be used for queries like the
    following, because though the operator <literal>?</> is indexable,
    it is not applied directly to the indexed column <structfield>jdoc</>: 
-->
不过，该索引不能用于像下面这样的查询，因为虽然操作符<literal>?</>是可索引的，
但是它没有直接应用到索引的字段<structfield>jdoc</>上：
<programlisting>
<!-- &#045;- Find documents in which the key "tags" contains key or array element "qui" -->
-- 在键"tags"包含键或数组元素"qui"的地方找到文档
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc -&gt; 'tags' ? 'qui';
</programlisting>
<!-- 
    Still, with appropriate use of expression indexes, the above
    query can use an index.  If querying for particular items within
    the <literal>"tags"</> key is common, defining an index like this
    may be worthwhile: 
-->
尽管如此，适当的使用表达式索引，以上的查询也是可以使用索引的。
如果查询特殊的条目都有共同的<literal>"tags"</>键，那么像这样定义一个索引可能是值得的：
<programlisting>
CREATE INDEX idxgintags ON api USING gin ((jdoc -&gt; 'tags'));
</programlisting>
<!-- 
    Now, the <literal>WHERE</> clause <literal>jdoc -&gt; 'tags' ? 'qui'</>
    will be recognized as an application of the indexable
    operator <literal>?</> to the indexed
    expression <literal>jdoc -&gt; 'tags'</>.
    (More information on expression indexes can be found in <xref
    linkend="indexes-expressional">.) 
-->
现在，<literal>WHERE</>子句<literal>jdoc -&gt; 'tags' ? 'qui'</>
将被看做可索引的操作符<literal>?</>到索引的表达式<literal>jdoc -&gt; 'tags'</>
的一个应用。（更多关于表达式索引的信息可以在<xref linkend="indexes-expressional">中找到。）
  </para>

<para>
    <!--
	Another approach to querying is to exploit containment, for example:
	-->
	另外一个查询的方式是利用包含，例如：
<programlisting>
<!-- Find documents in which the key "tags" contains array element "qui" -->
-- 在键 "tags" 包含数组元素 "qui" 的地方查找文档
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc @&gt; '{"tags": ["qui"]}';
</programlisting>
<!-- 
    A simple GIN index on the <structfield>jdoc</> column can support this
    query.  But note that such an index will store copies of every key and
    value in the <structfield>jdoc</> column, whereas the expression index
    of the previous example stores only data found under
    the <literal>tags</> key.  While the simple-index approach is far more
    flexible (since it supports queries about any key), targeted expression
    indexes are likely to be smaller and faster to search than a simple
    index.
-->
在<structfield>jdoc</>字段上的一个简单GIN索引可以支持这个查询。但是请注意，
这样一个索引将存储<structfield>jdoc</>字段中的每个键和值的拷贝，
而前一个示例中的表达式索引只存储在<literal>tags</>键下找到的数据。
然而简单索引方法更加灵活（因为它支持查询任意键），
有针对的表达式索引可能比简单索引更小并且更快的搜索。
  </para>

  <!--
<para>
    Although the <literal>jsonb_path_ops</literal> operator class supports
    only queries with the <literal>@&gt;</> operator, it has notable
    performance advantages over the default operator
    class <literal>jsonb_ops</literal>.  A <literal>jsonb_path_ops</literal>
    index is usually much smaller than a <literal>jsonb_ops</literal>
    index over the same data, and the specificity of searches is better,
    particularly when queries contain keys that appear frequently in the
    data.  Therefore search operations typically perform better
    than with the default operator class.
  </para>
-->
<para>
虽然<literal>jsonb_path_ops</literal>操作符类只支持带有<literal>@&gt;</>操作符的查询，
但是它有比缺省的操作符类<literal>jsonb_ops</literal>值的注意的性能优势。
<literal>jsonb_path_ops</literal>索引在相同的数据上通常比<literal>jsonb_ops</literal>
索引小的多，并且搜索的特异性更好，尤其是当查询包含在数据中频繁出现的键时。
因此搜索操作通常比用缺省的操作符类执行的更好。
</para>

  
<para>
<!-- 
    The technical difference between a <literal>jsonb_ops</literal>
    and a <literal>jsonb_path_ops</literal> GIN index is that the former
    creates independent index items for each key and value in the data,
    while the latter creates index items only for each value in the
    data. 
-->
<literal>jsonb_ops</literal>和<literal>jsonb_path_ops</literal>
索引之间技术上的不同是前者为数据中的每个键和值创建独立的索引项，
而后者只为数据中的每个值创建索引项。
    <footnote>
<!--
     <para>
      For this purpose, the term <quote>value</> includes array elements,
      though JSON terminology sometimes considers array elements distinct
      from values within objects.
     </para>
-->
<para>
为了这个目的，术语<quote>value</>包括数组元素，尽管JSON术语有时认为数组元组和对象中的值不同。
</para>
    </footnote>
<!-- 
    Basically, each <literal>jsonb_path_ops</literal> index item is
    a hash of the value and the key(s) leading to it; for example to index
    <literal>{"foo": {"bar": "baz"}}</literal>, a single index item would
    be created incorporating all three of <literal>foo</>, <literal>bar</>,
    and <literal>baz</> into the hash value.  Thus a containment query
    looking for this structure would result in an extremely specific index
    search; but there is no way at all to find out whether <literal>foo</>
    appears as a key.  On the other hand, a <literal>jsonb_ops</literal>
    index would create three index items representing <literal>foo</>,
    <literal>bar</>, and <literal>baz</> separately; then to do the
    containment query, it would look for rows containing all three of
    these items.  While GIN indexes can perform such an AND search fairly
    efficiently, it will still be less specific and slower than the
    equivalent <literal>jsonb_path_ops</literal> search, especially if
    there are a very large number of rows containing any single one of the
    three index items. 
-->
从根本上来说，每个<literal>jsonb_path_ops</literal>索引项是一个值和通往值的键的散列；
例如，索引<literal>{"foo": {"bar": "baz"}}</literal>，一个索引项将被创建，
合并所有的三个值：<literal>foo</>、<literal>bar</>和<literal>baz</>到散列值中。
因此一个包含查询查找这个结构将导致一个非常特定的索引搜索；
但是没有办法找出<literal>foo</>是否作为一个键出现。在另一方面，
<literal>jsonb_ops</literal>索引将创建三个索引项分别表示<literal>foo</>、
<literal>bar</>和<literal>baz</>；然后做包含查询，将查找包含所有三个项的行。
而GIN索引可以相当有效的执行这样一个AND搜索，它将仍然比等价的
<literal>jsonb_path_ops</literal>搜索缺少针对性并且更慢，
特别是当有非常多的行包含这三个索引项中的一个时。
  </para>

  <!--
<para>
    A disadvantage of the <literal>jsonb_path_ops</literal> approach is
    that it produces no index entries for JSON structures not containing
    any values, such as <literal>{"a": {}}</literal>.  If a search for
    documents containing such a structure is requested, it will require a
    full-index scan, which is quite slow.  <literal>jsonb_path_ops</> is
    therefore ill-suited for applications that often perform such searches.
  </para>
-->
<para>
<literal>jsonb_path_ops</literal>方法的一个缺点是它不为不包含任何值的JSON构造，
如<literal>{"a": {}}</literal>，生成任何索引项。如果要求搜索包含这样一个构造的文档，
它将需要一个完整的索引扫描，这样是相当慢的。因此<literal>jsonb_path_ops</>
不适合经常执行这样的搜索的应用。
</para>

<para>
<!-- 
    <type>jsonb</> also supports <literal>btree</> and <literal>hash</>
    indexes.  These are usually useful only if it's important to check
    equality of complete JSON documents.
    The <literal>btree</> ordering for <type>jsonb</> datums is seldom
    of great interest, but for completeness it is: 
-->
<type>jsonb</>还支持<literal>btree</>和<literal>hash</>索引。
这些只在检查完整JSON文档的等价性重要时通常有用。很少关心
<type>jsonb</> datums的<literal>btree</>顺序，但是为了完整它是：
<synopsis>
<replaceable>Object</replaceable> > <replaceable>Array</replaceable> > <replaceable>Boolean</replaceable> > <replaceable>Number</replaceable> > <replaceable>String</replaceable> > <replaceable>Null</replaceable>

<replaceable>Object with n pairs</replaceable> > <replaceable>object with n - 1 pairs</replaceable>

<replaceable>Array with n elements</replaceable> > <replaceable>array with n - 1 elements</replaceable>
</synopsis>
      <!--
	  Objects with equal numbers of pairs are compared in the order:
	  -->
	  有相同对数的对象以下面的顺序比较：
<synopsis>
<replaceable>key-1</replaceable>, <replaceable>value-1</replaceable>, <replaceable>key-2</replaceable> ...
</synopsis>
      <!-- 
	  Note that object keys are compared in their storage order;
      in particular, since shorter keys are stored before longer keys, this
      can lead to results that might be unintuitive, such as:
	  -->
	  请注意，对象的键是以他们的存储顺序比较的；特别的，
	  因为较短的键存储在较长的键的前面，这会导致结果可能是非直观的，比如：
<programlisting>
{ "aa": 1, "c": 1} > {"b": 1, "d": 1}
</programlisting>
      <!--
	  Similarly, arrays with equal numbers of elements are compared in the
      order:
	  -->
	  相似的，带有相同数量元素的数组是以这个顺序来比较的：
<synopsis>
<replaceable>element-1</replaceable>, <replaceable>element-2</replaceable> ...
</synopsis>
      <!-- 
	  Primitive JSON values are compared using the same
      comparison rules as for the underlying
      <productname>PostgreSQL</productname> data type.  Strings are
      compared using the default database collation.
	  -->
	  原始的JSON值是使用和底层<productname>PostgreSQL</productname>
	  数据类型一样的比较规则比较的。字符串使用默认的数据库排序规则比较。
  </para>
 </sect2>
</sect1>

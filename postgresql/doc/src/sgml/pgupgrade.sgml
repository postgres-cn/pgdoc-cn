<!-- doc/src/sgml/pgupgrade.sgml -->

<refentry id="pgupgrade">
 <indexterm zone="pgupgrade">
  <primary>pg_upgrade</primary>
 </indexterm>
 <refmeta>
  <refentrytitle><application>pg_upgrade</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_upgrade</refname>
<!--
  <refpurpose>upgrade a <productname>PostgreSQL</productname> server instance</refpurpose>
-->
  <refpurpose>升级 <productname>PostgreSQL</productname> 数据库实例</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_upgrade</command>
   <arg choice="plain"><option>-b</option></arg>
   <arg choice="plain"><replaceable>oldbindir</replaceable></arg>
   <arg choice="plain"><option>-B</option></arg>
   <arg choice="plain"><replaceable>newbindir</replaceable></arg>
   <arg choice="plain"><option>-d</option></arg>
   <arg choice="plain"><replaceable>olddatadir</replaceable></arg>
   <arg choice="plain"><option>-D</option></arg>
   <arg choice="plain"><replaceable>newdatadir</replaceable></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>描述</title>

<!--
 <para>
  <application>pg_upgrade</> (formerly called <application>pg_migrator</>) allows data
  stored in <productname>PostgreSQL</> data files to be upgraded to a later <productname>PostgreSQL</>
  major version without the data dump/reload typically required for
  major version upgrades, e.g. from 8.4.7 to the current major release
  of <productname>PostgreSQL</>.  It is not required for minor version upgrades, e.g. from
  9.0.1 to 9.0.4.
 </para>
-->
 <para>
  <application>pg_upgrade</> (原名称为 <application>pg_migrator</>) 允许数据在
  <productname>PostgreSQL</> 数据文件中升级到<productname>PostgreSQL</>新的
  大版本而不需要数据的备份/还原，通常适用在升级大版本时，例如从8.4.7升级到当前
   <productname>PostgreSQL</>的新最新版本。  在小版本之间升级往往是不需要的， 例如
  从9.0.1升级到9.0.4。
 </para>

<!--
 <para>
  Major PostgreSQL releases regularly add new features that often
  change the layout of the system tables, but the internal data storage
  format rarely changes.  <application>pg_upgrade</> uses this fact
  to perform rapid upgrades by creating new system tables and simply
  reusing the old user data files.  If a future major release ever
  changes the data storage format in a way that makes the old data
  format unreadable, <application>pg_upgrade</> will not be usable
  for such upgrades.  (The community will attempt to avoid such
  situations.)
 </para>
-->
 <para>
  PostgreSQL大版本更新会定期增加新的功能，这往往导致系统表结构布局经常
  改变，但是内部的数据的存储格式很少改动。 针对这种情况
  <application>pg_upgrade</> 通过建立新的系统表和简易的利用旧的用户
  数据文件高效的完成升级。如果未来一个新的主要版本改变了数据存储
  结构这将导致旧数据结构无法读取， <application>pg_upgrade</> 将不能
  完成升级。（社区会试图避免这种情况的发生。）
 </para>

<!--
 <para>
  <application>pg_upgrade</> does its best to
  make sure the old and new clusters are binary-compatible, e.g.  by
  checking for compatible compile-time settings, including 32/64-bit
  binaries.  It is important that
  any external modules are also binary compatible, though this cannot
  be checked by <application>pg_upgrade</>.
 </para>
-->
 <para>
  <application>pg_upgrade</>能很好的完成新旧实例的二进制兼容，例如包括
  32/64二进制的兼容性编译时间设置检查。检查任何一个外部模块的二进制兼容
  是很有必要的，然而不能通过 <application>pg_upgrade</>来检查。
 </para>

<!--
  <para>
   pg_upgrade supports upgrades from 8.3.X and later to the current
   major release of <productname>PostgreSQL</>, including snapshot and alpha releases.
  </para>
-->
  <para>
   pg_upgrade 支持从8.3.X升级到最近的 <productname>PostgreSQL</>主要发行版本，
   包括快照和alpha版本。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Options</title>
-->
  <title>选项</title>

   <para>
<!--
    <application>pg_upgrade</application> accepts the following command-line arguments:
-->
    <application>pg_upgrade</application> 可以使用下面命令行参数:

    <variablelist>

     <varlistentry>
      <term><option>-b</option> <replaceable>bindir</></term>
      <term><option>--old-bindir=</option><replaceable>bindir</></term>
<!--
      <listitem><para>the old PostgreSQL executable directory;
      environment variable <envar>PGBINOLD</></para></listitem>
-->
      <listitem><para>旧的数据实例的可执行文件目录;
      环境变量 <envar>PGBINOLD</></para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-B</option> <replaceable>bindir</></term>
      <term><option>--new-bindir=</option><replaceable>bindir</></term>
<!--
      <listitem><para>the new PostgreSQL executable directory;
      environment variable <envar>PGBINNEW</></para></listitem>
-->
      <listitem><para>新的数据实例的可执行文件目录;
      环境变量 <envar>PGBINNEW</></para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option></term>
      <term><option>--check</option></term>
<!--
      <listitem><para>check clusters only, don't change any data</para></listitem>
-->
      <listitem><para>仅检查实例，不做任何数据更新</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option> <replaceable>datadir</></term>
      <term><option>--old-datadir=</option><replaceable>datadir</></term>
<!--
      <listitem><para>the old cluster data directory; environment
      variable <envar>PGDATAOLD</></para></listitem>
-->
      <listitem><para>旧的群集数据目录;环境变量<envar>PGDATAOLD</></para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-D</option> <replaceable>datadir</></term>
      <term><option>--new-datadir=</option><replaceable>datadir</></term>
<!--
      <listitem><para>the new cluster data directory; environment
      variable <envar>PGDATANEW</></para></listitem>
-->
      <listitem><para>新的群集数据目录;环境变量<envar>PGDATANEW</></para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j</option></term>
      <term><option>--jobs</option></term>
<!--
      <listitem><para>number of simultaneous processes or threads to use
-->
      <listitem><para>同时使用的进程或者线程数
      </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-k</option></term>
      <term><option>--link</option></term>
<!--
      <listitem><para>use hard links instead of copying files to the new
      cluster (use junction points on Windows)</para></listitem>
-->
      <listitem><para>使用硬链接替代拷贝文件到新的数据库实例
      (在windows使用NTFS的接点）</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-o</option> <replaceable class="parameter">options</replaceable></term>
      <term><option>--old-options</option> <replaceable class="parameter">options</replaceable></term>

      <listitem><para>options to be passed directly to the
      old <command>postgres</command> command</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-O</option> <replaceable class="parameter">options</replaceable></term>
      <term><option>--new-options</option> <replaceable class="parameter">options</replaceable></term>
      <listitem><para>options to be passed directly to the
      new <command>postgres</command> command</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p</option> <replaceable>port</></term>
      <term><option>--old-port=</option><replaceable>port</></term>
<!--
      <listitem><para>the old cluster port number; environment
      variable <envar>PGPORTOLD</></para></listitem>
-->
      <listitem><para>旧数据库实例的端口;环境变量<envar>PGPORTOLD</></para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option> <replaceable>port</></term>
      <term><option>--new-port=</option><replaceable>port</></term>
<!--
      <listitem><para>the new cluster port number; environment
      variable <envar>PGPORTNEW</></para></listitem>
-->
      <listitem><para>新数据库实例的端口;环境变量<envar>PGPORTNEW</></para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option></term>
      <term><option>--retain</option></term>
<!--
      <listitem><para>retain SQL and log files even after successful completion
      </para></listitem>
-->
      <listitem><para>即使在升级成功也保存相关的SQL和日志文件。
      </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U</option> <replaceable>username</></term>
      <term><option>--username=</option><replaceable>username</></term>
<!--
      <listitem><para>cluster's super user name; environment
      variable <envar>PGUSER</></para></listitem>
-->
      <listitem><para>数据实例的超级管理员名; 环境变量 <envar>PGUSER</></para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--verbose</option></term>
<!--
      <listitem><para>enable verbose internal logging</para></listitem>
-->
      <listitem><para>启用详细的内部日志输出</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
<!--
      <listitem><para>display version information, then exit</para></listitem>
-->
      <listitem><para>打印版本信息，然后退出</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>-h</option></term>
      <term><option>--help</option></term>
<!--
      <listitem><para>show help, then exit</para></listitem>
-->
      <listitem><para>显示当前帮助，然后退出</para></listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect1>

 <refsect1>
<!--
  <title>Usage</title>
-->
  <title>用法</title>

<!--
  <para>
   These are the steps to perform an upgrade
   with <application>pg_upgrade</application>:
  </para>
-->
  <para>
   用 <application>pg_upgrade</application>进行升级的步骤:
  </para>

  <procedure>
   <step performance="optional">
<!--
    <title>Optionally move the old cluster</title>
-->
    <title>选择性的移动实例的安装目录</title>

<!--
    <para>
     If you are using a version-specific installation directory, e.g.
     <filename>/opt/PostgreSQL/9.1</>, you do not need to move the old cluster. The
     graphical installers all use version-specific installation directories.
    </para>
-->
    <para>
 如果你用了指定版本的安装目录，例如 <filename>/opt/PostgreSQL/9.1</>, 你不需要再移动
 旧的安装目录。图形化安装工具都是指定安装目录的。 
    </para>

<!--
    <para>
     If your installation directory is not version-specific, e.g.
     <filename>/usr/local/pgsql</>, it is necessary to move the current PostgreSQL install
     directory so it does not interfere with the new <productname>PostgreSQL</> installation.
     Once the current <productname>PostgreSQL</> server is shut down, it is safe to rename the
     PostgreSQL installation directory; assuming the old directory is
     <filename>/usr/local/pgsql</>, you can do:

<programlisting>
mv /usr/local/pgsql /usr/local/pgsql.old
</programlisting>
     to rename the directory.
    </para>
-->
    <para>
 如果你的安装目录不是版本指定的，例如 <filename>/usr/local/pgsql</>, 这就有必要
 移动当前的安装目录，这样就避免影响了新的 <productname>PostgreSQL</> 的安装。
     当 <productname>PostgreSQL</> 数据库服务停止后， 重命令PostgreSQL的安装
 目录的操作是安全的;假如旧安装目录是 <filename>/usr/local/pgsql</>, 你可以用命令:

<programlisting>
mv /usr/local/pgsql /usr/local/pgsql.old
</programlisting>
 来重命令当前目录名。
    </para>
   </step>

   <step>
<!--
    <title>For source installs, build the new version</title>
-->
    <title>用源码安装，构建一个新的版本</title>

<!--
    <para>
     Build the new PostgreSQL source with <command>configure</> flags that are compatible
     with the old cluster. <application>pg_upgrade</> will check <command>pg_controldata</> to make
     sure all settings are compatible before starting the upgrade.
    </para>
-->
    <para>
     用兼容旧的数据库实例<command>configure</> 选项来构建新的PostgreSQL。在开始升级之前
      <application>pg_upgrade</> 将会检查<command>pg_controldata</> 来确保所有的设置都兼容。
    </para>
   </step>

   <step>
<!--
    <title>Install the new PostgreSQL binaries</title>
-->
    <title>安装新的二进制文件</title>

<!--
    <para>
     Install the new server's binaries and support files.
    </para>
-->
    <para>
 安装新服务器的二进制可执行文件和支持文件。
    </para>

<!--
    <para>
     For source installs, if you wish to install the new server in a custom
     location, use the <literal>prefix</literal> variable:

<programlisting>
gmake prefix=/usr/local/pgsql.new install
</programlisting></para>
-->
    <para>
 用源码安装时，如果你想要在自定义目录安装新服务器，可以使用 <literal>prefix</literal> 变量:

<programlisting>
make prefix=/usr/local/pgsql.new install
</programlisting></para>
   </step>

   <step>
<!--
    <title>Install pg_upgrade and pg_upgrade_support</title>
-->
    <title>Install pg_upgrade and pg_upgrade_support</title>

<!--
    <para>
     Install the <application>pg_upgrade</> binary and
     <application>pg_upgrade_support</> library in the new PostgreSQL
     installation.
    </para>
-->
    <para>
     在新PostgreSQL的安装中，安装 <application>pg_upgrade</> 二进制文件 and
     <application>pg_upgrade_support</>库文件 。 
    </para>
   </step>

   <step>
<!--
    <title>Initialize the new PostgreSQL cluster</title>
-->
    <title>初始化新的数据库实例</title>

<!--
    <para>
     Initialize the new cluster using <command>initdb</command>.
     Again, use compatible <command>initdb</command>
     flags that match the old cluster. Many
     prebuilt installers do this step automatically. There is no need to
     start the new cluster.
    </para>
-->
    <para>
     使用<command>initdb</command>命令初始化新的数据库实例。
     并且，要用兼容的旧数据库实例的<command>initdb</command>
     选项 。 很多预构建安装会自动完成这一部。不需要去启动新的数据库实例。
    </para>
   </step>

   <step>
<!--
    <title>Install custom shared object files</title>
-->
    <title>安装自定义的共享对象文件</title>

<!--
    <para>
     Install any custom shared object files (or DLLs) used by the old cluster
     into the new cluster, e.g. <filename>pgcrypto.so</filename>,
     whether they are from <filename>contrib</filename>
     or some other source. Do not install the schema definitions, e.g.
     <filename>pgcrypto.sql</>, because these will be upgraded from the old cluster.
     Also, any custom full text search files (dictionary, synonym,
     thesaurus, stop words) must also be copied to the new cluster.
     </para>
-->
    <para>
  安装任意旧集群用到的自定义共享对象文件（或者是DLL文件）,
      例如 <filename>pgcrypto.so</filename>, 无论他们来自 <filename>contrib</filename>
      或者其它的源。不要安装模式的定义， 例如<filename>pgcrypto.sql</>, 
  因为这些也会从旧集群中升级。另外，任何自定义全文本搜索文件（字典，同义词，辞典，停用词）
  必须也拷贝到新的集群中。
    </para>
   </step>

   <step>
<!--
    <title>Adjust authentication</title>
-->
    <title>调整连接认证</title>

<!--
    <para>
     <command>pg_upgrade</> will connect to the old and new servers several
     times, so you might want to set authentication to <literal>peer</>
     in <filename>pg_hba.conf</> or use a <filename>~/.pgpass</> file
     (see <xref linkend="libpq-pgpass">).
    </para>
-->
    <para>
     <command>pg_upgrade</> 会数次连到新旧数据库实例，所以你修改
 <filename>pg_hba.conf</>,可以把认证设置成或者使用 <filename>~/.pgpass</>文件 
     (参考 <xref linkend="libpq-pgpass">).
    </para>
   </step>

   <step>
<!--
    <title>Stop both servers</title>
-->
    <title>停止新旧数据库</title>

<!--
    <para>
     Make sure both database servers are stopped using, on Unix, e.g.:

<programlisting>
pg_ctl -D /opt/PostgreSQL/8.4 stop
pg_ctl -D /opt/PostgreSQL/9.0 stop
</programlisting>

     or on Windows, using the proper service names:

<programlisting>
NET STOP postgresql-8.4
NET STOP postgresql-9.0
</programlisting>

     or

<programlisting>
NET STOP pgsql-8.3  (<productname>PostgreSQL</> 8.3 and older used a different service name)
</programlisting></para>
-->
    <para>
      确保两个数据库都停止使用， 在类Unix操作系统中使用 例如:

<programlisting>
pg_ctl -D /opt/PostgreSQL/8.4 stop
pg_ctl -D /opt/PostgreSQL/9.0 stop
</programlisting>

在Windows中，使用windows可用的服务名：

<programlisting>
NET STOP postgresql-8.4
NET STOP postgresql-9.0
</programlisting>

     或者 

<programlisting>
NET STOP pgsql-8.3  (8.3和更早版本的<productname>PostgreSQL</>  使用了不同的服务器）
</programlisting></para>
   </step>

   <step>
<!--
    <title>Run <application>pg_upgrade</></title>
-->
    <title>运行 <application>pg_upgrade</></title>

<!--
    <para>
     Always run the <application>pg_upgrade</> binary of the new server, not the old one.
     <application>pg_upgrade</> requires the specification of the old and new cluster's
     data and executable (<filename>bin</>) directories. You can also specify
     user and port values, and whether you want the data linked instead of
     copied (the default).
    </para>
-->
    <para>
     运行新数据库的可执行命令 <application>pg_upgrade</> ， 而不是旧数据库的。
     <application>pg_upgrade</> 需要指定新旧数据库实例的数据目录和可执行的 
     (<filename>bin</>) 目录。 当然你还可以指定用户和端口，指定是否使用数据硬链接代替使用
 数据复制（默认方式）。
    </para>

<!--
    <para>
     If you use link mode, the upgrade will be much faster (no file
     copying) and use less disk space, but you will not be able to access
     your old cluster
     once you start the new cluster after the upgrade.  Link mode also
     requires that the old and new cluster data directories be in the
     same file system.  (Tablespaces and <filename>pg_xlog</> can be on
     different file systems.)  See <literal>pg_upgrade &#045;-help</> for a full
     list of options.
    </para>
-->
    <para>
 如果你使用链接模式，升级将会非常快（没有文件拷贝）并且占用更少的硬盘，但是你不能
 再访问你的旧数据库当你升级完成启动新的数据库实例。 链接模式还需要新旧数据库
 数据目录使用相同的文件系统。（表空间和 <filename>pg_xlog</> 可以在不同的
 文件系统。）  参考 <literal>pg_upgrade --help</> 查看完整的帮助选项列表。
    </para>

<!--
    <para>
     The <option>&#045;-jobs</> option allows multiple CPU cores to be used
     for copying/linking of files and to dump and reload database schemas
     in parallel;  a good place to start is the maximum of the number of
     CPU cores and tablespaces.  This option can dramatically reduce the
     time to upgrade a multi-database server running on a multiprocessor
     machine.
    </para>
-->
    <para>
     <option>--jobs</> 选项可以在拷贝/链接数据文件时使用多CPU核心并且可以并行
 的还原数据库模式;一个好的值是CPU核数和表空间的最大值。在一个多核数据库
 机器上升级一个多数据库服务器时这个选项能大量的节约时间。
    </para>

<!--
    <para>
     For Windows users, you must be logged into an administrative account, and
     then start a shell as the <literal>postgres</> user and set the proper path:

<programlisting>
RUNAS /USER:postgres "CMD.EXE"
SET PATH=%PATH%;C:\Program Files\PostgreSQL\9.0\bin;
</programlisting>

     and then run <application>pg_upgrade</> with quoted directories, e.g.:

<programlisting>
pg_upgrade.exe
        &#045;-old-datadir "C:/Program Files/PostgreSQL/8.4/data"
        &#045;-new-datadir "C:/Program Files/PostgreSQL/9.0/data"
        &#045;-old-bindir "C:/Program Files/PostgreSQL/8.4/bin"
        &#045;-new-bindir "C:/Program Files/PostgreSQL/9.0/bin"
</programlisting>

     Once started, <command>pg_upgrade</> will verify the two clusters are compatible
     and then do the upgrade. You can use <command>pg_upgrade &#045;-check</>
     to perform only the checks, even if the old server is still
     running. <command>pg_upgrade &#045;-check</> will also outline any
     manual adjustments you will need to make after the upgrade.  If you
     are going to be using link mode, you should use the <option>&#045;-link</>
     option with <option>&#045;-check</option> to enable link-mode-specific checks.
     <command>pg_upgrade</> requires write permission in the current directory.
    </para>
-->
    <para>
     For Windows users, you must be logged into an administrative account, and
 对于Windows用户来说，你必要登录一个管理员的帐号，并且用 <literal>postgres</>
 用户来启动一个终端设置可用的PATH

<programlisting>
RUNAS /USER:postgres "CMD.EXE"
SET PATH=%PATH%;C:\Program Files\PostgreSQL\9.0\bin;
</programlisting>

     然后运行 <application>pg_upgrade</> 带上引号， 例如:

<programlisting>
pg_upgrade.exe
        --old-datadir "C:/Program Files/PostgreSQL/8.4/data"
        --new-datadir "C:/Program Files/PostgreSQL/9.0/data"
        --old-bindir "C:/Program Files/PostgreSQL/8.4/bin"
        --new-bindir "C:/Program Files/PostgreSQL/9.0/bin"
</programlisting>

     开始以后， <command>pg_upgrade</>会验证两个数据库实例是兼容的 
     然后开始升级。 你可以使用 <command>pg_upgrade --check</>
     去执行检查工作，甚至是旧数据库实例仍在运行。<command>pg_upgrade --check</>
 会概述一些自定义的调整你需要在升级后去查看。如果你使用了链接模式，你必需要
     要用<option>--link</>参数和<option>--check</option> 来启用指定链接模式的
 检查。 <command>pg_upgrade</> 需要对当前目录有可写权限。
    </para>

<!--
    <para>
     Obviously, no one should be accessing the clusters during the
     upgrade.  <application>pg_upgrade</> defaults to running servers
     on port 50432 to avoid unintended client connections.
     You can use the same port number for both clusters when doing an
     upgrade because the old and new clusters will not be running at the
     same time.  However, when checking an old running server, the old
     and new port numbers must be different.
    </para>
-->
    <para>
 在数据库升级过程中不能访问数据库实例这是显而易见的。<application>pg_upgrade</> 
 默认在端口50432运行来避免预期之外的数据库连接。当你在升级的时候你可以在
  新旧数据库实例上使用同一个端口因为新旧数据库实例不会同时运行
     然而， 当查检旧数据库实例时， 新旧数据库实例的端口必需不同。
    </para>

<!--
    <para>
     If an error occurs while restoring the database schema, <command>pg_upgrade</> will
     exit and you will have to revert to the old cluster as outlined in <xref linkend="pgupgrade-step-revert">
     below. To try <command>pg_upgrade</command> again, you will need to modify the old
     cluster so the pg_upgrade schema restore succeeds. If the problem is a
     contrib module, you might need to uninstall the contrib module from
     the old cluster and install it in the new cluster after the upgrade,
     assuming the module is not being used to store user data.
    </para>
-->
    <para>
     如果在还原数据库模式时出现错误时， <command>pg_upgrade</> 将会退出你必需参照
 <xref linkend="pgupgrade-step-revert">的概要信息还原旧实例
     再一次使用<command>pg_upgrade</command> ， 你可能需要修改旧实例以让旧数据库模式
 升级成功。如果问题出现在某个外部模块上，你可能需要从旧实例上卸载这些外部模块
 然后在升级成功后再在新实例上安装它们，假设模块没有被用于储存用户数据。
    </para>
   </step>

   <step>
<!--
    <title>Restore <filename>pg_hba.conf</></title>
-->
    <title>还原 <filename>pg_hba.conf</></title>

<!--
    <para>
     If you modified <filename>pg_hba.conf</>, restore its original settings.
     It might also be necessary to adjust other configuration files in the new
     cluster to match the old cluster, e.g. <filename>postgresql.conf</>.
    </para>
-->
    <para>
     如果你修改了<filename>pg_hba.conf</>，还原它的原来的设置。
     还有可能需要去调整其它的配置文件去和旧的集群相匹配，例如<filename>postgresql.conf</>.
    </para>
   </step>

   <step>
<!--
    <title>Post-Upgrade processing</title>
-->
    <title>升级后的处理</title>

<!--
    <para>
     If any post-upgrade processing is required, pg_upgrade will issue
     warnings as it completes. It will also generate script files that must
     be run by the administrator. The script files will connect to each
     database that needs post-upgrade processing. Each script should be
     run using:

<programlisting>
psql  &#045;-username postgres &#045;-file script.sql postgres
</programlisting>

     The scripts can be run in any order and can be deleted once they have
     been run.
    </para>

    <caution>
    <para>
     In general it is unsafe to access tables referenced in rebuild scripts
     until the rebuild scripts have run to completion; doing so could yield
     incorrect results or poor performance. Tables not referenced in rebuild
     scripts can be accessed immediately.
    </para>
-->
    <para>
 如果有升级后续操作需要执行，pg_upgrade会在完成后发布出警告消息。
     同时它会生成由管理员运行脚本文件。 脚本会连到新旧数据库执行后续操作。
 脚本可以用下面命令执行：

<programlisting>
psql --username postgres --file script.sql postgres
</programlisting>

 脚本可以任意顺序执行，执行完后可以被删除。
    </para>

    <caution>
    <para>
 通常情况下在重建脚本运行结束之前不允许访问被引用的表;这样做可能会出现
 意想不到的错误结果或者是性能不佳 。不引用的表可以被立限访问。
    </para>
    </caution>
   </step>

   <step>
<!--
    <title>Statistics</title>
-->
    <title>统计</title>

<!--
    <para>
     Because optimizer statistics are not transferred by <command>pg_upgrade</>, you will
     be instructed to run a command to regenerate that information at the end
     of the upgrade.  You might need to set connection parameters to
     match your new cluster.
    </para>
-->
    <para>
     因为优化统计结果不会被<command>pg_upgrade</>传递， 你需要指定去运行命令去在升级
 完成后生成一些新的信息。你可能需要设置连接参数去匹配新的数据库实例。
    </para>
   </step>

   <step>
<!--
    <title>Delete old cluster</title>
-->
    <title>删除旧的数据库实例</title>

<!--
    <para>
     Once you are satisfied with the upgrade, you can delete the old
     cluster's data directories by running the script mentioned when
     <command>pg_upgrade</command> completes. (Automatic deletion is not
     possible if you have user-defined tablespaces inside the old data
     directory.) You can also delete the old installation directories
     (e.g. <filename>bin</>, <filename>share</>).
    </para>
-->
    <para>
 当<command>pg_upgrade</command>成功的升级完成后，你可能要运行脚本的
 方法删除旧集群的数据目录。（如果在旧的数据目录中有用户定义的表空间，
 那么自动删除是不可能的。）你也可以删除旧安装目录
 (例如<filename>bin</>, <filename>share</>)。
    </para>
   </step>

   <step id="pgupgrade-step-revert" performance="optional">
<!--
    <title>Reverting to old cluster</title>
-->
    <title>还原到旧实例</title>

<!--
    <para>
     If, after running <command>pg_upgrade</command>, you wish to revert to the old cluster,
     there are several options:
-->
    <para>
     如果，运行<command>pg_upgrade</command>后， 你希望回复到旧实例，
 下面是一些选项：

     <itemizedlist>
      <listitem>
<!--
       <para>
        If you ran <command>pg_upgrade</command>
        with <option>&#045;-check</>, no modifications were made to the old
        cluster and you can re-use it anytime.
       </para>
-->
       <para>
        如果你运行了加<option>--check</> 参数的<command>pg_upgrade</command>
，不会对旧数据实例产生影响可以随时更新实用。
       </para>
      </listitem>

      <listitem>
<!--
       <para>
        If you ran <command>pg_upgrade</command>
        with <option>&#045;-link</>, the data files are shared between the
        old and new cluster. If you started the new cluster, the new
        server has written to those shared files and it is unsafe to
        use the old cluster.
       </para>
-->
       <para>
        如果你运行了加<option>--link</>参数的 <command>pg_upgrade</command>
数据文件会被新旧数据实例所共用，如果你启动了新数据实例，新的
数据库会写到那些共享文件上，这对旧实例是不安全的。
       </para>
      </listitem>

      <listitem>
<!--
       <para>
        If you ran <command>pg_upgrade</command> <emphasis>without</>
        <option>&#045;-link</> or did not start the new server, the
        old cluster was not modified except that, if linking
        started, a <literal>.old</> suffix was appended to
        <filename>$PGDATA/global/pg_control</>.  To reuse the old
        cluster, possibly remove the <filename>.old</> suffix from
        <filename>$PGDATA/global/pg_control</>; you can then restart the
        old cluster.
       </para>
-->
       <para>
        如果你运行了<emphasis>不加</><option>--link</>参数的 <command>pg_upgrade</command>
或者没有启动新的数据库，旧实例并没有被修改过，如果链接开始，
<literal>.old</>后缀会出现在 <filename>$PGDATA/global/pg_control</>目录下。
为了重新旧数据实例，可以从<filename>$PGDATA/global/pg_control</>
目录下移除<filename>.old</>后缀的文件;然后你可以重启旧实例。
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </step>
  </procedure>

 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注意事项</title>

<!--
  <para>
   <application>pg_upgrade</> does not support upgrading of databases
   containing these <type>reg*</> OID-referencing system data types:
   <type>regproc</>, <type>regprocedure</>, <type>regoper</>,
   <type>regoperator</>, <type>regconfig</>, and
   <type>regdictionary</>.  (<type>regtype</> can be upgraded.)
  </para>
-->
  <para>
   <application>pg_upgrade</>不支持包含有<type>reg*</> 类型的OID-引用 比如
   以下类型: <type>regproc</>, <type>regprocedure</>, <type>regoper</>,
   <type>regoperator</>, <type>regconfig</>, and <type>regdictionary</>.
   (<type>regtype</> 可以被升级。）
  </para>

<!--
  <para>
   All failure, rebuild, and reindex cases will be reported by
   <application>pg_upgrade</> if they affect your installation;
   post-upgrade scripts to rebuild tables and indexes will be
   generated automatically.  If you are trying to automate the upgrade
   of many clusters, you should find that clusters with identical database
   schemas require the same post-upgrade steps for all cluster upgrades;
   this is because the post-upgrade steps are based on the database
   schemas, and not user data.
  </para>
-->
  <para>
   所有失败， 重建， 和重建索引会影响到你升级都会被<application>pg_upgrade</>报告。
   升级后的重建表和索引会自动生成。如果你尝试自动升级多个实例，你应该找到
   相同的数据模式需要相同的升级后步骤对所以的实例升级;这是因为升级后的步骤
   是基于数据库模式的，而不是用户数据。
  </para>

<!--
  <para>
   For deployment testing, create a schema-only copy of the old cluster,
   insert dummy data, and upgrade that.
  </para>
-->
  <para>
   部署测试，可以创建一个只读的模式从旧数据实例复制，插入一些虚拟的数据，
   然后升级他们。
  </para>

<!--
  <para>
   If you are upgrading a pre-<productname>PostgreSQL</> 9.2 cluster
   that uses a configuration-file-only directory, you must pass the
   real data directory location to <application>pg_upgrade</>, and
   pass the configuration directory location to the server, e.g.
   <literal>-d /real-data-directory -o '-D /configuration-directory'</>.
  </para>
-->
  <para>
   如果你升级<productname>PostgreSQL</> 9.2版本之前只用一个仅配置目录的
   的数据库，你必要传递真的数据目录给pg_upgrade,并且给数据库传递配置目录， 例如。
   <literal>-d /real-data-directory -o '-D /configuration-directory'</>。
  </para>

<!--
  <para>
   If using a pre-9.1 old server that is using a non-default Unix-domain
   socket directory or a default that differs from the default of the
   new cluster, set <envar>PGHOST</> to point to the old server's socket
   location.  (This is not relevant on Windows.)
  </para>
-->
  <para>
   如果用一个9.1之前用了非默认的Unix域socket目录或者默认的位置和新实例
   默认位置不一致，要设置 <envar>PGHOST</>来指定旧数据库的socket位置。
   （在Windows下不需要。）
  </para>

<!--
  <para>
   A Log-Shipping Standby Server (<xref linkend="warm-standby">) cannot
   be upgraded because the server must allow writes.  The simplest way
   is to upgrade the primary and use <command>rsync</> to rebuild the
   standbys.  You can run <command>rsync</> while the primary is down,
   or as part of a base backup (<xref linkend="backup-base-backup">)
   which overwrites the old standby cluster.
  </para>
-->
  <para>
   一个日志同步的数据库（<xref linkend="warm-standby">) 不能被升级原因是
   升级数据库必需要允许写。很简单的方式是升级方库然后用rsync去重新建
   备份。你可以运行<command>rsync</> 当主库停用后，或者作为一次基础备份
   (<xref linkend="backup-base-backup">)去覆盖旧的数据库备份。
  </para>

<!--
  <para>
   If you want to use link mode and you do not want your old cluster
   to be modified when the new cluster is started, make a copy of the
   old cluster and upgrade that in link mode. To make a valid copy
   of the old cluster, use <command>rsync</> to create a dirty
   copy of the old cluster while the server is running, then shut down
   the old server and run <command>rsync</> again to update the copy with any
   changes to make it consistent.  You might want to exclude some
   files, e.g. <filename>postmaster.pid</>, as documented in <xref
   linkend="backup-lowlevel-base-backup">.  If your file system supports
   file system snapshots or copy-on-write file copies, you can use that
   to make a backup of the old cluster and tablespaces, though the snapshot
   and copies must be created simultaneously or while the database server
   is down.
  </para>
-->
  <para>
   如果你想要用link方式并且当新实例启动后你不想要你的旧数据库实例数据被修改
   用<command>rsync</> 从运行中的旧实例新建一个脏的数据复制，然后关闭旧实例
   再一次运行<command>rsync</> 保证所有的数据更改保持一致的。你可能需要
   排除一些文件，例如。<filename>postmaster.pid</>, 还有在 <xref
   linkend="backup-lowlevel-base-backup">提到的文件。
   如果你的文件系统支持文件系统快照或写入时复制文件备份，
   你可以使用它来制作老集群和表空间的一个备份，
   尽管快照和拷贝必须同时创建或数据库服务器关闭。
  </para>

 <refsect2>
<!--
  <title>Limitations in Upgrading from PostgreSQL 8.3</title>
-->
  <title>从PostgreSQL 8.3升级的局限性</title>

<!--
  <para>
   Upgrading <emphasis>from</emphasis> PostgreSQL 8.3 has additional restrictions not present
   when upgrading from later PostgreSQL releases.  For example,
   pg_upgrade will not work for upgrading from 8.3 if a user column
   is defined as:
   <itemizedlist>
    <listitem>
     <para>
      a <type>tsquery</> data type
     </para>
    </listitem>
    <listitem>
     <para>
      data type <type>name</> and is not the first column
     </para>
    </listitem>
   </itemizedlist>
  </para>
-->
  <para>
   <emphasis>从</emphasis> PostgreSQL 8.3 升级有一些额外的条件没有被提及
   当升级到以后的PostgreSQL发行版本。  举个例子，在8.3版本中如果用户字段中
   定义了:
   <itemizedlist>
    <listitem>
     <para>
      一个 <type>tsquery</> 数据类型
     </para>
    </listitem>
    <listitem>
     <para>
      数据类型<type>name</> 并不是第一个字段pg_upgrade将不支持升级。
     </para>
    </listitem>
   </itemizedlist>
  </para>

<!--
  <para>
   You must drop any such columns and upgrade them manually.
  </para>
-->
  <para>
你必需要删除任何这样的字段并且手动升级他们。
  </para>

<!--
  <para>
   pg_upgrade will not work if the <filename>ltree</>
   contrib module is installed in a database.
  </para>
-->
  <para>
如果<filename>ltree</>模块被安装到数据库中，pg_upgradebu将不支持。
  </para>

<!--
  <para>
   pg_upgrade will require a table rebuild if:
   <itemizedlist>
    <listitem>
     <para>
      a user column is of data type <type>tsvector</type>
     </para>
    </listitem>
   </itemizedlist>
  </para>
-->
  <para>
pg_upgrade 会需要重建表如果表：
   <itemizedlist>
    <listitem>
     <para>
      一个字段的数据类型是<type>tsvector</type>
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!-- 
     pg_upgrade will require a reindex if:
-->
pg_upgrade 会需要重建索引如果：
   <itemizedlist>
    <listitem>
     <para>
<!-- 
     an index is of type hash or GIN
-->
      一个索引的类型是hash 或者 GIN
     </para>
    </listitem>
    <listitem>
     <para>
<!-- 
      an index uses <function>bpchar_pattern_ops</>
-->
      一个使用了 <function>bpchar_pattern_ops</>的索引
     </para>
    </listitem>
   </itemizedlist>
  </para>

<!--
  <para>
   Also, the default datetime storage format changed to integer after
   <productname>PostgreSQL</> 8.3. pg_upgrade will check that the datetime storage format
   used by the old and new clusters match. Make sure your new cluster is
   built with the configure flag <option>&#045;-disable-integer-datetimes</>.
  </para>
-->
  <para>
同样的，<productname>PostgreSQL</> 8.3之后的版本默认的日期存储格式更改到整型。
pg_upgrade会查检日期存储格式让新旧数据库实例匹配。确保你的新实例是构建时
   configure 带上了<option>--disable-integer-datetimes</>参数。
  </para>

<!--
  <para>
   For Windows users, note that due to different integer datetimes settings
   used by the graphical installer and the MSI installer, it is only
   possible to upgrade from version 8.3 of the installer distribution to
   version 8.4 or later of the installer distribution. It is not
   possible to upgrade from the MSI installer to the new graphical installer.
  </para>
-->
  <para>
   对于Windows用户，要注意的不同的整型的日期类型设置是在图形华和MSI安装程序中，
   它仅仅可能从版本8.3的安装版到8.4升级或者最近的安装版。不可能从MSI安装程序
   到升级新的图形化安装程序中。
  </para>

 </refsect2>

 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="app-initdb"></member>
   <member><xref linkend="app-pg-ctl"></member>
   <member><xref linkend="app-pgdump"></member>
   <member><xref linkend="app-postgres"></member>
  </simplelist>
 </refsect1>
</refentry>
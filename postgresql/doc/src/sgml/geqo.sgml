<!-- doc/src/sgml/geqo.sgml -->

 <chapter id="geqo">

<!--
  <title>Genetic Query Optimizer</title>
-->
  <title>基因查询优化器</title>

  <para>
   <note>
<!--
    <title>Author</title>
-->
    <title>作者</title>
    <para>
<!--
     Written by Martin Utesch (<email>utesch@aut.tu-freiberg.de</email>)
     for the Institute of Automatic Control at the University of Mining and Technology in Freiberg, Germany.
-->
由Martin Utesch（<email>utesch@aut.tu-freiberg.de</email>）为德国弗来堡矿业及技术大学自动控制系写作。
    </para>
   </note>
  </para>

  <sect1 id="geqo-intro">
<!--
   <title>Query Handling as a Complex Optimization Problem</title>
-->
   <title>作为复杂优化问题的查询处理</title>

   <para>
<!--
    Among all relational operators the most difficult one to process
    and optimize is the <firstterm>join</firstterm>. The number of
    possible query plans grows exponentially with the
    number of joins in the query. Further optimization effort is
    caused by the support of a variety of <firstterm>join
    methods</firstterm> (e.g., nested loop, hash join, merge join in
    <productname>PostgreSQL</productname>) to process individual joins
    and a diversity of <firstterm>indexes</firstterm> (e.g.,
    B-tree, hash, GiST and GIN in <productname>PostgreSQL</productname>) as
    access paths for relations.
-->
在所有关系型操作符里，最难以处理和优化的一个是<firstterm>连接</firstterm>。
一个查询需要回答的可选规划的数目将随着该查询包含的连接的个数呈指数增长。
在访问关系分支时的进一步优化措施是由多种多样的<firstterm>连接方法</firstterm>
(例如嵌套循环、索引扫描、融合连接等)来支持处理独立的连接和多种多样的<firstterm>索引</firstterm>
(比如<productname>PostgreSQL</productname>中的 B-tree, hash, GiST和 GIN)。
   </para>

   <para>
<!--
    The normal <productname>PostgreSQL</productname> query optimizer
    performs a <firstterm>near-exhaustive search</firstterm> over the
    space of alternative strategies. This algorithm, first introduced
    in IBM's System R database, produces a near-optimal join order,
    but can take an enormous amount of time and memory space when the
    number of joins in the query grows large. This makes the ordinary
    <productname>PostgreSQL</productname> query optimizer
    inappropriate for queries that join a large number of tables.
-->
目前<productname>PostgreSQL</productname>优化器的实现在候选策略空间里执行一个<firstterm>近似穷举搜索</firstterm>。
这个算法最早是在 IBM System R database 数据库中引入的，它生成一个近乎最优的连接顺序，
但是如果查询中的连接增长得很大，它可能会消耗大量的时间和内存空间。
这样就使普通的<productname>PostgreSQL</productname>查询优化器不适合那种连接了大量表的查询。
   </para>

   <para>
<!--
    The Institute of Automatic Control at the University of Mining and
    Technology, in Freiberg, Germany, encountered some problems when
    it wanted to use <productname>PostgreSQL</productname> as the
    backend for a decision support knowledge based system for the
    maintenance of an electrical power grid. The DBMS needed to handle
    large join queries for the inference machine of the knowledge
    based system. The number of joins in these queries made using the
    normal query optimizer infeasible.
-->
德国弗来堡矿业及技术大学自动控制系的成员在试图把<productname>PostgreSQL</productname>
作为用于一个电力网维护中做决策支持的知识库系统的后端时，碰到了上面的问题。
该 DBMS 需要为知识库系统的推导机处理很大的连接查询。
在可能的查询规划空间里进行检索的恶劣性能引起了人们对发展新的优化技术的需求。
   </para>

   <para>
<!--
    In the following we describe the implementation of a
    <firstterm>genetic algorithm</firstterm> to solve the join
    ordering problem in a manner that is efficient for queries
    involving large numbers of joins.
-->
在随后的内容里，描述了一个基因算法，这个算法用一种对涉及大量连接的查询很有效的方式解决了连接顺序的问题。
   </para>
  </sect1>

  <sect1 id="geqo-intro2">
<!--
   <title>Genetic Algorithms</title>
-->
   <title>基因算法</title>

   <para>
<!--
    The genetic algorithm (<acronym>GA</acronym>) is a heuristic optimization method which
    operates through randomized search. The set of possible solutions for the
    optimization problem is considered as a
    <firstterm>population</firstterm> of <firstterm>individuals</firstterm>.
    The degree of adaptation of an individual to its environment is specified
    by its <firstterm>fitness</firstterm>.
-->
基因算法(<acronym>GA</acronym>)是一种启发式的优化法，它是通过不确定的随机搜索进行操作。
优化问题的可能解的集合被认为是<firstterm>个体</firstterm>组成的<firstterm>种群</firstterm>。
一个个体对它的环境的适应程度由它的<firstterm>适应性</firstterm>表示。
   </para>

   <para>
<!--
    The coordinates of an individual in the search space are represented
    by <firstterm>chromosomes</firstterm>, in essence a set of character
    strings. A <firstterm>gene</firstterm> is a
    subsection of a chromosome which encodes the value of a single parameter
    being optimized. Typical encodings for a gene could be <firstterm>binary</firstterm> or
    <firstterm>integer</firstterm>.
-->
一个个体在搜索空间里的参照物用<firstterm>染色体</firstterm>表示(实际上是一套字符串)。
一个<firstterm>基因</firstterm>是染色体的一个片段，基因是被优化的单个参数的编码。
对一个基因的典型的编码可以是<firstterm>二进制</firstterm>或<firstterm>整数</firstterm>。
   </para>

   <para>
<!--
    Through simulation of the evolutionary operations <firstterm>recombination</firstterm>,
    <firstterm>mutation</firstterm>, and
    <firstterm>selection</firstterm> new generations of search points are found
    that show a higher average fitness than their ancestors.
-->
通过仿真进化过程的<firstterm>重组</firstterm>、<firstterm>变异</firstterm>
、<firstterm>选择</firstterm>找到新一代的搜索点，它们的平均适应性要比它们的祖先好。
   </para>

   <para>
<!--
    According to the <systemitem class="resource">comp.ai.genetic</> <acronym>FAQ</acronym> it cannot be stressed too
    strongly that a <acronym>GA</acronym> is not a pure random search for a solution to a
    problem. A <acronym>GA</acronym> uses stochastic processes, but the result is distinctly
    non-random (better than random).
-->
根据<systemitem class="resource">comp.ai.genetic</> <acronym>FAQ</acronym>
，不论怎么强调<acronym>GA</acronym>在解决一个问题时不是纯随机搜索都不过份。
<acronym>GA</acronym>使用随机处理，但是结果明显不是随机的(比随机更好)。
   </para>

   <figure id="geqo-diagram">
<!--
    <title>Structured Diagram of a Genetic Algorithm</title>
-->
    <title>基因算法的结构化框图</title>

    <informaltable frame="none">
     <tgroup cols="2">
      <tbody>
       <row>
        <entry>P(t)</entry>
<!--
        <entry>generation of ancestors at a time t</entry>
-->
        <entry>时刻 t 的父代</entry>
       </row>

       <row>
        <entry>P''(t)</entry>
<!--
        <entry>generation of descendants at a time t</entry>
-->
        <entry>时刻 t 的子代</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

<literallayout class="monospaced">
+=========================================+
|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Algorithm GA  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;|
+=========================================+
| INITIALIZE t := 0                       |
+=========================================+
| INITIALIZE P(t)                         |
+=========================================+
| evaluate FITNESS of P(t)                |
+=========================================+
| while not STOPPING CRITERION do         |
|   +-------------------------------------+
|   | P'(t)  := RECOMBINATION{P(t)}       |
|   +-------------------------------------+
|   | P''(t) := MUTATION{P'(t)}           |
|   +-------------------------------------+
|   | P(t+1) := SELECTION{P''(t) + P(t)}  |
|   +-------------------------------------+
|   | evaluate FITNESS of P''(t)          |
|   +-------------------------------------+
|   | t := t + 1                          |
+===+=====================================+
</literallayout>
   </figure>
  </sect1>

  <sect1 id="geqo-pg-intro">
<!--
   <title>Genetic Query Optimization (<acronym>GEQO</acronym>) in PostgreSQL</title>
-->
   <title>PostgreSQL 里的基因查询优化(<acronym>GEQO</acronym>)</title>

   <para>
<!--
    The <acronym>GEQO</acronym> module approaches the query
    optimization problem as though it were the well-known traveling salesman
    problem (<acronym>TSP</acronym>).
    Possible query plans are encoded as integer strings. Each string
    represents the join order from one relation of the query to the next.
    For example, the join tree
-->
<acronym>GEQO</acronym>模块是试图解决类似著名的旅行商问题(TSP)的查询优化问题的。
可能的查询规划被当作整数字符串进行编码。每个字符串代表查询里面一个关系到下一个关系的连接的顺序。例如，下面的连接树
<literallayout class="monospaced">
   /\
  /\ 2
 /\ 3
4  1
</literallayout>
<!--
    is encoded by the integer string '4-1-3-2',
    which means, first join relation '4' and '1', then '3', and
    then '2', where 1, 2, 3, 4 are relation IDs within the
    <productname>PostgreSQL</productname> optimizer.
-->
是用整数字符串'4-1-3-2'编码的，这就是说，首先连接关系'4'和'1'，然后'3'，然后是'2'，
这里的 1, 2, 3, 4 都是<productname>PostgreSQL</productname>优化器里的关系标识(ID)。
   </para>

   <para>
<!--
    Specific characteristics of the <acronym>GEQO</acronym>
    implementation in <productname>PostgreSQL</productname>
    are:
-->
在<productname>PostgreSQL</productname>里的<acronym>GEQO</acronym>实现的一些特性是：

    <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>
<!--
       Usage of a <firstterm>steady state</firstterm> <acronym>GA</acronym> (replacement of the least fit
       individuals in a population, not whole-generational replacement)
       allows fast convergence towards improved query plans. This is
       essential for query handling with reasonable time;
-->
使用<firstterm>稳定状态</firstterm>的 <acronym>GA</acronym>(替换全体中最小适应性的个体，而不是整代的替换)
允许向改进了的查询规划快速逼近。这一点对在合理时间内处理查询是非常重要的；
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       Usage of <firstterm>edge recombination crossover</firstterm>
       which is especially suited to keep edge losses low for the
       solution of the <acronym>TSP</acronym> by means of a
       <acronym>GA</acronym>;
-->
<firstterm>边缘重组交叉</firstterm>的使用特别适于在用<acronym>GA</acronym>解决<acronym>TSP</acronym>问题时保持边缘损失最低。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       Mutation as genetic operator is deprecated so that no repair
       mechanisms are needed to generate legal <acronym>TSP</acronym> tours.
-->
否决了把突变作为基因操作符的做法，这样生成合法的<acronym>TSP</acronym>漫游时不需要修复机制。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    Parts of the <acronym>GEQO</acronym> module are adapted from D. Whitley's
    Genitor algorithm.
-->
<acronym>GEQO</acronym>模块的一部分是采用的 D.Whitley 的 Genitor 算法。
   </para>

   <para>
<!--
    The <acronym>GEQO</acronym> module allows
    the <productname>PostgreSQL</productname> query optimizer to
    support large join queries effectively through
    non-exhaustive search.
-->
<acronym>GEQO</acronym>模块让<productname>PostgreSQL</productname>查询优化器可以通过非穷举搜索有效地支持大的连接查询。
   </para>

  <sect2>
<!--
   <title>Generating Possible Plans with <acronym>GEQO</acronym></title>
-->
   <title><acronym>GEQO</acronym>生成的候选规划</title>

   <para>
<!--
    The <acronym>GEQO</acronym> planning process uses the standard planner
    code to generate plans for scans of individual relations.  Then join
    plans are developed using the genetic approach.  As shown above, each
    candidate join plan is represented by a sequence in which to join
    the base relations.  In the initial stage, the <acronym>GEQO</acronym>
    code simply generates some possible join sequences at random.  For each
    join sequence considered, the standard planner code is invoked to
    estimate the cost of performing the query using that join sequence.
    (For each step of the join sequence, all three possible join strategies
    are considered; and all the initially-determined relation scan plans
    are available.  The estimated cost is the cheapest of these
    possibilities.)  Join sequences with lower estimated cost are considered
    <quote>more fit</> than those with higher cost.  The genetic algorithm
    discards the least fit candidates.  Then new candidates are generated
    by combining genes of more-fit candidates &mdash; that is, by using
    randomly-chosen portions of known low-cost join sequences to create
    new sequences for consideration.  This process is repeated until a
    preset number of join sequences have been considered; then the best
    one found at any time during the search is used to generate the finished
    plan.
-->
<acronym>GEQO</acronym>规划过程使用标准的规划器代码生成各个独立表的扫描规划。
然后用遗传算法生成连接规划。正如上面讲到的，每个候选的连接规划由基本表的连接序列表示。
在初始阶段， <acronym>GEQO</acronym>简单的生成一些随机的连接序列。
对每个连接序列，调用标准的规划器代码评估以这样的连接序列执行查询的成本。
（对连接序列的每一个步骤，考虑所有可能的三种连接策略；并且所有初期决定的关系扫描规划也是有效的。
评估值是所有这些可能性中最廉价的。 ）
评估成本更低的连接序列被认为比代价高的那些连接序列<quote>更加合适</>。基因算法淘汰那些最不合适的候选。
然后通过组合最合适的基因生成新的候选，即通过随机选择一部分低成本的连接序列去产生作为候选的新的序列。
这个过程不断重复直到考虑过的连接序列达到一个预设的值，然后在搜索期间找到的最好的结果作为最终生成的执行计划。
   </para>

   <para>
<!--
    This process is inherently nondeterministic, because of the randomized
    choices made during both the initial population selection and subsequent
    <quote>mutation</> of the best candidates.  To avoid surprising changes
    of the selected plan, each run of the GEQO algorithm restarts its
    random number generator with the current <xref linkend="guc-geqo-seed">
    parameter setting.  As long as <varname>geqo_seed</> and the other
    GEQO parameters are kept fixed, the same plan will be generated for a
    given query (and other planner inputs such as statistics).  To experiment
    with different search paths, try changing <varname>geqo_seed</>.
-->
这个过程天生是不确定的，因为在选择初期总群以及随后对最佳候补实施<quote>突变</>时都带有随机性。
为了避免被选中的计划发生令人惊讶的变化，每次GEQO算法执行都根据当前<xref linkend="guc-geqo-seed">参数的设置开始一个随机数生成器。
只要<varname>geqo_seed</>以及其他GEQO参数保持固定，对一个给定的查询(以及其他规划器输入，比如统计信息)将生成相同的执行计划。
如果要尝试不同的搜索路径，可以尝试改变<varname>geqo_seed</>。
   </para>

  </sect2>

  <sect2 id="geqo-future">
<!--
   <title>Future Implementation Tasks for
    <productname>PostgreSQL</> <acronym>GEQO</acronym></title>
-->
   <title><productname>PostgreSQL</> <acronym>GEQO</acronym>未来的实现任务</title>

     <para>
<!--
      Work is still needed to improve the genetic algorithm parameter
      settings.
      In file <filename>src/backend/optimizer/geqo/geqo_main.c</filename>,
      routines
      <function>gimme_pool_size</function> and <function>gimme_number_generations</function>,
      we have to find a compromise for the parameter settings
      to satisfy two competing demands:
-->
还需要一些工作来改进基因算法的参数设置。
在文件<filename>src/backend/optimizer/geqo/geqo_main.c</filename>里的过程
 <function>gimme_pool_size</function>和 <function>gimme_number_generations</function>
 在设置参数时不得不为两个竞争需求做出折衷：
      <itemizedlist spacing="compact">
       <listitem>
        <para>
<!--
         Optimality of the query plan
-->
查询规划的优化
        </para>
       </listitem>
       <listitem>
        <para>
<!--
         Computing time
-->
计算处理时间
        </para>
       </listitem>
      </itemizedlist>
     </para>

     <para>
<!--
      In the current implementation, the fitness of each candidate join
      sequence is estimated by running the standard planner's join selection
      and cost estimation code from scratch.  To the extent that different
      candidates use similar sub-sequences of joins, a great deal of work
      will be repeated.  This could be made significantly faster by retaining
      cost estimates for sub-joins.  The problem is to avoid expending
      unreasonable amounts of memory on retaining that state.
-->
在当前的实现中，每个候选连接序列的适应性是通过运行标准规划器的连接选择和代价评估代码从头开始评估的。
当不同的候选使用相似的连接子序列，将有大量的工作会重复。
通过保持子序列的代价评估值可以显著的提升速度。问题在于要避免为了保持这个状态而不合理的内存扩展。
     </para>

     <para>
<!--
      At a more basic level, it is not clear that solving query optimization
      with a GA algorithm designed for TSP is appropriate.  In the TSP case,
      the cost associated with any substring (partial tour) is independent
      of the rest of the tour, but this is certainly not true for query
      optimization.  Thus it is questionable whether edge recombination
      crossover is the most effective mutation procedure.
-->
在最基本的层面上，并不清楚用给 TSP 涉及的 GA 算法解决查询优化的问题是否合适。
在 TSP 的情况下，与任何子字符串(部分旅游)相关的开销都是独立于旅游的其它部分的，但是目前，这一点对于查询优化是不同的。
因此，可以怀疑边缘重组交叉是否最有效的突变过程。
     </para>

   </sect2>
  </sect1>

 <sect1 id="geqo-biblio">
<!--
  <title>Further Reading</title>
-->
  <title>进一步阅读</title>

  <para>
<!--
   The following resources contain additional information about
   genetic algorithms:
-->
下面的资源包含一些额外的关于基因算法的信息：

   <itemizedlist>
    <listitem>
     <para>
      <ulink url="http://www.aip.de/~ast/EvolCompFAQ/">
      The Hitch-Hiker's Guide to Evolutionary Computation</ulink>, (FAQ for <ulink
      url="news://comp.ai.genetic"></ulink>)
     </para>
    </listitem>

    <listitem>
     <para>
      <ulink url="http://www.red3d.com/cwr/evolve.html">
      Evolutionary Computation and its application to art and design</ulink>, by
      Craig Reynolds
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="ELMA04">
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="FONG">
     </para>
    </listitem>
   </itemizedlist>
  </para>

 </sect1>
</chapter>

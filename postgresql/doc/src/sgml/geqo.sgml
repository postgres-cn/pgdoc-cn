<!-- doc/src/sgml/geqo.sgml -->

<<<<<<< HEAD
 <chapter id="geqo">

<!--
  <title>Genetic Query Optimizer</title>
-->
  <title>基因查询优化器</title>
=======
 <chapter id="geqo">  

  <title>遗传查询优化器</title>
>>>>>>> upstream/master

  <para>
   <note>
    <title>作者</title>
    <para>
     Written by Martin Utesch (<email>utesch@aut.tu-freiberg.de</email>)
     for the Institute of Automatic Control at the University of Mining and Technology in Freiberg, Germany.
    </para>
   </note>
  </para>

  <sect1 id="geqo-intro">
   <title>将查询处理看成是一个复杂的优化问题</title>

   <para>
    在所有关系操作符中，最难于处理和优化的是<firstterm>连接</firstterm>。可能的查询计划数目以查询中连接数量的指数增长。对各种各样处理独立连接的<firstterm>连接方法</firstterm>（如<productname>PostgreSQL</productname>中的嵌套循环、哈希连接、归并连接）和多种关系访问方法的<firstterm>indexes</firstterm>（如<productname>PostgreSQL</productname>中的 B 树、哈希、GiST 和 GIN）的支持也进一步加重了优化的负担。
   </para>

   <para>
    通常的<productname>PostgreSQL</productname>查询优化器会执行一次在可选策略空间上的<firstterm>近似穷举搜索</firstterm>。这个算法最早由 IBM 的系统 R 数据库引入，它能产生接近最优的连接顺序，但是当查询中的连接数增长到很大时，该算法需要大量的时间和内存空间。这使得普通的<productname>PostgreSQL</productname>查询优化器不适合需要连接大量表的查询。
   </para>

   <para>
    德国弗莱堡的矿业大学自动控制学院在使用<productname>PostgreSQL</productname>作为电力网格维护决策支持知识系统的后端时遇到了一些问题。DBMS 需要为知识系统中的推理机器处理大量连接查询。这些查询中的连接数不可能用普通的查询优化器来处理。
   </para>

   <para>
    接下来我们将介绍一种<firstterm>遗传算法</firstterm>的实现，它被用来以一种更有效率的方式为涉及大量连接的查询解决连接顺序问题。
   </para>
  </sect1>

  <sect1 id="geqo-intro2">
   <title>遗传算法</title>

   <para>
    遗传算法（<acronym>GA</acronym>）是一种通过随机搜索操作的启发式优化方法。优化问题的可能的解决方案集合被看成是<firstterm>个体</firstterm>的<firstterm>种群</firstterm>。一个个体对于它的环境的适应程度由其<firstterm>适应度</firstterm>指定。
   </para>

   <para>
    搜索空间中一个个体的座标被表示为<firstterm>染色体</firstterm>，实质上是一个字符串集合。一个<firstterm>基因</firstterm>是一个染色体的一个片段，它编码了一个要被优化参数的值。一个基因的典型编码包括<firstterm>二进制</firstterm>或<firstterm>整数</firstterm>。
   </para>

   <para>
    通过对<firstterm>重组</firstterm>、<firstterm>变异</firstterm>和<firstterm>选择</firstterm>的模拟，比父辈平均适应度更好的新一代搜索点将被找到。
   </para>

   <para>
    根据<systemitem class="resource">comp.ai.genetic</> <acronym>FAQ</acronym>，<acronym>GA</acronym>并非是一个纯粹的随机搜索。<acronym>GA</acronym>会使用随机处理，但是结果的确是非随机的（比随机好）。
   </para>

   <figure id="geqo-diagram">
    <title>一种遗传算法的结构图</title>

    <informaltable frame="none">
     <tgroup cols="2">
      <tbody>
       <row>
        <entry>P(t)</entry>
        <entry>在时刻 t 的祖先代</entry>
       </row>

       <row>
        <entry>P''(t)</entry>
        <entry>在时刻 t 的后代</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

<literallayout class="monospaced">
+=========================================+
|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Algorithm GA  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;|
+=========================================+
| INITIALIZE t := 0                       |
+=========================================+
| INITIALIZE P(t)                         |
+=========================================+
| evaluate FITNESS of P(t)                |
+=========================================+
| while not STOPPING CRITERION do         |
|   +-------------------------------------+
|   | P'(t)  := RECOMBINATION{P(t)}       |
|   +-------------------------------------+
|   | P''(t) := MUTATION{P'(t)}           |
|   +-------------------------------------+
|   | P(t+1) := SELECTION{P''(t) + P(t)}  |
|   +-------------------------------------+
|   | evaluate FITNESS of P''(t)          |
|   +-------------------------------------+
|   | t := t + 1                          |
+===+=====================================+
</literallayout>
   </figure>
  </sect1>

  <sect1 id="geqo-pg-intro">
   <title>PostgreSQL 中的遗传查询优化（<acronym>GEQO</acronym>）</title>

   <para>
    <acronym>GEQO</acronym>模块把查询优化问题当做著名的货郎担问题（<acronym>TSP</acronym>）来处理。可能的查询计划被编码为整数的串。每一个串表示从查询中一个关系到下一个关系的连接顺序。例如，连接树
<literallayout class="monospaced">
   /\
  /\ 2
 /\ 3
4  1
</literallayout>
    被编码为整数串 '4-1-3-2'，它表示首先连接关系 '4' 和 '1'，然后连接 '3'，最后连接 '2'。这里 1、2、3、4 是<productname>PostgreSQL</productname>优化器中的关系 ID。
   </para>

   <para>
    <productname>PostgreSQL</productname>中<acronym>GEQO</acronym>实现的特点有：

    <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>
       一种<firstterm>稳态</firstterm> <acronym>GA</acronym>（在种群中替换适应度最差的个体，而不是整代替换）的使用允许对改进的查询计划快速收敛。这对在合理时间内处理查询是最重要的；
      </para>
     </listitem>

     <listitem>
      <para>
       <firstterm>边重组杂交</firstterm>的使用特别适合于通过<acronym>GA</acronym>为<acronym>TSP</acronym>的解决方案保持低丢边率；
      </para>
     </listitem>

     <listitem>
      <para>
       遗传操作符变异被废弃，这样不需要修补机制来产生合法的<acronym>TSP</acronym>旅行。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <acronym>GEQO</acronym>模块的一部分是从 D. Whitley 的遗传算法中改编而来。
   </para>

   <para>
    <acronym>GEQO</acronym>模块允许<productname>PostgreSQL</productname>查询优化器支持通过非穷举搜索高效地处理大量连接的查询。
   </para>

  <sect2>
   <title>用<acronym>GEQO</acronym>产生可能的计划</title>

   <para>
    <acronym>GEQO</acronym>规划处理使用标准的规划器代码来产生用于扫描个体关系的计划。然后使用遗传方法发展连接计划。如上所示，每一个候选连接计划被表示为一个连接基本关系的序列。在初始阶段，<acronym>GEQO</acronym>代码简单地随机产生某些可能的连接序列。对于被考虑的每一个连接序列，标准规划器代码被调用来估算使用该序列执行查询的代价（对于连接序列的每一步，所有三种连接策略都被考虑；并且所有初始决定的关系扫描计划都可用。估计的代价是这些可能性中最低的那个。）。具有较低估计代价的连接序列被认为比具有较高代价的<quote>更适合</>。遗传算法会丢弃最不适应的候选。然后通过组合更适合的候选的基因来产生新的候选 &mdash; 即使从已知代价低的连接序列随机选择片段来创建用于考虑的新序列。这个处理将被重复，直到已经考虑的连接序列的数量达到一个预设值。然后在搜索中任何时候找到的最好的一个将被用来产生最终的计划。
   </para>

   <para>
    由于在初始种群选择和后续最佳候选的<quote>变异</>过程中都采用了随机选择，所以这种处理天生就是非确定性的。要避免被选中计划发生出乎意料的改变，每次 GEQO 算法的运行都会使用当前<xref linkend="guc-geqo-seed">参数设置来重启它的随机数生成器。只要<varname>geqo_seed</>以及其他 GEQO 参数保持固定（以及其他规划器输入，如统计信息），对一个给定的查询将产生相同的计划。要试验不同的搜索路径，可以尝试改变<varname>geqo_seed</>。
   </para>

  </sect2>

  <sect2 id="geqo-future">
   <title><productname>PostgreSQL</> <acronym>GEQO</acronym>的未来实现任务</title>

     <para>
      仍需对改进遗传算法的参数设置做一些工作。在文件<filename>src/backend/optimizer/geqo/geqo_main.c</filename>、例程<function>gimme_pool_size</function>和<function>gimme_number_generations</function>中，我们必须为参数设置找到一种折中来满足两个互相竞争的需求：
      <itemizedlist spacing="compact">
       <listitem>
        <para>
         查询计划的最优性
        </para>
       </listitem>
       <listitem>
        <para>
         计算时间
        </para>
       </listitem>
      </itemizedlist>
     </para>

     <para>
      在当前的实现中，每一个候选连接序列的适应度通过运行标准规划器的连接选择和代价估计代码从零估算而来。即使不同的候选中使用了相似的连接子序列，还是需要重复大量的工作。通过保留子连接的代价估计可以在这种情况下节省很多时间。但问题在于要避免为了保留那样的状态而不合理地占用过多内存。
     </para>

     <para>
      在更基础的层面上，用一个为 TSP 设计的 GA 算法来解决查询优化问题是否合适也还需要探讨。在 TSP 情况中，与任何子串（部分旅程）相关的代价独立于剩余的旅程，但是对于查询优化肯定不是这样。因此边重组杂交是否比变异过程更有效还存有疑问。
     </para>

   </sect2>
  </sect1>

 <sect1 id="geqo-biblio">
  <title>进一步阅读</title>

  <para>
   下列资源包含关于遗传算法更多的信息：

   <itemizedlist>
    <listitem>
     <para>
      <ulink url="http://www.aip.de/~ast/EvolCompFAQ/">
      The Hitch-Hiker's Guide to Evolutionary Computation</ulink>, (FAQ for <ulink
      url="news://comp.ai.genetic"></ulink>)
     </para>
    </listitem>

    <listitem>
     <para>
      <ulink url="http://www.red3d.com/cwr/evolve.html">
      Evolutionary Computation and its application to art and design</ulink>, by
      Craig Reynolds
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="ELMA04">
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="FONG">
     </para>
    </listitem>
   </itemizedlist>
  </para>

 </sect1>
</chapter>

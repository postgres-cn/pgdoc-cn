<!-- doc/src/sgml/pgprewarm.sgml -->

<sect1 id="pgprewarm" xreflabel="pg_prewarm">
 <title>pg_prewarm</title>

 <indexterm zone="pgprewarm">
  <primary>pg_prewarm</primary>
 </indexterm>

<<<<<<< HEAD
 <!--
<para>
  The <filename>pg_prewarm</filename> module provides a convenient way
  to load relation data into either the operating system buffer cache
  or the <productname>PostgreSQL</productname> buffer cache.
 </para>
-->
<para>
<filename>pg_prewarm</filename>模块提供了一个方便的方式加载关系数据到操作系统缓冲区缓存或
<productname>PostgreSQL</productname>缓冲区缓存。
</para>

 <sect2>
  <!--
  <title>Functions</title>
  -->
=======
 <para>
  <filename>pg_prewarm</filename>模块提供一种方便的方法把关系
  数据载入到操作系统缓冲区或者
  <productname>PostgreSQL</productname>缓冲区。
 </para>

 <sect2>
>>>>>>> upstream/master
  <title>函数</title>

<synopsis>
pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
           first_block int8 default null,
           last_block int8 default null) RETURNS int8
</synopsis>

<<<<<<< HEAD
  <!--
<para>
   The first argument is the relation to be prewarmed.  The second argument
   is the prewarming method to be used, as further discussed below; the third
   is the relation fork to be prewarmed, usually <literal>main</literal>.
   The fourth argument is the first block number to prewarm
   (<literal>NULL</literal> is accepted as a synonym for zero).  The fifth
   argument is the last block number to prewarm (<literal>NULL</literal>
   means prewarm through the last block in the relation).  The return value
   is the number of blocks prewarmed.
  </para>
-->
<para>
第一个参数是要预热的关系。第二个参数是要使用的预热方法，在下面有进一步的讨论；
第三个参数是要预热的关系分支，通常是<literal>main</literal>。
第四个参数是要预热的第一个块编号（接受<literal>NULL</literal>作为零的同义词）。
第五个参数是要预热的最后一个块编号（<literal>NULL</literal>表示预热到关系中的最后一个块）。
返回值是预热了的块的数量。
</para>

  <!--
<para>
   There are three available prewarming methods.  <literal>prefetch</literal>
   issues asynchronous prefetch requests to the operating system, if this is
   supported, or throws an error otherwise.  <literal>read</literal> reads
   the requested range of blocks; unlike <literal>prefetch</literal>, this is
   synchronous and supported on all platforms and builds, but may be slower.
   <literal>buffer</literal> reads the requested range of blocks into the
   database buffer cache.
  </para>
-->
<para>
有三种可用的预热方法。<literal>prefetch</literal>发出异步预读取请求到服务器，
如果支持这样做，否则抛出一个错误。<literal>read</literal>读取请求的块范围；
不像<literal>prefetch</literal>，这是异步的，并且所有平台和编译都支持，
但是可能会慢一些。<literal>buffer</literal>读取请求的块范围到数据库缓冲区缓存中。
</para>

  <!--
<para>
   Note that with any of these methods, attempting to prewarm more blocks than
   can be cached &mdash; by the OS when using <literal>prefetch</literal> or
   <literal>read</literal>, or by <productname>PostgreSQL</productname> when
   using <literal>buffer</literal> &mdash; will likely result in lower-numbered
   blocks being evicted as higher numbered blocks are read in.  Prewarmed data
   also enjoys no special protection from cache evictions, so it is possible
   for other system activity may evict the newly prewarmed blocks shortly after
   they are read; conversely, prewarming may also evict other data from cache.
   For these reasons, prewarming is typically most useful at startup, when
   caches are largely empty.
  </para>
-->
<para>
请注意，使用任意的这些方法，尝试预热比缓冲区可以缓存的更多的块 &mdash; 
在使用<literal>prefetch</literal>或<literal>read</literal>时通过OS，
或在使用<literal>buffer</literal>时通过<productname>PostgreSQL</productname> &mdash; 
将有可能导致低编号的块被赶走，因为读取进来了高编号的块。
预热的数据还喜欢不特别保护缓存驱逐，所以对于其他系统来说，
活动有可能在新预热的块被读取不久之后就驱逐它们；相反的，
预热也可能从缓存中驱逐其它数据。因为这些原因，预热通常在启动、缓存基本上是空的时最有用。
</para>
 </sect2>

 <sect2>
  <!--
  <title>Author</title>
  -->
  <title>作者</title>
<para>
=======
  <para>
   第一个参数是要预热的关系。第二个参数是要使用的预热方法，下文将会
   进一步讨论。第三个参数是要被预热的关系分叉，通常是<literal>main</literal>。
   第四个参数是要预热的第一个块号（<literal>NULL</literal>也被接受，它等同于
   零）。第五个参数是要预热的最后一个块号（<literal>NULL</literal>表示一直
   预热到关系的最后一个块）。返回值是被预热的块数。
  </para>

  <para>
   有三种可用的预热方法。<literal>prefetch</literal>会向操作系统发出异步
   预取请求（如果支持异步预取），不支持异步预取则抛出一个错误。
   <literal>read</literal>会读取要求范围的块。与<literal>prefetch</literal>
   不同，它是同步的并且在所有平台上都被支持，但是可能较慢。
   <literal>buffer</literal>会把要求范围的块读入道数据库的缓冲区。
  </para>

  <para>
   注意使用任意一种方法尝试预热比能缓存的数量更多的块 &mdash; 使用
   <literal>prefetch</literal>或者<literal>read</literal>（由 OS）或者使用
   <literal>buffer</literal>（由<productname>PostgreSQL</productname>
   ） &mdash; 将很可能导致高编号块被读入时把低编号的块从缓冲区中逐出的情况。
   被预热的数据也不享受对缓冲区替换的特别保护，因此其他系统活动可能会在刚刚
   被预热的块被读入后很快就将它们逐出。反过来，预热也可能把其他数据逐出缓存。
   由于这些原因，预热通常在启动时最有用，那时缓冲大部分都为空。
  </para>
 </sect2>

 <sect2>
  <title>作者</title>

  <para>
>>>>>>> upstream/master
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
 </sect2>

</sect1>

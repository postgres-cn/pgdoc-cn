<!-- doc/src/sgml/sources.sgml -->

 <chapter id="source">
  <title>PostgreSQL编码习惯</title>

  <sect1 id="source-format">
   <title>格式化</title>

   <para>
    源代码格式化使用 4 列制表间隔，并且保留制表符（即制表符不会被扩展成空格）。每一个逻辑缩进层就是一个额外的制表位。
   </para>

   <para>
    布局规则（括号定位等）遵循 BSD 习惯。特别地，<literal>if</>、<literal>while</>、<literal>switch</>等受控块的花括号要独自占据一行。
   </para>

   <para>
    限制行长度，这样在 80 列窗口中代码也是可读的（这并不意味着你不能超过 80 列。例如，为了保持代码在 80 列以内而在任意位置打断一段长的错误消息字符串可能不会给可读性带来什么好处）。
   </para>

   <para>
    不使用 C++ 风格的注释（<literal>//</>注释）。严格的 ANSI C 编译器不接受这样的注释。出于相同的原因，不使用 C++ 扩展，例如在块中声明新变量。
   </para>

   <para>
    多行注释块更好的风格是
<programlisting>
/*
 * 注释文本从这里开始
 * 延续到这里
 */
</programlisting>
    注意从列 1 开始的注释块将被<application>pgindent</>原样保留，但是它将重新对缩进的注释块断行，好像它们是纯文本一样。如果你想要保留一个缩进块中的换行，可以像这样增加破折号：
<programlisting>
    /*----------
     * 注释文本从这里开始
     * 延续到这里
     *----------
     */
</programlisting>
   </para>

   <para>
    虽然在提交补丁时并不是一定要遵守这些格式化规则，但是最好能遵守。在下一次发行前你提交的代码将会通过<application>pgindent</>，因此使用某种其他格式化习惯无法使代码被编排得很好。对于补丁，一种比较好的经验规则是<quote>让新代码看起来像它周围的原有代码</>。
   </para>

   <para>
    <filename>src/tools</filename>目录包含有可以用于<productname>emacs</productname>、<productname>xemacs</productname>或者<productname>vim</productname>编辑器的设置文件，它们可以帮助确保这些编辑器会根据上述习惯格式化代码。
   </para>

   <para>
    可以这样调用文本浏览工具<application>more</application>和<application>less</application>：
<programlisting>
more -x4
less -x4
</programlisting>
    来让它们以合适的方式显示制表符。
   </para>
  </sect1>

  <sect1 id="error-message-reporting">
   <title>在服务器中报告错误</title>

   <indexterm>
    <primary>ereport</primary>
   </indexterm>
   <indexterm>
    <primary>elog</primary>
   </indexterm>

   <para>
    服务器代码内产生的错误、警告和日志消息应该使用<function>ereport</>或者更老的<function>elog</>生成。这个函数的使用有些复杂，因此有必要做一些解释。
   </para>

   <para>
    对于每一个消息都有两个必要的元素：一个严重性级别（从<literal>DEBUG</>到<literal>PANIC</>）和一个主消息文本。此外还有一些可选元素，其中最常见的是一个遵守 SQL 规范中 SQLSTATE 习惯的错误标识符代码。<function>ereport</>本身只是一个 shell 函数，它的存在主要是为了在语法习惯上让消息的产生更像 C 源代码中的函数调用而已。<function>ereport</>直接接受的唯一参数是严重性级别。主消息文本和任何其他可选消息元素通过在<function>ereport</>调用中使用辅助函数产生，例如<function>errmsg</>。
   </para>

   <para>
    对于<function>ereport</>的一次典型调用可能看起来像：
<programlisting>
ereport(ERROR,
        (errcode(ERRCODE_DIVISION_BY_ZERO),
         errmsg("division by zero")));
</programlisting>
    这会指定错误严重性级别为<literal>ERROR</>（一个普通错误）。<function>errcode</>调用使用<filename>src/include/utils/errcodes.h</>中定义的一个宏指定 SQLSTATE 错误代码。<function>errmsg</>调用提供主消息文本。注意辅助函数调用周围的额外圆括号 &mdash; 它们虽然很烦人但是在语法上是必需的。
   </para>

   <para>
    这里有一个更复杂的例子：
<programlisting>
ereport(ERROR,
        (errcode(ERRCODE_AMBIGUOUS_FUNCTION),
         errmsg("function %s is not unique",
                func_signature_string(funcname, nargs,
                                      NIL, actual_arg_types)),
         errhint("Unable to choose a best candidate function. "
                 "You might need to add explicit typecasts.")));
</programlisting>
    这展示了使用格式代码把运行时值嵌入到一个消息文本中的方法，其中还提供了一个可选的<quote>hint</>消息。
   </para>
   
   <para>
    如果严重级别是<literal>ERROR</>或更高，<function>ereport</>
    会中止用户定义函数的执行并且不会返回到调用者。如果严重级别低于
    <literal>ERROR</>，<function>ereport</>会正常返回。
   </para>

   <para>
    <function>ereport</>可用的辅助例程是：
  <itemizedlist>
   <listitem>
    <para>
     <function>errcode(sqlerrcode)</function>指定对于该情况的 SQLSTATE 错误标识符代码。如果没有调用这个例程，错误严重性级别是<literal>ERROR</>或更高时错误标识符会默认成<literal>ERRCODE_INTERNAL_ERROR</>，错误级别是<literal>WARNING</>时标识符为<literal>ERRCODE_WARNING</>，否则（对于<literal>NOTICE</>及以下的级别）标识符会被设置为<literal>ERRCODE_SUCCESSFUL_COMPLETION</>。虽然这些默认值常常很方便，在忽略<function>errcode()</>调用之前请总是思考一下它们是否合适。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errmsg(const char *msg, ...)</function>指定主错误消息文本，以及需要插入其中的运行时值。这种插入以<function>sprintf</>-风格的格式代码指定。除了<function>sprintf</>接受的标准格式代码，格式代码<literal>%m</>可以用来插入由<function>strerror</>为<literal>errno</>的当前值返回的错误消息。
     <footnote>
      <para>
       也就是说，该值时到达<function>ereport</>调用时的当前值，在辅助报告例程内<literal>errno</>的改变不会影响它。但如果你在<function>errmsg</>的参数列表中显式地写了<literal>strerror(errno)</>则不是这样，因此不要那样做。
      </para>
     </footnote>
     <literal>%m</>不要求<function>errmsg</>参数列表中的任何对应项。注意在格式代码被处理之前，消息字符串将通过<function>gettext</>来进行可能的本地化。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errmsg_internal(const char *msg, ...)</function>与<function>errmsg</>相同，不过消息串将不会被翻译，也不会被包括在国际化的消息字典中。这不应该被用于<quote>不能发生</>的情况中，因为那些情况下不值得花费精力去做翻译。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errmsg_plural(const char *fmt_singular, const char *fmt_plural,
     unsigned long n, ...)</function>很像<function>errmsg</>，但是支持消息的多种复数形式。<replaceable>fmt_singular</>是英语单数格式，<replaceable>fmt_plural</>是英语复数格式，<replaceable>n</>是决定需要何种复数形式的整数值，剩下的参数会被根据选中的格式字符串进行格式化。详见<xref linkend="nls-guidelines">。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errdetail(const char *msg, ...)</function>提供了一个可选的<quote>详情</>消息，如果有额外的信息但不适合放在主消息中时就可以使用这种方式。消息字符串的处理与<function>errmsg</>相同。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errdetail_internal(const char *msg, ...)</function>与<function>errdetail</>相同，不过消息串将不会被翻译，也不会被包括在国际化的消息字典中。这应该被用于不值得花费精力翻译的详情消息上，例如它们对大部分用户太过技术化而没什么用处。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errdetail_plural(const char *fmt_singular, const char *fmt_plural,
     unsigned long n, ...)</function>与<function>errdetail</>相似，但是支持消息的多种复数形式。详见<xref linkend="nls-guidelines">。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errdetail_log(const char *msg, ...)</function>与<function>errdetail</>相同，除了这个字符串只会进入服务器的日志而不会发往客户端。如果同时使用了<function>errdetail</>（或者上述的一种等效函数）以及<function>errdetail_log</>，那么一个字符串会被发往客户端而另一个会被发往日志。如果错误细节的安全性过于敏感或者体积过于庞大而不适合于发往客户端，这个函数就非常有用。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errdetail_log_plural(const char *fmt_singuar, const char
     *fmt_plural, unsigned long n, ...)</function>与<function>errdetail_log</>
     相似，但是支持多种复数形式的消息。详见<xref linkend="nls-guidelines">。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errhint(const char *msg, ...)</function>提供一个可选的<quote>hint</>消息，它被用来提供关于如何修复该问题的建议。该消息字符串以和<function>errmsg</>相同的方式处理。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errcontext(const char *msg, ...)</function>通常不会被直接从一个<function>ereport</>消息站点调用，它被用在<literal>error_context_stack</>回调函数中来提供错误发生的上下文，例如一个 PL 函数中的当前位置。该消息字符串以和<function>errmsg</>相同的方式处理。不同于其他辅助函数，在每次<function>ereport</>调用中可以多次调用这个函数，这样提供的连续的字符串将被用单独的新行串接在一起。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errposition(int cursorpos)</function>指定一个查询字符串中错误的文本位置。当前，它只对查询处理的词法和语法分析阶段中检测到的错误有用。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errtable(Relation rel)</function>指定一个关系，它的名称和模式名称应该被包括在错误报告中作为辅助域。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errtablecol(Relation rel, int attnum)</function>指定一个列，它的名称、表名和模式名称应该被包括在错误报告中作为辅助域。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errtableconstraint(Relation rel, const char *conname)</function>指定一个约束，它的名称、表名和模式名称应该被包括在错误报告中作为辅助域。索引应当为考虑成用于这种目的的约束，不管它们有没有一个相关联的<structname>pg_constraint</>项。要小心地以<literal>rel</>传递底层堆关系而不是索引本身。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errdatatype(Oid datatypeOid)</function>指定一个数据类型，它的名称和模式名称应该被包括在错误报告中作为辅助域。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errdomainconstraint(Oid datatypeOid, const char *conname)</function>指定一个域约束，它的名称、域名和模式名称应该被包括在错误报告中作为辅助域。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errcode_for_file_access()</>是一个便捷函数，它可以在一个文件访问相关的系统调用中为一个失败选择一个合适的 SQLSTATE 错误标识符。它使用保存下来的<literal>errno</>来决定要差生哪种错误代码。通常，应该把它和主错误消息文本中的<literal>%m</>联合使用。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errcode_for_socket_access()</>是一个便捷函数，它可以在一个套接字相关的系统调用中为一个失败选择一个合适的 SQLSTATE 错误标识符。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>errhidestmt(bool hide_stmt)</function>可以被调用来指定 postmaster 日志中一个消息的<literal>STATEMENT:</>部分的禁止。通常如果该消息文本已经包括当前语句这就是合适的。
    </para>
   </listitem>
  </itemizedlist>
   </para>

   <note>
    <para>
     在一个<function>ereport</>调用中，最多可以使用一个<function>errtable</>、<function>errtablecol</>、<function>errtableconstraint</>、<function>errdatatype</>或者<function>errdomainconstraint</>函数。这些函数存在是为了允许应用抽取与错误情况相关的数据库对象名，而不需要检查可能已被本地化的错误消息文本。这些函数应该被用在应用需要对其进行自动错误处理的错误报告中。从<productname>PostgreSQL</> 9.3 开始，完整的覆盖只为 SQLSTATE 类别 23 中的错误存在（完整性约束违背），但是在未来这些很可能会被扩展。
    </para>
   </note>

   <para>
    有一个还在大量使用的旧的函数<function>elog</>。一个<function>elog</>调用：
<programlisting>
elog(level, "format string", ...);
</programlisting>
    完全等效于：
<programlisting>
ereport(level, (errmsg_internal("format string", ...)));
</programlisting>
    注意 SQLSTATE 错误代码总是被给予默认值，并且消息字符串不受翻译限制。因此，<function>elog</>应该只被用于内部错误和低层次的调试日志。任何普通用户感兴趣的消息应该通过<function>ereport</>。不管怎样，在仍广泛使用<function>elog</>的系统中，有足够多的内部<quote>不可能发生</>的错误检查，出于记号简洁的目的这更适合于那些消息。
   </para>

   <para>
    有关编写好的错误消息的建议可见<xref linkend="error-style-guide">。
   </para>
  </sect1>

  <sect1 id="error-style-guide">
   <title>错误消息风格指导</title>

   <para>
    提供这个风格指导是希望在所有由<productname>PostgreSQL</>产生的消息间维护一种一致的、用户友好的风格。
   </para>

  <simplesect>
   <title>什么去哪里</title>

   <para>
    主要的消息应该简短、实事求是并且避免引用诸如特定函数名这样的实现细节。<quote>简短</quote>意味着<quote>在正常情况下应该能放在一行内</quote>。如果需要保持主要消息简短，或者如果你觉得有必要提到诸如特定系统调用失败这样的实现细节，可以使用一个详细消息。主要消息和详细消息都应该实事求是。对于有关如何修复问题的建议可以使用一个提示消息，特别是该建议可能不总是合适时。
   </para>

   <para>
    例如，与其用：
<programlisting>
IpcMemoryCreate: shmget(key=%d, size=%u, 0%o) failed: %m
(plus a long addendum that is basically a hint)
</programlisting>
    不如写：
<programlisting>
Primary:    could not create shared memory segment: %m
Detail:     Failed syscall was shmget(key=%d, size=%u, 0%o).
Hint:       the addendum
</programlisting>
   </para>

   <para>
    原理：保持主要消息简短有助于扣住主题并且有助于客户端基于错误消息放在一行足以的假设来安排屏幕空间。详细消息和提示消息可以被归入一种详情模式，或者可能是一种弹出式错误细节窗口。还有，详细消息和提示消息通常会被排除在服务器日志之外以解决空间。最好避免对实现细节的引用，因为用户根本就不知道细节。
   </para>

  </simplesect>

  <simplesect>
   <title>格式化</title>

   <para>
    不要对消息文本的格式化做任何特定假设。可以期望客户端和服务器日志换行来适应其自身的需要。在长消息中，新行字符（\n）可以被用来指示建议的分段。不要用一个新行结束一个消息。不要使用制表符或其他格式化字符（在错误上下文显示中，新行会自动被增加来分割上下文的层次，例如函数调用）。
   </para>

   <para>
    原理：消息不一定非得显示在终端上。在 GUI 显示或浏览器中，这些格式化指令最多会被忽略。
   </para>

  </simplesect>

  <simplesect>
   <title>引号</title>

   <para>
    在引用时，英语文本应该使用双引号。其他语言中的文本应该一致地使用一种符合出版习惯和其他程序计算机输出的引号。
   </para>

   <para>
    原理：选择双引号而不是单引号其实有点武断，但是更倾向于是首选用法。有人建议过按照 SQL 习惯根据对象类型来选择引号的种类（即，字符串单引号，标识符双引号）。但是这是一个很多用户根本不熟悉的语言内部的技术问题，它不会扩散到其他种类的被引用术语，也不会翻译成其他语言，并且也相当没有意义。
   </para>

  </simplesect>

  <simplesect>
   <title>引号的使用</title>

   <para>
    总是用引号界定文件名、用户提供的标识符以及其他可能包含词的变量。不要用它们来标记不会包含词的变量（例如，操作符名称）。
   </para>

   <para>
    在后端有函数会根据需要对其自身的输出加上双引号（例如<function>format_type_be()</function>）。不要在这种函数的输出周围再加上额外的引号。
   </para>

   <para>
    原理：在被嵌入到一个消息时，对象可能具有产生歧义的名称。对于标记一个插入名称的开始和结束要始终如一。但不要在消息中混入不必要的或者重复的引号。
   </para>

  </simplesect>

  <simplesect>
   <title>语法和标点</title>

   <para>
    主要错误消息的规则与详细/提示消息的规则不同：
   </para>

   <para>
    主要错误消息：不要大写第一个字母。不要用一个句点结束一个消息。甚至不要考虑用一个感叹号结束一个消息。
   </para>

   <para>
    详细和提示消息：使用完整的句子，并且每一个都用句点结束。对句子的第一个词进行首字母大写。如果后面跟着另一个句子，在据点后面放两个空格（对于英语文本有效，在其他语言中可能不合适）。
   </para>

   <para>
    错误上下文字符串：不要大写第一个字母并且不要用一个句点结束字符串。上下文字符串通常不应该是完整的句子。
   </para>

   <para>
    原理：避免标点让客户端应用能更容易地把消息嵌入到各种各样的语法上下文中。主要消息场上不是语法上完整的句子（并且如果它们比一个句子还长，它们应该被分成主要和详细部分）。不过，详细和提示消息会更长并且需要包括多个句子。为了一致，即便它们只是一个句子，它们也应该遵循完整句子的风格。
   </para>

  </simplesect>

  <simplesect>
   <title>大写 vs. 小写</title>

   <para>
    对消息用于使用小写形式，包括一个主要错误消息的第一个字母。如果 SQL 命令或者关键词出现在消息中，为它们使用大写形式。
   </para>

   <para>
    原理：用这种方式能更容易使所有的东西看起来更加一致，因为一些消息是完整的句子而另一些不是。
   </para>

  </simplesect>

  <simplesect>
   <title>避免被动态</title>

   <para>
    使用主动语态。在有主语时使用完整句子（<quote>A could not do B</quote>）。如果主语是程序本身，使用没有主语的电报风格，但不要为程序使用<quote>I</quote>。
   </para>

   <para>
    原理：程序不是人类。所以不要假装。
   </para>

  </simplesect>

  <simplesect>
   <title>现在式 vs. 过去式</title>

   <para>
    如果一次尝试做某事失败但是可能在下一次成功（也许在修复某个问题之后），则使用过去式。如果失败必定是持久的，使用现在式。
   </para>

   <para>
    在以下形式的句子之间存在着非平凡的语义区别：
<programlisting>
could not open file "%s": %m
</programlisting>
和
<programlisting>
cannot open file "%s"
</programlisting>
    第一个表示打开文件的尝试失败。该消息应该给出一个原因，例如<quote>磁盘满</quote>或者<quote>文件不存在</quote>。过去式更合适，因为下一次磁盘可能不再满或者请求的文件可能就存在了。
   </para>

   <para>
    第二种形式指示打开所提及文件的功能在程序中根本就不存在，或者概念上是不可能的。现在式更合适，因为该情况将无限期保持。
   </para>

   <para>
    原理：诚然，普通用户没有能力从消息的时态上得出重要的结论，但是由于语言为我们提供了语法，我们就应该正确地使用它。
   </para>

  </simplesect>

  <simplesect>
   <title>对象类型</title>

   <para>
    在引用一个对象的名称时，说明该对象的种类。
   </para>

   <para>
    原理：否则没有人会了解什么<quote>foo.bar.baz</>。
    refers to.
   </para>

  </simplesect>

  <simplesect>
   <title>括号</title>

   <para>
    方括号只被用于： (1) 在命令对照表中标记可选参数，或者 (2) 用于标记一个数组下标。
   </para>

   <para>
    原理：任何其他用法都无法符合总所周知的习惯用法并且将使人们混乱。
   </para>

  </simplesect>

  <simplesect>
   <title>组装错误消息</title>

   <para>
   当一个消息包括在别处产生的文本时，这样将它嵌入：
<programlisting>
could not open file %s: %m
</programlisting>
   </para>

   <para>
    原理：将这种文本粘贴到一个单一的语句中很难解释所有可能的错误代码，因此需要某种标点。也有人建议把被嵌入的文本放在圆括号中，但是如果被嵌入的文本可能是消息中最重要的一部分（这是常有的事）时就显得不自然。
   </para>

  </simplesect>

  <simplesect>
   <title>错误原因</title>

   <para>
    消息应该总是说明为什么错误会发生的原因。例如：
<programlisting>
BAD:    could not open file %s
BETTER: could not open file %s (I/O failure)
</programlisting>
    如果没有已知原因，你最好修复代码。
   </para>

  </simplesect>

  <simplesect>
   <title>函数名</title>

   <para>
    不要在错误文本中包括报告例程的名称。需要时，我们有其他机制能够知道这些，并且对于大部分用户来说这种信息没有用处。如果没有函数名错误文本就没有意义，那么请重写它。
<programlisting>
BAD:    pg_atoi: error in "z": cannot parse "z"
BETTER: invalid input syntax for integer: "z"
</programlisting>
   </para>

   <para>
    也要避免提及被调用的函数，而不是说代码尝试做过什么：
<programlisting>
BAD:    open() failed: %m
BETTER: could not open file %s: %m
</programlisting>
    如果它真地看起来必要，在详细消息中提及系统调用（在某些情况中，可以为详细消息提供传递给系统调用的实际值）。
   </para>

   <para>
    原理：用户不知道所有那些函数做了什么。
   </para>

  </simplesect>

  <simplesect>
   <title>应该避免的捣蛋词</title>

  <formalpara>
    <title>Unable</title>
   <para>
    <quote>Unable</quote>接近于被动态。酌情使用<quote>cannot</quote>或者<quote>could not</quote>更好。
   </para>
  </formalpara>

  <formalpara>
    <title>Bad</title>
   <para>
    <quote>bad result</quote>之类的错误消息实在很难被解释。最好写出为什么结果<quote>不好</quote>，例如<quote>无效格式</quote>。
   </para>
  </formalpara>

  <formalpara>
    <title>Illegal</title>
   <para>
    <quote>Illegal</quote>表示未被了法律，剩下的才是<quote>invalid</quote>。同样，说明为什么无效。
   </para>
  </formalpara>

  <formalpara>
    <title>Unknown</title>
   <para>
    尝试避免<quote>unknown</quote>。考虑<quote>error: unknown
    response</quote>。如果你不知道响应是什么，你怎么知道它是错误的？<quote>Unrecognized</quote>常常是一个更好的选择。还有，确定不要包括被抱怨的值。
<programlisting>
BAD:    unknown node type
BETTER: unrecognized node type: 42
</programlisting>
   </para>
  </formalpara>

  <formalpara>
    <title>找到 vs. 存在</title>
   <para>
    如果程序使用了一个非平凡的算法来定位一个资源（例如一个路径搜索）并且该算法失败了，说该程序无法<quote>找到</quote>该资源比较公平。换句话说，如果该资源应该在的位置是已知的，但是程序无法在那里访问它，那么才说该资源不<quote>存在</quote>。在这种情况中使用<quote>找到</quote>听起来很弱并且会使问题混淆。
   </para>
  </formalpara>

  <formalpara>
    <title>May vs. Can vs. Might</title>
   <para>
    <quote>May</quote>表示权限（例如，"You may borrow my rake."），并且在文档或错误消息中用处有限。
    <quote>Can</quote>表示能力（例如，"I can lift that log."），而<quote>might</quote>表示可能性（例如，"It might rain
    today."）。请使用合适的词来使含义清晰并且便于翻译。
   </para>
  </formalpara>

  <formalpara>
    <title>缩略形式</title>
   <para>
    避免缩略，如<quote>can't</quote>，请使用<quote>cannot</quote>。
   </para>
  </formalpara>

  </simplesect>

  <simplesect>
   <title>适当的拼写</title>

   <para>
    完整地拼出单词。例如，避免：
  <itemizedlist>
   <listitem>
    <para>
     spec
    </para>
   </listitem>
   <listitem>
    <para>
     stats
    </para>
   </listitem>
   <listitem>
    <para>
     parens
    </para>
   </listitem>
   <listitem>
    <para>
     auth
    </para>
   </listitem>
   <listitem>
    <para>
     xact
    </para>
   </listitem>
  </itemizedlist>
   </para>

   <para>
    基本原理：这将增强一致性。
   </para>

  </simplesect>

  <simplesect>
   <title>本地化</title>

   <para>
    记住错误消息文本需要被翻译成其他语言。请遵循<xref linkend="nls-guidelines">中的方针以避免让翻译者为难。
   </para>
  </simplesect>

  </sect1>

 </chapter>

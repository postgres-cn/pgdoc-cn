<!-- doc/src/sgml/recovery-config.sgml -->

<chapter id="recovery-config">
  <title>恢复配置</title>

  <indexterm>
   <primary>configuration</primary>
   <secondary>of recovery</secondary>
   <tertiary>of a standby server</tertiary>
  </indexterm>

   <para>
    这一章描述<filename>recovery.conf</><indexterm><primary>recovery.conf</></>文件中可用的设置。它们只应用于恢复期。对于你希望执行的任意后续恢复，它们必须被重置。一旦恢复已经开始，它们就不能被更改。
   </para>

   <para>
     <filename>recovery.conf</>中的设置以<literal>name = 'value'</>形式指定。每一行指定一个参数。井号（<literal>#</literal>）表示行的剩余部分是一段注释。要在一个参数值中嵌入一个单引号，将其双写（<literal>''</>）。
   </para>

   <para>
    作为一个例子文件，<filename>share/recovery.conf.sample</>被放置在安装的<filename>share/</>目录中。
   </para>

  <sect1 id="archive-recovery-settings">

    <title>归档恢复设置</title>
     <variablelist>

     <varlistentry id="restore-command" xreflabel="restore_command">
      <term><varname>restore_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>restore_command</>恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        用于获取 WAL 文件系列的一个已归档段的本地 shell 命令。这个参数是归档恢复所必需的，但是对于流复制是可选的。在该字符串中的任何<literal>%f</>会被替换为从归档中获得的文件的名字，并且任何<literal>%p</>会被在服务器上的复制目标路径名替换（该路径名是相对于当前工作目录的，即集簇的数据目录）。任何<literal>%r</>会被包含上一个可用重启点的文件的名字所替换。在那些必须被保留用于使得一次恢复变成可重启的文件中，这个文件是其中最早的一个，因此这个信息可以被用来把归档截断为支持从当前恢复重启所需的最小值。<literal>%r</>通常只被温备配置（见<xref linkend="warm-standby">）所使用。要嵌入一个真正的<literal>%</>字符，需要写成<literal>%%</>。
       </para>

       <para>
        很重要的一点是，该命令只有在成功时才返回一个为零的退出状态。该命令<emphasis>将</>会被询问不存在于归档中的文件名，当这样被询问时它必须返回非零。例子：
<programlisting>
restore_command = 'cp /mnt/server/archivedir/%f "%p"'
restore_command = 'copy "C:\\server\\archivedir\\%f" "%p"'  # Windows
</programlisting>
       一个例外是如果该命令被一个信号（不是
       <systemitem>SIGTERM</systemitem>，它是数据库服务器关闭的一部分）
       或者一个 shell 错误（例如命令未找到）终止，则恢复将会中止并且服务器将不
       会启动。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="archive-cleanup-command" xreflabel="archive_cleanup_command">
      <term><varname>archive_cleanup_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>archive_cleanup_command</> 恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        这个可选参数指定了一个 shell 命令，它将在每一个重启点被执行。<varname>archive_cleanup_command</>的目的是提供一种清除不再被后备服务器需要的旧的已归档 WAL 文件的机制。任何<literal>%r</>会被替换为包含最后一个可用重启点的文件的名称。那是使一次恢复变成可重启的所必须被<emphasis>保留</>的最早的文件，并且因此比<literal>%r</>更早的所有文件可以被安全地移除。这个信息可以被用来把归档截断为支持从当前恢复重启所需的最小值。对于单一后备配置，<xref linkend="pgarchivecleanup">模块常常被用在<varname>archive_cleanup_command</>中，例如：
<programlisting>archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'</programlisting>
        但是注意，如果多个后备服务器正在从同一个归档目录中恢复，你将需要保证只有当任意服务器都不再需要 WAL 文件时才会删除它们。<varname>archive_cleanup_command</>通常被用于一种温后备配置（见<xref linkend="warm-standby">）中。要在该命令中嵌入一个真正的<literal>%</>字符，需要写成<literal>%%</>。
       </para>
       <para>
        如果该命令返回一个非零退出状态，则将会写出一个警告日志消息。
        一个例外是如果该命令被一个信号或者一个 shell 错误（例如命令未
        找到）终止，则会抛出一个致命错误。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-end-command" xreflabel="recovery_end_command">
      <term><varname>recovery_end_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_end_command</> 恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        这个参数指定了一个将只在恢复末尾被执行一次的 shell 命令。这个参数是可选的。<varname>recovery_end_command</>的目的是为复制或恢复之后的清除提供一种机制。与<xref linkend="archive-cleanup-command">中相似，任何<literal>%r</>会被替换为包含最后一个可用重启点的文件的名称。
       </para>
       <para>
        如果该命令返回一个非零退出状态，则一个警告日志消息将被写出并且不管怎样该数据库将继续启动。一个例外是如果该命令被一个信号或者 shell 错误（例如命令未找到）中止，该数据库将不会继续启动。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  </sect1>

  <sect1 id="recovery-target-settings">

    <title>恢复目标设置</title>
     
     <para>
      默认情况下，恢复将会一直恢复到 WAL 日志的末尾。下面的参数可以被用来
      指定一个更早的停止点。在<varname>recovery_target</>、
      <varname>recovery_target_name</>、<varname>recovery_target_time</>
      和<varname>recovery_target_xid</>中，最多只能使用一个，如果在配置文件中
      使用了多个，将使用最后一个。
     </para>
     
     <variablelist>
     <varlistentry id="recovery-target" xreflabel="recovery_target">
      <term><varname>recovery_target</varname><literal> = 'immediate'</literal>
      <indexterm>
        <primary><varname>recovery_target</> 恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        这个参数指定恢复应该在达到一个一致状态后尽快结束，即尽早结束。在
        从一个在线备份中恢复时，这意味着备份结束的那个点。
       </para>
       <para>
        在技术上，这是一个字符串参数，但是<literal>'immediate'</>是目前
        唯一允许的值。
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="recovery-target-name" xreflabel="recovery_target_name">
      <term><varname>recovery_target_name</varname>
           (<type>string</type>)      
      <indexterm>
        <primary><varname>recovery_target_name</> 恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        这个参数指定（<function>pg_create_restore_point()</>所创建）的已命名的恢复点，恢复将进入该恢复点。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-time" xreflabel="recovery_target_time">
      <term><varname>recovery_target_time</varname>
           (<type>timestamp</type>)      
      <indexterm>
        <primary><varname>recovery_target_time</> 恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        这个参数指定恢复将进入的时间戳。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-xid" xreflabel="recovery_target_xid">
      <term><varname>recovery_target_xid</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_xid</> 恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        这个参数指定恢复将进入的事务 ID。记住虽然事务 ID 是在事务开始时顺序分配的，但是事务可能以不同的数字顺序完成。那些在指定事务之前（也可以包括该事务）提交的事务将被恢复。精确的停止点也受到<xref linkend="recovery-target-inclusive">的影响。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>

     <para>
       下列选项进一步指定恢复目标，并且影响到达目标时会发生什么：
     </para>

     <variablelist>
     <varlistentry id="recovery-target-inclusive"
                   xreflabel="recovery_target_inclusive">
      <term><varname>recovery_target_inclusive</varname>
        (<type>boolean</type>)      
      <indexterm>
        <primary><varname>recovery_target_inclusive</> 恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        指定我们是否仅在指定的恢复目标之后停止（<literal>true</literal>），
        或者仅在恢复目标之前停止（<literal>false</literal>）。适用于
        <xref linkend="recovery-target-time">或者
        <xref linkend="recovery-target-xid">被指定的情况。这个设置分别控制
        事务是否有准确的目标提交时间或 ID 将被包括在该恢复中。默认值为
        <literal>true</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-timeline"
                   xreflabel="recovery_target_timeline">
      <term><varname>recovery_target_timeline</varname>
        (<type>string</type>)      
      <indexterm>
        <primary><varname>recovery_target_timeline</> 恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        指定恢复到一个特定的时间线中。默认值是沿着基础备份建立时的当前时间线恢复。将这个参数设置为<literal>latest</>会恢复到该归档中能找到的最新的时间线，这在一个后备服务器中有用。除此之外，你只需要在复杂的重恢复情况下设置这个参数，在这种情况下你需要返回到一个状态，该状态本身是在一次时间点恢复之后到达的。相关讨论见<xref linkend="backup-timelines">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="pause-at-recovery-target"
                   xreflabel="pause_at_recovery_target">
      <term><varname>pause_at_recovery_target</varname>
        (<type>boolean</type>)      
      <indexterm>
        <primary><varname>pause_at_recovery_target</> 恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        指定当到达恢复目标时是否应该暂停恢复。默认值为真。这是为了允许对该数据库执行查询来检查这个恢复目标是不是恢复最想要的点。可以使用<function>pg_xlog_replay_resume()</>（见<xref linkend="functions-recovery-control-table">）继续该暂停状态，这将导致恢复运行到结束。如果这个恢复目标不是想要的停止点，则关闭该服务器，改变恢复目标设置为一个更晚的目标并且重启来继续恢复。
       </para>
       <para>
        如果<xref linkend="guc-hot-standby">未被启用或者没有设置恢复目标，这个设置没有效果。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

  <sect1 id="standby-settings">

    <title>后备服务器设置</title>
     <variablelist>

       <varlistentry id="standby-mode" xreflabel="standby_mode">
        <term><varname>standby_mode</varname> (<type>boolean</type>)
        <indexterm>
          <primary><varname>standby_mode</> 恢复参数</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
          指定是否将<productname>PostgreSQL</>服务器作为一个后备服务器启动。如果这个参数为<literal>on</>，当到达已归档 WAL 末尾时该服务器将不会停止恢复，但是将通过使用<varname>restore_command</>获得新的 WAL 段以及/或者通过使用<varname>primary_conninfo</>设置连接到主服务器来尝试继续恢复。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="primary-conninfo" xreflabel="primary_conninfo">
        <term><varname>primary_conninfo</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>primary_conninfo</> 恢复参数</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
          指定后备服务器用来连接主服务器的连接字符串。这个字符串的格式在<xref linkend="libpq-connstring">中描述。如果在这个字符串中有任何选项未被指定，那么将检查相应的环境变量（见<xref linkend="libpq-envars">）。如果环境变量也没有被设置，则使用默认值。
         </para>
         <para>
          连接字符串应当指定主服务器的主机名（或地址），以及端口号（如果它和后备服务器的默认端口不同）。还要指定对应于主服务器上合适权限角色的用户名（见<xref linkend="streaming-replication-authentication">）。如果主服务器要求口令认证，还需要提供一个口令。它可以在<varname>primary_conninfo</varname>字符串中提供，或者在后备服务器（使用<literal>replication</>作为数据库名）的一个单独<filename>~/.pgpass</>文件中提供。不要在<varname>primary_conninfo</varname>字符串中指定一个数据库名。
         </para>
         <para>
          如果<varname>standby_mode</>为<literal>off</>，这个设置没有效果。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="primary-slot-name" xreflabel="primary_slot_name">
        <term><varname>primary_slot_name</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>primary_slot_name</> 恢复参数</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
          有选择地指定通过流复制连接到主服务器时使用一个现有的
          复制槽来控制上游节点上的资源移除（见
          <xref linkend="streaming-replication-slots">）。如果没
          有设置<varname>primary_conninfo</>则这个设置无效。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="trigger-file" xreflabel="trigger_file">
        <term><varname>trigger_file</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>trigger_file</> 恢复参数</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
          指定一个触发器文件，该文件的存在会结束后备机中的恢复。即使这个值没有被设置，你也能够使用<command>pg_ctl promote</>来提升后备机。如果<varname>standby_mode</>为<literal>off</>，这个设置没有效果。
         </para>
        </listitem>
       </varlistentry>
       
       <varlistentry id="recovery-min-apply-delay" xreflabel="recovery_min_apply_delay">
      <term><varname>recovery_min_apply_delay</varname> (<type>integer</type>)
      <indexterm>
        <primary><varname>recovery_min_apply_delay</>恢复参数</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        某人情况下，一个后备服务器会尽快恢复来自于主服务器的 WAL 记录。
        有一份数据的延时拷贝是有用的，它能提供机会纠正数据丢失错误。这个
        参数允许你将恢复延迟一段固定的时间，如果没有指定单位则以毫秒为单
        位。例如，如果你设置这个参数为<literal>5min</literal>，对于一个事
        务提交，只有当后备机上的系统时钟超过主服务器报告的提交时间至少 5
        分钟时，后备机才会重放该事务。
       </para>
       <para>
        有可能服务器之间的复制延迟会超过这个参数的值，在这种情况下则不会
        增加延迟。注意延迟是根据主服务器上写 WAL 的时间戳以及后备机上的
        当前时间来计算。由于网络延迟或者级联复制配置导致的传输延迟可能会
        显著地减少实际等待时间。如果主服务器和后备机上的系统时
        钟不同步，这会导致恢复比预期的更早应用记录。
        但这不是一个主要问题，因为这个参数有用的设置比服务器之间的典型事
        件偏差要大得多。
       </para>
       <para>
        只有在事务提交的 WAL 记录上才会发生延迟。其他记录还是会被尽可能
        快地重放，这不会成为问题，因为 MVCC 可见性规则确保了在对应的提
        交记录被应用之前它们的效果不会被看到。
       </para>
       <para>
        直到后备机被提升或者触发，延迟都会发生。
        在那之后，后备机将会结束恢复并且不再等待。
       </para>
       <para>
        这个参数的目的是和流复制部署一起使用，但是，如果指定了该参数，所有的
        情况下都会遵守它。同步复制不会受到这个设置的影响，因为还没有任何设置
        来要求事务提交的同步应用。使用这个特性也会让
        <varname>hot_standby_feedback</>被延迟，这可能导致主服务器的膨胀，
        两者一起使用时要小心。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

</chapter>

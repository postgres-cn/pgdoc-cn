<!-- doc/src/sgml/extend.sgml -->

 <chapter id="extend">
  <title>扩展 <acronym>SQL</acronym></title>

  <indexterm zone="extend">
   <primary>扩展 SQL</primary>
  </indexterm>

  <para>
   在下面的小节中，我们将讨论如何通过增加各种元素来扩展<productname>PostgreSQL</productname>
   <acronym>SQL</acronym> 查询语言：

   <itemizedlist spacing="compact" mark="bullet">
    <listitem>
     <para>
      函数（从<xref linkend="xfunc">开始）
     </para>
    </listitem>
    <listitem>
     <para>
      聚集（从<xref linkend="xaggr">开始）
     </para>
    </listitem>
    <listitem>
     <para>
      数据类型（从<xref linkend="xtypes">开始）
     </para>
    </listitem>
    <listitem>
     <para>
      操作符（从<xref linkend="xoper">开始）
     </para>
    </listitem>
    <listitem>
     <para>
      用于索引的操作符类（从<xref linkend="xindex">开始）
     </para>
    </listitem>
    <listitem>
     <para>
      相关对象的包（从<xref linkend="extend-extensions">开始）
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <sect1 id="extend-how">
   <title>扩展性如何工作</title>

   <para>
    <productname>PostgreSQL</productname>是可扩展的，因为它的操作是目录驱动的。如果你熟悉标准的关系型数据库系统，你会知道它们把有关数据库、表、列等的信息存储在总所周知的系统目录中（某些系统称之为数据目录）。目录对于用户来说好像其他的表一样，但是<acronym>DBMS</acronym>把自己的内部信息记录在其中。<productname>PostgreSQL</productname>和标准关系型数据库系统的一个关键不同是<productname>PostgreSQL</productname>在其目录中存储更多信息：不只是有关表和列的信息，还有关于数据类型、函数、访问方法等等的信息。这些表可以被用户修改，并且因为<productname>PostgreSQL</productname>的操作是基于这些表的，所以<productname>PostgreSQL</productname>可以被用户扩展。通过比较，传统数据库系统只能通过在源代码中改变硬编码的过程或者载入由<acronym>DBMS</acronym>提供者特殊编写的模块进行扩展。
   </para>

   <para>
    此外，<productname>PostgreSQL</productname>服务器能够通过动态载入把用户编写的代码结合到它自身中。也就是，用户能够指定一个实现了一个新类型或函数的对象代码文件（例如一个共享库），并且<productname>PostgreSQL</productname>将按照要求载入它。把用<acronym>SQL</acronym>编写的代码加入到服务器会更繁琐。这种<quote>即时</quote>修改其操作的能力让<productname>PostgreSQL</productname>独特地适合新应用和存储结构的快速原型设计。
   </para>
  </sect1>

  <sect1 id="extend-type-system">
   <title><productname>PostgreSQL</productname>类型系统</title>

   <indexterm zone="extend-type-system">
    <primary>基础类型</primary>
   </indexterm>

   <indexterm zone="extend-type-system">
    <primary>数据类型</primary>
    <secondary>基础</secondary>
   </indexterm>

   <indexterm zone="extend-type-system">
    <primary>组合类型</primary>
   </indexterm>

   <indexterm zone="extend-type-system">
    <primary>数据类型</primary>
    <secondary>组合</secondary>
   </indexterm>

   <para>
    <productname>PostgreSQL</productname>数据类型被划分为基础类型、组合类型、域和伪类型。
   </para>

   <sect2>
    <title>基础类型</title>

    <para>
     基础类型是那些被实现在<acronym>SQL</>语言层面之下的类型（通常用一种底层语言，如 C），例如<type>int4</type>。它们通常对应于常说的抽象数据类型。<productname>PostgreSQL</productname>只能通过由用户提供的函数在这类类型上操作，并且只能理解到用户描述这种类型行为的程度。基础类型会被进一步划分为标量和数组类型。对于每一种标量类型，会自动创建一个相应的数组类型，它能够保存该标量类型的可变尺寸的数组。
    </para>
   </sect2>

   <sect2>
    <title>组合类型</title>

    <para>
     只要用户创建一个表，就会创建组合类型或者行类型。也可以使用<xref linkend="sql-createtype">来定义一个没有关联表的<quote>stand-alone</>组合类型。一个组合类型只是一个具有相关域名称的类型列表。一个组合类型的值是一个行或者域值记录。用户可以访问来自<acronym>SQL</>查询的组成域。更多关于组合类型的信息请参考<xref linkend="rowtypes">。
    </para>
   </sect2>

   <sect2 id="extend-type-system-domains">
    <title>域</title>

    <para>
     一个域是基于一种特定基础类型的，并且出于很多目的它可以与其基础类型互换。不过，一个域能够具有约束来限制它的合法值于其底层基础类型允许值的一个子集。
    </para>

    <para>
     可以使用<acronym>SQL</>命令<xref linkend="sql-createdomain">创建域。本章不会讨论它们的创建和使用。
    </para>
   </sect2>

   <sect2>
    <title>伪类型</title>

    <para>
     有一些用于特殊目的<quote>伪类型</>。伪类型不能作为表列或者组合类型的属性出现，但是它们能被用于声明函数的参数和结果类型。这在类型系统中提供了一种机制来标识函数的特殊分类。<xref linkend="datatype-pseudotypes-table">列出了现有的伪类型。
    </para>
   </sect2>

   <sect2 id="extend-types-polymorphic">
    <title>多态类型</title>

   <indexterm zone="extend-types-polymorphic">
    <primary>多态类型</primary>
   </indexterm>

   <indexterm zone="extend-types-polymorphic">
    <primary>多态函数</primary>
   </indexterm>

   <indexterm zone="extend-types-polymorphic">
    <primary>类型</primary>
    <secondary>多态</secondary>
   </indexterm>

   <indexterm zone="extend-types-polymorphic">
    <primary>函数</primary>
    <secondary>多态</secondary>
   </indexterm>

    <para>
     特别让人感兴趣的五种伪类型是<type>anyelement</>、<type>anyarray</>、<type>anynonarray</>、<type>anyenum</>以及<type>anyrange</>，它们被统称为<firstterm>多态类型</>。任何使用这些类型声明的函数被称作是一个<firstterm>多态函数</>。通过使用根据一次特定调用实际传递的数据类型所决定的相关数据类型，一个多态函数能够在多种不同数据类型上操作。
    </para>

    <para>
     多态参数和结果是相互关联的，并且它们在解析调用多态函数的查询时被决定到一种特定的数据类型。每一个被声明为<type>anyelement</type>的位置（参数或返回值）被允许具有任意特定的实际数据类型，但是在任何给定的查询中它们必须全部是<emphasis>相同</emphasis>的实际类型。每一个被声明为<type>anyarray</type>的位置可以有任意数组数据类型，但是相似地，它们必须全部具有相同类型。并且类似地，被声明为<type>anyrange</type>的位置必须是全部是相同的范围类型。此外，如果有位置被声明为<type>anyarray</type>并且其他位置被声明为<type>anyelement</type>，<type>anyarray</type>位置中的实际数组类型必须是一个数组，该数组的元素都是出现在<type>anyelement</type>位置的同一种类型。相似地，如果有位置被声明为<type>anyrange</type>并且其他位置被声明为<type>anyelement</type>，<type>anyrange</type>位置的实际范围类型必须是一个范围，该范围的子类型是出现在<type>anyelement</type>位置的同一种类型。<type>anynonarray</>被当做和<type>anyelement</>相同，但是增加了额外的约束要求实际类型不能是一种数组类型。<type>anyenum</>被当做和<type>anyelement</>相同，但是增加了额外的约束要求实际类型不能是一种枚举类型。
    </para>

    <para>
     因此，当使用一种多态类型声明了多于一个参数位置，有效效果是只有实际参数类型的某些组合才被允许。例如，一个被声明为<literal>equal(anyelement, anyelement)</>的函数将要求任意两个输入值，只要它们是同一种数据类型。
    </para>

    <para>
     当一个函数的返回值被声明为多态类型时，必须至少有一个参数位置也是多态的，并且作为该参数提供的实际数据类型决定了该调用的实际结果类型。例如，如果还没有一种数组下标机制，我们可以定义一个函数来实现下标：<literal>subscript(anyarray, integer) returns anyelement</>。这个声明约束了实际的第一个参数是一种数组类型，并且允许解析器从实际的第一个参数类型推断正确的结果类型。另一个例子是一个被声明为<literal>f(anyarray) returns anyenum</>的函数将只接受枚举类型的数组。
    </para>

    <para>
     注意<type>anynonarray</>和<type>anyenum</>并不表示独立的类型变量，它们是和<type>anyelement</type>相同的类型，只是有一个额外的约束。例如，将一个函数声明为<literal>f(anyelement, anyenum)</>等效于把它声明为<literal>f(anyenum, anyenum)</>：两种实际参数必须是相同的枚举类型。
    </para>

    <para>
     一个可变函数（可以有可变数量的参数，如<xref linkend="xfunc-sql-variadic-functions">中所述）能够是多态的：这可以通过声明其最后一个参数为<literal>VARIADIC</> <type>anyarray</>来实现。为了匹配和决定实际结果类型的参数，这样一种函数的行为和写了合适数量的<type>anynonarray</>参数是一样的。
    </para>
   </sect2>
  </sect1>

  &xfunc;
  &xaggr;
  &xtypes;
  &xoper;
  &xindex;


  <sect1 id="extend-extensions">
   <title>打包相关对象到一个扩展中</title>

   <indexterm zone="extend-extensions">
    <primary>扩展</primary>
   </indexterm>

   <para>
    一个对<productname>PostgreSQL</>有用的扩展通常包括多个 SQL 对象，例如，一种新的数据类型将需要新函数、新操作符以及可能的新索引操作符类。将所有这些对象收集到一个单一包中有助于简化数据库管理。<productname>PostgreSQL</>称这样一个包为一个<firstterm>扩展</>。要定义一个扩展，你至少需要一个包含创建该扩展的对象的<acronym>SQL</>命令的<firstterm>脚本文件</>以及一个指定扩展本身的一些基本属性的<firstterm>控制文件</>。如果扩展包括 C 代码，通常还有一个 C 代码编译而成的共享库文件。一旦你有了这些文件，一个简单的<xref linkend="sql-createextension">命令可以把这些对象载入到你的数据库。
   </para>

   <para>
    使用一个扩展而不是只运行<acronym>SQL</>脚本载入一堆<quote>松散</>对象到数据库的主要优点是，<productname>PostgreSQL</>将能理解该扩展的对象是一起的。你可以用一个单一的<xref linkend="sql-dropextension">命令删除所有的对象（不用维护一个单独的<quote>卸载</>脚本）。 甚至更有用的一点是，<application>pg_dump</>知道它不应该转储该扩展中的个体成员对象 &mdash; 它将只在转储中包括一个<command>CREATE EXTENSION</>命令。这大大简化了迁移到一个包含不同于旧版扩展中对象的新版扩展的工作。不过，注意在把这样一个转储载入到一个新数据库时，该扩展的控制、脚本和其他文件必须可用。
   </para>

   <para>
    <productname>PostgreSQL</>不会让你删除包含在一个扩展中的个体对象，除非删除整个扩展。还有，虽然你能够改变一个扩展的成员对象的定义（例如，通过<command>CREATE OR REPLACE FUNCTION</command>改变一个函数），记住被修改后的定义将不会被<application>pg_dump</>转储。这种改变通常只有在你并发地在扩展脚本文件中做出相同更改时才有意义（但是对于包含配置数据的表有特殊的规定，见下文）。
   </para>

   <para>
    扩展机制也对打包调整一个扩展中所含 SQL 对象定义的修改脚本有规定。例如，如果一个扩展的 1.1 版本比 1.0 版本增加了一个函数并且更改了另一个函数的函数体，该扩展的作者可以提供一个<firstterm>更新脚本</>来做这两个更改。那么<command>ALTER EXTENSION UPDATE</>命令可以被用来应用这些更改并且跟踪在给定数据库中实际安装的是该扩展的哪个版本。
   </para>

   <para>
    能作为一个扩展的成员的 SQL 对象的种类如<xref linkend="sql-alterextension">所示。尤其是数据库集簇范围的对象（例如数据库、角色和表空间）不能作为扩展成员，因为一个扩展只在一个数据库范围内可见（尽管一个扩展脚本并没有被禁止创建这些对象，但是这样做将无法把它们作为扩展的一部分来跟踪）。还要注意虽然一个表可以是一个扩展的成员，它的扶助对象（例如索引）不会被直接认为是该扩展的成员。另一个重点是模式可以属于扩展，但是反过来不行：一个扩展本身有一个不被限定的名称并且不存在于任何模式<quote>中</>。不过，扩展的成员对象只要对象类型合适就可以属于模式。一个扩展拥有包含其成员对象的模式可能合适也可能不合适。
   </para>

   <sect2>
    <title>扩展文件</title>

   <indexterm>
    <primary>控制文件</primary>
   </indexterm>

    <para>
     <xref linkend="sql-createextension">命令依赖每一个扩展都有的控制文件，控制文件必须被命名为扩展的名称加上一个后缀<literal>.control</>，并且必须被放在安装的<literal>SHAREDIR/extension</literal>目录中。还必须至少有一个<acronym>SQL</>脚本文件，它遵循命名模式<literal><replaceable>extension</>--<replaceable>version</>.sql</literal>（例如，<literal>foo--1.0.sql</>表示扩展<literal>foo</>的<literal>1.0</>版本）。默认情况下，脚本文件也被放置在<literal>SHAREDIR/extension</literal>目录中，但是控制文件中可以为脚本文件指定一个不同的目录。
    </para>

    <para>
     一个扩展控制文件的格式与<filename>postgresql.conf</>文件相同，即是一个<replaceable>parameter_name</> <literal>=</> <replaceable>value</>赋值的列表，每行一个。允许空行和<literal>#</>引入的注释。注意对任何不是单一词或数字的值加上引号。
    </para>

    <para>
     一个控制文件可以设置下列参数：
    </para>

    <variablelist>
     <varlistentry>
      <term><varname>directory</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        包含扩展的<acronym>SQL</>脚本文件的目录。除非给出一个绝对路径，这个目录名是相对于安装的<literal>SHAREDIR</literal>目录。默认行为等效于指定<literal>directory = 'extension'</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>default_version</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        该扩展的默认版本（就是如果在<command>CREATE EXTENSION</>中没有指定版本时将会被安装的那一个）。尽管可以忽略这个参数，但如果没有出现<literal>VERSION</>选项时那将会导致<command>CREATE EXTENSION</>失败，因此你通常不会希望这样做。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>comment</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        一个关于该扩展的注释（任意字符串）。该注释也可以用脚本文件中的<xref linkend="sql-comment">命令来设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>encoding</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        该脚本文件使用的字符集编码。当脚本文件包含任何非 ASCII 字符时，可以指定这个参数。否则文件都会被假定为数据库编码。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>module_pathname</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        这个参数的值将被用于替换脚本文件中每一次出现的<literal>MODULE_PATHNAME</>。如果设置，将不会进行替换。通常，这会被设置为<literal>$libdir/<replaceable>shared_library_name</></literal>并且接着<literal>MODULE_PATHNAME</>被用在<command>CREATE FUNCTION</>命令中进行 C-语言函数的创建，因此该脚本文件不必把共享库的名称硬编码在其中。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>requires</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        这个扩展依赖的其他扩展名的一个列表，例如<literal>requires = 'foo, bar'</literal>。被依赖的扩展必须先于这个扩展安装。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>superuser</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
        如果这个参数为<literal>true</>（默认情况），只有超级用户能够创建该扩展或者将它更新到一个新版本。如果被设置为<literal>false</>，只需要用来执行安装中命令或者更新脚本的特权。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>relocatable</varname> (<type>boolean</type>)</term>
      <listitem>
       <para>
        如果一个扩展可能在初始创建之后将其所含的对象移动到一个不同的模式中，它就是<firstterm>relocatable</>。默认值是<literal>false</>，即该扩展是不可重定位的。详见下文。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>schema</varname> (<type>string</type>)</term>
      <listitem>
       <para>
        这个参数只能为非可重定位扩展设置。它强制扩展被载入到给定的模式中而非其他模式中。详见下文。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    <para>
     除了主要控制文件<literal><replaceable>extension</>.control</literal>，一个扩展还可以有二级控制文件，它们以<literal><replaceable>extension</>--<replaceable>version</>.control</literal>的风格命名。如果提供了二级控制文件，它们必须被放置在脚本文件的目录中。二级控制文件遵循主要控制文件相同的格式。在安装或更新该扩展的版本时，一个二级控制文件中设置的任何参数将覆盖主要控制文件中的设置。不过，参数<varname>directory</>以及<varname>default_version</>不能在二级控制文件中设置。
    </para>

    <para>
     一个扩展的<acronym>SQL</>脚本文件能够包含任何 SQL 命令，除了事务控制命令（<command>BEGIN</>、<command>COMMIT</>等）以及不能在一个事务块中执行的命令（如<command>VACUUM</>）。这是因为脚本文件会被隐式地在一个事务块中被执行。
    </para>

    <para>
     一个扩展的<acronym>SQL</>脚本文件也能包含以<literal>\echo</>开始的行，它将被扩展机制忽略（当作注释）。如果脚本文件被送给<application>psql</>而不是由<command>CREATE EXTENSION</>载入（见下文的示例脚本），这种机制通常被用来抛出错误。如果没有这种功能，用户可能会意外地把该扩展的内容作为<quote>松散的</>对象而不是一整个扩展载入，这样的状态恢复起来比较麻烦。
    </para>

    <para>
     尽管脚本文件可以包含指定编码允许的任何字符，但是控制文件应该只包含纯 ASCII 字符，因为<productname>PostgreSQL</>没有办法知道一个控制文件是什么编码。实际上，如果你想在扩展的注释中使用非 ASCII 字符只有一个问题。推荐的方法是不使用控制文件的<varname>comment</>参数，而是使用脚本文件中的<command>COMMENT ON EXTENSION</>来设置注释。
    </para>

   </sect2>

   <sect2>
    <title>扩展可再定位性</title>

    <para>
     用户常常希望把扩展中包含的对象载入到一个与扩展的作者所设想的不一样的模式中。对于这种可重定位性，有三种支持的级别：
    </para>

    <itemizedlist>
     <listitem>
      <para>
       一个完全可重定位的扩展能在任何时候被移动到另一个模式中，即使在它被载入到一个数据库中之后。这种移动通过<command>ALTER EXTENSION SET SCHEMA</>命令完成，该命令会自动地把所有成员对象重命名到新的模式中。通常，只有扩展不包含任何对其所在模式的内部假设时才可能这样做。还有，该扩展的对象必须全部在同一个模式中（忽略那些不属于任何模式的对象，例如过程语言）。要让一个扩展变成完全可定位，在它的控制文件中设置<literal>relocatable = true</>。
      </para>
     </listitem>

     <listitem>
      <para>
       一个扩展可能在安装过程中是可重定位的，但是安装完后就不再可重定位。典型的情况是扩展的脚本文件需要显式地引用目标模式，例如为 SQL 函数设置<literal>search_path</>属性。对于这样一种扩展，在其控制文件中设置<literal>relocatable = false</>，并且使用<literal>@extschema@</>在脚本文件中引用目标模式。在脚本被执行前，所有这个字符串的出现都将被替换为实际的目标模式名。用户可以使用<command>CREATE EXTENSION</>的<literal>SCHEMA</>选项设置目标模式名。
      </para>
     </listitem>

     <listitem>
      <para>
       如果扩展根本就不支持重定位，在它的控制文件中设置<literal>relocatable = false</>，并且还设置<literal>schema</>为想要的目标模式的名称。这将阻止使用<command>CREATE EXTENSION</>的<literal>SCHEMA</>选项修改目标模式，除非它指定的是和控制文件中相同的模式。如果该扩展包括关于模式名的内部假设且模式名不能使用<literal>@extschema@</>的方法替换，这种选择通常是必须的。<literal>@extschema@</>替换机制在这种情况中也是可用的，不过由于模式名已经被控制文件所决定，它的使用受到了很大的限制。
      </para>
     </listitem>
    </itemizedlist>

    <para>
     在所有情况下，脚本文件将被用<xref linkend="guc-search-path">执行，它最初会被设置为指向目标模式，也就是说<command>CREATE EXTENSION</>做的也是等效的工作：
<programlisting>
SET LOCAL search_path TO @extschema@;
</programlisting>
     这允许由这个脚本文件创建的对象进入到目标模式中。如果脚本文件希望，它可以改变<varname>search_path</>，但这种用法通常是不受欢迎的。在<command>CREATE EXTENSION</>结束后，<varname>search_path</>会被恢复到之前的设置。
    </para>

    <para>
     如果控制文件中给出了<varname>schema</>参数，目标模式就由该参数决定，否则目标模式由<command>CREATE EXTENSION</>的<literal>SCHEMA</>选项给出，如果以上两者都没有给出则会用当前默认的对象创建模式（在调用者<varname>search_path</>中的第一个）。当使用扩展文件的<varname>schema</>参数时，如果目标模式还不存在将创建它，但是在另外两种情况下它必须已经存在。
    </para>

    <para>
     如果在控制文件中的<varname>requires</varname>中列举了任何先导扩展，它们的目标模式会被追加到<varname>search_path</>的初始设置中。这允许新扩展的脚本文件能够看到它们的对象。
    </para>

    <para>
     尽管一个不可重定位的扩展能够包含散布在多个模式中的对象，通常还是值得将意图用于外部使用的所有对象放置在一个模式中，这被认为是该扩展的目标模式。这样一种安排可以在依赖的扩展创建过程中方便地与<varname>search_path</>的默认设置一起工作。
    </para>
   </sect2>

   <sect2>
    <title>扩展配置表</title>

    <para>
     某些扩展包括配置表，其中包含可以由用户在扩展安装后增加或修改的数据。通常，如果一个表是一个扩展的一部分，该表的定义和内容都不会被<application>pg_dump</>转储。但是对于一个配置表来说并不希望是这样的行为，任何用户做出的数据修改都需要被包括在转储中，否则该扩展在重载之后的行为将和转储之前不同。
    </para>

   <indexterm>
    <primary>pg_extension_config_dump</primary>
   </indexterm>

    <para>
     要解决这个问题，一个扩展的脚本文件可以把一个它创建的表标记为配置表，这将导致<application>pg_dump</>把该表的内容（而不是它的定义）包括在转储中。要这样做，在创建表之后调用函数<function>pg_extension_config_dump(regclass, text)</>，例如
<programlisting>
CREATE TABLE my_config (key text, value text);

SELECT pg_catalog.pg_extension_config_dump('my_config', '');
</programlisting>
     可以用这种方法标记任意数量的表。
    </para>

    <para>
     当<function>pg_extension_config_dump</>的第二个参数是一个空字符串时，该表的全部内容都会被<application>pg_dump</>转储。这通常只有在表被扩展脚本创建为初始为空时才正确。如果在表中混合有初始数据和用户提供的数据，<function>pg_extension_config_dump</>的第二个参数提供了一种<literal>WHERE</>条件来选择要被转储的数据。例如，你可能会做
<programlisting>
CREATE TABLE my_config (key text, value text, standard_entry boolean);

SELECT pg_catalog.pg_extension_config_dump('my_config', 'WHERE NOT standard_entry');
</programlisting>
     并且确保只有扩展脚本创建的行中<structfield>standard_entry</>才为真。
    </para>

    <para>
     更复杂的情况（例如用户可能会修改初始提供的数据）可以通过在配置表上创建触发器来处理，触发器将负责保证被修改的行会被正确地标记。
    </para>

    <para>
     你可通过再次调用<function>pg_extension_config_dump</>来修改与一个配置表相关的过滤条件（这通常对于一个扩展更新脚本有用）。将一个表标记为不再是一个配置表的方法是用<command>ALTER EXTENSION ... DROP TABLE</>将它与扩展脱离开。
    </para>

    <para>
     注意这些表之间的外键关系将会指导这些表被 pg_dump 转储的顺序。特别地，pg_dump 将尝试
     先转储被引用的表再转储引用表。由于外键关系是在 CREATE EXTENSION 时间（先于数据被载入
     到表中）建立的，环状依赖还没有建立。当环状依赖存在时，数据将仍然被转储，但是该转储无法被
     直接恢复并且必须要用户的介入。
    </para>

   </sect2>

   <sect2>
    <title>扩展更新</title>

    <para>
     扩展机制的一个优点是它提供了方便的方法来管理那些定义扩展中对象的 SQL 命令的更新。这是通过为扩展的安装脚本的每一个发行版本关联一个版本名称或者版本号实现的。此外，如果你希望用户能够动态地把他们的数据库从一个版本更新到下一个版本，你应该提供<firstterm>更新脚本</>来做必要的更改。更新脚本的名称遵循<literal><replaceable>extension</>--<replaceable>oldversion</>--<replaceable>newversion</>.sql</literal>模式（例如，<literal>foo--1.0--1.1.sql</>包含着把扩展<literal>foo</>的版本<literal>1.0</>修改成版本<literal>1.1</>的命令）。
    </para>

    <para>
     假定有一个合适的更新脚本可用，命令<command>ALTER EXTENSION UPDATE</>将把一个已安装的扩展更新到指定的新版本。更新脚本运行在与<command>CREATE EXTENSION</>提供给安装脚本相同的环境中：特别是<varname>search_path</>会按照相同的方式设置，并且该脚本创建的任何新对象会被自动地加入到扩展中。
    </para>

    <para>
     如果一个扩展具有二级控制文件，用于更新脚本的控制参数是那些与新目标版本相关的参数。
    </para>

    <para>
     更新机制可以被用来解决一种重要的特殊情况：将一个<quote>松散的</>对象集合转变成一个扩展。在扩展机制被加入到<productname>PostgreSQL</productname>（从 9.1 开始）之前，很多人编写的扩展模块简单地创建各种各样未打包的对象。给定一个包含这类对象的现有数据库，我们怎样才能将这些对象转变成一个正确打包的扩展？将它们全部删除然后做一次<command>CREATE EXTENSION</>是一种方法，但是如果对象之间有依赖（例如，如果有一些表列使用了扩展创建的数据类型）这就行不通。修正这种情况的方法是创建一个空扩展，然后使用<command>ALTER EXTENSION ADD</>把每一个以前就存在的对象附着到该扩展，最后创建在当前扩展版本中而不再未打包版本中的任何新对象。<command>CREATE EXTENSION</>用它的<literal>FROM</> <replaceable class="parameter">old_version</>选项支持这种情况，这会导致它不为目标版本运行正常的安装脚本，而是运行名为<literal><replaceable>extension</>--<replaceable>old_version</>--<replaceable>target_version</>.sql</literal>的更新脚本。选择作为<replaceable class="parameter">old_version</>使用的虚假版本名称是扩展作者的工作，不过<literal>unpackaged</>是一种习惯用法。如果你有多个早期版本需要更新到扩展风格，使用多个虚假版本名称来标识它们。
    </para>

    <para>
     <command>ALTER EXTENSION</>能够执行更新脚本的序列来实现一个要求的更新。例如，如果只有<literal>foo--1.0--1.1.sql</>和<literal>foo--1.1--2.0.sql</>可用，当前安装了<literal>1.0</>版本并且要求更新到版本<literal>2.0</>，<command>ALTER EXTENSION</>将依次应用它们。
    </para>

    <para>
     <productname>PostgreSQL</>并不假定任何有关版本名称的性质：例如，它不知道<literal>1.1</>是否跟在<literal>1.0</>后面。它只是匹配可用的版本名称并且遵照要求应用最少更新脚本的路径进行（一个版本名称实际上可以是不含<literal>--</>或者前导或后缀<literal>-</>的字符串）。
    </para>

    <para>
     有时提供<quote>降级</>脚本也有用，例如<literal>foo--1.1--1.0.sql</>允许把版本<literal>1.1</>相关的改变恢复原状。如果你这样做，要当心降级脚本被意外应用的可能性，因为它会得到一个较短的路径。危险的情况是，有一个跳过几个版本的<quote>快速路径</>更新脚本还有一个降级到该快速路径开始点的降级脚本。先应用降级然后再应用快速路径可能比一次升级一个版本需要更少的步骤。如果降级版本删除了任何不可替代的对象，这将会得到意想不到的结果。
    </para>

    <para>
     要检查意料之外的更新路径，可使用这个命令：
<programlisting>
SELECT * FROM pg_extension_update_paths('<replaceable>extension_name</>');
</programlisting>
     这会为指定的扩展显示已知的每一个可区分的版本名对，每一个版本名对还带有一个从源版本到目标版本的更新路径序列，如果没有可用的更新路径则这部份信息为<literal>NULL</>。该路径显示为用<literal>--</>分隔符的文本形式。如果你更喜欢数组格式，可以使用<literal>regexp_split_to_array(path,'--')</>。
    </para>
   </sect2>

   <sect2>
    <title>扩展实例</title>

    <para>
     这里是一个只用<acronym>SQL</>的扩展的完整例子，一个两个元素的组合类型，它可以在它的槽（命名为<quote>k</>和<quote>v</>）中存储任何类型的值。非文本值会被自动强制为文本进行存储。
    </para>

    <para>
     脚本文件<filename>pair--1.0.sql</>看起来像这样：

<programlisting><![CDATA[
-- 如果脚本是由 psql 而不是 CREATE EXTENSION 执行，则报错
\echo Use "CREATE EXTENSION pair" to load this file. \quit

CREATE TYPE pair AS ( k text, v text );

CREATE OR REPLACE FUNCTION pair(anyelement, text)
RETURNS pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::pair';

CREATE OR REPLACE FUNCTION pair(text, anyelement)
RETURNS pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::pair';

CREATE OR REPLACE FUNCTION pair(anyelement, anyelement)
RETURNS pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::pair';

CREATE OR REPLACE FUNCTION pair(text, text)
RETURNS pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::pair;';

CREATE OPERATOR ~> (LEFTARG = text, RIGHTARG = anyelement, PROCEDURE = pair);
CREATE OPERATOR ~> (LEFTARG = anyelement, RIGHTARG = text, PROCEDURE = pair);
CREATE OPERATOR ~> (LEFTARG = anyelement, RIGHTARG = anyelement, PROCEDURE = pair);
CREATE OPERATOR ~> (LEFTARG = text, RIGHTARG = text, PROCEDURE = pair);
]]>
</programlisting>
    </para>

    <para>
     控制文件<filename>pair.control</>看起来像这样：

<programlisting>
# pair 扩展
comment = 'A key/value pair data type'
default_version = '1.0'
relocatable = true
</programlisting>
    </para>

    <para>
     虽然你几乎不会需要一个 makefile 来安装这两个文件到正确的目录，你还是可以使用一个<filename>Makefile</>：

<programlisting>
EXTENSION = pair
DATA = pair--1.0.sql

PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)
</programlisting>

     这个 makefile 依赖于<acronym>PGXS</acronym>，它在<xref linkend="extend-pgxs">中描述。命令<literal>make install</>将把控制和脚本文件安装到<application>pg_config</>报告的正确的目录中。
    </para>

    <para>
     一旦文件被安装，使用<xref linkend="sql-createextension">命令就可以把对象载入到任何特定的数据库中。
    </para>
   </sect2>
  </sect1>

  <sect1 id="extend-pgxs">
   <title>扩展的构建基础设施</title>

   <indexterm zone="extend-pgxs">
    <primary>pgxs</primary>
   </indexterm>

   <para>
    如果你正在考虑发布你的<productname>PostgreSQL</>扩展模块，为它们建立一个可移植的构建系统实在是相当困难。因此<productname>PostgreSQL</>安装为扩展提供了一种被称为<acronym>PGXS</acronym>构建基础设施，因此简单的扩展模块能够在一个已经安装的服务器上简单地编译。<acronym>PGXS</acronym>主要是为了包括 C 代码的扩展而设计，不过它也能用于纯 SQL 的扩展。注意<acronym>PGXS</acronym>并不想成为一种用于构建任何与<productname>PostgreSQL</>交互的软件的通用构建系统框架。它只是简单地把简单服务器扩展模块的公共构建规则自动化。对于更复杂的包，你可能需要编写你自己的构建系统。
   </para>

   <para>
    要把<acronym>PGXS</acronym>基础设施用于你的扩展，你必须编写一个简单的 makefile。在这个 makefile 中，你需要设置一些变量并且把它们包括在全局的<acronym>PGXS</acronym> makefile 中。这里有一个例子，它构建一个名为<literal>isbn_issn</literal>的扩展模块，其中包括一个含有 C 代码的共享库、一个扩展控制文件、一个 SQL 脚本以及一个文档文件：
<programlisting>
MODULES = isbn_issn
EXTENSION = isbn_issn
DATA = isbn_issn--1.0.sql
DOCS = README.isbn_issn

PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)
</programlisting>
    最后三行应该总是相同的。在这个文件的前面部分，你要对变量赋值或者增加自定义的<application>make</application>规则。
   </para>

   <para>
    设置这三个变量之一来指定要构建什么：

    <variablelist>
     <varlistentry>
      <term><varname>MODULES</varname></term>
      <listitem>
       <para>
        要从源文件构建的具有相同词干的共享库对象的列表（不要在这个列表中包括库后缀）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>MODULE_big</varname></term>
      <listitem>
       <para>
        一个要从多个源文件中构建的共享库（在<varname>OBJS</varname>中列出对象文件）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PROGRAM</varname></term>
      <listitem>
       <para>
        一个要构建的可执行程序（在<varname>OBJS</varname>中列出对象文件）
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    还可以设置下列变量：

    <variablelist>
     <varlistentry>
      <term><varname>EXTENSION</varname></term>
      <listitem>
       <para>
        扩展名称；你必须为每一个名称提供一个<literal><replaceable>extension</replaceable>.control</literal>文件，它将被安装到<literal><replaceable>prefix</replaceable>/share/extension</literal>中
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>MODULEDIR</varname></term>
      <listitem>
       <para>
        subdirectory of <literal><replaceable>prefix</>/share</literal>的子目录，DATA 和 DOCS 文件会被安装到其中（如果没有设置，设置了<varname>EXTENSION</varname>时默认为<literal>extension</literal>，没有设置<varname>EXTENSION</varname>时默认为<literal>contrib</literal>）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DATA</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/share/$MODULEDIR</literal>中的随机文件
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DATA_built</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/share/$MODULEDIR</literal>中的随机文件，它们需要先被构建
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DATA_TSEARCH</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/share/tsearch_data</literal>中的随机文件
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DOCS</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/doc/$MODULEDIR</literal>中的随机文件
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SCRIPTS</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/bin</literal>中的脚本文件（非二进制）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SCRIPTS_built</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/bin</literal>中的脚本文件（非二进制），它们需要先被构建
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>REGRESS</varname></term>
      <listitem>
       <para>
        回归测试案例（不带后缀）的列表，见下文
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>REGRESS_OPTS</varname></term>
      <listitem>
       <para>
        要传递给<application>pg_regress</>的附加开关
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>EXTRA_CLEAN</varname></term>
      <listitem>
       <para>
        要在<literal>make clean</literal>中移除的额外文件
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CPPFLAGS</varname></term>
      <listitem>
       <para>
        将被加到<varname>CPPFLAGS</varname>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_LIBS</varname></term>
      <listitem>
       <para>
        将被加到<varname>PROGRAM</varname>链接行
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SHLIB_LINK</varname></term>
      <listitem>
       <para>
        将被加到<varname>MODULE_big</varname>链接行
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CONFIG</varname></term>
      <listitem>
       <para>
        要在其中构建的<productname>PostgreSQL</productname>安装的<application>pg_config</>程序的路径（通常只用在你的<varname>PATH</>中的第一个<literal>pg_config</>）
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    把这个 makefile 作为<literal>Makefile</literal>放在保存你扩展的目录中。然后你可以执行<literal>make</literal>进行编译，并且接着<literal>make install</literal>来安装你的模块。默认情况下，该模块会为在你的<varname>PATH</>中找到的第一个<command>pg_config</command>程序所对应的<productname>PostgreSQL</productname>安装编译和安装。你可以通过在 makefile 中或者<literal>make</literal>命令行中设置<varname>PG_CONFIG</varname>指向另一个<command>pg_config</command>程序来使用一个不同的安装。
   </para>

   <para>
    如果你想保持编译目录独立，你也可以在你的扩展所属的源代码树之外的目录中运行
    <literal>make</literal>。 这个过程也被称为一个
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>
    编译。下面是做法：
<programlisting>
mkdir build_dir
cd build_dir
make -f /path/to/extension/source/tree/Makefile
make -f /path/to/extension/source/tree/Makefile install
</programlisting>
   </para>

   <para>
    此外，你可以以对核心代码所作的方式一样为 VPATH 设置一个目录。一种方式是使用核心脚本
    <filename>config/prep_buildtree</>。一旦这样做，你可以这样设置
    <literal>make</literal>变量<varname>VPATH</varname>：
<programlisting>
make VPATH=/path/to/extension/source/tree
make VPATH=/path/to/extension/source/tree install
</programlisting>
    这个过程可以在很多种目录布局下工作。
   </para>

   <para>
    列举在<varname>REGRESS</>变量中的脚本会被用来对你的扩展进行回归测试，回归测试可以在做完<literal>make install</>之后用<literal>make installcheck</literal>调用。要让这能够工作，你必须已经有一个运行着的<productname>PostgreSQL</productname>服务器。列举在<varname>REGRESS</>中的脚本文件必须在你扩展目录的名为<literal>sql/</literal>的子目录中出现。这些文件必须带有扩展<literal>.sql</literal>，但扩展不能被包括在 makefile 的<varname>REGRESS</varname>列表中。对每一个测试还应该在名为<literal>expected/</literal>的子目录中有一个包含预期输出的文件，它具有和脚本文件相同的词干并带有扩展<literal>.out</literal>。<literal>make installcheck</literal>会用<application>psql</>执行每一个测试脚本，并且将得到结果输出与相应的预期输出比较。任何区别都将以<command>diff -c</command>格式写入到文件<literal>regression.diffs</literal>中。注意尝试运行一个不带预期文件的测试将被报告为<quote>故障</quote>，因此确保你拥有所有的预期文件。
   </para>

   <tip>
    <para>
     创建预期文件最简单的方法是创建空文件，然后做一次测试运行（这当然将报告区别）。检查在<literal>results/</literal>目录中找到的实际结果文件，如果它们符合你的预期则把它们复制到<literal>expected/</literal>中。
    </para>

   </tip>
  </sect1>

 </chapter>

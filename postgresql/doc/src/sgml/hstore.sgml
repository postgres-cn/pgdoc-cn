<!-- doc/src/sgml/hstore.sgml -->

<sect1 id="hstore" xreflabel="hstore">
 <title>hstore</title>

 <indexterm zone="hstore">
  <primary>hstore</primary>
 </indexterm>

 <para>
  这个模块实现了<type>hstore</>数据类型用来在一个单一<productname>PostgreSQL</>值中存储键值对。这在很多情景下都有用，例如带有很多很少被检查的属性的行或者半结构化数据。键和值都是简单的文本字符串。
 </para>

 <sect2>
  <title><type>hstore</> 外部表示</title>

  <para>

   一个<type>hstore</>的文本表示用于输入和输出，包括零个或者多个由逗号分隔的<replaceable>key</> <literal>=&gt;</> <replaceable>value</>对。一些例子：

<synopsis>
k =&gt; v
foo =&gt; bar, baz =&gt; whatever
"1-a" =&gt; "anything at all"
</synopsis>

   键值对的顺序没有意义（并且在输出时也不会重现）。键值对之间或者<literal>=&gt;</>号周围的空白会被忽略。双引号内的键和值可以包括空白、逗号、<literal>=</>或<literal>&gt;</>。要在一个键或值中包括一个双引号或一个反斜线，用一个反斜线对它转义。
  </para>

  <para>
   一个<type>hstore</>中的每一个键是唯一的。如果你声明了一个有重复键的<type>hstore</>，只有一个会被存储在<type>hstore</>中并且无法保证哪一个将被保留：

<programlisting>
SELECT 'a=&gt;1,a=&gt;2'::hstore;
  hstore
----------
 "a"=&gt;"1"
</programlisting>
  </para>

  <para>
   一个值（但不是一个键）能够是一个 SQL <literal>NULL</>。例如：

<programlisting>
key =&gt; NULL
</programlisting>

   <literal>NULL</>关键词是大小写不敏感的。将<literal>NULL</>放在双引号中可以将它当作一个普通的字符串<quote>NULL</quote>。
  </para>

  <note>
  <para>
   记住当<type>hstore</>文本格式当被用于输入时，它应用在任何必须的引用或转义<emphasis>之前</>。如果你通过一个参数传递一个<type>hstore</>文字，那么不需要额外的处理。但是如果你将它作为一个引用的文字常数，那么任何单引号字符以及（取决于<varname>standard_conforming_strings</>配置参数的设置）反斜线字符需要被正确地转义。更多关于处理字符串常量的处理可见<xref linkend="sql-syntax-strings">。
  </para>
  </note>

  <para>
   在输出时，双引号总是围绕着键和值，即使这样做不是绝对必要。
  </para>

 </sect2>

 <sect2>
  <title><type>hstore</> 操作符和函数</title>

  <para>
   <literal>hstore</literal>模块所提供的操作符显示在<xref linkend="hstore-op-table">中，函数在<xref linkend="hstore-func-table">中。
  </para>

  <table id="hstore-op-table">
   <title><type>hstore</> 操作符</title>

   <tgroup cols="4">
    <thead>
     <row>
      <entry>操作符</entry>
      <entry>描述</entry>
      <entry>例子</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>hstore</> <literal>-&gt;</> <type>text</></entry>
      <entry>为键得到值（不存在则是<literal>NULL</>）</entry>
      <entry><literal>'a=&gt;x, b=&gt;y'::hstore -&gt; 'a'</literal></entry>
      <entry><literal>x</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>-&gt;</> <type>text[]</></entry>
      <entry>为多个键得到值（不存在则是<literal>NULL</>）</entry>
      <entry><literal>'a=&gt;x, b=&gt;y, c=&gt;z'::hstore -&gt; ARRAY['c','a']</literal></entry>
      <entry><literal>{"z","x"}</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>||</> <type>hstore</></entry>
      <entry>串接<type>hstore</></entry>
      <entry><literal>'a=&gt;b, c=&gt;d'::hstore || 'c=&gt;x, d=&gt;q'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"b", "c"=&gt;"x", "d"=&gt;"q"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>?</> <type>text</></entry>
      <entry><type>hstore</>是否包含键？</entry>
      <entry><literal>'a=&gt;1'::hstore ? 'a'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>?&amp;</> <type>text[]</></entry>
      <entry><type>hstore</>是否包含所有指定的键？</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?&amp; ARRAY['a','b']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>?|</> <type>text[]</></entry>
      <entry><type>hstore</>是否包含任何指定的键？</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?| ARRAY['b','c']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>@&gt;</> <type>hstore</></entry>
      <entry>左操作数是否包含右操作数？</entry>
      <entry><literal>'a=&gt;b, b=&gt;1, c=&gt;NULL'::hstore @&gt; 'b=&gt;1'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>&lt;@</> <type>hstore</></entry>
      <entry>左操作数是否被包含在右操作数中？</entry>
      <entry><literal>'a=&gt;c'::hstore &lt;@ 'a=&gt;b, b=&gt;1, c=&gt;NULL'</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>-</> <type>text</></entry>
      <entry>从左操作数中删除键</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'b'::text</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>-</> <type>text[]</></entry>
      <entry>从左操作数中删除多个键</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - ARRAY['a','b']</literal></entry>
      <entry><literal>"c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>-</> <type>hstore</></entry>
      <entry>从左操作数中删除匹配的对</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'a=&gt;4, b=&gt;2'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>record</> <literal>#=</> <type>hstore</></entry>
      <entry>用来自<type>hstore</>的匹配值替换<type>record</>中的域</entry>
      <entry>见示例小节</entry>
      <entry></entry>
     </row>

     <row>
      <entry><literal>%%</> <type>hstore</></entry>
      <entry>把<type>hstore</>转换成键和值交替出现的数组</entry>
      <entry><literal>%% 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{a,foo,b,bar}</literal></entry>
     </row>

     <row>
      <entry><literal>%#</> <type>hstore</></entry>
      <entry>把<type>hstore</>转换成二维的键值数组</entry>
      <entry><literal>%# 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{{a,foo},{b,bar}}</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <note>
  <para>
   在 PostgreSQL 8.2 之前，包含操作符<literal>@&gt;</>和<literal>&lt;@</>分别被称为<literal>@</>和<literal>~</>。这些名称仍然可用，但是已经被弃用并且最终将被移除。注意，旧名称和原来核心几何数据类型所遵循的习惯是相反的！
   </para>
  </note>

  <table id="hstore-func-table">
   <title><type>hstore</> 函数</title>

   <tgroup cols="5">
    <thead>
     <row>
      <entry>函数</entry>
      <entry>返回类型</entry>
      <entry>描述</entry>
      <entry>例子</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>hstore(record)</function><indexterm><primary>hstore</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <entry>从一个记录或行构造一个<type>hstore</></entry>
      <entry><literal>hstore(ROW(1,2))</literal></entry>
      <entry><literal>f1=&gt;1,f2=&gt;2</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>从一个数组构造一个<type>hstore</>，数组可以是一个键值数组或者一个二维数组</entry>
      <entry><literal>hstore(ARRAY['a','1','b','2']) || hstore(ARRAY[['c','3'],['d','4']])</literal></entry>
      <entry><literal>a=&gt;1, b=&gt;2, c=&gt;3, d=&gt;4</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text[], text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>从独立的键和值数组构建一个<type>hstore</></entry>
      <entry><literal>hstore(ARRAY['a','b'], ARRAY['1','2'])</literal></entry>
      <entry><literal>"a"=&gt;"1","b"=&gt;"2"</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text, text)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>构造单一项的<type>hstore</></entry>
      <entry><literal>hstore('a', 'b')</literal></entry>
      <entry><literal>"a"=&gt;"b"</literal></entry>
     </row>

     <row>
      <entry><function>akeys(hstore)</function><indexterm><primary>akeys</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>取得<type>hstore</>的键作为一个数组</entry>
      <entry><literal>akeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,b}</literal></entry>
     </row>

     <row>
      <entry><function>skeys(hstore)</function><indexterm><primary>skeys</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
      <entry>取得<type>hstore</>的键作为一个集合</entry>
      <entry><literal>skeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
a
b
</programlisting></entry>
     </row>

     <row>
      <entry><function>avals(hstore)</function><indexterm><primary>avals</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>取得<type>hstore</>的值作为一个数组</entry>
      <entry><literal>avals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{1,2}</literal></entry>
     </row>

     <row>
      <entry><function>svals(hstore)</function><indexterm><primary>svals</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
      <entry>取得<type>hstore</>的值作为一个集合</entry>
      <entry><literal>svals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
1
2
</programlisting></entry>
     </row>

     <row>
      <entry><function>hstore_to_array(hstore)</function><indexterm><primary>hstore_to_array</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>取得<type>hstore</>的键和值作为一个键和值交替出现的数组</entry>
      <entry><literal>hstore_to_array('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,1,b,2}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_matrix(hstore)</function><indexterm><primary>hstore_to_matrix</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>取得<type>hstore</>的键和值作为一个二维的数组</entry>
      <entry><literal>hstore_to_matrix('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{{a,1},{b,2}}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_json(hstore)</function><indexterm><primary>hstore_to_json</primary></indexterm></entry>
      <entry><type>json</type></entry>
      <entry>取得<type>hstore</type>作为一个<type>json</type>值</entry>
      <entry><literal>hstore_to_json('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_json_loose(hstore)</function><indexterm><primary>hstore_to_json_loose</primary></indexterm></entry>
      <entry><type>json</type></entry>
      <entry>取得<type>hstore</type>作为一个<type>json</type>值，但是尝试区分数字值和布尔值这样它们在 JSON 中无需引用</entry>
      <entry><literal>hstore_to_json_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</literal></entry>
     </row>

     <row>
      <entry><function>slice(hstore, text[])</function><indexterm><primary>slice</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <entry>从一个<type>hstore</>抽取一个子集</entry>
      <entry><literal>slice('a=&gt;1,b=&gt;2,c=&gt;3'::hstore, ARRAY['b','c','x'])</literal></entry>
      <entry><literal>"b"=&gt;"2", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><function>each(hstore)</function><indexterm><primary>each</primary></indexterm></entry>
      <entry><type>setof(key text, value text)</type></entry>
      <entry>取得<type>hstore</>的键和值作为一个集合</entry>
      <entry><literal>select * from each('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
 key | value
-----+-------
 a   | 1
 b   | 2
</programlisting></entry>
     </row>

     <row>
      <entry><function>exist(hstore,text)</function><indexterm><primary>exist</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
      <entry><type>hstore</>是否包含键？</entry>
      <entry><literal>exist('a=&gt;1','a')</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><function>defined(hstore,text)</function><indexterm><primary>defined</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
      <entry><type>hstore</>是否为键包含非<literal>NULL</>值？</entry>
      <entry><literal>defined('a=&gt;NULL','a')</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,text)</function><indexterm><primary>delete</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <entry>删除匹配键的对</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','b')</literal></entry>
      <entry><literal>"a"=>"1"</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>删除匹配多个键的多个对</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2,c=&gt;3',ARRAY['a','b'])</literal></entry>
      <entry><literal>"c"=>"3"</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,hstore)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>删除匹配第二个参数的对</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','a=&gt;4,b=&gt;2'::hstore)</literal></entry>
      <entry><literal>"a"=>"1"</literal></entry>
     </row>

     <row>
      <entry><function>populate_record(record,hstore)</function><indexterm><primary>populate_record</primary></indexterm></entry>
      <entry><type>record</type></entry>
      <entry>用来自<type>hstore</>的匹配值替换<type>record</>中的域</entry>
      <entry>见示例小节</entry>
      <entry></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
     当一个<type>hstore</type>值被造型成<type>json</type>时，将使用函数<function>hstore_to_json</function>。
   </para>
  </note>

  <note>
   <para>
    函数<function>populate_record</function>实际上被声明为第一个参数为<type>anyelement</>而非<type>record</>，但是它将会用一个运行时错误拒绝非记录类型。
   </para>
  </note>
 </sect2>

 <sect2>
  <title>索引</title>

  <para>
   <type>hstore</>有对<literal>@&gt;</>、<literal>?</>、<literal>?&amp;</>和<literal>?|</>操作符的 GiST 和 GIN 索引支持。例如：
  </para>
<programlisting>
CREATE INDEX hidx ON testhstore USING GIST (h);

CREATE INDEX hidx ON testhstore USING GIN (h);
</programlisting>

  <para>
   <type>hstore</>也为<literal>=</>操作符支持<type>btree</>或<type>hash</>索引。这允许<type>hstore</>列被声明为<literal>UNIQUE</>或者被使用在<literal>GROUP BY</>、<literal>ORDER BY</>或<literal>DISTINCT</>表达式中。<type>hstore</>值的排序顺序不是特别有用，但是这些索引可能对等值查找有用。为<literal>=</>比较创建以下索引：
  </para>
<programlisting>
CREATE INDEX hidx ON testhstore USING BTREE (h);

CREATE INDEX hidx ON testhstore USING HASH (h);
</programlisting>
 </sect2>

 <sect2>
  <title>例子</title>

  <para>
   增加一个键，或者用一个新值更新一个现有的键：
<programlisting>
UPDATE tab SET h = h || hstore('c', '3');
</programlisting>
  </para>

  <para>
   删除一个键：
<programlisting>
UPDATE tab SET h = delete(h, 'k1');
</programlisting>
  </para>

  <para>
   将一个<type>record</>转换成一个<type>hstore</>：
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT hstore(t) FROM test AS t;
                   hstore                    
---------------------------------------------
 "col1"=&gt;"123", "col2"=&gt;"foo", "col3"=&gt;"bar"
(1 row)
</programlisting>
  </para>

  <para>
   将一个<type>hstore</>转换成一个预定义的<type>record</>类型：
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);

SELECT * FROM populate_record(null::test,
                              '"col1"=&gt;"456", "col2"=&gt;"zzz"');
 col1 | col2 | col3 
------+------+------
  456 | zzz  | 
(1 row)
</programlisting>
  </para>

  <para>
   用来自于一个<type>hstore</>的值修改一个现有的记录：
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT (r).* FROM (SELECT t #= '"col3"=&gt;"baz"' AS r FROM test t) s;
 col1 | col2 | col3 
------+------+------
  123 | foo  | baz
(1 row)
</programlisting>
  </para>
 </sect2>

 <sect2>
  <title>统计</title>

  <para>
   由于<type>hstore</>类型本质的宽大性，它能够包含一些不同的键。检查合法键是应用的任务。下列例子验证了用于检查键以及获得统计的一些技术。
  </para>

  <para>
   简单例子：
<programlisting>
SELECT * FROM each('aaa=&gt;bq, b=&gt;NULL, ""=&gt;1');
</programlisting>
  </para>

  <para>
   使用一个表：
<programlisting>
SELECT (each(h)).key, (each(h)).value INTO stat FROM testhstore;
</programlisting>
  </para>

  <para>
   在线统计：
<programlisting>
SELECT key, count(*) FROM
  (SELECT (each(h)).key FROM testhstore) AS stat
  GROUP BY key
  ORDER BY count DESC, key;
    key    | count
-----------+-------
 line      |   883
 query     |   207
 pos       |   203
 node      |   202
 space     |   197
 status    |   195
 public    |   194
 title     |   190
 org       |   189
...................
</programlisting>
  </para>
 </sect2>

 <sect2>
  <title>兼容性</title>

  <para>
   从 PostgreSQL 9.0 开始，<type>hstore</>使用了与之前版本不同的内部表示。这不会为转储/恢复升级造成障碍，因为文本表示（用于转储）没有改变。
  </para>

  <para>
   在一次二进制升级中，通过让新代码识别旧格式数据来维持向上兼容。当处理还没有被新代码修改过的数据时，这会带来一定的性能惩罚。可以通过执行一个下面的<literal>UPDATE</>语句来强制升级表中的所有值：
<programlisting>
UPDATE tablename SET hstorecol = hstorecol || '';
</programlisting>
  </para>

  <para>
   另一种方法：
<programlisting>
ALTER TABLE tablename ALTER hstorecol TYPE hstore USING hstorecol || '';
</programlisting>
   <command>ALTER TABLE</>方法要求表上的一个排他锁，但是不会导致表因为旧行版本而膨胀。
  </para>

 </sect2>

 <sect2>
  <title>作者</title>

  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>，俄罗斯莫斯科大学
  </para>

  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>，俄罗斯德尔塔软件有限公司
  </para>

  <para>
   额外的提升由英国的 Andrew Gierth <email>andrew@tao11.riddles.org.uk</email> 提供
  </para>
 </sect2>

</sect1>

<!-- doc/src/sgml/fdwhandler.sgml -->

 <chapter id="fdwhandler">
   <title>编写一个外部数据包装器</title>

   <indexterm zone="fdwhandler">
    <primary>foreign data wrapper</primary>
    <secondary>handler for</secondary>
   </indexterm>

   <para>
    所有在一个外部表上的操作都通过它的外部数据包装器来处理，外部数据包装器由一组被核心服务器调用的函数组成。外部数据包装器负责从远程数据源取得数据并把它返回给<productname>PostgreSQL</productname>执行器。如果要支持更新外部表，包装器也需要处理更新。本章将介绍如何编写一个新的外部数据包装器。
   </para>

   <para>
    在你试图编写你自己的外部数据包装器时，包含在标准发布中的外部数据包装器会是很好的参考。请看看源代码树的<filename>contrib</>子目录。<xref linkend="sql-createforeigndatawrapper">参考页也会有很多有用的细节。
   </para>

   <note>
    <para>
     SQL 标准声明了一个接口用来编写外部数据包装器。但是，PostgreSQL 没有实现该 API，因为将其纳入到 PostgreSQL 中的工作量将会很大，并且标准的 API 并没有得到广泛地采用。
    </para>
   </note>

   <sect1 id="fdw-functions">
    <title>外部数据包装器函数</title>

    <para>
     FDW的作者需要实现一个处理器函数，并且可以有选择地实现一个验证器函数。两个函数都必须被用一种编译语言（如 C）来编写，并使用版本-1接口。关于 C 语言调用习惯和动态载入的细节，请见<xref linkend="xfunc-c">。
    </para>

    <para>
     处理器函数简单地返回一个函数指针结构给回调函数，回调函数将被规划器、执行器和多种维护命令调用。编写一个FDW的大部分工作量都在实现这些回调函数上。处理器函数必须被注册在<productname>PostgreSQL</productname>中，并且注册为不需要参数并且返回特殊的伪类型<type>fdw_handler</type>。回调函数则是普通的 C 函数并且对于 SQL 层是不可见的或者不可调用的。回调函数在<xref linkend="fdw-callbacks">中描述。
    </para>

    <para>
     验证器函数负责验证<command>CREATE</command>和<command>ALTER</command>命令中对它的外部数据包装器给出的选项，以及使用该包装器的外部服务器、用户映射和外部表。验证器函数必须被注册为要求两个参数：一个包含需要被验证的选项的文本数组，以及一个表示与这些选项相关联的对象类型的OID（以该对象可能被存储的系统目录的OID的形式，
     可以是<literal>ForeignDataWrapperRelationId</>、<literal>ForeignServerRelationId</>、<literal>UserMappingRelationId</>、
     或<literal>ForeignTableRelationId</>）。如果没有提供验证器函数，在对象创建或修改时选项不会被检查。
    </para>

   </sect1>

   <sect1 id="fdw-callbacks">
    <title>外部数据包装器回调例程</title>

    <para>
     FDW处理器函数返回一个palloc过的<structname>FdwRoutine</>结构，它包含下文描述的回调函数的指针。扫描相关的函数是必需的，剩下的是可选的。
    </para>

    <para>
     <structname>FdwRoutine</>结构类型被声明在<filename>src/include/foreign/fdwapi.h</>中，可以查看它来获得额外的信息。
    </para>

   <sect2 id="fdw-callbacks-scan">
    <title>用于扫描外部表的FDW例程</title>

    <para>
<programlisting>
void
GetForeignRelSize (PlannerInfo *root,
                   RelOptInfo *baserel,
                   Oid foreigntableid);
</programlisting>

     获取一个外部表的关系尺寸估计。在对一个扫描外部表的查询进行规划的开头将调用该函数。<literal>root</>是规划器的关于该查询的全局信息；<literal>baserel</>是规划器的关于该表的信息；<literal>foreigntableid</>是外部表在<structname>pg_class</>中的 OID （<literal>foreigntableid</>可以从规划器的数据结构中获得，但是为了减少工作量，这里直接显式地将它传递给函数）。
    </para>

    <para>
     这个函数应该更新<literal>baserel-&gt;rows</>为表扫描根据限制条件完成了过滤后将返回的预期行数。<literal>baserel-&gt;rows</>的初始值只是一个常数的默认估计值，应该尽可能把它替换掉。如果该函数能够计算出一个平均结果行宽度的更好的估计值，该函数也可能选择更新<literal>baserel-&gt;width</>。
    </para>

    <para>
     更多信息请见<xref linkend="fdw-planning">。
    </para>

    <para>
<programlisting>
void
GetForeignPaths (PlannerInfo *root,
                 RelOptInfo *baserel,
                 Oid foreigntableid);
</programlisting>

     为一个外部表上的扫描创建可能的访问路径。这个函数在查询规划过程中被调用。参数和<function>GetForeignRelSize</>相同，后者已经被调用过了。
    </para>

    <para>
     这个函数必须为外部表上的扫描生成至少一个访问路径（<structname>ForeignPath</>节点），并且必须调用<function>add_path</>把每一个这样的路径加入到<literal>baserel-&gt;pathlist</>中。我们推荐使用<function>create_foreignscan_path</>来建立<structname>ForeignPath</>节点。该函数可以生成多个访问路径，例如一个具有合法<literal>pathkeys</>的路径表示一个预排序好的结果。每一个反问路径必须包含代价估计，并且能包含任何FDW的私有信息，这种信息被用来标识想要使用的指定扫描方法。
    </para>

    <para>
     更多信息请见<xref linkend="fdw-planning">。
    </para>

    <para>
<programlisting>
ForeignScan *
GetForeignPlan (PlannerInfo *root,
                RelOptInfo *baserel,
                Oid foreigntableid,
                ForeignPath *best_path,
                List *tlist,
                List *scan_clauses,
                Plan *outer_plan);
</programlisting>

     从选择的外部访问路径创建一个<structname>ForeignScan</>计划节点。这个函数在查询规划的末尾被调用。参数和<function>GetForeignRelSize</>的一样，外加选中的<structname>ForeignPath</>（在前面由<function>GetForeignPaths</>或<function>GetForeignJoinPaths</>产生）。
     由计划节点发出目标列表，计划节点强制执行限制子句以及<structname>ForeignScan</>的外部子查询，
     用于<function>RecheckForeignScan</>执行的重新检查。（如果路径是一个连接而不是基本关系，
     那么<literal>foreigntableid</>是<literal>InvalidOid</>。） 
    </para>

    <para>
     这个函数必须创建并返回一个<structname>ForeignScan</>计划节点，我们对剑使用<function>make_foreignscan</>来建立<structname>ForeignScan</>节点。
    </para>

    <para>
     更多信息见<xref linkend="fdw-planning">。
    </para>

    <para>
<programlisting>
void
BeginForeignScan (ForeignScanState *node,
                  int eflags);
</programlisting>

     开始执行一个外部扫描。这个函数在执行器启动阶段被调用。它应该执行任何在扫描能够开始之前需要完成的初始化工作，但是并不开始执行真正的扫描（会在第一次调用<function>IterateForeignScan</>时完成）。<structname>ForeignScanState</>节点已经被创建好了，但是它的<structfield>fdw_state</>域仍然为 NULL。关于要被扫描的表的信息可以通过<structname>ForeignScanState</>节点访问（特殊地，从底层的<structname>ForeignScan</>计划节点，它包含任何由<function>GetForeignPlan</>提供的FDW私有信息）。<literal>eflags</>包含描述执行器对该计划节点操作模式的标志位。
    </para>

    <para>
     注意当<literal>(eflags &amp; EXEC_FLAG_EXPLAIN_ONLY)</>为真时，这个函数不应该执行任何外部可见的动作；它应当只做最少的事情来创建对<function>ExplainForeignScan</> 和<function>EndForeignScan</>有效的节点状态。
    </para>

    <para>
<programlisting>
TupleTableSlot *
IterateForeignScan (ForeignScanState *node);
</programlisting>

     从外部源获得一行，将它放在一个元组表槽中返回（节点的<structfield>ScanTupleSlot</>应当被用于此目的）。如果没有更多的行可用则返回 NULL。元组表槽设施允许一个物理的或者虚拟的元组被返回；在大部分情况下出于性能的考虑会倾向于选择后者。注意这是在一个短期存在的内存上下文中被调用的，该内存上下文会在调用之间被重置。如果你需要长期存在的存储，请在<function>BeginForeignScan</>中创建内存上下文，或者使用节点的<structname>EState</>中的<structfield>es_query_cxt</>。
    </para>

    <para>
     被返回的行必须匹配提供的<structfield>fdw_scan_tlist</>目标列。
     否则，它们必须与被扫描的外表的行类型匹配。
     如果你选择将那些不需要的列优化掉，你应该在那些列位置上插入空值。
     否则产生忽略掉那些列的<structfield>fdw_scan_tlist</>列表。
    </para>

    <para>
     注意<productname>PostgreSQL</productname>的执行器并不关心被返回的行是否违反任何定义在外部表列上的任何约束 &mdash; 
     但是规划器却关心，并且如果在不满足声明约束的外表中有可见行，
     可能优化查询不正确。
     当用户已经声明该约束是真的时，如果违反了该约束，
     可能抛出一个错误更为合适（就像你在数据类型失配的情况下你需要做的一样）。
    </para>

    <para>
<programlisting>
void
ReScanForeignScan (ForeignScanState *node);
</programlisting>

     从头开始重启一个扫描。注意扫描所依赖的任何参数可能已经改变了值，因此新扫描不一定会返回完全相同的行。
    </para>

    <para>
<programlisting>
void
EndForeignScan (ForeignScanState *node);
</programlisting>

     结束扫描并释放资源。通常释放palloc过的内存并不重要，但是打开的文件和到远程服务器的连接等应该被清理。
    </para>

   </sect2>
  
   <sect2 id="fdw-callbacks-join-scan">
    <title>扫描外部表的FDW例程</title>

    <para>
     如果一个FDW支持执行远程外部链接（而不是抓取表的数据以及执行本地链接），
     它应该提供这个回调函数：
    </para>

    <para>
<programlisting>
void
GetForeignJoinPaths (PlannerInfo *root,
                     RelOptInfo *joinrel,
                     RelOptInfo *outerrel,
                     RelOptInfo *innerrel,
                     JoinType jointype,
                     JoinPathExtraData *extra);
</programlisting>
    创建两个（或多个）外表链接的可能访问路径都属于同一个外部服务器。
    在查询规划中调用这个可选函数。
    伴随<function>GetForeignPaths</>，
    这个函数为提供的<literal>joinrel</>产生<structname>ForeignPath</>路径，
    并且调用<function>add_path</>添加这些路径到考虑链接的路径集合中。
    但不同于<function>GetForeignPaths</>，
    这个函数成功创建至少一个路径是没有必要的，
    因为涉及本地链接的路径总是有可能的。
    </para>

    <para>
     请注意，此函数为了相同的连接关系以及内、外部关系的不同组合将被重复调用；
     FDW有责任减少重复工作。
    </para>

    <para>
     如果为链接选择<structname>ForeignPath</>路径，
     它将代表整个链接过程；不会使用为组件表生成的路径以及子辅助链接。
     链接路径过程的随后处理正如扫描单一外部表的路径一样。
    不同的是产生的<structname>ForeignScan</>计划节点的<structfield>scanrelid</>应设置为零，
    因为它没有一个单一的关系，相反，
    <structname>ForeignScan</>节点的<structfield>fs_relids</>字段代表要加入的关系集。
    （较后面的字段是由核心策划代码自动设置的，不需要通过FDW填充。）
    因为没有发现来自系统目录的远程连接的字段列表，
    另一个区别是，FDW必须填充<structfield>fdw_scan_tlist</>以及<structfield>TargetEntry</>节点的适当列表。
    代表一组列提供运行时返回的元组。
     
    </para>

    <para>
     参阅<xref linkend="fdw-planning">获取附加信息。
    </para>

   </sect2>
     
   <sect2 id="fdw-callbacks-update">
    <title>更新外部表的FDW例程</title>

    <para>
     如果一个FDW支持可写的外部表，根据FDW的需要和功能它应该提供某些或者全部下列回调函数：
    </para>

    <para>
<programlisting>
void
AddForeignUpdateTargets (Query *parsetree,
                         RangeTblEntry *target_rte,
                         Relation target_relation);
</programlisting>

     <command>UPDATE</>和<command>DELETE</>操作是在之前由表扫描函数取出的行上被执行的。FDW可能需要额外的信息（例如一个行ID或主键列的值）来保证它能够找到要更新或删除的准确行。要支持这些要求，这个函数可以项列列表中增加额外的隐藏或<quote>junk</>的目标列，它们在一个<command>UPDATE</>或<command>DELETE</>期间会被从外部表中获取。
    </para>

    <para>
     要做到这一点，向<literal>parsetree-&gt;targetList</>中增加<structname>TargetEntry</>项，它们包含要被获取的额外值的表达式。每一个这样的项必须被标记为<structfield>resjunk</> = <literal>true</>，并且必须有一个可区分的<structfield>resname</>用于在执行期间标识它。请避免使用匹配<literal>ctid<replaceable>N</></literal>、<literal>wholerow</literal>或<literal>wholerow<replaceable>N</></literal>的名字，因为核心系统可能会生成使用这些名字的junk列。
    </para>

    <para>
     这个函数在重写器中被调用，而不是在规划器中，因此可用的信息与在规划例程中的有点区别。<literal>parsetree</>是<command>UPDATE</>或<command>DELETE</>命令的分析树，而<literal>target_rte</>和<literal>target_relation</>描述目标外部表。
    </para>

    <para>
     如果<function>AddForeignUpdateTargets</>指针被设置为<literal>NULL</>，则不会有额外的目标表达式被加入（这将使得我们不可能实现<command>DELETE</>操作，而<command>UPDATE</>则还有可能是可行的，前提是FDW依赖一个未改变的主键来标识行）。
    </para>

    <para>
<programlisting>
List *
PlanForeignModify (PlannerInfo *root,
                   ModifyTable *plan,
                   Index resultRelation,
                   int subplan_index);
</programlisting>

     执行外部表上插入、更新或删除所需的任何附加规划动作。这个函数生成FDW私有信息，该信息将被附加到执行该更新动作的<structname>ModifyTable</>计划节点。这个私有信息的形式必须是一个<literal>List</>，并将会在执行阶段被传递给<function>BeginForeignModify</>。
    </para>

    <para>
     <literal>root</>是规划器关于该查询的全局信息。
     <literal>plan</>是<structname>ModifyTable</>计划节点，它除了<structfield>fdwPrivLists</>域之外是完整的。
     <literal>resultRelation</>通过目标外部表的范围表索引来标识它。<literal>subplan_index</>标识这是<structname>ModifyTable</>计划节点的哪个目标，从零开始计数；如果你希望索引到<literal>plan-&gt;plans</>或其他<literal>plan</>节点的子结构中，请使用它。
    </para>

    <para>
     更多信息见<xref linkend="fdw-planning">。
    </para>

    <para>
     如果<function>PlanForeignModify</>指针被设置为<literal>NULL</>，则不会有额外的计划时动作被执行，并且传递给<function>BeginForeignModify</>的<literal>fdw_private</>列表也将为 NIL。
    </para>

    <para>
<programlisting>
void
BeginForeignModify (ModifyTableState *mtstate,
                    ResultRelInfo *rinfo,
                    List *fdw_private,
                    int subplan_index,
                    int eflags);
</programlisting>

     开始执行一个外部表修改操作。这个例程在执行器启动期间被调用。它应该执行任何先于实际表修改的初始化工作。随后，<function>ExecForeignInsert</>、<function>ExecForeignUpdate</>或<function>ExecForeignDelete</>将被为每一个将被插入、更新或删除的元组调用。
    </para>

    <para>
     <literal>mtstate</>是要被执行的<structname>ModifyTable</>计划节点的状态信息；通过这个结构可以得到关于规划和执行阶段的全局数据。<literal>rinfo</>是描述目标外部表的<structname>ResultRelInfo</>结构（<structname>ResultRelInfo</>的<structfield>ri_FdwState</>域用于FDW来存储它在此操作中需要的任何私有状态）。<literal>fdw_private</>包含<function>PlanForeignModify</>生成的私有数据。<literal>subplan_index</>标识这是<structname>ModifyTable</>计划节点的哪个目标。<literal>eflags</>包含描述执行器对该计划节点操作模式的标志位。
    </para>

    <para>
     注意当<literal>(eflags &amp; EXEC_FLAG_EXPLAIN_ONLY)</>为真，这个函数不应执行任何外部可见的动作；它只应该做最少的工作来创建<function>ExplainForeignModify</>和<function>EndForeignModify</>可用的节点状态。
    </para>

    <para>
     如果<function>BeginForeignModify</>指针被设置为<literal>NULL</>，在执行器启动期间将不会采取任何动作。
    </para>

    <para>
<programlisting>
TupleTableSlot *
ExecForeignInsert (EState *estate,
                   ResultRelInfo *rinfo,
                   TupleTableSlot *slot,
                   TupleTableSlot *planSlot);
</programlisting>

     插入一个元组到外部表。<literal>estate</>是查询的全局执行状态。<literal>rinfo</>是描述目标外部表的<structname>ResultRelInfo</>结构。<literal>slot</>包含要被插入的元组；它将匹配外部表的行类型定义。<literal>planSlot</>包含由<structname>ModifyTable</>计划节点的子计划生成的元组；它与<literal>slot</>不同，它可能包含额外的<quote>junk</>列（<command>INSERT</>情况通常不关心<literal>planSlot</>，但是为了完整性还是在这里提供它）。
    </para>

    <para>
     返回值可以是一个包含实际被插入的数据的槽（这可能会和所提供的数据不同，例如一个触发器动作的结果），或者为 NULL 表示实际没有插入行（还是触发器的结果）。被传入的<literal>slot</>可以被重用于这个目的。
    </para>

    <para>
     在返回槽中的数据只有在<command>INSERT</>查询具有一个<literal>RETURNING</>子句或者
     外部表具有一个<literal>AFTER ROW</>触发器时才被使用。触发器要求所有的列，但是 FDW 应
     该选择优化成根据<literal>RETURNING</>子句的内容返回某些或全部列。不管怎样，某些槽必须
     被返回来指示成功，或者查询报告的行计数将会是错误的。
    </para>

    <para>
     如果<function>ExecForeignInsert</>指针被设置为<literal>NULL</>，尝试向外部表插入将会失败并报告一个错误消息。
    </para>

    <para>
<programlisting>
TupleTableSlot *
ExecForeignUpdate (EState *estate,
                   ResultRelInfo *rinfo,
                   TupleTableSlot *slot,
                   TupleTableSlot *planSlot);
</programlisting>

     更新外部表中的一个元组。<literal>estate</>是查询的全局执行状态。<literal>rinfo</>是描述目标外部表的<structname>ResultRelInfo</>结构。<literal>slot</>包含元组的新数据；它将匹配外部表的行类型定义。<literal>planSlot</>包含由<structname>ModifyTable</>计划节点的子计划生成的元组；它与<literal>slot</>不同，它可能包含额外的<quote>junk</>列（<command>INSERT</>情况通常不关心<literal>planSlot</>，但是为了完整性还是在这里提供它）。特殊地，任何<function>AddForeignUpdateTargets</>所要求的junk列在这个槽中都是有效的。
    </para>

    <para>
     返回值可以是一个包含实际被更新的数据的槽（这可能会和所提供的数据不同，例如一个触发器动作的结果），或者为 NULL 表示实际没有更新行（还是触发器的结果）。被传入的<literal>slot</>可以被重用于这个目的。
    </para>

    <para>
    在返回槽中的数据只有在<command>UPDATE</>查询具有一个<literal>RETURNING</>子句或者
    外部表具有一个<literal>AFTER ROW</>触发器时才被使用。触发器要求所有的列，但是 FDW 应
    该选择优化成根据<literal>RETURNING</>子句的内容返回某些或全部列。不管怎样，某些槽必须
    被返回来指示成功，或者查询报告的行计数将会是错误的。
    </para>

    <para>
     如果<function>ExecForeignUpdate</>指针被设置为<literal>NULL</>，尝试更新外部表将会失败并报告一个错误消息。
    </para>

    <para>
<programlisting>
TupleTableSlot *
ExecForeignDelete (EState *estate,
                   ResultRelInfo *rinfo,
                   TupleTableSlot *slot,
                   TupleTableSlot *planSlot);
</programlisting>

     从外部表删除一个元组。<literal>estate</>是查询的全局执行状态。<literal>rinfo</>是描述目标外部表的<structname>ResultRelInfo</>结构。<literal>slot</>在调用时不包含任何有用的东西，但是可以被用于保持被返回的元组。<literal>planSlot</>包含由<structname>ModifyTable</>计划节点的子计划生成的元组；特殊地，它将携带<function>AddForeignUpdateTargets</>所要求的任意垃圾列。垃圾列被用来标识要被删除的元组。
    </para>

    <para>
     返回值可以是一个包含实际被删除的数据的槽（这可能会和所提供的数据不同，例如一个触发器动作的结果），或者为 NULL 表示实际没有删除行（还是触发器的结果）。被传入的<literal>slot</>可以被重用于这个目的。
    </para>

    <para>
    在返回槽中的数据只有在<command>DELETE</>查询具有一个<literal>RETURNING</>子句或者
    外部表具有一个<literal>AFTER ROW</>触发器时才被使用。触发器要求所有的列，但是 FDW 应
    该选择优化成根据<literal>RETURNING</>子句的内容返回某些或全部列。不管怎样，某些槽必须
    被返回来指示成功，或者查询报告的行计数将会是错误的。
    </para>

    <para>
     如果<function>ExecForeignDelete</>指针被设置为<literal>NULL</>，尝试从外部表中删除将会失败并报告一个错误消息。
    </para>

    <para>
<programlisting>
void
EndForeignModify (EState *estate,
                  ResultRelInfo *rinfo);
</programlisting>

     结束表更新并释放资源。通常释放palloc的内存并不重要，但是打开的文件和到远程服务器的连接等应当被清除。
    </para>

    <para>
     如果<function>EndForeignModify</>指针被设置为<literal>NULL</>，在执行器关闭期间不会采取任何动作。
    </para>

    <para>
<programlisting>
int
IsForeignRelUpdatable (Relation rel);
</programlisting>

     报告指定的外部表支持哪些更新操作。返回值应该是一个规则事件编号的位掩码，它指示了哪些操作被外部表支持，它使用<literal>CmdType</>枚举，及：
     <literal>(1 << CMD_UPDATE) = 4</>表示<command>UPDATE</>、
     <literal>(1 << CMD_INSERT) = 8</>表示<command>INSERT</>以及
     <literal>(1 << CMD_DELETE) = 16</>表示<command>DELETE</>。
    </para>

    <para>
     如果<function>IsForeignRelUpdatable</>指针被设置为<literal>NULL</>，而FDW提供了<function>ExecForeignInsert</>、<function>ExecForeignUpdate</>或<function>ExecForeignDelete</>，则外部表分别被假定为可插入、可更新或可删除。只有在FDW支持某些表是可更新的而某些不是可更新的时候，才需要这个函数（即便如此，也允许在执行例程中抛出一个错误而不是在这个函数中检查。但是，这个函数被用来决定显示在<literal>information_schema</>视图中的可更新性）。
    </para>

   </sect2>

   <sect2 id="fdw-callbacks-row-locking">
    <title>行锁定的FDW例程</title>

    <para>
     如果FDW希望支持<firstterm>末行锁</>（正如<xref linkend="fdw-row-locking">所描述的），
     它必须提供以下回调函数：
    </para>

    <para>
<programlisting>
RowMarkType
GetForeignRowMarkType (RangeTblEntry *rte,
                       LockClauseStrength strength);
</programlisting>

     报告用于外部表的行标记选项。<literal>rte</>是表的<structname>RangeTblEntry</>节点，
     并且<literal>strength</>描述通过相关的<literal>FOR UPDATE/SHARE</>子句请求的锁强度，
     如果存在的情况下。结果必须是<literal>RowMarkType</>枚举类型成员。
     
    </para>

    <para>
     
     在查询规划<command>UPDATE</>，<command>DELETE</>或者<command>SELECT
     FOR UPDATE/SHARE</>查询中的每个外部表时调用此函数，
     并且不是<command>UPDATE</>或者<command>DELETE</>的目标。
    </para>

    <para>
     如果<function>GetForeignRowMarkType</>指针设置为
     <literal>NULL</>，那么使用<literal>ROW_MARK_COPY</>选项。
     （这意味着永远不会调用<function>RefetchForeignRow</>，因此它也不需要被提供。）
    </para>

    <para>
     参见<xref linkend="fdw-row-locking">获取更多信息。
    </para>

    <para>
<programlisting>
HeapTuple
RefetchForeignRow (EState *estate,
                   ExecRowMark *erm,
                   Datum rowid,
                   bool *updated);
</programlisting>

     如果需要的话锁定之后，重新从外部表中获取一个元组。
     <literal>estate</>是查询的全局执行状态。
     <literal>erm</>是描述目标外表的<structname>ExecRowMark</>结构
     并且获得行锁类型（如果有的话）。<literal>rowid</>标识要获取的元组。
     <literal>updated</>是一个输出参数。   
    </para>

    <para>
     如果无法获得行锁，这个函数应该返回获取的元组的复制或者<literal>NULL</>，
获取的行锁类型由<literal>erm-&gt;markType</>定义，
通过<function>GetForeignRowMarkType</>返回之前的值。
（<literal>ROW_MARK_REFERENCE</>意味着重新获取没有获取任何锁的元组，
并且这个例程不会看到<literal>ROW_MARK_COPY</>。）   
    </para>

    <para>
     此外，如果获取的是一个元组的更新版本，
     而不是先前获得的相同版本。<literal>*updated</>应该设置为<literal>true</>
     （如果FDW无法确定，建议总是返回<literal>true</>。）
    </para>

    <para>
     请注意缺省情况下，未能获得行锁导致产生错误；
     如果通过<literal>erm-&gt;waitPolicy</>指定<literal>SKIP LOCKED</>选项，
     则<literal>NULL</>返回是唯一适当的。
    </para>

    <para>
     <literal>rowid</>是之前行重新抓取的<structfield>ctid</>值。
     尽管<literal>rowid</>值作为<type>Datum</>传递，它目前只为<type>tid</>。
     选择函数API希望允许将来行ID其它数据类型。
    </para>

    <para>
     如果<function>RefetchForeignRow</>指针被设置为<literal>NULL</>，
     尝试重新获取行出现错误消息而失败。它目前只能为<type>tid</>。
    </para>

    <para>
     参见<xref linkend="fdw-row-locking">获取更多信息。
    </para>

    <para>
<programlisting> 
bool
RecheckForeignScan (ForeignScanState *node, TupleTableSlot *slot);
</programlisting>
     
     重新检查之前返回的元组仍然匹配相关的扫描和连接限定符，
     并且有可能提供元组的修改版本。
     外部数据封装器不执行连接下推，
     通常设置为<literal>NULL</>更方便，
     而不是设置为<structfield>fdw_recheck_quals</structfield>。
     当外连接被向下推时，然而，它不足以重新应用所有的基表与结果元组的检查相关性，
     即使所有需要的属性都是存在的，
     因为没有匹配一些限定符可能会导致一些属性为空，
     而不是没有返回元组。如果它们仍然满足并为假，
     则<literal>RecheckForeignScan</>可以复查限定符并返回真，
     否则，它也可以将替换的元组存储到所提供的狭槽中。
     
    </para>

    <para>
     为了实现连接下推，外部数据包通常会建立用于复查的其它的本地连接计划；
     这将成为<literal>ForeignScan</>的外部子查询。
     当必须复查时，可以执行这个子计划并且产生的元组可以被存储在插槽中。
     这个计划不必是有效的，因为没有基表会返回更多行；
     例如，它可以作为嵌套循环实现所有的连接。
    </para>
   </sect2>
   
   <sect2 id="fdw-callbacks-explain">
    <title><command>EXPLAIN</>的FDW例程</title>

    <para>
<programlisting>
void
ExplainForeignScan (ForeignScanState *node,
                    ExplainState *es);
</programlisting>

     为一个外部表扫描打印额外的<command>EXPLAIN</>输出。这个函数可以调用<function>ExplainPropertyText</>和相关函数来向<command>EXPLAIN</>输出中增加域。<literal>es</>中的标志域可以被用来决定什么将被打印，并且<structname>ForeignScanState</>节点的状态可以被检查来为<command>EXPLAIN ANALYZE</>提供运行时统计数据。
    </para>

    <para>
     如果<function>ExplainForeignScan</>指针被设置为<literal>NULL</>，在<command>EXPLAIN</>期间不会打印任何额外的信息。
    </para>

    <para>
<programlisting>
void
ExplainForeignModify (ModifyTableState *mtstate,
                      ResultRelInfo *rinfo,
                      List *fdw_private,
                      int subplan_index,
                      struct ExplainState *es);
</programlisting>

     为一个外部表更新打印额外的<command>EXPLAIN</>输出。这个函数可以调用<function>ExplainPropertyText</>和相关函数来向<command>EXPLAIN</>输出中增加域。<literal>es</>中的标志域可以被用来决定什么将被打印，并且<structname>ModifyTableState</>节点的状态可以被检查来为<command>EXPLAIN ANALYZE</>提供运行时统计数据。前四个参数和<function>BeginForeignModify</>相同。
    </para>

    <para>
     如果<function>ExplainForeignModify</>指针被设置为<literal>NULL</>，在<command>EXPLAIN</>期间不会打印任何额外的信息。
    </para>

   </sect2>

   <sect2 id="fdw-callbacks-analyze">
    <title><command>ANALYZE</>的FDW例程</title>

    <para>
<programlisting>
bool
AnalyzeForeignTable (Relation relation,
                     AcquireSampleRowsFunc *func,
                     BlockNumber *totalpages);
</programlisting>

     当<xref linkend="sql-analyze">被执行在一个外部表上时会调用这个函数。如果FDW可以为这个外部表收集统计信息，它会返回<literal>true</>并提供一个函数指针，该函数将将从<parameter>func</>中的表上收集采样行，外加<parameter>totalpages</>中页面中的表尺寸估计值。否则，返回<literal>false</>。
    </para>

    <para>
     如果FDW不支持为任何表收集统计信息，<function>AnalyzeForeignTable</>指针可以被设置为<literal>NULL</>。
    </para>

    <para>
     如果提供，采样收集函数必须具有签名
<programlisting>
int
AcquireSampleRowsFunc (Relation relation, int elevel,
                       HeapTuple *rows, int targrows,
                       double *totalrows,
                       double *totaldeadrows);
</programlisting>

     应该从该表上收集最多<parameter>targrows</>行的一个随机采样并将它存放到调用者提供的<parameter>rows</>数组中。实际被收集的行的数量必须被返回。另外，将表中有效行和死亡行的总数存储到输出参数<parameter>totalrows</>和<parameter>totaldeadrows</>中（如果FDW没有死亡行的概念，将<parameter>totaldeadrows</>设置为 0 ）。
    </para>

   </sect2>

     <sect2 id="fdw-callbacks-import">
    <title><command>IMPORT FOREIGN SCHEMA</>的FDW例程</title>

    <para>
<programlisting>
List *
ImportForeignSchema (ImportForeignSchemaStmt *stmt, Oid serverOid);
</programlisting>

     获取外表创建命令的列表。
     当执行<xref linkend="sql-importforeignschema">的时候，调用这个函数。
     并且为这个声明传递到解析树，以及使用外部服务器的OID。
     它应该返回C字符串列表，
     每一个必须包含一个<xref linkend="sql-createforeigntable">命令。
     这些字符串将被解析并且通过核心服务器执行。
    </para>

    <para>
     
     在<structname>ImportForeignSchemaStmt</>结构中，
<structfield>remote_schema</>是导入该表的远程模式名。
<structfield>list_type</>标识如何过滤表的名称：
<literal>FDW_IMPORT_SCHEMA_ALL</>意味着远程模式中应该导入的所有表
（在这种情况下，<structfield>table_list</>为空），
<literal>FDW_IMPORT_SCHEMA_LIMIT_TO</>意味着包含<structfield>table_list</>列出的表，
并且<literal>FDW_IMPORT_SCHEMA_EXCEPT</>意味着排除了
<structfield>table_list</>列出的表。
<structfield>options</>是用于导入过程的选择列表。
该选项的含义是符合FDW。
例如，FDW可以使用选项来定义是否要导入的列的<literal>NOT NULL</>属性。
这些选项不需要与FDW作为数据库对象选项所支持的那些有任何关系。

    </para>

    <para>
     FDW可能忽略<structname>ImportForeignSchemaStmt</>的
     <structfield>local_schema</>字段，
     因为核心服务器自动地将该名称插入到解析的<command>CREATE FOREIGN TABLE</>命令中。
    </para>

    <para>
FDW不用担心自身实现由<structfield>list_type</>和<structfield>table_list</>指定的过滤，
要么，作为核心服务器将自动为了依据这些选项排除的表而忽略任何返回的命令。
然而，它可以有效的避免为第一个位置处的排除表创建命令的工作。
函数<function>IsImportableForeignTable()</>可以有效的测试给定的外表名称是否会通过过滤器。 
    </para>

    <para>
     如果FDW不支持导入表定义，
     那么<function>ImportForeignSchema</>指针可以设置为<literal>NULL</>。
    </para>

   </sect2>
   
   </sect1>

   <sect1 id="fdw-helpers">
    <title>外部数据包装器助手函数</title>

    <para>
     多个助手函数被从核心服务器输出，这样外部数据包装器的作者们可以很容易访问到FDW相关对象的属性，例如FDW选项。要使用任何其中一个函数，你需要在你的源文件中包括头文件<filename>foreign/foreign.h</filename>。这个头也定义了被这些函数返回的结构类型。
    </para>

    <para>
<programlisting>
ForeignDataWrapper *
GetForeignDataWrapper(Oid fdwid);
</programlisting>

     这个函数为具有给定 OID 的外部数据包装器返回一个<structname>ForeignDataWrapper</structname>对象。一个<structname>ForeignDataWrapper</structname>对象包含该FDW的特性（详见<filename>foreign/foreign.h</filename>）。
    </para>

    <para>
<programlisting>
ForeignServer *
GetForeignServer(Oid serverid);
</programlisting>

     这个函数为一个具有给定 OID 的外部服务器返回<structname>ForeignServer</structname>对象。一个<structname>ForeignServer</structname>对象包含该服务器的特性（详见<filename>foreign/foreign.h</filename>）。
    </para>

    <para>
<programlisting>
UserMapping *
GetUserMapping(Oid userid, Oid serverid);
</programlisting>

     这个函数为在给定服务器上的给定角色的用户映射返回<structname>UserMapping</structname>对象（如果指定用户没有映射，它将返回<literal>PUBLIC</>的映射，如果也没有则抛出错误）。一个<structname>UserMapping</structname>对象包含该用户映射的特性（详见<filename>foreign/foreign.h</filename>）。
    </para>

    <para>
<programlisting>
ForeignTable *
GetForeignTable(Oid relid);
</programlisting>

     该函数为一个具有给定 OID 的外部表返回<structname>ForeignTable</structname>对象。一个<structname>ForeignTable</structname>对象包含该外部表的特性（详见<filename>foreign/foreign.h</filename>）。
    </para>

    <para>
<programlisting>
List *
GetForeignColumnOptions(Oid relid, AttrNumber attnum);
</programlisting>

     这个函数为一个具有给定外部表 OID 和属性号的列返回针对每一列的FDW选项，形式为一个<structname>DefElem</structname>列表。如果该列没有选项则返回 NIL。
    </para>

    <para>
     某些对象类型除了基于OID的查找函数之外，还具有基于名称的查找函数：
    </para>

    <para>
<programlisting>
ForeignDataWrapper *
GetForeignDataWrapperByName(const char *name, bool missing_ok);
</programlisting>

     这个函数为一个具有给定名称的外部数据包装器返回<structname>ForeignDataWrapper</structname>对象。如果包装器没有找到，在missing_ok为真时返回 NULL，否则抛出一个错误。
    </para>

    <para>
<programlisting>
ForeignServer *
GetForeignServerByName(const char *name, bool missing_ok);
</programlisting>

     这个函数为一个具有给定名称的外部服务器返回<structname>ForeignServer</structname>对象。如果该服务器没有被找到，在missing_ok为真时返回 NULL，否则抛出一个错误。
    </para>

   </sect1>

   <sect1 id="fdw-planning">
    <title>外部数据包装器查询规划</title>

    <para>
     FDW回调函数<function>GetForeignRelSize</>，<function>GetForeignPaths</>，<function>GetForeignPlan</>，
     <function>PlanForeignModify</>以及<function>GetForeignJoinPaths</>必须适合<productname>PostgreSQL</>规划器的工作。
     这里有一些关于它们必须做什么的注记。
    </para>

    <para>
     <literal>root</>和<literal>baserel</>中的信息可以被用来减少必须从外部表获得的信息量（并且因此降低代价）。<literal>baserel-&gt;baserestrictinfo</>是特别有趣的，因为它包含限制条件（<literal>WHERE</>）子句，它应该被用来过滤要被获取的行（FDW本身并不要求强制这些条件，因为核心执行器可以检查它们）。<literal>baserel-&gt;reltargetlist</>可以被用来决定哪些类需要被获取；但是注意它仅列出了<structname>ForeignScan</>计划节点所发出的列，不包含在条件计算中使用但并不被查询输出的列。
    </para>

    <para>
     有多个私有域可以给FDW规划函数来保存信息。通常，不管你存储什么在FDW私有域中，它们都应该被palloc，这样它会在规划结束时被回收。    </para>

    <para>
     <literal>baserel-&gt;fdw_private</>是一个<type>void</>指针，它可以被FDW规划函数用来存储与特定外部表相关的信息。核心规划器不会碰它除非当<literal>RelOptInfo</>节点被创建时把它初始化为NULL。它对从<function>GetForeignRelSize</>传递信息给<function>GetForeignPaths</>和/或从<function>GetForeignPaths</>传递信息给<function>GetForeignPlan</>非常有用，这样避免了重新计算。
    </para>

    <para>
     <function>GetForeignPaths</>可以通过在<structname>ForeignPath</>节点的<structfield>fdw_private</>域中存储私有信息来标识不同的访问路径。<structfield>fdw_private</>被声明为一个<type>List</>指针，但是可能实际上包含任何东西，因为规划器不会触碰它。但是，最好是使用一种<function>nodeToString</>可导出的形式，这样在后端可以用于调试支持。
    </para>

    <para>
     <function>GetForeignPlan</>可以检查选中的<structname>ForeignPath</>节点的<structfield>fdw_private</>域，并且可以生成被放置于<structname>ForeignPath</>计划节点中的<structfield>fdw_exprs</>和<structfield>fdw_private</>列表。这两个列表必须被表示为一种<function>copyObject</>可复制的形式。<structfield>fdw_private</>列表没有任何其他限制并且不会被核心后端以任何形式解释。非 NIL 的<structfield>fdw_exprs</>应该包含表达式树，该树会在运行时被执行。这些树将由规划器在后期处理，以便让它们变成完全可执行的。
    </para>

    <para>
     在<function>GetForeignPlan</>中，通常被传入的目标列表可以被照样复制到计划节点中。被传入的<literal>scan_clauses</> 列表包含和<literal>baserel-&gt;baserestrictinfo</>相同的子句，但是可能为了更好的执行效率会被重新排序。在简单情况下，FDW可以只把<structname>RestrictInfo</>节点从<literal>scan_clauses</> 列表剥离（使用<function>extract_actual_clauses</>）并且把所有子句放到计划节点的条件列表中，这意味着所有子句将在运行时由执行器检查。更复杂的FDW可能可以在内部检查某些子句，着这种情况下哪些子句可以从计划节点的条件列表中删除，这样执行器就不用浪费时间去检查它们。
    </para>

    <para>
     作为一个例子，FDW可以标识某些<replaceable>foreign_variable</> <literal>=</>
     <replaceable>sub_expression</>形式的限制子句，它决定哪些可以使用由<replaceable>sub_expression</>给出的本地计算值在远程服务器上被执行。这样一个子句的实际标识应该在<function>GetForeignPaths</>期间发生，因为它可能会影响路径的代价估计。路径的<structfield>fdw_private</>域可能包括一个已标识的子句的<structname>RestrictInfo</>节点。然后<function>GetForeignPlan</>将从<literal>scan_clauses</> 中移除该子句，但是将<replaceable>sub_expression</>加到<structfield>fdw_exprs</>来保证它被揉成可执行的形式。它可能还将把控制信息放入到计划节点的<structfield>fdw_private</>域来告诉执行函数在运行时要做什么。传递给远程服务器的查询将涉及类似<literal>WHERE <replaceable>foreign_variable</> = $1</literal>的东西，使用在运行时从<structfield>fdw_exprs</>表达式树获得的参数值。
    </para>

    <para>
     从计划节点的质量列表中删除的任何子句
     相反必须添加到<literal>fdw_recheck_quals</>中，
     为了确保<literal>读取已提交</>隔离级别中正确的操作<literal>RecheckForeignScan</>重新检查。
     在查询中涉及的一些其它表中发生并行更新的时候，
     执行器可能需要验证所有最初的质量还是满足元组的，
     可能是针对一组不同的参数值。
     使用<literal>fdw_recheck_quals</>通常比在<literal>RecheckForeignScan</>中实现检查更容易，
     当外部链接下推的时候，这种方法不充分。因为链接元组在这种情况下可能有一些字段为空而不会完全拒绝元组。
    </para>

    <para>
     另一个通过FDW填充的<structname>ForeignScan</>字段是<structfield>fdw_scan_tlist</>，
它描述了为计划节点通过FDW返回的元组。
对于简单的外表扫描，可以设置为<literal>NIL</>，
意味着返回的元组有用于外表的行类型声明。
非<symbol>NIL</symbol>值必须是包含变量的目标列表
（<structname>TargetEntry</>列）和/或表示返回列的表达式。 
可能会使用，比如，显示了FDW已经忽略的不再需要查询的一些列。
另外，如果FDW可以计算使用查询的表达式比在本地执行更便宜，
它可以添加这些表达式到<structfield>fdw_scan_tlist</>。
注意，链接计划（由<function>GetForeignJoinPaths</>创建路径）
必须供给<structfield>fdw_scan_tlist</>用来描述它们返回的列集合。
    </para>
    
    <para>
     FDW应该总是只依靠表的限制子句构建至少一个路径。在连接查询中，它可能还会选择依靠连接子句构建路径，例如<replaceable>foreign_variable</> <literal>=</> <replaceable>local_variable</>。这样的子句将不会在<literal>baserel-&gt;baserestrictinfo</>中找到，但是必须出现在关系的连接列表中。使用这样一个子句的路径被称为一个<quote>参数化路径</>。它必须用一个合适的<literal>param_info</>值来标识其他被使用在选中的连接子句中的关系；使用<function>get_baserel_parampathinfo</>来计算该值。在<function>GetForeignPlan</>中，连接子句的<replaceable>local_variable</>部分将被加到<structfield>fdw_exprs</>中，并且接着在运行时和一个普通限制子句一样工作。
    </para>

     <para>
     如果FDW支持远程连接，<function>GetForeignJoinPaths</>
     为潜在的远程连接生成<structname>ForeignPath</>与作为基表的<function>GetForeignPaths</>一样。
     有关预期连接的信息以上述相同的方式传递给<function>GetForeignPlan</>。
     然而，<structfield>baserestrictinfo</>是不相关的连接关系；
     相反，一个特定连接的相关连接子句作为单独的参数(<literal>extra-&gt;restrictlist</>)
     传递给函数<function>GetForeignJoinPaths</>。
    </para>
    
    <para>
     在规划一个<command>UPDATE</>或<command>DELETE</>时，<function>PlanForeignModify</>能为外部表查找<structname>RelOptInfo</>结构，并利用之前由扫描规划函数创建的<literal>baserel-&gt;fdw_private</>数据。但是，在<command>INSERT</>中目标表不会被扫描，因此不会有它的<structname>RelOptInfo</>。由<function>PlanForeignModify</>返回的<structname>List</>具有和<structname>ForeignScan</>计划节点的<structfield>fdw_private</>列表相同的限制，即它必须只包含<function>copyObject</>知道怎么拷贝的结构。
    </para>
 
    
    <para>
     带有<literal>ON CONFLICT</>的<command>INSERT</>子句不支持声明冲突目标，
     作为唯一的约束或远程表上的排除约束不是本地已知的。
     这反过来意味着不支持<literal>ON CONFLICT DO UPDATE</>，
     因为该规范是强制性的。  
    </para>

   </sect1>

   <sect1 id="fdw-row-locking">
    <title>外部数据封装器中的行锁定</title>

    <para>
     如果FDW的底层存储机制具有锁定独立行的概念用来防止这些行的并发更新，
     FDW执行行级锁尽可能近似实际在普通<productname>PostgreSQL</>表的语义是值得的。
     有涉及这个的多方面考虑。
    </para>

    <para>
    关键决定是是否执行<firstterm>早期锁定</>或者<firstterm>后期锁定</>。
    早期锁定中，当开始从底层存储中检索的时候，行是被锁定的，而在后期锁定中，
    当它是已知的需要被锁定的时候，该行才被锁定。
    （产生差异，因为局部检查限制或连接条件某些行可能会被丢弃。）
     早期锁定更简单，并且避免了到远程存储的额外往返，
     但它可以导致不需要被锁定的行锁定，从而减少了并发甚至意外死锁。
     此外，如果要锁定的行可以后期被唯一地重新确定，那么后期锁定是唯一可能。
     优选行标识符标识行的特定版本，正如<productname>PostgreSQL</> TID一样。 
    </para>

    <para>
     默认情况下，当连接到FDW的时候，<productname>PostgreSQL</>忽略锁定因素，
     但FDW可提早进行锁定而无核心代码的任何明确支持。
     <xref linkend="fdw-callbacks-row-locking">中描述的API函数，
     被添加到<productname>PostgreSQL</> 9.5中，如果愿意允许FDW使用原来的锁定。
    </para>

    <para>
     另一个考虑是在<literal>READ COMMITTED</>隔离模式中，
     <productname>PostgreSQL</>可能需要重新检查一些目标元组更新版本的限制和链接条件。
     当执行标准<productname>PostgreSQL</>表时，
     重新检查链接条件需要重新获取之前加入到目标元组的非目标行的副本。
     通过包含连接列表中非目标表的TID来执行，
     当需要时，然后重新获取非目标行。
     这种方法保持连接数据集的紧凑，但它需要廉价的重新获取能力，
     以及可以唯一标识被重新取出的行版本的TID。
     默认情况下，因此，使用外部表的方法是包括通过链接列表中的外部表抓取的整行的副本。
     这对FDW并没有特别的要求，但导致合并以及哈希连接的性能降低。
     能够满足重新提取需求的FDW可以选择第一种方式执行它。
    </para>

    <para>
     对于外表上<command>UPDATE</>或者<command>DELETE</>，
     推荐目标表上的<literal>ForeignScan</>操作在抓取的行上执行早期锁定，
     可能相当于<command>SELECT FOR UPDATE</>。
     FDW可以在计划时间内通过比较relid到<literal>root-&gt;parse-&gt;resultRelation</>
     或者在执行时间通过使用<function>ExecRelationIsTargetRelation()</>检测
     表是否是<command>UPDATE</>/<command>DELETE</>目标。
     另一种可能性是在<function>ExecForeignUpdate</>或者<function>ExecForeignDelete</>回调中
     执行后期锁定，但没有这个特别的支持。
    </para>

    <para>
     指定外部表通过<command>SELECT FOR UPDATE/SHARE</>命令锁定，
     <literal>ForeignScan</>操作可以通过抓取使用等效<command>SELECT FOR UPDATE/SHARE</>元组执行早期锁定。
     相反执行后期锁定，提供<xref linkend="fdw-callbacks-row-locking">里面定义的回调函数。
     在<function>GetForeignRowMarkType</>中，
     选择rowmark选项<literal>ROW_MARK_EXCLUSIVE</>，<literal>ROW_MARK_NOKEYEXCLUSIVE</>，
     <literal>ROW_MARK_SHARE</>或者<literal>ROW_MARK_KEYSHARE</>依赖于请求锁强度。
     （核心代码将采取相同操作，不论你选择四个选项中的哪一个。）
     在其他地方，您可以检测是否指定外表被该类型命令锁定，
     通过计划时间使用<function>get_plan_rowmark</>或者执行时间使用<function>ExecFindRowMark</>；
     你不仅仅检查返回的是否非空rowmark结构，但<structfield>strength</>字段为非<literal>LCS_NONE</>。 
    </para>

    <para>
     最后，对于<command>UPDATE</>，<command>DELETE</>或者<command>SELECT FOR UPDATE/SHARE</>命令中使用的外部表，
     但未指定行锁定，当看到锁强度<literal>LCS_NONE</>时，你可以通过<function>GetForeignRowMarkType</>选择选项<literal>ROW_MARK_REFERENCE</>重写缺省选项复制整个行。
     这将导致调用使用<structfield>markType</>的<function>RefetchForeignRow</>；
     然后重新获取行，而不需要获得任何新的锁。
     （如果你有<function>GetForeignRowMarkType</>函数但不想重新抓取未锁定行，
     为<literal>LCS_NONE</>选择选项<literal>ROW_MARK_COPY</>。）
    </para>

    <para>
     参阅<filename>src/include/nodes/lockoptions.h</>，
     <filename>src/include/nodes/plannodes.h</>中<type>RowMarkType</>和<type>PlanRowMark</>注释
     以及<filename>src/include/nodes/execnodes.h</>中的<type>ExecRowMark</>注释
     获取更多信息。
    </para>
    
  </sect1>

 </chapter>

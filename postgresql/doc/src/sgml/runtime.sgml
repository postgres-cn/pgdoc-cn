<!-- doc/src/sgml/runtime.sgml -->

<chapter id="runtime">
<!--==========================orignal english content==========================
 <title>Server Setup and Operation</title>
____________________________________________________________________________-->
 <title>服务器设置和操作</title>

<!--==========================orignal english content==========================
 <para>
  This chapter discusses how to set up and run the database server
  and its interactions with the operating system.
 </para>
____________________________________________________________________________-->
 <para>
  本章讨论如何设置和运行数据库服务器，以及它与操作系统的交互。
 </para>

 <sect1 id="postgres-user">
<!--==========================orignal english content==========================
  <title>The <productname>PostgreSQL</productname> User Account</title>
____________________________________________________________________________-->
  <title><productname>PostgreSQL</productname>用户账户</title>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>postgres user</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>postgres user</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   As with any server daemon that is accessible to the outside world,
   it is advisable to run <productname>PostgreSQL</productname> under a
   separate user account. This user account should only own the data
   that is managed by the server, and should not be shared with other
   daemons. (For example, using the user <literal>nobody</literal> is a bad
   idea.) It is not advisable to install executables owned by this
   user because compromised systems could then modify their own
   binaries.
  </para>
____________________________________________________________________________-->
  <para>
   和对外部世界可访问的任何服务器守护进程一样，我们也建议在一个独立的用户账户下运行<productname>PostgreSQL</productname>。这个用户账户应该只拥有被该服务器管理的数据，并且应该不能被其他守护进程共享（例如，使用用户<literal>nobody</literal>是一个坏主意）。我们不建议把可执行文件安装为属于这个用户，因为妥协系统可能接着修改它们自己的二进制文件。
  </para>

<!--==========================orignal english content==========================
  <para>
   To add a Unix user account to your system, look for a command
   <command>useradd</command> or <command>adduser</command>. The user
   name <systemitem>postgres</systemitem> is often used, and is assumed
   throughout this book, but you can use another name if you like.
  </para>
____________________________________________________________________________-->
  <para>
   要在你的系统中增加一个 Unix 用户账户，查看一个命令<command>useradd</command>或<command>adduser</command>。通常会用<systemitem>postgres</systemitem>（本书中也假定用这个账户），但是你可以使用另一个名称。
  </para>
 </sect1>

 <sect1 id="creating-cluster">
<!--==========================orignal english content==========================
  <title>Creating a Database Cluster</title>
____________________________________________________________________________-->
  <title>创建一个数据库集簇</title>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>database cluster</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>数据库集簇</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>data area</primary>
   <see>database cluster</see>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>数据区域</primary>
   <see>数据库集簇</see>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   Before you can do anything, you must initialize a database storage
   area on disk. We call this a <firstterm>database cluster</firstterm>.
   (The <acronym>SQL</acronym> standard uses the term catalog cluster.) A
   database cluster is a collection of databases that is managed by a
   single instance of a running database server. After initialization, a
   database cluster will contain a database named <literal>postgres</literal>,
   which is meant as a default database for use by utilities, users and third
   party applications.  The database server itself does not require the
   <literal>postgres</literal> database to exist, but many external utility
   programs assume it exists.  Another database created within each cluster
   during initialization is called
   <literal>template1</literal>.  As the name suggests, this will be used
   as a template for subsequently created databases; it should not be
   used for actual work.  (See <xref linkend="managing-databases"/> for
   information about creating new databases within a cluster.)
  </para>
____________________________________________________________________________-->
  <para>
   在你能做任何事情之前，你必须在磁盘上初始化一个数据库存储区域。我们称之为一个<firstterm>数据库集簇</firstterm>（<acronym>SQL</acronym>标准使用的术语是目录集簇）。一个数据库集簇是被一个运行数据库服务器的单一实例所管理的多个数据库的集合。在初始化之后，一个数据库集簇将包含一个名为<literal>postgres</literal>的数据库，它表示被功能、用户和第三方应用所使用的默认数据库。数据库服务器本身并不要求<literal>postgres</literal>数据库存在。另一个在初始化过程中为每一个集簇创建的数据库被称为<literal>template1</literal>。顾名思义，它将被用于创建后续数据库的模板；它不应该被用于实际工作（在集簇内创建新数据库的更多信息请见<xref linkend="managing-databases"/>）。
  </para>

<!--==========================orignal english content==========================
  <para>
   In file system terms, a database cluster is a single directory
   under which all data will be stored. We call this the <firstterm>data
   directory</firstterm> or <firstterm>data area</firstterm>. It is
   completely up to you where you choose to store your data.  There is no
   default, although locations such as
   <filename>/usr/local/pgsql/data</filename> or
   <filename>/var/lib/pgsql/data</filename> are popular. To initialize a
   database cluster, use the command <xref
   linkend="app-initdb"/>,<indexterm><primary>initdb</primary></indexterm> which is
   installed with <productname>PostgreSQL</productname>. The desired
   file system location of your database cluster is indicated by the
   <option>-D</option> option, for example:
<screen>
<prompt>$</prompt> <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
   Note that you must execute this command while logged into the
   <productname>PostgreSQL</productname> user account, which is
   described in the previous section.
  </para>
____________________________________________________________________________-->
  <para>
   在文件系统术语中，一个数据库集簇是一个单一目录，所有数据都将被存储在其中。我们称它为<firstterm>数据目录</firstterm>或<firstterm>数据区域</firstterm>。在哪里存储你的数据完全由你选择。没有默认的位置，不过<filename>/usr/local/pgsql/data</filename>或<filename>/var/lib/pgsql/data</filename>位置比较流行。要初始化一个数据库集簇，使用和<productname>PostgreSQL</productname>一起安装的命令<xref linkend="app-initdb"/>。<indexterm><primary>initdb</primary></indexterm>你的数据库集簇的文件系统位置由<option>-D</option>选项指定，例如：
<screen>
<prompt>$</prompt> <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
   注意你必须在使用<productname>PostgreSQL</productname>用户账户（如前一节所示）登录后执行这个命令。
  </para>

  <tip>
<!--==========================orignal english content==========================
   <para>
    As an alternative to the <option>-D</option> option, you can set
    the environment variable <envar>PGDATA</envar>.
    <indexterm><primary><envar>PGDATA</envar></primary></indexterm>
   </para>
____________________________________________________________________________-->
   <para>
    作为<option>-D</option>选项的一种替换方案，你可以设置环境变量<envar>PGDATA</envar>。
    <indexterm><primary><envar>PGDATA</envar></primary></indexterm>
   </para>
  </tip>

<!--==========================orignal english content==========================
  <para>
   Alternatively, you can run <command>initdb</command> via
   the <xref linkend="app-pg-ctl"/>
   program<indexterm><primary>pg_ctl</primary></indexterm> like so:
<screen>
<prompt>$</prompt> <userinput>pg_ctl -D /usr/local/pgsql/data initdb</userinput>
</screen>
   This may be more intuitive if you are
   using <command>pg_ctl</command> for starting and stopping the
   server (see <xref linkend="server-start"/>), so
   that <command>pg_ctl</command> would be the sole command you use
   for managing the database server instance.
  </para>
____________________________________________________________________________-->
  <para>
   另一种替代方案是，你可以通过<xref linkend="app-pg-ctl"/><indexterm><primary>pg_ctl</primary></indexterm>程序来运行<command>initdb</command>：
<screen>
<prompt>$</prompt> <userinput>pg_ctl -D /usr/local/pgsql/data initdb</userinput>
</screen>
   如果你使用<command>pg_ctl</command>来启停服务器（见<xref linkend="server-start"/>），这种方法可能更直观，以为这样<command>pg_ctl</command>将是你用来管理数据库服务器实例的唯一命令。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>initdb</command> will attempt to create the directory you
   specify if it does not already exist.  Of course, this will fail if
   <command>initdb</command> does not have permissions to write in the
   parent directory.  It's generally recommendable that the
   <productname>PostgreSQL</productname> user own not just the data
   directory but its parent directory as well, so that this should not
   be a problem.  If the desired parent directory doesn't exist either,
   you will need to create it first, using root privileges if the
   grandparent directory isn't writable.  So the process might look
   like this:
<screen>
root# <userinput>mkdir /usr/local/pgsql</userinput>
root# <userinput>chown postgres /usr/local/pgsql</userinput>
root# <userinput>su postgres</userinput>
postgres$ <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   如果你指定的目录还不存在，<command>initdb</command>将尝试创建它。当然，如果<command>initdb</command>没有在父目录中的写权限，这将会失败。通常推荐让<productname>PostgreSQL</productname>用户拥有数据目录及其父目录，这样就不存在上面的问题了。如果想要的父目录也不存在，你将需要先创建它，如果父父目录不可写则使用 root 特权。因此，该过程可能像这样：
<screen>
root# <userinput>mkdir /usr/local/pgsql</userinput>
root# <userinput>chown postgres /usr/local/pgsql</userinput>
root# <userinput>su postgres</userinput>
postgres$ <userinput>initdb -D /usr/local/pgsql/data</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>initdb</command> will refuse to run if the data directory
   exists and already contains files; this is to prevent accidentally
   overwriting an existing installation.
  </para>
____________________________________________________________________________-->
  <para>
   如果数据目录存在并且已经包含文件，<command>initdb</command>将拒绝运行。这可以避免无意中覆盖一个已有的安装。</para>

<!--==========================orignal english content==========================
  <para>
   Because the data directory contains all the data stored in the
   database, it is essential that it be secured from unauthorized
   access. <command>initdb</command> therefore revokes access
   permissions from everyone but the
   <productname>PostgreSQL</productname> user, and optionally, group.
   Group access, when enabled, is read-only.  This allows an unprivileged
   user in the same group as the cluster owner to take a backup of the
   cluster data or perform other operations that only require read access.
  </para>

  <para>
   因为数据目录包含所有存储在数据库里的数据，所以最重要的是保护这个目录不受未授权的访问。因此，<command>initdb</command>会回收禁止除<productname>PostgreSQL</productname>用户，也可以选择组，之外所有用户的访问权限。当组访问启用时，是只读的。它允许相同组中未被授权的用户作为集簇属主，备份集簇数据或者执行其他只需要读访问权限的操作。
  </para>
  <para>
<!--==========================orignal english content==========================
   Note that enabling or disabling group access on an existing cluster requires
   the cluster to be shut down and the appropriate mode to be set on all
   directories and files before restarting
   <productname>PostgreSQL</productname>.  Otherwise, a mix of modes might
   exist in the data directory.  For clusters that allow access only by the
   owner, the appropriate modes are <literal>0700</literal> for directories
   and <literal>0600</literal> for files.  For clusters that also allow
   reads by the group, the appropriate modes are <literal>0750</literal>
   for directories and <literal>0640</literal> for files.
  </para>
____________________________________________________________________________-->
  <para>
  注意在现有集群启用或禁用组访问时，需要关闭集群，且重新启动<productname>PostgreSQL</productname>之前设置所有的目录和文件到恰当的模式。否则，数据目录中会存在多种模式。集群仅可以被其属主访问，恰当的模式应该是，其目录设置为<literal>0700</literal>，普通文件设置为<literal>0600</literal>。允许集群被组可读，恰当的模式应该是，其目录设置为<literal>0750</literal>，普通文件设置为<literal>0640</literal>。
  </para>

<!--==========================orignal english content==========================
  <para>
   However, while the directory contents are secure, the default
   client authentication setup allows any local user to connect to the
   database and even become the database superuser. If you do not
   trust other local users, we recommend you use one of
   <command>initdb</command>'s <option>-W</option>, <option>-&minus;pwprompt</option>
   or <option>-&minus;pwfile</option> options to assign a password to the
   database superuser.<indexterm>
     <primary>password</primary>
     <secondary>of the superuser</secondary>
   </indexterm>
   Also, specify <option>-A md5</option> or
   <option>-A password</option> so that the default <literal>trust</literal> authentication
   mode is not used; or modify the generated <filename>pg_hba.conf</filename>
   file after running <command>initdb</command>, but
   <emphasis>before</emphasis> you start the server for the first time. (Other
   reasonable approaches include using <literal>peer</literal> authentication
   or file system permissions to restrict connections. See <xref
   linkend="client-authentication"/> for more information.)
  </para>
____________________________________________________________________________-->
  <para>
   不过，虽然目录的内容是安全的，但默认的客户端认证设置允许任意本地用户连接到数据库甚至成为数据库超级用户。如果你不信任其他本地用户， 我们建议你使用<command>initdb</command>的<option>-W</option>、<option>--pwprompt</option>或<option>--pwfile</option>选项之一给数据库超级用户赋予一个口令。<indexterm><primary>password</primary><secondary>of the superuser</secondary></indexterm>还可以指定<option>-A md5</option>或<option>-A password</option>，这样就不会使用默认的<literal>trust</literal> 身份认证。或者在执行<command>initdb</command>之后、第一次启动服务器<emphasis>之前</emphasis>修改生成的<filename>pg_hba.conf</filename>文件（另外一些可行的方法包括<literal>peer</literal>认证或者用文件系统权限限制连接。更多信息见<xref linkend="client-authentication"/>）。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>initdb</command> also initializes the default
   locale<indexterm><primary>locale</primary></indexterm> for the database cluster.
   Normally, it will just take the locale settings in the environment
   and apply them to the initialized database.  It is possible to
   specify a different locale for the database; more information about
   that can be found in <xref linkend="locale"/>.  The default sort order used
   within the particular database cluster is set by
   <command>initdb</command>, and while you can create new databases using
   different sort order, the order used in the template databases that initdb
   creates cannot be changed without dropping and recreating them.
   There is also a performance impact for using locales
   other than <literal>C</literal> or <literal>POSIX</literal>. Therefore, it is
   important to make this choice correctly the first time.
  </para>
____________________________________________________________________________-->
  <para>
   <command>initdb</command>同时也为数据库集簇初始化默认区域<indexterm><primary>locale</primary></indexterm>。 通常，它将只是使用环境中的区域设置并且把它们应用于被初始化的数据库。 可以为数据库指定一个不同的区域；有关于此的更多信息可以在<xref linkend="locale"/>中找到。 特定数据库集簇中使用的默认排序顺序是通过<command>initdb</command>设置的， 虽然你可以创建使用不同排序顺序的新数据库，但在 initdb 创建的模板数据库中使用的顺序不能更改（除非删除并重建它们）。使用非<literal>C</literal>或<literal>POSIX</literal>的区域还会对性能造成影响。因此，第一次就正确地选择很重要。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>initdb</command> also sets the default character set encoding
   for the database cluster.  Normally this should be chosen to match the
   locale setting.  For details see <xref linkend="multibyte"/>.
  </para>
____________________________________________________________________________-->
  <para>
   <command>initdb</command>还为数据库集簇设置默认的字符集编码。通常字符集编码应该选择与区域设置匹配。详见<xref linkend="multibyte"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Non-<literal>C</literal> and non-<literal>POSIX</literal> locales rely on the
   operating system's collation library for character set ordering.
   This controls the ordering of keys stored in indexes.  For this reason,
   a cluster cannot switch to an incompatible collation library version,
   either through snapshot restore, binary streaming replication, a
   different operating system, or an operating system upgrade.
  </para>
____________________________________________________________________________-->
  <para>
   非<literal>C</literal>以及非<literal>POSIX</literal>区域对于字符集排序依赖于操作系统的排序规则库。这控制着索引中存储的键的排序。为此，通过快照恢复、二进制流复制、更换不同的操作系统或者升级操作系统都不能把一个集簇切换到一种不兼容的排序规则库版本。
  </para>

  <sect2 id="creating-cluster-mount-points">
<!--==========================orignal english content==========================
   <title>Use of Secondary File Systems</title>
____________________________________________________________________________-->
   <title>二级文件系统的使用</title>

<!--==========================orignal english content==========================
   <indexterm zone="creating-cluster-mount-points">
    <primary>file system mount points</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="creating-cluster-mount-points">
    <primary>文件系统挂载点</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    Many installations create their database clusters on file systems
    (volumes) other than the machine's <quote>root</quote> volume.  If you
    choose to do this, it is not advisable to try to use the secondary
    volume's topmost directory (mount point) as the data directory.
    Best practice is to create a directory within the mount-point
    directory that is owned by the <productname>PostgreSQL</productname>
    user, and then create the data directory within that.  This avoids
    permissions problems, particularly for operations such
    as <application>pg_upgrade</application>, and it also ensures clean failures if
    the secondary volume is taken offline.
   </para>
____________________________________________________________________________-->
   <para>
    很多安装会在文件系统（卷）而不是机器的<quote>根</quote>卷上创建它们的数据库集簇。如果你选择这样做，我们不建议尝试使用二级卷的顶层目录（挂载点）作为数据目录。最好的做法是在<productname>PostgreSQL</productname>用户拥有的挂载点目录中创建一个目录，然后在其中创建数据目录。这可以避免权限问题，特别是对于<application>pg_upgrade</application>这类操作，并且它也能在二级卷被断线后确保干净的失败。
   </para>

  </sect2>

  <sect2 id="creating-cluster-nfs">
<!--==========================orignal english content==========================
   <title>Use of Network File Systems</title>
____________________________________________________________________________-->
   <title>网络文件系统的使用</title>

<!--==========================orignal english content==========================
   <indexterm zone="creating-cluster-nfs">
    <primary>Network File Systems</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="creating-cluster-nfs">
    <primary>网络文件系统</primary>
   </indexterm>
<!--==========================orignal english content==========================
   <indexterm><primary><acronym>NFS</acronym></primary><see>Network File Systems</see></indexterm>
____________________________________________________________________________-->
   <indexterm><primary><acronym>NFS</acronym></primary><see>网络文件系统</see></indexterm>
<!--==========================orignal english content==========================
   <indexterm><primary>Network Attached Storage (<acronym>NAS</acronym>)</primary><see>Network File Systems</see></indexterm>
____________________________________________________________________________-->
   <indexterm><primary>网络附加存储 (<acronym>NAS</acronym>)</primary><see>网络文件系统</see></indexterm>

<!--==========================orignal english content==========================
   <para>
    Many installations create their database clusters on network file
    systems.  Sometimes this is done via <acronym>NFS</acronym>, or by using a
    Network Attached Storage (<acronym>NAS</acronym>) device that uses
    <acronym>NFS</acronym> internally.  <productname>PostgreSQL</productname> does nothing
    special for <acronym>NFS</acronym> file systems, meaning it assumes
    <acronym>NFS</acronym> behaves exactly like locally-connected drives.
    If the client or server <acronym>NFS</acronym> implementation does not
    provide standard file system semantics, this can
    cause reliability problems (see <ulink
    url="https://www.time-travellers.org/shane/papers/NFS_considered_harmful.html"></ulink>).
    Specifically, delayed (asynchronous) writes to the <acronym>NFS</acronym>
    server can cause data corruption problems.  If possible, mount the
    <acronym>NFS</acronym> file system synchronously (without caching) to avoid
    this hazard.  Also, soft-mounting the <acronym>NFS</acronym> file system is
    not recommended.
   </para>
____________________________________________________________________________-->
   <para>
    许多安装会在网络文件系统上创建它们的数据库集簇。有时直接通过<acronym>NFS</acronym>， 或通过内部使用<acronym>NFS</acronym>的网络附加存储设备（<acronym>NAS</acronym>）完成。 <productname>PostgreSQL</productname>不对 <acronym>NFS</acronym>文件系统做特殊处理，即它假定<acronym>NFS</acronym>的行为和本地连接的设备完全一样。如果客户端或者服务器<acronym>NFS</acronym>没有提供标准的文件系统语义，这将导致可靠性问题 （参阅<ulink url="https://www.time-travellers.org/shane/papers/NFS_considered_harmful.html"></ulink>）。 具体来说，延迟（异步）写入到<acronym>NFS</acronym>服务器可以导致数据损坏问题。 如果可能的话，把<acronym>NFS</acronym>文件系统挂载为同步（无高速缓存）可以避免这种灾难。还有，我们不推荐软挂载的<acronym>NFS</acronym>文件系统。
   </para>

<!--==========================orignal english content==========================
   <para>
    Storage Area Networks (<acronym>SAN</acronym>) typically use communication
    protocols other than <acronym>NFS</acronym>, and may or may not be subject
    to hazards of this sort.  It's advisable to consult the vendor's
    documentation concerning data consistency guarantees.
    <productname>PostgreSQL</productname> cannot be more reliable than
    the file system it's using.
   </para>
____________________________________________________________________________-->
   <para>
    存储区域网络（<acronym>SAN</acronym>）通常使用非<acronym>NFS</acronym>的通讯协议，并且可能或者不可能遭受这类灾难。建议咨询供应商的文档来了解数据一致性保证。<productname>PostgreSQL</productname>无法做到比它所使用的文件系统更可靠。
   </para>

  </sect2>

 </sect1>

 <sect1 id="server-start">
<!--==========================orignal english content==========================
  <title>Starting the Database Server</title>
____________________________________________________________________________-->
  <title>启动数据库服务器</title>

<!--==========================orignal english content==========================
  <para>
   Before anyone can access the database, you must start the database
   server. The database server program is called
   <command>postgres</command>.<indexterm><primary>postgres</primary></indexterm>
  注意在现有集群启用或禁用组访问时，需要关闭集群，且重新启动<productname>PostgreSQL</productname>之前设置所有的目录和文件到恰当的模式。否则，数据目录中会存在多种模式。集群仅可以被其属主访问，恰当的模式应该是，其目录设置为<literal>0700</literal>，普通文件设置为<literal>0600</literal>。允许集群被组可读，恰当的模式应该是，其目录设置为<literal>0750</litera>，普通文件设置为<literal>0640</literal>。
  注意在现有集群启用或禁用组访问时，需要关闭集群，且重新启动<productname>PostgreSQL</productname>之前设置所有的目录和文件到恰当的模式。否则，数据目录中会存在多种模式。集群仅可以被其属主访问，恰当的模式应该是，其目录设置为<literal>0700</literal>，普通文件设置为<literal>0600</literal>。允许集群被组可读，恰当的模式应该是，其目录设置为<literal>0750</litera>，普通文件设置为<literal>0640</literal>。
   The <command>postgres</command> program must know where to
   find the data it is supposed to use. This is done with the
   <option>-D</option> option. Thus, the simplest way to start the
   server is:
<screen>
$ <userinput>postgres -D /usr/local/pgsql/data</userinput>
</screen>
   which will leave the server running in the foreground. This must be
   done while logged into the <productname>PostgreSQL</productname> user
   account. Without <option>-D</option>, the server will try to use
   the data directory named by the environment variable <envar>PGDATA</envar>.
   If that variable is not provided either, it will fail.
  </para>
____________________________________________________________________________-->
  <para>
   在任何人可以访问数据库前，你必须启动数据库服务器。 数据库服务器程序是<command>postgres</command><indexterm><primary>postgres</primary></indexterm>， 它必须知道在哪里能找到它要用的数据。这是用<option>-D</option>选项实现的。 因此，启动服务器最简单的方法是：
<screen>
$ <userinput>postgres -D /usr/local/pgsql/data</userinput>
</screen>
   这将把服务器放在前台运行。这个步骤同样必须以<productname>PostgreSQL</productname>用户帐户登录来操作。如果没有<option>-D</option>选项，服务器将尝试使用环境变量<envar>PGDATA</envar>命名的目录。如果这个环境变量也没有提供则导致失败。
  </para>

<!--==========================orignal english content==========================
  <para>
   Normally it is better to start <command>postgres</command> in the
   background.  For this, use the usual Unix shell syntax:
<screen>
$ <userinput>postgres -D /usr/local/pgsql/data &gt;logfile 2&gt;&amp;1 &amp;</userinput>
</screen>
   It is important to store the server's <systemitem>stdout</systemitem> and
   <systemitem>stderr</systemitem> output somewhere, as shown above. It will help
   for auditing purposes and to diagnose problems. (See <xref
   linkend="logfile-maintenance"/> for a more thorough discussion of log
   file handling.)
  </para>
____________________________________________________________________________-->
  <para>
   通常最好在后台启动<command>postgres</command>。要这样做，使用常用的 Unix shell 语法：
<screen>
$ <userinput>postgres -D /usr/local/pgsql/data &gt;logfile 2&gt;&amp;1 &amp;</userinput>
</screen>
   如上所示，把服务器的<systemitem>stdout</systemitem>和<systemitem>stderr</systemitem>输出存储到某个地方是非常重要的。这将对审计目的和诊断问题有所帮助（更深入的有关日志文件处理的讨论请见（<xref linkend="logfile-maintenance"/>）。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <command>postgres</command> program also takes a number of other
   command-line options. For more information, see the
   <xref linkend="app-postgres"/> reference page
   and <xref linkend="runtime-config"/> below.
  </para>
____________________________________________________________________________-->
  <para>
   <command>postgres</command>还接受其它一些命令行选项。更多的信息请见<xref linkend="app-postgres"/>参考页 和下面的<xref linkend="runtime-config"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   This shell syntax can get tedious quickly.  Therefore the wrapper
   program
   <xref linkend="app-pg-ctl"/><indexterm><primary>pg_ctl</primary></indexterm>
   is provided to simplify some tasks.  For example:
<programlisting>
pg_ctl start -l logfile
</programlisting>
   will start the server in the background and put the output into the
   named log file. The <option>-D</option> option has the same meaning
   here as for <command>postgres</command>. <command>pg_ctl</command>
   is also capable of stopping the server.
  </para>
____________________________________________________________________________-->
  <para>
   这些 shell 语法很容易让人觉得无聊。因此我们提供了包装器程序<xref linkend="app-pg-ctl"/><indexterm><primary>pg_ctl</primary></indexterm>以简化一些任务。例如：
<programlisting>
pg_ctl start -l logfile
</programlisting>
   将在后台启动服务器并且把输出放到指定的日志文件中。<option>-D</option>选项和<command>postgres</command>中的一样。<command>pg_ctl</command>还可以用于停止服务器。
  </para>

<!--==========================orignal english content==========================
  <para>
   Normally, you will want to start the database server when the
   computer boots.<indexterm>
     <primary>booting</primary>
     <secondary>starting the server during</secondary>
   </indexterm>
   Autostart scripts are operating-system-specific.
   There are a few distributed with
   <productname>PostgreSQL</productname> in the
   <filename>contrib/start-scripts</filename> directory. Installing one will require
   root privileges.
  </para>
____________________________________________________________________________-->
  <para>
   通常，你会希望在计算机启动的时候启动数据库服务器。<indexterm><primary>booting</primary><secondary>starting the server during</secondary></indexterm>自动启动脚本是操作系统相关的。<productname>PostgreSQL</productname>在<filename>contrib/start-scripts</filename>目录中提供了几种。安装将需要 root 权限。
  </para>

<!--==========================orignal english content==========================
  <para>
   Different systems have different conventions for starting up daemons
   at boot time. Many systems have a file
   <filename>/etc/rc.local</filename> or
   <filename>/etc/rc.d/rc.local</filename>. Others use <filename>init.d</filename> or
   <filename>rc.d</filename> directories. Whatever you do, the server must be
   run by the <productname>PostgreSQL</productname> user account
   <emphasis>and not by root</emphasis> or any other user. Therefore you
   probably should form your commands using
   <literal>su postgres -c '...'</literal>.  For example:
<programlisting>
su postgres -c 'pg_ctl start -D /usr/local/pgsql/data -l serverlog'
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   不同的系统在引导时有不同的启动守护进程的习惯。许多系统有一个文件<filename>/etc/rc.local</filename>或<filename>/etc/rc.d/rc.local</filename>。其他的使用<filename>init.d</filename>或<filename>rc.d</filename>目录。不管你做什么，服务器必须由<productname>PostgreSQL</productname>用户账户<emphasis>而不是 root</emphasis>或任何其他用户启动。因此你可能应该在你的命令中使用<literal>su postgres -c '...'</literal>这种形式。例如：
<programlisting>
su postgres -c 'pg_ctl start -D /usr/local/pgsql/data -l serverlog'
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Here are a few more operating-system-specific suggestions. (In each
   case be sure to use the proper installation directory and user
   name where we show generic values.)

   <itemizedlist>
    <listitem>
     <para>
      For <productname>FreeBSD</productname>, look at the file
      <filename>contrib/start-scripts/freebsd</filename> in the
      <productname>PostgreSQL</productname> source distribution.
      <indexterm><primary>FreeBSD</primary><secondary>start script</secondary></indexterm>
     </para>
    </listitem>

    <listitem>
     <para>
      On <productname>OpenBSD</productname>, add the following lines
      to the file <filename>/etc/rc.local</filename>:
      <indexterm><primary>OpenBSD</primary><secondary>start script</secondary></indexterm>
<programlisting>
if [ -x /usr/local/pgsql/bin/pg_ctl -a -x /usr/local/pgsql/bin/postgres ]; then
    su -l postgres -c '/usr/local/pgsql/bin/pg_ctl start -s -l /var/postgresql/log -D /usr/local/pgsql/data'
    echo -n ' postgresql'
fi
</programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
      On <productname>Linux</productname> systems either add
      <indexterm><primary>Linux</primary><secondary>start script</secondary></indexterm>
<programlisting>
/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data
</programlisting>
      to <filename>/etc/rc.d/rc.local</filename>
      or <filename>/etc/rc.local</filename> or look at the file
      <filename>contrib/start-scripts/linux</filename> in the
      <productname>PostgreSQL</productname> source distribution.
     </para>

     <para>
      When using <application>systemd</application>, you can use the following
      service unit file (e.g.,
      at <filename>/etc/systemd/system/postgresql.service</filename>):<indexterm><primary>systemd</primary></indexterm>
<programlisting>
[Unit]
Description=PostgreSQL database server
Documentation=man:postgres(1)

[Service]
Type=notify
User=postgres
ExecStart=/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data
ExecReload=/bin/kill -HUP $MAINPID
KillMode=mixed
KillSignal=SIGINT
TimeoutSec=0

[Install]
WantedBy=multi-user.target
</programlisting>
      Using <literal>Type=notify</literal> requires that the server binary was
      built with <literal>configure -&minus;with-systemd</literal>.
     </para>

     <para>
      Consider carefully the timeout
      setting.  <application>systemd</application> has a default timeout of 90
      seconds as of this writing and will kill a process that does not notify
      readiness within that time.  But a <productname>PostgreSQL</productname>
      server that might have to perform crash recovery at startup could take
      much longer to become ready.  The suggested value of 0 disables the
      timeout logic.
     </para>
    </listitem>

    <listitem>
     <para>
      On <productname>NetBSD</productname>, use either the
      <productname>FreeBSD</productname> or
      <productname>Linux</productname> start scripts, depending on
      preference.
      <indexterm><primary>NetBSD</primary><secondary>start script</secondary></indexterm>
     </para>
    </listitem>

    <listitem>
     <para>
      On <productname>Solaris</productname>, create a file called
      <filename>/etc/init.d/postgresql</filename> that contains
      the following line:
      <indexterm><primary>Solaris</primary><secondary>start script</secondary></indexterm>
<programlisting>
su - postgres -c "/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data"
</programlisting>
      Then, create a symbolic link to it in <filename>/etc/rc3.d</filename> as
      <filename>S99postgresql</filename>.
     </para>
    </listitem>
   </itemizedlist>

  </para>
____________________________________________________________________________-->
  <para>
   下面是一些更加与操作系统相关的建议（在每一种情况中要确保在我们展示通用值的地方使用正确的安装目录和用户名）。

   <itemizedlist>
    <listitem>
     <para>
      对于<productname>FreeBSD</productname>，找找<productname>PostgreSQL</productname>源码发布中的文件<filename>contrib/start-scripts/freebsd</filename>。<indexterm><primary>FreeBSD</primary><secondary>start script</secondary></indexterm>
     </para>
    </listitem>

    <listitem>
     <para>
      在<productname>OpenBSD</productname>上， 把下面几行加到<filename>/etc/rc.local</filename>文件中：
      <indexterm><primary>OpenBSD</primary><secondary>启动脚本</secondary></indexterm>
<programlisting>
if [ -x /usr/local/pgsql/bin/pg_ctl -a -x /usr/local/pgsql/bin/postgres ]; then
    su -l postgres -c '/usr/local/pgsql/bin/pg_ctl start -s -l /var/postgresql/log -D /usr/local/pgsql/data'
    echo -n ' postgresql'
fi
</programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
      在<productname>Linux</productname>系统上将
      <indexterm><primary>Linux</primary><secondary>启动脚本</secondary></indexterm>
<programlisting>
/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data
</programlisting>
      加入到<filename>/etc/rc.d/rc.local</filename>或<filename>/etc/rc.local</filename>中，还可以在<productname>PostgreSQL</productname>的源码发布中找找文件<filename>contrib/start-scripts/linux</filename>。
     </para>

     <para>
      在使用<application>systemd</application>时，可以使用下面的服务单元文件（例如<filename>/etc/systemd/system/postgresql.service</filename>）：<indexterm><primary>systemd</primary></indexterm>
<programlisting>
[Unit]
Description=PostgreSQL database server
Documentation=man:postgres(1)

[Service]
Type=notify
User=postgres
ExecStart=/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data
ExecReload=/bin/kill -HUP $MAINPID
KillMode=mixed
KillSignal=SIGINT
TimeoutSec=0

[Install]
WantedBy=multi-user.target
</programlisting>
      使用<literal>Type=notify</literal>要求服务器的二进制文件使用<literal>configure --with-systemd</literal>编译。
     </para>

     <para>
      要仔细地考虑超时设置。在写作这份文档时，<application>systemd</application>的默认超时时长是 90 秒，并且将会杀死没有在这段时间内报告准备好的进程。但是<productname>PostgreSQL</productname>服务器可能因为执行崩溃恢复而导致启动过程大大超过这个默认时间。建议的值是 0 禁用超时逻辑。
     </para>
    </listitem>

    <listitem>
     <para>
      在<productname>NetBSD</productname>上，你可以根据爱好选择<productname>FreeBSD</productname>或<productname>Linux</productname>的启动脚本。
      <indexterm><primary>NetBSD</primary><secondary>启动脚本</secondary></indexterm>
     </para>
    </listitem>

    <listitem>
     <para>
      在<productname>Solaris</productname>上，创建一个名为<filename>/etc/init.d/postgresql</filename>的文件，其中包含下列行：
      <indexterm><primary>Solaris</primary><secondary>启动脚本</secondary></indexterm>
<programlisting>
su - postgres -c "/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data"
</programlisting>
      然后在<filename>/etc/rc3.d</filename>中创建一个符号链接<filename>S99postgresql</filename>指向它。
     </para>
    </listitem>
   </itemizedlist>

  </para>

<!--==========================orignal english content==========================
   <para>
    While the server is running, its
    <acronym>PID</acronym> is stored in the file
    <filename>postmaster.pid</filename> in the data directory. This is
    used to prevent multiple server instances from
    running in the same data directory and can also be used for
    shutting down the server.
   </para>
____________________________________________________________________________-->
   <para>
    当服务器在运行时，它的<acronym>PID</acronym>被保存在数据目录中的<filename>postmaster.pid</filename>文件。这样做 可以防止多个服务器实例运行在同一个数据目录中，并且也可以被用来关闭服务器。
   </para>

   <sect2 id="server-start-failures">
<!--==========================orignal english content==========================
    <title>Server Start-up Failures</title>
____________________________________________________________________________-->
    <title>服务器启动失败</title>

<!--==========================orignal english content==========================
    <para>
     There are several common reasons the server might fail to
     start. Check the server's log file, or start it by hand (without
     redirecting standard output or standard error) and see what error
     messages appear. Below we explain some of the most common error
     messages in more detail.
    </para>
____________________________________________________________________________-->
    <para>
     有几个常见的原因会导致服务器启动失败。通过检查服务器日志或使用手工启动的方法（不做标准输出或标准错误的重定向）， 就可以看到出现什么错误消息。下面我们详细地解释一些最常见的错误消息。
    </para>

<!--==========================orignal english content==========================
    <para>
<screen>
LOG:  could not bind IPv4 address "127.0.0.1": Address already in use
HINT:  Is another postmaster already running on port 5432? If not, wait a few seconds and retry.
FATAL:  could not create any TCP/IP sockets
</screen>
     This usually means just what it suggests: you tried to start
     another server on the same port where one is already running.
     However, if the kernel error message is not <computeroutput>Address
     already in use</computeroutput> or some variant of that, there might
     be a different problem. For example, trying to start a server
     on a reserved port number might draw something like:
<screen>
$ <userinput>postgres -p 666</userinput>
LOG:  could not bind IPv4 address "127.0.0.1": Permission denied
HINT:  Is another postmaster already running on port 666? If not, wait a few seconds and retry.
FATAL:  could not create any TCP/IP sockets
</screen>
    </para>
____________________________________________________________________________-->
    <para>
<screen>
LOG:  could not bind IPv4 address "127.0.0.1": Address already in use
HINT:  Is another postmaster already running on port 5432? If not, wait a few seconds and retry.
FATAL:  could not create any TCP/IP sockets
</screen>
     正如这个消息所说的，这表示：你试图在一个已经有服务器运行着的端口上再启动另一个服务器。不过，如果核心错误消息不是<computeroutput>Address already in use</computeroutput>或其变体，那就有可能是别的问题。 例如，试图在一个被保留的端口上启动服务器会收到下面这样的消息：
<screen>
$ <userinput>postgres -p 666</userinput>
LOG:  could not bind IPv4 address "127.0.0.1": Permission denied
HINT:  Is another postmaster already running on port 666? If not, wait a few seconds and retry.
FATAL:  could not create any TCP/IP sockets
</screen>
    </para>

<!--==========================orignal english content==========================
    <para>
     A message like:
<screen>
FATAL:  could not create shared memory segment: Invalid argument
DETAIL:  Failed system call was shmget(key=5440001, size=4011376640, 03600).
</screen>
     probably means your kernel's limit on the size of shared memory is
     smaller than the work area <productname>PostgreSQL</productname>
     is trying to create (4011376640 bytes in this example). Or it could
     mean that you do not have System-V-style shared memory support
     configured into your kernel at all. As a temporary workaround, you
     can try starting the server with a smaller-than-normal number of
     buffers (<xref linkend="guc-shared-buffers"/>). You will eventually want
     to reconfigure your kernel to increase the allowed shared memory
     size. You might also see this message when trying to start multiple
     servers on the same machine, if their total space requested
     exceeds the kernel limit.
    </para>
____________________________________________________________________________-->
    <para>
     像这样的消息：
<screen>
FATAL:  could not create shared memory segment: Invalid argument
DETAIL:  Failed system call was shmget(key=5440001, size=4011376640, 03600).
</screen>
     可能意味着你的内核对共享内存区的限制小于<productname>PostgreSQL</productname>试图创建的工作区域（本例中是 4011376640 字节）。或者可能意味着根本就没有 System-V 风格的共享内存支持被配置在你的内核中。作为一种临时的解决方案， 你可以试着以小于正常数量的缓冲区（<xref linkend="guc-shared-buffers"/>）启动服务器。 你最终还是会希望重新配置内核以增加共享内存允许的尺寸。 当你试图在同一台机器上启动多个服务器，并且它们所需的总空间超过了内核的限制，也会报这个错。
    </para>

<!--==========================orignal english content==========================
    <para>
     An error like:
<screen>
FATAL:  could not create semaphores: No space left on device
DETAIL:  Failed system call was semget(5440126, 17, 03600).
</screen>
     does <emphasis>not</emphasis> mean you've run out of disk
     space. It means your kernel's limit on the number of <systemitem
     class="osname">System V</systemitem> semaphores is smaller than the number
     <productname>PostgreSQL</productname> wants to create. As above,
     you might be able to work around the problem by starting the
     server with a reduced number of allowed connections
     (<xref linkend="guc-max-connections"/>), but you'll eventually want to
     increase the kernel limit.
    </para>
____________________________________________________________________________-->
    <para>
     一个这样的错误：
<screen>
FATAL:  could not create semaphores: No space left on device
DETAIL:  Failed system call was semget(5440126, 17, 03600).
</screen>
     并<emphasis>不</emphasis>意味着你已经用光了磁盘空间。它的意思是你的内核对<systemitem class="osname">System V</systemitem>信号量的限制小于<productname>PostgreSQL</productname>想创建的数量。和上面一样，你可以通过减少允许的连接数（<xref linkend="guc-max-connections"/>）来绕开这个限制，但最终你还是会希望提高内核的限制。
    </para>

<!--==========================orignal english content==========================
    <para>
     If you get an <quote>illegal system call</quote> error, it is likely that
     shared memory or semaphores are not supported in your kernel at
     all. In that case your only option is to reconfigure the kernel to
     enable these features.
    </para>
____________________________________________________________________________-->
    <para>
     如果你收到一个<quote>illegal system call</quote>错误， 那么很有可能是你的内核根本不支持共享内存或者信号量。这种情况下你唯一的选择就是重新配置内核并且把这些特性打开。
    </para>

<!--==========================orignal english content==========================
    <para>
     Details about configuring <systemitem class="osname">System V</systemitem>
     <acronym>IPC</acronym> facilities are given in <xref linkend="sysvipc"/>.
    </para>
____________________________________________________________________________-->
    <para>
     关于配置<systemitem class="osname">System V</systemitem> <acronym>IPC</acronym>功能的细节请见<xref linkend="sysvipc"/>。
    </para>
   </sect2>

   <sect2 id="client-connection-problems">
<!--==========================orignal english content==========================
    <title>Client Connection Problems</title>
____________________________________________________________________________-->
    <title>客户端连接问题</title>

<!--==========================orignal english content==========================
    <para>
     Although the error conditions possible on the client side are quite
     varied and application-dependent, a few of them might be directly
     related to how the server was started. Conditions other than
     those shown below should be documented with the respective client
     application.
    </para>
____________________________________________________________________________-->
    <para>
     尽管可能在客户端出现的错误情况范围宽广而且是应用相关的，但的确有几种与服务器的启动方式直接相关。除了下面提到的几种错误之外的问题都应该在相应的客户端应用文档中。
    </para>

<!--==========================orignal english content==========================
    <para>
<screen>
psql: could not connect to server: Connection refused
        Is the server running on host "server.joe.com" and accepting
        TCP/IP connections on port 5432?
</screen>
     This is the generic <quote>I couldn't find a server to talk
     to</quote> failure. It looks like the above when TCP/IP
     communication is attempted. A common mistake is to forget to
     configure the server to allow TCP/IP connections.
    </para>
____________________________________________________________________________-->
    <para>
<screen>
psql: could not connect to server: Connection refused
        Is the server running on host "server.joe.com" and accepting
        TCP/IP connections on port 5432?
</screen>
     这是常见的<quote>I couldn't find a server to talk to</quote>失败。上面的情况看起来是发生在尝试 TCP/IP 通信时。常见的错误是忘记把服务器配置成允许 TCP/IP 连接。
    </para>

<!--==========================orignal english content==========================
    <para>
     Alternatively, you'll get this when attempting Unix-domain socket
     communication to a local server:
<screen>
psql: could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/tmp/.s.PGSQL.5432"?
</screen>
    </para>
____________________________________________________________________________-->
    <para>
     另外，当试图通过 Unix 域套接字与本地服务器通信时，你会看到这个：
<screen>
psql: could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket "/tmp/.s.PGSQL.5432"?
</screen>
    </para>

<!--==========================orignal english content==========================
    <para>
     The last line is useful in verifying that the client is trying to
     connect to the right place. If there is in fact no server
     running there, the kernel error message will typically be either
     <computeroutput>Connection refused</computeroutput> or
     <computeroutput>No such file or directory</computeroutput>, as
     illustrated. (It is important to realize that
     <computeroutput>Connection refused</computeroutput> in this context
     does <emphasis>not</emphasis> mean that the server got your
     connection request and rejected it. That case will produce a
     different message, as shown in <xref
     linkend="client-authentication-problems"/>.) Other error messages
     such as <computeroutput>Connection timed out</computeroutput> might
     indicate more fundamental problems, like lack of network
     connectivity.
    </para>
____________________________________________________________________________-->
    <para>
     最后一行可以验证客户端是不是尝试连接到正确的位置。如果实际上没有服务器在那里运行，典型的核心错误消息将是<computeroutput>Connection refused</computeroutput>或<computeroutput>No such file or directory</computeroutput>（值得注意的是这种环境中的<computeroutput>Connection refused</computeroutput>并<emphasis>不</emphasis>表示服务器得到了你的连接请求并拒绝了它。那种情况会产生一个不同的消息，如<xref linkend="client-authentication-problems"/>中所示）。其它像<computeroutput>Connection timed out</computeroutput>这样的消息可能表示更基础的问题，如缺少网络连接。
    </para>
   </sect2>
  </sect1>

 <sect1 id="kernel-resources">
<!--==========================orignal english content==========================
  <title>Managing Kernel Resources</title>
____________________________________________________________________________-->
  <title>管理内核资源</title>

<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</productname> can sometimes exhaust various operating system
   resource limits, especially when multiple copies of the server are running
   on the same system, or in very large installations.  This section explains
   the kernel resources used by <productname>PostgreSQL</productname> and the steps you
   can take to resolve problems related to kernel resource consumption.
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>某些时候会耗尽操作系统的各种资源限制，当同一个系统上运行着多个拷贝的服务器或在一个非常大的安装中时尤其如此。本节解释了<productname>PostgreSQL</productname>使用的内核资源以及你可以采取的用于解决内核资源消耗相关问题的步骤。
  </para>

  <sect2 id="sysvipc">
<!--==========================orignal english content==========================
   <title>Shared Memory and Semaphores</title>
____________________________________________________________________________-->
   <title>共享内存和信号量</title>

<!--==========================orignal english content==========================
   <indexterm zone="sysvipc">
    <primary>shared memory</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="sysvipc">
    <primary>共享内存</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm zone="sysvipc">
    <primary>semaphores</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="sysvipc">
    <primary>信号量</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    <productname>PostgreSQL</productname> requires the operating system to provide
    inter-process communication (<acronym>IPC</acronym>) features, specifically
    shared memory and semaphores.  Unix-derived systems typically provide
    <quote><systemitem class="osname">System V</systemitem></quote> <acronym>IPC</acronym>,
    <quote><systemitem class="osname">POSIX</systemitem></quote> <acronym>IPC</acronym>, or both.
    <systemitem class="osname">Windows</systemitem> has its own implementation of
    these features and is not discussed here.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>需要操作系统提供进程间通信(<acronym>IPC</acronym>)特性，
	特别是共享内存和信号量。Unix驱动的系统通常提供
	<quote><systemitem class="osname">System V</systemitem></quote> <acronym>IPC</acronym>、
    <quote><systemitem class="osname">POSIX</systemitem></quote> <acronym>IPC</acronym>，或者两者都有。
	<systemitem class="osname">Windows</systemitem>有它自己的这些功能的实现，这里不讨论。
   </para>

<!--==========================orignal english content==========================
   <para>
    The complete lack of these facilities is usually manifested by an
    <quote><errorname>Illegal system call</errorname></quote> error upon server
    start.  In that case there is no alternative but to reconfigure your
    kernel.  <productname>PostgreSQL</productname> won't work without them.
    This situation is rare, however, among modern operating systems.
   </para>
____________________________________________________________________________-->
   <para>
    完全缺少这些功能通常表现为服务器启动时的<quote><errorname>Illegal system call</errorname></quote>错误。这种情况下，除了重新配置内核之外别无选择。<productname>PostgreSQL</productname>没有它们就不能工作。 不过，在现代操作系统中这种情况是罕见的。
   </para>


<!--==========================orignal english content==========================
   <para>
    Upon starting the server, <productname>PostgreSQL</productname> normally allocates
    a very small amount of System V shared memory, as well as a much larger
    amount of POSIX (<function>mmap</function>) shared memory.
    In addition a significant number of semaphores, which can be either
    System V or POSIX style, are created at server startup.  Currently,
    POSIX semaphores are used on Linux and FreeBSD systems while other
    platforms use System V semaphores.
   </para>
____________________________________________________________________________-->
   <para>
    在启动服务器时，<productname>PostgreSQL</productname>通常分配少量的System V共享内存，
	和大量的POSIX (<function>mmap</function>)共享内存。另外，
	在服务器启动时会创建大量信号量，这些信号量可以是System V或POSIX风格。
	目前，POSIX信号量用于Linux和FreeBSD系统，而其他平台则使用System V信号量。
   </para>

   <note>
<!--==========================orignal english content==========================
    <para>
     Prior to <productname>PostgreSQL</productname> 9.3, only System V shared memory
     was used, so the amount of System V shared memory required to start the
     server was much larger.  If you are running an older version of the
     server, please consult the documentation for your server version.
    </para>
____________________________________________________________________________-->
    <para>
     在<productname>PostgreSQL</productname> 9.3之前，只使用了System V共享内存，
     所以启动服务器所需的System V共享内存的数量更大一些。
	 如果你在运行着一个老版本的服务器，请参考该服务器版本的文档。
    </para>
   </note>

<!--==========================orignal english content==========================
   <para>
    System V <acronym>IPC</acronym> features are typically constrained by
    system-wide allocation limits.
    When <productname>PostgreSQL</productname> exceeds one of these limits,
    the server will refuse to start and
    should leave an instructive error message describing the problem
    and what to do about it. (See also <xref
    linkend="server-start-failures"/>.) The relevant kernel
    parameters are named consistently across different systems; <xref
    linkend="sysvipc-parameters"/> gives an overview. The methods to set
    them, however, vary. Suggestions for some platforms are given below.
   </para>
____________________________________________________________________________-->
   <para>
    System V <acronym>IPC</acronym>特性通常受系统范围分配限制的限制。
	当<productname>PostgreSQL</productname>超出了这些限制之一时，服务器会拒绝启动并且并且留下一条有指导性的错误消息，其中描述了问题以及应该怎么做（又见<xref linkend="server-start-failures"/>）。相关的内核参数在不同系统之间的命名方式一致，<xref linkend="sysvipc-parameters"/>给出了一个概述。不过，设置它们的方法却多种多样。下面给出了对于某些平台的建议：
   </para>

   <table id="sysvipc-parameters">
<!--==========================orignal english content==========================
    <title><systemitem class="osname">System V</systemitem> <acronym>IPC</acronym> Parameters</title>
____________________________________________________________________________-->
    <title><systemitem class="osname">System V</systemitem> <acronym>IPC</acronym>参数</title>

    <tgroup cols="3">
     <thead>
<!--==========================orignal english content==========================
      <row>
       <entry>Name</entry>
       <entry>Description</entry>
       <entry>Values needed to run one <productname>PostgreSQL</productname> instance</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>名称</entry>
       <entry>描述</entry>
       <entry>运行一个<productname>PostgreSQL</productname>实例所需的值值</entry>
      </row>
     </thead>

     <tbody>
<!--==========================orignal english content==========================
      <row>
       <entry><varname>SHMMAX</varname></entry>
       <entry>Maximum size of shared memory segment (bytes)</entry>
       <entry>at least 1kB, but the default is usually much higher</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry><varname>SHMMAX</varname></entry>
       <entry>共享内存段的最大尺寸（字节）</entry>
       <entry>至少 1kB，但是默认值通常要高一些</entry>
      </row>

<!--==========================orignal english content==========================
      <row>
       <entry><varname>SHMMIN</></>
       <entry>Minimum size of shared memory segment (bytes)</entry>
       <entry>1</>
      </row>
____________________________________________________________________________-->
      <row>
       <entry><varname>SHMMIN</varname></entry>
       <entry>共享内存段的最小尺寸（字节）</entry>
       <entry>1</entry>
      </row>

<!--==========================orignal english content==========================
      <row>
       <entry><varname>SHMALL</varname></entry>
       <entry>Total amount of shared memory available (bytes or pages)</entry>
       <entry>same as <varname>SHMMAX</varname> if bytes,
        or <literal>ceil(SHMMAX/PAGE_SIZE)</literal> if pages,
        plus room for other applications</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry><varname>SHMALL</varname></entry>
       <entry>可用共享内存的总量（字节或页面）</entry>
       <entry>如果是字节，同<varname>SHMMAX</varname>；如果是页面，
	   为<literal>ceil(SHMMAX/PAGE_SIZE)</literal>，加上其他应用程序的空间</entry>
      </row>

<!--==========================orignal english content==========================
      <row>
       <entry><varname>SHMSEG</varname></entry>
       <entry>Maximum number of shared memory segments per process</entry>
       <entry>only 1 segment is needed, but the default is much higher</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry><varname>SHMSEG</varname></entry>
       <entry>每个进程的最大共享内存段数目</entry>
       <entry>只需要 1 段，但是默认值高很多</entry>
      </row>

<!--==========================orignal english content==========================
       <row>
        <entry><varname>SHMMNI</varname></entry>
        <entry>Maximum number of shared memory segments system-wide</entry>
        <entry>like <varname>SHMSEG</varname> plus room for other applications</entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><varname>SHMMNI</varname></entry>
        <entry>系统范围内的最大共享内存段数目</entry>
        <entry>像<varname>SHMSEG</varname>外加其他应用的空间</entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><varname>SEMMNI</varname></entry>
        <entry>Maximum number of semaphore identifiers (i.e., sets)</entry>
        <entry>at least <literal>ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16)</literal> plus room for other applications</entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><varname>SEMMNI</varname></entry>
        <entry>信号量标识符（即，集合）的最大数目</entry>
        <entry>至少<literal>ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16)</literal>加上其他应用程序的空间</entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><varname>SEMMNS</varname></entry>
        <entry>Maximum number of semaphores system-wide</entry>
        <entry><literal>ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16) * 17</literal> plus room for other applications</entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><varname>SEMMNS</varname></entry>
        <entry>系统范围内的最大信号量数目</entry>
        <entry><literal>ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16) * 17</literal>外加其他应用的空间</entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><varname>SEMMSL</varname></entry>
        <entry>Maximum number of semaphores per set</entry>
        <entry>at least 17</entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><varname>SEMMSL</varname></entry>
        <entry>每个集合中信号量的最大数目</entry>
        <entry>至少 17</entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><varname>SEMMAP</varname></entry>
        <entry>Number of entries in semaphore map</entry>
        <entry>see text</entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><varname>SEMMAP</varname></entry>
        <entry>信号量映射中的项数</entry>
        <entry>见文本</entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><varname>SEMVMX</varname></entry>
        <entry>Maximum value of semaphore</entry>
        <entry>at least 1000 (The default is often 32767; do not change unless necessary)</entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><varname>SEMVMX</varname></entry>
        <entry>信号量的最大值</entry>
        <entry>至少 1000 （默认值常常是 32767，如非必要不要更改）</entry>
       </row>

     </tbody>
    </tgroup>
   </table>

<!--==========================orignal english content==========================
   <para>
    <productname>PostgreSQL</productname> requires a few bytes of System V shared memory
    (typically 48 bytes, on 64-bit platforms) for each copy of the server.
    On most modern operating systems, this amount can easily be allocated.
    However, if you are running many copies of the server, or if other
    applications are also using System V shared memory, it may be necessary to
    increase <varname>SHMALL</varname>, which is the total amount of System V shared
    memory system-wide.  Note that <varname>SHMALL</varname> is measured in pages
    rather than bytes on many systems.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>要求少量字节的 System V 共享内存（在 64 位平台上通常是 48 字节）
	用于每一个服务器拷贝。在大多数现代操作系统上，这个量很容易得到。但是，如果你运行了很多个服务器拷贝，
	或者其他应用也在使用 System V 共享内存，可能需要增加<varname>SHMALL</varname>（系统范围内 System V 共享内存的总量）。注意在很多系统上<varname>SHMALL</varname>是以页面而不是字节来度量。
   </para>

<!--==========================orignal english content==========================
   <para>
    Less likely to cause problems is the minimum size for shared
    memory segments (<varname>SHMMIN</varname>), which should be at most
    approximately 32 bytes for <productname>PostgreSQL</productname> (it is
    usually just 1). The maximum number of segments system-wide
    (<varname>SHMMNI</varname>) or per-process (<varname>SHMSEG</varname>) are unlikely
    to cause a problem unless your system has them set to zero.
   </para>
____________________________________________________________________________-->
   <para>
    不太可能出问题的是共享内存段的最小尺寸（<varname>SHMMIN</varname>），对<productname>PostgreSQL</productname>来说应该最多大约是 32 字节（通常只是1）。而系统范围（<varname>SHMMNI</varname>）或每个进程（<varname>SHMSEG</varname>）的最大共享内存段数目不太可能会导致问题，除非你的系统把它们设成零。
   </para>

<!--==========================orignal english content==========================
   <para>
    When using System V semaphores,
    <productname>PostgreSQL</productname> uses one semaphore per allowed connection
    (<xref linkend="guc-max-connections"/>), allowed autovacuum worker process
    (<xref linkend="guc-autovacuum-max-workers"/>) and allowed background
    process (<xref linkend="guc-max-worker-processes"/>), in sets of 16.
    Each such set will
    also contain a 17th semaphore which contains a <quote>magic
    number</quote>, to detect collision with semaphore sets used by
    other applications. The maximum number of semaphores in the system
    is set by <varname>SEMMNS</varname>, which consequently must be at least
    as high as <varname>max_connections</varname> plus
    <varname>autovacuum_max_workers</varname> plus <varname>max_worker_processes</varname>,
    plus one extra for each 16
    allowed connections plus workers (see the formula in <xref
    linkend="sysvipc-parameters"/>).  The parameter <varname>SEMMNI</varname>
    determines the limit on the number of semaphore sets that can
    exist on the system at one time.  Hence this parameter must be at
    least <literal>ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16)</literal>.
    Lowering the number
    of allowed connections is a temporary workaround for failures,
    which are usually confusingly worded <quote>No space
    left on device</quote>, from the function <function>semget</function>.
   </para>
____________________________________________________________________________-->
   <para>
    当使用System V信号量时，<productname>PostgreSQL</productname>对每个允许的连接（<xref linkend="guc-max-connections"/>）、每个允许的自动清理工作者进程（<xref linkend="guc-autovacuum-max-workers"/>）和每个允许的后台进程（<xref linkend="guc-max-worker-processes"/>）使用一个信号量， 以16个为一个集合。每个这种集合还包含第 17 个信号量， 其中存储一个<quote>magic number</quote>，以检测和其它应用使用的信号量集合的冲突。 系统里的最大信号量数目是由<varname>SEMMNS</varname>设置的， 因此这个值必须至少和<varname>max_connections</varname>加<varname>autovacuum_max_workers</varname>再加<varname>max_worker_processes</varname>一样大， 并且每 16 个连接外加工作者还要另外加一个（见<xref linkend="sysvipc-parameters"/>中的公式）。参数<varname>SEMMNI</varname> 决定系统中同一时刻可以存在的信号量集合的数目限制。因此这个参数必须至少为<literal>ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16)</literal>。降低允许的连接数目是一种临时的绕开失败（来自函数<function>semget</function>）的方法，通常使用让人混乱的措辞<quote>No space left on device</quote>。
   </para>

<!--==========================orignal english content==========================
   <para>
    In some cases it might also be necessary to increase
    <varname>SEMMAP</varname> to be at least on the order of
    <varname>SEMMNS</varname>. If the system has this parameter(many do not),it defines the size of the semaphore
    resource map, in which each contiguous block of available semaphores
    needs an entry. When a semaphore set is freed it is either added to
    an existing entry that is adjacent to the freed block or it is
    registered under a new map entry. If the map is full, the freed
    semaphores get lost (until reboot). Fragmentation of the semaphore
    space could over time lead to fewer available semaphores than there
    should be.
   </para>
____________________________________________________________________________-->
   <para>
    在某些情况下可能还有必要增大<varname>SEMMAP</varname>，使之至少与<varname>SEMMNS</varname>相近。如果系统有这个参数(很多系统没有)，这个参数定义信号量资源映射的尺寸，在其中每个连续的可用信号量块都需要一项。 每当一个信号量集合被释放，那么它要么会被加入到该与被释放块相邻的一个现有项，或者它会被注册在一个新映射项中。如果映射被填满，被释放的信号量将丢失（直到重启）。因此信号量空间的碎片时间长了会导致可用的信号量比应有的信号量少。
   </para>

<!--==========================orignal english content==========================
   <para>
    Various other settings related to <quote>semaphore undo</quote>, such as
    <varname>SEMMNU</varname> and <varname>SEMUME</varname>, do not affect
    <productname>PostgreSQL</productname>.
   </para>
____________________________________________________________________________-->
   <para>
    与<quote>semaphore undo</quote>有关的其他各种设置，如<varname>SEMMNU</varname>和<varname>SEMUME</varname>
	不会影响<productname>PostgreSQL</productname>。
   </para>

<!--==========================orignal english content==========================
   <para>
    When using POSIX semaphores, the number of semaphores needed is the
    same as for System V, that is one semaphore per allowed connection
    (<xref linkend="guc-max-connections"/>), allowed autovacuum worker process
    (<xref linkend="guc-autovacuum-max-workers"/>) and allowed background
    process (<xref linkend="guc-max-worker-processes"/>).
    On the platforms where this option is preferred, there is no specific
    kernel limit on the number of POSIX semaphores.
   </para>
____________________________________________________________________________-->
   <para>
    当使用POSIX信号量时，所需的信号量数量与System V相同，
	即每个允许的连接(<xref linkend="guc-max-connections"/>)、允许的自动清理工作进程
	(<xref linkend="guc-autovacuum-max-workers"/>)和允许的后台进程
	(<xref linkend="guc-max-worker-processes"/>)一个信号量。
	在首选此选项的平台上，POSIX信号量的数量没有特定的内核限制。
   </para>

    <variablelist>
     <varlistentry>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">AIX</>
      <indexterm><primary>AIX</><secondary>IPC configuration</></>
      </term>
____________________________________________________________________________-->
      <term><systemitem class="osname">AIX</systemitem>
      <indexterm><primary>AIX</primary><secondary>IPC 配置</secondary></indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        At least as of version 5.1, it should not be necessary to do
        any special configuration for such parameters as
        <varname>SHMMAX</varname>, as it appears this is configured to
        allow all memory to be used as shared memory.  That is the
        sort of configuration commonly used for other databases such
        as <application>DB/2</application>.</para>
____________________________________________________________________________-->
       <para>
        至少到版本 5.1 为止，不再需要对这些参数（例如<varname>SHMMAX</varname>）做任何特殊的配置，这看起来就像是被配置成允许所有内存都被用作共享内存。这是一种通常被用于其他数据库（<application>DB/2</application>）的配置。</para>

<!--==========================orignal english content==========================
       <para> It might, however, be necessary to modify the global
       <command>ulimit</command> information in
       <filename>/etc/security/limits</filename>, as the default hard
       limits for file sizes (<varname>fsize</varname>) and numbers of
       files (<varname>nofiles</varname>) might be too low.
       </para>
____________________________________________________________________________-->
       <para>但是，可能需要修改<filename>/etc/security/limits</filename>中的全局<command>ulimit</command>信息，默认的文件尺寸硬限制（<varname>fsize</varname>）和文件数量（<varname>nofiles</varname>）可能太低。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">FreeBSD</>
      <indexterm><primary>FreeBSD</><secondary>IPC configuration</></>
      </term>
____________________________________________________________________________-->
      <term><systemitem class="osname">FreeBSD</systemitem>
      <indexterm><primary>FreeBSD</primary><secondary>IPC 配置</secondary></indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The default IPC settings can be changed using
        the <command>sysctl</command> or
        <command>loader</command> interfaces.  The following
        parameters can be set using <command>sysctl</command>:
<screen>
<prompt>#</prompt> <userinput>sysctl kern.ipc.shmall=32768</userinput>
<prompt>#</prompt> <userinput>sysctl kern.ipc.shmmax=134217728</userinput>
</screen>
        To make these settings persist over reboots, modify
        <filename>/etc/sysctl.conf</filename>.
       </para>
____________________________________________________________________________-->
       <para>
        可以使用<command>sysctl</command>或<command>loader</command>接口来改变默认IPC配置。下列参数可以使用<command>sysctl</command>设置：
<screen>
<prompt>#</prompt> <userinput>sysctl kern.ipc.shmall=32768</userinput>
<prompt>#</prompt> <userinput>sysctl kern.ipc.shmmax=134217728</userinput>
<prompt>#</prompt> <userinput>sysctl kern.ipc.semmap=256</userinput>
</screen>
        要让这些设置在重启之后也保持，请修改<filename>/etc/sysctl.conf</filename>。
       </para>

<!--==========================orignal english content==========================
       <para>
        These semaphore-related settings are read-only as far as
        <command>sysctl</command> is concerned, but can be set in
        <filename>/boot/loader.conf</filename>:
<programlisting>
kern.ipc.semmni=256
kern.ipc.semmns=512
</programlisting>
        After modifying that file, a reboot is required for the new
        settings to take effect.
        (Note: FreeBSD does not use <varname>SEMMAP</varname>.  Older versions
        would accept but ignore a setting for <literal>kern.ipc.semmap</literal>;
        newer versions reject it altogether.)
       </para>
____________________________________________________________________________-->
       <para>
        对于<command>sysctl</command>所关心的来说这些信号量相关的设置都是只读的，但是可以在<filename>/boot/loader.conf</filename>中设置：
<programlisting>
kern.ipc.semmni=256
kern.ipc.semmns=512
</programlisting>
        修改该配置文件后，需要重启一次让新设置生效。
        （注意：FreeBSD 不使用<varname>SEMMAP</varname>。较老的版本
        会接受并且忽略<literal>kern.ipc.semmap</literal>的设置，而较新的
        版本会完全拒绝它）。
       </para>

<!--==========================orignal english content==========================
       <para>
        You might also want to configure your kernel to lock shared
        memory into RAM and prevent it from being paged out to swap.
        This can be accomplished using the <command>sysctl</command>
        setting <literal>kern.ipc.shm_use_phys</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        你可能也希望你的内核将共享内存锁定在 RAM 中并且防止它被换页到交换分区。这可以使用<command>sysctl</command>的设置
<literal>kern.ipc.shm_use_phys</literal>来完成。
       </para>

<!--==========================orignal english content==========================
       <para>
        If running in FreeBSD jails by enabling <application>sysctl</application>'s
        <literal>security.jail.sysvipc_allowed</literal>, <application>postmaster</application>s
        running in different jails should be run by different operating system
        users.  This improves security because it prevents non-root users
        from interfering with shared memory or semaphores in different jails,
        and it allows the PostgreSQL IPC cleanup code to function properly.
        (In FreeBSD 6.0 and later the IPC cleanup code does not properly detect
        processes in other jails, preventing the running of postmasters on the
        same port in different jails.)
       </para>
____________________________________________________________________________-->
       <para>
        如果通过启用<application>sysctl</application>的<literal>security.jail.sysvipc_allowed</literal>运行在 FreeBSD jail 中，运行在不同 jail 中的<application>postmaster</application>应当被不同的操作系统用户运行。这可以提高安全性，因为它阻止非 root 用户干涉不同 jail 中的共享内存或信号量，并且它允许 PostgreSQL IPC 清理代码正确地工作（在 FreeBSD 6.0 及其后的版本中，IPC 清理代码不能正确地检测到其他 jail 中的进程，也不能阻止不同 jail 中的 postmaster 运行在相同的端口）。
       </para>

<!--==========================orignal english content==========================
       <para>
        <systemitem class="osname">FreeBSD</systemitem> versions before 4.0 work like
        old <systemitem class="osname">OpenBSD</systemitem> (see below).
       </para>
____________________________________________________________________________-->
       <para>
        <systemitem class="osname">FreeBSD</systemitem> 4.0 之前的版本的工作与旧版<systemitem class="osname">OpenBSD</systemitem>相似（见下文）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">NetBSD</>
      <indexterm><primary>NetBSD</><secondary>IPC configuration</></>
      </term>
____________________________________________________________________________-->
      <term><systemitem class="osname">NetBSD</systemitem>
      <indexterm><primary>NetBSD</primary><secondary>IPC 配置</secondary></indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        In <systemitem class="osname">NetBSD</systemitem> 5.0 and later,
        IPC parameters can be adjusted using <command>sysctl</command>,
        for example:
<screen>
<prompt>$</prompt> <userinput>sysctl -w kern.ipc.semmni=100</userinput>
</screen>
        To make these settings persist over reboots, modify
        <filename>/etc/sysctl.conf</filename>.
       </para>
____________________________________________________________________________-->
       <para>
        在<systemitem class="osname">NetBSD</systemitem> 5.0 及其后的版本中，IPC 参数可以使用<command>sysctl</command>调整。例如：
<screen>
<prompt>$</prompt> <userinput>sysctl -w kern.ipc.shmmax=16777216</userinput>
</screen>
        要使这些设置在重启后保持，请修改<filename>/etc/sysctl.conf</filename>。
       </para>

<!--==========================orignal english content==========================
       <para>
        You will usually want to increase <literal>kern.ipc.semmni</literal>
        and <literal>kern.ipc.semmns</literal>,
        as <systemitem class="osname">NetBSD</systemitem>'s default settings
        for these are uncomfortably small.
       </para>
____________________________________________________________________________-->
       <para>
       作为<systemitem class="osname">NetBSD</systemitem>的默认设置，你总是会想~
调大<literal>kern.ipc.semmni</literal>和<literal>kern.ipc.semmns</literal>的值，因为他们实在太小了。 
       </para>
<!--==========================orignal english content==========================
       <para>
        You might also want to configure your kernel to lock shared
        memory into RAM and prevent it from being paged out to swap.
        This can be accomplished using the <command>sysctl</command>
        setting <literal>kern.ipc.shm_use_phys</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        你可能也希望你的内核将共享内存锁定在 RAM 中并且防止它被换页到交换分区。这可以使用<command>sysctl</command>的设置
<literal>kern.ipc.shm_use_phys</literal>来完成。
       </para>

<!--==========================orignal english content==========================
       <para>
        <systemitem class="osname">NetBSD</systemitem> versions before 5.0 work like
        old <systemitem class="osname">OpenBSD</systemitem> (see below), except that
        kernel parameters should be set with the keyword <literal>options</literal> not
        <literal>option</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        <systemitem class="osname">NetBSD</systemitem> 5.0 以前的版本的工作与旧版<systemitem class="osname">OpenBSD</systemitem>相似（见下文），除了那些内核参数应该用关键词<literal>options</literal>设置而不是<literal>option</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">OpenBSD</>
      <indexterm><primary>OpenBSD</><secondary>IPC configuration</></>
      </term>
____________________________________________________________________________-->
      <term><systemitem class="osname">OpenBSD</systemitem>
      <indexterm><primary>OpenBSD</primary><secondary>IPC 配置</secondary></indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        In <systemitem class="osname">OpenBSD</systemitem> 3.3 and later,
        IPC parameters can be adjusted using <command>sysctl</command>,
        for example:
<screen>
<prompt>#</prompt> <userinput>sysctl kern.seminfo.semmni=100</userinput>
</screen>
        To make these settings persist over reboots, modify
        <filename>/etc/sysctl.conf</filename>.
       </para>
____________________________________________________________________________-->
       <para>
       在<systemitem class="osname">OpenBSD</systemitem>3.3及以后版本，使用<command>sysctl</command>命令，IPC参数可以被自动调节，例如：
<screen>
<prompt>#</prompt> <userinput>sysctl kern.seminfo.semmni=100</userinput>
</screen>
       要使这些设置在重启后保持，请修改<filename>/etc/sysctl.conf</filename>。
       </para>

<!--==========================orignal english content==========================
       <para>
        You will usually want to
        increase <literal>kern.seminfo.semmni</literal>
        and <literal>kern.seminfo.semmns</literal>,
        as <systemitem class="osname">OpenBSD</systemitem>'s default settings
        for these are uncomfortably small.
       </para>
____________________________________________________________________________-->
       <para>
       作为<systemitem class="osname">OpenBSD</systemitem>的默认配置，你总是会想调大<literal>kern.seminfo.semmni</literal>和<literal>kern.seminfo.semmns</literal>的值，因为他们实在太小了。
       </para>

<!--==========================orignal english content==========================
       <para>
        In older <systemitem class="osname">OpenBSD</systemitem> versions,
        you will need to build a custom kernel to change the IPC parameters.
        Make sure that the options <varname>SYSVSHM</varname>
        and <varname>SYSVSEM</varname> are enabled, too.  (They are by
        default.)  The following shows an example of how to set the various
        parameters in the kernel configuration file:
<programlisting>
option        SYSVSHM
option        SHMMAXPGS=4096
option        SHMSEG=256

option        SYSVSEM
option        SEMMNI=256
option        SEMMNS=512
option        SEMMNU=256
</programlisting>
       </para>
____________________________________________________________________________-->
       <para>
       在较早的<systemitem class="osname">OpenBSD</systemitem> 版本中，你需要编译定制化内核来修改这些IPC参数。也要确保<varname>SYSVSHM</varname>和<varname>SYSVSEM</varname>选项为启用状态。(这两项默认都是启用状态。) 下面给出一些内核配置文件中如何设置这些参数的例子：
<programlisting>
option        SYSVSHM
option        SHMMAXPGS=4096
option        SHMSEG=256

option        SYSVSEM
option        SEMMNI=256
option        SEMMNS=512
option        SEMMNU=256
</programlisting>
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">HP-UX</>
      <indexterm><primary>HP-UX</><secondary>IPC configuration</></>
      </term>
____________________________________________________________________________-->
      <term><systemitem class="osname">HP-UX</systemitem>
      <indexterm><primary>HP-UX</primary><secondary>IPC 配置</secondary></indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The default settings tend to suffice for normal installations.
        On <productname>HP-UX</productname> 10, the factory default for
        <varname>SEMMNS</varname> is 128, which might be too low for larger
        database sites.
       </para>
____________________________________________________________________________-->
       <para>
        默认的设置可以满足正常的安装。在<productname>HP-UX</productname> 10 上，<varname>SEMMNS</varname>的出厂默认值是 128，这可能对大型数据库站点太低。
       </para>
<!--==========================orignal english content==========================
       <para>
        <acronym>IPC</acronym> parameters can be set in the <application>System
        Administration Manager</application> (<acronym>SAM</acronym>) under
        <menuchoice><guimenu>Kernel
        Configuration</guimenu><guimenuitem>Configurable Parameters</guimenuitem></menuchoice>. Choose
        <guibutton>Create A New Kernel</guibutton> when you're done.
       </para>
____________________________________________________________________________-->
       <para>
        <acronym>IPC</acronym>参数可以在<menuchoice><guimenu>Kernel Configuration</guimenu><guimenuitem>Configurable Parameters</guimenuitem></menuchoice>下的<application>System Administration Manager</application>（<acronym>SAM</acronym>）中被设置。当你完成时选择<guibutton>Create A New Kernel</guibutton>。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">Linux</>
      <indexterm><primary>Linux</><secondary>IPC configuration</></>
      </term>
____________________________________________________________________________-->
      <term><systemitem class="osname">Linux</systemitem>
      <indexterm><primary>Linux</primary><secondary>IPC 配置</secondary></indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The default maximum segment size is 32 MB, and the
        default maximum total size is 2097152
        pages.  A page is almost always 4096 bytes except in unusual
        kernel configurations with <quote>huge pages</quote>
        (use <literal>getconf PAGE_SIZE</literal> to verify).
       </para>
____________________________________________________________________________-->
       <para>
        默认的最大段尺寸是 32 MB，并且默认的最大总尺寸是 2097152 个页面。一个页面几乎总是 4096 字节，除了在使用少见<quote>huge pages</quote>的内核配置中（使用<literal>getconf PAGE_SIZE</literal>来验证）。
       </para>

<!--==========================orignal english content==========================
       <para>
        The shared memory size settings can be changed via the
        <command>sysctl</command> interface.  For example, to allow 16 GB:
<screen>
<prompt>$</prompt> <userinput>sysctl -w kernel.shmmax=17179869184</userinput>
<prompt>$</prompt> <userinput>sysctl -w kernel.shmall=4194304</userinput>
</screen>
        In addition these settings can be preserved between reboots in
        the file <filename>/etc/sysctl.conf</filename>.  Doing that is
        highly recommended.
       </para>
____________________________________________________________________________-->
       <para>
        共享内存尺寸设置可以通过<command>sysctl</command>接口来更改。例如，要允许 16 GB：
<screen>
<prompt>$</prompt> <userinput>sysctl -w kernel.shmmax=17179869184</userinput>
<prompt>$</prompt> <userinput>sysctl -w kernel.shmall=4194304</userinput>
</screen>
        另外在重启之间这些设置可以被保存在文件<filename>/etc/sysctl.conf</filename>中。我们强烈推荐这样做。
       </para>

<!--==========================orignal english content==========================
       <para>
        Ancient distributions might not have the <command>sysctl</command> program,
        but equivalent changes can be made by manipulating the
        <filename>/proc</filename> file system:
<screen>
<prompt>$</prompt> <userinput>echo 17179869184 &gt;/proc/sys/kernel/shmmax</userinput>
<prompt>$</prompt> <userinput>echo 4194304 &gt;/proc/sys/kernel/shmall</userinput>
</screen>
       </para>
____________________________________________________________________________-->
       <para>
        古老的发型可能没有<command>sysctl</command>程序，但是可以通过操纵<filename>/proc</filename>文件系统来得到等效的更改：
<screen>
<prompt>$</prompt> <userinput>echo 17179869184 &gt;/proc/sys/kernel/shmmax</userinput>
<prompt>$</prompt> <userinput>echo 4194304 &gt;/proc/sys/kernel/shmall</userinput>
</screen>
       </para>

<!--==========================orignal english content==========================
       <para>
        The remaining defaults are quite generously sized, and usually
        do not require changes.
       </para>
____________________________________________________________________________-->
       <para>
        剩下的默认值都被设置得很宽大，并且通常不需要更改。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">macOS</>
      <indexterm><primary>macOS</><secondary>IPC configuration</></>
      </term>
____________________________________________________________________________-->
      <term><systemitem class="osname">macOS</systemitem>
      <indexterm><primary>macOS</primary><secondary>IPC 配置</secondary></indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The recommended method for configuring shared memory in macOS
        is to create a file named <filename>/etc/sysctl.conf</filename>,
        containing variable assignments such as:
<programlisting>
kern.sysv.shmmax=4194304
kern.sysv.shmmin=1
kern.sysv.shmmni=32
kern.sysv.shmseg=8
kern.sysv.shmall=1024
</programlisting>
        Note that in some macOS versions,
        <emphasis>all five</emphasis> shared-memory parameters must be set in
        <filename>/etc/sysctl.conf</filename>, else the values will be ignored.
       </para>
____________________________________________________________________________-->
       <para>
        在 macOS 中配置共享内存的推荐方法是创建一个名为<filename>/etc/sysctl.conf</filename>的文件，其中包含这样的变量赋值：
<programlisting>
kern.sysv.shmmax=4194304
kern.sysv.shmmin=1
kern.sysv.shmmni=32
kern.sysv.shmseg=8
kern.sysv.shmall=1024
</programlisting>
        注意在某些 macOS 版本中，<emphasis>所有五个</emphasis>共享内存参数必须在<filename>/etc/sysctl.conf</filename>中设置，否则值将会被忽略。
       </para>

<!--==========================orignal english content==========================
       <para>
        Beware that recent releases of macOS ignore attempts to set
        <varname>SHMMAX</varname> to a value that isn't an exact multiple of 4096.
       </para>
____________________________________________________________________________-->
       <para>
        注意近期的 macOS 版本会忽略把<varname>SHMMAX</varname>设置成非 4096 倍数值的尝试。
       </para>

<!--==========================orignal english content==========================
       <para>
        <varname>SHMALL</varname> is measured in 4 kB pages on this platform.
       </para>
____________________________________________________________________________-->
       <para>
        在这个平台上，<varname>SHMALL</varname>以 4kB 的页面度量。
       </para>

<!--==========================orignal english content==========================
       <para>
        In older macOS versions, you will need to reboot to have changes in the
        shared memory parameters take effect.  As of 10.5 it is possible to
        change all but <varname>SHMMNI</varname> on the fly, using
        <application>sysctl</application>.  But it's still best to set up your preferred
        values via <filename>/etc/sysctl.conf</filename>, so that the values will be
        kept across reboots.
       </para>
____________________________________________________________________________-->
       <para>
        在更老的 macOS 版本中，你将需要重启来让共享内存参数的更改生效。到了 10.5，可以使用<application>sysctl</application>随时改变除了<varname>SHMMNI</varname>之外的所有参数。但是最好还是通过<filename>/etc/sysctl.conf</filename>来设置你喜欢的值，这样重启之后这些值还能被保持。
       </para>

<!--==========================orignal english content==========================
       <para>
        The file <filename>/etc/sysctl.conf</filename> is only honored in macOS
        10.3.9 and later.  If you are running a previous 10.3.x release,
        you must edit the file <filename>/etc/rc</filename>
        and change the values in the following commands:
<programlisting>
sysctl -w kern.sysv.shmmax
sysctl -w kern.sysv.shmmin
sysctl -w kern.sysv.shmmni
sysctl -w kern.sysv.shmseg
sysctl -w kern.sysv.shmall
</programlisting>
        Note that
        <filename>/etc/rc</filename> is usually overwritten by macOS system updates,
        so you should expect to have to redo these edits after each update.
       </para>
____________________________________________________________________________-->
       <para>
        只有在 macOS 10.3.9 及以后的版本中才遵循<filename>/etc/sysctl.conf</filename>文件。如果你正在使用 10.3.x 之前的发布，你必须编辑文件<filename>/etc/rc</filename>并且在下列命令中改变值：
<programlisting>
sysctl -w kern.sysv.shmmax
sysctl -w kern.sysv.shmmin
sysctl -w kern.sysv.shmmni
sysctl -w kern.sysv.shmseg
sysctl -w kern.sysv.shmall
</programlisting>
        注意<filename>/etc/rc</filename>通常会被 macOS 的系统更新所覆盖，因此你应该在每次更新之后重做这些编辑。
       </para>

<!--==========================orignal english content==========================
       <para>
        In macOS 10.2 and earlier, instead edit these commands in the file
        <filename>/System/Library/StartupItems/SystemTuning/SystemTuning</filename>.
       </para>
____________________________________________________________________________-->
       <para>
        在 macOS 10.2 及更早的版本中，应该在文件<filename>/System/Library/StartupItems/SystemTuning/SystemTuning</filename>中编辑这些命令。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">Solaris</systemitem> 2.6 to 2.9 (Solaris
      6 to Solaris 9)
      <indexterm><primary>Solaris</><secondary>IPC configuration</></>
      </term>
____________________________________________________________________________-->
      <term><systemitem class="osname">Solaris</systemitem> 2.6 至 2.9 (Solaris
      6 至 Solaris 9)
      <indexterm><primary>Solaris</primary><secondary>IPC 配置</secondary></indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The relevant settings can be changed in
        <filename>/etc/system</filename>, for example:
<programlisting>
set shmsys:shminfo_shmmax=0x2000000
set shmsys:shminfo_shmmin=1
set shmsys:shminfo_shmmni=256
set shmsys:shminfo_shmseg=256

set semsys:seminfo_semmap=256
set semsys:seminfo_semmni=512
set semsys:seminfo_semmns=512
set semsys:seminfo_semmsl=32
</programlisting>
        You need to reboot for the changes to take effect.  See also
        <ulink url="http://sunsite.uakom.sk/sunworldonline/swol-09-1997/swol-09-insidesolaris.html"></ulink>
        for information on shared memory under older versions of Solaris.
       </para>
____________________________________________________________________________-->
       <para>
        相似的设置可以在<filename>/etc/system</filename>中更改，例如：
<programlisting>
set shmsys:shminfo_shmmax=0x2000000
set shmsys:shminfo_shmmin=1
set shmsys:shminfo_shmmni=256
set shmsys:shminfo_shmseg=256

set semsys:seminfo_semmap=256
set semsys:seminfo_semmni=512
set semsys:seminfo_semmns=512
set semsys:seminfo_semmsl=32
</programlisting>
        你需要重启来让更改生效。关于更老版本的 Solaris 下的共享内存的信息请见<ulink url="http://sunsite.uakom.sk/sunworldonline/swol-09-1997/swol-09-insidesolaris.html"></ulink>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">Solaris</systemitem> 2.10 (Solaris
      10) and later</term>
____________________________________________________________________________-->
      <term><systemitem class="osname">Solaris</systemitem> 2.10 (Solaris
      10) 及以后</term>
<!--==========================orignal english content==========================
      <term><systemitem class="osname">OpenSolaris</></term>
____________________________________________________________________________-->
      <term><systemitem class="osname">OpenSolaris</systemitem></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        In Solaris 10 and later, and OpenSolaris, the default shared memory and
        semaphore settings are good enough for most
        <productname>PostgreSQL</productname> applications.  Solaris now defaults
        to a <varname>SHMMAX</varname> of one-quarter of system <acronym>RAM</acronym>.
        To further adjust this setting, use a project setting associated
        with the <literal>postgres</literal> user.  For example, run the
        following as <literal>root</literal>:
<programlisting>
projadd -c "PostgreSQL DB User" -K "project.max-shm-memory=(privileged,8GB,deny)" -U postgres -G postgres user.postgres
</programlisting>
       </para>
____________________________________________________________________________-->
       <para>
        在 Solaris 10 及以后的版本以及 OpenSolaris 中，默认的共享内存和信号量设置已经足以应付大部分<productname>PostgreSQL</productname>应用。Solaris 现在将<varname>SHMMAX</varname>的默认值设置为系统 <acronym>RAM</acronym>的四分之一。要进一步调整这个设置，使用与<literal>postgres</literal>用户有关的一个项目设置。例如，以<literal>root</literal>运行下列命令：
<programlisting>
projadd -c "PostgreSQL DB User" -K "project.max-shm-memory=(privileged,8GB,deny)" -U postgres -G postgres user.postgres
</programlisting>
       </para>

<!--==========================orignal english content==========================
       <para>
        This command adds the <literal>user.postgres</literal> project and
        sets the shared memory maximum for the <literal>postgres</literal>
        user to 8GB, and takes effect the next time that user logs
        in, or when you restart <productname>PostgreSQL</productname> (not reload).
        The above assumes that <productname>PostgreSQL</productname> is run by
        the <literal>postgres</literal> user in the <literal>postgres</literal>
        group.  No server reboot is required.
       </para>
____________________________________________________________________________-->
       <para>
        这个命令增加<literal>user.postgres</literal>项目并且将用于<literal>postgres</literal>用户的最大共享内存设置为 8GB，并且在下次用户登录进来时或重启<productname>PostgreSQL</productname>（不是重新载入）时生效。上述假定<productname>PostgreSQL</productname>是由<literal>postgres</literal>组中的<literal>postgres</literal>用户所运行。不需要重新启动服务器。
       </para>

<!--==========================orignal english content==========================
       <para>
        Other recommended kernel setting changes for database servers which will
        have a large number of connections are:
<programlisting>
project.max-shm-ids=(priv,32768,deny)
project.max-sem-ids=(priv,4096,deny)
project.max-msg-ids=(priv,4096,deny)
</programlisting>
       </para>
____________________________________________________________________________-->
       <para>
        对于将有巨大数量连接的数据库服务器，我们推荐的其他内核设置修改是：
<programlisting>
project.max-shm-ids=(priv,32768,deny)
project.max-sem-ids=(priv,4096,deny)
project.max-msg-ids=(priv,4096,deny)
</programlisting>
       </para>

<!--==========================orignal english content==========================
       <para>
        Additionally, if you are running <productname>PostgreSQL</productname>
        inside a zone, you may need to raise the zone resource usage
        limits as well.  See "Chapter2:  Projects and Tasks" in the
        <citetitle>System Administrator's Guide</citetitle> for more
        information on <literal>projects</literal> and <command>prctl</command>.
       </para>
____________________________________________________________________________-->
       <para>
        此外，如果你正在在一个区中运行<productname>PostgreSQL</productname>，你可能也需要提升该区的资源使用限制。更多关于<literal>projects</literal> 和<command>prctl</command>的信息请见<citetitle>System Administrator's Guide</citetitle>中的 "Chapter2:  Projects and Tasks"。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

  </sect2>

  <sect2 id="systemd-removeipc">
<!--==========================orignal english content==========================
   <title>systemd RemoveIPC</title>
____________________________________________________________________________-->
   <title>systemd RemoveIPC</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>systemd</primary>
    <secondary>RemoveIPC</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>systemd</primary>
    <secondary>RemoveIPC</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    If <productname>systemd</productname> is in use, some care must be taken
    that IPC resources (shared memory and semaphores) are not prematurely
    removed by the operating system.  This is especially of concern when
    installing PostgreSQL from source.  Users of distribution packages of
    PostgreSQL are less likely to be affected, as
    the <literal>postgres</literal> user is then normally created as a system
    user.
   </para>
____________________________________________________________________________-->
   <para>
    如果正在使用<productname>systemd</productname>，则必须注意IPC资源（共享内存和信号量）
	不会被操作系统过早删除。从源代码安装PostgreSQL时，这尤其值得关注。
	PostgreSQL发布包的用户不太可能受到影响，因为<literal>postgres</literal>用户通常是作为系统用户创建的。
   </para>

<!--==========================orignal english content==========================
   <para>
    The setting <literal>RemoveIPC</literal>
    in <filename>logind.conf</filename> controls whether IPC objects are
    removed when a user fully logs out.  System users are exempt.  This
    setting defaults to on in stock <productname>systemd</productname>, but
    some operating system distributions default it to off.
   </para>
____________________________________________________________________________-->
   <para>
    控制当用户完全退出时是否移除IPC对象。系统用户免除。
	此设置在死板的<productname>systemd</productname>中默认为on，
	但某些操作系统分配默认为关闭。
   </para>

<!--==========================orignal english content==========================
   <para>
    A typical observed effect when this setting is on is that the semaphore
    objects used by a PostgreSQL server are removed at apparently random
    times, leading to the server crashing with log messages like
<screen>
LOG: semctl(1234567890, 0, IPC_RMID, ...) failed: Invalid argument
</screen>
    Different types of IPC objects (shared memory vs. semaphores, System V
    vs. POSIX) are treated slightly differently
    by <productname>systemd</productname>, so one might observe that some IPC
    resources are not removed in the same way as others.  But it is not
    advisable to rely on these subtle differences.
   </para>
____________________________________________________________________________-->
   <para>
    当此设置打开时，典型的观察效果是PostgreSQL服务器使用的信号量对象在明显随机的时间被删除，
	从而导致服务器崩溃，并显示日志消息
<screen>
LOG: semctl(1234567890, 0, IPC_RMID, ...) failed: Invalid argument
</screen>
    不同类型的IPC对象（共享内存与信号量，System V与POSIX）在<productname>systemd</productname>
	中略有不同，因此可能会发现某些IPC资源不会像其他IPC资源一样被删除。
	但依靠这些微妙的差异是不可取的。
   </para>

<!--==========================orignal english content==========================
   <para>
    A <quote>user logging out</quote> might happen as part of a maintenance
    job or manually when an administrator logs in as
    the <literal>postgres</literal> user or something similar, so it is hard
    to prevent in general.
   </para>
____________________________________________________________________________-->
   <para>
    <quote>注销用户</quote>可能会作为维护工作的一部分发生，或者当管理员以
	<literal>postgres</literal>用户或类似名称登录时手动发生，所以通常难以防止。
   </para>

<!--==========================orignal english content==========================
   <para>
    What is a <quote>system user</quote> is determined
    at <productname>systemd</productname> compile time from
    the <symbol>SYS_UID_MAX</symbol> setting
    in <filename>/etc/login.defs</filename>.
   </para>
____________________________________________________________________________-->
   <para>
    什么是<quote>系统用户</quote>是由<filename>/etc/login.defs</filename>中的
	<symbol>SYS_UID_MAX</symbol>设置在<productname>systemd</productname>编译时确定的。
   </para>

<!--==========================orignal english content==========================
   <para>
    Packaging and deployment scripts should be careful to create
    the <literal>postgres</literal> user as a system user by
    using <literal>useradd -r</literal>, <literal>adduser -&minus;system</literal>,
    or equivalent.
   </para>
____________________________________________________________________________-->
   <para>
    打包和部署脚本应该小心，通过使用<literal>useradd -r</literal>、
	<literal>adduser --system</literal>或等价物来创建<literal>postgres</literal>用户作为系统用户。
   </para>

<!--==========================orignal english content==========================
   <para>
    Alternatively, if the user account was created incorrectly or cannot be
    changed, it is recommended to set
<programlisting>
RemoveIPC=no
</programlisting>
    in <filename>/etc/systemd/logind.conf</filename> or another appropriate
    configuration file.
   </para>
____________________________________________________________________________-->
   <para>
    或者，如果用户帐户创建不正确或无法更改，建议设置
<programlisting>
RemoveIPC=no
</programlisting>
    在<filename>/etc/systemd/logind.conf</filename>或其他适当的配置文件中。
   </para>
   <caution>
<!--==========================orignal english content==========================
    <para>
     At least one of these two things has to be ensured, or the PostgreSQL
     server will be very unreliable.
    </para>
____________________________________________________________________________-->
    <para>
     至少要确保这两件事中的一件，否则PostgreSQL服务器将非常不可靠。
    </para>
   </caution>

  </sect2>

  <sect2>
<!--==========================orignal english content==========================
   <title>Resource Limits</title>
____________________________________________________________________________-->
   <title>资源限制</title>

<!--==========================orignal english content==========================
   <para>
    Unix-like operating systems enforce various kinds of resource limits
    that might interfere with the operation of your
    <productname>PostgreSQL</productname> server. Of particular
    importance are limits on the number of processes per user, the
    number of open files per process, and the amount of memory available
    to each process. Each of these have a <quote>hard</quote> and a
    <quote>soft</quote> limit. The soft limit is what actually counts
    but it can be changed by the user up to the hard limit. The hard
    limit can only be changed by the root user. The system call
    <function>setrlimit</function> is responsible for setting these
    parameters. The shell's built-in command <command>ulimit</command>
    (Bourne shells) or <command>limit</command> (<application>csh</application>) is
    used to control the resource limits from the command line. On
    BSD-derived systems the file <filename>/etc/login.conf</filename>
    controls the various resource limits set during login. See the
    operating system documentation for details. The relevant
    parameters are <varname>maxproc</varname>,
    <varname>openfiles</varname>, and <varname>datasize</varname>. For
    example:
<programlisting>
default:\
...
        :datasize-cur=256M:\
        :maxproc-cur=256:\
        :openfiles-cur=256:\
...
</programlisting>
    (<literal>-cur</literal> is the soft limit.  Append
    <literal>-max</literal> to set the hard limit.)
   </para>
____________________________________________________________________________-->
   <para>
    Unix类操作系统强制了许多种资源限制，这些限制可能干扰你的<productname>PostgreSQL</productname>服务器的操作。尤其重要的是对每个用户的进程数目的限制、每个进程打开文件数目的限制以及每个进程可用的内存的限制。这些限制中每个都有一个<quote>硬</quote>限制和一个<quote>软</quote>限制。实际使用的是软限制，但用户可以自己修改成最大为硬限制的数目。而硬限制只能由root用户修改。系统调用<function>setrlimit</function>负责设置这些参数。 shell的内建命令<command>ulimit</command>（Bourne shells）或<command>limit</command>（<application>csh</application>）被用来从命令行控制资源限制。 在 BSD 衍生的系统上，<filename>/etc/login.conf</filename>文件控制在登录期间设置的各种资源限制。详见操作系统文档。相关的参数是<varname>maxproc</varname>、<varname>openfiles</varname>和<varname>datasize</varname>。例如：
<programlisting>
default:\
...
        :datasize-cur=256M:\
        :maxproc-cur=256:\
        :openfiles-cur=256:\
...
</programlisting>
    （<literal>-cur</literal>是软限制。增加<literal>-max</literal>可设置硬限制）。
   </para>

<!--==========================orignal english content==========================
   <para>
    Kernels can also have system-wide limits on some resources.
    <itemizedlist>
     <listitem>
      <para>
      On <productname>Linux</productname>
      <filename>/proc/sys/fs/file-max</filename> determines the
      maximum number of open files that the kernel will support.  It can
      be changed by writing a different number into the file or by
      adding an assignment in <filename>/etc/sysctl.conf</filename>.
      The maximum limit of files per process is fixed at the time the
      kernel is compiled; see
      <filename>/usr/src/linux/Documentation/proc.txt</filename> for
      more information.
      </para>
     </listitem>
    </itemizedlist>
   </para>
____________________________________________________________________________-->
   <para>
    内核也可以在某些资源上有系统范围的限制。
    <itemizedlist>
     <listitem>
      <para>
      在<productname>Linux</productname>上，<filename>/proc/sys/fs/file-max</filename>决定内核可以支持打开的最大文件数。你可以通过往该文件写入一个不同的数值修改此值， 或者通过在<filename>/etc/sysctl.conf</filename>中增加一个赋值来修改。 每个进程的最大打开文件数限制是在编译内核的时候固定的；更多信息请见<filename>/usr/src/linux/Documentation/proc.txt</filename>。
      </para>
     </listitem>
    </itemizedlist>
   </para>

<!--==========================orignal english content==========================
   <para>
    The <productname>PostgreSQL</productname> server uses one process
    per connection so you should provide for at least as many processes
    as allowed connections, in addition to what you need for the rest
    of your system.  This is usually not a problem but if you run
    several servers on one machine things might get tight.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>服务器为每个连接都使用一个进程， 所以你应该至少和允许的连接同样多的进程，再加上系统其它部分所需要的进程数目。 通常这个并不是什么问题，但如果你在一台机器上运行多个服务器，资源使用可能就会紧张。
   </para>

<!--==========================orignal english content==========================
   <para>
    The factory default limit on open files is often set to
    <quote>socially friendly</quote> values that allow many users to
    coexist on a machine without using an inappropriate fraction of
    the system resources.  If you run many servers on a machine this
    is perhaps what you want, but on dedicated servers you might want to
    raise this limit.
   </para>
____________________________________________________________________________-->
   <para>
    打开文件的出厂默认限制通常设置为<quote>socially friendly</quote>的值， 它允许许多用户在一台机器上共存，而不会导致不成比例的系统资源使用。 如果你在一台机器上运行许多服务器，这也许就是你想要的，但是在专门的服务器上， 你可能需要提高这个限制。
   </para>

<!--==========================orignal english content==========================
   <para>
    On the other side of the coin, some systems allow individual
    processes to open large numbers of files; if more than a few
    processes do so then the system-wide limit can easily be exceeded.
    If you find this happening, and you do not want to alter the
    system-wide limit, you can set <productname>PostgreSQL</productname>'s <xref
    linkend="guc-max-files-per-process"/> configuration parameter to
    limit the consumption of open files.
   </para>
____________________________________________________________________________-->
   <para>
    在另一方面，一些系统允许独立的进程打开非常多的文件；如果不止几个进程这么干，那系统范围的限制就很容易被超过。如果你发现这样的现像， 并且不想修改系统范围的限制，你就可以设置<productname>PostgreSQL</productname>的 <xref linkend="guc-max-files-per-process"/>配置参数来限制打开文件数的消耗。
   </para>
  </sect2>

  <sect2 id="linux-memory-overcommit">
<!--==========================orignal english content==========================
   <title>Linux Memory Overcommit</title>
____________________________________________________________________________-->
   <title>Linux 内存过量使用</title>
<!--==========================orignal english content==========================
   <indexterm>
    <primary>memory overcommit</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>memory overcommit</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>OOM</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>OOM</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>overcommit</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>overcommit</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    In Linux 2.4 and later, the default virtual memory behavior is not
    optimal for <productname>PostgreSQL</productname>. Because of the
    way that the kernel implements memory overcommit, the kernel might
    terminate the <productname>PostgreSQL</productname> postmaster (the
    master server process) if the memory demands of either
    <productname>PostgreSQL</productname> or another process cause the
    system to run out of virtual memory.
   </para>
____________________________________________________________________________-->
   <para>
    在 Linux 2.4 及其后的版本中，默认的虚拟内存行为对<productname>PostgreSQL</productname>不是最优的。由于内核实现内存过量使用的方法，如果<productname>PostgreSQL</productname>或其它进程的内存要求导致系统用光虚拟内存，那么内核可能会终止<productname>PostgreSQL</productname>的 postmaster 进程（主服务器进程）。
   </para>

<!--==========================orignal english content==========================
   <para>
    If this happens, you will see a kernel message that looks like
    this (consult your system documentation and configuration on where
    to look for such a message):
<programlisting>
Out of Memory: Killed process 12345 (postgres).
</programlisting>
    This indicates that the <filename>postgres</filename> process
    has been terminated due to memory pressure.
    Although existing database connections will continue to function
    normally, no new connections will be accepted.  To recover,
    <productname>PostgreSQL</productname> will need to be restarted.
   </para>
____________________________________________________________________________-->
   <para>
    如果发生了这样的事情，你会看到像下面这样的内核消息（参考你的系统文档和配置，看看在哪里能看到这样的消息）：
<programlisting>
Out of Memory: Killed process 12345 (postgres).
</programlisting>
    这表明<filename>postgres</filename>进程因为内存压力而被终止了。尽管现有的数据库连接将继续正常运转，但是新的连接将无法被接受。要想恢复，<productname>PostgreSQL</productname>应该被重启。
   </para>

<!--==========================orignal english content==========================
   <para>
    One way to avoid this problem is to run
    <productname>PostgreSQL</productname> on a machine where you can
    be sure that other processes will not run the machine out of
    memory.  If memory is tight, increasing the swap space of the
    operating system can help avoid the problem, because the
    out-of-memory (OOM) killer is invoked only when physical memory and
    swap space are exhausted.
   </para>
____________________________________________________________________________-->
   <para>
    一种避免这个问题的方法是在一台你确信其它进程不会耗尽内存的机器上运行<productname>PostgreSQL</productname>。 如果内存资源紧张，增加操作系统的交换空间可以帮助避免这个问题，因为内存不足（OOM）杀手（即终止进程这种行为）只有当物理内存和交换空间都被用尽时才会被调用。
   </para>

<!--==========================orignal english content==========================
   <para>
    If <productname>PostgreSQL</productname> itself is the cause of the
    system running out of memory, you can avoid the problem by changing
    your configuration.  In some cases, it may help to lower memory-related
    configuration parameters, particularly
    <link linkend="guc-shared-buffers"><varname>shared_buffers</varname></link>
    and <link linkend="guc-work-mem"><varname>work_mem</varname></link>.  In
    other cases, the problem may be caused by allowing too many connections
    to the database server itself.  In many cases, it may be better to reduce
    <link linkend="guc-max-connections"><varname>max_connections</varname></link>
    and instead make use of external connection-pooling software.
   </para>
____________________________________________________________________________-->
   <para>
    如果<productname>PostgreSQL</productname>本身是导致系统内存耗尽的原因，你可以通过改变你的配置来避免该问题。在某些情况中，降低内存相关的配置参数可能有所帮助，特别是<link linkend="guc-shared-buffers"><varname>shared_buffers</varname></link>
和<link linkend="guc-work-mem"><varname>work_mem</varname></link>两个参数。在其他情况中，允许太多连接到数据库服务器本身也可能导致该问题。在很多情况下，最好减小<link linkend="guc-max-connections"><varname>max_connections</varname></link>并且转而利用外部连接池软件。
   </para>

<!--==========================orignal english content==========================
   <para>
    On Linux 2.6 and later, it is possible to modify the
    kernel's behavior so that it will not <quote>overcommit</quote> memory.
    Although this setting will not prevent the <ulink
    url="https://lwn.net/Articles/104179/">OOM killer</ulink> from being invoked
    altogether, it will lower the chances significantly and will therefore
    lead to more robust system behavior.  This is done by selecting strict
    overcommit mode via <command>sysctl</command>:
<programlisting>
sysctl -w vm.overcommit_memory=2
</programlisting>
    or placing an equivalent entry in <filename>/etc/sysctl.conf</filename>.
    You might also wish to modify the related setting
    <varname>vm.overcommit_ratio</varname>.  For details see the kernel documentation
    file <ulink url="https://www.kernel.org/doc/Documentation/vm/overcommit-accounting"></ulink>.
   </para>
____________________________________________________________________________-->
   <para>
    在 Linux 2.6 及其后的版本中，可以修改内核的行为，这样它将不会<quote>过量使用</quote>内存。尽管此设置不会阻止<ulink url="https://lwn.net/Articles/104179/">OOM 杀手</ulink>被调用，但它可以显著地降低其可能性并且将因此得到更鲁棒的系统行为。这可以通过用<command>sysctl</command>选择严格的过量使用模式来实现：
<programlisting>
sysctl -w vm.overcommit_memory=2
</programlisting>
    或者在<filename>/etc/sysctl.conf</filename>中放置一个等效的项。你可能还希望修改相关的设置<varname>vm.overcommit_ratio</varname>。 详细信息请参阅内核文档的<ulink url="https://www.kernel.org/doc/Documentation/vm/overcommit-accounting"></ulink>文件。
   </para>

<!--==========================orignal english content==========================
   <para>
    Another approach, which can be used with or without altering
    <varname>vm.overcommit_memory</varname>, is to set the process-specific
    <firstterm>OOM score adjustment</firstterm> value for the postmaster process to
    <literal>-1000</literal>, thereby guaranteeing it will not be targeted by the OOM
    killer.  The simplest way to do this is to execute
<programlisting>
echo -1000 > /proc/self/oom_score_adj
</programlisting>
    in the postmaster's startup script just before invoking the postmaster.
    Note that this action must be done as root, or it will have no effect;
    so a root-owned startup script is the easiest place to do it.  If you
    do this, you should also set these environment variables in the startup
    script before invoking the postmaster:
<programlisting>
export PG_OOM_ADJUST_FILE=/proc/self/oom_score_adj
export PG_OOM_ADJUST_VALUE=0
</programlisting>
    These settings will cause postmaster child processes to run with the
    normal OOM score adjustment of zero, so that the OOM killer can still
    target them at need.  You could use some other value for
    <envar>PG_OOM_ADJUST_VALUE</envar> if you want the child processes to run
    with some other OOM score adjustment.  (<envar>PG_OOM_ADJUST_VALUE</envar>
    can also be omitted, in which case it defaults to zero.)  If you do not
    set <envar>PG_OOM_ADJUST_FILE</envar>, the child processes will run with the
    same OOM score adjustment as the postmaster, which is unwise since the
    whole point is to ensure that the postmaster has a preferential setting.
   </para>
____________________________________________________________________________-->
   <para>
    另一种方法，可以在改变或不改变<varname>vm.overcommit_memory</varname>的情况下使用。它将 postmaster 进程的进程相关的<firstterm>OOM score adjustment</firstterm>值设置为<literal>-1000</literal>，从而保证它不会成为 OOM 杀手的目标。 这样做最简单的方法是在 postmaster 的启动脚本中执行
<programlisting>
echo -1000 > /proc/self/oom_score_adj
</programlisting>
    并且要在调用 postmaster 之前执行。请注意这个动作必须以 root 完成，否则它将不会产生效果。所以一个被 root 拥有的启动脚本是放置这个动作最容易的地方。如果这样做，你还应该在调用 postmaster 之前在启动脚本中设置这些环境变量：
<programlisting>
export PG_OOM_ADJUST_FILE=/proc/self/oom_score_adj
export PG_OOM_ADJUST_VALUE=0
</programlisting>
    这些设置将导致 postmaster 子进程使用普通的值为零的 OOM score adjustment 运行，所以 OOM 杀手仍能在需要时把它们作为目标。如果你想要子进程用某些其他 OOM score adjustment 值运行，可以为<envar>PG_OOM_ADJUST_VALUE</envar>使用其他的值（<envar>PG_OOM_ADJUST_VALUE</envar>也能被省略，那时它会被默认为零）。如果你没有设置<envar>PG_OOM_ADJUST_FILE</envar>，子进程将使用和 postmaster 相同的 OOM score adjustment 运行，这是不明智的，因为重点是确保 postmaster 具有优先的设置。
   </para>

<!--==========================orignal english content==========================
   <para>
    Older Linux kernels do not offer <filename>/proc/self/oom_score_adj</filename>,
    but may have a previous version of the same functionality called
    <filename>/proc/self/oom_adj</filename>.  This works the same except the disable
    value is <literal>-17</literal> not <literal>-1000</literal>.
   </para>
____________________________________________________________________________-->
   <para>
    更老的 Linux 内核不提供<filename>/proc/self/oom_score_adj</filename>，但是可能有一个具有相同功能的早期版本，它被称为<filename>/proc/self/oom_adj</filename>。这种方式工作起来完全相同，除了禁用值是<literal>-17</literal>而不是<literal>-1000</literal>。
   </para>

   <note>
<!--==========================orignal english content==========================
   <para>
    Some vendors' Linux 2.4 kernels are reported to have early versions
    of the 2.6 overcommit <command>sysctl</command> parameter.  However, setting
    <literal>vm.overcommit_memory</literal> to 2
    on a 2.4 kernel that does not have the relevant code will make
    things worse, not better.  It is recommended that you inspect
    the actual kernel source code (see the function
    <function>vm_enough_memory</function> in the file <filename>mm/mmap.c</filename>)
    to verify what is supported in your kernel before you try this in a 2.4
    installation.  The presence of the <filename>overcommit-accounting</filename>
    documentation file should <emphasis>not</emphasis> be taken as evidence that the
    feature is there.  If in any doubt, consult a kernel expert or your
    kernel vendor.
   </para>
____________________________________________________________________________-->
   <para>
    有些厂商的 Linux 2.4 内核被报告有着 2.6 过量使用<command>sysctl</command>参数的早期版本。不过，在没有相关代码的 2.4 内核里设置<literal>vm.overcommit_memory</literal>为 2 将会让事情更糟。我们推荐你检查一下实际的内核源代码（见文件<filename>mm/mmap.c</filename>中的<function>vm_enough_memory</function>函数），验证一下这个是在你的内核中是被支持的， 然后再在 2.4 安装中使用它。文档文件<filename>overcommit-accounting</filename>的存在<emphasis>不</emphasis>能当作是这个特性存在的证明。如果有疑问，请咨询一位内核专家或你的内核厂商。
   </para>
   </note>
  </sect2>

  <sect2 id="linux-huge-pages">
<!--==========================orignal english content==========================
   <title>Linux Huge Pages</title>
____________________________________________________________________________-->
   <title>Linux 大页面</title>

<!--==========================orignal english content==========================
   <para>
    Using huge pages reduces overhead when using large contiguous chunks of
    memory, as <productname>PostgreSQL</productname> does, particularly when
    using large values of <xref linkend="guc-shared-buffers"/>.  To use this
    feature in <productname>PostgreSQL</productname> you need a kernel
    with <varname>CONFIG_HUGETLBFS=y</varname> and
    <varname>CONFIG_HUGETLB_PAGE=y</varname>. You will also have to adjust
    the kernel setting <varname>vm.nr_hugepages</varname>. To estimate the
    number of huge pages needed, start <productname>PostgreSQL</productname>
    without huge pages enabled and check the
    postmaster's anonymous shared memory segment size, as well as the system's
    huge page size, using the <filename>/proc</filename> file system.  This might
    look like:
<programlisting>
$ <userinput>head -1 $PGDATA/postmaster.pid</userinput>
4170
$ <userinput>pmap 4170 | awk '/rw-s/ &amp;&amp; /zero/ {print $2}'</userinput>
6490428K
$ <userinput>grep ^Hugepagesize /proc/meminfo</userinput>
Hugepagesize:       2048 kB
</programlisting>
     <literal>6490428</literal> / <literal>2048</literal> gives approximately
     <literal>3169.154</literal>, so in this example we need at
     least <literal>3170</literal> huge pages, which we can set with:
<programlisting>
$ <userinput>sysctl -w vm.nr_hugepages=3170</userinput>
</programlisting>
    A larger setting would be appropriate if other programs on the machine
    also need huge pages.  Don't forget to add this setting
    to <filename>/etc/sysctl.conf</filename> so that it will be reapplied
    after reboots.
   </para>
____________________________________________________________________________-->
   <para>
    当<productname>PostgreSQL</productname>使用大量连续的内存块时，使用大页面会减少开销，
	特别是在使用大<xref linkend="guc-shared-buffers"/>时。
	要在<productname>PostgreSQL</productname>中使用此特性，您需要一个包含
	<varname>CONFIG_HUGETLBFS=y</varname>和<varname>CONFIG_HUGETLB_PAGE=y</varname>的内核。
	您还必须调整内核设置<varname>vm.nr_hugepages</varname>。要估计所需的巨大页面的数量，
	请启动<productname>PostgreSQL</productname>，而不启用巨大页面，并使用
	<filename>/proc</filename>文件系统来检查postmaster的匿名共享内存段大小以及系统的巨大页面大小。
	这可能看起来像：
<programlisting>
$ <userinput>head -1 $PGDATA/postmaster.pid</userinput>
4170
$ <userinput>pmap 4170 | awk '/rw-s/ &amp;&amp; /zero/ {print $2}'</userinput>
6490428K
$ <userinput>grep ^Hugepagesize /proc/meminfo</userinput>
Hugepagesize:       2048 kB
</programlisting>
     <literal>6490428</literal> / <literal>2048</literal>
     大约是<literal>3169.154</literal>，因此在这个示例中你至少需要
     <literal>3170</literal>个大页面，我们可以设置：
<programlisting>
$ <userinput>sysctl -w vm.nr_hugepages=3170</userinput>
</programlisting>
    如果机器上的其他程序也需要大页面，则更大的设置将是合适的。
	不要忘记将此设置添加到<filename>/etc/sysctl.conf</filename>，
	以便在重启后重新应用它。
   </para>

<!--==========================orignal english content==========================
   <para>
    Sometimes the kernel is not able to allocate the desired number of huge
    pages immediately, so it might be necessary to repeat the command or to
    reboot.  (Immediately after a reboot, most of the machine's memory
    should be available to convert into huge pages.)  To verify the huge
    page allocation situation, use:
<programlisting>
$ <userinput>grep Huge /proc/meminfo</userinput>
</programlisting>
   </para>
____________________________________________________________________________-->
   <para>
	有时候内核会无法立即分配想要数量的大页面，所以可能有必要重复该命令或者重新启动。
	（在重新启动之后，应立即将大部分机器的内存转换为大页面。）
	要验证巨大的页面分配情况，请使用：
<programlisting>
$ <userinput>grep Huge /proc/meminfo</userinput>
</programlisting>
   </para>

<!--==========================orignal english content==========================
   <para>
    It may also be necessary to give the database server's operating system
    user permission to use huge pages by setting
    <varname>vm.hugetlb_shm_group</varname> via <application>sysctl</application>, and/or
    give permission to lock memory with <command>ulimit -l</command>.
   </para>
____________________________________________________________________________-->
   <para>
    可能还需要赋予数据库服务器的操作系统用户权限，让他能通过<application>sysctl</application>
	设置<varname>vm.hugetlb_shm_group</varname>以使用大页面，
	和/或赋予使用<command>ulimit -l</command>锁定内存的权限。
   </para>

<!--==========================orignal english content==========================
   <para>
    The default behavior for huge pages in
    <productname>PostgreSQL</productname> is to use them when possible and
    to fall back to normal pages when failing. To enforce the use of huge
    pages, you can set <xref linkend="guc-huge-pages"/>
    to <literal>on</literal> in <filename>postgresql.conf</filename>.
    Note that with this setting <productname>PostgreSQL</productname> will fail to
    start if not enough huge pages are available.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>中大页面的默认行为是
    尽可能使用它们并且在失败时转回到正常页面。要强制使用大页面，你可
    以在<filename>postgresql.conf</filename>中把<xref linkend="guc-huge-pages"/>设置成
    <literal>on</literal>。注意此设置下如果没有足够的大页面可用，
    <productname>PostgreSQL</productname>将会启动失败。
   </para>

<!--==========================orignal english content==========================
   <para>
    For a detailed description of the <productname>Linux</productname> huge
    pages feature have a look
    at <ulink url="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt"></ulink>.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>Linux</productname>大页面特性的详细描述可见<ulink url="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt"></ulink>.
   </para>

  </sect2>
 </sect1>


 <sect1 id="server-shutdown">
<!--==========================orignal english content==========================
  <title>Shutting Down the Server</title>
____________________________________________________________________________-->
  <title>关闭服务器</title>

<!--==========================orignal english content==========================
  <indexterm zone="server-shutdown">
   <primary>shutdown</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="server-shutdown">
   <primary>关闭</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   There are several ways to shut down the database server. You control
   the type of shutdown by sending different signals to the master
   <command>postgres</command> process.

   <variablelist>
    <varlistentry>
     <term><systemitem>SIGTERM</systemitem><indexterm><primary>SIGTERM</primary></indexterm></term>
     <listitem>
      <para>
       This is the <firstterm>Smart Shutdown</firstterm> mode.
       After receiving <systemitem>SIGTERM</systemitem>, the server
       disallows new connections, but lets existing sessions end their
       work normally. It shuts down only after all of the sessions terminate.
       If the server is in online backup mode, it additionally waits
       until online backup mode is no longer active.  While backup mode is
       active, new connections will still be allowed, but only to superusers
       (this exception allows a superuser to connect to terminate
       online backup mode).  If the server is in recovery when a smart
       shutdown is requested, recovery and streaming replication will be
       stopped only after all regular sessions have terminated.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIGINT</systemitem><indexterm><primary>SIGINT</primary></indexterm></term>
     <listitem>
      <para>
       This is the <firstterm>Fast Shutdown</firstterm> mode.
       The server disallows new connections and sends all existing
       server processes <systemitem>SIGTERM</systemitem>, which will cause them
       to abort their current transactions and exit promptly. It then
       waits for all server processes to exit and finally shuts down.
       If the server is in online backup mode, backup mode will be
       terminated, rendering the backup useless.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIGQUIT</systemitem><indexterm><primary>SIGQUIT</primary></indexterm></term>
     <listitem>
      <para>
      This is the <firstterm>Immediate Shutdown</firstterm> mode.
      The server will send <systemitem>SIGQUIT</systemitem> to all child
      processes and wait for them to terminate.  If any do not terminate
      within 5 seconds, they will be sent <systemitem>SIGKILL</systemitem>.
      The master server process exits as soon as all child processes have
      exited, without doing normal database shutdown processing.
      This will lead to recovery (by
      replaying the WAL log) upon next start-up. This is recommended
      only in emergencies.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
____________________________________________________________________________-->
  <para>
   有几种关闭数据库服务器的方法。通过给<command>postgres</command>进程发送不同的信号，你就可以控制关闭类型。

   <variablelist>
    <varlistentry>
     <term><systemitem>SIGTERM</systemitem><indexterm><primary>SIGTERM</primary></indexterm></term>
     <listitem>
      <para>
       这是<firstterm>智能关闭</firstterm>模式。在接收<systemitem>SIGTERM</systemitem>后， 服务器将不允许新连接，但是会让现有的会话正常结束它们的工作。仅当所有的会话终止后它才关闭。 如果服务器处在线备份模式，它将等待直到在线备份模式不再被激活。当在线备份模式被激活时， 仍然允许新的连接，但是只能是超级用户的连接（这一例外允许超级用户连接来终止在线备份模式）。 如果服务器在恢复时请求智能关闭，恢复和流复制只有在所有正常会话都终止后才停止。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIGINT</systemitem><indexterm><primary>SIGINT</primary></indexterm></term>
     <listitem>
      <para>
       这是<firstterm>快速关闭</firstterm>模式。服务器不再允许新的连接，并向所有现有服务器进程发送<systemitem>SIGTERM</systemitem>，让它们中断当前事务并立刻退出。然后服务器等待所有服务器进程退出并最终关闭。 如果服务处于在线备份模式，备份模式将被终止并致使备份无用。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><systemitem>SIGQUIT</systemitem><indexterm><primary>SIGQUIT</primary></indexterm></term>
     <listitem>
      <para>
      这是<firstterm>立即关闭</firstterm>模式。服务器将给所有子进程发送
      <systemitem>SIGQUIT</systemitem>并且等待它们终止。如果有任何进程没有在 5 秒内终止，它们将被发送
      <systemitem>SIGKILL</systemitem>。主服务器进程将在所有子进程退出之后立刻退出，而无需做普通的数据库关闭处理。这将导致在下一次启动时（通过重放 WAL 日志）恢复。只在紧急
      时才推荐这种方式。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

<!--==========================orignal english content==========================
  <para>
   The <xref linkend="app-pg-ctl"/> program provides a convenient
   interface for sending these signals to shut down the server.
   Alternatively, you can send the signal directly using <command>kill</command>
   on non-Windows systems.
   The <acronym>PID</acronym> of the <command>postgres</command> process can be
   found using the <command>ps</command> program, or from the file
   <filename>postmaster.pid</filename> in the data directory. For
   example, to do a fast shutdown:
<screen>
$ <userinput>kill -INT `head -1 /usr/local/pgsql/data/postmaster.pid`</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   <xref linkend="app-pg-ctl"/>程序提供了一个发送这些信号关闭服务器的方便的接口。 另外，你在非 Windows 系统上可以用<command>kill</command>直接发送这些信号。可以用<command>ps</command>程序或者从数据目录的<filename>postmaster.pid</filename>文件中找到<command>postgres</command>进程的<acronym>PID</acronym>。例如，要做一次快速关闭：
<screen>
$ <userinput>kill -INT `head -1 /usr/local/pgsql/data/postmaster.pid`</userinput>
</screen>
  </para>

  <important>
<!--==========================orignal english content==========================
   <para>
    It is best not to use <systemitem>SIGKILL</systemitem> to shut down
    the server.  Doing so will prevent the server from releasing
    shared memory and semaphores, which might then have to be done
    manually before a new server can be started.  Furthermore,
    <systemitem>SIGKILL</systemitem> kills the <command>postgres</command>
    process without letting it relay the signal to its subprocesses,
    so it will be necessary to kill the individual subprocesses by hand as
    well.
   </para>
____________________________________________________________________________-->
   <para>
    最好不要使用<systemitem>SIGKILL</systemitem>关闭服务器。 这样做将会阻止服务器释放共享内存和信号量，那么在开始一个新的服务器之前，可能需要手动完成这些释放。 此外，使用<systemitem>SIGKILL</systemitem>杀掉<command>postgres</command>进程时，<command>postgres</command>不会有机会将信号传播到它的子进程，所以也必须手工杀掉单个的子进程。
   </para>
  </important>

<!--==========================orignal english content==========================
  <para>
   To terminate an individual session while allowing other sessions to
   continue, use <function>pg_terminate_backend()</function> (see <xref
   linkend="functions-admin-signal-table"/>) or send a
   <systemitem>SIGTERM</systemitem> signal to the child process associated with
   the session.
  </para>
____________________________________________________________________________-->
  <para>
   要终止单个会话同时允许其他会话继续，使用<function>pg_terminate_backend()</function>（参阅<xref linkend="functions-admin-signal-table"/>） 或发送<systemitem>SIGTERM</systemitem>信号到该会话相关的子进程。
  </para>
 </sect1>

 <sect1 id="upgrading">
<!--==========================orignal english content==========================
  <title>Upgrading a <productname>PostgreSQL</productname> Cluster</title>
____________________________________________________________________________-->
  <title>升级一个<productname>PostgreSQL</productname>集簇</title>

<!--==========================orignal english content==========================
  <indexterm zone="upgrading">
   <primary>upgrading</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="upgrading">
   <primary>upgrading</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm zone="upgrading">
   <primary>version</primary>
   <secondary>compatibility</secondary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="upgrading">
   <primary>version</primary>
   <secondary>compatibility</secondary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   This section discusses how to upgrade your database data from one
   <productname>PostgreSQL</productname> release to a newer one.
  </para>
____________________________________________________________________________-->
  <para>
   本节讨论如何把你的数据库数据从一个<productname>PostgreSQL</productname>发行升级到一个更新的发行。
  </para>
<!--==========================orignal english content==========================
  <para>
   Current <productname>PostgreSQL</productname> version numbers consist of a
   major and a minor version number.  For example, in the version number 10.1,
   the 10 is the major version number and the 1 is the minor version number,
   meaning this would be the first minor release of the major release 10.  For
   releases before <productname>PostgreSQL</productname> version 10.0, version
   numbers consist of three numbers, for example, 9.5.3.  In those cases, the
   major version consists of the first two digit groups of the version number,
   e.g., 9.5, and the minor version is the third number, e.g., 3, meaning this
   would be the third minor release of the major release 9.5.
  </para>
____________________________________________________________________________-->
  <para>
   当前<productname>PostgreSQL</productname>版本号由主要版本号和次要版本号组成。
   例如，在版本号10.1中，10是主要版本号，1是次要版本号，这意味着这将是主版本10的第一个次要版本。
   对于<productname>PostgreSQL</productname>版本10.0之前的版本，版本号由三个数字组成，例如9.5.3。
   在这些情况下，主要版本由版本号的前两个数字组（例如9.5）组成，次要版本是第三个数字，
   例如3，这意味着这将是主要版本9.5的第三次要版本。
  </para>
<!--==========================orignal english content==========================
  <para>
   Minor releases never change the internal storage format and are always
   compatible with earlier and later minor releases of the same major version
   number.  For example, version 10.1 is compatible with version 10.0 and
   version 10.6.  Similarly, for example, 9.5.3 is compatible with 9.5.0,
   9.5.1, and 9.5.6.  To update between compatible versions, you simply
   replace the executables while the server is down and restart the server.
   The data directory remains unchanged &mdash; minor upgrades are that
   simple.
  </para>
____________________________________________________________________________-->
  <para>
   次要发行从来不改变内部存储格式并且总是向前并向后兼容同一主版本号中的次要发行。
   例如版本10.1与版本10.0和版本10.6兼容。类似的，例如9.5.3与9.5.0、9.5.1和9.5.6兼容。
   要在兼容的版本间升级，你只需要简单地在服务器关闭时替换可执行文件并重启服务器。
   数据目录则保持不变 &mdash; 次要升级就这么简单。
  </para>

<!--==========================orignal english content==========================
  <para>
   For <emphasis>major</emphasis> releases of <productname>PostgreSQL</productname>, the
   internal data storage format is subject to change, thus complicating
   upgrades.  The traditional method for moving data to a new major version
   is to dump and reload the database, though this can be slow.  A
   faster method is <xref linkend="pgupgrade"/>.  Replication methods are
   also available, as discussed below.
  </para>
____________________________________________________________________________-->
  <para>
   对于<productname>PostgreSQL</productname>的<emphasis>主</emphasis>发行，
   内部数据存储格式常被改变，这使升级复杂化。传统的把数据移动到
   新主版本的方法是先转储然后重新载入到数据库，不过这可能会很慢。
   一种更快的方式是<xref linkend="pgupgrade"/>。如下文所讨论的，
   复制方法也能被用于升级。
  </para>

<!--==========================orignal english content==========================
  <para>
   New major versions also typically introduce some user-visible
   incompatibilities, so application programming changes might be required.
   All user-visible changes are listed in the release notes (<xref
   linkend="release"/>);  pay particular attention to the section
   labeled "Migration".  If you are upgrading across several major
   versions, be sure to read the release notes for each intervening
   version.
  </para>
____________________________________________________________________________-->
  <para>
   新的主版本也通常会引入一些用户可见的不兼容性，因此可能需要应用程序编程上的改变。所有用户可见的更改都被列在发行注记（<xref linkend="release"/>）中，请特别注意标有 "Migration" 的小节。如果你正在跨越几个主版本升级，一定要阅读每个中间版本的发行注记。
  </para>

<!--==========================orignal english content==========================
  <para>
   Cautious users will want to test their client applications on the new
   version before switching over fully; therefore, it's often a good idea to
   set up concurrent installations of old and new versions.  When
   testing a <productname>PostgreSQL</productname> major upgrade, consider the
   following categories of possible changes:
  </para>
____________________________________________________________________________-->
  <para>
   小心的用户在完全切换过去之前将希望在新版本上测试他们的客户端应用。因此，建立一个新旧版本的并存安装通常是一个好主意。在测试一个<productname>PostgreSQL</productname>主要升级时，考虑下列可能的改变类别：
  </para>

  <variablelist>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>Administration</term>
____________________________________________________________________________-->
    <term>管理</term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The capabilities available for administrators to monitor and control
      the server often change and improve in each major release.
     </para>
____________________________________________________________________________-->
     <para>
      用于管理员监控和控制服务器的功能在每一个主发行中经常会改变和增加。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>SQL</term>
____________________________________________________________________________-->
    <term>SQL</term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Typically this includes new SQL command capabilities and not changes
      in behavior, unless specifically mentioned in the release notes.
     </para>
____________________________________________________________________________-->
     <para>
      通常这包括新的 SQL 命令功能并且在行为上没有更改，除非在发行注记中有特别提到。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>Library API</term>
____________________________________________________________________________-->
    <term>库 API</term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Typically libraries like <application>libpq</application> only add new
      functionality, again unless mentioned in the release notes.
     </para>
____________________________________________________________________________-->
     <para>
      通常<application>libpq</application>等库值增加新功能，除非在发行注记中有特别提到。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>System Catalogs</term>
____________________________________________________________________________-->
    <term>系统目录</term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      System catalog changes usually only affect database management tools.
     </para>
____________________________________________________________________________-->
     <para>
      系统目录改变通常只影响数据库管理工具。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>Server C-language API</term>
____________________________________________________________________________-->
    <term>服务器 C-语言 API</term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      This involves changes in the backend function API, which is written
      in the C programming language.  Such changes affect code that
      references backend functions deep inside the server.
     </para>
____________________________________________________________________________-->
     <para>
      这涉及到后端函数 API 中的改变，它使用 C 编程语言编写。这些改变影响引用服务器内部后端函数的代码。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

  <sect2 id="upgrading-via-pgdumpall">
<!--==========================orignal english content==========================
   <title>Upgrading Data via <application>pg_dumpall</application></title>
____________________________________________________________________________-->
   <title>通过<application>pg_dumpall</application>升级数据</title>

<!--==========================orignal english content==========================
   <para>
    One upgrade method is to dump data from one major version of
    <productname>PostgreSQL</productname> and reload it in another &mdash;  to do
    this, you must use a <emphasis>logical</emphasis> backup tool like
    <application>pg_dumpall</application>; file system
    level backup methods will not work. (There are checks in place that prevent
    you from using a data directory with an incompatible version of
    <productname>PostgreSQL</productname>, so no great harm can be done by
    trying to start the wrong server version on a data directory.)
   </para>
____________________________________________________________________________-->
   <para>
    一种升级方法是从<productname>PostgreSQL</productname>的一个主版本转储数据并将它重新载入到另一个主版本中 &mdash; 要这样做，你必须使用<application>pg_dumpall</application>这样的<emphasis>逻辑</emphasis>备份工具，文件系统级别的备份方法将不会有用（这也阻止你在一个不兼容版本的<productname>PostgreSQL</productname>中使用一个数据目录，因此在一个数据目录上尝试启动一个错误的服务器版本不会造成很大的危害）。
   </para>

<!--==========================orignal english content==========================
   <para>
    It is recommended that you use the <application>pg_dump</application> and
    <application>pg_dumpall</application> programs from the <emphasis>newer</emphasis>
    version of
    <productname>PostgreSQL</productname>, to take advantage of enhancements
    that might have been made in these programs.  Current releases of the
    dump programs can read data from any server version back to 7.0.
   </para>
____________________________________________________________________________-->
   <para>
    我们推荐你从<emphasis>较新</emphasis>版本的<productname>PostgreSQL</productname>中使用<application>pg_dump</application>和<application>pg_dumpall</application>程序，这样可以利用在这些程序中可能存在的改进。当前发行的转储程序可以读取任何 7.0 以上版本服务器中的数据。
   </para>

<!--==========================orignal english content==========================
   <para>
    These instructions assume that your existing installation is under the
    <filename>/usr/local/pgsql</filename> directory, and that the data area is in
    <filename>/usr/local/pgsql/data</filename>.  Substitute your paths
    appropriately.
   </para>
____________________________________________________________________________-->
   <para>
    这些指令假定你现有的安装位于<filename>/usr/local/pgsql</filename>目录，并且数据区域在<filename>/usr/local/pgsql/data</filename>。请用你的路径进行适当的替换。
   </para>

   <procedure>
    <step>
<!--==========================orignal english content==========================
     <para>
      If making a backup, make sure that your database is not being updated.
      This does not affect the integrity of the backup, but the changed
      data would of course not be included. If necessary, edit the
      permissions in the file <filename>/usr/local/pgsql/data/pg_hba.conf</filename>
      (or equivalent) to disallow access from everyone except you.
      See <xref linkend="client-authentication"/> for additional information on
      access control.
     </para>
____________________________________________________________________________-->
     <para>
      如果在创建一个备份，确认你的数据库没有在被更新。这不会影响备份的完整性，但是那些更改当然不会被包括在备份中。如果必要，编辑<filename>/usr/local/pgsql/data/pg_hba.conf</filename>文件中的权限（或等效的方法）来不允许除你之外的任何人使用数据库。关于访问控制的额外信息请见<xref linkend="client-authentication"/>。
     </para>

<!--==========================orignal english content==========================
     <para>
      <indexterm>
       <primary>pg_dumpall</primary>
       <secondary>use during upgrade</secondary>
      </indexterm>

      To back up your database installation, type:
<screen>
<userinput>pg_dumpall &gt; <replaceable>outputfile</></userinput>
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      <indexterm>
       <primary>pg_dumpall</primary>
       <secondary>use during upgrade</secondary>
      </indexterm>

      要备份你的数据库安装，键入：
<screen>
<userinput>pg_dumpall &gt; <replaceable>outputfile</replaceable></userinput>
</screen>
     </para>

<!--==========================orignal english content==========================
     <para>
      To make the backup, you can use the <application>pg_dumpall</application>
      command from the version you are currently running;  see <xref
      linkend="backup-dump-all"/> for more details.  For best
      results, however, try to use the <application>pg_dumpall</application>
      command from <productname>PostgreSQL</productname> &version;,
      since this version contains bug fixes and improvements over older
      versions.  While this advice might seem idiosyncratic since you
      haven't installed the new version yet, it is advisable to follow
      it if you plan to install the new version in parallel with the
      old version.  In that case you can complete the installation
      normally and transfer the data later.  This will also decrease
      the downtime.
     </para>
____________________________________________________________________________-->
     <para>
      要制作备份，你可以使用你正在运行版本的<application>pg_dumpall</application>命令，详见<xref linkend="backup-dump-all"/>。但是，要得到最好的结果，试试使用<productname>PostgreSQL</productname> &version; 的<application>pg_dumpall</application>命令，因为这个版本包含了对旧版本的缺陷修复和改进。虽然这个建议可能看起来很奇怪，因为你还没有安装新版本，但如果你计划平行地安装新版本，遵循这个建议是很明智的。在这种情况下，你可以正常完成安装并且稍后再来传输数据。这也将减少停机时间。
     </para>
    </step>

    <step>
<!--==========================orignal english content==========================
     <para>
      Shut down the old server:
<screen>
<userinput>pg_ctl stop</userinput>
</screen>
      On systems that have <productname>PostgreSQL</productname> started at boot time,
      there is probably a start-up file that will accomplish the same thing. For
      example, on a <systemitem class="osname">Red Hat Linux</systemitem> system one
      might find that this works:
<screen>
<userinput>/etc/rc.d/init.d/postgresql stop</userinput>
</screen>
      See <xref linkend="runtime"/> for details about starting and
      stopping the server.
     </para>
____________________________________________________________________________-->
     <para>
      关闭旧服务器：
<screen>
<userinput>pg_ctl stop</userinput>
</screen>
      在那些自动启动<productname>PostgreSQL</productname>的系统上，可能有一个启动文件将完成同样的事情。例如，在一个<systemitem class="osname">Red Hat Linux</systemitem>系统中，我们会发现这也能用：
<screen>
<userinput>/etc/rc.d/init.d/postgresql stop</userinput>
</screen>
      关于启动和停止服务器的细节请见<xref linkend="runtime"/>。
     </para>
    </step>

    <step>
<!--==========================orignal english content==========================
     <para>
      If restoring from backup, rename or delete the old installation
      directory if it is not version-specific.  It is a good idea to
      rename the directory, rather than
      delete it, in case you have trouble and need to revert to it.  Keep
      in mind the directory might consume significant disk space.  To rename
      the directory, use a command like this:
<screen>
<userinput>mv /usr/local/pgsql /usr/local/pgsql.old</userinput>
</screen>
     (Be sure to move the directory as a single unit so relative paths
     remain unchanged.)
     </para>
____________________________________________________________________________-->
     <para>
      如果从备份恢复，重命名或删除旧的安装目录（如果它不是针对特定版本的）。重命名该目录是一个好主意，而不是删除它，因为如果你碰到问题并需要返回到它，它还存在。记住该目录可能消耗可观的磁盘空间。要重命名该目录，使用类似的命令：
<screen>
<userinput>mv /usr/local/pgsql /usr/local/pgsql.old</userinput>
</screen>
     （注意将该目录作为一个单一单元移动，这样相对路径可以保持不变）。
     </para>
    </step>

    <step>
<!--==========================orignal english content==========================
     <para>
      Install the new version of <productname>PostgreSQL</productname> as
      outlined in <xref linkend="install-procedure"/>.
     </para>
____________________________________________________________________________-->
     <para>
      安装新版本的<productname>PostgreSQL</productname>在<xref linkend="install-procedure"/>
     </para>
    </step>

    <step>
<!--==========================orignal english content==========================
     <para>
      Create a new database cluster if needed.  Remember that you must
      execute these commands while logged in to the special database user
      account (which you already have if you are upgrading).
<programlisting>
<userinput>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data</>
</programlisting>
     </para>
____________________________________________________________________________-->
     <para>
      如果需要，创建一个新的数据库集簇。记住你必须在登录到一个特殊的数据库用户账户（如果你在升级，你就已经有了这个账户）时执行这些命令。
<programlisting>
<userinput>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data</userinput>
</programlisting>
     </para>
    </step>

    <step>
<!--==========================orignal english content==========================
     <para>
      Restore your previous <filename>pg_hba.conf</filename> and any
      <filename>postgresql.conf</filename> modifications.
     </para>
____________________________________________________________________________-->
     <para>
      恢复你之前的<filename>pg_hba.conf</filename>以及任何<filename>postgresql.conf</filename>修改。
     </para>
    </step>

    <step>
<!--==========================orignal english content==========================
     <para>
      Start the database server, again using the special database user
      account:
<programlisting>
<userinput>/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data</>
</programlisting>
     </para>
____________________________________________________________________________-->
     <para>
      启动数据库服务器，也要使用特殊的数据库用户账户：
<programlisting>
<userinput>/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data</userinput>
</programlisting>
     </para>
    </step>

    <step>
<!--==========================orignal english content==========================
     <para>
      Finally, restore your data from backup with:
<screen>
<userinput>/usr/local/pgsql/bin/psql -d postgres -f <replaceable>outputfile</></userinput>
</screen>
      using the <emphasis>new</emphasis> <application>psql</application>.
     </para>
____________________________________________________________________________-->
     <para>
      最后，使用<emphasis>新的</emphasis> <application>psql</application>从备份恢复你的数据：
<screen>
<userinput>/usr/local/pgsql/bin/psql -d postgres -f <replaceable>outputfile</replaceable></userinput>
</screen>
     </para>
    </step>
   </procedure>

<!--==========================orignal english content==========================
   <para>
    The least downtime can be achieved by installing the new server in
    a different directory and running both the old and the new servers
    in parallel, on different ports. Then you can use something like:

<programlisting>
pg_dumpall -p 5432 | psql -d postgres -p 5433
</programlisting>
    to transfer your data.
   </para>
____________________________________________________________________________-->
   <para>
    通过在一个不同的目录中安装新的服务器并且并行地在不同的端口运行新旧两个服务器可以达到最低的停机时间。那么你可以这样用：

<programlisting>
pg_dumpall -p 5432 | psql -d postgres -p 5433
</programlisting>
    来转移你的数据。
   </para>

  </sect2>

  <sect2 id="upgrading-via-pg-upgrade">
<!--==========================orignal english content==========================
   <title>Upgrading Data via <application>pg_upgrade</application></title>
____________________________________________________________________________-->
   <title>通过<application>pg_upgrade</application>升级数据</title>

<!--==========================orignal english content==========================
   <para>
    The <xref linkend="pgupgrade"/> module allows an installation to
    be migrated in-place from one major <productname>PostgreSQL</productname>
    version to another.  Upgrades can be performed in minutes,
    particularly with <option>-&minus;link</option> mode.  It requires steps similar to
    <application>pg_dumpall</application> above, e.g.  starting/stopping the server,
    running <application>initdb</application>.  The <application>pg_upgrade</application> <link
    linkend="pgupgrade">documentation</link> outlines the necessary steps.
   </para>
____________________________________________________________________________-->
   <para>
    <xref linkend="pgupgrade"/>模块允许一个安装从一个
    <productname>PostgreSQL</productname>主版本“就地”升级成另一个主版本。
    升级可以在数分钟内被执行，特别是使用<option>--link</option>模式时。它
    要求和上面的<application>pg_dumpall</application>相似的步骤，例如启动/停止
    服务器、运行<application>initdb</application>。<application>pg_upgrade</application>
    <link linkend="pgupgrade">文档</link>概述了所需的步骤。
   </para>

  </sect2>

  <sect2 id="upgrading-via-replication">
<!--==========================orignal english content==========================
   <title>Upgrading Data via Replication</title>
____________________________________________________________________________-->
   <title>通过复制升级数据</title>

<!--==========================orignal english content==========================
   <para>
    It is also possible to use logical replication methods to create a standby
    server with the updated version of <productname>PostgreSQL</productname>.
    This is possible because logical replication supports
    replication between different major versions of
    <productname>PostgreSQL</productname>.  The standby can be on the same computer or
    a different computer.  Once it has synced up with the master server
    (running the older version of <productname>PostgreSQL</productname>), you can
    switch masters and make the standby the master and shut down the older
    database instance.  Such a switch-over results in only several seconds
    of downtime for an upgrade.
   </para>
____________________________________________________________________________-->
   <para>
    也可以用<productname>PostgreSQL</productname>的已更新版本逻辑复制来创建一个~
后备服务器，逻辑复制支持在不同主版本的<productname>PostgreSQL</productname>之间~
的复制。后备服务器可以在同一台计算机或者不同的计算机上。一旦它和主服务器（运行旧版本的<productname>PostgreSQL</productname>）同步好，你可以切换主机并且将后备服~
务器作为主机，然后关闭旧的数据库实例。这样一种切换使得一次升级的停机时间只有数秒。
   </para>

<!--==========================orignal english content==========================
   <para>
    This method of upgrading can be performed using the built-in logical
    replication facilities as well as using external logical replication
    systems such as <productname>pglogical</productname>,
    <productname>Slony</productname>, <productname>Londiste</productname>, and
    <productname>Bucardo</productname>.
   </para>
____________________________________________________________________________-->
   <para>
   这种升级方法可以用内置的逻辑复制工具和外部的逻辑复制系统如<productname>pglogical</productname>，<productname>Slony</productname>，<productname>Londiste</productname>，和<productname>Bucardo</productname>。
   </para>

  </sect2>
 </sect1>

 <sect1 id="preventing-server-spoofing">
<!--==========================orignal english content==========================
  <title>Preventing Server Spoofing</title>
____________________________________________________________________________-->
  <title>阻止服务器欺骗</title>

<!--==========================orignal english content==========================
  <indexterm zone="preventing-server-spoofing">
   <primary>server spoofing</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="preventing-server-spoofing">
   <primary>服务器欺骗</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   While the server is running, it is not possible for a malicious user
   to take the place of the normal database server.  However, when the
   server is down, it is possible for a local user to spoof the normal
   server by starting their own server.  The spoof server could read
   passwords and queries sent by clients, but could not return any data
   because the <varname>PGDATA</varname> directory would still be secure because
   of directory permissions. Spoofing is possible because any user can
   start a database server; a client cannot identify an invalid server
   unless it is specially configured.
  </para>
____________________________________________________________________________-->
  <para>
   服务器在运行时，它不可能让恶意用户取代正常的数据库服务器。然而，当服务器关闭时， 一个本地用户可以通过启动它们自己的服务器来欺骗正常的服务器。行骗的服务器可以读取客户端发送的密码和查询语句， 但是不会返回任何数据，因为<varname>PGDATA</varname>这个目录是安全的（它有目录权限）。 欺骗是可能的，因为任何用户都可以启动一个数据库服务器；客户端无法识别一个无效的服务器，除非它被专门配置。
  </para>

<!--==========================orignal english content==========================
  <para>
   One way to prevent spoofing of <literal>local</literal>
   connections is to use a Unix domain socket directory (<xref
   linkend="guc-unix-socket-directories"/>) that has write permission only
   for a trusted local user.  This prevents a malicious user from creating
   their own socket file in that directory.  If you are concerned that
   some applications might still reference <filename>/tmp</filename> for the
   socket file and hence be vulnerable to spoofing, during operating system
   startup create a symbolic link <filename>/tmp/.s.PGSQL.5432</filename> that points
   to the relocated socket file.  You also might need to modify your
   <filename>/tmp</filename> cleanup script to prevent removal of the symbolic link.
  </para>
____________________________________________________________________________-->
  <para>
   一种阻止<literal>local</literal>连接欺骗的方法是使用一个 Unix 域套接字目录 （<xref
   linkend="guc-unix-socket-directories"/>），该目录只对一个被信任的本地用户有写权限。 这可以防止恶意用户在该目录中创建自己的套接字文件。如果你担心有些应用程序可能仍然引用<filename>/tmp</filename>下的套接字文件并且因此容易受到欺骗，可在操作系统启动时创建一个符号链接<filename>/tmp/.s.PGSQL.5432</filename>指向一个被重定位的套接字文件。你也可能需要修改<filename>/tmp</filename>清除脚本防止删除这个符号链接。
  </para>

<!--==========================orignal english content==========================
  <para>
   Another option for <literal>local</literal> connections is for clients to use
   <link linkend="libpq-connect-requirepeer"><literal>requirepeer</literal></link>
   to specify the required owner of the server process connected to
   the socket.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>local</literal>连接的另一个选项是对客户端使用<link linkend="libpq-connect-requirepeer"><literal>requirepeer</literal></link>指定所需的连接到该套接字的服务器进程的拥有者。
  </para>

<!--==========================orignal english content==========================
  <para>
   To prevent spoofing on TCP connections, the best solution is to use
   SSL certificates and make sure that clients check the server's certificate.
   To do that, the server
   must be configured to accept only <literal>hostssl</literal> connections (<xref
   linkend="auth-pg-hba-conf"/>) and have SSL key and certificate files
   (<xref linkend="ssl-tcp"/>). The TCP client must connect using
   <literal>sslmode=verify-ca</literal> or
   <literal>verify-full</literal> and have the appropriate root certificate
   file installed (<xref linkend="libq-ssl-certificates"/>).
  </para>
____________________________________________________________________________-->
  <para>
   要在TCP连接上防止欺骗，最好的解决方案是使用 SSL 证书，并且确保客户检查服务器的证书。 要做到这点，服务器必须配置为仅接受<literal>hostssl</literal>连接（<xref linkend="auth-pg-hba-conf"/>），并且有 SSL 密钥和证书文件（<xref linkend="ssl-tcp"/>）。 TCP 客户端连接必须使用<literal>sslmode=verify-ca</literal>或<literal>verify-full</literal>进行连接，并且安装有适当的根证书文件<xref linkend="libq-ssl-certificates"/>）。
  </para>
 </sect1>

 <sect1 id="encryption-options">
<!--==========================orignal english content==========================
  <title>Encryption Options</title>
____________________________________________________________________________-->
  <title>加密选项</title>

<!--==========================orignal english content==========================
  <indexterm zone="encryption-options">
   <primary>encryption</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="encryption-options">
   <primary>加密</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</productname> offers encryption at several
   levels, and provides flexibility in protecting data from disclosure
   due to database server theft, unscrupulous administrators, and
   insecure networks. Encryption might also be required to secure
   sensitive data such as medical records or financial transactions.
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>提供了几个不同级别的加密， 并且在保护数据不会因为数据库服务器偷窃、不道德的管理员、不安全网络等因素而泄漏方面 提供很高的灵活性。加密可能也是保护一些诸如医疗记录或财务交易等敏感数据所要求的。
  </para>

  <variablelist>

  <varlistentry>
<!--==========================orignal english content==========================
   <term>Password Encryption</term>
____________________________________________________________________________-->
   <term>口令加密</term>
   <listitem>

<!--==========================orignal english content==========================
    <para>
     Database user passwords are stored as hashes (determined by the setting
     <xref linkend="guc-password-encryption"/>), so the administrator cannot
     determine the actual password assigned to the user. If SCRAM or MD5
     encryption is used for client authentication, the unencrypted password is
     never even temporarily present on the server because the client encrypts
     it before being sent across the network. SCRAM is preferred, because it
     is an Internet standard and is more secure than the PostgreSQL-specific
     MD5 authentication protocol.
    </para>
____________________________________________________________________________-->
    <para>
     数据库用户的口令都是以哈希(取决于<xref linkend="guc-password-encryption"/>配置)的方式存储， 所以管理员不能限定实际的口令赋予用户。如果 SCRAM 或者 MD5 加密算法被用于客户端认证， 那么未加密的口令甚至都不可能出现在服务器上，因为客户端在通过网络发送口令之前，就已经加密过。推荐使用SCRAM，因为它是互联网标准而且相比于PostgreSQL特定的MD5认证协议更安全。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
<!--==========================orignal english content==========================
   <term>Encryption For Specific Columns</term>
____________________________________________________________________________-->
   <term>指定列加密</term>

   <listitem>
<!--==========================orignal english content==========================
    <para>
     The <xref linkend="pgcrypto"/> module allows certain fields to be
     stored encrypted.
     This is useful if only some of the data is sensitive.
     The client supplies the decryption key and the data is decrypted
     on the server and then sent to the client.
    </para>
____________________________________________________________________________-->
    <para>
     <xref linkend="pgcrypto"/>模块允许对特定域进行加密存储。这个功能只对某些敏感数据有用。 客户端提供解密的密钥，然后数据在服务器端解密并发送给客户端。
    </para>

<!--==========================orignal english content==========================
    <para>
     The decrypted data and the decryption key are present on the
     server for a brief time while it is being decrypted and
     communicated between the client and server. This presents a brief
     moment where the data and keys can be intercepted by someone with
     complete access to the database server, such as the system
     administrator.
    </para>
____________________________________________________________________________-->
    <para>
     在数据被解密和在服务器与客户端之间传递时，解密数据和解密密钥将会在服务器端存在短暂的一段时间。 这就给那些能完全访问数据库服务器的人提供了一个短暂的截获密钥和数据的时间，例如系统管理员。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
<!--==========================orignal english content==========================
   <term>Data Partition Encryption</term>
____________________________________________________________________________-->
   <term>数据分区加密</term>

   <listitem>
<!--==========================orignal english content==========================
    <para>
     Storage encryption can be performed at the file system level or the
     block level.  Linux file system encryption options include eCryptfs
     and EncFS, while FreeBSD uses PEFS.  Block level or full disk
     encryption options include dm-crypt + LUKS on Linux and GEOM
     modules geli and gbde on FreeBSD.  Many other operating systems
     support this functionality, including Windows.
    </para>
____________________________________________________________________________-->
    <para>
     存储加密可以在文件系统层面或者块层面上执行。Linux 文件系统加密
     选项包括 eCryptfs 和 EncFS，而 FreeBSD 使用 PEFS。快层面或者全
     盘加密选项包括 Linux 上的 dm-crypt + LUKS 以及 FreeBSD 上的
     GEOM 模块 geli 及 gbde。很多其他操作系统也支持这个功能，包括
     Windows。
    </para>

<!--==========================orignal english content==========================
    <para>
     This mechanism prevents unencrypted data from being read from the
     drives if the drives or the entire computer is stolen. This does
     not protect against attacks while the file system is mounted,
     because when mounted, the operating system provides an unencrypted
     view of the data. However, to mount the file system, you need some
     way for the encryption key to be passed to the operating system,
     and sometimes the key is stored somewhere on the host that mounts
     the disk.
    </para>
____________________________________________________________________________-->
    <para>
     这个机制避免了在整个计算机或者驱动器被盗的情况下， 未加密的数据被从驱动器中读取。它无法防止在文件系统被挂 载时的攻击，因为在挂载之后，操作系统提供数据的解密视图。不过，要想挂载该文件系统，你需要有一些方法把加密密钥传递给操作 系统，并且有时候这个密钥就存储在挂载该磁盘的主机上的某处。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
<!--==========================orignal english content==========================
   <term>Encrypting Data Across A Network</term>
____________________________________________________________________________-->
   <term>跨网络加密数据</term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      SSL connections encrypt all data sent across the network: the
      password, the queries, and the data returned. The
      <filename>pg_hba.conf</filename> file allows administrators to specify
      which hosts can use non-encrypted connections (<literal>host</literal>)
      and which require SSL-encrypted connections
      (<literal>hostssl</literal>). Also, clients can specify that they
      connect to servers only via SSL. <application>Stunnel</application> or
      <application>SSH</application> can also be used to encrypt transmissions.
     </para>
____________________________________________________________________________-->
     <para>
      SSL 连接加密所有跨网络发送的数据：口令、查询以及返回的数据。<filename>pg_hba.conf</filename>文件允许管理员指定哪些主机可以使用 非加密连接（<literal>host</literal>），以及哪些主机需要使用 SSL 加密的连接（<literal>hostssl</literal>）。客户端还可以指定它们只通过 SSL 连接到服务器。我们还可以使用<application>Stunnel</application>或<application>SSH</application>加密传输。
     </para>
    </listitem>
  </varlistentry>

  <varlistentry>
<!--==========================orignal english content==========================
   <term>SSL Host Authentication</term>
____________________________________________________________________________-->
   <term>SSL 主机认证</term>

   <listitem>
<!--==========================orignal english content==========================
    <para>
     It is possible for both the client and server to provide SSL
     certificates to each other. It takes some extra configuration
     on each side, but this provides stronger verification of identity
     than the mere use of passwords. It prevents a computer from
     pretending to be the server just long enough to read the password
     sent by the client. It also helps prevent <quote>man in the middle</quote>
     attacks where a computer between the client and server pretends to
     be the server and reads and passes all data between the client and
     server.
    </para>
____________________________________________________________________________-->
    <para>
     客户端和主机都可以提供 SSL 证书给对方。这在两边都需要一些额外的配置， 但是这种方式提供了比仅使用口令更强的身份验证。 它避免一个计算机伪装成服务器，这个时长只要足够读取客户端发送的口令就行了。它还避免了 <quote>中间人</quote>攻击，在其中有一台计算机处于客户端和服务器之间并伪装成服务器读取和传递两者之间的所有数据。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
<!--==========================orignal english content==========================
   <term>Client-Side Encryption</term>
____________________________________________________________________________-->
   <term>客户端加密</term>

   <listitem>
<!--==========================orignal english content==========================
    <para>
     If the system administrator for the server's machine cannot be trusted,
     it is necessary
     for the client to encrypt the data; this way, unencrypted data
     never appears on the database server. Data is encrypted on the
     client before being sent to the server, and database results have
     to be decrypted on the client before being used.
    </para>
____________________________________________________________________________-->
    <para>
     如果服务器所在机器的系统管理员是不可信的，那么客户端加密数据也是必要的。在这种情况下，未加密的数据从来不会在数据库服务器上出现。数据在发送给服务器之前加密，而数据库结果在能使用之前必须在客户端上解密。
    </para>
   </listitem>
  </varlistentry>

  </variablelist>

 </sect1>

 <sect1 id="ssl-tcp">
<!--==========================orignal english content==========================
  <title>Secure TCP/IP Connections with SSL</title>
____________________________________________________________________________-->
  <title>用 SSL 进行安全的 TCP/IP 连接</title>

<!--==========================orignal english content==========================
  <indexterm zone="ssl-tcp">
   <primary>SSL</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="ssl-tcp">
   <primary>SSL</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</productname> has native support for using
   <acronym>SSL</acronym> connections to encrypt client/server communications
   for increased security. This requires that
   <productname>OpenSSL</productname> is installed on both client and
   server systems and that support in <productname>PostgreSQL</productname> is
   enabled at build time (see <xref linkend="installation"/>).
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>有一个对使用<acronym>SSL</acronym>连接加密客户端/服务器通讯的本地支持，它可以增加安全性。这个特性要求在客户端和服务器端都安装<productname>OpenSSL</productname>并且在编译<productname>PostgreSQL</productname>的时候打开这个支持（见<xref linkend="installation"/>）。
  </para>

  <sect2 id="ssl-setup">
   <title>Basic Setup</title>

<!--==========================orignal english content==========================
  <para>
   With <acronym>SSL</acronym> support compiled in, the
   <productname>PostgreSQL</productname> server can be started with
   <acronym>SSL</acronym> enabled by setting the parameter
   <xref linkend="guc-ssl"/> to <literal>on</literal> in
   <filename>postgresql.conf</filename>.  The server will listen for both normal
   and <acronym>SSL</acronym> connections on the same TCP port, and will negotiate
   with any connecting client on whether to use <acronym>SSL</acronym>.  By
   default, this is at the client's option; see <xref
   linkend="auth-pg-hba-conf"/> about how to set up the server to require
   use of <acronym>SSL</acronym> for some or all connections.
  </para>
____________________________________________________________________________-->
  <para>
   当<acronym>SSL</acronym>支持被编译在<productname>PostgreSQL</productname>中时，可以通过将<filename>postgresql.conf</filename>中的 <xref linkend="guc-ssl"/>设置为<literal>on</literal>让<productname>PostgreSQL</productname>服务器带着<acronym>SSL</acronym>支持被启动。 服务器在同一个 TCP 端口监听普通连接和<acronym>SSL</acronym>连接，并且将与任何正在连接的客户端协商是否使用<acronym>SSL</acronym>。默认情况下，这是客户端的选项，关于如何设置服务器来要求某些或者所有连接使用<acronym>SSL</acronym>请见<xref linkend="auth-pg-hba-conf"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</productname> reads the system-wide
   <productname>OpenSSL</productname> configuration file. By default, this
   file is named <filename>openssl.cnf</filename> and is located in the
   directory reported by <literal>openssl version -d</literal>.
   This default can be overridden by setting environment variable
   <envar>OPENSSL_CONF</envar> to the name of the desired configuration file.
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>读取系统范围的<productname>OpenSSL</productname>配置文件。默认情况下，这个文件名为<filename>openssl.cnf</filename>并且被放置在<literal>openssl version -d</literal>所报告的目录中。通过设置环境变量<envar>OPENSSL_CONF</envar>指定你想要的配置文件名可以覆盖此默认配置。
  </para>

<!--==========================orignal english content==========================
  <para>
   <productname>OpenSSL</productname> supports a wide range of ciphers
   and authentication algorithms, of varying strength.  While a list of
   ciphers can be specified in the <productname>OpenSSL</productname>
   configuration file, you can specify ciphers specifically for use by
   the database server by modifying <xref linkend="guc-ssl-ciphers"/> in
   <filename>postgresql.conf</filename>.
  </para>
____________________________________________________________________________-->
  <para>
   <productname>OpenSSL</productname>支持范围广泛的密码和认证算法。而在<productname>OpenSSL</productname>配置文件可以指定一个密码列表， 你可以通过在<filename>postgresql.conf</filename>中修改<xref linkend="guc-ssl-ciphers"/>来指定数据库服务器使用的专用密码。
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    It is possible to have authentication without encryption overhead by
    using <literal>NULL-SHA</literal> or <literal>NULL-MD5</literal> ciphers.  However,
    a man-in-the-middle could read and pass communications between client
    and server.  Also, encryption overhead is minimal compared to the
    overhead of authentication.  For these reasons NULL ciphers are not
    recommended.
   </para>
____________________________________________________________________________-->
   <para>
    使用<literal>NULL-SHA</literal>或<literal>NULL-MD5</literal>可以得到身份验证但没有加密开销。不过，中间人能够读取和传递客户端和服务器之间的通信。此外，加密开销相比身份认证的开销是最小的。出于这些原因，我们建议不要使用 NULL 密码。
   </para>
  </note>

<!--==========================orignal english content==========================
  <para>
   To start in <acronym>SSL</acronym> mode, files containing the server certificate
   and private key must exist.  By default, these files are expected to be
   named <filename>server.crt</filename> and <filename>server.key</filename>, respectively, in
   the server's data directory, but other names and locations can be specified
   using the configuration parameters <xref linkend="guc-ssl-cert-file"/>
   and <xref linkend="guc-ssl-key-file"/>.
  </para>
____________________________________________________________________________-->
  <para>
   要<acronym>SSL</acronym>模式中启动服务器，包含服务器证书和私钥的文件必须存在。默认情况下，这些文件应该分别被命名为<filename>server.crt</filename>和<filename>server.key</filename>并且被放在服务器的数据目录中，但是可以通过配置参数<xref linkend="guc-ssl-cert-file"/>和<xref linkend="guc-ssl-key-file"/>指定其他名称和位置。
   </para>

<!--==========================orignal english content==========================
  <para>
   On Unix systems, the permissions on <filename>server.key</filename> must
   disallow any access to world or group; achieve this by the command
   <command>chmod 0600 server.key</command>.  Alternatively, the file can be
   owned by root and have group read access (that is, <literal>0640</literal>
   permissions).  That setup is intended for installations where certificate
   and key files are managed by the operating system.  The user under which
   the <productname>PostgreSQL</productname> server runs should then be made a
   member of the group that has access to those certificate and key files.
  </para>
____________________________________________________________________________-->
  <para>
   在 Unix 系统上，<filename>server.key</filename>上的权限必须不允许所有人或组的任何访问，通过命令<command>chmod 0600 server.key</command>可以做到。或者，该文件可以由 root 所拥有并且具有组读访问（也就是<literal>0640</literal>权限）。这种设置适用于由操作系统管理证书和密钥文件的安装。用于运行<productname>PostgreSQL</productname>服务器的用户应该被作为能够访问那些证书和密钥文件的组成员。
  </para>

<!--==========================orignal english content==========================
   <para>
    If the data directory allows group read access then certificate files may
    need to be located outside of the data directory in order to conform to the
    security requirements outlined above.  Generally, group access is enabled
    to allow an unprivileged user to backup the database, and in that case the
    backup software will not be able to read the certificate files and will
    likely error.
  </para>
____________________________________________________________________________-->
  <para>
  如果数据目录允许组读取访问，则证书文件可能需要位于数据目录之外，以符合上面概述的安全要求。通常，启用组访问权限是为了允许非特权用户备份数据库，在这种情况下，备份软件将无法读取证书文件，并且可能会出错。
  </para>

<!--==========================orignal english content==========================
  <para>
   If the private key is protected with a passphrase, the
   server will prompt for the passphrase and will not start until it has
   been entered.
   Using a passphrase also disables the ability to change the server's SSL
   configuration without a server restart.
   Furthermore, passphrase-protected private keys cannot be used at all
   on Windows.
  </para>
____________________________________________________________________________-->
  <para>
   如果私钥被一个密码保护着，服务器将提示要求这个密码，并且在它被输入前不会启动。
   使用密码还会禁用在不重启服务器的情况下更改服务器的SSL配置的功能。
   此外，密码保护的私钥在Windows上根本无法使用。
  </para>

<!--==========================orignal english content==========================
  <para>
   The first certificate in <filename>server.crt</filename> must be the
   server's certificate because it must match the server's private key.
   The certificates of <quote>intermediate</quote> certificate authorities
   can also be appended to the file.  Doing this avoids the necessity of
   storing intermediate certificates on clients, assuming the root and
   intermediate certificates were created with <literal>v3_ca</literal>
   extensions.  This allows easier expiration of intermediate certificates.
  </para>
____________________________________________________________________________-->
  <para>
  <filename>server.crt</filename>中的第一个证书必须是服务器的证书，因为它必须与服务器的私钥匹配。<quote>intermediate</quote>的证书颁发机构，也可以追加到文件。假设根证书和中间证书是使用v3_ca扩展名创建的，那么这样做避免了在客户端上存储中间证书的必要。这使得中间证书更容易到期。
  </para>
<!--==========================orignal english content==========================
  <para>
   It is not necessary to add the root certificate to
   <filename>server.crt</filename>.  Instead, clients must have the root
   certificate of the server's certificate chain.
  </para>
____________________________________________________________________________-->
  <para>
  无需将根证书添加到中<filename>server.crt</filename>。相反，客户端必须具有服务器证书链的根证书。
  </para>
  </sect2>

  <sect2 id="ssl-openssl-config">
<!--==========================orignal english content==========================
   <title>OpenSSL Configuration</title>

  <para>
   <productname>PostgreSQL</productname> reads the system-wide
   <productname>OpenSSL</productname> configuration file. By default, this
   file is named <filename>openssl.cnf</filename> and is located in the
   directory reported by <literal>openssl version -d</literal>.
   This default can be overridden by setting environment variable
   <envar>OPENSSL_CONF</envar> to the name of the desired configuration file.
  </para>
____________________________________________________________________________-->
   <title>OpenSSL配置</title>
  <para>
  <productname>PostgreSQL</productname>读取系统范围的<productname>OpenSSL</productname>配置文件。默认情况下，该文件被命名为<filename>openssl.cnf</filename>并位于<literal>openssl version -d</literal>报告的目录中。通过将环境变量设置<envar>OPENSSL_CONF</envar>为所需配置文件的名称，可以覆盖此默认值。

<!--==========================orignal english content==========================
  <para>
   <productname>OpenSSL</productname> supports a wide range of ciphers
   and authentication algorithms, of varying strength.  While a list of
   ciphers can be specified in the <productname>OpenSSL</productname>
   configuration file, you can specify ciphers specifically for use by
   the database server by modifying <xref linkend="guc-ssl-ciphers"/> in
   <filename>postgresql.conf</filename>.
  </para>
____________________________________________________________________________-->

  <para>
   <productname>OpenSSL</productname>支持各种强度不同的密码和身份验证算法。虽然许多密码可以在<productname>OpenSSL</productname>的配置文件中被指定，您可以通过修改<filename>postgresql.conf</filename>配置文件中指定专门针对数据库服务器使用密码的<xref linkend="guc-ssl-ciphers"/> 配置。
  </para>
<!--==========================orignal english content==========================
  <note>
   <para>
    It is possible to have authentication without encryption overhead by
    using <literal>NULL-SHA</literal> or <literal>NULL-MD5</literal> ciphers.  H
owever,
    a man-in-the-middle could read and pass communications between client
    and server.  Also, encryption overhead is minimal compared to the
    overhead of authentication.  For these reasons NULL ciphers are not
    recommended.
   </para>
  </note>
  </sect2>
____________________________________________________________________________-->
 <note>
  <para>
  使用<literal>NULL-SHA</literal>或<literal>NULL-MD5</literal>可以得到身份验~
证但没有加密开销。不过，中间人能够读取和传递客户端和服务器之间的通信。此外，加~
密开销相比身份认证的开销是最小的。出于这些原因，我们建议不要使用 NULL 密码。
  </para>
 </note>

  <sect2 id="ssl-client-certificates">
<!--==========================orignal english content==========================
   <title>Using Client Certificates</title>
____________________________________________________________________________-->
   <title>使用客户端证书</title>

<!--==========================orignal english content==========================
   <para>
   To require the client to supply a trusted certificate, place
   certificates of the root certificate authorities (<acronym>CA</acronym>s)
   you trust in a file in the data
   directory, set the parameter <xref linkend="guc-ssl-ca-file"/> in
   <filename>postgresql.conf</filename> to the new file name,
   and add the authentication option <literal>clientcert=1</literal> to the
   appropriate <literal>hostssl</literal> line(s) in <filename>pg_hba.conf</filename>.
   A certificate will then be requested from the client during
   SSL connection startup.  (See <xref linkend="libpq-ssl"/> for a
   description of how to set up certificates on the client.)  The server will
   verify that the client's certificate is signed by one of the trusted
   certificate authorities.
  </para>
____________________________________________________________________________-->
   <para>
   要求客户端提供受信任的证书，把你信任的根证书颁发机构（<acronym>CA</acronym>）的证书放置在数据目录文件中。并且修改<filename>postgresql.conf</filename>中的参数<xref linkend="guc-ssl-ca-file"/>重新命名文件，还要把认证选项<literal>clientcert=1</literal>加入到<filename>pg_hba.conf</filename>文件中合适的<literal>hostssl</literal>行上。然后将在 SSL 连接启动时从客户端请求该证书（一段对于如何在客户端设置证书的描述请见<xref linkend="libpq-ssl"/>）。服务器将验证客户端的证书是由受信任的证书颁发机构之一签名。
   </para>

<!--==========================orignal english content==========================
  <para>
   Intermediate certificates that chain up to existing root certificates
   can also appear in the <xref linkend="guc-ssl-ca-file"/> file if
   you wish to avoid storing them on clients (assuming the root and
   intermediate certificates were created with <literal>v3_ca</literal>
   extensions).  Certificate Revocation List (CRL) entries are also
   checked if the parameter <xref linkend="guc-ssl-crl-file"/> is set.
   (See <ulink
   url="http://h41379.www4.hpe.com/doc/83final/ba554_90007/ch04s02.html"></ulink
>
   for diagrams showing SSL certificate usage.)
  </para>
____________________________________________________________________________-->
  <para>
   如果希望避免将链接到现有根证书的中间证书显示在<xref linkend="guc-ssl-ca-file"/>文件中（假设根证书和中间证书是使用 <literal>v3_ca</literal> 扩展名创建的），则这些证书也可以显示在ssl_ca_file文件中。如果参数<xref linkend="guc-ssl-crl-file"/>被设置，证书撤销列表（CRL）项也要被检查（显示 SSL 证书用法的图标见<ulink url="http://h41379.www4.hpe.com/doc/83final/ba554_90007/ch04s02.html"></ulink>）。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <literal>clientcert</literal> authentication option is available for
   all authentication methods, but only in <filename>pg_hba.conf</filename> lines
   specified as <literal>hostssl</literal>.  When <literal>clientcert</literal> is
   not specified or is set to 0, the server will still verify any presented
   client certificates against its CA file, if one is configured &mdash; but
   it will not insist that a client certificate be presented.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>clientcert</literal>认证选项适用于所有的认证方法，但仅适用于<filename>pg_hba.conf</filename>中用<literal>hostssl</literal>指定的行。 当<literal>clientcert</literal>没有指定或设置为 0时，如果配置了 CA 文件，服务器将仍然会根据它验证任何提交的客户端证书 &mdash; 但是它将不会坚持要求出示一个客户端证书。
  </para>

<!--==========================orignal english content==========================
  <para>
   If you are setting up client certificates, you may wish to use
   the <literal>cert</literal> authentication method, so that the certificates
   control user authentication as well as providing connection security.
   See <xref linkend="auth-cert"/> for details.  (It is not necessary to
   specify <literal>clientcert=1</literal> explicitly when using
   the <literal>cert</literal> authentication method.)
  </para>
____________________________________________________________________________-->
  <para>
   如果你在设置客户端证书，你可能希望用<literal>cert</literal>认证方法，这样证书控制用户认证以及提供连接安全。详见<xref linkend="auth-cert"/>（在使用<literal>cert</literal>认证方法时，没有必要显式地指定<literal>clientcert=1</literal>）。
  </para>
  </sect2>

  <sect2 id="ssl-server-files">
<!--==========================orignal english content==========================
   <title>SSL Server File Usage</title>
____________________________________________________________________________-->
   <title>SSL 服务器文件用法</title>

<!--==========================orignal english content==========================
   <para>
    <xref linkend="ssl-file-usage"/> summarizes the files that are
    relevant to the SSL setup on the server.  (The shown file names are default
    names.  The locally configured names could be different.)
   </para>
____________________________________________________________________________-->
   <para>
    <xref linkend="ssl-file-usage"/>总结了与服务器上 SSL 配置有关的文件（显示的文件名是默认的名称。本地配置的名称可能会不同）。
   </para>

  <table id="ssl-file-usage">
<!--==========================orignal english content==========================
   <title>SSL Server File Usage</title>
____________________________________________________________________________-->
   <title>SSL 服务器文件用法</title>
   <tgroup cols="3">
    <thead>
<!--==========================orignal english content==========================
     <row>
      <entry>File</entry>
      <entry>Contents</entry>
      <entry>Effect</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>文件</entry>
      <entry>内容</entry>
      <entry>效果</entry>
     </row>
    </thead>

    <tbody>

<!--==========================orignal english content==========================
     <row>
      <entry><xref linkend="guc-ssl-cert-file"/> (<filename>$PGDATA/server.crt</filename>)</entry>
      <entry>server certificate</entry>
      <entry>sent to client to indicate server's identity</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><xref linkend="guc-ssl-cert-file"/> (<filename>$PGDATA/server.crt</filename>)</entry>
      <entry>服务器证书</entry>
      <entry>发送给客户端来说明服务器的身份</entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><xref linkend="guc-ssl-key-file"/> (<filename>$PGDATA/server.key</filename>)</entry>
      <entry>server private key</entry>
      <entry>proves server certificate was sent by the owner; does not indicate certificate owner is trustworthy</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><xref linkend="guc-ssl-key-file"/> (<filename>$PGDATA/server.key</filename>)</entry>
      <entry>服务器私钥</entry>
      <entry>证明服务器证书是其所有者发送的，并不说明证书所有者是值得信任的</entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><xref linkend="guc-ssl-ca-file"/></entry>
      <entry>trusted certificate authorities</entry>
      <entry>checks that client certificate is
      signed by a trusted certificate authority</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><xref linkend="guc-ssl-ca-file"/></entry>
      <entry>可信的证书颁发机构</entry>
      <entry>检查客户端证书是由一个可信的证书颁发机构签名的</entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><xref linkend="guc-ssl-crl-file"/></entry>
      <entry>certificates revoked by certificate authorities</entry>
      <entry>client certificate must not be on this list</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><xref linkend="guc-ssl-crl-file"/></entry>
      <entry>被证书授权机构撤销的证书</entry>
      <entry>客户端证书不能出现在这个列表上</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

<!--==========================orignal english content==========================
   <para>
    The server reads these files at server start and whenever the server
    configuration is reloaded.  On <systemitem class="osname">Windows</systemitem>
    systems, they are also re-read whenever a new backend process is spawned
    for a new client connection.
   </para>
____________________________________________________________________________-->
   <para>
    服务器在服务器启动时以及服务器配置重新加载时读取这些文件。
	在<systemitem class="osname">Windows</systemitem>系统上，只要为新客户端连接生成新的后端进程，
	它们也会重新读取。
   </para>

<!--==========================orignal english content==========================
   <para>
    If an error in these files is detected at server start, the server will
    refuse to start.  But if an error is detected during a configuration
    reload, the files are ignored and the old SSL configuration continues to
    be used.  On <systemitem class="osname">Windows</systemitem> systems, if an error in
    these files is detected at backend start, that backend will be unable to
    establish an SSL connection.  In all these cases, the error condition is
    reported in the server log.
   </para>
____________________________________________________________________________-->
   <para>
    如果在服务器启动时检测到这些文件中的错误，服务器将拒绝启动。但是，
	如果在配置重新加载过程中检测到错误，则会忽略这些文件，并继续使用旧的SSL配置。
	在<systemitem class="osname">Windows</systemitem>系统上，如果在后端启动时检测到这些文件中存在错误，
	则该后端将无法建立SSL连接。在所有这些情况下，错误情况都会在服务器日志中报告。
   </para>
   </sect2>

  <sect2 id="ssl-certificate-creation">
<!--==========================orignal english content==========================
   <title>Creating Certificate</title>
____________________________________________________________________________-->
   <title>创建证书</title>

<!--==========================orignal english content==========================
   <para>
     To create a simple self-signed certificate for the server, valid for 365
     days, use the following <productname>OpenSSL</productname> command,
     replacing <replaceable>dbhost.yourdomain.com</replaceable> with the server's host name:
<programlisting>
openssl req -new -x509 -days 365 -nodes -text -out server.crt \
  -keyout server.key -subj "/CN=<replaceable>yourdomain.com</replaceable>"
</programlisting>
    Then do:
<programlisting>
chmod og-rwx server.key
</programlisting>
    because the server will reject the file if its permissions are more
    liberal than this.
    For more details on how to create your server private key and
    certificate, refer to the <productname>OpenSSL</productname> documentation.
   </para>
____________________________________________________________________________-->
   <para>
    要为服务器创建一个有效期为365天的简单自签名证书，
	可以使用下面的<productname>OpenSSL</productname>命令，
	将<replaceable>dbhost.yourdomain.com</replaceable>替换为服务器的主机名：
<programlisting>
openssl req -new -x509 -days 365 -nodes -text -out server.crt \
  -keyout server.key -subj "/CN=<replaceable>dbhost.yourdomain.com</replaceable>"
</programlisting>
    然后执行：
<programlisting>
chmod og-rwx server.key
</programlisting>
    如果文件的权限比这个更自由，服务器将拒绝该文件。要了解更多关于如何创建你的服务器私钥和证书的细节， 请参考<productname>OpenSSL</productname>文档。
   </para>

<!--==========================orignal english content==========================
   <para>
    While a self-signed certificate can be used for testing, a certificate
    signed by a certificate authority (<acronym>CA</acronym>) (usually an
    enterprise-wide root <acronym>CA</acronym>) should be used in production.
   </para>
____________________________________________________________________________-->
   <para>
    尽管可以使用自签名证书进行测试，但是在生产中应该使用由证书颁发机构（<acronym>CA</acronym>）（通常是企业范围的根<acronym>CA</acronym>）签名的证书。
   </para>
<!--==========================orignal english content==========================
   <para>
    To create a server certificate whose identity can be validated
    by clients, first create a certificate signing request
    (<acronym>CSR</acronym>) and a public/private key file:
<programlisting>
openssl req -new -nodes -text -out root.csr \
  -keyout root.key -subj "/CN=<replaceable>root.yourdomain.com</replaceable>"
chmod og-rwx root.key
</programlisting>
    Then, sign the request with the key to create a root certificate
    authority (using the default <productname>OpenSSL</productname>
    configuration file location on <productname>Linux</productname>):
<programlisting>
openssl x509 -req -in root.csr -text -days 3650 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -signkey root.key -out root.crt
</programlisting>
    Finally, create a server certificate signed by the new root certificate
    authority:
<programlisting>
openssl req -new -nodes -text -out server.csr \
  -keyout server.key -subj "/CN=<replaceable>dbhost.yourdomain.com</replaceable>
"
chmod og-rwx server.key

openssl x509 -req -in server.csr -text -days 365 \
  -CA root.crt -CAkey root.key -CAcreateserial \
  -out server.crt
</programlisting>
    <filename>server.crt</filename> and <filename>server.key</filename>
    should be stored on the server, and <filename>root.crt</filename> should
    be stored on the client so the client can verify that the server's leaf
    certificate was signed by its trusted root certificate.
    <filename>root.key</filename> should be stored offline for use in
    creating future certificates.
   </para>
____________________________________________________________________________-->
   <para>
   要创建其身份可以被客户端验证的服务器证书，请首先创建一个证书签名请求（<acronym>CSR</acronym>）和一个公共/专用密钥文件：
<programlisting>
openssl req -new -nodes -text -out root.csr \
  -keyout root.key -subj "/CN=<replaceable>root.yourdomain.com</replaceable>"
chmod og-rwx root.key
</programlisting>
    然后，使用密钥对请求进行签名以创建根证书颁发机构（使用<productname>Linux</productname>上的默认<productname>OpenSSL</productname>配置文件位置）：
<programlisting>
openssl x509 -req -in root.csr -text -days 3650 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -signkey root.key -out root.crt
</programlisting>
    最后，创建由新的根证书颁发机构签名的服务器证书：
<programlisting>
openssl req -new -nodes -text -out server.csr \
  -keyout server.key -subj "/CN=<replaceable>dbhost.yourdomain.com</replaceable>"
chmod og-rwx server.key

openssl x509 -req -in server.csr -text -days 365 \
  -CA root.crt -CAkey root.key -CAcreateserial \
  -out server.crt
</programlisting>
    <filename>server.crt</filename>和<filename>server.key</filename>应该存储在服务器上，并且<filename>root.crt</filename>应该存储在客户端上，以便客户端可以验证服务器的叶证书已由其受信任的根证书签名。<filename>root.key</filename>应该离线存储以用于创建将来的证书。
    </para>
<!--==========================orignal english content==========================
   <para>
    It is also possible to create a chain of trust that includes
    intermediate certificates:
<programlisting>
# root
openssl req -new -nodes -text -out root.csr \
  -keyout root.key -subj "/CN=<replaceable>root.yourdomain.com</replaceable>"
chmod og-rwx root.key
openssl x509 -req -in root.csr -text -days 3650 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -signkey root.key -out root.crt

# intermediate
openssl req -new -nodes -text -out intermediate.csr \
  -keyout intermediate.key -subj "/CN=<replaceable>intermediate.yourdomain.com</
replaceable>"
chmod og-rwx intermediate.key
openssl x509 -req -in intermediate.csr -text -days 1825 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -CA root.crt -CAkey root.key -CAcreateserial \
  -out intermediate.crt

# leaf
openssl req -new -nodes -text -out server.csr \
  -keyout server.key -subj "/CN=<replaceable>dbhost.yourdomain.com</replaceable>
"
chmod og-rwx server.key
openssl x509 -req -in server.csr -text -days 365 \
  -CA intermediate.crt -CAkey intermediate.key -CAcreateserial \
  -out server.crt
</programlisting>
    <filename>server.crt</filename> and
    <filename>intermediate.crt</filename> should be concatenated
    into a certificate file bundle and stored on the server.
    <filename>server.key</filename> should also be stored on the server.
    <filename>root.crt</filename> should be stored on the client so
    the client can verify that the server's leaf certificate was signed
    by a chain of certificates linked to its trusted root certificate.
    <filename>root.key</filename> and <filename>intermediate.key</filename>
    should be stored offline for use in creating future certificates.
   </para>
____________________________________________________________________________-->
   <para>
    也可以创建一个包括中间证书的信任链：
<programlisting>
#根 
openssl req -new -nodes -text -out root.csr \
  -keyout root.key -subj "/CN=<replaceable>root.yourdomain.com</replaceable>"
chmod og-rwx root.key
openssl x509 -req -in root.csr -text -days 3650 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -signkey root.key -out root.crt

#中级 
openssl req -new -nodes -text -out intermediate.csr \
  -keyout intermediate.key -subj "/CN=<replaceable>intermediate.yourdomain.com</replaceable>"
chmod og-rwx intermediate.key
openssl x509 -req -in intermediate.csr -text -days 1825 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -CA root.crt -CAkey root.key -CAcreateserial \
  -out intermediate.crt

#叶 
openssl req -new -nodes -text -out server.csr \
  -keyout server.key -subj "/CN=<replaceable>dbhost.yourdomain.com</replaceable>"
chmod og-rwx server.key
openssl x509 -req -in server.csr -text -days 365 \
  -CA intermediate.crt -CAkey intermediate.key -CAcreateserial \
  -out server.crt
</programlisting>
    <filename>server.crt</filename>和<filename>intermediate.crt</filename>应连接成一个证书文件包中并存储在服务器上。<filename>server.key</filename>还应该存储在服务器上。<filename>root.crt</filename>应将其存储在客户端上，以便客户端可以验证服务器的叶证书是否已由链接到其受信任根证书的证书链签名。<filename>root.key</filename>和<filename>intermediate.key</filename>应离线存储以用于创建将来的证书。
   </para>
  </sect2>

 </sect1>

 <sect1 id="ssh-tunnels">
<!--==========================orignal english content==========================
  <title>Secure TCP/IP Connections with <application>SSH</application> Tunnels</title>
____________________________________________________________________________-->
  <title>使用<application>SSH</application>隧道的安全 TCP/IP 连接</title>

<!--==========================orignal english content==========================
  <indexterm zone="ssh-tunnels">
   <primary>ssh</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="ssh-tunnels">
   <primary>ssh</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   It is possible to use <application>SSH</application> to encrypt the network
   connection between clients and a
   <productname>PostgreSQL</productname> server. Done properly, this
   provides an adequately secure network connection, even for non-SSL-capable
   clients.
  </para>
____________________________________________________________________________-->
  <para>
   可以使用<application>SSH</application>来加密客户端和<productname>PostgreSQL</productname>服务器之间的网络连接。如果处理得当，这将提供一个足够安全的网络连接，即使是对那些无 SSL 能力的客户端。
  </para>

<!--==========================orignal english content==========================
  <para>
   First make sure that an <application>SSH</application> server is
   running properly on the same machine as the
   <productname>PostgreSQL</productname> server and that you can log in using
   <command>ssh</command> as some user. Then you can establish a secure
   tunnel with a command like this from the client machine:
<programlisting>
ssh -L 63333:localhost:5432 joe@foo.com
</programlisting>
   The first number in the <option>-L</option> argument, 63333, is the
   port number of your end of the tunnel; it can be any unused port.
   (IANA reserves ports 49152 through 65535 for private use.)  The
   second number, 5432, is the remote end of the tunnel: the port
   number your server is using. The name or IP address between the
   port numbers is the host with the database server you are going to
   connect to, as seen from the host you are logging in to, which
   is <literal>foo.com</literal> in this example. In order to connect
   to the database server using this tunnel, you connect to port 63333
   on the local machine:
<programlisting>
psql -h localhost -p 63333 postgres
</programlisting>
   To the database server it will then look as though you are really
   user <literal>joe</literal> on host <literal>foo.com</literal>
   connecting to <literal>localhost</literal> in that context, and it
   will use whatever authentication procedure was configured for
   connections from this user and host.  Note that the server will not
   think the connection is SSL-encrypted, since in fact it is not
   encrypted between the
   <application>SSH</application> server and the
   <productname>PostgreSQL</productname> server.  This should not pose any
   extra security risk as long as they are on the same machine.
  </para>
____________________________________________________________________________-->
  <para>
   首先确认在<productname>PostgreSQL</productname>服务器的同一台机器上正确运行着一个<application>SSH</application>服务器，并且你可以使用<command>ssh</command>作为某个用户登入。然后你可以从客户端机器采用下面这种形式的命令建立一个安全的隧道：
<programlisting>
ssh -L 63333:localhost:5432 joe@foo.com
</programlisting>
   <option>-L</option>参数中的第一个数（63333）是隧道在你那一端的端口号，它可以是任意未用过的端口（IANA 把端口 49152 到 65535 保留为个人使用）。第二个数（5432）是隧道的远端：你的服务器所使用的端口号。在端口号之间的名字或 IP 地址是你准备连接的数据库服务器的主机，至于你是从哪个主机登入的，在这个例子中则由<literal>foo.com</literal>表示。为了使用这个隧道连接到数据库服务器，你在本地机器上连接到端口 63333：
<programlisting>
psql -h localhost -p 63333 postgres
</programlisting>
   对于数据库服务器，在这个环境中它将把你看做是连接到<literal>localhost</literal>的主机<literal>foo.com</literal>上的真实用户<literal>joe</literal>，并且它会使用被配置用于来自这个用户和主机的连接的认证过程。注意服务器将不会认为连接是 SSL 加密的，因为事实上<application>SSH</application>服务器和<productname>PostgreSQL</productname>服务器之间没有加密。只要它们在同一台机器上，这就不会造成任何额外的安全风险。
  </para>

<!--==========================orignal english content==========================
  <para>
   In order for the
   tunnel setup to succeed you must be allowed to connect via
   <command>ssh</command> as <literal>joe@foo.com</literal>, just
   as if you had attempted to use <command>ssh</command> to create a
   terminal session.
  </para>
____________________________________________________________________________-->
  <para>
   为了让隧道设置成功，你必须允许通过<command>ssh</command>作为<literal>joe@foo.com</literal>连接，就像你已经尝试使用<command>ssh</command>来创建一个终端会话。
  </para>

<!--==========================orignal english content==========================
  <para>
   You could also have set up the port forwarding as
<programlisting>
ssh -L 63333:foo.com:5432 joe@foo.com
</programlisting>
   but then the database server will see the connection as coming in
   on its <literal>foo.com</literal> interface, which is not opened by
   the default setting <literal>listen_addresses =
   'localhost'</literal>.  This is usually not what you want.
  </para>
____________________________________________________________________________-->
  <para>
   你应当也已经设定好了端口转发：
<programlisting>
ssh -L 63333:foo.com:5432 joe@foo.com
</programlisting>
   但是数据库服务器则将会看到连接从它的<literal>foo.com</literal>接口进来，它没有被默认设置<literal>listen_addresses = 'localhost'</literal>所打开。这通常不是你想要的。
  </para>

<!--==========================orignal english content==========================
  <para>
   If you have to <quote>hop</quote> to the database server via some
   login host, one possible setup could look like this:
<programlisting>
ssh -L 63333:db.foo.com:5432 joe@shell.foo.com
</programlisting>
   Note that this way the connection
   from <literal>shell.foo.com</literal>
   to <literal>db.foo.com</literal> will not be encrypted by the SSH
   tunnel.
   SSH offers quite a few configuration possibilities when the network
   is restricted in various ways.  Please refer to the SSH
   documentation for details.
  </para>
____________________________________________________________________________-->
  <para>
   如果你必须通过某个登录主机<quote>跳</quote>到数据库服务器，一个可能的设置看起来像：
<programlisting>
ssh -L 63333:db.foo.com:5432 joe@shell.foo.com
</programlisting>
   注意这种从<literal>shell.foo.com</literal>到<literal>db.foo.com</literal>的连接的方法将不会被 SSH 隧道加密。当网络被限制于各种方法时，SSH 提供了相当多的配置可能性。详情请参考 SSH 的文档。
  </para>

  <tip>
<!--==========================orignal english content==========================
   <para>
    Several other applications exist that can provide secure tunnels using
    a procedure similar in concept to the one just described.
   </para>
____________________________________________________________________________-->
   <para>
    一些其他的应用可以提供安全隧道，它们使用和刚刚描述的 SSH 概念上相似的过程。
   </para>
  </tip>

 </sect1>

 <sect1 id="event-log-registration">
<!--==========================orignal english content==========================
  <title>Registering <application>Event Log</application> on <systemitem
  class="osname">Windows</systemitem></title>
____________________________________________________________________________-->
  <title>在<systemitem class="osname">Windows</systemitem>上注册<application>Event Log</application></title>

<!--==========================orignal english content==========================
  <indexterm zone="event-log-registration">
   <primary>event log</primary>
   <secondary>event log</secondary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="event-log-registration">
   <primary>事件日志</primary>
   <secondary>事件日志</secondary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   To register a <systemitem class="osname">Windows</systemitem>
   <application>event log</application> library with the operating system,
   issue this command:
<screen>
<userinput>regsvr32 <replaceable>pgsql_library_directory</replaceable>/pgevent.dll</userinput>
</screen>
   This creates registry entries used by the event viewer, under the default
   event source named <literal>PostgreSQL</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   要为操作系统注册一个<systemitem class="osname">Windows</systemitem> <application>事件日志</application>库，发出这个命令：
<screen>
<userinput>regsvr32 <replaceable>pgsql_library_directory</replaceable>/pgevent.dll</userinput>
</screen>
   这会创建被事件查看器使用的注册表项，默认事件源命名为<literal>PostgreSQL</literal>。
  </para>

<!--==========================orignal english content==========================
  <para>
   To specify a different event source name (see
   <xref linkend="guc-event-source"/>), use the <literal>/n</literal>
   and <literal>/i</literal> options:
<screen>
<userinput>regsvr32 /n /i:<replaceable>event_source_name</> <replaceable>pgsql_library_directory</>/pgevent.dll</>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要指定一个不同的事件源名称（见<xref linkend="guc-event-source"/>）。使用<literal>/n</literal>和<literal>/i</literal>选项：
<screen>
<userinput>regsvr32 /n /i:<replaceable>event_source_name</replaceable> <replaceable>pgsql_library_directory</replaceable>/pgevent.dll</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To unregister the <application>event log</application> library from
   the operating system, issue this command:
<screen>
<userinput>regsvr32 /u [/i:<replaceable>event_source_name</>] <replaceable>pgsql_library_directory</>/pgevent.dll</>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要从操作系统反注册<application>事件日志</application>库，发出这个命令：
<screen>
<userinput>regsvr32 /u [/i:<replaceable>event_source_name</replaceable>] <replaceable>pgsql_library_directory</replaceable>/pgevent.dll</userinput>
</screen>
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    To enable event logging in the database server, modify
    <xref linkend="guc-log-destination"/> to include
    <literal>eventlog</literal> in <filename>postgresql.conf</filename>.
   </para>
____________________________________________________________________________-->
   <para>
    要启用数据库服务器中的事件日志，在<filename>postgresql.conf</filename>中修改<xref linkend="guc-log-destination"/>来包括<literal>eventlog</literal>。
   </para>
  </note>
 </sect1>

</chapter>

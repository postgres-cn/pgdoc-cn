<!-- doc/src/sgml/auto-explain.sgml -->

<sect1 id="auto-explain" xreflabel="auto_explain">
 <title>auto_explain</title>

 <indexterm zone="auto-explain">
  <primary>auto_explain</primary>
 </indexterm>

 <para>
  <filename>auto_explain</filename>模块提供了一种方式来自动记录慢速语句的执行计划，而不需
  要手工运行<xref linkend="sql-explain">。这在大型应用中追踪未被优化的查询时有用。
 </para>

 <para>
  该模块没有提供 SQL 可访问的函数。要使用它，简单地将它载入服务器。你可以把它载入到一个单独的
  会话：

<programlisting>
LOAD 'auto_explain';
</programlisting>

  （你必须作为超级用户来这样做）。更典型的用法是通过在<filename>postgresql.conf</>的<xref linkend="guc-session-preload-libraries">或<xref linkend="guc-shared-preload-libraries">参数中包括<literal>auto_explain</>将它预先
  载入到某些或者所有会话中。然后你就可以追踪那些出乎意料地慢的查询，而不管它们何时发生。当然为
  此会付出一些额外的负荷作为代价。
 </para>

 <sect2>
  <title>配置参数</title>

 <para>
  有几个配置参数用来控制<filename>auto_explain</filename>的行为。注意默认行为是什么也不做，因此如果你想要任何结果就必须至少设置<varname>auto_explain.log_min_duration</varname>。
 </para>

  <variablelist>
   <varlistentry>
    <term>
     <varname>auto_explain.log_min_duration</varname> (<type>integer</type>)
    <indexterm>
     <primary><varname>auto_explain.log_min_duration</>配置参数</primary>
    </indexterm>
    </term>
    <listitem>
     <para>
      <varname>auto_explain.log_min_duration</varname>是最小语句执行时间（以毫秒计），这将导致语句的计划被记录。设置这个参数为零将记录所有计划。负一（默认值）禁用记录计划。例如，如果你将它设置为<literal>250ms</literal>，则所有运行时间等于或超过 250ms 的语句将被记录。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_analyze</varname> (<type>boolean</type>)
    <indexterm>
     <primary><varname>auto_explain.log_analyze</>配置参数</primary>
    </indexterm>
    </term>
    <listitem>
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_analyze</varname>导致<command>EXPLAIN ANALYZE</>输出（而不仅仅是<command>EXPLAIN</>输出）被打印。默认情况下这个参数是关闭的。只有超级用户能够改变这个设置。
     </para>
     <note>
      <para>
       当这个参数为打开时，对所有被执行的语句将引起对每个计划节点的计时，不管它们是否运行得足够长以至于被记录。这可能对性能有极度负面的影响。
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_buffers</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_buffers</>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_buffers</varname>控制是否打印
      缓冲区使用统计信息；它等效于<command>EXPLAIN</>的<literal>BUFFERS</>选项。除非
      <varname>auto_explain.log_analyze</>参数被设置，否则这个参数没有效果。这个参数默
      认情况下是关闭的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_timing</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_timing</>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_timing</varname>控制是否打印每
      个结点上的计时信息；它等效于<command>EXPLAIN</>的<literal>TIMING</>选项。重复读取
      系统锁的开销在某些系统上可能会显著地拖慢查询，因此当只需要实际行计数而非确切时间时，关闭
      这个参数将会很有帮助。只有当<varname>auto_explain.log_analyze</varname>也被启用
      时这个参数才有效。这个参数默认情况下是打开的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_triggers</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_triggers</>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_triggers</varname>会导致触发
      器执行统计信息被包括在内。只有当<varname>auto_explain.log_analyze</varname>也被
      启用时这个参数才有效。这个参数默认情况下是关闭的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_verbose</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_verbose</>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_verbose</varname>控制是否打印很长的详细信息；它等效于<command>EXPLAIN</>的<literal>VERBOSE</>选项。这个参数默认情况下是关闭的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_format</varname> (<type>enum</type>)
     <indexterm>
      <primary><varname>auto_explain.log_format</>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <varname>auto_explain.log_format</varname>选择要使用的<command>EXPLAIN</>输出格式。允许的值是<literal>text</literal>、<literal>xml</literal>、<literal>json</literal>和<literal>yaml</literal>。默认是文本形式。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_nested_statements</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_nested_statements</>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <varname>auto_explain.log_nested_statements</varname>导致嵌套语句（在一个函数内执行的语句）会被考虑在记录范围之内。当它被关闭时，只有顶层查询计划被记录。这个参数默认情况下是关闭的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   在普通用法中，这些参数都在<filename>postgresql.conf</>中设置，不过超级用户可以在他们自己的会话中随时修改这些参数。典型的用法可能是：
  </para>

<programlisting>
# postgresql.conf
session_preload_libraries = 'auto_explain'

auto_explain.log_min_duration = '3s'
</programlisting>
 </sect2>

 <sect2>
  <title>例子</title>

<programlisting>
postgres=# LOAD 'auto_explain';
postgres=# SET auto_explain.log_min_duration = 0;
postgres=# SET auto_explain.log_analyze = true;
postgres=# SELECT count(*)
           FROM pg_class, pg_index
           WHERE oid = indrelid AND indisunique;
</programlisting>

  <para>
   这可能会产生这样的日志输出：
  </para>

<screen><![CDATA[
LOG:  duration: 3.651 ms  plan:
  Query Text: SELECT count(*)
              FROM pg_class, pg_index
              WHERE oid = indrelid AND indisunique;
  Aggregate  (cost=16.79..16.80 rows=1 width=0) (actual time=3.626..3.627 rows=1 loops=1)
    ->  Hash Join  (cost=4.17..16.55 rows=92 width=0) (actual time=3.349..3.594 rows=92 loops=1)
          Hash Cond: (pg_class.oid = pg_index.indrelid)
          ->  Seq Scan on pg_class  (cost=0.00..9.55 rows=255 width=4) (actual time=0.016..0.140 rows=255 loops=1)
          ->  Hash  (cost=3.02..3.02 rows=92 width=4) (actual time=3.238..3.238 rows=92 loops=1)
                Buckets: 1024  Batches: 1  Memory Usage: 4kB
                ->  Seq Scan on pg_index  (cost=0.00..3.02 rows=92 width=4) (actual time=0.008..3.187 rows=92 loops=1)
                      Filter: indisunique
]]></screen>
 </sect2>

 <sect2>
  <title>作者</title>

  <para>
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>
  </para>
 </sect2>

</sect1>

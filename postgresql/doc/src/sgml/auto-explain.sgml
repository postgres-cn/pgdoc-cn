<!-- doc/src/sgml/auto-explain.sgml -->

<sect1 id="auto-explain" xreflabel="auto_explain">
 <title>auto_explain</title>

 <indexterm zone="auto-explain">
  <primary>auto_explain</primary>
 </indexterm> 

 <!--
<para>
  The <filename>auto_explain</filename> module provides a means for
  logging execution plans of slow statements automatically, without
  having to run <xref linkend="sql-explain">
  by hand.  This is especially helpful for tracking down un-optimized queries
  in large applications.
 </para>
-->
<para>
   <filename>auto_explain</filename>模块自动提供一种慢语句记录执行计划的方法 
没有手动运行<xref linkend="sql-explain">。
这对于在大型应用程序中跟踪未优化查询尤其有用。
</para>


<para>
   <!--
  The module provides no SQL-accessible functions.  To use it, simply
  load it into the server.  You can load it into an individual session:
  -->
  该模块没有提供SQL访问函数。为了使用它，简单加载它到服务器中。
  你可以加载它到独立会话中：
  
<programlisting>
LOAD 'auto_explain';
</programlisting>
  <!--
  (You must be superuser to do that.)  More typical usage is to preload
  it into some or all sessions by including <literal>auto_explain</> in
  <xref linkend="guc-session-preload-libraries"> or
  <xref linkend="guc-shared-preload-libraries"> in
  <filename>postgresql.conf</>.  Then you can track unexpectedly slow queries
  no matter when they happen.  Of course there is a price in overhead for
  that.
  -->
  （你一定是超级用户才能这样做。）
  更典型的用法是预先加载它到
  在<filename>postgresql.conf</>中<xref linkend="guc-session-preload-libraries">
  或<xref linkend="guc-shared-preload-libraries">中
    包含<literal>auto_explain</>的一些或者所有会话。然后，
你可以出乎意料地跟踪无论什么时候会发生的慢查询。
当然有价值开销。
 </para>

 <sect2>
 <!--
  <title>Configuration Parameters</title>
  -->
    <title>配置参数</title>

 <!--
<para>
  There are several configuration parameters that control the behavior of
  <filename>auto_explain</filename>.  Note that the default behavior is
  to do nothing, so you must set at least
  <varname>auto_explain.log_min_duration</varname> if you want any results.
 </para>
-->
<para>
    有几个配置参数控制<filename>auto_explain</filename>的操作。注意，
缺省操作是什么也不做，如果你想要任何结果，
那么你必须至少设置<varname>auto_explain.log_min_duration</varname>。
</para>

  <variablelist>
   <varlistentry>
    <term>
     <varname>auto_explain.log_min_duration</varname> (<type>integer</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_min_duration</> configuration parameter</primary>
 -->
 <primary><varname>auto_explain.log_min_duration</>配置参数</primary>
    </indexterm>
    <listitem>
     <!--
<para>
      <varname>auto_explain.log_min_duration</varname> is the minimum statement
      execution time, in milliseconds, that will cause the statement's plan to
      be logged. Setting this to zero logs all plans. Minus-one (the default)
      disables logging of plans.  For example, if you set it to
      <literal>250ms</literal> then all statements that run 250ms or longer
      will be logged. Only superusers can change this setting.
     </para>
-->
<para>
    <varname>auto_explain.log_min_duration</varname>是最小声明执行时间，
以毫秒为单位，将导致语句的计划被记录。设置它为零记录所有计划。
减一（缺省）禁止计划的记录。比如，如果你设置它为<literal>250ms</literal>，
那么运行250ms或者更长时间的所有语句将被记录。只有超级用户可以改变这个设置。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_analyze</varname> (<type>boolean</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_analyze</> configuration parameter</primary>
 -->
 <primary><varname>auto_explain.log_analyze</>配置参数</primary>
    </indexterm>
    <listitem>
     <!--
<para>
      <varname>auto_explain.log_analyze</varname> causes <command>EXPLAIN ANALYZE</>
      output, rather than just <command>EXPLAIN</> output, to be printed
      when an execution plan is logged. This parameter is off by default.
      Only superusers can change this setting.
     </para>
-->
<para>
   <varname>auto_explain.log_analyze</varname>导致<command>EXPLAIN ANALYZE</>
    输出，而不是<command>EXPLAIN</>输出，当记录一个执行计划时，被打印。
该参数缺省是关闭的。只有超级用户可以改变这个设置。
</para>
     <note>
      <!--
<para>
       When this parameter is on, per-plan-node timing occurs for all
       statements executed, whether or not they run long enough to actually
       get logged.  This can have an extremely negative impact on performance.
       Turning off <varname>auto_explain.log_timing</varname> ameliorates the
       performance cost, at the price of obtaining less information.
      </para>
-->
<para>
     当该参数打开时，为所有执行语句产生每个计划节点时间，
 无论他们是否运行足够长的时间来获得记录。
 这会对性能产生极其不利的影响。关闭<varname>auto_explain.log_timing</varname>
 改善性能成本，代价是获取较少的信息。
</para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>

     <varname>auto_explain.log_buffers</varname> (<type>boolean</type>)
    </term>
    <indexterm>

<!--
     <primary><varname>auto_explain.log_buffers</> configuration parameter</primary>
 -->
 <primary><varname>auto_explain.log_buffers</>配置参数</primary>
    </indexterm>

    <listitem>
     <!--
<para>
      <varname>auto_explain.log_buffers</varname> controls whether buffer
      usage statistics are printed when an execution plan is logged; it's
      equivalent to the <literal>BUFFERS</> option of <command>EXPLAIN</>.
      This parameter has no effect
      unless <varname>auto_explain.log_analyze</varname> is enabled.
      This parameter is off by default.
      Only superusers can change this setting.
     </para>
-->
<para>
<varname>auto_explain.log_buffers</varname>控制记录一个执行计划时，
是否输出缓存使用状态；它相当于<command>EXPLAIN</>的
<literal>BUFFERS</>选项。
该参数不起作用除非启用了<varname>auto_explain.log_analyze</>。
该参数缺省是关闭的。只有超级用户可以改变这个设置。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>

     <varname>auto_explain.log_timing</varname> (<type>boolean</type>)
    </term>
    <indexterm>

<!--
     <primary><varname>auto_explain.log_timing</> configuration parameter</primary>
 -->
 <primary><varname>auto_explain.log_timing</>配置参数</primary>
    </indexterm>

    <listitem>
     <!--
<para>
      <varname>auto_explain.log_timing</varname> controls whether per-node
      timing information is printed when an execution plan is logged; it's
      equivalent to the <literal>TIMING</> option of <command>EXPLAIN</>.
      The overhead of repeatedly reading the system clock can slow down
      queries significantly on some systems, so it may be useful to set this
      parameter to off when only actual row counts, and not exact times, are
      needed.
      This parameter has no effect
      unless <varname>auto_explain.log_analyze</varname> is enabled.
      This parameter is on by default.
      Only superusers can change this setting.
      </para>
-->
<para>
<varname>auto_explain.log_timing</varname>控制记录执行计划时，
是否输出每节点的时间信息；它相当于<command>EXPLAIN</>的<literal>TIMING</>
选项。反复读取系统时钟的开销可以显著减缓一些系统上的查询，
因此当计算实际行时，设置该参数为关闭是非常有用的，不需要确切时间。
当启动<varname>auto_explain.log_analyze</varname>时，该参数是有效的。
缺省该参数是打开的。只有超级用户可以改变该设置。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_triggers</varname> (<type>boolean</type>)
     <indexterm>
<!-- 
      <primary><varname>auto_explain.log_triggers</> configuration parameter</primary>
-->
      <primary><varname>auto_explain.log_triggers</>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!-- 
     <para>
      <varname>auto_explain.log_triggers</varname> causes trigger
      execution statistics to be included when an execution plan is logged.
      This parameter has no effect
      unless <varname>auto_explain.log_analyze</varname> is enabled.
      This parameter is off by default.
      Only superusers can change this setting.
     </para>
-->
<para>
<varname>auto_explain.log_triggers</varname>导致记录执行计划时包括触发器执行统计。
这个参数没什么影响，除非启用了<varname>auto_explain.log_analyze</varname>。
该参数缺省是关闭的。只有超级用户可以改变这个设置。
</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <varname>auto_explain.log_verbose</varname> (<type>boolean</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_verbose</> configuration parameter</primary>
 -->
  <primary><varname>auto_explain.log_verbose</>配置参数</primary>
    </indexterm>
    <listitem>
     <!--
<para>
      <varname>auto_explain.log_verbose</varname> controls whether verbose
      details are printed when an execution plan is logged; it's
      equivalent to the <literal>VERBOSE</> option of <command>EXPLAIN</>.
      This parameter is off by default.
      Only superusers can change this setting.
     </para>
-->
<para>
<varname>auto_explain.log_verbose</varname>控制记录日志文件时，
是否输出详细的细节；它相当于<command>EXPLAIN</>的<literal>VERBOSE</>
选项。只有超级用户可以改变这个设置。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_format</varname> (<type>enum</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_format</> configuration parameter</primary>
 -->
 <primary><varname>auto_explain.log_format</>配置参数</primary>
    </indexterm>
    <listitem>
     <!--
<para>
      <varname>auto_explain.log_format</varname> selects the
      <command>EXPLAIN</> output format to be used.
      The allowed values are <literal>text</literal>, <literal>xml</literal>,
      <literal>json</literal>, and <literal>yaml</literal>.  The default is text.
      Only superusers can change this setting.
     </para>
-->
<para>
    <varname>auto_explain.log_format</varname>选择使用
      <command>EXPLAIN</>输出格式。
  允许值是<literal>text</literal>,<literal>xml</literal>,
      <literal>json</literal>和<literal>yaml</literal>。
  缺省是text。只有超级用户可以改变这个设置。
</para>
    </listitem>
   </varlistentry>

   
   <varlistentry>
    <term>
     <varname>auto_explain.log_nested_statements</varname> (<type>boolean</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_nested_statements</> configuration parameter</primary>
 -->
 <primary><varname>auto_explain.log_nested_statements</>配置参数</primary>
    </indexterm>
    <listitem>
     <!--
<para>
      <varname>auto_explain.log_nested_statements</varname> causes nested
      statements (statements executed inside a function) to be considered
      for logging.  When it is off, only top-level query plans are logged. This
      parameter is off by default. Only superusers can change this setting.
     </para>
-->
<para>
   <varname>auto_explain.log_nested_statements</varname>为了记录导致嵌套语句（语句在函数内执行）。
   当它是关闭时，只记录顶级查询计划。
   该参数缺省是关闭的。
   只有超级用户可以改变这个设置。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <!--
<para>
   In ordinary usage, these parameters are set
   in <filename>postgresql.conf</>, although superusers can alter them
   on-the-fly within their own sessions.
   Typical usage might be:
  </para>
-->
<para>
在普通使用中，在<filename>postgresql.conf</>中设置这些参数，
尽管超级用户可以在他们自己的会话中在运行时修改它们。典型的用法是：
</para>

<programlisting>
# postgresql.conf
session_preload_libraries = 'auto_explain'

auto_explain.log_min_duration = '3s'
</programlisting>
 </sect2>

 <sect2>
 <!--
  <title>Example</title>
  -->
  <title>例子</title>

<programlisting>
postgres=# LOAD 'auto_explain';
postgres=# SET auto_explain.log_min_duration = 0;
postgres=# SET auto_explain.log_analyze = true;
postgres=# SELECT count(*)
           FROM pg_class, pg_index
           WHERE oid = indrelid AND indisunique;
</programlisting>

  <!--
<para>
   This might produce log output such as:
  </para>
-->
<para>
   这可能产生日志输出比如：
</para>

<screen><![CDATA[
LOG:  duration: 3.651 ms  plan:
  Query Text: SELECT count(*)
              FROM pg_class, pg_index
              WHERE oid = indrelid AND indisunique;
  Aggregate  (cost=16.79..16.80 rows=1 width=0) (actual time=3.626..3.627 rows=1 loops=1)
    ->  Hash Join  (cost=4.17..16.55 rows=92 width=0) (actual time=3.349..3.594 rows=92 loops=1)
          Hash Cond: (pg_class.oid = pg_index.indrelid)
          ->  Seq Scan on pg_class  (cost=0.00..9.55 rows=255 width=4) (actual time=0.016..0.140 rows=255 loops=1)
          ->  Hash  (cost=3.02..3.02 rows=92 width=4) (actual time=3.238..3.238 rows=92 loops=1)
                Buckets: 1024  Batches: 1  Memory Usage: 4kB
                ->  Seq Scan on pg_index  (cost=0.00..3.02 rows=92 width=4) (actual time=0.008..3.187 rows=92 loops=1)
                      Filter: indisunique
]]></screen>
 </sect2>

 <sect2>
 <!--
  <title>Author</title>
  -->
  <title>作者</title>

  
<para>
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>
  </para>
 </sect2>

</sect1>

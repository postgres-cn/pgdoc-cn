<!-- doc/src/sgml/user-manag.sgml -->

<chapter id="user-manag">
<!--==========================orignal english content==========================
 <title>Database Roles</title>
____________________________________________________________________________-->
 <title>数据库角色</title>

<!--==========================orignal english content==========================
 <para>
  <productname>PostgreSQL</productname> manages database access permissions
  using the concept of <firstterm>roles</firstterm>.  A role can be thought of as
  either a database user, or a group of database users, depending on how
  the role is set up.  Roles can own database objects (for example, tables
  and functions) and can assign privileges on those objects to other roles to
  control who has access to which objects.  Furthermore, it is possible
  to grant <firstterm>membership</firstterm> in a role to another role, thus
  allowing the member role to use privileges assigned to another role.
 </para>
____________________________________________________________________________-->
 <para>
  <productname>PostgreSQL</productname>使用<firstterm>角色</firstterm>的概念管理数据库访问权限。一个角色可以被看成是一个数据库用户或者是一个数据库用户组，这取决于角色被怎样设置。角色可以拥有数据库对象（例如，表和函数）并且能够把那些对象上的权限赋予给其他角色来控制谁能访问哪些对象。此外，还可以把一个角色中的<firstterm>成员资格</firstterm>授予给另一个角色，这样允许成员角色使用被赋予给另一个角色的权限。
 </para>

<!--==========================orignal english content==========================
 <para>
  The concept of roles subsumes the concepts of <quote>users</quote> and
  <quote>groups</quote>.  In <productname>PostgreSQL</productname> versions
  before 8.1, users and groups were distinct kinds of entities, but now
  there are only roles.  Any role can act as a user, a group, or both.
 </para>
____________________________________________________________________________-->
 <para>
  角色的概念把<quote>用户</quote>和<quote>组</quote>的概念都包括在内。在<productname>PostgreSQL</productname>版本 8.1 之前，用户和组是完全不同的两种实体，但是现在只有角色。任意角色都可以扮演用户、组或者两者。
 </para>

<!--==========================orignal english content==========================
 <para>
  This chapter describes how to create and manage roles.
  More information about the effects of role privileges on various
  database objects can be found in <xref linkend="ddl-priv"/>.
 </para>
____________________________________________________________________________-->
 <para>
  本章描述如何创建和管理角色。更多角色权限在多个数据库对象上的效果可以在<xref linkend="ddl-priv"/>中找到。
 </para>

 <sect1 id="database-roles">
<!--==========================orignal english content==========================
  <title>Database Roles</title>
____________________________________________________________________________-->
  <title>数据库角色</title>

<!--==========================orignal english content==========================
  <indexterm zone="database-roles">
   <primary>role</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="database-roles">
   <primary>角色</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm zone="database-roles">
   <primary>user</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="database-roles">
   <primary>用户</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>CREATE ROLE</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>CREATE ROLE</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>DROP ROLE</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>DROP ROLE</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   Database roles are conceptually completely separate from
   operating system users. In practice it might be convenient to
   maintain a correspondence, but this is not required. Database roles
   are global across a database cluster installation (and not
   per individual database). To create a role use the <xref
   linkend="sql-createrole"/> SQL command:
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
   <replaceable>name</replaceable> follows the rules for SQL
   identifiers: either unadorned without special characters, or
   double-quoted.  (In practice, you will usually want to add additional
   options, such as <literal>LOGIN</literal>, to the command.  More details appear
   below.)  To remove an existing role, use the analogous
   <xref linkend="sql-droprole"/> command:
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
  </para>
____________________________________________________________________________-->
  <para>
   数据库角色在概念上已经完全与操作系统用户独立开来。事实上可能维护一个对应关系会比较方便，但是这并非必需。数据库角色在一个数据库集簇安装范围内是全局的（而不是独立数据库内）。要创建一个角色，可使用<xref linkend="sql-createrole"/> SQL 命令：
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
   <replaceable>name</replaceable>遵循 SQL 标识符的规则：或是未经装饰没有特殊字符，或是用双引号包围（实际上，你将总是给该命令要加上额外选项，例如<literal>LOGIN</literal>。更多细节可见下文）。要移除一个已有的角色，使用相似的<xref linkend="sql-droprole"/>命令：
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
  </para>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>createuser</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>createuser</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>dropuser</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>dropuser</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   For convenience, the programs <xref linkend="app-createuser"/>
   and <xref linkend="app-dropuser"/> are provided as wrappers
   around these SQL commands that can be called from the shell command
   line:
<synopsis>
createuser <replaceable>name</replaceable>
dropuser <replaceable>name</replaceable>
</synopsis>
  </para>
____________________________________________________________________________-->
  <para>
   为了方便，<xref linkend="app-createuser"/>和<xref linkend="app-dropuser"/>程序被提供作为这些 SQL 命令的包装器，它们可以从 shell 命令行调用：
<synopsis>
createuser <replaceable>name</replaceable>
dropuser <replaceable>name</replaceable>
</synopsis>
  </para>

<!--==========================orignal english content==========================
  <para>
   To determine the set of existing roles, examine the <structname>pg_roles</structname>
   system catalog, for example
<synopsis>
SELECT rolname FROM pg_roles;
</synopsis>
   The <xref linkend="app-psql"/> program's <literal>\du</literal> meta-command
   is also useful for listing the existing roles.
  </para>
____________________________________________________________________________-->
  <para>
   要决定现有角色的集合，检查<structname>pg_roles</structname>系统目录，例如：
<synopsis>
SELECT rolname FROM pg_roles;
</synopsis>
   <xref linkend="app-psql"/>程序的<literal>\du</literal>元命令也可以用来列出现有角色。
  </para>

<!--==========================orignal english content==========================
  <para>
   In order to bootstrap the database system, a freshly initialized
   system always contains one predefined role. This role is always
   a <quote>superuser</quote>, and by default (unless altered when running
   <command>initdb</command>) it will have the same name as the
   operating system user that initialized the database
   cluster. Customarily, this role will be named
   <literal>postgres</literal>. In order to create more roles you
   first have to connect as this initial role.
  </para>
____________________________________________________________________________-->
  <para>
   为了引导数据库系统，一个刚刚被初始化好的系统总是包含一个预定义角色。这个角色总是一个<quote>superuser</quote>，并且默认情况下（除非在运行<command>initdb</command>时修改）它的名字和初始化数据库集簇的操作系统用户相同。习惯上，这个角色将被命名为<literal>postgres</literal>。为了创建更多角色，你首先必须以初始角色的身份连接。
  </para>

<!--==========================orignal english content==========================
  <para>
   Every connection to the database server is made using the name of some
   particular role, and this role determines the initial access privileges for
   commands issued in that connection.
   The role name to use for a particular database
   connection is indicated by the client that is initiating the
   connection request in an application-specific fashion. For example,
   the <command>psql</command> program uses the
   <option>-U</option> command line option to indicate the role to
   connect as.  Many applications assume the name of the current
   operating system user by default (including
   <command>createuser</command> and <command>psql</command>).  Therefore it
   is often convenient to maintain a naming correspondence between
   roles and operating system users.
  </para>
____________________________________________________________________________-->
  <para>
   每一个到数据库服务器的连接都是使用某个特定角色名建立的，并且这个角色决定发起连接的命令的初始访问权限。要使用一个特定数据库连接的角色名由客户端指示，该客户端以一种应用相关的风格发起连接请求。例如，<command>psql</command>程序使用<option>-U</option>命令行选项来指定要以哪个角色连接。很多应用假定该名字默认是当前操作系统用户（包括<command>createuser</command>和<command>psql</command>）。因此在角色和操作系统用户之间维护一个名字对应关系通常是很方便的。
  </para>

<!--==========================orignal english content==========================
  <para>
   The set of database roles a given client connection can connect as
   is determined by the client authentication setup, as explained in
   <xref linkend="client-authentication"/>. (Thus, a client is not
   limited to connect as the role matching
   its operating system user, just as a person's login name
   need not match his or her real name.)  Since the role
   identity determines the set of privileges available to a connected
   client, it is important to carefully configure privileges when setting up
   a multiuser environment.
  </para>
____________________________________________________________________________-->
  <para>
   一个给定客户端连接能够用来连接的数据库角色的集合由该客户端的认证设置决定，这些在<xref linkend="client-authentication"/>中有解释（因此，一个客户端不止限于以匹配其操作系统用户的角色连接，就像一个人的登录名不需要匹配她的真实名字一样）。因为角色身份决定一个已连接客户端可用的权限集合，在设置一个多用户环境时要小心地配置权限。
  </para>
 </sect1>

 <sect1 id="role-attributes">
<!--==========================orignal english content==========================
  <title>Role Attributes</title>
____________________________________________________________________________-->
  <title>角色属性</title>

<!--==========================orignal english content==========================
   <para>
    A database role can have a number of attributes that define its
    privileges and interact with the client authentication system.

    <variablelist>
     <varlistentry>
      <term>login privilege<indexterm><primary>login privilege</primary></indexterm></term>
      <listitem>
       <para>
        Only roles that have the <literal>LOGIN</literal> attribute can be used
        as the initial role name for a database connection.  A role with
        the <literal>LOGIN</literal> attribute can be considered the same
        as a <quote>database user</quote>.  To create a role with login privilege,
        use either:
<programlisting>
CREATE ROLE <replaceable>name</replaceable> LOGIN;
CREATE USER <replaceable>name</replaceable>;
</programlisting>
        (<command>CREATE USER</command> is equivalent to <command>CREATE ROLE</command>
        except that <command>CREATE USER</command> includes <literal>LOGIN</literal> by
        default, while <command>CREATE ROLE</command> does not.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>superuser status<indexterm><primary>superuser</primary></indexterm></term>
      <listitem>
       <para>
        A database superuser bypasses all permission checks, except the right
        to log in.  This is a dangerous privilege and should not be used
        carelessly; it is best to do most of your work as a role that is not a
        superuser.  To create a new database superuser, use <literal>CREATE
        ROLE <replaceable>name</replaceable> SUPERUSER</literal>.  You must do
        this as a role that is already a superuser.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>database creation<indexterm><primary>database</primary><secondary>privilege to create</secondary></indexterm></term>
      <listitem>
       <para>
        A role must be explicitly given permission to create databases
        (except for superusers, since those bypass all permission
        checks). To create such a role, use <literal>CREATE ROLE
        <replaceable>name</replaceable> CREATEDB</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>role creation<indexterm><primary>role</primary><secondary>privilege to create</secondary></indexterm></term>
      <listitem>
       <para>
        A role must be explicitly given permission to create more roles
        (except for superusers, since those bypass all permission
        checks). To create such a role, use <literal>CREATE ROLE
        <replaceable>name</replaceable> CREATEROLE</literal>.
        A role with <literal>CREATEROLE</literal> privilege can alter and drop
        other roles, too, as well as grant or revoke membership in them.
        However, to create, alter, drop, or change membership of a
        superuser role, superuser status is required;
        <literal>CREATEROLE</literal> is insufficient for that.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>initiating replication<indexterm><primary>role</primary><secondary>privilege to initiate replication</secondary></indexterm></term>
      <listitem>
       <para>
        A role must explicitly be given permission to initiate streaming
        replication (except for superusers, since those bypass all permission
        checks). A role used for streaming replication must
        have <literal>LOGIN</literal> permission as well. To create such a role, use
        <literal>CREATE ROLE <replaceable>name</replaceable> REPLICATION
        LOGIN</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>password<indexterm><primary>password</primary></indexterm></term>
      <listitem>
       <para>
        A password is only significant if the client authentication
        method requires the user to supply a password when connecting
        to the database. The <option>password</option> and
        <option>md5</option> authentication methods
        make use of passwords. Database passwords are separate from
        operating system passwords. Specify a password upon role
        creation with <literal>CREATE ROLE
        <replaceable>name</replaceable> PASSWORD '<replaceable>string</replaceable>'</literal>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    A role's attributes can be modified after creation with
    <command>ALTER ROLE</command>.<indexterm><primary>ALTER ROLE</primary></indexterm>
    See the reference pages for the <xref linkend="sql-createrole"/>
    and <xref linkend="sql-alterrole"/> commands for details.
   </para>
____________________________________________________________________________-->
   <para>
    一个数据库角色可以有一些属性，它们定义角色的权限并且与客户端认证系统交互。

    <variablelist>
     <varlistentry>
      <term>login privilege<indexterm><primary>login privilege</primary></indexterm></term>
      <listitem>
       <para>
        只有具有<literal>LOGIN</literal>属性的角色才能被用于一个数据库连接的初始角色名称。一个带有<literal>LOGIN</literal>属性的角色可以被认为和一个<quote>数据库用户</quote>相同。要创建一个带有登录权限的角色，使用两者之一：
<programlisting>
CREATE ROLE <replaceable>name</replaceable> LOGIN;
CREATE USER <replaceable>name</replaceable>;
</programlisting>
        （<command>CREATE USER</command>和<command>CREATE ROLE</command>等效，除了<command>CREATE USER</command>默认假定有<literal>LOGIN</literal>，而<command>CREATE ROLE</command>不这样认为）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>superuser status<indexterm><primary>superuser</primary></indexterm></term>
      <listitem>
       <para>
        一个数据库超级用户会绕开所有权限检查，除了登入的权利。这是一个危险的权限并且应该小心使用，最好用一个不是超级用户的角色来完成你的大部分工作。要创建一个新数据库超级用户，使用<literal>CREATE ROLE <replaceable>name</replaceable> SUPERUSER</literal>。你必须作为一个超级用户来完成这些。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>database creation<indexterm><primary>database</primary><secondary>privilege to create</secondary></indexterm></term>
      <listitem>
       <para>
        一个角色必须被显式给予权限才能创建数据库（除了超级用户，因为它们会绕开所有权限检查）。要创建这样一个角色，使用<literal>CREATE ROLE <replaceable>name</replaceable> CREATEDB</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>role creation<indexterm><primary>role</primary><secondary>privilege to create</secondary></indexterm></term>
      <listitem>
       <para>
        一个角色必须被显式给予权限才能创建更多角色（除了超级用户，因为它们会绕开所有权限检查）。要创建这样一个角色，使用<literal>CREATE ROLE <replaceable>name</replaceable> CREATEROLE</literal>。一个带有<literal>CREATEROLE</literal>权限的角色也可以修改和删除其他角色，还可以授予或回收角色中的成员关系。然而，要创建、修改、删除或修改一个超级用户角色的成员关系，需要以超级用户的身份操作。<literal>CREATEROLE</literal>不足以完成这一切。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>initiating replication<indexterm><primary>role</primary><secondary>privilege to initiate replication</secondary></indexterm></term>
      <listitem>
       <para>
        一个角色必须被显式给予权限才能发起流复制（除了超级用户，因为它们会绕开所有权限检查）。一个被用于流复制的角色必须也具有<literal>LOGIN</literal>权限。要创建这样一个角色，使用<literal>CREATE ROLE <replaceable>name</replaceable> REPLICATION LOGIN</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>password<indexterm><primary>password</primary></indexterm></term>
      <listitem>
       <para>
        只有当客户端认证方法要求用户在连接数据库时提供一个口令时，一个口令才有意义。<option>password</option>和<option>md5</option>认证方法使用口令。数据库口令与操作系统命令独立。在角色创建时指定一个口令：<literal>CREATE ROLE <replaceable>name</replaceable> PASSWORD '<replaceable>string</replaceable>'</literal>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    在创建后可以用<command>ALTER ROLE</command>修改一个角色属性。<indexterm><primary>ALTER ROLE</primary></indexterm><xref linkend="sql-createrole"/>和<xref linkend="sql-alterrole"/>命令的细节可见参考页。
   </para>

  <tip>
<!--==========================orignal english content==========================
   <para>
    It is good practice to create a role that has the <literal>CREATEDB</literal>
    and <literal>CREATEROLE</literal> privileges, but is not a superuser, and then
    use this role for all routine management of databases and roles.  This
    approach avoids the dangers of operating as a superuser for tasks that
    do not really require it.
   </para>
____________________________________________________________________________-->
   <para>
    一个好习惯是创建一个具有<literal>CREATEDB</literal>和<literal>CREATEROLE</literal>权限的角色，而不是创建一个超级用户，并且然后用这个角色来完成对数据库和角色的例行管理。这种方法避免了在非必要时作为超级用户操作任务的风险。
   </para>
  </tip>

<!--==========================orignal english content==========================
  <para>
   A role can also have role-specific defaults for many of the run-time
   configuration settings described in <xref
   linkend="runtime-config"/>.  For example, if for some reason you
   want to disable index scans (hint: not a good idea) anytime you
   connect, you can use:
<programlisting>
ALTER ROLE myname SET enable_indexscan TO off;
</programlisting>
   This will save the setting (but not set it immediately).  In
   subsequent connections by this role it will appear as though
   <literal>SET enable_indexscan TO off</literal> had been executed
   just before the session started.
   You can still alter this setting during the session; it will only
   be the default. To remove a role-specific default setting, use
   <literal>ALTER ROLE <replaceable>rolename</replaceable> RESET <replaceable>varname</replaceable></literal>.
   Note that role-specific defaults attached to roles without
   <literal>LOGIN</literal> privilege are fairly useless, since they will never
   be invoked.
  </para>
____________________________________________________________________________-->
  <para>
   对于<xref linkend="runtime-config"/>中描述的运行时配置设置，一个角色也可以有角色相关的默认值。例如，如果出于某些原因你希望在每次连接时禁用索引扫描（提示：不是好主意），你可以使用：
<programlisting>
ALTER ROLE myname SET enable_indexscan TO off;
</programlisting>
   这将保存设置（但是不会立刻设置它）。在这个角色的后续连接中，它就表现得像在会话开始之前执行过<literal>SET enable_indexscan TO off</literal>。你也可以在会话期间改变该设置，它将只是作为默认值。要移除一个角色相关的默认设置，使用<literal>ALTER ROLE <replaceable>rolename</replaceable> RESET <replaceable>varname</replaceable></literal>。注意附加到没有<literal>LOGIN</literal>权限的角色的角色相关默认值相当无用，因为它们从不会被调用。
  </para>
 </sect1>

 <sect1 id="role-membership">
<!--==========================orignal english content==========================
  <title>Role Membership</title>
____________________________________________________________________________-->
  <title>角色成员关系</title>

<!--==========================orignal english content==========================
  <indexterm zone="role-membership">
   <primary>role</primary><secondary>membership in</secondary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="role-membership">
   <primary>role</primary><secondary>membership in</secondary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   It is frequently convenient to group users together to ease
   management of privileges: that way, privileges can be granted to, or
   revoked from, a group as a whole.  In <productname>PostgreSQL</productname>
   this is done by creating a role that represents the group, and then
   granting <firstterm>membership</firstterm> in the group role to individual user
   roles.
  </para>
____________________________________________________________________________-->
  <para>
   把用户分组在一起来便于管理权限常常很方便：那样，权限可以被授予一整个组或从一整个组回收。在<productname>PostgreSQL</productname>中通过创建一个表示组的角色来实现，并且然后将在该组角色中的<firstterm>成员关系</firstterm>授予给单独的用户角色。
  </para>

<!--==========================orignal english content==========================
  <para>
   To set up a group role, first create the role:
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
   Typically a role being used as a group would not have the <literal>LOGIN</literal>
   attribute, though you can set it if you wish.
  </para>
____________________________________________________________________________-->
  <para>
   要建立一个组角色，首先创建该角色：
<synopsis>
CREATE ROLE <replaceable>name</replaceable>;
</synopsis>
   通常被用作一个组的角色不需要有<literal>LOGIN</literal>属性，不过如果你希望你也可以设置它。
  </para>

<!--==========================orignal english content==========================
  <para>
   Once the group role exists, you can add and remove members using the
   <xref linkend="sql-grant"/> and
   <xref linkend="sql-revoke"/> commands:
<synopsis>
GRANT <replaceable>group_role</replaceable> TO <replaceable>role1</replaceable>, ... ;
REVOKE <replaceable>group_role</replaceable> FROM <replaceable>role1</replaceable>, ... ;
</synopsis>
   You can grant membership to other group roles, too (since there isn't
   really any distinction between group roles and non-group roles).  The
   database will not let you set up circular membership loops.  Also,
   it is not permitted to grant membership in a role to
   <literal>PUBLIC</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   一旦组角色存在，你可以使用<xref linkend="sql-grant"/>和<xref linkend="sql-revoke"/>命令增加和移除成员：
<synopsis>
GRANT <replaceable>group_role</replaceable> TO <replaceable>role1</replaceable>, ... ;
REVOKE <replaceable>group_role</replaceable> FROM <replaceable>role1</replaceable>, ... ;
</synopsis>
   你也可以为其他组角色授予成员关系（因为组角色和非组角色之间其实没有任何区别）。数据库将不会让你设置环状的成员关系。另外，不允许把一个角色中的成员关系授予给<literal>PUBLIC</literal>。
  </para>

<!--==========================orignal english content==========================
  <para>
   The members of a group role can use the privileges of the role in two
   ways.  First, every member of a group can explicitly do
   <xref linkend="sql-set-role"/> to
   temporarily <quote>become</quote> the group role.  In this state, the
   database session has access to the privileges of the group role rather
   than the original login role, and any database objects created are
   considered owned by the group role not the login role.  Second, member
   roles that have the <literal>INHERIT</literal> attribute automatically have use
   of the privileges of roles of which they are members, including any
   privileges inherited by those roles.
   As an example, suppose we have done:
<programlisting>
CREATE ROLE joe LOGIN INHERIT;
CREATE ROLE admin NOINHERIT;
CREATE ROLE wheel NOINHERIT;
GRANT admin TO joe;
GRANT wheel TO admin;
</programlisting>
   Immediately after connecting as role <literal>joe</literal>, a database
   session will have use of privileges granted directly to <literal>joe</literal>
   plus any privileges granted to <literal>admin</literal>, because <literal>joe</literal>
   <quote>inherits</quote> <literal>admin</literal>'s privileges.  However, privileges
   granted to <literal>wheel</literal> are not available, because even though
   <literal>joe</literal> is indirectly a member of <literal>wheel</literal>, the
   membership is via <literal>admin</literal> which has the <literal>NOINHERIT</literal>
   attribute.  After:
<programlisting>
SET ROLE admin;
</programlisting>
   the session would have use of only those privileges granted to
   <literal>admin</literal>, and not those granted to <literal>joe</literal>.  After:
<programlisting>
SET ROLE wheel;
</programlisting>
   the session would have use of only those privileges granted to
   <literal>wheel</literal>, and not those granted to either <literal>joe</literal>
   or <literal>admin</literal>.  The original privilege state can be restored
   with any of:
<programlisting>
SET ROLE joe;
SET ROLE NONE;
RESET ROLE;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   组角色的成员可以以两种方式使用角色的权限。第一，一个组的每一个成员可以显式地做<xref linkend="sql-set-role"/>来临时<quote>成为</quote>组角色。在这种状态中，数据库会话可以访问组角色而不是原始登录角色的权限，并且任何被创建的数据库对象被认为属于组角色而不是登录角色。第二，有<literal>INHERIT</literal>属性的成员角色自动地具有它们所属角色的权限，包括任何组角色继承得到的权限。作为一个例子，假设我们已经有：
<programlisting>
CREATE ROLE joe LOGIN INHERIT;
CREATE ROLE admin NOINHERIT;
CREATE ROLE wheel NOINHERIT;
GRANT admin TO joe;
GRANT wheel TO admin;
</programlisting>
   在作为角色<literal>joe</literal>连接后，一个数据库会话将立即拥有直接授予给<literal>joe</literal>的权限，外加任何授予给<literal>admin</literal>的权限，因为<literal>joe</literal><quote>继承了</quote> <literal>admin</literal>的权限。然而，授予给<literal>wheel</literal>的权限不可用，因为即使<literal>joe</literal>是<literal>wheel</literal>的一个间接成员，但是该成员关系是通过带<literal>NOINHERIT</literal>属性的<literal>admin</literal>得到的。在：
<programlisting>
SET ROLE admin;
</programlisting>
   之后，该会话将只拥有授予给<literal>admin</literal>的权限，但是没有授予给<literal>joe</literal>的权限。在执行：
<programlisting>
SET ROLE wheel;
</programlisting>
   之后，该会话将只拥有授予给<literal>wheel</literal>的权限，但是没有授予给<literal>joe</literal>或<literal>admin</literal>的权限。初始的权限状态可以使用下面命令之一恢复：
<programlisting>
SET ROLE joe;
SET ROLE NONE;
RESET ROLE;
</programlisting>
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    The <command>SET ROLE</command> command always allows selecting any role
    that the original login role is directly or indirectly a member of.
    Thus, in the above example, it is not necessary to become
    <literal>admin</literal> before becoming <literal>wheel</literal>.
   </para>
____________________________________________________________________________-->
   <para>
    <command>SET ROLE</command>命令总是允许选择原始登录角色的直接或间接组角色。因此，在上面的例子中，在成为<literal>wheel</literal>之前不必先成为<literal>admin</literal>。
   </para>
  </note>

  <note>
<!--==========================orignal english content==========================
   <para>
    In the SQL standard, there is a clear distinction between users and roles,
    and users do not automatically inherit privileges while roles do.  This
    behavior can be obtained in <productname>PostgreSQL</productname> by giving
    roles being used as SQL roles the <literal>INHERIT</literal> attribute, while
    giving roles being used as SQL users the <literal>NOINHERIT</literal> attribute.
    However, <productname>PostgreSQL</productname> defaults to giving all roles
    the <literal>INHERIT</literal> attribute, for backward compatibility with pre-8.1
    releases in which users always had use of permissions granted to groups
    they were members of.
   </para>
____________________________________________________________________________-->
   <para>
    在 SQL 标准中，用户和角色之间的区别很清楚，并且用户不会自动继承权限而角色会继承。这种行为在<productname>PostgreSQL</productname>中也可以实现：为要用作 SQL 角色的角色给予<literal>INHERIT</literal>属性，而为要用作 SQL 用户的角色给予<literal>NOINHERIT</literal>属性。不过，为了向后兼容 8.1 以前的发布（在其中用户总是拥有它们所在组的权限），<productname>PostgreSQL</productname>默认给所有的角色<literal>INHERIT</literal>属性。
   </para>
  </note>

<!--==========================orignal english content==========================
  <para>
   The role attributes <literal>LOGIN</literal>, <literal>SUPERUSER</literal>,
   <literal>CREATEDB</literal>, and <literal>CREATEROLE</literal> can be thought of as
   special privileges, but they are never inherited as ordinary privileges
   on database objects are.  You must actually <command>SET ROLE</command> to a
   specific role having one of these attributes in order to make use of
   the attribute.  Continuing the above example, we might choose to
   grant <literal>CREATEDB</literal> and <literal>CREATEROLE</literal> to the
   <literal>admin</literal> role.  Then a session connecting as role <literal>joe</literal>
   would not have these privileges immediately, only after doing
   <command>SET ROLE admin</command>.
  </para>
____________________________________________________________________________-->
  <para>
   角色属性<literal>LOGIN</literal>、<literal>SUPERUSER</literal>、<literal>CREATEDB</literal>和<literal>CREATEROLE</literal>可以被认为是一种特殊权限，但是它们从来不会像数据库对象上的普通权限那样被继承。要使用这些属性，你必须实际<command>SET ROLE</command>到一个有这些属性之一的特定角色。继续上述例子，我们可以选择授予<literal>CREATEDB</literal>和<literal>CREATEROLE</literal>给<literal>admin</literal>角色。然后一个以<literal>joe</literal>角色连接的会话将不会立即有这些权限，只有在执行了<command>SET ROLE admin</command>之后才会拥有。
  </para>

<!--==========================orignal english content==========================
  <para>
  </para>
____________________________________________________________________________-->
  <para>
  </para>

<!--==========================orignal english content==========================
  <para>
   To destroy a group role, use <xref
   linkend="sql-droprole"/>:
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
   Any memberships in the group role are automatically revoked (but the
   member roles are not otherwise affected).
  </para>
____________________________________________________________________________-->
  <para>
   要销毁一个组角色，使用<xref linkend="sql-droprole"/>：
<synopsis>
DROP ROLE <replaceable>name</replaceable>;
</synopsis>
   任何在该组角色中的成员关系会被自动撤销（但是成员角色不会受到影响）。
  </para>
 </sect1>
 
 <sect1 id="role-removal">
<!--==========================orignal english content==========================
  <title>Dropping Roles</title>
____________________________________________________________________________-->
  <title>删除角色</title>

<!--==========================orignal english content==========================
  <para>
   Because roles can own database objects and can hold privileges
   to access other objects, dropping a role is often not just a matter of a
   quick <xref linkend="sql-droprole"/>.  Any objects owned by the role must
   first be dropped or reassigned to other owners; and any permissions
   granted to the role must be revoked.
  </para>
____________________________________________________________________________-->
  <para>
   由于角色可以拥有数据库对象并且能持有访问其他对象的特权，删除一个角色
   常常并非一次<xref linkend="sql-droprole"/>就能解决。任何被该用户所拥有
   的对象必须首先被删除或者转移给其他拥有者，并且任何已被授予给该角色的
   权限必须被收回。
  </para>

<!--==========================orignal english content==========================
  <para>
   Ownership of objects can be transferred one at a time
   using <command>ALTER</command> commands, for example:
<programlisting>
ALTER TABLE bobs_table OWNER TO alice;
</programlisting>
   Alternatively, the <xref linkend="sql-reassign-owned"/> command can be
   used to reassign ownership of all objects owned by the role-to-be-dropped
   to a single other role.  Because <command>REASSIGN OWNED</command> cannot access
   objects in other databases, it is necessary to run it in each database
   that contains objects owned by the role.  (Note that the first
   such <command>REASSIGN OWNED</command> will change the ownership of any
   shared-across-databases objects, that is databases or tablespaces, that
   are owned by the role-to-be-dropped.)
  </para>
____________________________________________________________________________-->
  <para>
   对象的拥有关系可以使用<command>ALTER</command>命令一次转移出去，例如：
<programlisting>
ALTER TABLE bobs_table OWNER TO alice;
</programlisting>
   此外，<xref linkend="sql-reassign-owned"/>命令可以被用来把要被删除的
   角色所拥有的所有对象的拥有关系转移给另一个角色。由于
   <command>REASSIGN OWNED</command>不能访问其他数据库中的对象，有必要
   在每一个包含该角色所拥有对象的数据库中运行该命令（注意第一个这样的
   <command>REASSIGN OWNED</command>将更改任何在数据库间共享的该角色拥
   有的对象的拥有关系，即数据库或者表空间）。
  </para>

<!--==========================orignal english content==========================
  <para>
   Once any valuable objects have been transferred to new owners, any
   remaining objects owned by the role-to-be-dropped can be dropped with
   the <xref linkend="sql-drop-owned"/> command.  Again, this command cannot
   access objects in other databases, so it is necessary to run it in each
   database that contains objects owned by the role.  Also, <command>DROP
   OWNED</command> will not drop entire databases or tablespaces, so it is
   necessary to do that manually if the role owns any databases or
   tablespaces that have not been transferred to new owners.
  </para>
____________________________________________________________________________-->
  <para>
   一旦任何有价值的对象已经被转移给新的拥有者，任何由被删除角色拥有的剩余对象
   就可以用<xref linkend="sql-drop-owned"/>命令删除。再次，由于这个命令不能
   访问其他数据库中的对象， 有必要在每一个包含该角色所拥有对象的数据库中运行
   该命令。还有，<command>DROP OWNED</command>将不会删除整个数据库或者表空间，
   因此如果该角色拥有任何还没有被转移给新拥有者的数据库或者表空间，有必要手工
   删除它们。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>DROP OWNED</command> also takes care of removing any privileges granted
   to the target role for objects that do not belong to it.
   Because <command>REASSIGN OWNED</command> does not touch such objects, it's
   typically necessary to run both <command>REASSIGN OWNED</command>
   and <command>DROP OWNED</command> (in that order!) to fully remove the
   dependencies of a role to be dropped.
  </para>
____________________________________________________________________________-->
  <para>
   <command>DROP OWNED</command>也会注意移除为不属于目标角色的对象授予给目标
   角色的任何特权。因为<command>REASSIGN OWNED</command>不会触碰这类对象，通
   常有必要运行<command>REASSIGN OWNED</command>和
   <command>DROP OWNED</command>（按照这个顺序！）以完全地移除要被删除对象的
   从属物。
  </para>

<!--==========================orignal english content==========================
  <para>
   In short then, the most general recipe for removing a role that has been
   used to own objects is:
  </para>
____________________________________________________________________________-->
  <para>
   总之，移除曾经拥有过对象的角色的方法是：
  </para>
<!--==========================orignal english content==========================
<programlisting>
REASSIGN OWNED BY doomed_role TO successor_role;
DROP OWNED BY doomed_role;
-&minus; repeat the above commands in each database of the cluster
DROP ROLE doomed_role;
</programlisting>
____________________________________________________________________________-->
<programlisting>
REASSIGN OWNED BY doomed_role TO successor_role;
DROP OWNED BY doomed_role;
-- 在集簇中的每一个数据库中重复上述命令
DROP ROLE doomed_role;
</programlisting>

<!--==========================orignal english content==========================
  <para>
   When not all owned objects are to be transferred to the same successor
   owner, it's best to handle the exceptions manually and then perform
   the above steps to mop up.
  </para>
____________________________________________________________________________-->
  <para>
   如果不是所有的拥有对象都被转移给了同一个后继拥有者，最好手工处理异常
   然后执行上述步骤直到结束。
  </para>

<!--==========================orignal english content==========================
  <para>
   If <command>DROP ROLE</command> is attempted while dependent objects still
   remain, it will issue messages identifying which objects need to be
   reassigned or dropped.
  </para>
____________________________________________________________________________-->
  <para>
   如果在依赖对象还存在时尝试了<command>DROP ROLE</command>，它将发出
   消息标识哪些对象需要被重新授予或者删除。
  </para>
 </sect1>
 
 <sect1 id="default-roles">
<!--==========================orignal english content==========================
  <title>Default Roles</title>
____________________________________________________________________________-->
  <title>默认角色</title>

<!--==========================orignal english content==========================
  <indexterm zone="default-roles">
   <primary>role</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="default-roles">
   <primary>role</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</productname> provides a set of default roles
   which provide access to certain, commonly needed, privileged capabilities
   and information.  Administrators can GRANT these roles to users and/or
   other roles in their environment, providing those users with access to
   the specified capabilities and information.
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>提供了一组默认角色，它们提供对特定的、通常需要的、需要特权的功能和信息的访问。管理员可以把这些角色GRANT给其环境中的用户或者其他角色，让这些用户能够访问指定的功能和信息。
  </para>

<!--==========================orignal english content==========================
  <para>
   The default roles are described in <xref linkend="default-roles-table"/>.
   Note that the specific permissions for each of the default roles may
   change in the future as additional capabilities are added.  Administrators
   should monitor the release notes for changes.
  </para>
____________________________________________________________________________-->
  <para>
   <xref linkend="default-roles-table"/>中描述了默认的角色。注意由于额外功能的增加，每一种默认角色相关的权限可能会在未来被改变。管理员应该关注发行注记中提到的这方面的变化。
  </para>

   <table tocentry="1" id="default-roles-table">
<!--==========================orignal english content==========================
    <title>Default Roles</title>
____________________________________________________________________________-->
    <title>默认角色</title>
    <tgroup cols="2">
     <thead>
<!--==========================orignal english content==========================
      <row>
       <entry>Role</entry>
       <entry>Allowed Access</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>角色</entry>
       <entry>允许的访问</entry>
      </row>
     </thead>
     <tbody>
<!--==========================orignal english content==========================
      <row>
       <entry>pg_read_all_settings</entry>
       <entry>Read all configuration variables, even those normally visible only to
       superusers.</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>pg_read_all_settings</entry>
       <entry>读取所有配置变量，甚至是那些通常只对超级用户可见的变量。</entry>
      </row>
<!--==========================orignal english content==========================
      <row>
       <entry>pg_read_all_stats</entry>
       <entry>Read all pg_stat_* views and use various statistics related extensions,
       even those normally visible only to superusers.</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>pg_read_all_stats</entry>
       <entry>读取所有的pg_stat_*视图并且使用与扩展相关的各种统计信息，甚至是那些通常只对超级用户可见的信息。</entry>
      </row>
<!--==========================orignal english content==========================
      <row>
       <entry>pg_stat_scan_tables</entry>
       <entry>Execute monitoring functions that may take <literal>ACCESS SHARE</literal> locks on tables,
       potentially for a long time.</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>pg_stat_scan_tables</entry>
       <entry>执行可能会在表上取得<literal>ACCESS SHARE</literal>锁的监控函数（可能会持锁很长时间）。</entry>
      </row>
<!--==========================orignal english content==========================
      <row>
       <entry>pg_signal_backend</entry>
       <entry>Send signals to other backends (eg: cancel query, terminate).</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>pg_signal_backend</entry>
       <entry>向其他后端发送信号（例如：取消查询、中止）。</entry>
      </row>
<!--==========================orignal english content==========================
      <row>
       <entry>pg_read_server_files</entry>
       <entry>Allow reading files from any location the database can access on the server with COPY and
       other file-access functions.</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>pg_read_server_files</entry>
       <entry>允许使用COPY以及其他文件访问函数从服务器上该数据库可访问的任意位置读取文件。</entry>
      </row>
<!--==========================orignal english content==========================
      <row>
       <entry>pg_write_server_files</entry>
       <entry>Allow writing to files in any location the database can access on the server with COPY and
       other file-access functions.</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>pg_write_server_files</entry>
       <entry>允许使用COPY以及其他文件访问函数在服务器上该数据库可访问的任意位置中写入文件。</entry>
      </row>
<!--==========================orignal english content==========================
      <row>
       <entry>pg_execute_server_program</entry>
       <entry>Allow executing programs on the database server as the user the database runs as with
       COPY and other functions which allow executing a server-side program.</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>pg_execute_server_program</entry>
       <entry>允许用运行该数据库的用户执行数据库服务器上的程序来配合COPY和其他允许执行服务器端程序的函数。</entry>
      </row>
<!--==========================orignal english content==========================
      <row>
       <entry>pg_monitor</entry>
       <entry>Read/execute various monitoring views and functions.
       This role is a member of <literal>pg_read_all_settings</literal>,
       <literal>pg_read_all_stats</literal> and
       <literal>pg_stat_scan_tables</literal>.</entry>
      </row>
____________________________________________________________________________-->
      <row>
       <entry>pg_monitor</entry>
       <entry>读取/执行各种监控视图和函数。这个角色是<literal>pg_read_all_settings</literal>、<literal>pg_read_all_stats</literal>以及<literal>pg_stat_scan_tables</literal>的成员。</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

<!--==========================orignal english content==========================
  <para>
  The <literal>pg_read_server_files</literal>, <literal>pg_write_server_files</literal> and
  <literal>pg_execute_server_program</literal> roles are intended to allow administrators to have
  trusted, but non-superuser, roles which are able to access files and run programs on the
  database server as the user the database runs as.  As these roles are able to access any file on
  the server file system, they bypass all database-level permission checks when accessing files
  directly and they could be used to gain superuser-level access, therefore care should be taken
  when granting these roles to users.
  </para>
____________________________________________________________________________-->
  <para>
  <literal>pg_read_server_files</literal>、<literal>pg_write_server_files</literal>以及<literal>pg_execute_server_program</literal>角色的目的是允许管理员有一些可信但不是超级用户的角色来访问文件以及以运行数据库的用户在数据库服务器上运行程序。由于这些角色能够防伪服务器文件系统上的任何文件，因此在直接访问文件时它们会绕过任何数据库级别的权限检查并且它们可以被用来得到超级用户级别的访问，因此在把这些角色授予给用户时应当非常小心。
  </para>

<!--==========================orignal english content==========================
  <para>
  The <literal>pg_monitor</literal>, <literal>pg_read_all_settings</literal>,
  <literal>pg_read_all_stats</literal> and <literal>pg_stat_scan_tables</literal>
  roles are intended to allow administrators to easily configure a role for the
  purpose of monitoring the database server. They grant a set of common privileges
  allowing the role to read various useful configuration settings, statistics and
  other system information normally restricted to superusers.
  </para>
____________________________________________________________________________-->
  <para>
  <literal>pg_monitor</literal>、<literal>pg_read_all_settings</literal>、<literal>pg_read_all_stats</literal>和<literal>pg_stat_scan_tables</literal>角色的目的是允许管理员能为监控数据库服务器的目的很容易地配置角色。它们授予一组常用的特权，这些特权允许角色读取各种有用的配置设置、统计信息以及通常仅限于超级用户的其他系统信息。
  </para>

<!--==========================orignal english content==========================
  <para>
  Care should be taken when granting these roles to ensure they are only used where
  needed and with the understanding that these roles grant access to privileged
  information.
  </para>
____________________________________________________________________________-->
  <para>
  在授予这些角色时应当非常小心，以确保它们只被用在需要的地方，并且要理解这些角色会授予对特权信息的访问。
  </para>

<!--==========================orignal english content==========================
  <para>
   Administrators can grant access to these roles to users using the GRANT
   command:

<programlisting>
GRANT pg_signal_backend TO admin_user;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   管理员可以用GRANT命令把对这些角色的访问授予给用户：

<programlisting>
GRANT pg_signal_backend TO admin_user;
</programlisting>
  </para>

 </sect1>

 <sect1 id="perm-functions">
<!--==========================orignal english content==========================
  <title>Function Security</title>
____________________________________________________________________________-->
  <title>函数和触发器安全性</title>

<!--==========================orignal english content==========================
  <para>
   Functions, triggers and row-level security policies allow users to insert
   code into the backend server that other users might execute
   unintentionally. Hence, these mechanisms permit users to <quote>Trojan
   horse</quote> others with relative ease. The strongest protection is tight
   control over who can define objects. Where that is infeasible, write
   queries referring only to objects having trusted owners.  Remove
   from <varname>search_path</varname> the public schema and any other schemas
   that permit untrusted users to create objects.
  </para>
____________________________________________________________________________-->
  <para>
   函数、触发器以及行级安全性策略允许用户在后端服务器中插入代码，其他用户不会注意到这些代码的执行。因此，这些机制允许用户相对容易地为其他人设置<quote>特洛伊木马</quote>。最强的保护是严格控制哪些人能定义对象。如果做不到，则编写查询时应该只引用具有可信任拥有者的对象。可以从<varname>search_path</varname>中去除public方案以及任何其他允许不可信用户创建对象的方案。
  </para>

<!--==========================orignal english content==========================
  <para>
   Functions run inside the backend
   server process with the operating system permissions of the
   database server daemon.  If the programming language
   used for the function allows unchecked memory accesses, it is
   possible to change the server's internal data structures.
   Hence, among many other things, such functions can circumvent any
   system access controls.  Function languages that allow such access
   are considered <quote>untrusted</quote>, and
   <productname>PostgreSQL</productname> allows only superusers to
   create functions written in those languages.
  </para>
____________________________________________________________________________-->
  <para>
   在后端服务器进程中运行的函数带有数据库服务器守护进程的操作系统权限。如果用于函数的编程语言允许非检查的内存访问，它就可能改变服务器的内部数据结构。因此，在很多其他事情中，这些函数可能绕开任何系统访问控制。允许这种访问的函数语言被认为是<quote>不可信的</quote>，并且<productname>PostgreSQL</productname>只允许超级用户创建用这些语言编写的函数。
  </para>
 </sect1>

</chapter>

<!--
doc/src/sgml/ref/prepare.sgml
PostgreSQL documentation
-->

<refentry id="SQL-PREPARE">
<!--==========================orignal english content==========================
 <indexterm zone="sql-prepare">
  <primary>PREPARE</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-prepare">
  <primary>PREPARE</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <indexterm zone="sql-prepare">
  <primary>prepared statements</primary>
  <secondary>creating</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-prepare">
  <primary>prepared statements</primary>
  <secondary>creating</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>PREPARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>PREPARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>PREPARE</refname>
  <refpurpose>prepare a statement for execution</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>PREPARE</refname>
  <refpurpose>为执行准备一个语句</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
PREPARE <replaceable class="parameter">name</replaceable> [ ( <replaceable class="parameter">data_type</replaceable> [, ...] ) ] AS <replaceable class="parameter">statement</replaceable>
</synopsis>
____________________________________________________________________________-->
<synopsis>
PREPARE <replaceable class="parameter">name</replaceable> [ ( <replaceable class="parameter">data_type</replaceable> [, ...] ) ] AS <replaceable class="parameter">statement</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>PREPARE</command> creates a prepared statement. A prepared
   statement is a server-side object that can be used to optimize
   performance. When the <command>PREPARE</command> statement is
   executed, the specified statement is parsed, analyzed, and rewritten.
   When an <command>EXECUTE</command> command is subsequently
   issued, the prepared statement is planned and executed.  This division
   of labor avoids repetitive parse analysis work, while allowing
   the execution plan to depend on the specific parameter values supplied.
  </para>
____________________________________________________________________________-->
  <para>
   <command>PREPARE</command>创建一个预备语句。预备语句是一种服务器端对象，它可以被用来优化性能。当<command>PREPARE</command>语句被执行时，指定的语句会被解析、分析并且重写。当后续发出一个<command>EXECUTE</command>命令时，该预备语句会被规划并且执行。这种工作的划分避免了重复性的解析分析工作，不过允许执行计划依赖所提供的特定参数值。
  </para>

<!--==========================orignal english content==========================
  <para>
   Prepared statements can take parameters: values that are
   substituted into the statement when it is executed. When creating
   the prepared statement, refer to parameters by position, using
   <literal>$1</>, <literal>$2</>, etc. A corresponding list of
   parameter data types can optionally be specified. When a
   parameter's data type is not specified or is declared as
   <literal>unknown</literal>, the type is inferred from the context
   in which the parameter is used (if possible). When executing the
   statement, specify the actual values for these parameters in the
   <command>EXECUTE</command> statement.  Refer to <xref
   linkend="sql-execute"> for more
   information about that.
  </para>
____________________________________________________________________________-->
  <para>
   预备语句可以接受参数：在执行时会被替换到语句中的值。在创建预备语句时，可以用位置引用参数，如<literal>$1</literal>、<literal>$2</literal>等。也可以选择性地指定参数数据类型的一个列表。当一个参数的数据类型没有被指定或者被声明为<literal>unknown</literal>时，其类型会从该参数被使用的环境中推知（如果可能）。在执行该语句时，在<command>EXECUTE</command>语句中为这些参数指定实际值。更多有关于此的信息可参考<xref linkend="sql-execute"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Prepared statements only last for the duration of the current
   database session. When the session ends, the prepared statement is
   forgotten, so it must be recreated before being used again. This
   also means that a single  prepared statement cannot be used by
   multiple simultaneous database clients; however, each client can create
   their own prepared statement to use.  Prepared statements can be
   manually cleaned up using the <xref linkend="sql-deallocate"> command.
  </para>
____________________________________________________________________________-->
  <para>
   预备语句只在当前数据库会话期间存在。当会话结束时，预备语句会消失，因此在重新使用之前必须重新建立它。这也意味着一个预备语句不能被多个数据库客户端同时使用。不过，每一个客户端可以创建它们自己的预备语句来使用。预备语句可以用<xref linkend="sql-deallocate"/>命令手工清除。
  </para>

<!--==========================orignal english content==========================
  <para>
   Prepared statements potentially have the largest performance advantage
   when a single session is being used to execute a large number of similar
   statements. The performance difference will be particularly
   significant if the statements are complex to plan or rewrite, e.g.
   if the query involves a join of many tables or requires
   the application of several rules. If the statement is relatively simple
   to plan and rewrite but relatively expensive to execute, the
   performance advantage of prepared statements will be less noticeable.
  </para>
____________________________________________________________________________-->
  <para>
   当一个会话要执行大量类似语句时，预备语句可能会有最大性能优势。如果该语句很复杂（难于规划或重写），例如，如果查询涉及很多表的连接或者要求应用多个规则，性能差异将会特别明显。如果语句相对比较容易规划和重写，但是执行起来开销相对较大，那么预备语句的性能优势就不那么显著了。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      An arbitrary name given to this particular prepared
      statement. It must be unique within a single session and is
      subsequently used to execute or deallocate a previously prepared
      statement.
     </para>
____________________________________________________________________________-->
     <para>
      给这个特定预备语句的任意名称。它在一个会话中必须唯一并且后续将被用来执行或者清除一个之前准备好的语句。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">data_type</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">data_type</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The data type of a parameter to the prepared statement.  If the
      data type of a particular parameter is unspecified or is
      specified as <literal>unknown</literal>, it will be inferred
      from the context in which the parameter is used. To refer to the
      parameters in the prepared statement itself, use
      <literal>$1</literal>, <literal>$2</literal>, etc.
     </para>
____________________________________________________________________________-->
     <para>
      预备语句一个参数的数据类型。如果一个特定参数的数据类型没有被指定或者被指定为<literal>unknown</literal>，将从该参数被使用的环境中推得。要在预备语句本身中引用参数，可以使用
      <literal>$1</literal>、<literal>$2</literal>等。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">statement</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">statement</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Any <command>SELECT</>, <command>INSERT</>, <command>UPDATE</>,
      <command>DELETE</>, or <command>VALUES</> statement.
     </para>
____________________________________________________________________________-->
     <para>
      任何<command>SELECT</command>、<command>INSERT</command>、<command>UPDATE</command>、<command>DELETE</command>或者<command>VALUES</command>语句。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="SQL-PREPARE-notes">
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   Prepared statements can use generic plans rather than re-planning with
   each set of supplied <command>EXECUTE</command> values.  This occurs
   immediately for prepared statements with no parameters; otherwise
   it occurs only after five or more executions produce plans whose
   estimated cost average (including planning overhead) is more expensive
   than the generic plan cost estimate.  Once a generic plan is chosen,
   it is used for the remaining lifetime of the prepared statement.
   Using <command>EXECUTE</command> values which are rare in columns with
   many duplicates can generate custom plans that are so much cheaper
   than the generic plan, even after adding planning overhead, that the
   generic plan might never be used.
  </para>
____________________________________________________________________________-->
  <para>
   对每一组提供的<command>EXECUTE</command>值，预备语句可以使用通用计划而不是重新做计划。对于没有参数的预备语句马上就会这样做，否则只有五次或者更多次执行产生的计划的估计代价平均值（包括规划开销）比通用计划的代价估计更昂贵时才会这样做。一旦选中一个通用计划，在该预备语句剩余的生存时间内都将使用它。使用在重复值很多的列中很少出现的<command>EXECUTE</command>值可以产生比通用计划更加廉价的定制计划（即使加上规划开销），这样通用计划将不会被使用。
  </para>

<!--==========================orignal english content==========================
  <para>
   A generic plan assumes that each value supplied to
   <command>EXECUTE</command> is one of the column's distinct values
   and that column values are uniformly distributed.  For example,
   if statistics record three distinct column values, a generic plan
   assumes a column equality comparison will match 33% of processed rows.
   Column statistics also allow generic plans to accurately compute the
   selectivity of unique columns.  Comparisons on non-uniformly-distributed
   columns and specification of non-existent values affects the average
   plan cost, and hence if and when a generic plan is chosen.
  </para>
____________________________________________________________________________-->
  <para>
   通用计划假定每一个提供给<command>EXECUTE</command>的值都是该列的可区分值并且列值是均匀分布的。例如，如果统计信息记录了三个可区分的列值，通用计划会假定一个列等值比较将匹配被处理行中的 33%。列统计值也允许通用计划准确地计算唯一列的选择度。如果一个通用计划被选中时，在非均匀分布列上的比较以及制定不存在的值都会影响平均计划代价。
  </para>

<!--==========================orignal english content==========================
  <para>
   To examine the query plan <productname>PostgreSQL</productname> is using
   for a prepared statement, use <xref linkend="sql-explain">, e.g.
   <command>EXPLAIN EXECUTE</>.
   If a generic plan is in use, it will contain parameter symbols
   <literal>$<replaceable>n</></literal>, while a custom plan will have the
   supplied parameter values substituted into it.
   The row estimates in the generic plan reflect the selectivity
   computed for the parameters.
  </para>
____________________________________________________________________________-->
  <para>
   要检查<productname>PostgreSQL</productname>为一个预备语句使用的查询计划，可以使用<xref linkend="sql-explain"/>，例如<command>EXPLAIN EXECUTE</command>。如果使用的是一个通用计划，它将包含参数符号<literal>$<replaceable>n</replaceable></literal>，而一个定制计划则会把提供的参数值替换进去。通用计划中的行估计值反映了这些参数计算出来的选择度。
  </para>

<!--==========================orignal english content==========================
  <para>
   For more information on query planning and the statistics collected
   by <productname>PostgreSQL</productname> for that purpose, see
   the <xref linkend="sql-analyze">
   documentation.
  </para>
____________________________________________________________________________-->
  <para>
   更多关于查询规划以及<productname>PostgreSQL</productname>为此所收集的统计信息的内容，请见<xref linkend="sql-analyze"/>文档。
  </para>

<!--==========================orignal english content==========================
  <para>
   Although the main point of a prepared statement is to avoid repeated parse
   analysis and planning of the statement, <productname>PostgreSQL</> will
   force re-analysis and re-planning of the statement before using it
   whenever database objects used in the statement have undergone
   definitional (DDL) changes since the previous use of the prepared
   statement.  Also, if the value of <xref linkend="guc-search-path"> changes
   from one use to the next, the statement will be re-parsed using the new
   <varname>search_path</>.  (This latter behavior is new as of
   <productname>PostgreSQL</productname> 9.3.)  These rules make use of a
   prepared statement semantically almost equivalent to re-submitting the
   same query text over and over, but with a performance benefit if no object
   definitions are changed, especially if the best plan remains the same
   across uses.  An example of a case where the semantic equivalence is not
   perfect is that if the statement refers to a table by an unqualified name,
   and then a new table of the same name is created in a schema appearing
   earlier in the <varname>search_path</>, no automatic re-parse will occur
   since no object used in the statement changed.  However, if some other
   change forces a re-parse, the new table will be referenced in subsequent
   uses.
  </para>
____________________________________________________________________________-->
  <para>
   尽管预备语句主要是为了避免重复对语句进行解析分析以及规划，但是只要上一次使用该预备语句后该语句中用到的数据库对象发生了定义性（DDL）改变，<productname>PostgreSQL</productname>将会对该语句强制进行重新分析和重新规划。还有，如果<xref linkend="guc-search-path"/>的值发生变化，也将使用新的<varname>search_path</varname>重新解析该语句（后一种行为是从<productname>PostgreSQL</productname> 9.3 开始的新行为）。这些规则让预备语句的使用在语义上几乎等效于反复提交相同的查询文本，但是能在性能上获利（如果没有对象定义被改变，特别是如果最优计划保持不变时）。该语义等价性不完美的一个例子是：如果语句用一个未限定的名称引用表，并且之后在<varname>search_path</varname>中更靠前的模式中创建了一个新的同名表，则不会发生自动的重解析，因为该语句使用的对象没有被改变。不过，如果某些其他更改造成了重解析，后续使用中都会引用新表。
  </para>

<!--==========================orignal english content==========================
  <para>
   You can see all prepared statements available in the session by querying the
   <link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>
   system view.
  </para>
____________________________________________________________________________-->
  <para>
   可以通过查询<link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>系统视图来看到会话中所有可用的预备语句。
  </para>
 </refsect1>

 <refsect1 id="sql-prepare-examples">
<!--==========================orignal english content==========================
  <title id="sql-prepare-examples-title">Examples</title>
____________________________________________________________________________-->
  <title id="sql-prepare-examples-title">例子</title>
<!--==========================orignal english content==========================
  <para>
   Create a prepared statement for an <command>INSERT</command>
   statement, and then execute it:
<programlisting>
PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   为一个<command>INSERT</command>语句创建一个预备语句，然后执行它：
<programlisting>
PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Create a prepared statement for a <command>SELECT</command>
   statement, and then execute it:
<programlisting>
PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>

   Note that the data type of the second parameter is not specified,
   so it is inferred from the context in which <literal>$2</> is used.
  </para>
____________________________________________________________________________-->
  <para>
   为一个<command>SELECT</command>语句创建一个预备语句，然后执行它：
<programlisting>
PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>

   注意第二个参数的数据类型没有被指定，因此会从使用<literal>$2</literal>的环境中推知。
  </para>
 </refsect1>
 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   The SQL standard includes a <command>PREPARE</command> statement,
   but it is only for use in embedded SQL. This version of the
   <command>PREPARE</command> statement also uses a somewhat different
   syntax.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 标准包括一个<command>PREPARE</command>语句，但是它只用于嵌入式 SQL。这个版本的<command>PREPARE</command>语句也使用了一种有些不同的语法。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-deallocate"/></member>
   <member><xref linkend="sql-execute"/></member>
  </simplelist>
 </refsect1>
</refentry>

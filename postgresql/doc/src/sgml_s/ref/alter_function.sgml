<!--
doc/src/sgml/ref/alter_function.sgml
PostgreSQL documentation
-->

<refentry id="sql-alterfunction">
<!--==========================orignal english content==========================
 <indexterm zone="sql-alterfunction">
  <primary>ALTER FUNCTION</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-alterfunction">
  <primary>ALTER FUNCTION</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>ALTER FUNCTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>ALTER FUNCTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>ALTER FUNCTION</refname>
  <refpurpose>change the definition of a function</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>ALTER FUNCTION</refname>
  <refpurpose>更改一个函数的定义</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    <replaceable class="parameter">action</replaceable> [ ... ] [ RESTRICT ]
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    RENAME TO <replaceable>new_name</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    OWNER TO { <replaceable>new_owner</replaceable> | CURRENT_USER | SESSION_USER }
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    SET SCHEMA <replaceable>new_schema</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    DEPENDS ON EXTENSION <replaceable>extension_name</replaceable>

<phrase>where <replaceable class="parameter">action</replaceable> is one of:</phrase>

    CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
    IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF
    [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
    PARALLEL { UNSAFE | RESTRICTED | SAFE }
    COST <replaceable class="parameter">execution_cost</replaceable>
    ROWS <replaceable class="parameter">result_rows</replaceable>
    SET <replaceable class="parameter">configuration_parameter</replaceable> { TO | = } { <replaceable class="parameter">value</replaceable> | DEFAULT }
    SET <replaceable class="parameter">configuration_parameter</replaceable> FROM CURRENT
    RESET <replaceable class="parameter">configuration_parameter</replaceable>
    RESET ALL
</synopsis>
____________________________________________________________________________-->
<synopsis>
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    <replaceable class="parameter">action</replaceable> [ ... ] [ RESTRICT ]
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    RENAME TO <replaceable>new_name</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    OWNER TO { <replaceable>new_owner</replaceable> | CURRENT_USER | SESSION_USER }
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    SET SCHEMA <replaceable>new_schema</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ]
    DEPENDS ON EXTENSION <replaceable>extension_name</replaceable>

<phrase>其中 <replaceable class="parameter">action</replaceable> 是以下之一：</phrase>

    CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
    IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF
    [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
    PARALLEL { UNSAFE | RESTRICTED | SAFE }
    COST <replaceable class="parameter">execution_cost</replaceable>
    ROWS <replaceable class="parameter">result_rows</replaceable>
    SET <replaceable class="parameter">configuration_parameter</replaceable> { TO | = } { <replaceable class="parameter">value</replaceable> | DEFAULT }
    SET <replaceable class="parameter">configuration_parameter</replaceable> FROM CURRENT
    RESET <replaceable class="parameter">configuration_parameter</replaceable>
    RESET ALL
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>ALTER FUNCTION</command> changes the definition of a
   function.
  </para>
____________________________________________________________________________-->
  <para>
   <command>ALTER FUNCTION</command>更改一个函数的定义。
  </para>

<!--==========================orignal english content==========================
  <para>
   You must own the function to use <command>ALTER FUNCTION</>.
   To change a function's schema, you must also have <literal>CREATE</>
   privilege on the new schema.
   To alter the owner, you must also be a direct or indirect member of the new
   owning role, and that role must have <literal>CREATE</literal> privilege on
   the function's schema.  (These restrictions enforce that altering the owner
   doesn't do anything you couldn't do by dropping and recreating the function.
   However, a superuser can alter ownership of any function anyway.)
  </para>
____________________________________________________________________________-->
  <para>
   你必须拥有该函数以使用<command>ALTER FUNCTION</command>。要更改一个函数
   的模式，你还必须具有新模式上的<literal>CREATE</literal>特权。要
   更改拥有者，你还必须是新拥有角色的一个直接或者间接成员，并且该角色必须
   具有在该函数的模式上的<literal>CREATE</literal>特权（这些限制强制修改拥有
   者不能做一些通过删除和重建该函数做不到的事情。不过，一个超级用户怎么都能
   更改任何函数的所有权）。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of an existing function.  If no
      argument list is specified, the name must be unique in its schema.
     </para>
____________________________________________________________________________-->
     <para>
      一个现有函数的名称（可以被模式限定）。如果没有指定参数列表，
	  则该名称必须在它的模式中唯一。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">argmode</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">argmode</replaceable></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      The mode of an argument: <literal>IN</>, <literal>OUT</>,
      <literal>INOUT</>, or <literal>VARIADIC</>.
      If omitted, the default is <literal>IN</>.
      Note that <command>ALTER FUNCTION</command> does not actually pay
      any attention to <literal>OUT</> arguments, since only the input
      arguments are needed to determine the function's identity.
      So it is sufficient to list the <literal>IN</>, <literal>INOUT</>,
      and <literal>VARIADIC</> arguments.
     </para>
____________________________________________________________________________-->
     <para>
      一个参数的模式：<literal>IN</literal>、<literal>OUT</literal>、
      <literal>INOUT</literal>或者<literal>VARIADIC</literal>。如果被忽略，默认为
      <literal>IN</literal>。注意<command>ALTER FUNCTION</command>
      并不真正关心<literal>OUT</literal>参数，因为在决定函数的身份时只需要输
      入参数。因此列出<literal>IN</literal>、<literal>INOUT</literal>以及
      <literal>VARIADIC</literal>参数即可。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">argname</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">argname</replaceable></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of an argument.
      Note that <command>ALTER FUNCTION</command> does not actually pay
      any attention to argument names, since only the argument data
      types are needed to determine the function's identity.
     </para>
____________________________________________________________________________-->
     <para>
      一个参数的名称。注意<command>ALTER FUNCTION</command>
      并不真正参数名称，因为在确定函数的身份时只需要参数的数据类型即可。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">argtype</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">argtype</replaceable></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      The data type(s) of the function's arguments (optionally
      schema-qualified), if any.
     </para>
____________________________________________________________________________-->
     <para>
      该函数的参数（如果有）的数据类型（可以被模式限定）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">new_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The new name of the function.
     </para>
____________________________________________________________________________-->
     <para>
      该函数的新名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">new_owner</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">new_owner</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The new owner of the function.  Note that if the function is
      marked <literal>SECURITY DEFINER</literal>, it will subsequently
      execute as the new owner.
     </para>
____________________________________________________________________________-->
     <para>
      该函数的新拥有者。注意如果该函数被标记为
      <literal>SECURITY DEFINER</literal>，它的后续执行将会使用新拥有者。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">new_schema</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The new schema for the function.
     </para>
____________________________________________________________________________-->
     <para>
      该函数的新模式。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">extension_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">extension_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of the extension that the function is to depend on.
     </para>
____________________________________________________________________________-->
     <para>
      该函数所以来的扩展名。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>CALLED ON NULL INPUT</literal></term>
____________________________________________________________________________-->
     <term><literal>CALLED ON NULL INPUT</literal></term>
<!--==========================orignal english content==========================
     <term><literal>RETURNS NULL ON NULL INPUT</literal></term>
____________________________________________________________________________-->
     <term><literal>RETURNS NULL ON NULL INPUT</literal></term>
<!--==========================orignal english content==========================
     <term><literal>STRICT</literal></term>
____________________________________________________________________________-->
     <term><literal>STRICT</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para><literal>CALLED ON NULL INPUT</literal> changes the function so
       that it will be invoked when some or all of its arguments are
       null. <literal>RETURNS NULL ON NULL INPUT</literal> or
       <literal>STRICT</literal> changes the function so that it is not
       invoked if any of its arguments are null; instead, a null result
       is assumed automatically.  See <xref linkend="sql-createfunction">
       for more information.
      </para>
____________________________________________________________________________-->
      <para><literal>CALLED ON NULL INPUT</literal>将该函数改为在某些
      或者全部参数为空值时可以被调用。
      <literal>RETURNS NULL ON NULL INPUT</literal>或者
       <literal>STRICT</literal>将该函数改为只要任一参数为空值就不被调用而
       是自动假定一个空值结果。详见<xref linkend="sql-createfunction"/>。
      </para>
     </listitem>
   </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>IMMUTABLE</literal></term>
____________________________________________________________________________-->
     <term><literal>IMMUTABLE</literal></term>
<!--==========================orignal english content==========================
     <term><literal>STABLE</literal></term>
____________________________________________________________________________-->
     <term><literal>STABLE</literal></term>
<!--==========================orignal english content==========================
     <term><literal>VOLATILE</literal></term>
____________________________________________________________________________-->
     <term><literal>VOLATILE</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       Change the volatility of the function to the specified setting.
       See <xref linkend="sql-createfunction"> for details.
      </para>
____________________________________________________________________________-->
      <para>
       把该函数的稳定性更改为指定的设置。详见
       <xref linkend="sql-createfunction"/>。
      </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal><optional> EXTERNAL </optional> SECURITY INVOKER</literal></term>
____________________________________________________________________________-->
    <term><literal><optional> EXTERNAL </optional> SECURITY INVOKER</literal></term>
<!--==========================orignal english content==========================
    <term><literal><optional> EXTERNAL </optional> SECURITY DEFINER</literal></term>
____________________________________________________________________________-->
    <term><literal><optional> EXTERNAL </optional> SECURITY DEFINER</literal></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Change whether the function is a security definer or not. The
      key word <literal>EXTERNAL</literal> is ignored for SQL
      conformance. See <xref linkend="sql-createfunction"> for more information about
      this capability.
     </para>
____________________________________________________________________________-->
     <para>
      更改该函数是否为一个安全性定义者。关键词<literal>EXTERNAL</literal>
      是为了符合 SQL，它会被忽略。关于这项能力的详情请见
      <xref linkend="sql-createfunction"/>。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>PARALLEL</literal></term>
____________________________________________________________________________-->
    <term><literal>PARALLEL</literal></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Change whether the function is deemed safe for parallelism.
      See <xref linkend="sql-createfunction"> for details.
     </para>
____________________________________________________________________________-->
     <para>
      决定该函数对于并行是否安全。详见
      <xref linkend="sql-createfunction"/>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>LEAKPROOF</literal></term>
____________________________________________________________________________-->
    <term><literal>LEAKPROOF</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Change whether the function is considered leakproof or not.
      See <xref linkend="sql-createfunction"> for more information about
      this capability.
     </para>
____________________________________________________________________________-->
     <para>
      更改该函数是否被认为是防泄漏的。关于这项能力的详情请见
      <xref linkend="sql-createfunction"/>。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>COST</literal> <replaceable class="parameter">execution_cost</replaceable></term>
____________________________________________________________________________-->
     <term><literal>COST</literal> <replaceable class="parameter">execution_cost</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       Change the estimated execution cost of the function.
       See <xref linkend="sql-createfunction"> for more information.
      </para>
____________________________________________________________________________-->
      <para>
       更改该函数的估计执行代价。详见<xref linkend="sql-createfunction"/>。
      </para>
     </listitem>
   </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>ROWS</literal> <replaceable class="parameter">result_rows</replaceable></term>
____________________________________________________________________________-->
     <term><literal>ROWS</literal> <replaceable class="parameter">result_rows</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       Change the estimated number of rows returned by a set-returning
       function.  See <xref linkend="sql-createfunction"> for more information.
      </para>
____________________________________________________________________________-->
      <para>
       更改一个集合返回函数的估计行数。详见
       <xref linkend="sql-createfunction"/>。
      </para>
     </listitem>
   </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><replaceable>configuration_parameter</replaceable></term>
____________________________________________________________________________-->
      <term><replaceable>configuration_parameter</replaceable></term>
<!--==========================orignal english content==========================
      <term><replaceable>value</replaceable></term>
____________________________________________________________________________-->
      <term><replaceable>value</replaceable></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Add or change the assignment to be made to a configuration parameter
        when the function is called.  If
        <replaceable>value</replaceable> is <literal>DEFAULT</literal>
        or, equivalently, <literal>RESET</literal> is used, the function-local
        setting is removed, so that the function executes with the value
        present in its environment.  Use <literal>RESET
        ALL</literal> to clear all function-local settings.
        <literal>SET FROM CURRENT</> saves the value of the parameter that
        is current when <command>ALTER FUNCTION</> is executed as the value
        to be applied when the function is entered.
       </para>
____________________________________________________________________________-->
       <para>
        当该函数被调用时，要对一个配置参数做出增加或者更改的赋值。如果
        <replaceable>value</replaceable>是<literal>DEFAULT</literal>
        或者使用等价的<literal>RESET</literal>，该函数本地的设置将会被
        移除，这样该函数会使用其环境中存在的值执行。使用<literal>RESET
        ALL</literal>可以清除所有函数本地的设置。
        <literal>SET FROM CURRENT</literal>把<command>ALTER FUNCTION</command>
        执行时该参数的当前值保存为进入
        该函数时要应用的值。
       </para>

<!--==========================orignal english content==========================
       <para>
        See <xref linkend="sql-set"> and
        <xref linkend="runtime-config">
        for more information about allowed parameter names and values.
       </para>
____________________________________________________________________________-->
       <para>
        有关允许的参数名称和值可详见<xref linkend="sql-set"/>以及
        <xref linkend="runtime-config"/>。
       </para>
      </listitem>
     </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>RESTRICT</literal></term>
____________________________________________________________________________-->
    <term><literal>RESTRICT</literal></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Ignored for conformance with the SQL standard.
     </para>
____________________________________________________________________________-->
     <para>
      为了符合 SQL 标准存在，被忽略。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   To rename the function <literal>sqrt</literal> for type
   <type>integer</type> to <literal>square_root</literal>:
<programlisting>
ALTER FUNCTION sqrt(integer) RENAME TO square_root;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   要把用于类型<type>integer</type>的函数<literal>sqrt</literal>
   重命名为<literal>square_root</literal>：
<programlisting>
ALTER FUNCTION sqrt(integer) RENAME TO square_root;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   To change the owner of the function <literal>sqrt</literal> for type
   <type>integer</type> to <literal>joe</literal>:
<programlisting>
ALTER FUNCTION sqrt(integer) OWNER TO joe;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   要把用于类型<type>integer</type>的函数<literal>sqrt</literal>
   的拥有者改为<literal>joe</literal>：
<programlisting>
ALTER FUNCTION sqrt(integer) OWNER TO joe;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   To change the schema of the function <literal>sqrt</literal> for type
   <type>integer</type> to <literal>maths</literal>:
<programlisting>
ALTER FUNCTION sqrt(integer) SET SCHEMA maths;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   要把用于类型<type>integer</type>的函数<literal>sqrt</literal>
   的模式改为<literal>maths</literal>：
<programlisting>
ALTER FUNCTION sqrt(integer) SET SCHEMA maths;
</programlisting>
  </para>
  
<!--==========================orignal english content==========================
  <para>
   To mark the function <literal>sqrt</literal> for type
   <type>integer</type> as being dependent on the extension
   <literal>mathlib</literal>:
<programlisting>
ALTER FUNCTION sqrt(integer) DEPENDS ON EXTENSION mathlib;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   要把类型<type>integer</type>的函数<literal>sqrt</literal>
   标记为依赖于扩展<literal>mathlib</literal>：
<programlisting>
ALTER FUNCTION sqrt(integer) DEPENDS ON EXTENSION mathlib;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   To adjust the search path that is automatically set for a function:
<programlisting>
ALTER FUNCTION check_password(text) SET search_path = admin, pg_temp;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   要调整一个函数的自动搜索路径：
<programlisting>
ALTER FUNCTION check_password(text) SET search_path = admin, pg_temp;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   To disable automatic setting of <varname>search_path</> for a function:
<programlisting>
ALTER FUNCTION check_password(text) RESET search_path;
</programlisting>
   The function will now execute with whatever search path is used by its
   caller.
  </para>
____________________________________________________________________________-->
  <para>
   要禁止一个函数的<varname>search_path</varname>的自动设置：
<programlisting>
ALTER FUNCTION check_password(text) RESET search_path;
</programlisting>
   这个函数将用其调用者使用的搜索路径来执行。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   This statement is partially compatible with the <command>ALTER
   FUNCTION</> statement in the SQL standard. The standard allows more
   properties of a function to be modified, but does not provide the
   ability to rename a function, make a function a security definer,
   attach configuration parameter values to a function,
   or change the owner, schema, or volatility of a function. The standard also
   requires the <literal>RESTRICT</> key word, which is optional in
   <productname>PostgreSQL</>.
  </para>
____________________________________________________________________________-->
  <para>
   这个语句部分兼容 SQL 标准中的<command>ALTER
   FUNCTION</command>语句。该标准允许修改一个函数的更多属性，但是不提供
   重命名一个函数、标记一个函数为安全性定义者、为一个函数附加配置参
   数值或者更改一个函数的拥有者、模式或者稳定性等功能。该标准还要求
   <literal>RESTRICT</literal>关键字，它在<productname>PostgreSQL</productname>
   中是可选的。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createfunction"/></member>
   <member><xref linkend="sql-dropfunction"/></member>
   <member><xref linkend="sql-alterprocedure"/></member>
   <member><xref linkend="sql-alterroutine"/></member>
  </simplelist>
 </refsect1>
</refentry>

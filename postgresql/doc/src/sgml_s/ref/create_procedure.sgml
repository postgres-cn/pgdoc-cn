<!--
doc/src/sgml/ref/create_procedure.sgml
-->

<refentry id="sql-createprocedure">
<!--==========================orignal english content==========================
 <indexterm zone="sql-createprocedure">
  <primary>CREATE PROCEDURE</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-createprocedure">
  <primary>CREATE PROCEDURE</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>CREATE PROCEDURE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>CREATE PROCEDURE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>CREATE PROCEDURE</refname>
  <refpurpose>define a new procedure</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>CREATE PROCEDURE</refname>
  <refpurpose>定义一个新的过程</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
CREATE [ OR REPLACE ] PROCEDURE
    <replaceable class="parameter">name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [ { DEFAULT | = } <replaceable class="parameter">default_expr</replaceable> ] [, ...] ] )
  { LANGUAGE <replaceable class="parameter">lang_name</replaceable>
    | TRANSFORM { FOR TYPE <replaceable class="parameter">type_name</replaceable> } [, ... ]
    | [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
    | SET <replaceable class="parameter">configuration_parameter</replaceable> { TO <replaceable class="parameter">value</replaceable> | = <replaceable class="parameter">value</replaceable> | FROM CURRENT }
    | AS '<replaceable class="parameter">definition</replaceable>'
    | AS '<replaceable class="parameter">obj_file</replaceable>', '<replaceable class="parameter">link_symbol</replaceable>'
  } ...
</synopsis>
____________________________________________________________________________-->
<synopsis>
CREATE [ OR REPLACE ] PROCEDURE
    <replaceable class="parameter">name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [ { DEFAULT | = } <replaceable class="parameter">default_expr</replaceable> ] [, ...] ] )
  { LANGUAGE <replaceable class="parameter">lang_name</replaceable>
    | TRANSFORM { FOR TYPE <replaceable class="parameter">type_name</replaceable> } [, ... ]
    | [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
    | SET <replaceable class="parameter">configuration_parameter</replaceable> { TO <replaceable class="parameter">value</replaceable> | = <replaceable class="parameter">value</replaceable> | FROM CURRENT }
    | AS '<replaceable class="parameter">definition</replaceable>'
    | AS '<replaceable class="parameter">obj_file</replaceable>', '<replaceable class="parameter">link_symbol</replaceable>'
  } ...
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createprocedure-description">
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>简介</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE PROCEDURE</command> defines a new procedure.
   <command>CREATE OR REPLACE PROCEDURE</command> will either create a
   new procedure, or replace an existing definition.
   To be able to define a procedure, the user must have the
   <literal>USAGE</literal> privilege on the language.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE PROCEDURE</command>定义一个新的过程。<command>CREATE OR REPLACE PROCEDURE</command>将会创建一个新过程或者替换一个已有的定义。为了能够定义过程，用户必须具有所使用的语言上的<literal>USAGE</literal>特权。
  </para>

<!--==========================orignal english content==========================
  <para>
   If a schema name is included, then the procedure is created in the
   specified schema.  Otherwise it is created in the current schema.
   The name of the new procedure must not match any existing procedure or function
   with the same input argument types in the same schema.  However,
   procedures and functions of different argument types can share a name (this is
   called <firstterm>overloading</firstterm>).
  </para>
____________________________________________________________________________-->
  <para>
   如果这个命令中包括了一个方案名称，则该过程将被创建在该方案中。否则过程将被创建在当前的方案中。新过程的名称不能匹配同一方案中具有相同输入参数类型的任何现有过程或函数。不过，具有不同参数类型的过程和函数可以共享同一个名称（这被称为<firstterm>重载</firstterm>）。
  </para>

<!--==========================orignal english content==========================
  <para>
   To replace the current definition of an existing procedure, use
   <command>CREATE OR REPLACE PROCEDURE</command>.  It is not possible
   to change the name or argument types of a procedure this way (if you
   tried, you would actually be creating a new, distinct procedure).
  </para>
____________________________________________________________________________-->
  <para>
   要替换一个已有过程的当前定义，请使用<command>CREATE OR REPLACE PROCEDURE</command>。不能用这种方式更改过程的名称或者参数类型（如果尝试这样做，实际上会创建一个新的、不同的过程）。
  </para>

<!--==========================orignal english content==========================
  <para>
   When <command>CREATE OR REPLACE PROCEDURE</command> is used to replace an
   existing procedure, the ownership and permissions of the procedure
   do not change.  All other procedure properties are assigned the
   values specified or implied in the command.  You must own the procedure
   to replace it (this includes being a member of the owning role).
  </para>
____________________________________________________________________________-->
  <para>
   当<command>CREATE OR REPLACE PROCEDURE</command>被用来替换一个现有的过程时，该过程的拥有关系和权限保持不变。所有其他的过程属性会被赋予这个命令中指定的或者暗示的值。必须拥有（包括成为拥有角色的成员）该过程才能替换它。
  </para>

<!--==========================orignal english content==========================
  <para>
   The user that creates the procedure becomes the owner of the procedure.
  </para>
____________________________________________________________________________-->
  <para>
   创建过程的用户将成为该过程的拥有者。
  </para>

<!--==========================orignal english content==========================
  <para>
   To be able to create a procedure, you must have <literal>USAGE</literal>
   privilege on the argument types.
  </para>
____________________________________________________________________________-->
  <para>
   为了能够创建一个过程，用户必须具有参数类型上的<literal>USAGE</literal>特权。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>Parameters</title>

   <variablelist>
    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable class="parameter">name</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name (optionally schema-qualified) of the procedure to create.
      </para>
____________________________________________________________________________-->
      <para>
       要创建的过程的名称（可以是被方案限定的）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable class="parameter">argmode</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable class="parameter">argmode</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The mode of an argument: <literal>IN</literal>,
       <literal>INOUT</literal>, or <literal>VARIADIC</literal>.  If omitted,
       the default is <literal>IN</literal>.  (<literal>OUT</literal>
       arguments are currently not supported for procedures.  Use
       <literal>INOUT</literal> instead.)
      </para>
____________________________________________________________________________-->
      <para>
       参数的模式可以是：<literal>IN</literal>、<literal>INOUT</literal>或者<literal>VARIADIC</literal>。如果省略，则默认为<literal>IN</literal>（当前对过程不支持<literal>OUT</literal>参数，可使用<literal>INOUT</literal>）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable class="parameter">argname</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable class="parameter">argname</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of an argument.
      </para>
____________________________________________________________________________-->
      <para>
       参数的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable class="parameter">argtype</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable class="parameter">argtype</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The data type(s) of the procedure's arguments (optionally
       schema-qualified), if any. The argument types can be base, composite,
       or domain types, or can reference the type of a table column.
      </para>
____________________________________________________________________________-->
      <para>
       过程的参数（如果有）的数据类型（可以是被方案限定的）。参数类型可以是基础类型、组合类型或者域类型，或者可以引用一个表列的类型。
      </para>
<!--==========================orignal english content==========================
      <para>
       Depending on the implementation language it might also be allowed
       to specify <quote>pseudo-types</quote> such as <type>cstring</type>.
       Pseudo-types indicate that the actual argument type is either
       incompletely specified, or outside the set of ordinary SQL data types.
      </para>
____________________________________________________________________________-->
      <para>
       根据具体的实现语言，还可能可以指定<quote>伪类型</quote>，例如<type>cstring</type>。伪类型表示实际的参数类型没有完全确定，或者是位于普通SQL数据类型的集合之外。
      </para>
<!--==========================orignal english content==========================
      <para>
       The type of a column is referenced by writing
       <literal><replaceable
       class="parameter">table_name</replaceable>.<replaceable
       class="parameter">column_name</replaceable>%TYPE</literal>.
       Using this feature can sometimes help make a procedure independent of
       changes to the definition of a table.
      </para>
____________________________________________________________________________-->
      <para>
       写上<literal><replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable>%TYPE</literal>可以引用某个列的类型。使用这种特性有时可以让过程不受表定义改变的影响。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable class="parameter">default_expr</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable class="parameter">default_expr</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       An expression to be used as default value if the parameter is
       not specified.  The expression has to be coercible to the
       argument type of the parameter.
       All input parameters following a
       parameter with a default value must have default values as well.
      </para>
____________________________________________________________________________-->
      <para>
       没有指定参数时要被用作默认值的表达式。这个表达式必须符合该参数的参数类型。跟在有默认值的参数后面的输入参数也都必须有默认值。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable class="parameter">lang_name</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable class="parameter">lang_name</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the language that the procedure is implemented in.
       It can be <literal>sql</literal>, <literal>c</literal>,
       <literal>internal</literal>, or the name of a user-defined
       procedural language, e.g. <literal>plpgsql</literal>.  Enclosing the
       name in single quotes is deprecated and requires matching case.
      </para>
____________________________________________________________________________-->
      <para>
       用于实现该过程的语言名称。它可以是<literal>sql</literal>、<literal>c</literal>、<literal>internal</literal>或者一种用户定义的过程语言的名称，例如<literal>plpgsql</literal>。将名称包裹在单引号内的方式已经被废弃，并且要求大小写匹配。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>TRANSFORM { FOR TYPE <replaceable class="parameter">type_name</replaceable> } [, ... ] }</literal></term>
____________________________________________________________________________-->
     <term><literal>TRANSFORM { FOR TYPE <replaceable class="parameter">type_name</replaceable> } [, ... ] }</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       Lists which transforms a call to the procedure should apply.  Transforms
       convert between SQL types and language-specific data types;
       see <xref linkend="sql-createtransform"/>.  Procedural language
       implementations usually have hardcoded knowledge of the built-in types,
       so those don't need to be listed here.  If a procedural language
       implementation does not know how to handle a type and no transform is
       supplied, it will fall back to a default behavior for converting data
       types, but this depends on the implementation.
      </para>
____________________________________________________________________________-->
      <para>
       列出对过程的调用应该应用哪些Transform。Transform负责在SQL类型和语言相关的数据类型之间进行转换，请参考<xref linkend="sql-createtransform"/>。过程语言实现通常采用硬编码的方式保存内建类型的知识，因此它们无需在这里列出。但如果一种过程语言实现不知道如何处理一种类型并且没有提供Transform，它将回退到默认的行为来转换数据类型，但是这依赖于其实现。
      </para>
     </listitem>
    </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal><optional>EXTERNAL</optional> SECURITY INVOKER</literal></term>
____________________________________________________________________________-->
    <term><literal><optional>EXTERNAL</optional> SECURITY INVOKER</literal></term>
<!--==========================orignal english content==========================
    <term><literal><optional>EXTERNAL</optional> SECURITY DEFINER</literal></term>
____________________________________________________________________________-->
    <term><literal><optional>EXTERNAL</optional> SECURITY DEFINER</literal></term>

    <listitem>
<!--==========================orignal english content==========================
     <para><literal>SECURITY INVOKER</literal> indicates that the procedure
      is to be executed with the privileges of the user that calls it.
      That is the default.  <literal>SECURITY DEFINER</literal>
      specifies that the procedure is to be executed with the
      privileges of the user that owns it.
     </para>
____________________________________________________________________________-->
     <para><literal>SECURITY INVOKER</literal>指示过程以调用它的用户的特权来执行。这是默认方式。<literal>SECURITY DEFINER</literal>指定过程以拥有它的用户的特权来执行。
     </para>

<!--==========================orignal english content==========================
     <para>
      The key word <literal>EXTERNAL</literal> is allowed for SQL
      conformance, but it is optional since, unlike in SQL, this feature
      applies to all procedures not only external ones.
     </para>
____________________________________________________________________________-->
     <para>
      为了符合SQL标注，允许使用<literal>EXTERNAL</literal>关键词，但它是可选的，因为和SQL中不同，这个特性适用于所有的过程而不仅仅是外部过程。
     </para>

<!--==========================orignal english content==========================
     <para>
      A <literal>SECURITY DEFINER</literal> procedure cannot execute
      transaction control statements (for example, <command>COMMIT</command>
      and <command>ROLLBACK</command>, depending on the language).
     </para>
____________________________________________________________________________-->
     <para>
      <literal>SECURITY DEFINER</literal>过程不能执行事务控制语句（例如<command>COMMIT</command>和<command>ROLLBACK</command>，具体取决于实现的语言）。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable>configuration_parameter</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>configuration_parameter</replaceable></term>
<!--==========================orignal english content==========================
     <term><replaceable>value</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>value</replaceable></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       The <literal>SET</literal> clause causes the specified configuration
       parameter to be set to the specified value when the procedure is
       entered, and then restored to its prior value when the procedure exits.
       <literal>SET FROM CURRENT</literal> saves the value of the parameter that
       is current when <command>CREATE PROCEDURE</command> is executed as the value
       to be applied when the procedure is entered.
      </para>
____________________________________________________________________________-->
      <para>
       <literal>SET</literal>子句导致在进入该过程时指定的配置参数被设置为指定的值，并且在过程退出时恢复到之前的值。<literal>SET FROM CURRENT</literal>把<command>CREATE PROCEDURE</command>执行时该参数的当前值保存为在进入该过程时要应用的值。
      </para>

<!--==========================orignal english content==========================
      <para>
       If a <literal>SET</literal> clause is attached to a procedure, then
       the effects of a <command>SET LOCAL</command> command executed inside the
       procedure for the same variable are restricted to the procedure: the
       configuration parameter's prior value is still restored at procedure exit.
       However, an ordinary
       <command>SET</command> command (without <literal>LOCAL</literal>) overrides the
       <literal>SET</literal> clause, much as it would do for a previous <command>SET
       LOCAL</command> command: the effects of such a command will persist after
       procedure exit, unless the current transaction is rolled back.
      </para>
____________________________________________________________________________-->
      <para>
       如果对过程附加一个<literal>SET</literal>子句，那么在该过程中为同一个变量执行的<command>SET LOCAL</command>命令的效果就被限制于该过程：在过程退出时还是会恢复到该配置参数的以前的值。不过，一个普通的<command>SET</command>命令（没有<literal>LOCAL</literal>）会重载这个<literal>SET</literal>子句，很像它对一个之前的<command>SET LOCAL</command>命令所做的事情：这样一个命令的效果将持续到过程退出之后，除非当前事务被回滚。
      </para>

<!--==========================orignal english content==========================
      <para>
       If a <literal>SET</literal> clause is attached to a procedure, then
       that procedure cannot execute transaction control statements (for
       example, <command>COMMIT</command> and <command>ROLLBACK</command>,
       depending on the language).
      </para>
____________________________________________________________________________-->
      <para>
       如果对过程附加一个<literal>SET</literal>子句，则该过程不能执行事务控制语句（例如<command>COMMIT</command>和<command>ROLLBACK</command>，具体取决于实现的语言）。
      </para>

<!--==========================orignal english content==========================
      <para>
       See <xref linkend="sql-set"/> and
       <xref linkend="runtime-config"/>
       for more information about allowed parameter names and values.
      </para>
____________________________________________________________________________-->
      <para>
       有关允许的参数名和值的更多信息请参考<xref linkend="sql-set"/>和<xref linkend="runtime-config"/>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable class="parameter">definition</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable class="parameter">definition</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       A string constant defining the procedure; the meaning depends on the
       language.  It can be an internal procedure name, the path to an
       object file, an SQL command, or text in a procedural language.
      </para>
____________________________________________________________________________-->
      <para>
       一个定义该过程的字符串常量，其含义取决于语言。它可以是一个内部的过程名、一个对象文件的路径、一个SQL命令或者以一种过程语言编写的文本。
      </para>

<!--==========================orignal english content==========================
      <para>
       It is often helpful to use dollar quoting (see <xref
       linkend="sql-syntax-dollar-quoting"/>) to write the procedure definition
       string, rather than the normal single quote syntax.  Without dollar
       quoting, any single quotes or backslashes in the procedure definition must
       be escaped by doubling them.
      </para>
____________________________________________________________________________-->
      <para>
       在编写过程的定义字符串时，使用美元引用（见<xref linkend="sql-syntax-dollar-quoting"/>）而不是普通的单引号语法常常会很有帮助。如果没有美元引用，过程定义中的任何单引号或者反斜线必须以双写的方式进行转义。
      </para>

     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal><replaceable class="parameter">obj_file</replaceable>, <replaceable class="parameter">link_symbol</replaceable></literal></term>
____________________________________________________________________________-->
     <term><literal><replaceable class="parameter">obj_file</replaceable>, <replaceable class="parameter">link_symbol</replaceable></literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       This form of the <literal>AS</literal> clause is used for
       dynamically loadable C language procedures when the procedure name
       in the C language source code is not the same as the name of
       the SQL procedure. The string <replaceable
       class="parameter">obj_file</replaceable> is the name of the shared
       library file containing the compiled C procedure, and is interpreted
       as for the <xref linkend="sql-load"/> command.  The string
       <replaceable class="parameter">link_symbol</replaceable> is the
       procedure's link symbol, that is, the name of the procedure in the C
       language source code.  If the link symbol is omitted, it is assumed
       to be the same as the name of the SQL procedure being defined.
      </para>
____________________________________________________________________________-->
      <para>
       当C语言源码中的过程名与SQL过程的名称不同时，这种形式的<literal>AS</literal>子句被用于动态可装载的C语言过程。字符串<replaceable
       class="parameter">obj_file</replaceable>是包含已编译好的C过程的共享库文件名，并且被按照<xref linkend="sql-load"/>命令的方式解析。字符串<replaceable class="parameter">link_symbol</replaceable>是该过程的链接符号，也就是该过程在C语言源代码中的名称。如果链接符号被省略，则会被假定为与正在被定义的SQL过程的名称相同。
      </para>

<!--==========================orignal english content==========================
      <para>
       When repeated <command>CREATE PROCEDURE</command> calls refer to
       the same object file, the file is only loaded once per session.
       To unload and
       reload the file (perhaps during development), start a new session.
      </para>
____________________________________________________________________________-->
      <para>
       当重复的<command>CREATE PROCEDURE</command>调用引用同一个对象文件时，只会对每一个会话装载该文件一次。要卸载或者重新载入该文件（可能是在开发期间），应该开始一个新的会话。
      </para>

     </listitem>
    </varlistentry>
   </variablelist>
 </refsect1>

 <refsect1 id="sql-createprocedure-notes">
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   See <xref linkend="sql-createfunction"/> for more details on function
   creation that also apply to procedures.
  </para>
____________________________________________________________________________-->
  <para>
   函数创建也适用于过程，更多细节请参考<xref linkend="sql-createfunction"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Use <xref linkend="sql-call"/> to execute a procedure.
  </para>
____________________________________________________________________________-->
  <para>
   使用<xref linkend="sql-call"/>来执行过程。
  </para>
 </refsect1>

 <refsect1 id="sql-createprocedure-examples">
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
<programlisting>
CREATE PROCEDURE insert_data(a integer, b integer)
LANGUAGE SQL
AS $$
INSERT INTO tbl VALUES (a);
INSERT INTO tbl VALUES (b);
$$;

CALL insert_data(1, 2);
</programlisting>
____________________________________________________________________________-->
<programlisting>
CREATE PROCEDURE insert_data(a integer, b integer)
LANGUAGE SQL
AS $$
INSERT INTO tbl VALUES (a);
INSERT INTO tbl VALUES (b);
$$;

CALL insert_data(1, 2);
</programlisting>
 </refsect1>

 <refsect1 id="sql-createprocedure-compat">
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   A <command>CREATE PROCEDURE</command> command is defined in the SQL
   standard.  The <productname>PostgreSQL</productname> version is similar but
   not fully compatible.  For details see
   also <xref linkend="sql-createfunction"/>.
  </para>
____________________________________________________________________________-->
  <para>
   SQL标准中定义有一个<command>CREATE PROCEDURE</command>命令。<productname>PostgreSQL</productname>的版本类似但是并不完全兼容。详情请见<xref linkend="sql-createfunction"/>。
  </para>
 </refsect1>


 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterprocedure"/></member>
   <member><xref linkend="sql-dropprocedure"/></member>
   <member><xref linkend="sql-call"/></member>
   <member><xref linkend="sql-createfunction"/></member>
  </simplelist>
 </refsect1>

</refentry>

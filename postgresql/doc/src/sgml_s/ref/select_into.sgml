<!--
doc/src/sgml/ref/select_into.sgml
PostgreSQL documentation
-->

<refentry id="SQL-SELECTINTO">
<!--==========================orignal english content==========================
 <indexterm zone="sql-selectinto">
  <primary>SELECT INTO</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-selectinto">
  <primary>SELECT INTO</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>SELECT INTO</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>SELECT INTO</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>SELECT INTO</refname>
  <refpurpose>define a new table from the results of a query</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>SELECT INTO</refname>
  <refpurpose>从一个查询的结果定义一个新表</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
SELECT [ ALL | DISTINCT [ ON ( <replaceable class="parameter">expression</replaceable> [, ...] ) ] ]
    * | <replaceable class="parameter">expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...]
    INTO [ TEMPORARY | TEMP | UNLOGGED ] [ TABLE ] <replaceable class="parameter">new_table</replaceable>
    [ FROM <replaceable class="parameter">from_item</replaceable> [, ...] ]
    [ WHERE <replaceable class="parameter">condition</replaceable> ]
    [ GROUP BY <replaceable class="parameter">expression</replaceable> [, ...] ]
    [ HAVING <replaceable class="parameter">condition</replaceable> [, ...] ]
    [ WINDOW <replaceable class="parameter">window_name</replaceable> AS ( <replaceable class="parameter">window_definition</replaceable> ) [, ...] ]
    [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] <replaceable class="parameter">select</replaceable> ]
    [ ORDER BY <replaceable class="parameter">expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operator</replaceable> ] [ NULLS { FIRST | LAST } ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">count</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">start</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">count</replaceable> ] { ROW | ROWS } ONLY ]
    [ FOR { UPDATE | SHARE } [ OF <replaceable class="parameter">table_name</replaceable> [, ...] ] [ NOWAIT ] [...] ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
SELECT [ ALL | DISTINCT [ ON ( <replaceable class="parameter">expression</replaceable> [, ...] ) ] ]
    * | <replaceable class="parameter">expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...]
    INTO [ TEMPORARY | TEMP | UNLOGGED ] [ TABLE ] <replaceable class="parameter">new_table</replaceable>
    [ FROM <replaceable class="parameter">from_item</replaceable> [, ...] ]
    [ WHERE <replaceable class="parameter">condition</replaceable> ]
    [ GROUP BY <replaceable class="parameter">expression</replaceable> [, ...] ]
    [ HAVING <replaceable class="parameter">condition</replaceable> [, ...] ]
    [ WINDOW <replaceable class="parameter">window_name</replaceable> AS ( <replaceable class="parameter">window_definition</replaceable> ) [, ...] ]
    [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] <replaceable class="parameter">select</replaceable> ]
    [ ORDER BY <replaceable class="parameter">expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operator</replaceable> ] [ NULLS { FIRST | LAST } ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">count</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">start</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">count</replaceable> ] { ROW | ROWS } ONLY ]
    [ FOR { UPDATE | SHARE } [ OF <replaceable class="parameter">table_name</replaceable> [, ...] ] [ NOWAIT ] [...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>SELECT INTO</command> creates a new table and fills it
   with data computed by a query.  The data is not returned to the
   client, as it is with a normal <command>SELECT</command>.  The new
   table's columns have the names and data types associated with the
   output columns of the <command>SELECT</command>.
  </para>
____________________________________________________________________________-->
  <para>
   <command>SELECT INTO</command>创建一个新表并且用一个查询
   计算得到的数据填充它。这些数据不会像普通的
   <command>SELECT</command>那样被返回给客户端。新表的列具有
   和<command>SELECT</command>的输出列相关的名称和数据类型。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
  <varlistentry>
<!--==========================orignal english content==========================
   <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
____________________________________________________________________________-->
   <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     If specified, the table is created as a temporary table.  Refer
     to <xref linkend="sql-createtable"> for details.
    </para>
____________________________________________________________________________-->
    <para>
     如果被指定，该表被创建为一个临时表。详见
     <xref linkend="sql-createtable"/>。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
<!--==========================orignal english content==========================
   <term><literal>UNLOGGED</literal></term>
____________________________________________________________________________-->
   <term><literal>UNLOGGED</literal></term>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     If specified, the table is created as an unlogged table.  Refer
     to <xref linkend="sql-createtable"> for details.
    </para>
____________________________________________________________________________-->
    <para>
     如果被指定，该表被创建为一个不做日志的表。详见
     <xref linkend="sql-createtable"/>。
    </para>
   </listitem>
  </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">new_table</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">new_table</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of the table to be created.
     </para>
____________________________________________________________________________-->
     <para>
      要创建的表的名字（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

<!--==========================orignal english content==========================
  <para>
   All other parameters are described in detail under <xref
   linkend="sql-select">.
  </para>
____________________________________________________________________________-->
  <para>
   所有其他参数在<xref
   linkend="sql-select"/>中有详细描述。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   <xref linkend="sql-createtableas"> is functionally similar to
   <command>SELECT INTO</command>.  <command>CREATE TABLE AS</command>
   is the recommended syntax, since this form of <command>SELECT
   INTO</command> is not available in <application>ECPG</application>
   or <application>PL/pgSQL</application>, because they interpret the
   <literal>INTO</literal> clause differently. Furthermore,
   <command>CREATE TABLE AS</command> offers a superset of the
   functionality provided by <command>SELECT INTO</command>.
  </para>
____________________________________________________________________________-->
  <para>
   <xref linkend="sql-createtableas"/>在功能上与
   <command>SELECT INTO</command>相似。<command>CREATE TABLE AS</command>
   是被推荐的语法，因为这种形式的<command>SELECT
   INTO</command>在<application>ECPG</application>
   或<application>PL/pgSQL</application>中不可用，因为它们对
   <literal>INTO</literal>子句的解释不同。此外，
   <command>CREATE TABLE AS</command>提供的功能是
   <command>SELECT INTO</command>的超集。
  </para>

<!--==========================orignal english content==========================
  <para>
   To add OIDs to the table created by <command>SELECT INTO</command>,
   enable the <xref linkend="guc-default-with-oids"> configuration
   variable.  Alternatively, <command>CREATE TABLE AS</command> can be
   used with the <literal>WITH OIDS</literal> clause.
  </para>
____________________________________________________________________________-->
  <para>
   要为<command>SELECT INTO</command>创建的表增加 OID，
   启用<xref linkend="guc-default-with-oids"/>配置变量。
   <command>CREATE TABLE AS</command>可以使用
   <literal>WITH OIDS</literal>子句。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   Create a new table <literal>films_recent</literal> consisting of only
   recent entries from the table <literal>films</literal>:

<programlisting>
SELECT * INTO films_recent FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting></para>
____________________________________________________________________________-->
  <para>
   创建一个只由来自<literal>films</literal>的最近项构成的
   新表<literal>films_recent</literal>：

<programlisting>
SELECT * INTO films_recent FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   The SQL standard uses <command>SELECT INTO</command> to
   represent selecting values into scalar variables of a host program,
   rather than creating a new table.  This indeed is the usage found
   in <application>ECPG</application> (see <xref linkend="ecpg">) and
   <application>PL/pgSQL</application> (see <xref linkend="plpgsql">).
   The <productname>PostgreSQL</productname> usage of <command>SELECT
   INTO</command> to represent table creation is historical.  It is
   best to use <command>CREATE TABLE AS</command> for this purpose in
   new code.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 标准使用<command>SELECT INTO</command>表示把值选择
   到一个宿主程序的标量变量中，而不是创建一个新表。这实际上就是
   <application>ECPG</application>（见<xref linkend="ecpg"/>）和
   <application>PL/pgSQL</application>（见<xref linkend="plpgsql"/>）
   中的用法。
   <productname>PostgreSQL</productname>使用
   <command>SELECT INTO</command>的来表示表创建是有历史原因的。
   最好在新代码中使用<command>CREATE TABLE AS</command>。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createtableas"/></member>
  </simplelist>
 </refsect1>
</refentry>

<!--
doc/src/sgml/ref/create_schema.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATESCHEMA">
<!--==========================orignal english content==========================
 <indexterm zone="sql-createschema">
  <primary>CREATE SCHEMA</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-createschema">
  <primary>CREATE SCHEMA</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>CREATE SCHEMA</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>CREATE SCHEMA</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>CREATE SCHEMA</refname>
  <refpurpose>define a new schema</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>CREATE SCHEMA</refname>
  <refpurpose>定义一个新模式</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
CREATE SCHEMA <replaceable class="parameter">schema_name</replaceable> [ AUTHORIZATION <replaceable class="parameter">role_specification</replaceable> ] [ <replaceable class="parameter">schema_element</replaceable> [ ... ] ]
CREATE SCHEMA AUTHORIZATION <replaceable class="parameter">role_specification</replaceable> [ <replaceable class="parameter">schema_element</replaceable> [ ... ] ]
CREATE SCHEMA IF NOT EXISTS <replaceable class="parameter">schema_name</replaceable> [ AUTHORIZATION <replaceable class="parameter">role_specification</replaceable> ]
CREATE SCHEMA IF NOT EXISTS AUTHORIZATION <replaceable class="parameter">role_specification</replaceable>

<phrase>where <replaceable class="parameter">role_specification</replaceable> can be:</phrase>

    <replaceable class="parameter">user_name</replaceable>
  | CURRENT_USER
  | SESSION_USER
</synopsis>
____________________________________________________________________________-->
<synopsis>
CREATE SCHEMA <replaceable class="parameter">schema_name</replaceable> [ AUTHORIZATION <replaceable class="parameter">role_specification</replaceable> ] [ <replaceable class="parameter">schema_element</replaceable> [ ... ] ]
CREATE SCHEMA AUTHORIZATION <replaceable class="parameter">role_specification</replaceable> [ <replaceable class="parameter">schema_element</replaceable> [ ... ] ]
CREATE SCHEMA IF NOT EXISTS <replaceable class="parameter">schema_name</replaceable> [ AUTHORIZATION <replaceable class="parameter">role_specification</replaceable> ]
CREATE SCHEMA IF NOT EXISTS AUTHORIZATION <replaceable class="parameter">role_specification</replaceable>

<phrase>其中 <replaceable class="parameter">role_specification</replaceable> 可以是：</phrase>

    <replaceable class="parameter">user_name</replaceable>
  | CURRENT_USER
  | SESSION_USER
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE SCHEMA</command> enters a new schema
   into the current database.
   The schema name must be distinct from the name of any existing schema
   in the current database.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE SCHEMA</command>输入一个新模式到当前数据库中。
   该模式名必须与当前数据库中任何现有模式的名称不同。
  </para>

<!--==========================orignal english content==========================
  <para>
   A schema is essentially a namespace:
   it contains named objects (tables, data types, functions, and operators)
   whose names can duplicate those of other objects existing in other
   schemas.  Named objects are accessed either by <quote>qualifying</>
   their names with the schema name as a prefix, or by setting a search
   path that includes the desired schema(s).  A <literal>CREATE</> command
   specifying an unqualified object name creates the object
   in the current schema (the one at the front of the search path,
   which can be determined with the function <function>current_schema</function>).
  </para>
____________________________________________________________________________-->
  <para>
   一个模式本质上是一个名字空间：它包含命令对象（表、数据类型、函数以及操作符），
   对象可以与在其他模式中存在的对象重名。可以通过用模式名作为一个前缀
   <quote>限定</quote>命名对象的名称来访问它们，或者通过把要求的模式包括
   在搜索路径中来访问命名对象。一个指定非限定对象名的
   <literal>CREATE</literal>命令在当前模式（搜索路径中的第一个模式，由函数
   <function>current_schema</function>决定）中创建对象。
  </para>

<!--==========================orignal english content==========================
  <para>
   Optionally, <command>CREATE SCHEMA</command> can include subcommands
   to create objects within the new schema.  The subcommands are treated
   essentially the same as separate commands issued after creating the
   schema, except that if the <literal>AUTHORIZATION</> clause is used,
   all the created objects will be owned by that user.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE SCHEMA</command>中可以选择包括子命令用以在
   新模式中创建对象。这些子命令实际被当做独立的在创建该模式后被发出的命令
   一样，除非使用<literal>AUTHORIZATION</literal>子句，所有被创建的对象都会
   由该用户拥有。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

    <variablelist>
     <varlistentry>
<!--==========================orignal english content==========================
      <term><replaceable class="parameter">schema_name</replaceable></term>
____________________________________________________________________________-->
      <term><replaceable class="parameter">schema_name</replaceable></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The name of a schema to be created.  If this is omitted, the
        <replaceable class="parameter">user_name</replaceable>
        is used as the schema name.  The name cannot
        begin with <literal>pg_</literal>, as such names
        are reserved for system schemas.
       </para>
____________________________________________________________________________-->
       <para>
        要创建的一个模式名。如果省略，
        <replaceable class="parameter">user_name</replaceable>将被用作模式名。
        该名称不能以<literal>pg_</literal>开始，因为这样的名称是用作系统模式的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><replaceable class="parameter">user_name</replaceable></term>
____________________________________________________________________________-->
      <term><replaceable class="parameter">user_name</replaceable></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The role name of the user who will own the new schema.  If omitted,
        defaults to the user executing the command.  To create a schema
        owned by another role, you must be a direct or indirect member of
        that role, or be a superuser.
       </para>
____________________________________________________________________________-->
       <para>
        将拥有新模式的用户的角色名。如果省略，默认为执行该命令的用户。要
        创建由另一个角色拥有的角色，你必须是那个角色的一个直接或者间接成员，
        或者是一个超级用户。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><replaceable class="parameter">schema_element</replaceable></term>
____________________________________________________________________________-->
      <term><replaceable class="parameter">schema_element</replaceable></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        An SQL statement defining an object to be created within the
        schema. Currently, only <command>CREATE
        TABLE</>, <command>CREATE VIEW</>, <command>CREATE
        INDEX</>, <command>CREATE SEQUENCE</>, <command>CREATE
        TRIGGER</> and <command>GRANT</> are accepted as clauses
        within <command>CREATE SCHEMA</>. Other kinds of objects may
        be created in separate commands after the schema is created.
       </para>
____________________________________________________________________________-->
       <para>
        要在该模式中创建的对象的定义 SQL 语句。当前，只有<command>CREATE
        TABLE</command>、<command>CREATE VIEW</command>、<command>CREATE
        INDEX</command>、<command>CREATE SEQUENCE</command>、<command>CREATE
        TRIGGER</command>以及<command>GRANT</command>被接受为
        <command>CREATE SCHEMA</command>中的子句。其他类型的对象可以在模式被
        创建之后用单独的命令创建。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><literal>IF NOT EXISTS</literal></term>
____________________________________________________________________________-->
      <term><literal>IF NOT EXISTS</literal></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Do nothing (except issuing a notice) if a schema with the same name
        already exists.  <replaceable class="parameter">schema_element</>
        subcommands cannot be included when this option is used.
       </para>
____________________________________________________________________________-->
       <para>
        如果一个具有同名的模式已经存在，则什么也不做（不过发出一个提示）。
        使用这个选项时不能包括
        <replaceable class="parameter">schema_element</replaceable>子命令。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   To create a schema, the invoking user must have the
   <literal>CREATE</> privilege for the current database.
   (Of course, superusers bypass this check.)
  </para>
____________________________________________________________________________-->
  <para>
   要创建一个模式，调用用户必须拥有当前数据库的<literal>CREATE</literal>
   特权（当然，超级用户可以绕过这种检查）。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   Create a schema:
<programlisting>
CREATE SCHEMA myschema;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   创建一个模式：
<programlisting>
CREATE SCHEMA myschema;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Create a schema for user <literal>joe</>; the schema will also be
   named <literal>joe</>:
<programlisting>
CREATE SCHEMA AUTHORIZATION joe;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   为用户<literal>joe</literal>创建一个模式，该模式也将被命名为
   <literal>joe</literal>：
<programlisting>
CREATE SCHEMA AUTHORIZATION joe;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Create a schema named <literal>test</> that will be owned by user
   <literal>joe</>, unless there already is a schema named <literal>test</>.
   (It does not matter whether <literal>joe</> owns the pre-existing schema.)
<programlisting>
CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   创建一个被用户<literal>joe</literal>拥有的名为<literal>test</literal>的模式，
   除非已经有一个名为<literal>test</literal>的模式（不管<literal>joe</literal>
   是否拥有该已经存在的模式）。
<programlisting>
CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Create a schema and create a table and view within it:
<programlisting>
CREATE SCHEMA hollywood
    CREATE TABLE films (title text, release date, awards text[])
    CREATE VIEW winners AS
        SELECT title, release FROM films WHERE awards IS NOT NULL;
</programlisting>
   Notice that the individual subcommands do not end with semicolons.
  </para>
____________________________________________________________________________-->
  <para>
   创建一个模式并且在其中创建一个表和视图：
<programlisting>
CREATE SCHEMA hollywood
    CREATE TABLE films (title text, release date, awards text[])
    CREATE VIEW winners AS
        SELECT title, release FROM films WHERE awards IS NOT NULL;
</programlisting>
   注意子命令不以分号结束。
  </para>

<!--==========================orignal english content==========================
  <para>
   The following is an equivalent way of accomplishing the same result:
<programlisting>
CREATE SCHEMA hollywood;
CREATE TABLE hollywood.films (title text, release date, awards text[]);
CREATE VIEW hollywood.winners AS
    SELECT title, release FROM hollywood.films WHERE awards IS NOT NULL;
</programlisting></para>
____________________________________________________________________________-->
  <para>
   下面是达到相同结果的等效的方法：
<programlisting>
CREATE SCHEMA hollywood;
CREATE TABLE hollywood.films (title text, release date, awards text[]);
CREATE VIEW hollywood.winners AS
    SELECT title, release FROM hollywood.films WHERE awards IS NOT NULL;
</programlisting></para>

 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   The SQL standard allows a <literal>DEFAULT CHARACTER SET</> clause
   in <command>CREATE SCHEMA</command>, as well as more subcommand
   types than are presently accepted by
   <productname>PostgreSQL</productname>.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 标准允许在<command>CREATE SCHEMA</command>中有一个
   <literal>DEFAULT CHARACTER SET</literal>子句，以及当前
   <productname>PostgreSQL</productname>接受的更多子命令类型。
  </para>

<!--==========================orignal english content==========================
  <para>
   The SQL standard specifies that the subcommands in <command>CREATE
   SCHEMA</command> can appear in any order.  The present
   <productname>PostgreSQL</productname> implementation does not
   handle all cases of forward references in subcommands; it might
   sometimes be necessary to reorder the subcommands in order to avoid
   forward references.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 标准制定<command>CREATE SCHEMA</command>中的子命令
   可以以任何顺序出现。当前的
   <productname>PostgreSQL</productname>实现不能处理子命令中
   所有情况的向前引用。有时候可能有必要对子命令进行重排序以避免向前
   引用。
  </para>

<!--==========================orignal english content==========================
  <para>
   According to the SQL standard, the owner of a schema always owns
   all objects within it.  <productname>PostgreSQL</productname>
   allows schemas to contain objects owned by users other than the
   schema owner.  This can happen only if the schema owner grants the
   <literal>CREATE</> privilege on their schema to someone else, or a
   superuser chooses to create objects in it.
  </para>
____________________________________________________________________________-->
  <para>
   根据 SQL 标准，模式的拥有者总是拥有其中的所有对象。
   <productname>PostgreSQL</productname>允许模式包含非模式
   拥有者所拥有的对象。只有模式拥有者把其模式上的<literal>CREATE</literal>
   特权授予给了其他人或者一个超级用户选择在该模式中创建对象时才会
   发生这种事情。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <literal>IF NOT EXISTS</literal> option is a
   <productname>PostgreSQL</productname> extension.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>IF NOT EXISTS</literal>选项是一种
   <productname>PostgreSQL</productname>扩展。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterschema"/></member>
   <member><xref linkend="sql-dropschema"/></member>
 </simplelist>
 </refsect1>

</refentry>

<!--
doc/src/sgml/ref/alter_opfamily.sgml
PostgreSQL documentation
-->

<refentry id="sql-alteropfamily">
<!--==========================orignal english content==========================
 <indexterm zone="sql-alteropfamily">
  <primary>ALTER OPERATOR FAMILY</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-alteropfamily">
  <primary>ALTER OPERATOR FAMILY</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>ALTER OPERATOR FAMILY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>ALTER OPERATOR FAMILY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>ALTER OPERATOR FAMILY</refname>
  <refpurpose>change the definition of an operator family</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>ALTER OPERATOR FAMILY</refname>
  <refpurpose>更改一个操作符族的定义</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> ADD
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> <replaceable class="parameter">operator_name</replaceable> ( <replaceable class="parameter">op_type</replaceable>, <replaceable class="parameter">op_type</replaceable> )
              [ FOR SEARCH | FOR ORDER BY <replaceable class="parameter">sort_family_name</replaceable> ]
   | FUNCTION <replaceable class="parameter">support_number</replaceable> [ ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] ) ]
              <replaceable class="parameter">function_name</replaceable> [ ( <replaceable class="parameter">argument_type</replaceable> [, ...] ) ]
  } [, ... ]

ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> DROP
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] )
   | FUNCTION <replaceable class="parameter">support_number</replaceable> ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] )
  } [, ... ]

ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable>
    RENAME TO <replaceable>new_name</replaceable>

ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable>
    OWNER TO { <replaceable>new_owner</replaceable> | CURRENT_USER | SESSION_USER }

ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable>
    SET SCHEMA <replaceable>new_schema</replaceable>
</synopsis>
____________________________________________________________________________-->
<synopsis>
ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> ADD
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> <replaceable class="parameter">operator_name</replaceable> ( <replaceable class="parameter">op_type</replaceable>, <replaceable class="parameter">op_type</replaceable> )
              [ FOR SEARCH | FOR ORDER BY <replaceable class="parameter">sort_family_name</replaceable> ]
   | FUNCTION <replaceable class="parameter">support_number</replaceable> [ ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] ) ]
              <replaceable class="parameter">function_name</replaceable> [ ( <replaceable class="parameter">argument_type</replaceable> [, ...] ) ]
  } [, ... ]

ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable> DROP
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] )
   | FUNCTION <replaceable class="parameter">support_number</replaceable> ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] )
  } [, ... ]

ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable>
    RENAME TO <replaceable>new_name</replaceable>

ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable>
    OWNER TO { <replaceable>new_owner</replaceable> | CURRENT_USER | SESSION_USER }

ALTER OPERATOR FAMILY <replaceable>name</replaceable> USING <replaceable class="parameter">index_method</replaceable>
    SET SCHEMA <replaceable>new_schema</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>ALTER OPERATOR FAMILY</command> changes the definition of
   an operator family.  You can add operators and support functions
   to the family, remove them from the family,
   or change the family's name or owner.
  </para>
____________________________________________________________________________-->
  <para>
   <command>ALTER OPERATOR FAMILY</command>更改一个操作符族
   的定义。你能增加操作符以及支持函数到该家族、从该族中移除它们或者更改
   该族的名称或者拥有者。
  </para>

<!--==========================orignal english content==========================
  <para>
   When operators and support functions are added to a family with
   <command>ALTER OPERATOR FAMILY</command>, they are not part of any
   specific operator class within the family, but are just <quote>loose</>
   within the family.  This indicates that these operators and functions
   are compatible with the family's semantics, but are not required for
   correct functioning of any specific index.  (Operators and functions
   that are so required should be declared as part of an operator class,
   instead; see <xref linkend="sql-createopclass">.)
   <productname>PostgreSQL</productname> will allow loose members of a
   family to be dropped from the family at any time, but members of an
   operator class cannot be dropped without dropping the whole class and
   any indexes that depend on it.
   Typically, single-data-type operators
   and functions are part of operator classes because they are needed to
   support an index on that specific data type, while cross-data-type
   operators and functions are made loose members of the family.
  </para>
____________________________________________________________________________-->
  <para>
   在用<command>ALTER OPERATOR FAMILY</command>增加操作符和
   支持函数到一个族中时，它们不是族内任何特定操作符类的组成部分，而只是
   <quote>松散</quote>地存在于该族中。这表示这些操作符和函数与该族的语义兼
   容，但是没有被任何特定索引的正确功能所要求（所要求的操作符和函数应该
   被作为一个操作符类的一部分声明，见<xref linkend="sql-createopclass"/>）。
   <productname>PostgreSQL</productname>将允许一个族的松散成员在
   任何时候被从该族中删除，但是在删除一个操作符类的成员之前，必须已经删
   除整个类以及依赖于该成员的索引。具有代表性的是，单一数据类型操作符和
   函数是操作符类的一部分，因为在特定数据类型上的索引需要它们的支持。而
   多数据类型操作符和函数则被作为该族的松散成员。
  </para>

<!--==========================orignal english content==========================
  <para>
   You must be a superuser to use <command>ALTER OPERATOR FAMILY</>.
   (This restriction is made because an erroneous operator family definition
   could confuse or even crash the server.)
  </para>
____________________________________________________________________________-->
  <para>
   要使用<command>ALTER OPERATOR FAMILY</command>，你必须是超级用户（
   做这样的限制是因为一个错误的操作符族定义可能会迷惑服务器甚至让它崩溃）。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>ALTER OPERATOR FAMILY</command> does not presently check
   whether the operator family definition includes all the operators and
   functions required by the index method, nor whether the operators and
   functions form a self-consistent set.  It is the user's
   responsibility to define a valid operator family.
  </para>
____________________________________________________________________________-->
  <para>
   <command>ALTER OPERATOR FAMILY</command>目前不检测操作符族
   定义是否包括该索引方法所要求的所有操作符和函数，也不检查操作符和函数是
   否形成了一个有理的集合。定义一个合法的操作符族是用户的责任。
  </para>

<!--==========================orignal english content==========================
  <para>
   Refer to <xref linkend="xindex"> for further information.
  </para>
____________________________________________________________________________-->
  <para>
   进一步的信息请参考<xref linkend="xindex"/>。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of an existing operator
      family.
     </para>
____________________________________________________________________________-->
     <para>
      一个现有操作符族的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">index_method</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">index_method</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of the index method this operator family is for.
     </para>
____________________________________________________________________________-->
     <para>
      这个操作符族所应用的索引方法的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">strategy_number</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">strategy_number</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The index method's strategy number for an operator
      associated with the operator family.
     </para>
____________________________________________________________________________-->
     <para>
      与该操作符族相关的一个操作符的索引方法策略号。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">operator_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">operator_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of an operator associated
      with the operator family.
     </para>
____________________________________________________________________________-->
     <para>
      与该操作符族相关的一个操作符的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">op_type</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">op_type</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      In an <literal>OPERATOR</> clause,
      the operand data type(s) of the operator, or <literal>NONE</> to
      signify a left-unary or right-unary operator.  Unlike the comparable
      syntax in <command>CREATE OPERATOR CLASS</>, the operand data types
      must always be specified.
     </para>
____________________________________________________________________________-->
     <para>
      在一个<literal>OPERATOR</literal>子句中指定该操作符的操作数数据类型，
      或者用<literal>NONE</literal>来表示一个左一元或者右一元操作符。不同于
      <command>CREATE OPERATOR CLASS</command>中类似的语法，操作数数据
      类型总是必须被指定。
     </para>

<!--==========================orignal english content==========================
     <para>
      In an <literal>ADD FUNCTION</> clause, the operand data type(s) the
      function is intended to support, if different from
      the input data type(s) of the function.  For B-tree comparison functions
      and hash functions it is not necessary to specify <replaceable
      class="parameter">op_type</replaceable> since the function's input
      data type(s) are always the correct ones to use.  For B-tree sort
      support functions and all functions in GiST, SP-GiST and GIN operator
      classes, it is necessary to specify the operand data type(s) the function
      is to be used with.
     </para>
____________________________________________________________________________-->
     <para>
      在一个<literal>ADD FUNCTION</literal>子句中指定该函数意图支持的操作数
      数据类型（如果不同于该函数的输入数据类型）。对于 B-树比较函数和哈希
      函数，有必要指定<replaceable
      class="parameter">op_type</replaceable>，因为该函数的输入数据类型
      总是正确的。对于 B-树排序支持函数和 GiST、SP-GiST 和 GIN 操作符类中
      的所有函数，有必要指定该函数要使用的操作数数据类型。
     </para>

<!--==========================orignal english content==========================
     <para>
      In a <literal>DROP FUNCTION</> clause, the operand data type(s) the
      function is intended to support must be specified.
     </para>
____________________________________________________________________________-->
     <para>
      在一个<literal>DROP FUNCTION</literal>子句中，必须指定该函数要支持的操
      作数数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">sort_family_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">sort_family_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of an existing <literal>btree</literal> operator
      family that describes the sort ordering associated with an ordering
      operator.
     </para>
____________________________________________________________________________-->
     <para>
      一个现有<literal>btree</literal>操作符族的名称（可能是模式限定的），
      它描述与一个排序操作符相关的排序顺序。
     </para>

<!--==========================orignal english content==========================
     <para>
      If neither <literal>FOR SEARCH</> nor <literal>FOR ORDER BY</> is
      specified, <literal>FOR SEARCH</> is the default.
     </para>
____________________________________________________________________________-->
     <para>
      如果既没有指定<literal>FOR SEARCH</literal>也没有指定<literal>FOR ORDER BY</literal>，
      默认值是<literal>FOR SEARCH</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">support_number</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">support_number</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The index method's support function number for a
      function associated with the operator family.
     </para>
____________________________________________________________________________-->
     <para>
      一个与该操作符族相关的函数的索引方法支持过程编号。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">function_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of a function that is an index
      method support function for the operator family.  If no argument list
      is specified, the name must be unique in its schema.
     </para>
____________________________________________________________________________-->
     <para>
      作为该操作符族的一种索引方法支持函数的函数名称（可以是模式限定的）。
	  如果没有指定参数列表，则该名称必须在其模式中唯一。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">argument_type</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">argument_type</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The parameter data type(s) of the function.
     </para>
____________________________________________________________________________-->
     <para>
      该函数的参数数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">new_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The new name of the operator family.
     </para>
____________________________________________________________________________-->
     <para>
      该操作符族的新名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">new_owner</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">new_owner</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The new owner of the operator family.
     </para>
____________________________________________________________________________-->
     <para>
      该操作符族的新拥有者。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">new_schema</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The new schema for the operator family.
     </para>
____________________________________________________________________________-->
     <para>
      该操作符族的新模式。
     </para>
    </listitem>
   </varlistentry>
 </variablelist>

<!--==========================orignal english content==========================
  <para>
   The <literal>OPERATOR</> and <literal>FUNCTION</>
   clauses can appear in any order.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>OPERATOR</literal>和<literal>FUNCTION</literal>子句可以以任何顺序出现。
  </para>

 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   Notice that the <literal>DROP</> syntax only specifies the <quote>slot</>
   in the operator family, by strategy or support number and input data
   type(s).  The name of the operator or function occupying the slot is not
   mentioned.  Also, for <literal>DROP FUNCTION</> the type(s) to specify
   are the input data type(s) the function is intended to support; for
   GiST, SP-GiST and GIN indexes this might have nothing to do with the actual
   input argument types of the function.
  </para>
____________________________________________________________________________-->
  <para>
   注意<literal>DROP</literal>语法只通过策略或者支持号以及输入数据类型指定该
   操作符族中的<quote>slot</quote>。占用这个槽的操作符或函数的名称不会被提及。
   还有，对于<literal>DROP FUNCTION</literal>，要指定的类型是该函数意图支持
   的输入数据类型。对于 GiST、SP-GiST 以及 GIN 索引，可能无需对该函数的
   实际输入参数类型做任何事情。
  </para>

<!--==========================orignal english content==========================
  <para>
   Because the index machinery does not check access permissions on functions
   before using them, including a function or operator in an operator family
   is tantamount to granting public execute permission on it.  This is usually
   not an issue for the sorts of functions that are useful in an operator
   family.
  </para>
____________________________________________________________________________-->
  <para>
   因为索引机制在使用函数之前不会检查其上的访问权限，包括一个操作符族中的
   函数或操作符都等同于授予了其上的公共执行权限。这对于操作符族中很有用的
   这类函数来说，这通常不成问题。
  </para>

<!--==========================orignal english content==========================
  <para>
   The operators should not be defined by SQL functions.  A SQL function
   is likely to be inlined into the calling query, which will prevent
   the optimizer from recognizing that the query matches an index.
  </para>
____________________________________________________________________________-->
  <para>
   操作符应该由 SQL 函数定义。一个 SQL 函数很可能被内联到调用查询中，这将
   阻止优化器识别出该查询匹配一个索引。
  </para>

<!--==========================orignal english content==========================
  <para>
   Before <productname>PostgreSQL</productname> 8.4, the <literal>OPERATOR</>
   clause could include a <literal>RECHECK</> option.  This is no longer
   supported because whether an index operator is <quote>lossy</> is now
   determined on-the-fly at run time.  This allows efficient handling of
   cases where an operator might or might not be lossy.
  </para>
____________________________________________________________________________-->
  <para>
   在<productname>PostgreSQL</productname> 8.4 之前，
   <literal>OPERATOR</literal>子句可以包括一个<literal>RECHECK</literal>选项。这不再
   被支持，因为一个索引操作符是否为<quote>lossy</quote>现在会在运行时即时决定。
   这允许高效地处理一个操作符可能或者不可能为有损的情况。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   The following example command adds cross-data-type operators and
   support functions to an operator family that already contains B-tree
   operator classes for data types <type>int4</> and <type>int2</>.
  </para>
____________________________________________________________________________-->
  <para>
   下列示例命令为一个操作符族增加跨数据类型的操作符和支持函数，该操
   作符族已经包含用于数据类型<type>int4</type>以及<type>int2</type>的 B-树
   操作符类。
  </para>

<!--==========================orignal english content==========================
<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree ADD

  -&minus; int4 vs int2
  OPERATOR 1 &lt; (int4, int2) ,
  OPERATOR 2 &lt;= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 &gt;= (int4, int2) ,
  OPERATOR 5 &gt; (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2) ,

  -&minus; int2 vs int4
  OPERATOR 1 &lt; (int2, int4) ,
  OPERATOR 2 &lt;= (int2, int4) ,
  OPERATOR 3 = (int2, int4) ,
  OPERATOR 4 &gt;= (int2, int4) ,
  OPERATOR 5 &gt; (int2, int4) ,
  FUNCTION 1 btint24cmp(int2, int4) ;
</programlisting>
____________________________________________________________________________-->
<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree ADD

  -- int4 vs int2
  OPERATOR 1 &lt; (int4, int2) ,
  OPERATOR 2 &lt;= (int4, int2) ,
  OPERATOR 3 = (int4, int2) ,
  OPERATOR 4 &gt;= (int4, int2) ,
  OPERATOR 5 &gt; (int4, int2) ,
  FUNCTION 1 btint42cmp(int4, int2) ,

  -- int2 vs int4
  OPERATOR 1 &lt; (int2, int4) ,
  OPERATOR 2 &lt;= (int2, int4) ,
  OPERATOR 3 = (int2, int4) ,
  OPERATOR 4 &gt;= (int2, int4) ,
  OPERATOR 5 &gt; (int2, int4) ,
  FUNCTION 1 btint24cmp(int2, int4) ;
</programlisting>

<!--==========================orignal english content==========================
  <para>
   To remove these entries again:
  </para>
____________________________________________________________________________-->
  <para>
   再次移除这些项：
  </para>

<!--==========================orignal english content==========================
<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree DROP

  -&minus; int4 vs int2
  OPERATOR 1 (int4, int2) ,
  OPERATOR 2 (int4, int2) ,
  OPERATOR 3 (int4, int2) ,
  OPERATOR 4 (int4, int2) ,
  OPERATOR 5 (int4, int2) ,
  FUNCTION 1 (int4, int2) ,

  -&minus; int2 vs int4
  OPERATOR 1 (int2, int4) ,
  OPERATOR 2 (int2, int4) ,
  OPERATOR 3 (int2, int4) ,
  OPERATOR 4 (int2, int4) ,
  OPERATOR 5 (int2, int4) ,
  FUNCTION 1 (int2, int4) ;
</programlisting>
____________________________________________________________________________-->
<programlisting>
ALTER OPERATOR FAMILY integer_ops USING btree DROP

  -- int4 vs int2
  OPERATOR 1 (int4, int2) ,
  OPERATOR 2 (int4, int2) ,
  OPERATOR 3 (int4, int2) ,
  OPERATOR 4 (int4, int2) ,
  OPERATOR 5 (int4, int2) ,
  FUNCTION 1 (int4, int2) ,

  -- int2 vs int4
  OPERATOR 1 (int2, int4) ,
  OPERATOR 2 (int2, int4) ,
  OPERATOR 3 (int2, int4) ,
  OPERATOR 4 (int2, int4) ,
  OPERATOR 5 (int2, int4) ,
  FUNCTION 1 (int2, int4) ;
</programlisting>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   There is no <command>ALTER OPERATOR FAMILY</command> statement in
   the SQL standard.
  </para>
____________________________________________________________________________-->
  <para>
   在 SQL 标准中没有
   <command>ALTER OPERATOR FAMILY</command>语句。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createopfamily"/></member>
   <member><xref linkend="sql-dropopfamily"/></member>
   <member><xref linkend="sql-createopclass"/></member>
   <member><xref linkend="sql-alteropclass"/></member>
   <member><xref linkend="sql-dropopclass"/></member>
  </simplelist>
 </refsect1>
</refentry>

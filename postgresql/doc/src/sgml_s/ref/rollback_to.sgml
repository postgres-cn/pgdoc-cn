<!--
doc/src/sgml/ref/rollback_to.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ROLLBACK-TO">
<!--==========================orignal english content==========================
 <indexterm zone="sql-rollback-to">
  <primary>ROLLBACK TO SAVEPOINT</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-rollback-to">
  <primary>ROLLBACK TO SAVEPOINT</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <indexterm zone="sql-rollback-to">
  <primary>savepoints</primary>
  <secondary>rolling back</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-rollback-to">
  <primary>savepoints</primary>
  <secondary>rolling back</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>ROLLBACK TO SAVEPOINT</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>ROLLBACK TO SAVEPOINT</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>ROLLBACK TO SAVEPOINT</refname>
  <refpurpose>roll back to a savepoint</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>ROLLBACK TO SAVEPOINT</refname>
  <refpurpose>回滚到一个保存点</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
ROLLBACK [ WORK | TRANSACTION ] TO [ SAVEPOINT ] <replaceable>savepoint_name</replaceable>
</synopsis>
____________________________________________________________________________-->
<synopsis>
ROLLBACK [ WORK | TRANSACTION ] TO [ SAVEPOINT ] <replaceable>savepoint_name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   Roll back all commands that were executed after the savepoint was
   established.  The savepoint remains valid and can be rolled back to
   again later, if needed.
  </para>
____________________________________________________________________________-->
  <para>
   回滚在该保存点被建立之后执行的所有命令。该保存点保持有效并且可以在
   以后再次回滚到它（如果需要）。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>ROLLBACK TO SAVEPOINT</> implicitly destroys all savepoints that
   were established after the named savepoint.
  </para>
____________________________________________________________________________-->
  <para>
   <command>ROLLBACK TO SAVEPOINT</command>隐式地销毁在所提及的保存点
   之后建立的所有保存点。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">savepoint_name</></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">savepoint_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The savepoint to roll back to.
     </para>
____________________________________________________________________________-->
     <para>
      要回滚到的保存点。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   Use <xref linkend="SQL-RELEASE-SAVEPOINT"> to destroy a savepoint
   without discarding the effects of commands executed after it was
   established.
  </para>
____________________________________________________________________________-->
  <para>
   使用<xref linkend="SQL-RELEASE-SAVEPOINT"/>销毁一个保存点而
   不抛弃在它建立之后被执行的命令的效果。
  </para>

<!--==========================orignal english content==========================
  <para>
   Specifying a savepoint name that has not been established is an error.
  </para>
____________________________________________________________________________-->
  <para>
   指定一个没有被建立的保存点是一种错误。
  </para>

<!--==========================orignal english content==========================
  <para>
   Cursors have somewhat non-transactional behavior with respect to
   savepoints.  Any cursor that is opened inside a savepoint will be closed
   when the savepoint is rolled back.  If a previously opened cursor is
   affected by a <command>FETCH</> or <command>MOVE</> command inside a
   savepoint that is later rolled back, the cursor remains at the
   position that <command>FETCH</> left it pointing to (that is, the cursor
   motion caused by <command>FETCH</> is not rolled back).
   Closing a cursor is not undone by rolling back, either.
   However, other side-effects caused by the cursor's query (such as
   side-effects of volatile functions called by the query) <emphasis>are</>
   rolled back if they occur during a savepoint that is later rolled back.
   A cursor whose execution causes a transaction to abort is put in a
   cannot-execute state, so while the transaction can be restored using
   <command>ROLLBACK TO SAVEPOINT</>, the cursor can no longer be used.
  </para>
____________________________________________________________________________-->
  <para>
   相对于保存点，游标有一点非事务的行为。在保存点被回滚时，任何在该保存点
   内被打开的游标将会被关闭。如果一个先前打开的游标在一个保存点内被
   <command>FETCH</command>或<command>MOVE</command>命令所影响，而该该保存点
   后来又被回滚，那么该游标将保持<command>FETCH</command>使它指向的位置（也
   就是说由<command>FETCH</command>导致的游标动作不会被回滚）。回滚也不能
   撤销关闭一个游标。不过，其他由游标查询导致的副作用（例如
   被该查询所调用的易变函数的副作用）
   <emphasis>可以</emphasis>被回滚，只要它们发生在一个后来被回滚的保存点期间。
   如果一个游标的执行导致事务中止，它会被置于一种不能被执行的状态，这样当
   事务被用<command>ROLLBACK TO SAVEPOINT</command>恢复后，该游标也不再能
   被使用。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   To undo the effects of the commands executed after <literal>my_savepoint</literal>
   was established:
<programlisting>
ROLLBACK TO SAVEPOINT my_savepoint;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   要撤销在<literal>my_savepoint</literal>建立后执行的命令的效果：
<programlisting>
ROLLBACK TO SAVEPOINT my_savepoint;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Cursor positions are not affected by savepoint rollback:
<programlisting>
BEGIN;

DECLARE foo CURSOR FOR SELECT 1 UNION SELECT 2;

SAVEPOINT foo;

FETCH 1 FROM foo;
 ?column? 
-&minus;-&minus;-&minus;-&minus;-&minus;
        1

ROLLBACK TO SAVEPOINT foo;

FETCH 1 FROM foo;
 ?column? 
-&minus;-&minus;-&minus;-&minus;-&minus;
        2

COMMIT;
</programlisting></para>
____________________________________________________________________________-->
  <para>
   游标位置不会受保存点回滚的影响：
<programlisting>
BEGIN;

DECLARE foo CURSOR FOR SELECT 1 UNION SELECT 2;

SAVEPOINT foo;

FETCH 1 FROM foo;
 ?column? 
----------
        1

ROLLBACK TO SAVEPOINT foo;

FETCH 1 FROM foo;
 ?column? 
----------
        2

COMMIT;
</programlisting></para>


 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   The <acronym>SQL</> standard specifies that the key word
   <literal>SAVEPOINT</> is mandatory, but <productname>PostgreSQL</>
   and <productname>Oracle</> allow it to be omitted.  SQL allows
   only <literal>WORK</>, not <literal>TRANSACTION</>, as a noise word
   after <literal>ROLLBACK</>.  Also, SQL has an optional clause
   <literal>AND [ NO ] CHAIN</> which is not currently supported by
   <productname>PostgreSQL</>.  Otherwise, this command conforms to
   the SQL standard.
  </para>
____________________________________________________________________________-->
  <para>
   <acronym>SQL</acronym>标准指定关键词
   <literal>SAVEPOINT</literal>是强制的，但是<productname>PostgreSQL</productname>
   和<productname>Oracle</productname>允许省略它。SQL 只允许<literal>WORK</literal>而
   不是<literal>TRANSACTION</literal>作为<literal>ROLLBACK</literal>之后的噪声词。
   还有，SQL 有一个可选的子句
   <literal>AND [ NO ] CHAIN</literal>，当前
   <productname>PostgreSQL</productname>并不支持。在其他方面，这个命令符合 SQL 标准。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-begin"/></member>
   <member><xref linkend="sql-commit"/></member>
   <member><xref linkend="sql-release-savepoint"/></member>
   <member><xref linkend="sql-rollback"/></member>
   <member><xref linkend="sql-savepoint"/></member>
  </simplelist>
 </refsect1>
</refentry>

<!--
doc/src/sgml/ref/alter_sequence.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERSEQUENCE">
<!--==========================orignal english content==========================
 <indexterm zone="sql-altersequence">
  <primary>ALTER SEQUENCE</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-altersequence">
  <primary>ALTER SEQUENCE</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>ALTER SEQUENCE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>ALTER SEQUENCE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>ALTER SEQUENCE</refname>
  <refpurpose>
   change the definition of a sequence generator
  </refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>ALTER SEQUENCE</refname>
  <refpurpose>
   更改一个序列发生器的定义
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable>
    [ AS <replaceable class="parameter">data_type</replaceable> ]
    [ INCREMENT [ BY ] <replaceable class="parameter">increment</replaceable> ]
    [ MINVALUE <replaceable class="parameter">minvalue</replaceable> | NO MINVALUE ] [ MAXVALUE <replaceable class="parameter">maxvalue</replaceable> | NO MAXVALUE ]
    [ START [ WITH ] <replaceable class="parameter">start</replaceable> ]
    [ RESTART [ [ WITH ] <replaceable class="parameter">restart</replaceable> ] ]
    [ CACHE <replaceable class="parameter">cache</replaceable> ] [ [ NO ] CYCLE ]
    [ OWNED BY { <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable> | NONE } ]
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> OWNER TO { <replaceable class="parameter">new_owner</replaceable> | CURRENT_USER | SESSION_USER }
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> RENAME TO <replaceable class="parameter">new_name</replaceable>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> SET SCHEMA <replaceable class="parameter">new_schema</replaceable>
</synopsis>
____________________________________________________________________________-->
<synopsis>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable>
    [ AS <replaceable class="parameter">data_type</replaceable> ]
    [ INCREMENT [ BY ] <replaceable class="parameter">increment</replaceable> ]
    [ MINVALUE <replaceable class="parameter">minvalue</replaceable> | NO MINVALUE ] [ MAXVALUE <replaceable class="parameter">maxvalue</replaceable> | NO MAXVALUE ]
    [ START [ WITH ] <replaceable class="parameter">start</replaceable> ]
    [ RESTART [ [ WITH ] <replaceable class="parameter">restart</replaceable> ] ]
    [ CACHE <replaceable class="parameter">cache</replaceable> ] [ [ NO ] CYCLE ]
    [ OWNED BY { <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable> | NONE } ]
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> OWNER TO { <replaceable class="parameter">new_owner</replaceable> | CURRENT_USER | SESSION_USER }
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> RENAME TO <replaceable class="parameter">new_name</replaceable>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> SET SCHEMA <replaceable class="parameter">new_schema</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>ALTER SEQUENCE</command> changes the parameters of an existing
   sequence generator.  Any parameters not specifically set in the
   <command>ALTER SEQUENCE</command> command retain their prior settings.
  </para>
____________________________________________________________________________-->
  <para>
   <command>ALTER SEQUENCE</command>更改一个现有序列发生器的参数。
   任何没有在<command>ALTER SEQUENCE</command>命令中明确设置的参数
   保持它们之前的设置。
  </para>

<!--==========================orignal english content==========================
  <para>
   You must own the sequence to use <command>ALTER SEQUENCE</>.
   To change a sequence's schema, you must also have <literal>CREATE</>
   privilege on the new schema.
   To alter the owner, you must also be a direct or indirect member of the new
   owning role, and that role must have <literal>CREATE</literal> privilege on
   the sequence's schema.  (These restrictions enforce that altering the owner
   doesn't do anything you couldn't do by dropping and recreating the sequence.
   However, a superuser can alter ownership of any sequence anyway.)
  </para>
____________________________________________________________________________-->
  <para>
   要使用<command>ALTER SEQUENCE</command>，你必须拥有该序列。要更改一个序列
   的模式，你还必须拥有新模式上的<literal>CREATE</literal>特权。要更改拥有者，你还必须
   是新拥有角色的一个直接或者间接成员，并且该角色必须具有该域的模式上的
   <literal>CREATE</literal>特权（这些限制强制修改拥有者不能做一些通过删除和重
   建该序列做不到的事情。不过，一个超级用户怎么都能更改任何序列的所有权。）。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

<!--==========================orignal english content==========================
   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
        The name (optionally schema-qualified) of a sequence to be altered.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IF EXISTS</literal></term>
      <listitem>
       <para>
        Do not throw an error if the sequence does not exist. A notice is issued
        in this case.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">data_type</replaceable></term>
      <listitem>
       <para>
        The optional
        clause <literal>AS <replaceable class="parameter">data_type</replaceable></literal>
        changes the data type of the sequence.  Valid types are
        <literal>smallint</literal>, <literal>integer</literal>,
        and <literal>bigint</literal>.
       </para>

       <para>
        Changing the data type automatically changes the minimum and maximum
        values of the sequence if and only if the previous minimum and maximum
        values were the minimum or maximum value of the old data type (in
        other words, if the sequence had been created using <literal>NO
        MINVALUE</literal> or <literal>NO MAXVALUE</literal>, implicitly or
        explicitly).  Otherwise, the minimum and maximum values are preserved,
        unless new values are given as part of the same command.  If the
        minimum and maximum values do not fit into the new data type, an error
        will be generated.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">increment</replaceable></term>
      <listitem>
       <para>
        The clause <literal>INCREMENT BY <replaceable
        class="parameter">increment</replaceable></literal> is
        optional. A positive value will make an ascending sequence, a
        negative one a descending sequence.  If unspecified, the old
        increment value will be maintained.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">minvalue</replaceable></term>
      <term><literal>NO MINVALUE</literal></term>
      <listitem>
       <para>
        The optional clause <literal>MINVALUE <replaceable
        class="parameter">minvalue</replaceable></literal> determines
        the minimum value a sequence can generate. If <literal>NO
        MINVALUE</literal> is specified, the defaults of 1 and
        the minimum value of the data type for ascending and descending sequences,
        respectively, will be used.  If neither option is specified,
        the current minimum value will be maintained.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">maxvalue</replaceable></term>
      <term><literal>NO MAXVALUE</literal></term>
      <listitem>
       <para>
        The optional clause <literal>MAXVALUE <replaceable
        class="parameter">maxvalue</replaceable></literal> determines
        the maximum value for the sequence. If <literal>NO
        MAXVALUE</literal> is specified, the defaults of
        the maximum value of the data type and -1 for ascending and descending
        sequences, respectively, will be used.  If neither option is
        specified, the current maximum value will be maintained.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">start</replaceable></term>
      <listitem>
       <para>
        The optional clause <literal>START WITH <replaceable
        class="parameter">start</replaceable></literal> changes the
        recorded start value of the sequence.  This has no effect on the
        <emphasis>current</> sequence value; it simply sets the value
        that future <command>ALTER SEQUENCE RESTART</> commands will use.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">restart</replaceable></term>
      <listitem>
       <para>
        The optional clause <literal>RESTART [ WITH <replaceable
        class="parameter">restart</replaceable> ]</literal> changes the
        current value of the sequence.  This is similar to calling the
        <function>setval</> function with <literal>is_called</literal> =
        <literal>false</>: the specified value will be returned by the
        <emphasis>next</> call of <function>nextval</>.
        Writing <literal>RESTART</> with no <replaceable
        class="parameter">restart</> value is equivalent to supplying
        the start value that was recorded by <command>CREATE SEQUENCE</>
        or last set by <command>ALTER SEQUENCE START WITH</>.
       </para>

       <para>
        In contrast to a <function>setval</function> call,
        a <literal>RESTART</literal> operation on a sequence is transactional
        and blocks concurrent transactions from obtaining numbers from the
        same sequence. If that's not the desired mode of
        operation, <function>setval</> should be used.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">cache</replaceable></term>
      <listitem>
       <para>
        The clause <literal>CACHE <replaceable
        class="parameter">cache</replaceable></literal> enables
        sequence numbers to be preallocated and stored in memory for
        faster access. The minimum value is 1 (only one value can be
        generated at a time, i.e., no cache).  If unspecified, the old
        cache value will be maintained.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CYCLE</literal></term>
      <listitem>
       <para>
        The optional <literal>CYCLE</literal> key word can be used to enable
        the sequence to wrap around when the
        <replaceable class="parameter">maxvalue</replaceable> or
        <replaceable class="parameter">minvalue</replaceable> has been
        reached by
        an ascending or descending sequence respectively. If the limit is
        reached, the next number generated will be the
        <replaceable class="parameter">minvalue</replaceable> or
        <replaceable class="parameter">maxvalue</replaceable>,
        respectively.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NO CYCLE</literal></term>
      <listitem>
       <para>
        If the optional <literal>NO CYCLE</literal> key word is
        specified, any calls to <function>nextval</function> after the
        sequence has reached its maximum value will return an error.
        If neither <literal>CYCLE</literal> or <literal>NO
        CYCLE</literal> are specified, the old cycle behavior will be
        maintained.
       </para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>OWNED BY</literal> <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable></term>
    <term><literal>OWNED BY NONE</literal></term>
    <listitem>
     <para>
      The <literal>OWNED BY</literal> option causes the sequence to be
      associated with a specific table column, such that if that column
      (or its whole table) is dropped, the sequence will be automatically
      dropped as well.  If specified, this association replaces any
      previously specified association for the sequence.  The specified
      table must have the same owner and be in the same schema as the
      sequence.
      Specifying <literal>OWNED BY NONE</literal> removes any existing
      association, making the sequence <quote>free-standing</>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_owner</replaceable></term>
    <listitem>
     <para>
      The user name of the new owner of the sequence.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
     <para>
      The new name for the sequence.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
     <para>
      The new schema for the sequence.
     </para>
    </listitem>
   </varlistentry>

    </variablelist>
   </para>
____________________________________________________________________________-->
   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
        要修改的序列的名称（可以是模式限定的）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IF EXISTS</literal></term>
      <listitem>
       <para>
        在序列不存在时不要抛出一个错误。这种情况下会发出一个提示。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">data_type</replaceable></term>
      <listitem>
       <para>
        可选子句<literal>AS <replaceable class="parameter">data_type</replaceable></literal>
		改变序列的数据类型。有效类型是<literal>smallint</literal>、<literal>integer</literal>
        和<literal>bigint</literal>。
       </para>

       <para>
        当且仅当先前的最小值和最大值是旧数据类型的最小值或最大值时（换句话说，
		如果序列是使用<literal>NO MINVALUE</literal>或<literal>NO MAXVALUE</literal>，
		隐式或显式创建的），则更改数据类型会自动更改序列的最小值和最大值。
		否则，将保留最小值和最大值，除非将新值作为同一命令的一部分给出。
		如果最小值和最大值不符合新的数据类型，则会生成错误。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">increment</replaceable></term>
      <listitem>
       <para>
        子句<literal>INCREMENT BY <replaceable
        class="parameter">increment</replaceable></literal>是可选的。
        一个正值将产生一个上升序列，一个负值会产生一个下降序列。如果
        没有指定，旧的增量值将被保持。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">minvalue</replaceable></term>
      <term><literal>NO MINVALUE</literal></term>
      <listitem>
       <para>
        可选的子句<literal>MINVALUE <replaceable
        class="parameter">minvalue</replaceable></literal>决定一个序列
        能产生的最小值。如果指定了<literal>NO
        MINVALUE</literal>，上升序列和下降序列的默认值分别是 1 和
        数据类型的最小值。如果这些选项都没有被指定，将保持当前的
        最小值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">maxvalue</replaceable></term>
      <term><literal>NO MAXVALUE</literal></term>
      <listitem>
       <para>
        可选的子句<literal>MAXVALUE <replaceable
        class="parameter">maxvalue</replaceable></literal>决定一个序列
        能产生的最大值。如果指定了<literal>NO
        MAXVALUE</literal>，上升序列和下降序列的默认值分别是
        数据类型的最大值和 -1。如果这些选项都没有被指定，将保持当前的
        最大值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">start</replaceable></term>
      <listitem>
       <para>
        可选的子句<literal>START WITH <replaceable
        class="parameter">start</replaceable></literal>更改该序列被记录的开始值。
        这对于<emphasis>当前</emphasis>序列值没有影响，它会简单地设置
        未来<command>ALTER SEQUENCE RESTART</command>命令将会使用的值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">restart</replaceable></term>
      <listitem>
       <para>
        可选的子句<literal>RESTART [ WITH <replaceable
        class="parameter">restart</replaceable> ]</literal>更改该序列的
        当前值。这类似于用<literal>is_called</literal> = <literal>false</literal>
        调用<function>setval</function>函数：被指定的值将会被
        <emphasis>下一次</emphasis><function>nextval</function>调用返回。写上没有
        <replaceable class="parameter">restart</replaceable>值的
        <literal>RESTART</literal>等效于提供被
        <command>CREATE SEQUENCE</command>记录的或者上一次被
        <command>ALTER SEQUENCE START WITH</command>设置的开始值。
       </para>

       <para>
        与<function>setval</function>调用相比，序列上的<literal>RESTART</literal>
		操作是事务性的并阻止并发事务从同一序列中获取数字。
		如果这不是所需的操作模式，则应使用<function>setval</function>。
       </para>
	   </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">cache</replaceable></term>
      <listitem>
       <para>
        子句<literal>CACHE <replaceable
        class="parameter">cache</replaceable></literal>使得序列数字被预先
        分配并且保存在内存中以便更快的访问。最小值是 1（每次只产生一个值，即
        无缓存）。如果没有指定，旧的缓冲值将被保持。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CYCLE</literal></term>
      <listitem>
       <para>
        可选的<literal>CYCLE</literal>关键词可以被用来允许该序列在达到
        <replaceable class="parameter">maxvalue</replaceable>（上升序列）或
        <replaceable class="parameter">minvalue</replaceable>（下降序列）时
        回卷。如果到达该限制，下一个被产生的数字将分别是
        <replaceable class="parameter">minvalue</replaceable>或者
        <replaceable class="parameter">maxvalue</replaceable>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NO CYCLE</literal></term>
      <listitem>
       <para>
        如果指定了可选的<literal>NO CYCLE</literal>关键词，任何在该
        序列到达其最大值后的<function>nextval</function>调用将会返回
        一个错误。如果既没有指定<literal>CYCLE</literal>也没有指定
        <literal>NO CYCLE</literal>，旧的循环行为将被保持。
       </para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>OWNED BY</literal> <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable></term>
    <term><literal>OWNED BY NONE</literal></term>
    <listitem>
     <para>
      <literal>OWNED BY</literal>选项导致该序列与一个特定的表列相关联，
      这样如果该列（或者整个表）被删除，该序列也会被自动删除。如果指定，
      这种关联会替代之前为该序列指定的任何关联。被指定的表必须具有相同的
      拥有者并且与该序列在同一个模式中。指定
      <literal>OWNED BY NONE</literal>可以移除任何现有的关联，让该序列
      <quote>自立</quote>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_owner</replaceable></term>
    <listitem>
     <para>
      该序列的新拥有者的用户名。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
     <para>
      该序列的新名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
     <para>
      该序列的新模式。
     </para>
    </listitem>
   </varlistentry>

    </variablelist>
   </para>
  </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   <command>ALTER SEQUENCE</command> will not immediately affect
   <function>nextval</> results in backends,
   other than the current one, that have preallocated (cached) sequence
   values. They will use up all cached values prior to noticing the changed
   sequence generation parameters.  The current backend will be affected
   immediately.
  </para>
____________________________________________________________________________-->
  <para>
   <command>ALTER SEQUENCE</command>将不会立即影响除当前后端外
   其他后端中的<function>nextval</function>结果，因为它们有预分配（缓存）的序列
   值。在注意到序列生成参数被更改之前它们将用尽所有缓存的值。当前后端将被
   立刻影响。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>ALTER SEQUENCE</command> does not affect the <function>currval</>
   status for the sequence.  (Before <productname>PostgreSQL</productname>
   8.3, it sometimes did.)
  </para>
____________________________________________________________________________-->
  <para>
   <command>ALTER SEQUENCE</command>不会影响该序列的
   <function>currval</function>状态（在
   <productname>PostgreSQL</productname> 8.3 之前有时会影响）。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>ALTER SEQUENCE</command> blocks
   concurrent <function>nextval</function>, <function>currval</function>,
   <function>lastval</function>, and <command>setval</command> calls.
  </para>
____________________________________________________________________________-->
  <para>
   <command>ALTER SEQUENCE</command>阻塞并发<function>nextval</function>、
   <function>currval</function>、<function>lastval</function>和
   <command>setval</command>调用。
  </para>

<!--==========================orignal english content==========================
  <para>
   For historical reasons, <command>ALTER TABLE</command> can be used with
   sequences too; but the only variants of <command>ALTER TABLE</command>
   that are allowed with sequences are equivalent to the forms shown above.
  </para>
____________________________________________________________________________-->
  <para>
   由于历史原因，<command>ALTER TABLE</command>也可以被用于序列，
   但是只有等效于上述形式的<command>ALTER TABLE</command>变体才被
   允许用于序列。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   Restart a sequence called <literal>serial</literal>, at 105:
<programlisting>
ALTER SEQUENCE serial RESTART WITH 105;
</programlisting></para>
____________________________________________________________________________-->
  <para>
   在 105 重启一个被称为<literal>serial</literal>的序列：
<programlisting>
ALTER SEQUENCE serial RESTART WITH 105;
</programlisting></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   <command>ALTER SEQUENCE</command> conforms to the <acronym>SQL</acronym>
   standard, except for the <literal>AS</literal>, <literal>START WITH</>,
   <literal>OWNED BY</>, <literal>OWNER TO</>, <literal>RENAME TO</>, and
   <literal>SET SCHEMA</literal> clauses, which are
   <productname>PostgreSQL</productname> extensions.
  </para>
____________________________________________________________________________-->
  <para>
   <command>ALTER SEQUENCE</command>符合<acronym>SQL</acronym>
   标准，不过<literal>AS</literal>、<literal>START WITH</literal>、
   <literal>OWNED BY</literal>、<literal>OWNER TO</literal>、<literal>RENAME TO</literal>
   以及<literal>SET SCHEMA</literal>子句是
   <productname>PostgreSQL</productname>扩展。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createsequence"/></member>
   <member><xref linkend="sql-dropsequence"/></member>
  </simplelist>
 </refsect1>

</refentry>

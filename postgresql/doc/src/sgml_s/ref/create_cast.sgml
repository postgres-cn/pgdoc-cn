<!-- doc/src/sgml/ref/create_cast.sgml -->

<refentry id="SQL-CREATECAST">
<!--==========================orignal english content==========================
 <indexterm zone="sql-createcast">
  <primary>CREATE CAST</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-createcast">
  <primary>CREATE CAST</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>CREATE CAST</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>CREATE CAST</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>CREATE CAST</refname>
  <refpurpose>define a new cast</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>CREATE CAST</refname>
  <refpurpose>定义一种新的造型</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
CREATE CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>)
    WITH FUNCTION <replaceable>function_name</replaceable> [ (<replaceable>argument_type</replaceable> [, ...]) ]
    [ AS ASSIGNMENT | AS IMPLICIT ]

CREATE CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>)
    WITHOUT FUNCTION
    [ AS ASSIGNMENT | AS IMPLICIT ]

CREATE CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>)
    WITH INOUT
    [ AS ASSIGNMENT | AS IMPLICIT ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
CREATE CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>)
    WITH FUNCTION <replaceable>function_name</replaceable> [ (<replaceable>argument_type</replaceable> [, ...]) ]
    [ AS ASSIGNMENT | AS IMPLICIT ]

CREATE CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>)
    WITHOUT FUNCTION
    [ AS ASSIGNMENT | AS IMPLICIT ]

CREATE CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>)
    WITH INOUT
    [ AS ASSIGNMENT | AS IMPLICIT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createcast-description">
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE CAST</command> defines a new cast.  A cast
   specifies how to perform a conversion between
   two data types.  For example,
<programlisting>
SELECT CAST(42 AS float8);
</programlisting>
   converts the integer constant 42 to type <type>float8</type> by
   invoking a previously specified function, in this case
   <literal>float8(int4)</>. (If no suitable cast has been defined, the
   conversion fails.)
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE CAST</command>定义一种新的造型。
   一种造型指定如何在两种数据类型之间执行转换。例如，
<programlisting>
SELECT CAST(42 AS float8);
</programlisting>
   通过调用一个之前指定的函数（这种情况中是
   <literal>float8(int4)</literal>）把整型常量 42 转换成类型
   <type>float8</type>（如果没有定义合适的造型，
   该转换会失败）。
  </para>

<!--==========================orignal english content==========================
  <para>
   Two types can be <firstterm>binary coercible</firstterm>, which
   means that the conversion can be performed <quote>for free</quote>
   without invoking any function.  This requires that corresponding
   values use the same internal representation.  For instance, the
   types <type>text</type> and <type>varchar</type> are binary
   coercible both ways.  Binary coercibility is not necessarily a
   symmetric relationship.  For example, the cast
   from <type>xml</type> to <type>text</type> can be performed for
   free in the present implementation, but the reverse direction
   requires a function that performs at least a syntax check.  (Two
   types that are binary coercible both ways are also referred to as
   binary compatible.)
  </para>
____________________________________________________________________________-->
  <para>
   两种类型可以是<firstterm>二进制可强制</firstterm>，这表示该转换
   可以被<quote>免费</quote>执行而不用调用任何函数。这要求相应的
   值使用同样的内部表示。例如，类型<type>text</type>和
   <type>varchar</type>在双向都是二进制可强制的。二进制可强制性并
   不必是一种对称关系。例如，在当前实现中从<type>xml</type>到
   <type>text</type>的造型可以被免费执行，但是反向则需要一个函数来
   执行至少一次语法检查（两种在双向都二进制值兼容的类型也被称作二进
   制兼容）。
  </para>

<!--==========================orignal english content==========================
  <para>
   You can define a cast as an <firstterm>I/O conversion cast</> by using
   the <literal>WITH INOUT</literal> syntax. An I/O conversion cast is
   performed by invoking the output function of the source data type, and
   passing the resulting string to the input function of the target data type.
   In many common cases, this feature avoids the need to write a separate
   cast function for conversion. An I/O conversion cast acts the same as
   a regular function-based cast; only the implementation is different.
  </para>
____________________________________________________________________________-->
  <para>
   通过使用<literal>WITH INOUT</literal>语法，你可以把一种造型定义
   成<firstterm>I/O 转换造型</firstterm>。一种 I/O 转换造型执行时，会调用源
   数据类型的输出函数，并且把结果字符串传递给目标数据类型的输入函数。
   在很多常见情况中，这种特性避免了为转换单独定义一个造型函数。一种
   I/O 转换造型表现得和一个常规的基于函数的造型相同，只是实现不同而已。
  </para>

<!--==========================orignal english content==========================
  <para>
   By default, a cast can be invoked only by an explicit cast request,
   that is an explicit <literal>CAST(<replaceable>x</> AS
   <replaceable>typename</>)</literal> or
   <replaceable>x</><literal>::</><replaceable>typename</>
   construct.
  </para>
____________________________________________________________________________-->
  <para>
   默认情况下，只有一次显式造型请求才会调用造型，
   形式是<literal>CAST(<replaceable>x</replaceable> AS
   <replaceable>typename</replaceable>)</literal> or
   <replaceable>x</replaceable><literal>::</literal><replaceable>typename</replaceable>。
  </para>

<!--==========================orignal english content==========================
  <para>
   If the cast is marked <literal>AS ASSIGNMENT</> then it can be invoked
   implicitly when assigning a value to a column of the target data type.
   For example, supposing that <literal>foo.f1</literal> is a column of
   type <type>text</type>, then:
<programlisting>
INSERT INTO foo (f1) VALUES (42);
</programlisting>
   will be allowed if the cast from type <type>integer</type> to type
   <type>text</type> is marked <literal>AS ASSIGNMENT</>, otherwise not.
   (We generally use the term <firstterm>assignment
   cast</firstterm> to describe this kind of cast.)
  </para>
____________________________________________________________________________-->
  <para>
   如果造型被标记为<literal>AS ASSIGNMENT</literal>，那么在为一个目标数据
   类型的列赋值时会隐式地调用它。例如，假设<literal>foo.f1</literal>是
   一个类型<type>text</type>的列，那么如果从类型<type>integer</type>
   到类型<type>text</type>的造型被标记为<literal>AS ASSIGNMENT</literal>，
   则：
<programlisting>
INSERT INTO foo (f1) VALUES (42);
</programlisting>
   将被允许，否则不会允许（我们通常使用<firstterm>赋值造型</firstterm>
   来描述此类造型）。
  </para>

<!--==========================orignal english content==========================
  <para>
   If the cast is marked <literal>AS IMPLICIT</> then it can be invoked
   implicitly in any context, whether assignment or internally in an
   expression.  (We generally use the term <firstterm>implicit
   cast</firstterm> to describe this kind of cast.)
   For example, consider this query:
<programlisting>
SELECT 2 + 4.0;
</programlisting>
   The parser initially marks the constants as being of type <type>integer</>
   and <type>numeric</> respectively.  There is no <type>integer</>
   <literal>+</> <type>numeric</> operator in the system catalogs,
   but there is a <type>numeric</> <literal>+</> <type>numeric</> operator.
   The query will therefore succeed if a cast from <type>integer</> to
   <type>numeric</> is available and is marked <literal>AS IMPLICIT</> &mdash;
   which in fact it is.  The parser will apply the implicit cast and resolve
   the query as if it had been written
<programlisting>
SELECT CAST ( 2 AS numeric ) + 4.0;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   如果造型被标记为<literal>AS IMPLICIT</literal>，那么可以在任何上下文
   中隐式地调用它，无论是赋值还是在一个表达式内部（我们通常用术语
   <firstterm>隐式造型</firstterm>来描述这类造型）。例如，考虑这个
   查询：
<programlisting>
SELECT 2 + 4.0;
</programlisting>
   解析器初始会把常量分别标记为类型<type>integer</type>和
   <type>numeric</type>。在系统目录中没有<type>integer</type>
   <literal>+</literal> <type>numeric</type>操作符，但是有一个
   <type>numeric</type> <literal>+</literal> <type>numeric</type>操作符。
   因此，如果有一种可用的从<type>integer</type>到
   <type>numeric</type>的造型且被标记为<literal>AS IMPLICIT</literal> &mdash;
   实际上确实有 &mdash; 该查询将会成功。解析器将应用该隐式造型
   并且解决该查询，就好像它被写成：
<programlisting>
SELECT CAST ( 2 AS numeric ) + 4.0;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Now, the catalogs also provide a cast from <type>numeric</> to
   <type>integer</>.  If that cast were marked <literal>AS IMPLICIT</> &mdash;
   which it is not &mdash; then the parser would be faced with choosing
   between the above interpretation and the alternative of casting the
   <type>numeric</> constant to <type>integer</> and applying the
   <type>integer</> <literal>+</> <type>integer</> operator.  Lacking any
   knowledge of which choice to prefer, it would give up and declare the
   query ambiguous.  The fact that only one of the two casts is
   implicit is the way in which we teach the parser to prefer resolution
   of a mixed <type>numeric</>-and-<type>integer</> expression as
   <type>numeric</>; there is no built-in knowledge about that.
  </para>
____________________________________________________________________________-->
  <para>
   现在，系统目录也提供一种从<type>numeric</type>到<type>integer</type>
   的造型。如果这种造型被标记为<literal>AS IMPLICIT</literal> &mdash;
   实际上并没有 &mdash; 那么解析器将面临选择：是用前面介绍的过程，
   还是把<type>numeric</type>常量造型成<type>integer</type>并且应用
   <type>integer</type> <literal>+</literal> <type>integer</type>操作符。由于
   缺少哪种选择更好的知识，解析器会放弃并且说明查询有歧义。我们能
   告诉解析器把一个混合了<type>numeric</type>和<type>integer</type>的
   表达式解析成<type>numeric</type>更好的方法就是只让这两种造型中的
   一个是隐式的，没有有关于此的内建知识。
  </para>

<!--==========================orignal english content==========================
  <para>
   It is wise to be conservative about marking casts as implicit.  An
   overabundance of implicit casting paths can cause
   <productname>PostgreSQL</productname> to choose surprising
   interpretations of commands, or to be unable to resolve commands at
   all because there are multiple possible interpretations.  A good
   rule of thumb is to make a cast implicitly invokable only for
   information-preserving transformations between types in the same
   general type category.  For example, the cast from <type>int2</type> to
   <type>int4</type> can reasonably be implicit, but the cast from
   <type>float8</type> to <type>int4</type> should probably be
   assignment-only.  Cross-type-category casts, such as <type>text</>
   to <type>int4</>, are best made explicit-only.
  </para>
____________________________________________________________________________-->
  <para>
   对标记造型为隐式持保守态度是明智的。过多的隐式造型路径可能导致
   <productname>PostgreSQL</productname>以令人吃惊的方式解
   释命令，或者由于有多种可能解释而根本无法解析命令。一种好的经验
   是让一种造型只对于同一种一般类型分类中的类型间的信息保持转换隐式
   可调用。例如，从<type>int2</type>到<type>int4</type>的造型
   可以被合理地标记为隐式，但是从<type>float8</type>到
   <type>int4</type>的造型可能应该只能在赋值时使用。跨类型分类
   的造型（如<type>text</type>到<type>int4</type>）最好只被用于显式使用。
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    Sometimes it is necessary for usability or standards-compliance reasons
    to provide multiple implicit casts among a set of types, resulting in
    ambiguity that cannot be avoided as above.  The parser has a fallback
    heuristic based on <firstterm>type categories</> and <firstterm>preferred
    types</> that can help to provide desired behavior in such cases.  See
    <xref linkend="sql-createtype"> for
    more information.
   </para>
____________________________________________________________________________-->
   <para>
    有时为了可用性或者标准兼容的原因，有必要提供在一个类型集合之间
    的多种隐式造型，这会导致上述不可避免的歧义。解析器还有一招基于
    <firstterm>类型分类</firstterm>和<firstterm>优先类型</firstterm>的后手，它能帮助
    提供这类情况下预期的行为。详见
    <xref linkend="sql-createtype"/>。
   </para>
  </note>

<!--==========================orignal english content==========================
  <para>
   To be able to create a cast, you must own the source or the target data type
   and have <literal>USAGE</literal> privilege on the other type.  To create a
   binary-coercible cast, you must be superuser.  (This restriction is made
   because an erroneous binary-coercible cast conversion can easily crash the
   server.)
  </para>
____________________________________________________________________________-->
  <para>
   要创建一种造型，你必须拥有源数据类型和目标数据类型并且具有在其他类型上
   的<literal>USAGE</literal>特权。要创建一种二进制可强制造型，你必须是一
   个超级用户（这种限制是因为错误的二进制可强制造型转换很容易让服务器崩溃）。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

   <variablelist>
    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable>source_type</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>source_type</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the source data type of the cast.
      </para>
____________________________________________________________________________-->
      <para>
       该造型的源数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable>target_type</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>target_type</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the target data type of the cast.
      </para>
____________________________________________________________________________-->
      <para>
       该造型的目标数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal><replaceable>function_name</replaceable>[(<replaceable>argument_type</replaceable> [, ...])]</literal></term>
____________________________________________________________________________-->
     <term><literal><replaceable>function_name</replaceable>[(<replaceable>argument_type</replaceable> [, ...])]</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The function used to perform the cast.  The function name can
       be schema-qualified.  If it is not, the function will be looked
       up in the schema search path.  The function's result data type must
       match the target type of the cast.   Its arguments are discussed below.
	   If no argument list is specified, the function name must be unique in
       its schema.
      </para>
____________________________________________________________________________-->
      <para>
       被用于执行该造型的函数。函数名称可以用模式限定。如果没有被限定，
       将在模式搜索路径中查找该函数。函数的结果数据类型必须是该造型的
       目标数据类型。它的参数讨论如下。
	   如果没有指定参数列表，则该函数名称在其模式中必须是唯一的。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>WITHOUT FUNCTION</literal></term>
____________________________________________________________________________-->
     <term><literal>WITHOUT FUNCTION</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       Indicates that the source type is binary-coercible to the target type,
       so no function is required to perform the cast.
      </para>
____________________________________________________________________________-->
      <para>
       指示源类型可以二进制强制到目标类型，因此执行该造型不需要函数。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>WITH INOUT</literal></term>
____________________________________________________________________________-->
     <term><literal>WITH INOUT</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       Indicates that the cast is an I/O conversion cast, performed by
       invoking the output function of the source data type, and passing the
       resulting string to the input function of the target data type.
      </para>
____________________________________________________________________________-->
      <para>
       指示该造型是一种 I/O 转换造型，执行需要调用源数据类型的输出函数，
       并且把结果字符串传递给目标数据类型的输入函数。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>AS ASSIGNMENT</literal></term>
____________________________________________________________________________-->
     <term><literal>AS ASSIGNMENT</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       Indicates that the cast can be invoked implicitly in assignment
       contexts.
      </para>
____________________________________________________________________________-->
      <para>
       指示该造型可以在赋值的情况下被隐式调用。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>AS IMPLICIT</literal></term>
____________________________________________________________________________-->
     <term><literal>AS IMPLICIT</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       Indicates that the cast can be invoked implicitly in any context.
      </para>
____________________________________________________________________________-->
      <para>
       指示该造型可以在任何上下文中被隐式调用。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

<!--==========================orignal english content==========================
  <para>
   Cast implementation functions can have one to three arguments.
   The first argument type must be identical to or binary-coercible from
   the cast's source type.  The second argument,
   if present, must be type <type>integer</>; it receives the type
   modifier associated with the destination type, or <literal>-1</>
   if there is none.  The third argument,
   if present, must be type <type>boolean</>; it receives <literal>true</>
   if the cast is an explicit cast, <literal>false</> otherwise.
   (Bizarrely, the SQL standard demands different behaviors for explicit and
   implicit casts in some cases.  This argument is supplied for functions
   that must implement such casts.  It is not recommended that you design
   your own data types so that this matters.)
  </para>
____________________________________________________________________________-->
  <para>
   造型实现函数可以具有 1 到 3 个参数。第一个参数类型必须等于源类型或者
   能从源类型二进制强制得到。第二个参数（如果存在）必须是类型
   <type>integer</type>，它接收与目标类型相关联的类型修饰符，如果没有类型
   修饰符，它会收到<literal>-1</literal>。第三个参数（如果存在）必须是类型
   <type>boolean</type>，如果该造型是一种显式造型，它会收到
   <literal>true</literal>，否则会收到<literal>false</literal>（奇怪地是，SQL 标准在
   某些情况中对显式和隐式造型要求不同的行为。这个参数被提供给必须实现这
   类造型的函数。不推荐在设计自己的数据类型时用它）。
  </para>

<!--==========================orignal english content==========================
  <para>
   The return type of a cast function must be identical to or
   binary-coercible to the cast's target type.
  </para>
____________________________________________________________________________-->
  <para>
   一个造型函数的返回类型必须等于目标类型或者能二进制强制到目标类型。
  </para>

<!--==========================orignal english content==========================
  <para>
   Ordinarily a cast must have different source and target data types.
   However, it is allowed to declare a cast with identical source and
   target types if it has a cast implementation function with more than one
   argument.  This is used to represent type-specific length coercion
   functions in the system catalogs.  The named function is used to
   coerce a value of the type to the type modifier value given by its
   second argument.
  </para>
____________________________________________________________________________-->
  <para>
   Ordinarily a cast must have different source and target data types.
   However, it is allowed to declare a cast with identical source and
   target types if it has a cast implementation function with more than one
   argument.  This is used to represent type-specific length coercion
   functions in the system catalogs.  The named function is used to
   coerce a value of the type to the type modifier value given by its
   second argument.
  </para>

<!--==========================orignal english content==========================
  <para>
   When a cast has different source and
   target types and a function that takes more than one argument, it
   supports converting from one type to another and applying a length
   coercion in a single step.  When no such entry is available, coercion
   to a type that uses a type modifier involves two cast steps, one to
   convert between data types and a second to apply the modifier.
  </para>
____________________________________________________________________________-->
  <para>
   When a cast has different source and
   target types and a function that takes more than one argument, it
   supports converting from one type to another and applying a length
   coercion in a single step.  When no such entry is available, coercion
   to a type that uses a type modifier involves two cast steps, one to
   convert between data types and a second to apply the modifier.
  </para>

<!--==========================orignal english content==========================
  <para>
   A cast to or from a domain type currently has no effect.  Casting
   to or from a domain uses the casts associated with its underlying type.
  </para>
____________________________________________________________________________-->
  <para>
   A cast to or from a domain type currently has no effect.  Casting
   to or from a domain uses the casts associated with its underlying type.
  </para>

 </refsect1>

 <refsect1 id="sql-createcast-notes">
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   Use <xref linkend="sql-dropcast"> to remove user-defined casts.
  </para>
____________________________________________________________________________-->
  <para>
   使用<xref linkend="sql-dropcast"/>移除用户定义的造型。
  </para>

<!--==========================orignal english content==========================
  <para>
   Remember that if you want to be able to convert types both ways you
   need to declare casts both ways explicitly.
  </para>
____________________________________________________________________________-->
  <para>
   记住如果你想要能够双向转换类型，你需要在两个方向上都
   显式声明造型。
  </para>

<!--==========================orignal english content==========================
 <indexterm zone="sql-createcast">
  <primary>cast</primary>
  <secondary>I/O conversion</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-createcast">
  <primary>cast</primary>
  <secondary>I/O conversion</secondary>
 </indexterm>

<!--==========================orignal english content==========================
  <para>
   It is normally not necessary to create casts between user-defined types
   and the standard string types (<type>text</>, <type>varchar</>, and
   <type>char(<replaceable>n</>)</type>, as well as user-defined types that
   are defined to be in the string category).  <productname>PostgreSQL</>
   provides automatic I/O conversion casts for that. The automatic casts to
   string types are treated as assignment casts, while the automatic casts
   from string types are
   explicit-only.  You can override this behavior by declaring your own
   cast to replace an automatic cast, but usually the only reason to
   do so is if you want the conversion to be more easily invokable than the
   standard assignment-only or explicit-only setting.  Another possible
   reason is that you want the conversion to behave differently from the
   type's I/O function; but that is sufficiently surprising that you
   should think twice about whether it's a good idea.  (A small number of
   the built-in types do indeed have different behaviors for conversions,
   mostly because of requirements of the SQL standard.)
  </para>
____________________________________________________________________________-->
  <para>
   通常没有必要创建用户定义类型和标准字符串类型（<type>text</type>、
   <type>varchar</type>和<type>char(<replaceable>n</replaceable>)</type>，
   以及被定义在字符串分类中的用户定义类型）之间的造型。
   <productname>PostgreSQL</productname>会为它们提供自动的 I/O 转换造型。
   到字符串类型的自动造型被当做赋值造型，而字符串类型作为源的自动
   造型只能是显式的。通过声明你自己的造型来替换自动造型可以覆盖这
   种行为，但是这样做的唯一原因是你想让该转换比标准的设置更容易被
   调用。另一种可能的原因是你想让该转换的行为与该类型的 I/O 函数不
   同，但这种原因足够令人感到意外，你应该考虑再三它是不是个好主意
   （确实有少量内建类型对转换具有不同的行为，绝大部分是因为 SQL 
   标准的要求）。
  </para>

<!--==========================orignal english content==========================
  <para>
   While not required, it is recommended that you continue to follow this old
   convention of naming cast implementation functions after the target data
   type.  Many users are used to being able to cast data types using a
   function-style notation, that is
   <replaceable>typename</>(<replaceable>x</>).  This notation is in fact
   nothing more nor less than a call of the cast implementation function; it
   is not specially treated as a cast.  If your conversion functions are not
   named to support this convention then you will have surprised users.
   Since <productname>PostgreSQL</> allows overloading of the same function
   name with different argument types, there is no difficulty in having
   multiple conversion functions from different types that all use the
   target type's name.
  </para>
____________________________________________________________________________-->
  <para>
   虽然不必要，推荐你继续遵循这种在目标数据类型后面命名造型
   实现函数的习惯。很多用户习惯于能够使用一种函数风格的记法来造型
   数据类型，即<replaceable>typename</replaceable>(<replaceable>x</replaceable>)。
   这种记法正好是对造型实现函数的调用，这里它没有被作为造型特殊对待。
   如果你的转换函数没有被指定支持这种习惯，那么你的用户会觉得意外。
   由于<productname>PostgreSQL</productname>允许用不同的参数类型重载同一个
   函数名，因此存在多个从不同类型到同一目标类型的同名转换函数并不困难。
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    Actually the preceding paragraph is an oversimplification: there are
    two cases in which a function-call construct will be treated as a cast
    request without having matched it to an actual function.
    If a function call <replaceable>name</>(<replaceable>x</>) does not
    exactly match any existing function, but <replaceable>name</> is the name
    of a data type and <structname>pg_cast</> provides a binary-coercible cast
    to this type from the type of <replaceable>x</>, then the call will be
    construed as a binary-coercible cast.  This exception is made so that
    binary-coercible casts can be invoked using functional syntax, even
    though they lack any function.  Likewise, if there is no
    <structname>pg_cast</> entry but the cast would be to or from a string
    type, the call will be construed as an I/O conversion cast.  This
    exception allows I/O conversion casts to be invoked using functional
    syntax.
   </para>
____________________________________________________________________________-->
   <para>
    实际上前一段过于简化了：有两种情况中一个函数调用结构在没有被匹配到
    一个实际函数时将被当作一次造型请求。如果函数调用
    <replaceable>name</replaceable>(<replaceable>x</replaceable>)没有正好匹配任何现有函数，
    但<replaceable>name</replaceable>是一种数据类型的名称并且
    <structname>pg_cast</structname>提供了一种从<replaceable>x</replaceable>的类型到这种
    类型的二进制可强制造型，那么该调用将被翻译为一次二进制可强制造型。
    通过这种例外，二进制可强制造型能够以函数语法调用，即便没有该函数。
    同样的，如果没有<structname>pg_cast</structname>项，但是该造型是要造型到一种
    字符串类型或者是要从一种字符串类型造型，调用将被翻译成一次 I/O 转换
    造型。这种例外允许以函数语法调用 I/O 转换造型。
   </para>
  </note>

  <note>
<!--==========================orignal english content==========================
   <para>
    There is also an exception to the exception: I/O conversion casts from
    composite types to string types cannot be invoked using functional
    syntax, but must be written in explicit cast syntax (either
    <literal>CAST</> or <literal>::</> notation).  This exception was added
    because after the introduction of automatically-provided I/O conversion
    casts, it was found too easy to accidentally invoke such a cast when
    a function or column reference was intended.
   </para>
____________________________________________________________________________-->
   <para>
    还有一种例外中的例外：从组合类型到字符串类型的 I/O 转换造型不能使用
    函数语法调用，而必须被写成显式造型语法（<literal>CAST</literal>或者
    <literal>::</literal>记号）。增加这种例外是因为在引入了自动提供的 I/O 转换
    造型之后，在想要引用一个函数或者列时太容易意外地调用这种造型。
   </para>
  </note>
 </refsect1>


 <refsect1 id="sql-createcast-examples">
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   To create an assignment cast from type <type>bigint</type> to type
   <type>int4</type> using the function <literal>int4(bigint)</literal>:
<programlisting>
CREATE CAST (bigint AS int4) WITH FUNCTION int4(bigint) AS ASSIGNMENT;
</programlisting>
   (This cast is already predefined in the system.)
  </para>
____________________________________________________________________________-->
  <para>
   要使用函数<literal>int4(bigint)</literal>创建一种从类型
   <type>bigint</type>到类型<type>int4</type>的赋值造型：
<programlisting>
CREATE CAST (bigint AS int4) WITH FUNCTION int4(bigint) AS ASSIGNMENT;
</programlisting>
   （在系统中这种造型已经被预定义）。
  </para>
 </refsect1>

 <refsect1 id="sql-createcast-compat">
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   The <command>CREATE CAST</command> command conforms to the
   <acronym>SQL</acronym> standard,
   except that SQL does not make provisions for binary-coercible
   types or extra arguments to implementation functions.
   <literal>AS IMPLICIT</> is a <productname>PostgreSQL</productname>
   extension, too.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE CAST</command>命令符合
   <acronym>SQL</acronym>标准，不过 SQL 没有为二进制可强制
   类型或者实现函数的额外参数做好准备。
   <literal>AS IMPLICIT</literal>也是一种
   <productname>PostgreSQL</productname>扩展。
  </para>
 </refsect1>


 <refsect1 id="sql-createcast-seealso">
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

<!--==========================orignal english content==========================
  <para>
   <xref linkend="sql-createfunction">,
   <xref linkend="sql-createtype">,
   <xref linkend="sql-dropcast">
  </para>
____________________________________________________________________________-->
  <para>
   <xref linkend="sql-createfunction"/>,
   <xref linkend="sql-createtype"/>,
   <xref linkend="sql-dropcast"/>
  </para>
 </refsect1>

</refentry>

<!--
doc/src/sgml/ref/psql-ref.sgml
PostgreSQL documentation
-->

<refentry id="app-psql">
<!--==========================orignal english content==========================
 <indexterm zone="app-psql">
  <primary>psql</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="app-psql">
  <primary>psql</primary>
 </indexterm>

<!--==========================orignal english content==========================
  <refmeta>
    <refentrytitle><application>psql</application></refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo>Application</refmiscinfo>
  </refmeta>
____________________________________________________________________________-->
  <refmeta>
    <refentrytitle><application>psql</application></refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo>Application</refmiscinfo>
  </refmeta>

<!--==========================orignal english content==========================
  <refnamediv>
    <refname><application>psql</application></refname>
    <refpurpose>
      <productname>PostgreSQL</productname> interactive terminal
    </refpurpose>
  </refnamediv>
____________________________________________________________________________-->
  <refnamediv>
    <refname><application>psql</application></refname>
    <refpurpose>
      <productname>PostgreSQL</productname>的交互式终端
    </refpurpose>
  </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
  <cmdsynopsis>
   <command>psql</command>
   <arg rep="repeat"><replaceable class="parameter">option</replaceable></arg>
   <arg choice="opt"><replaceable class="parameter">dbname</replaceable>
   <arg choice="opt"><replaceable class="parameter">username</replaceable></arg></arg>
  </cmdsynopsis>
____________________________________________________________________________-->
  <cmdsynopsis>
   <command>psql</command>
   <arg rep="repeat"><replaceable class="parameter">option</replaceable></arg>
   <arg choice="opt"><replaceable class="parameter">dbname</replaceable>
   <arg choice="opt"><replaceable class="parameter">username</replaceable></arg></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
    <para>
     <application>psql</application> is a terminal-based front-end to
     <productname>PostgreSQL</productname>. It enables you to type in
     queries interactively, issue them to
     <productname>PostgreSQL</productname>, and see the query results.
     Alternatively, input can be from a file or from command line
     arguments. In addition, <application>psql</application> provides a
     number of meta-commands and various shell-like features to
     facilitate writing scripts and automating a wide variety of tasks.
    </para>
____________________________________________________________________________-->
    <para>
     <application>psql</application>是一个<productname>PostgreSQL</productname>的基于终端的前端。它让你能交互式地键入查询，把它们发送给<productname>PostgreSQL</productname>，并且查看查询结果。或者，输入可以来自于一个文件或者命令行参数。此外，<application>psql</application>还提供一些元命令和多种类似 shell 的特性来为编写脚本和自动化多种任务提供便利。
    </para>
 </refsect1>

 <refsect1 id="r1-app-psql-3">
<!--==========================orignal english content==========================
  <title>Options</title>
____________________________________________________________________________-->
  <title>选项</title>

  <variablelist>
    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-a</option></term>
____________________________________________________________________________-->
      <term><option>-a</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;echo-all</option></term>
____________________________________________________________________________-->
      <term><option>--echo-all</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Print all nonempty input lines to standard output as they are read.
      (This does not apply to lines read interactively.) This is
      equivalent to setting the variable <varname>ECHO</varname> to
      <literal>all</literal>.
      </para>
____________________________________________________________________________-->
      <para>
      把所有非空输入行按照它们被读入的形式打印到标准输出（不适用于交互式行读取）。这等效于把变量<varname>ECHO</varname>设置为
      <literal>all</literal>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-A</option></term>
____________________________________________________________________________-->
      <term><option>-A</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;no-align</option></term>
____________________________________________________________________________-->
      <term><option>--no-align</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Switches to unaligned output mode. (The default output mode is
      otherwise aligned.)  This is equivalent to <command>\pset format
      unaligned</command>.
      </para>
____________________________________________________________________________-->
      <para>
      切换到非对齐输出模式（默认输出模式是对齐的）。这等效于<command>\pset format unaligned</command>。
      </para>
      </listitem>
    </varlistentry>
    
    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-b</option></term>
____________________________________________________________________________-->
      <term><option>-b</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;echo-errors</option></term>
____________________________________________________________________________-->
      <term><option>--echo-errors</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Print failed SQL commands to standard error output. This is
      equivalent to setting the variable <varname>ECHO</varname> to
      <literal>errors</literal>.
      </para>
____________________________________________________________________________-->
      <para>
      把失败的 SQL 命令打印到标准错误输出。这等效于把变量<varname>ECHO</varname>设置为<literal>errors</literal>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-c <replaceable class="parameter">command</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-c <replaceable class="parameter">command</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;command=<replaceable class="parameter">command</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--command=<replaceable class="parameter">command</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
       Specifies that <application>psql</application> is to execute the given
       command string, <replaceable class="parameter">command</replaceable>.
       This option can be repeated and combined in any order with
       the <option>-f</option> option.  When either <option>-c</option>
       or <option>-f</option> is specified, <application>psql</application>
       does not read commands from standard input; instead it terminates
       after processing all the <option>-c</option> and <option>-f</option>
       options in sequence.
      </para>
____________________________________________________________________________-->
      <para>
      指定<application>psql</application>执行一个给定的命令字符串<replaceable class="parameter">command</replaceable>。这个选项可以重复多次并且以任何顺序与<option>-f</option>选项组合在一起。当<option>-c</option>或者<option>-f</option>被指定时，<application>psql</application>不会从标准输入读取命令，直到它处理完序列中所有的<option>-c</option>和<option>-f</option>选项之后终止。
      </para>
<!--==========================orignal english content==========================
      <para>
       <replaceable class="parameter">command</replaceable> must be either
       a command string that is completely parsable by the server (i.e.,
       it contains no <application>psql</application>-specific features),
       or a single backslash command. Thus you cannot mix
       <acronym>SQL</acronym> and <application>psql</application>
       meta-commands within a <option>-c</option> option. To achieve that,
       you could use repeated <option>-c</option> options or pipe the string
       into <application>psql</application>, for example:
<programlisting>
psql -c '\x' -c 'SELECT * FROM foo;'
</programlisting>
       or
<programlisting>
echo '\x \\ SELECT * FROM foo;' | psql
</programlisting>
       (<literal>\\</literal> is the separator meta-command.)
      </para>
____________________________________________________________________________-->
      <para>
       <replaceable class="parameter">command</replaceable>必须是一个服务器完全可解析的命令字符串（即不包含<application>psql</application>相关的特性）或者单个反斜线命令。因此不能在一个<option>-c</option>选项中混合<acronym>SQL</acronym>和<application>psql</application>元命令。要那样做，可以使用多个<option>-c</option>选项或者把字符串用管道输送到<application>psql</application>中，例如：
<programlisting>
psql -c '\x' -c 'SELECT * FROM foo;'
</programlisting>
       或者
<programlisting>
echo '\x \\ SELECT * FROM foo;' | psql
</programlisting>
       （<literal>\\</literal>是分隔符元命令）。
      </para>
<!--==========================orignal english content==========================
      <para>
       Each <acronym>SQL</acronym> command string passed
       to <option>-c</option> is sent to the server as a single request.
       Because of this, the server executes it as a single transaction even
       if the string contains multiple <acronym>SQL</acronym> commands,
       unless there are explicit <command>BEGIN</command>/<command>COMMIT</command>
       commands included in the string to divide it into multiple
       transactions.  (See <xref linkend="protocol-flow-multi-statement"/>
       for more details about how the server handles multi-query strings.)
       Also, <application>psql</application> only prints the
       result of the last <acronym>SQL</acronym> command in the string.
       This is different from the behavior when the same string is read from
       a file or fed to <application>psql</application>'s standard input,
       because then <application>psql</application> sends
       each <acronym>SQL</acronym> command separately.
      </para>
____________________________________________________________________________-->
      <para>
       每一个被传递给<option>-c</option>的<acronym>SQL</acronym>命令字符串会被当做一个单独的请求发送给服务器。因此，即便该字符串包括多个<acronym>SQL</acronym>命令，服务器也会把它当做一个事务来执行，除非在该字符串中有显式的<command>BEGIN</command>/<command>COMMIT</command>命令把它划分成多个事务（服务器如何处理多查询字符串的更多细节请参考<xref linkend="protocol-flow-multi-statement"/>）。此外，<application>psql</application>只会打印出该字符串中最后一个<acronym>SQL</acronym>命令的结果。这和从文件中读取同一字符串或者把同一字符串传给<application>psql</application>的标准输出时的行为不同，因为那两种情况下<application>psql</application>会独立地发送每一个<acronym>SQL</acronym>命令。
      </para>
<!--==========================orignal english content==========================
      <para>
       Because of this behavior, putting more than one SQL command in a
       single <option>-c</option> string often has unexpected results.
       It's better to use repeated <option>-c</option> commands or feed
       multiple commands to <application>psql</application>'s standard input,
       either using <application>echo</application> as illustrated above, or
       via a shell here-document, for example:
<programlisting>
psql &lt;&lt;EOF
\x
SELECT * FROM foo;
EOF
</programlisting>
      </para>
____________________________________________________________________________-->
      <para>
       由于这种行为，把多于一个SQL命令放在<option>-c</option>字符串中通常会得到意料之外的结果。最好使用多个<option>-c</option>命令或者把多个命令输送给<application>psql</application>的标准输入，按照上文所说的使用<application>echo</application>或者通过一个 shell，例如：
<programlisting>
psql &lt;&lt;EOF
\x
SELECT * FROM foo;
EOF
</programlisting>
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-d <replaceable class="parameter">dbname</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-d <replaceable class="parameter">dbname</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;dbname=<replaceable class="parameter">dbname</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--dbname=<replaceable class="parameter">dbname</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
       Specifies the name of the database to connect to. This is
       equivalent to specifying <replaceable
       class="parameter">dbname</replaceable> as the first non-option
       argument on the command line.
      </para>
____________________________________________________________________________-->
      <para>
       指定要连接的数据库的名称。这等效于指定<replaceable class="parameter">dbname</replaceable>为命令行上的第一个非选项参数。
      </para>
<!--==========================orignal english content==========================
      <para>
       If this parameter contains an <symbol>=</symbol> sign or starts
       with a valid <acronym>URI</acronym> prefix
       (<literal>postgresql://</literal>
       or <literal>postgres://</literal>), it is treated as a
       <parameter>conninfo</parameter> string. See <xref
       linkend="libpq-connstring"/> for more information.
      </para>
____________________________________________________________________________-->
      <para>
       如果这个参数包含一个<symbol>=</symbol>符号或者以一个合法的<acronym>URI</acronym>前缀（<literal>postgresql://</literal>或者<literal>postgres://</literal>）开始，它会被当作一个<parameter>conninfo</parameter>字符串。详见<xref linkend="libpq-connstring"/>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-e</option></term>
____________________________________________________________________________-->
      <term><option>-e</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;echo-queries</option></term>
____________________________________________________________________________-->
      <term><option>--echo-queries</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Copy all SQL commands sent to the server to standard output as well.
      This is equivalent
      to setting the variable <varname>ECHO</varname> to
      <literal>queries</literal>.
      </para>
____________________________________________________________________________-->
      <para>
      也把发送到服务器的所有 SQL 命令复制到标准输出。这等效于把变量<varname>ECHO</varname>设置为<literal>queries</literal>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-E</option></term>
____________________________________________________________________________-->
      <term><option>-E</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;echo-hidden</option></term>
____________________________________________________________________________-->
      <term><option>--echo-hidden</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Echo the actual queries generated by <command>\d</command> and other backslash
      commands. You can use this to study <application>psql</application>'s
      internal operations. This is equivalent to
      setting the variable <varname>ECHO_HIDDEN</varname> to <literal>on</literal>.
      </para>
____________________________________________________________________________-->
      <para>
      回显<command>\d</command>以及其他反斜线命令生成的实际查询。可以用它来学习<application>psql</application>的内部操作。这等效于把变量<varname>ECHO_HIDDEN</varname>设置为<literal>on</literal>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-f <replaceable class="parameter">filename</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-f <replaceable class="parameter">filename</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;file=<replaceable class="parameter">filename</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--file=<replaceable class="parameter">filename</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
       Read commands from the
       file <replaceable class="parameter">filename</replaceable>,
       rather than standard input.
       This option can be repeated and combined in any order with
       the <option>-c</option> option.  When either <option>-c</option>
       or <option>-f</option> is specified, <application>psql</application>
       does not read commands from standard input; instead it terminates
       after processing all the <option>-c</option> and <option>-f</option>
       options in sequence.
       Except for that, this option is largely equivalent to the
       meta-command <command>\i</command>.
      </para>
____________________________________________________________________________-->
      <para>
       从文件<replaceable class="parameter">filename</replaceable>而不是标准输入中读取命令。这个选项可以被重复多次，也可以以任意顺序与<option>-c</option>选项组合。当<option>-c</option>或者<option>-f</option>被指定时，<application>psql</application>不会从标准输入读取命令，直到它处理完序列中所有的<option>-c</option>和<option>-f</option>选项之后终止。除此以外，这个选项很大程度上等价于元命令<command>\i</command>。
      </para>

<!--==========================orignal english content==========================
      <para>
       If <replaceable>filename</replaceable> is <literal>-</literal>
       (hyphen), then standard input is read until an EOF indication
       or <command>\q</command> meta-command.  This can be used to intersperse
       interactive input with input from files.  Note however that Readline
       is not used in this case (much as if <option>-n</option> had been
       specified).
      </para>
____________________________________________________________________________-->
      <para>
       如果<replaceable>filename</replaceable>是<literal>-</literal>（连字符），那么会读取标准输入直到遇见一个 EOF 指示或者<command>\q</command>元命令。这种方式可以用把自多个文件的输入组合成一种交互式输入。不过注意在这种情况下不会使用 Readline（很像指定了<option>-n</option>的情况）。
      </para>

<!--==========================orignal english content==========================
      <para>
      Using this option is subtly different from writing <literal>psql
      &lt; <replaceable
      class="parameter">filename</replaceable></literal>. In general,
      both will do what you expect, but using <literal>-f</literal>
      enables some nice features such as error messages with line
      numbers. There is also a slight chance that using this option will
      reduce the start-up overhead. On the other hand, the variant using
      the shell's input redirection is (in theory) guaranteed to yield
      exactly the same output you would have received had you entered
      everything by hand.
      </para>
____________________________________________________________________________-->
      <para>
      使用这个选项与<literal>psql &lt; <replaceable class="parameter">filename</replaceable></literal>有细微的不同。通常，两种形式都可以做到我们所期望的，但是使用<literal>-f</literal>启用了一些好的特性，例如带有行号的错误消息。使用这个选项还有一丝机会可以降低启动开销。在另一方面，使用 shell输入重定向的变体（理论上）保证会得到与手工输入时相同的输出。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-F <replaceable class="parameter">separator</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-F <replaceable class="parameter">separator</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;field-separator=<replaceable class="parameter">separator</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--field-separator=<replaceable class="parameter">separator</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Use <replaceable class="parameter">separator</replaceable> as the
      field separator for unaligned output. This is equivalent to
      <command>\pset fieldsep</command> or <command>\f</command>.
      </para>
____________________________________________________________________________-->
      <para>
      使用<replaceable class="parameter">separator</replaceable>作为非对齐输出的域分隔符。这等效于<command>\pset fieldsep</command>或者<command>\f</command>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-h <replaceable class="parameter">hostname</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-h <replaceable class="parameter">hostname</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;host=<replaceable class="parameter">hostname</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--host=<replaceable class="parameter">hostname</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Specifies the host name of the machine on which the
      server is running. If the value begins
      with a slash, it is used as the directory for the Unix-domain
      socket.
      </para>
____________________________________________________________________________-->
      <para>
      指定运行服务器的机器的主机名。如果这个值由一个斜线开始，它会被用作 Unix 域套接字的目录。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-H</option></term>
____________________________________________________________________________-->
      <term><option>-H</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;html</option></term>
____________________________________________________________________________-->
      <term><option>--html</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Turn on <acronym>HTML</acronym> tabular output. This is
      equivalent to <literal>\pset format html</literal> or the
      <command>\H</command> command.
      </para>
____________________________________________________________________________-->
      <para>
      打开<acronym>HTML</acronym>表格输出。这等效于<literal>\pset format html</literal>或者<command>\H</command>命令。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-l</option></term>
____________________________________________________________________________-->
      <term><option>-l</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;list</option></term>
____________________________________________________________________________-->
      <term><option>--list</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      List all available databases, then exit. Other non-connection
      options are ignored. This is similar to the meta-command
      <command>\list</command>.
      </para>
____________________________________________________________________________-->
      <para>
      列出所有可用的数据库，然后退出。其他非连接选项会被忽略。这与元命令<command>\list</command>类似。
      </para>

<!--==========================orignal english content==========================
      <para>
      When this option is used, <application>psql</application> will connect
      to the database <literal>postgres</literal>, unless a different database
      is named on the command line (option <option>-d</option> or non-option
      argument, possibly via a service entry, but not via an environment
      variable).
      </para>
____________________________________________________________________________-->
      <para>
      在使用这个选项时，<application>psql</application>将连接到数据库<literal>postgres</literal>，除非在命令行上提及一个不同的数据（选项<option>-d</option>或非选项参数，可能是通过一个服务项，但不能通过一个环境变量）。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-L <replaceable class="parameter">filename</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-L <replaceable class="parameter">filename</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;log-file=<replaceable class="parameter">filename</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--log-file=<replaceable class="parameter">filename</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
       Write all query output into file <replaceable
       class="parameter">filename</replaceable>, in addition to the
       normal output destination.
      </para>
____________________________________________________________________________-->
      <para>
       除了把所有查询输出写到普通输出目标之外，还写到文件<replaceable class="parameter">filename</replaceable>中。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-n</option></term>
____________________________________________________________________________-->
      <term><option>-n</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;no-readline</option></term>
____________________________________________________________________________-->
      <term><option>--no-readline</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
       Do not use <application>Readline</application> for line editing and do
       not use the command history.
       This can be useful to turn off tab expansion when cutting and pasting.
      </para>
____________________________________________________________________________-->
      <para>
       不使用<application>Readline</application>做行编辑并且不使用命令历史。在剪切和粘贴时，关掉 Tab 展开会有所帮助。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-o <replaceable class="parameter">filename</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-o <replaceable class="parameter">filename</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;output=<replaceable class="parameter">filename</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--output=<replaceable class="parameter">filename</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Put all query output into file <replaceable
      class="parameter">filename</replaceable>. This is equivalent to
      the command <command>\o</command>.
      </para>
____________________________________________________________________________-->
      <para>
      把所有查询输出放到文件<replaceable class="parameter">filename</replaceable>中。这等效于命令<command>\o</command>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;port=<replaceable class="parameter">port</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Specifies the TCP port or the local Unix-domain
      socket file extension on which the server is listening for
      connections. Defaults to the value of the <envar>PGPORT</envar>
      environment variable or, if not set, to the port specified at
      compile time, usually 5432.
      </para>
____________________________________________________________________________-->
      <para>
      指定服务器用于监听连接的 TCP 端口或者本地 Unix 域套接字文件扩展。默认是<envar>PGPORT</envar>环境变量的值，如果没有设置，则默认为编译时指定的端口号（通常是5432）。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-P <replaceable class="parameter">assignment</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-P <replaceable class="parameter">assignment</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;pset=<replaceable class="parameter">assignment</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--pset=<replaceable class="parameter">assignment</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Specifies printing options, in the style of
      <command>\pset</command>. Note that here you
      have to separate name and value with an equal sign instead of a
      space. For example, to set the output format to <application>LaTeX</application>, you could write
      <literal>-P format=latex</literal>.
      </para>
____________________________________________________________________________-->
      <para>
      以<command>\pset</command>的形式指定打印选项。注意，这里你必须用一个等号而不是空格来分隔名称和值。例如，要设置输出格式为<application>LaTeX</application>，应该写成<literal>-P format=latex</literal>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-q</option></term>
____________________________________________________________________________-->
      <term><option>-q</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;quiet</option></term>
____________________________________________________________________________-->
      <term><option>--quiet</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Specifies that <application>psql</application> should do its work
      quietly. By default, it prints welcome messages and various
      informational output. If this option is used, none of this
      happens. This is useful with the <option>-c</option> option.
      This is equivalent to setting the variable <varname>QUIET</varname>
      to <literal>on</literal>.
      </para>
____________________________________________________________________________-->
      <para>
      指定<application>psql</application>应该安静地工作。默认情况下，它会打印出欢迎消息以及多种输出。如果使用了这个选项，以上那些就都不会输出。在使用<option>-c</option>选项时，配合这个选项很有用。这等效于设置变量<varname>QUIET</varname>为<literal>on</literal>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-R <replaceable class="parameter">separator</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-R <replaceable class="parameter">separator</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;record-separator=<replaceable class="parameter">separator</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--record-separator=<replaceable class="parameter">separator</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Use <replaceable class="parameter">separator</replaceable> as the
      record separator for unaligned output. This is equivalent to
      <command>\pset recordsep</command>.
      </para>
____________________________________________________________________________-->
      <para>
      把<replaceable class="parameter">separator</replaceable>用作非对齐输出的记录分隔符。这等效于<command>\pset recordsep</command>命令。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-s</option></term>
____________________________________________________________________________-->
      <term><option>-s</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;single-step</option></term>
____________________________________________________________________________-->
      <term><option>--single-step</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Run in single-step mode. That means the user is prompted before
      each command is sent to the server, with the option to cancel
      execution as well. Use this to debug scripts.
      </para>
____________________________________________________________________________-->
      <para>
      运行在单步模式中。这意味着在每个命令被发送给服务器之前都会提示用户一个可以取消执行的选项。使用这个选项可以调试脚本。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-S</option></term>
____________________________________________________________________________-->
      <term><option>-S</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;single-line</option></term>
____________________________________________________________________________-->
      <term><option>--single-line</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Runs in single-line mode where a newline terminates an SQL command, as a
      semicolon does.
      </para>
____________________________________________________________________________-->
      <para>
      运行在单行模式中，其中新行会终止一个 SQL 命令，就像分号的作用一样。
      </para>

      <note>
<!--==========================orignal english content==========================
      <para>
      This mode is provided for those who insist on it, but you are not
      necessarily encouraged to use it. In particular, if you mix
      <acronym>SQL</acronym> and meta-commands on a line the order of
      execution might not always be clear to the inexperienced user.
      </para>
____________________________________________________________________________-->
      <para>
      这种模式被提供给那些坚持使用它的用户，但是并不一定要使用它。特别地，如果在一行中混合了<acronym>SQL</acronym>和元命令，那对于没有经的用户来说，它们的执行顺序可能不总是那么清晰。
      </para>
      </note>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-t</option></term>
____________________________________________________________________________-->
      <term><option>-t</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;tuples-only</option></term>
____________________________________________________________________________-->
      <term><option>--tuples-only</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Turn off printing of column names and result row count footers,
      etc. This is equivalent to <command>\t</command> or
      <command>\pset tuples_only</command>.
      </para>
____________________________________________________________________________-->
      <para>
      关闭打印列名和结果行计数页脚等。这等效于<command>\t</command>或者<command>\pset tuples_only</command>命令。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-T <replaceable class="parameter">table_options</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-T <replaceable class="parameter">table_options</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;table-attr=<replaceable class="parameter">table_options</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--table-attr=<replaceable class="parameter">table_options</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Specifies options to be placed within the
      <acronym>HTML</acronym> <sgmltag>table</sgmltag> tag. See
      <command>\pset tableattr</command> for details.
      </para>
____________________________________________________________________________-->
      <para>
      指定要替换<acronym>HTML</acronym> <sgmltag>table</sgmltag>标签的选项。详见<command>\pset tableattr</command>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-U <replaceable class="parameter">username</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-U <replaceable class="parameter">username</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;username=<replaceable class="parameter">username</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--username=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Connect to the database as the user <replaceable
      class="parameter">username</replaceable> instead of the default.
      (You must have permission to do so, of course.)
      </para>
____________________________________________________________________________-->
      <para>
      作为用户<replaceable class="parameter">username</replaceable>而不是默认用户连接到数据库（当然，你必须具有这样做的权限）。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-v <replaceable class="parameter">assignment</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>-v <replaceable class="parameter">assignment</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;set=<replaceable class="parameter">assignment</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--set=<replaceable class="parameter">assignment</replaceable></option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;variable=<replaceable class="parameter">assignment</replaceable></option></term>
____________________________________________________________________________-->
      <term><option>--variable=<replaceable class="parameter">assignment</replaceable></option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Perform a variable assignment, like the <command>\set</command>
      meta-command. Note that you must separate name and value, if
      any, by an equal sign on the command line. To unset a variable,
      leave off the equal sign. To set a variable with an empty value,
      use the equal sign but leave off the value. These assignments are
      done during command line processing, so variables that reflect
      connection state will get overwritten later.
      </para>
____________________________________________________________________________-->
      <para>
      执行一次变量赋值，和<command>\set</command>元命令相似。注意你必须在命令行上用等号分隔名字和值（如果有）。要重置一个变量，去掉等号就行。要把一个变量置为空值，使用等号但是去掉值。这些赋值在命令行处理期间被完成，因此反映连接状态的变量将在稍后被覆盖。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-V</option></term>
____________________________________________________________________________-->
      <term><option>-V</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;version</option></term>
____________________________________________________________________________-->
      <term><option>--version</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Print the <application>psql</application> version and exit.
      </para>
____________________________________________________________________________-->
      <para>
      打印<application>psql</application>版本并且退出。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><option>-w</option></term>
____________________________________________________________________________-->
     <term><option>-w</option></term>
<!--==========================orignal english content==========================
     <term><option>-&minus;no-password</option></term>
____________________________________________________________________________-->
     <term><option>--no-password</option></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       Never issue a password prompt.  If the server requires password
       authentication and a password is not available by other means
       such as a <filename>.pgpass</filename> file, the connection
       attempt will fail.  This option can be useful in batch jobs and
       scripts where no user is present to enter a password.
      </para>
____________________________________________________________________________-->
      <para>
       从不发出一个口令提示。如果服务器要求口令认证并且没有其他方式提供口令（例如一个<filename>.pgpass</filename>文件），那儿连接尝试将失败。这个选项对于批处理任务和脚本有用，因为在其中没有一个用户来输入口令。
      </para>

<!--==========================orignal english content==========================
      <para>
       Note that this option will remain set for the entire session,
       and so it affects uses of the meta-command
       <command>\connect</command> as well as the initial connection attempt.
      </para>
____________________________________________________________________________-->
      <para>
       注意这个选项将对整个会话保持设置，并且因此它会影响元命令<command>\connect</command>的使用，就像初始的连接尝试那样。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-W</option></term>
____________________________________________________________________________-->
      <term><option>-W</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;password</option></term>
____________________________________________________________________________-->
      <term><option>--password</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
       Force <application>psql</application> to prompt for a
       password before connecting to a database.
      </para>
____________________________________________________________________________-->
      <para>
       强制<application>psql</application>在连接到一个数据库之前提示要求一个口令。
      </para>

<!--==========================orignal english content==========================
      <para>
       This option is never essential, since <application>psql</application>
       will automatically prompt for a password if the server demands
       password authentication.  However, <application>psql</application>
       will waste a connection attempt finding out that the server wants a
       password.  In some cases it is worth typing <option>-W</option> to avoid
       the extra connection attempt.
      </para>
____________________________________________________________________________-->
      <para>
       这个选项不是必不可少的，因为如果服务器要求口令认证，<application>psql</application>将自动提示要求一个口令。但是，<application>psql</application>将浪费一次连接尝试来发现服务器想要一个口令。在某些情况下值得用<option>-W</option>来避免额外的连接尝试。
      </para>

<!--==========================orignal english content==========================
      <para>
       Note that this option will remain set for the entire session,
       and so it affects uses of the meta-command
       <command>\connect</command> as well as the initial connection attempt.
      </para>
____________________________________________________________________________-->
      <para>
       注意这个选项将对整个会话保持设置，并且因此它会影响元命令<command>\connect</command>的使用，就像初始的连接尝试那样。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-x</option></term>
____________________________________________________________________________-->
      <term><option>-x</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;expanded</option></term>
____________________________________________________________________________-->
      <term><option>--expanded</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Turn on the expanded table formatting mode. This is equivalent to
      <command>\x</command> or <command>\pset expanded</command>.
      </para>
____________________________________________________________________________-->
      <para>
      打开扩展表格式模式。这等效于<command>\x</command>或者<command>\pset expanded</command>命令。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-X,</option></term>
____________________________________________________________________________-->
      <term><option>-X,</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;no-psqlrc</option></term>
____________________________________________________________________________-->
      <term><option>--no-psqlrc</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Do not read the start-up file (neither the system-wide
      <filename>psqlrc</filename> file nor the user's
      <filename>~/.psqlrc</filename> file).
      </para>
____________________________________________________________________________-->
      <para>
      不读取启动文件（要么是系统范围的<filename>psqlrc</filename>文件，要么是用户的<filename>~/.psqlrc</filename>文件）。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-z</option></term>
____________________________________________________________________________-->
      <term><option>-z</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;field-separator-zero</option></term>
____________________________________________________________________________-->
      <term><option>--field-separator-zero</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Set the field separator for unaligned output to a zero byte.  This is
      equivalent to <command>\pset fieldsep_zero</command>.
      </para>
____________________________________________________________________________-->
      <para>
      设置非对齐输出的域分隔符为零字节。这等效于<command>\pset fieldsep_zero</command>。
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-0</option></term>
____________________________________________________________________________-->
      <term><option>-0</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;record-separator-zero</option></term>
____________________________________________________________________________-->
      <term><option>--record-separator-zero</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Set the record separator for unaligned output to a zero byte.  This is
      useful for interfacing, for example, with <literal>xargs -0</literal>.
      This is equivalent to <command>\pset recordsep_zero</command>.
      </para>
____________________________________________________________________________-->
      <para>
      设置非对齐输出的记录分隔符为零字节。例如，这对与<literal>xargs -0</literal>配合有关。这等效于<command>\pset recordsep_zero</command>。
      </para>
      </listitem>
    </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-1</option></term>
____________________________________________________________________________-->
      <term><option>-1</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;single-transaction</option></term>
____________________________________________________________________________-->
      <term><option>--single-transaction</option></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This option can only be used in combination with one or more
        <option>-c</option> and/or <option>-f</option> options.  It causes
        <application>psql</application> to issue a <command>BEGIN</command> command
        before the first such option and a <command>COMMIT</command> command after
        the last one, thereby wrapping all the commands into a single
        transaction.  This ensures that either all the commands complete
        successfully, or no changes are applied.
       </para>
____________________________________________________________________________-->
       <para>
        这个选项只能被用于与一个或者多个<option>-c</option>以及/或者<option>-f</option>选项组合。它会让<application>psql</application>在第一个上述选项之前发出一条<command>BEGIN</command>命令并且在最后一个上述选项之后发出一条<command>COMMIT</command>命令，这样就把所有的命令都包裹在一个事务中。这个选项可以保证要么所有的命令都成功地完成，要么不应用任何更改。
       </para>

<!--==========================orignal english content==========================
       <para>
        If the commands themselves
        contain <command>BEGIN</command>, <command>COMMIT</command>,
        or <command>ROLLBACK</command>, this option will not have the desired
        effects.  Also, if an individual command cannot be executed inside a
        transaction block, specifying this option will cause the whole
        transaction to fail.
       </para>
____________________________________________________________________________-->
       <para>
        如果命令本身包含<command>BEGIN</command>、<command>COMMIT</command>或者<command>ROLLBACK</command>，这个选项将不会得到想要的效果。还有，如果当个命令不能在一个事务块中执行，指定这个选项将导致整个事务失败。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
      <term><option>-?</option></term>
____________________________________________________________________________-->
      <term><option>-?</option></term>
<!--==========================orignal english content==========================
      <term><option>-&minus;help[=<replaceable class="parameter">topic</replaceable>]</option></term>
____________________________________________________________________________-->
      <term><option>--help[=<replaceable class="parameter">topic</replaceable>]</option></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
      Show help about <application>psql</application> and exit. The optional
      <replaceable class="parameter">topic</replaceable> parameter (defaulting
      to <literal>options</literal>) selects which part of <application>psql</application> is
      explained: <literal>commands</literal> describes <application>psql</application>'s
      backslash commands; <literal>options</literal> describes the command-line
      options that can be passed to <application>psql</application>;
      and <literal>variables</literal> shows help about <application>psql</application> configuration
      variables.
      </para>
____________________________________________________________________________-->
      <para>
      显示有关<application>psql</application>的帮助并且退出。可选的<replaceable class="parameter">topic</replaceable>参数（默认为<literal>options</literal>）选择要解释哪一部分的<application>psql</application>：<literal>commands</literal>描述<application>psql</application>的反斜线命令；<literal>options</literal>描述可以被传递给<application>psql</application>的命令行选项；而<literal>variables</literal>则显示有关<application>psql</application>配置变量的帮助。
      </para>
      </listitem>
    </varlistentry>

  </variablelist>
 </refsect1>


 <refsect1>
<!--==========================orignal english content==========================
  <title>Exit Status</title>
____________________________________________________________________________-->
  <title>退出状态</title>

<!--==========================orignal english content==========================
  <para>
   <application>psql</application> returns 0 to the shell if it
   finished normally, 1 if a fatal error of its own occurs (e.g. out of memory,
   file not found), 2 if the connection to the server went bad
   and the session was not interactive, and 3 if an error occurred in a
   script and the variable <varname>ON_ERROR_STOP</varname> was set.
  </para>
____________________________________________________________________________-->
  <para>
   如果<application>psql</application>正常完成，它会向 shell 返回 0。如果它自身发生一个致命错误（例如内存用完、找不到文件），它会返回 1。如果到服务器的连接出问题并且事务不是交互式的，它会返回 2。如果在脚本中发生错误，它会返回 3 并且变量<varname>ON_ERROR_STOP</varname>会被设置。
  </para>
 </refsect1>


 <refsect1>
<!--==========================orignal english content==========================
  <title>Usage</title>
____________________________________________________________________________-->
  <title>用法</title>

  <refsect2 id="r2-app-psql-connecting">
<!--==========================orignal english content==========================
    <title>Connecting to a Database</title>
____________________________________________________________________________-->
    <title>连接到数据库</title>

<!--==========================orignal english content==========================
    <para>
    <application>psql</application> is a regular
    <productname>PostgreSQL</productname> client application. In order
    to connect to a database you need to know the name of your target
    database, the host name and port number of the server, and what user
    name you want to connect as. <application>psql</application> can be
    told about those parameters via command line options, namely
    <option>-d</option>, <option>-h</option>, <option>-p</option>, and
    <option>-U</option> respectively. If an argument is found that does
    not belong to any option it will be interpreted as the database name
    (or the user name, if the database name is already given). Not all
    of these options are required; there are useful defaults. If you omit the host
    name, <application>psql</application> will connect via a Unix-domain socket
    to a server on the local host, or via TCP/IP to <literal>localhost</literal> on
    machines that don't have Unix-domain sockets. The default port number is
    determined at compile time.
    Since the database server uses the same default, you will not have
    to specify the port in most cases. The default user name is your
    operating-system user name, as is the default database name.
    Note that you cannot
    just connect to any database under any user name. Your database
    administrator should have informed you about your access rights.
    </para>
____________________________________________________________________________-->
    <para>
    <application>psql</application>是一个常规<productname>PostgreSQL</productname>客户端应用。为了连接到数据库，你需要知道你的目标数据库的名称、主机名和该服务器的端口号，还有要作为哪个用户名连接。可以通过命令行选项告知<application>psql</application>这些参数，分别是<option>-d</option>、<option>-h</option>、<option>-p</option>以及<option>-U</option>。如果发现一个参数不属于任何选项，它将被解释为数据库名称（如果已经给出数据库名称，就解释为用户名）。并非所有这些选项都是必需的，它们都有可用的默认值。如果省略主机名，<application>psql</application>将通过一个 Unix 域套接字连接到本地主机上的服务器，或者通过 TCP/IP 连接到没有 Unix 域套接字的主机上的<literal>localhost</literal>。默认端口号则在编译时决定。由于数据库服务器使用相同的默认值，大多数情况下你将不必指定端口。默认的用户名是你的操作系统用户名，它也会是默认的数据库名。注意你不一定能连接到任意用户名下的任何数据库。你的数据库管理员应该已经告知过你有关你的访问权限。
    </para>

<!--==========================orignal english content==========================
    <para>
    When the defaults aren't quite right, you can save yourself
    some typing by setting the environment variables
    <envar>PGDATABASE</envar>, <envar>PGHOST</envar>,
    <envar>PGPORT</envar> and/or <envar>PGUSER</envar> to appropriate
    values. (For additional environment variables, see <xref
    linkend="libpq-envars"/>.) It is also convenient to have a
    <filename>~/.pgpass</filename> file to avoid regularly having to type in
    passwords. See <xref linkend="libpq-pgpass"/> for more information.
    </para>
____________________________________________________________________________-->
    <para>
    当默认值不是很符合实际时，可以把环境变量<envar>PGDATABASE</envar>、<envar>PGHOST</envar>、<envar>PGPORT</envar>以及<envar>PGUSER</envar>设置为适当的值，这样也能节省一些敲打键盘的工作（额外的环境变量可见<xref linkend="libpq-envars"/>）。用一个<filename>~/.pgpass</filename>文件来避免定期输入密码也很方便。详见<xref linkend="libpq-pgpass"/>。
    </para>

<!--==========================orignal english content==========================
    <para>
     An alternative way to specify connection parameters is in a
     <parameter>conninfo</parameter> string or
     a <acronym>URI</acronym>, which is used instead of a database
     name. This mechanism give you very wide control over the
     connection. For example:
<programlisting>
$ <userinput>psql "service=myservice sslmode=require"</userinput>
$ <userinput>psql postgresql://dbmaster:5433/mydb?sslmode=require</userinput>
</programlisting>
     This way you can also use <acronym>LDAP</acronym> for connection
     parameter lookup as described in <xref linkend="libpq-ldap"/>.
     See <xref linkend="libpq-paramkeywords"/> for more information on all the
     available connection options.
    </para>
____________________________________________________________________________-->
    <para>
     另一种指定连接参数的方法是用一个<parameter>conninfo</parameter>字符串或者一个<acronym>URI</acronym>，它可以被用来替代数据库名。这种机制可以让我们对连接具有很广的控制权。例如：
<programlisting>
$ <userinput>psql "service=myservice sslmode=require"</userinput>
$ <userinput>psql postgresql://dbmaster:5433/mydb?sslmode=require</userinput>
</programlisting>
     用这种方式，你也可以把<acronym>LDAP</acronym>用于<xref linkend="libpq-ldap"/>中描述的连接参数查找。可用连接选项的更多信息请见<xref linkend="libpq-paramkeywords"/>。
    </para>

<!--==========================orignal english content==========================
    <para>
    If the connection could not be made for any reason (e.g., insufficient
    privileges, server is not running on the targeted host, etc.),
    <application>psql</application> will return an error and terminate.
    </para>
____________________________________________________________________________-->
    <para>
    如果由于任何原因（例如权限不足、服务器没有在目标主机上运行等）导致连接无法建立，<application>psql</application>将返回一个错误并且终止。
    </para>

<!--==========================orignal english content==========================
    <para>
     If both standard input and standard output are a
     terminal, then <application>psql</application> sets the client
     encoding to <quote>auto</quote>, which will detect the
     appropriate client encoding from the locale settings
     (<envar>LC_CTYPE</envar> environment variable on Unix systems).
     If this doesn't work out as expected, the client encoding can be
     overridden using the environment
     variable <envar>PGCLIENTENCODING</envar>.
    </para>
____________________________________________________________________________-->
    <para>
     如果标准输入和标准输出都是一个终端，那么<application>psql</application>会把客户端编码设置成<quote>auto</quote>，这会使<application>psql</application>从区域设置（Unix 系统上的<envar>LC_CTYPE</envar>环境变量）中检测合适的客户端编码。如果这样不起作用，可以使用环境变量<envar>PGCLIENTENCODING</envar>覆盖客户端编码。
    </para>
  </refsect2>

  <refsect2 id="r2-app-psql-4">
<!--==========================orignal english content==========================
    <title>Entering SQL Commands</title>
____________________________________________________________________________-->
    <title>输入 SQL 命令</title>

<!--==========================orignal english content==========================
    <para>
    In normal operation, <application>psql</application> provides a
    prompt with the name of the database to which
    <application>psql</application> is currently connected, followed by
    the string <literal>=&gt;</literal>. For example:
<programlisting>
$ <userinput>psql testdb</userinput>
psql (&version;)
Type "help" for help.

testdb=&gt;
</programlisting>
    </para>
____________________________________________________________________________-->
    <para>
    在正常操作时，<application>psql</application>会提供一个提示符，该提示符是<application>psql</application>当前连接到的数据库名称后面跟上字符串<literal>=&gt;</literal>。例如：
<programlisting>
$ <userinput>psql testdb</userinput>
psql (&version;)
Type "help" for help.

testdb=&gt;
</programlisting>
    </para>

<!--==========================orignal english content==========================
    <para>
    At the prompt, the user can type in <acronym>SQL</acronym> commands.
    Ordinarily, input lines are sent to the server when a
    command-terminating semicolon is reached. An end of line does not
    terminate a command.  Thus commands can be spread over several lines for
    clarity. If the command was sent and executed without error, the results
    of the command are displayed on the screen.
    </para>
____________________________________________________________________________-->
    <para>
    在提示符下，用户可以键入<acronym>SQL</acronym>命令。正常情况下，当碰到一个表示命令终结的分号时，输入的行会被发送给服务器。一行的结束并不表示命令的完结。因此，为了清晰，可以把命令散布在多个行上。如果命令被发送并且执行而不产生错误，该命令的结果将会显示在屏幕上。
    </para>

<!--==========================orignal english content==========================
    <para>
    If untrusted users have access to a database that has not adopted a
    <link linkend="ddl-schemas-patterns">secure schema usage pattern</link>,
    begin your session by removing publicly-writable schemas
    from <varname>search_path</varname>.  One can
    add <literal>options=-csearch_path=</literal> to the connection string or
    issue <literal>SELECT pg_catalog.set_config('search_path', '',
    false)</literal> before other SQL commands.  This consideration is not
    specific to <application>psql</application>; it applies to every interface
    for executing arbitrary SQL commands.
    </para>
____________________________________________________________________________-->
    <para>
    如果不可信用户对还没有采用<link linkend="ddl-schemas-patterns">安全方案使用模式</link>的一个而数据库拥有访问，通过从<varname>search_path</varname>移除公共可写的方案来开始你的会话。人们可以在连接字符串中加入<literal>options=-csearch_path=</literal>或者在其他SQL命令之前发出<literal>SELECT pg_catalog.set_config('search_path', '', false)</literal>。这种考虑并非专门针对<application>psql</application>，它适用于每一种执行任意SQL命令的接口。
    </para>

<!--==========================orignal english content==========================
    <para>
    Whenever a command is executed, <application>psql</application> also polls
    for asynchronous notification events generated by
    <xref linkend="sql-listen"/> and
    <xref linkend="sql-notify"/>.
    </para>
____________________________________________________________________________-->
    <para>
    只要执行命令，<application>psql</application>还会测试<xref linkend="sql-listen"/>和<xref linkend="sql-notify"/>产生的异步通知。
    </para>

<!--==========================orignal english content==========================
    <para>
    While C-style block comments are passed to the server for
    processing and removal, SQL-standard comments are removed by
    <application>psql</application>.
    </para>
____________________________________________________________________________-->
    <para>
    虽然 C 风格的注释块会被传给服务器处理并且移除，<application>psql</application>会自己移除掉 SQL 标准的注释。
    </para>
  </refsect2>

  <refsect2 id="app-psql-meta-commands">
<!--==========================orignal english content==========================
    <title>Meta-Commands</title>
____________________________________________________________________________-->
    <title>元命令</title>

<!--==========================orignal english content==========================
    <para>
    Anything you enter in <application>psql</application> that begins
    with an unquoted backslash is a <application>psql</application>
    meta-command that is processed by <application>psql</application>
    itself. These commands make
    <application>psql</application> more useful for administration or
    scripting. Meta-commands are often called slash or backslash commands.
    </para>
____________________________________________________________________________-->
    <para>
    你输入到<application>psql</application>中的任何以未加引用的反斜线开始的东西都是一个<application>psql</application>元命令，它们由<application>psql</application>自行处理。这些命令让<application>psql</application>对管理和编写脚本更有用。元命令常常被称作斜线或者反斜线命令。
    </para>

<!--==========================orignal english content==========================
    <para>
    The format of a <application>psql</application> command is the backslash,
    followed immediately by a command verb, then any arguments. The arguments
    are separated from the command verb and each other by any number of
    whitespace characters.
    </para>
____________________________________________________________________________-->
    <para>
    <application>psql</application>命令的格式是用反斜线后面直接跟上一个命令动词，然后是一些参数。参数与命令动词和其他参数之间用任意多个空白字符分隔开。
    </para>

<!--==========================orignal english content==========================
    <para>
    To include whitespace in an argument you can quote it with
    single quotes. To include a single quote in an argument,
    write two single quotes within single-quoted text.
    Anything contained in single quotes is
    furthermore subject to C-like substitutions for
    <literal>\n</literal> (new line), <literal>\t</literal> (tab),
    <literal>\b</literal> (backspace), <literal>\r</literal> (carriage return),
    <literal>\f</literal> (form feed),
    <literal>\</literal><replaceable>digits</replaceable> (octal), and
    <literal>\x</literal><replaceable>digits</replaceable> (hexadecimal).
    A backslash preceding any other character within single-quoted text
    quotes that single character, whatever it is.
    </para>
____________________________________________________________________________-->
    <para>
    要在一个参数中包括空白，可以将它加上单引号。要在一个参数中包括一个单引号，则需要在文本中写上两个单引号。任何包含在单引号中的东西都服从与 C 语言中<literal>\n</literal>（新行）、<literal>\t</literal>（制表符）、<literal>\b</literal>（退格）、<literal>\r</literal>（回车）、<literal>\f</literal>（换页）、<literal>\</literal><replaceable>digits</replaceable>（10 进制）以及<literal>\x</literal><replaceable>digits</replaceable>（16 进制）类似的替换规则。单引号内文本中的其他任何字符（不管它是什么）前面的反斜线都没有实际意义（会被忽略）。
    </para>

<!--==========================orignal english content==========================
    <para>
    If an unquoted colon (<literal>:</literal>) followed by a
    <application>psql</application> variable name appears within an argument, it is
    replaced by the variable's value, as described in <xref
    linkend="app-psql-interpolation" endterm="app-psql-interpolation-title"/>.
    The forms <literal>:'<replaceable>variable_name</replaceable>'</literal> and
    <literal>:"<replaceable>variable_name</replaceable>"</literal> described there
    work as well.
    The <literal>:{?<replaceable>variable_name</replaceable>}</literal> syntax allows
    testing whether a variable is defined. It is substituted by
    TRUE or FALSE.
    Escaping the colon with a backslash protects it from substitution.
    </para>
____________________________________________________________________________-->
    <para>
    如果在一个参数中出现一个未加引号的冒号（<literal>:</literal>）后面跟着一个<application>psql</application>变量名，它会被该变量的值替换，如<xref linkend="app-psql-interpolation" endterm="app-psql-interpolation-title"/>中所述。在其中描述的形式<literal>:'<replaceable>variable_name</replaceable>'</literal>和<literal>:"<replaceable>variable_name</replaceable>"</literal>也有同样的效果。<literal>:{?<replaceable>variable_name</replaceable>}</literal>语法允许测试一个变量是否被定义。它会被TRUE或FALSE替换。用一个反斜线转义该冒号可以防止它被替换。
    </para>

<!--==========================orignal english content==========================
    <para>
    Within an argument, text that is enclosed in backquotes
    (<literal>`</literal>) is taken as a command line that is passed to the
    shell.  The output of the command (with any trailing newline removed)
    replaces the backquoted text.  Within the text enclosed in backquotes,
    no special quoting or other processing occurs, except that appearances
    of <literal>:<replaceable>variable_name</replaceable></literal> where
    <replaceable>variable_name</replaceable> is a <application>psql</application> variable name
    are replaced by the variable's value.  Also, appearances of
    <literal>:'<replaceable>variable_name</replaceable>'</literal> are replaced by the
    variable's value suitably quoted to become a single shell command
    argument.  (The latter form is almost always preferable, unless you are
    very sure of what is in the variable.)  Because carriage return and line
    feed characters cannot be safely quoted on all platforms, the
    <literal>:'<replaceable>variable_name</replaceable>'</literal> form prints an
    error message and does not substitute the variable value when such
    characters appear in the value.
    </para>
____________________________________________________________________________-->
    <para>
    在一个参数中，封闭在反引号（<literal>`</literal>）中的文本会被当做一个传递给shell的命令行。该命令的输出（移除任何拖尾的新行）会替换反引号文本。在封闭在反引号的文本中，不会有特别的引号或者其他处理发生，<literal>:<replaceable>variable_name</replaceable></literal>的出现除外，其中<replaceable>variable_name</replaceable>是一个会被其值替换的<application>psql</application>变量名。此外，Also, appearances of
    <literal>:'<replaceable>variable_name</replaceable>'</literal>的出现会被替换为该变量的值，而值会被适当地加以引用以变成一个单一shell命令参数（后一种形式几乎总是优先，除非你非常确定变量中有什么）。因为回车和换行字符在所有的平台上都不能被安全地引用，<literal>:'<replaceable>variable_name</replaceable>'</literal>形式会打印一个错误消息并且在这类字符出现在值中时不替换该变量值。
    </para>

<!--==========================orignal english content==========================
    <para>
    Some commands take an <acronym>SQL</acronym> identifier (such as a
    table name) as argument. These arguments follow the syntax rules
    of <acronym>SQL</acronym>: Unquoted letters are forced to
    lowercase, while double quotes (<literal>"</literal>) protect letters
    from case conversion and allow incorporation of whitespace into
    the identifier.  Within double quotes, paired double quotes reduce
    to a single double quote in the resulting name.  For example,
    <literal>FOO"BAR"BAZ</literal> is interpreted as <literal>fooBARbaz</literal>,
    and <literal>"A weird"" name"</literal> becomes <literal>A weird"
    name</literal>.
    </para>
____________________________________________________________________________-->
    <para>
    有些命令把<acronym>SQL</acronym>标识符（例如一个表名）当作参数。这些参数遵循<acronym>SQL</acronym>的语法规则：无引号的字母被强制变为小写，而双引号（<literal>"</literal>）可以保护字母避免大小写转换并且允许在标识符中包含空白。 在双引号内，成对的双引号会被缩减为结果名称中的单个双引号。例如，<literal>FOO"BAR"BAZ</literal>会被解释成<literal>fooBARbaz</literal>，而<literal>"A weird"" name"</literal>会变成<literal>A weird" name</literal>。
    </para>

<!--==========================orignal english content==========================
    <para>
    Parsing for arguments stops at the end of the line, or when another
    unquoted backslash is found.  An unquoted backslash
    is taken as the beginning of a new meta-command. The special
    sequence <literal>\\</literal> (two backslashes) marks the end of
    arguments and continues parsing <acronym>SQL</acronym> commands, if
    any. That way <acronym>SQL</acronym> and
    <application>psql</application> commands can be freely mixed on a
    line. But in any case, the arguments of a meta-command cannot
    continue beyond the end of the line.
    </para>
____________________________________________________________________________-->
    <para>
    对参数的解析会在行尾或者碰到另一个未加引号的反斜线时停止。一个未加引号的反斜线被当做新元命令的开始。特殊的序列<literal>\\</literal>（两个反斜线）表示参数结束并且应继续解析<acronym>SQL</acronym>命令（如果还有）。使用这种方法，<acronym>SQL</acronym>命令和<application>psql</application>命令可以被自由地混合在一行中。但是无论在何种情况中，元命令的参数都无法跨越一行。
    </para>

<!--==========================orignal english content==========================
    <para>
    Many of the meta-commands act on the <firstterm>current query buffer</firstterm>.
    This is simply a buffer holding whatever SQL command text has been typed
    but not yet sent to the server for execution.  This will include previous
    input lines as well as any text appearing before the meta-command on the
    same line.
    </para>
____________________________________________________________________________-->
    <para>
    很多元命令作用在<firstterm>当前查询缓冲区</firstterm>上。这就是一个缓冲区而已，它保存任何已经被键入但是还没有发送到服务器执行的SQL命令文本。这将包括之前输入的行以及在该元命令同一行上出现在前面的任何文本。
    </para>

<!--==========================orignal english content==========================
    <para>
    The following meta-commands are defined:

    <variablelist>
      <varlistentry>
        <term><literal>\a</literal></term>
        <listitem>
        <para>
        If the current table output format is unaligned, it is switched to aligned.
        If it is not unaligned, it is set to unaligned. This command is
        kept for backwards compatibility. See <command>\pset</command> for a
        more general solution.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\c</literal> or <literal>\connect [ -reuse-previous=<replaceable class="parameter">on|off</replaceable> ] [ <replaceable class="parameter">dbname</replaceable> [ <replaceable class="parameter">username</replaceable> ] [ <replaceable class="parameter">host</replaceable> ] [ <replaceable class="parameter">port</replaceable> ] | <replaceable class="parameter">conninfo</replaceable> ]</literal></term>
        <listitem>
        <para>
        Establishes a new connection to a <productname>PostgreSQL</productname>
        server.  The connection parameters to use can be specified either
        using a positional syntax, or using <replaceable>conninfo</replaceable> connection
        strings as detailed in <xref linkend="libpq-connstring"/>.
        </para>

        <para>
        Where the command omits database name, user, host, or port, the new
        connection can reuse values from the previous connection.  By default,
        values from the previous connection are reused except when processing
        a <replaceable>conninfo</replaceable> string.  Passing a first argument
        of <literal>-reuse-previous=on</literal>
        or <literal>-reuse-previous=off</literal> overrides that default.
        When the command neither specifies nor reuses a particular parameter,
        the <application>libpq</application> default is used.  Specifying any
        of <replaceable class="parameter">dbname</replaceable>,
        <replaceable class="parameter">username</replaceable>,
        <replaceable class="parameter">host</replaceable> or
        <replaceable class="parameter">port</replaceable>
        as <literal>-</literal> is equivalent to omitting that parameter.
        </para>

        <para>
        If the new connection is successfully made, the previous
        connection is closed.
        If the connection attempt failed (wrong user name, access
        denied, etc.), the previous connection will only be kept if
        <application>psql</application> is in interactive mode. When
        executing a non-interactive script, processing will
        immediately stop with an error. This distinction was chosen as
        a user convenience against typos on the one hand, and a safety
        mechanism that scripts are not accidentally acting on the
        wrong database on the other hand.
        </para>

        <para>
        Examples:
        </para>
<programlisting>
=&gt; \c mydb myuser host.dom 6432
=&gt; \c service=foo
=&gt; \c "host=localhost port=5432 dbname=mydb connect_timeout=10 sslmode=disable"
=&gt; \c postgresql://tom@localhost/mydb?application_name=myapp
</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\C [ <replaceable class="parameter">title</replaceable> ]</literal></term>
        <listitem>
        <para>
        Sets the title of any tables being printed as the result of a
        query or unset any such title. This command is equivalent to
        <literal>\pset title <replaceable
        class="parameter">title</replaceable></literal>. (The name of
        this command derives from <quote>caption</quote>, as it was
        previously only used to set the caption in an
        <acronym>HTML</acronym> table.)
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>\cd [ <replaceable>directory</replaceable> ]</literal></term>
       <listitem>
        <para>
         Changes the current working directory to
         <replaceable>directory</replaceable>. Without argument, changes
         to the current user's home directory.
        </para>

        <tip>
         <para>
          To print your current working directory, use <literal>\! pwd</literal>.
         </para>
        </tip>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\conninfo</literal></term>
        <listitem>
        <para>
        Outputs information about the current database connection.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry id="app-psql-meta-commands-copy">
        <term><literal>\copy { <replaceable class="parameter">table</replaceable> [ ( <replaceable class="parameter">column_list</replaceable> ) ] | ( <replaceable class="parameter">query</replaceable> ) }
        { <literal>from</literal> | <literal>to</literal> }
        { <replaceable class="parameter">'filename'</replaceable> | program <replaceable class="parameter">'command'</replaceable> | stdin | stdout | pstdin | pstdout }
        [ [ with ] ( <replaceable class="parameter">option</replaceable> [, ...] ) ]</literal></term>

        <listitem>
        <para>
        Performs a frontend (client) copy. This is an operation that
        runs an <acronym>SQL</acronym> <xref linkend="sql-copy"/>
        command, but instead of the server
        reading or writing the specified file,
        <application>psql</application> reads or writes the file and
        routes the data between the server and the local file system.
        This means that file accessibility and privileges are those of
        the local user, not the server, and no SQL superuser
        privileges are required.
        </para>

        <para>
        When <literal>program</literal> is specified,
        <replaceable class="parameter">command</replaceable> is
        executed by <application>psql</application> and the data passed from
        or to <replaceable class="parameter">command</replaceable> is
        routed between the server and the client.
        Again, the execution privileges are those of
        the local user, not the server, and no SQL superuser
        privileges are required.
        </para>

        <para>
        For <literal>\copy ... from stdin</literal>, data rows are read from the same
        source that issued the command, continuing until <literal>\.</literal>
        is read or the stream reaches <acronym>EOF</acronym>. This option is useful
        for populating tables in-line within a SQL script file.
        For <literal>\copy ... to stdout</literal>, output is sent to the same place
        as <application>psql</application> command output, and
        the <literal>COPY <replaceable>count</replaceable></literal> command status is
        not printed (since it might be confused with a data row).
        To read/write <application>psql</application>'s standard input or
        output regardless of the current command source or <literal>\o</literal>
        option, write <literal>from pstdin</literal> or <literal>to pstdout</literal>.
        </para>

        <para>
        The syntax of this command is similar to that of the
        <acronym>SQL</acronym> <xref linkend="sql-copy"/>
        command.  All options other than the data source/destination are
        as specified for <xref linkend="sql-copy"/>.
        Because of this, special parsing rules apply to the <command>\copy</command>
        meta-command.  Unlike most other meta-commands, the entire remainder
        of the line is always taken to be the arguments of <command>\copy</command>,
        and neither variable interpolation nor backquote expansion are
        performed in the arguments.
        </para>

        <tip>
        <para>
        Another way to obtain the same result as <literal>\copy
        ... to</literal> is to use the <acronym>SQL</acronym> <literal>COPY
        ... TO STDOUT</literal> command and terminate it
        with <literal>\g <replaceable>filename</replaceable></literal>
        or <literal>\g |<replaceable>program</replaceable></literal>.
        Unlike <literal>\copy</literal>, this method allows the command to
        span multiple lines; also, variable interpolation and backquote
        expansion can be used.
        </para>
        </tip>

        <tip>
        <para>
        These operations are not as efficient as the <acronym>SQL</acronym>
        <command>COPY</command> command with a file or program data source or
        destination, because all data must pass through the client/server
        connection.  For large amounts of data the <acronym>SQL</acronym>
        command might be preferable.
        </para>
        </tip>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\copyright</literal></term>
        <listitem>
        <para>
        Shows the copyright and distribution terms of
        <productname>PostgreSQL</productname>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry id="app-psql-meta-commands-crosstabview">
        <term><literal>\crosstabview [
            <replaceable class="parameter">colV</replaceable>
            [ <replaceable class="parameter">colH</replaceable>
            [ <replaceable class="parameter">colD</replaceable>
            [ <replaceable class="parameter">sortcolH</replaceable>
            ] ] ] ] </literal></term>
        <listitem>
        <para>
        Executes the current query buffer (like <literal>\g</literal>) and
        shows the results in a crosstab grid.
        The query must return at least three columns.
        The output column identified by <replaceable class="parameter">colV</replaceable>
        becomes a vertical header and the output column identified by
        <replaceable class="parameter">colH</replaceable>
        becomes a horizontal header.
        <replaceable class="parameter">colD</replaceable> identifies
        the output column to display within the grid.
        <replaceable class="parameter">sortcolH</replaceable> identifies
        an optional sort column for the horizontal header.
        </para>

        <para>
        Each column specification can be a column number (starting at 1) or
        a column name.  The usual SQL case folding and quoting rules apply to
        column names.  If omitted,
        <replaceable class="parameter">colV</replaceable> is taken as column 1
        and <replaceable class="parameter">colH</replaceable> as column 2.
        <replaceable class="parameter">colH</replaceable> must differ from
        <replaceable class="parameter">colV</replaceable>.
        If <replaceable class="parameter">colD</replaceable> is not
        specified, then there must be exactly three columns in the query
        result, and the column that is neither
        <replaceable class="parameter">colV</replaceable> nor
        <replaceable class="parameter">colH</replaceable>
        is taken to be <replaceable class="parameter">colD</replaceable>.
        </para>

        <para>
        The vertical header, displayed as the leftmost column, contains the
        values found in column <replaceable class="parameter">colV</replaceable>, in the
        same order as in the query results, but with duplicates removed.
        </para>

        <para>
        The horizontal header, displayed as the first row, contains the values
        found in column <replaceable class="parameter">colH</replaceable>,
        with duplicates removed.  By default, these appear in the same order
        as in the query results.  But if the
        optional <replaceable class="parameter">sortcolH</replaceable> argument is given,
        it identifies a column whose values must be integer numbers, and the
        values from <replaceable class="parameter">colH</replaceable> will
        appear in the horizontal header sorted according to the
        corresponding <replaceable class="parameter">sortcolH</replaceable> values.
        </para>

        <para>
        Inside the crosstab grid, for each distinct value <literal>x</literal>
        of <replaceable class="parameter">colH</replaceable> and each distinct
        value <literal>y</literal>
        of <replaceable class="parameter">colV</replaceable>, the cell located
        at the intersection <literal>(x,y)</literal> contains the value of
        the <literal>colD</literal> column in the query result row for which
        the value of <replaceable class="parameter">colH</replaceable>
        is <literal>x</literal> and the value
        of <replaceable class="parameter">colV</replaceable>
        is <literal>y</literal>.  If there is no such row, the cell is empty.  If
        there are multiple such rows, an error is reported.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\d[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        For each relation (table, view, materialized view, index, sequence,
        or foreign table)
        or composite type matching the
        <replaceable class="parameter">pattern</replaceable>, show all
        columns, their types, the tablespace (if not the default) and any
        special attributes such as <literal>NOT NULL</literal> or defaults.
        Associated indexes, constraints, rules, and triggers are
        also shown.  For foreign tables, the associated foreign
        server is shown as well.
        (<quote>Matching the pattern</quote> is defined in
        <xref linkend="app-psql-patterns" endterm="app-psql-patterns-title"/>
        below.)
        </para>

        <para>
        For some types of relation, <literal>\d</literal> shows additional information
        for each column: column values for sequences, indexed expressions for
        indexes, and foreign data wrapper options for foreign tables.
        </para>

        <para>
        The command form <literal>\d+</literal> is identical, except that
        more information is displayed: any comments associated with the
        columns of the table are shown, as is the presence of OIDs in the
        table, the view definition if the relation is a view, a non-default
        <link linkend="sql-createtable-replica-identity">replica
        identity</link> setting.
        </para>

        <para>
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>

        <note>
        <para>
        If <command>\d</command> is used without a
        <replaceable class="parameter">pattern</replaceable> argument, it is
        equivalent to <command>\dtvmsE</command> which will show a list of
        all visible tables, views, materialized views, sequences and
        foreign tables.
        This is purely a convenience measure.
        </para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\da[S] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        Lists aggregate functions, together with their
        return type and the data types they operate on. If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only aggregates whose names match the pattern are shown.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dA[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        Lists access methods. If <replaceable
        class="parameter">pattern</replaceable> is specified, only access
        methods whose names match the pattern are shown. If
        <literal>+</literal> is appended to the command name, each access
        method is listed with its associated handler function and description.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\db[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        Lists tablespaces. If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only tablespaces whose names match the pattern are shown.
        If <literal>+</literal> is appended to the command name, each tablespace
        is listed with its associated options, on-disk size, permissions and
        description.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dc[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists conversions between character-set encodings.
        If <replaceable class="parameter">pattern</replaceable>
        is specified, only conversions whose names match the pattern are
        listed.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated description.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dC[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists type casts.
        If <replaceable class="parameter">pattern</replaceable>
        is specified, only casts whose source or target types match the
        pattern are listed.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated description.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dd[S] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Shows the descriptions of objects of type <literal>constraint</literal>,
        <literal>operator class</literal>, <literal>operator family</literal>,
        <literal>rule</literal>, and <literal>trigger</literal>. All
        other comments may be viewed by the respective backslash commands for
        those object types.
        </para>

        <para><literal>\dd</literal> displays descriptions for objects matching the
        <replaceable class="parameter">pattern</replaceable>, or of visible
        objects of the appropriate type if no argument is given.  But in either
        case, only objects that have a description are listed.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>

        <para>
        Descriptions for objects can be created with the <xref
        linkend="sql-comment"/>
        <acronym>SQL</acronym> command.
       </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dD[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists domains. If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only domains whose names match the pattern are shown.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated permissions and description.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ddp [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists default access privilege settings.  An entry is shown for
        each role (and schema, if applicable) for which the default
        privilege settings have been changed from the built-in defaults.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only entries whose role name or schema name matches
        the pattern are listed.
        </para>

        <para>
        The <xref linkend="sql-alterdefaultprivileges"/> command is used to set
        default access privileges.  The meaning of the
        privilege display is explained under
        <xref linkend="sql-grant"/>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dE[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\di[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\dm[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\ds[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\dt[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\dv[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        In this group of commands, the letters <literal>E</literal>,
        <literal>i</literal>, <literal>m</literal>, <literal>s</literal>,
        <literal>t</literal>, and <literal>v</literal>
        stand for foreign table, index, materialized view, sequence, table, and view,
        respectively.
        You can specify any or all of
        these letters, in any order, to obtain a listing of objects
        of these types.  For example, <literal>\dit</literal> lists indexes
        and tables.  If <literal>+</literal> is
        appended to the command name, each object is listed with its
        physical size on disk and its associated description, if any.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only objects whose names match the pattern are listed.
        By default, only user-created objects are shown; supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\des[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists foreign servers (mnemonic: <quote>external
        servers</quote>).
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only those servers whose name matches the pattern
        are listed.  If the form <literal>\des+</literal> is used, a
        full description of each server is shown, including the
        server's ACL, type, version, options, and description.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\det[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists foreign tables (mnemonic: <quote>external tables</quote>).
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only entries whose table name or schema name matches
        the pattern are listed.  If the form <literal>\det+</literal>
        is used, generic options and the foreign table description
        are also displayed.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\deu[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists user mappings (mnemonic: <quote>external
        users</quote>).
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only those mappings whose user names match the
        pattern are listed.  If the form <literal>\deu+</literal> is
        used, additional information about each mapping is shown.
        </para>

        <caution>
        <para>
        <literal>\deu+</literal> might also display the user name and
        password of the remote user, so care should be taken not to
        disclose them.
        </para>
        </caution>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dew[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists foreign-data wrappers (mnemonic: <quote>external
        wrappers</quote>).
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only those foreign-data wrappers whose name matches
        the pattern are listed.  If the form <literal>\dew+</literal>
        is used, the ACL, options, and description of the foreign-data
        wrapper are also shown.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\df[anptwS+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        Lists functions, together with their result data types, argument data
        types, and function types, which are classified as <quote>agg</quote>
        (aggregate), <quote>normal</quote>, <quote>procedure</quote>, <quote>trigger</quote>, or <quote>window</quote>.
        To display only functions
        of specific type(s), add the corresponding letters <literal>a</literal>,
        <literal>n</literal>, <literal>p</literal>, <literal>t</literal>, or <literal>w</literal> to the command.
        If <replaceable
        class="parameter">pattern</replaceable> is specified, only
        functions whose names match the pattern are shown.
        By default, only user-created
        objects are shown; supply a pattern or the <literal>S</literal>
        modifier to include system objects.
        If the form <literal>\df+</literal> is used, additional information
        about each function is shown, including volatility,
        parallel safety, owner, security classification, access privileges,
        language, source code and description.
        </para>

        <tip>
        <para>
        To look up functions taking arguments or returning values of a specific
        data type, use your pager's search capability to scroll through the
        <literal>\df</literal> output.
        </para>
        </tip>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dF[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         Lists text search configurations.
         If <replaceable class="parameter">pattern</replaceable> is specified,
         only configurations whose names match the pattern are shown.
         If the form <literal>\dF+</literal> is used, a full description of
         each configuration is shown, including the underlying text search
         parser and the dictionary list for each parser token type.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFd[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         Lists text search dictionaries.
         If <replaceable class="parameter">pattern</replaceable> is specified,
         only dictionaries whose names match the pattern are shown.
         If the form <literal>\dFd+</literal> is used, additional information
         is shown about each selected dictionary, including the underlying
         text search template and the option values.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFp[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         Lists text search parsers.
         If <replaceable class="parameter">pattern</replaceable> is specified,
         only parsers whose names match the pattern are shown.
         If the form <literal>\dFp+</literal> is used, a full description of
         each parser is shown, including the underlying functions and the
         list of recognized token types.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFt[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         Lists text search templates.
         If <replaceable class="parameter">pattern</replaceable> is specified,
         only templates whose names match the pattern are shown.
         If the form <literal>\dFt+</literal> is used, additional information
         is shown about each template, including the underlying function names.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dg[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists database roles.
        (Since the concepts of <quote>users</quote> and <quote>groups</quote> have been
        unified into <quote>roles</quote>, this command is now equivalent to
        <literal>\du</literal>.)
        By default, only user-created roles are shown; supply the
        <literal>S</literal> modifier to include system roles.
        If <replaceable class="parameter">pattern</replaceable> is specified,
        only those roles whose names match the pattern are listed.
        If the form <literal>\dg+</literal> is used, additional information
        is shown about each role; currently this adds the comment for each
        role.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dl</literal></term>
        <listitem>
        <para>
        This is an alias for <command>\lo_list</command>, which shows a
        list of large objects.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dL[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists procedural languages. If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only languages whose names match the pattern are listed.
        By default, only user-created languages
        are shown; supply the <literal>S</literal> modifier to include system
        objects. If <literal>+</literal> is appended to the command name, each
        language is listed with its call handler, validator, access privileges,
        and whether it is a system object.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dn[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        Lists schemas (namespaces). If <replaceable
        class="parameter">pattern</replaceable>
        is specified, only schemas whose names match the pattern are listed.
        By default, only user-created objects are shown; supply a
        pattern or the <literal>S</literal> modifier to include system objects.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated permissions and description, if any.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\do[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists operators with their operand and result types.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only operators whose names match the pattern are listed.
        By default, only user-created objects are shown; supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        If <literal>+</literal> is appended to the command name,
        additional information about each operator is shown, currently just
        the name of the underlying function.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dO[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists collations.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only collations whose names match the pattern are
        listed.  By default, only user-created objects are shown;
        supply a pattern or the <literal>S</literal> modifier to
        include system objects.  If <literal>+</literal> is appended
        to the command name, each collation is listed with its associated
        description, if any.
        Note that only collations usable with the current database's encoding
        are shown, so the results may vary in different databases of the
        same installation.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dp [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists tables, views and sequences with their
        associated access privileges.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only tables, views and sequences whose names match the
        pattern are listed.
        </para>

        <para>
        The <xref linkend="sql-grant"/> and
        <xref linkend="sql-revoke"/>
        commands are used to set access privileges.  The meaning of the
        privilege display is explained under
        <xref linkend="sql-grant"/>.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\drds [ <link linkend="app-psql-patterns"><replaceable class="parameter">role-pattern</replaceable></link> [ <link linkend="app-psql-patterns"><replaceable class="parameter">database-pattern</replaceable></link> ] ]</literal></term>
        <listitem>
        <para>
        Lists defined configuration settings.  These settings can be
        role-specific, database-specific, or both.
        <replaceable>role-pattern</replaceable> and
        <replaceable>database-pattern</replaceable> are used to select
        specific roles and databases to list, respectively.  If omitted, or if
        <literal>*</literal> is specified, all settings are listed, including those
        not role-specific or database-specific, respectively.
        </para>

        <para>
        The <xref linkend="sql-alterrole"/> and
        <xref linkend="sql-alterdatabase"/>
        commands are used to define per-role and per-database configuration
        settings.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dRp[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists replication publications.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only those publications whose names match the pattern are
        listed.
        If <literal>+</literal> is appended to the command name, the tables
        associated with each publication are shown as well.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dRs[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists replication subscriptions.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only those subscriptions whose names match the pattern are
        listed.
        If <literal>+</literal> is appended to the command name, additional
        properties of the subscriptions are shown.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dT[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists data types.
        If <replaceable class="parameter">pattern</replaceable> is
        specified, only types whose names match the pattern are listed.
        If <literal>+</literal> is appended to the command name, each type is
        listed with its internal name and size, its allowed values
        if it is an <type>enum</type> type, and its associated permissions.
        By default, only user-created objects are shown;  supply a
        pattern or the <literal>S</literal> modifier to include system
        objects.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\du[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists database roles.
        (Since the concepts of <quote>users</quote> and <quote>groups</quote> have been
        unified into <quote>roles</quote>, this command is now equivalent to
        <literal>\dg</literal>.)
        By default, only user-created roles are shown; supply the
        <literal>S</literal> modifier to include system roles.
        If <replaceable class="parameter">pattern</replaceable> is specified,
        only those roles whose names match the pattern are listed.
        If the form <literal>\du+</literal> is used, additional information
        is shown about each role; currently this adds the comment for each
        role.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dx[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists installed extensions.
        If <replaceable class="parameter">pattern</replaceable>
        is specified, only those extensions whose names match the pattern
        are listed.
        If the form <literal>\dx+</literal> is used, all the objects belonging
        to each matching extension are listed.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dy[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists event triggers.
        If <replaceable class="parameter">pattern</replaceable>
        is specified, only those event triggers whose names match the pattern
        are listed.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated description.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\e</literal> or <literal>\edit</literal> <literal> <optional> <replaceable class="parameter">filename</replaceable> </optional> <optional> <replaceable class="parameter">line_number</replaceable> </optional> </literal></term>

        <listitem>
        <para>
        If <replaceable class="parameter">filename</replaceable> is
        specified, the file is edited; after the editor exits, the file's
        content is copied into the current query buffer. If no <replaceable
        class="parameter">filename</replaceable> is given, the current query
        buffer is copied to a temporary file which is then edited in the same
        fashion.  Or, if the current query buffer is empty, the most recently
        executed query is copied to a temporary file and edited in the same
        fashion.
        </para>

        <para>
        The new contents of the query buffer are then re-parsed according to
        the normal rules of <application>psql</application>, treating the
        whole buffer as a single line.  Any complete queries are immediately
        executed; that is, if the query buffer contains or ends with a
        semicolon, everything up to that point is executed.  Whatever remains
        will wait in the query buffer; type semicolon or <literal>\g</literal> to
        send it, or <literal>\r</literal> to cancel it by clearing the query buffer.
        Treating the buffer as a single line primarily affects meta-commands:
        whatever is in the buffer after a meta-command will be taken as
        argument(s) to the meta-command, even if it spans multiple lines.
        (Thus you cannot make meta-command-using scripts this way.
        Use <command>\i</command> for that.)
        </para>

        <para>
        If a line number is specified, <application>psql</application> will
        position the cursor on the specified line of the file or query buffer.
        Note that if a single all-digits argument is given,
        <application>psql</application> assumes it is a line number,
        not a file name.
        </para>

        <tip>
        <para>
        See under <xref linkend="app-psql-environment"
        endterm="app-psql-environment-title"/> for how to configure and
        customize your editor.
        </para>
        </tip>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\echo <replaceable class="parameter">text</replaceable> [ ... ]</literal></term>
        <listitem>
        <para>
        Prints the arguments to the standard output, separated by one
        space and followed by a newline. This can be useful to
        intersperse information in the output of scripts. For example:
<programlisting>
=&gt; <userinput>\echo `date`</userinput>
Tue Oct 26 21:40:57 CEST 1999
</programlisting>
        If the first argument is an unquoted <literal>-n</literal> the trailing
        newline is not written.
        </para>

        <tip>
        <para>
        If you use the <command>\o</command> command to redirect your
        query output you might wish to use <command>\qecho</command>
        instead of this command.
        </para>
        </tip>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\ef <optional> <replaceable class="parameter">function_description</replaceable> <optional>  <replaceable class="parameter">line_number</replaceable> </optional> </optional> </literal></term>

        <listitem>
        <para>
         This command fetches and edits the definition of the named function or procedure,
         in the form of a <command>CREATE OR REPLACE FUNCTION</command> or
         <command>CREATE OR REPLACE PROCEDURE</command> command.
         Editing is done in the same way as for <literal>\edit</literal>.
         After the editor exits, the updated command waits in the query buffer;
         type semicolon or <literal>\g</literal> to send it, or <literal>\r</literal>
         to cancel.
        </para>

        <para>
         The target function can be specified by name alone, or by name
         and arguments, for example <literal>foo(integer, text)</literal>.
         The argument types must be given if there is more
         than one function of the same name.
        </para>

        <para>
         If no function is specified, a blank <command>CREATE FUNCTION</command>
         template is presented for editing.
        </para>

        <para>
        If a line number is specified, <application>psql</application> will
        position the cursor on the specified line of the function body.
        (Note that the function body typically does not begin on the first
        line of the file.)
        </para>

        <para>
        Unlike most other meta-commands, the entire remainder of the line is
        always taken to be the argument(s) of <command>\ef</command>, and neither
        variable interpolation nor backquote expansion are performed in the
        arguments.
        </para>

        <tip>
        <para>
        See under <xref linkend="app-psql-environment"
        endterm="app-psql-environment-title"/> for how to configure and
        customize your editor.
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\encoding [ <replaceable class="parameter">encoding</replaceable> ]</literal></term>

        <listitem>
        <para>
        Sets the client character set encoding.  Without an argument, this command
        shows the current encoding.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\errverbose</literal></term>

        <listitem>
        <para>
        Repeats the most recent server error message at maximum
        verbosity, as though <varname>VERBOSITY</varname> were set
        to <literal>verbose</literal> and <varname>SHOW_CONTEXT</varname> were
        set to <literal>always</literal>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ev <optional> <replaceable class="parameter">view_name</replaceable> <optional>  <replaceable class="parameter">line_number</replaceable> </optional> </optional> </literal></term>

        <listitem>
        <para>
         This command fetches and edits the definition of the named view,
         in the form of a <command>CREATE OR REPLACE VIEW</command> command.
         Editing is done in the same way as for <literal>\edit</literal>.
         After the editor exits, the updated command waits in the query buffer;
         type semicolon or <literal>\g</literal> to send it, or <literal>\r</literal>
         to cancel.
        </para>

        <para>
         If no view is specified, a blank <command>CREATE VIEW</command>
         template is presented for editing.
        </para>

        <para>
         If a line number is specified, <application>psql</application> will
         position the cursor on the specified line of the view definition.
        </para>

        <para>
        Unlike most other meta-commands, the entire remainder of the line is
        always taken to be the argument(s) of <command>\ev</command>, and neither
        variable interpolation nor backquote expansion are performed in the
        arguments.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\f [ <replaceable class="parameter">string</replaceable> ]</literal></term>

        <listitem>
        <para>
        Sets the field separator for unaligned query output. The default
        is the vertical bar (<literal>|</literal>). It is equivalent to
        <command>\pset fieldsep</command>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\g [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <term><literal>\g [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        Sends the current query buffer to the server for execution.
        If an argument is given, the query's output is written to the named
        file or piped to the given shell command, instead of displaying it as
        usual.  The file or command is written to only if the query
        successfully returns zero or more tuples, not if the query fails or
        is a non-data-returning SQL command.
        </para>
        <para>
        If the current query buffer is empty, the most recently sent query is
        re-executed instead.  Except for that behavior, <literal>\g</literal>
        without an argument is essentially equivalent to a semicolon.
        A <literal>\g</literal> with argument is a <quote>one-shot</quote>
        alternative to the <command>\o</command> command.
        </para>
        <para>
        If the argument begins with <literal>|</literal>, then the entire remainder
        of the line is taken to be
        the <replaceable class="parameter">command</replaceable> to execute,
        and neither variable interpolation nor backquote expansion are
        performed in it.  The rest of the line is simply passed literally to
        the shell.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\gdesc</literal></term>

        <listitem>
        <para>
         Shows the description (that is, the column names and data types)
         of the result of the current query buffer.  The query is not
         actually executed; however, if it contains some type of syntax
         error, that error will be reported in the normal way.
        </para>

        <para>
         If the current query buffer is empty, the most recently sent query
         is described instead.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\gexec</literal></term>

        <listitem>
        <para>
         Sends the current query buffer to the server, then treats
         each column of each row of the query's output (if any) as a SQL
         statement to be executed.  For example, to create an index on each
         column of <structname>my_table</structname>:
<programlisting>
=&gt; <userinput>SELECT format('create index on my_table(%I)', attname)</userinput>
-&gt; <userinput>FROM pg_attribute</userinput>
-&gt; <userinput>WHERE attrelid = 'my_table'::regclass AND attnum &gt; 0</userinput>
-&gt; <userinput>ORDER BY attnum</userinput>
-&gt; <userinput>\gexec</userinput>
CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
</programlisting>
        </para>

        <para>
         The generated queries are executed in the order in which the rows
         are returned, and left-to-right within each row if there is more
         than one column.  NULL fields are ignored.  The generated queries
         are sent literally to the server for processing, so they cannot be
         <application>psql</application> meta-commands nor contain <application>psql</application>
         variable references.  If any individual query fails, execution of
         the remaining queries continues
         unless <varname>ON_ERROR_STOP</varname> is set.  Execution of each
         query is subject to <varname>ECHO</varname> processing.
         (Setting <varname>ECHO</varname> to <literal>all</literal>
         or <literal>queries</literal> is often advisable when
         using <command>\gexec</command>.)  Query logging, single-step mode,
         timing, and other query execution features apply to each generated
         query as well.
        </para>
        <para>
         If the current query buffer is empty, the most recently sent query
         is re-executed instead.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\gset [ <replaceable class="parameter">prefix</replaceable> ]</literal></term>

        <listitem>
        <para>
         Sends the current query buffer to the server and stores the
         query's output into <application>psql</application> variables (see <xref
         linkend="app-psql-variables" endterm="app-psql-variables-title"/>).
         The query to be executed must return exactly one row.  Each column of
         the row is stored into a separate variable, named the same as the
         column.  For example:
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset</userinput>
=&gt; <userinput>\echo :var1 :var2</userinput>
hello 10
</programlisting>
        </para>
        <para>
         If you specify a <replaceable class="parameter">prefix</replaceable>,
         that string is prepended to the query's column names to create the
         variable names to use:
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset result_</userinput>
=&gt; <userinput>\echo :result_var1 :result_var2</userinput>
hello 10
</programlisting>
        </para>
        <para>
         If a column result is NULL, the corresponding variable is unset
         rather than being set.
        </para>
        <para>
         If the query fails or does not return one row,
         no variables are changed.
        </para>
        <para>
         If the current query buffer is empty, the most recently sent query
         is re-executed instead.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\gx [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <term><literal>\gx [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        <literal>\gx</literal> is equivalent to <literal>\g</literal>, but
        forces expanded output mode for this query.  See <literal>\x</literal>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\h</literal> or <literal>\help</literal> <literal>[ <replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        Gives syntax help on the specified <acronym>SQL</acronym>
        command. If <replaceable class="parameter">command</replaceable>
        is not specified, then <application>psql</application> will list
        all the commands for which syntax help is available. If
        <replaceable class="parameter">command</replaceable> is an
        asterisk (<literal>*</literal>), then syntax help on all
        <acronym>SQL</acronym> commands is shown.
        </para>

        <para>
        Unlike most other meta-commands, the entire remainder of the line is
        always taken to be the argument(s) of <command>\help</command>, and neither
        variable interpolation nor backquote expansion are performed in the
        arguments.
        </para>

        <note>
        <para>
        To simplify typing, commands that consists of several words do
        not have to be quoted. Thus it is fine to type <userinput>\help
        alter table</userinput>.
        </para>
        </note>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\H</literal> or <literal>\html</literal></term>
        <listitem>
        <para>
        Turns on <acronym>HTML</acronym> query output format. If the
        <acronym>HTML</acronym> format is already on, it is switched
        back to the default aligned text format. This command is for
        compatibility and convenience, but see <command>\pset</command>
        about setting other output options.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\i</literal> or <literal>\include</literal> <replaceable class="parameter">filename</replaceable></term>
        <listitem>
        <para>
        Reads input from the file <replaceable
        class="parameter">filename</replaceable> and executes it as
        though it had been typed on the keyboard.
        </para>
        <para>
        If <replaceable>filename</replaceable> is <literal>-</literal>
        (hyphen), then standard input is read until an EOF indication
        or <command>\q</command> meta-command.  This can be used to intersperse
        interactive input with input from files.  Note that Readline behavior
        will be used only if it is active at the outermost level.
        </para>
        <note>
        <para>
        If you want to see the lines on the screen as they are read you
        must set the variable <varname>ECHO</varname> to
        <literal>all</literal>.
        </para>
        </note>
        </listitem>
      </varlistentry>


      <varlistentry id="psql-metacommand-if">
        <term><literal>\if</literal> <replaceable class="parameter">expression</replaceable></term>
        <term><literal>\elif</literal> <replaceable class="parameter">expression</replaceable></term>
        <term><literal>\else</literal></term>
        <term><literal>\endif</literal></term>
        <listitem>
        <para>
        This group of commands implements nestable conditional blocks.
        A conditional block must begin with an <command>\if</command> and end
        with an <command>\endif</command>.  In between there may be any number
        of <command>\elif</command> clauses, which may optionally be followed
        by a single <command>\else</command> clause.  Ordinary queries and
        other types of backslash commands may (and usually do) appear between
        the commands forming a conditional block.
        </para>
        <para>
        The <command>\if</command> and <command>\elif</command> commands read
        their argument(s) and evaluate them as a boolean expression.  If the
        expression yields <literal>true</literal> then processing continues
        normally; otherwise, lines are skipped until a
        matching <command>\elif</command>, <command>\else</command>,
        or <command>\endif</command> is reached.  Once
        an <command>\if</command> or <command>\elif</command> test has
        succeeded, the arguments of later <command>\elif</command> commands in
        the same block are not evaluated but are treated as false.  Lines
        following an <command>\else</command> are processed only if no earlier
        matching <command>\if</command> or <command>\elif</command> succeeded.
        </para>
        <para>
        The <replaceable class="parameter">expression</replaceable> argument
        of an <command>\if</command> or <command>\elif</command> command
        is subject to variable interpolation and backquote expansion, just
        like any other backslash command argument.  After that it is evaluated
        like the value of an on/off option variable.  So a valid value
        is any unambiguous case-insensitive match for one of:
        <literal>true</literal>, <literal>false</literal>, <literal>1</literal>,
        <literal>0</literal>, <literal>on</literal>, <literal>off</literal>,
        <literal>yes</literal>, <literal>no</literal>.  For example,
        <literal>t</literal>, <literal>T</literal>, and <literal>tR</literal>
        will all be considered to be <literal>true</literal>.
        </para>
        <para>
        Expressions that do not properly evaluate to true or false will
        generate a warning and be treated as false.
        </para>
        <para>
        Lines being skipped are parsed normally to identify queries and
        backslash commands, but queries are not sent to the server, and
        backslash commands other than conditionals
        (<command>\if</command>, <command>\elif</command>,
        <command>\else</command>, <command>\endif</command>) are
        ignored.  Conditional commands are checked only for valid nesting.
        Variable references in skipped lines are not expanded, and backquote
        expansion is not performed either.
        </para>
        <para>
        All the backslash commands of a given conditional block must appear in
        the same source file. If EOF is reached on the main input file or an
        <command>\include</command>-ed file before all local
        <command>\if</command>-blocks have been closed,
        then <application>psql</application> will raise an error.
        </para>
        <para>
         Here is an example:
        </para>
<programlisting>
-&minus; check for the existence of two separate records in the database and store
-&minus; the results in separate psql variables
SELECT
    EXISTS(SELECT 1 FROM customer WHERE customer_id = 123) as is_customer,
    EXISTS(SELECT 1 FROM employee WHERE employee_id = 456) as is_employee
\gset
\if :is_customer
    SELECT * FROM customer WHERE customer_id = 123;
\elif :is_employee
    \echo 'is not a customer but is an employee'
    SELECT * FROM employee WHERE employee_id = 456;
\else
    \if yes
        \echo 'not a customer or employee'
    \else
        \echo 'this will never print'
    \endif
\endif
</programlisting>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ir</literal> or <literal>\include_relative</literal> <replaceable class="parameter">filename</replaceable></term>
        <listitem>
        <para>
        The <literal>\ir</literal> command is similar to <literal>\i</literal>, but resolves
        relative file names differently.  When executing in interactive mode,
        the two commands behave identically.  However, when invoked from a
        script, <literal>\ir</literal> interprets file names relative to the
        directory in which the script is located, rather than the current
        working directory.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\l[+]</literal> or <literal>\list[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        List the databases in the server and show their names, owners,
        character set encodings, and access privileges.
        If <replaceable class="parameter">pattern</replaceable> is specified,
        only databases whose names match the pattern are listed.
        If <literal>+</literal> is appended to the command name, database
        sizes, default tablespaces, and descriptions are also displayed.
        (Size information is only available for databases that the current
        user can connect to.)
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_export <replaceable class="parameter">loid</replaceable> <replaceable class="parameter">filename</replaceable></literal></term>

        <listitem>
        <para>
        Reads the large object with <acronym>OID</acronym> <replaceable
        class="parameter">loid</replaceable> from the database and
        writes it to <replaceable
        class="parameter">filename</replaceable>. Note that this is
        subtly different from the server function
        <function>lo_export</function>, which acts with the permissions
        of the user that the database server runs as and on the server's
        file system.
        </para>
        <tip>
        <para>
        Use <command>\lo_list</command> to find out the large object's
        <acronym>OID</acronym>.
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_import <replaceable class="parameter">filename</replaceable> [ <replaceable class="parameter">comment</replaceable> ]</literal></term>

        <listitem>
        <para>
        Stores the file into a <productname>PostgreSQL</productname>
        large object. Optionally, it associates the given
        comment with the object. Example:
<programlisting>
foo=&gt; <userinput>\lo_import '/home/peter/pictures/photo.xcf' 'a picture of me'</userinput>
lo_import 152801
</programlisting>
        The response indicates that the large object received object
        ID 152801, which can be used to access the newly-created large
        object in the future. For the sake of readability, it is
        recommended to always associate a human-readable comment with
        every object. Both OIDs and comments can be viewed with the
        <command>\lo_list</command> command.
        </para>

        <para>
        Note that this command is subtly different from the server-side
        <function>lo_import</function> because it acts as the local user
        on the local file system, rather than the server's user and file
        system.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_list</literal></term>
        <listitem>
        <para>
        Shows a list of all <productname>PostgreSQL</productname>
        large objects currently stored in the database,
        along with any comments provided for them.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_unlink <replaceable class="parameter">loid</replaceable></literal></term>

        <listitem>
        <para>
        Deletes the large object with <acronym>OID</acronym>
        <replaceable class="parameter">loid</replaceable> from the
        database.
        </para>

        <tip>
        <para>
        Use <command>\lo_list</command> to find out the large object's
        <acronym>OID</acronym>.
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\o</literal> or <literal>\out [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <term><literal>\o</literal> or <literal>\out [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        Arranges to save future query results to the file <replaceable
        class="parameter">filename</replaceable> or pipe future results
        to the shell command <replaceable
        class="parameter">command</replaceable>. If no argument is
        specified, the query output is reset to the standard output.
        </para>

        <para>
        If the argument begins with <literal>|</literal>, then the entire remainder
        of the line is taken to be
        the <replaceable class="parameter">command</replaceable> to execute,
        and neither variable interpolation nor backquote expansion are
        performed in it.  The rest of the line is simply passed literally to
        the shell.
        </para>

        <para>
        <quote>Query results</quote> includes all tables, command
        responses, and notices obtained from the database server, as
        well as output of various backslash commands that query the
        database (such as <command>\d</command>); but not error
        messages.
        </para>

        <tip>
        <para>
        To intersperse text output in between query results, use
        <command>\qecho</command>.
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\p</literal> or <literal>\print</literal></term>
        <listitem>
        <para>
        Print the current query buffer to the standard output.
        If the current query buffer is empty, the most recently executed query
        is printed instead.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\password [ <replaceable class="parameter">username</replaceable> ]</literal></term>
        <listitem>
        <para>
        Changes the password of the specified user (by default, the current
        user).  This command prompts for the new password, encrypts it, and
        sends it to the server as an <command>ALTER ROLE</command> command.  This
        makes sure that the new password does not appear in cleartext in the
        command history, the server log, or elsewhere.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\prompt [ <replaceable class="parameter">text</replaceable> ] <replaceable class="parameter">name</replaceable></literal></term>
        <listitem>
        <para>
         Prompts the user to supply text, which is assigned to the variable
         <replaceable class="parameter">name</replaceable>.
         An optional prompt string, <replaceable
         class="parameter">text</replaceable>, can be specified.  (For multiword
         prompts, surround the text with single quotes.)
        </para>

        <para>
         By default, <literal>\prompt</literal> uses the terminal for input and
         output.  However, if the <option>-f</option> command line switch was
         used, <literal>\prompt</literal> uses standard input and standard output.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\pset [ <replaceable class="parameter">option</replaceable> [ <replaceable class="parameter">value</replaceable> ] ]</literal></term>

        <listitem>
        <para>
        This command sets options affecting the output of query result tables.
        <replaceable class="parameter">option</replaceable>
        indicates which option is to be set. The semantics of
        <replaceable class="parameter">value</replaceable> vary depending
        on the selected option.  For some options, omitting <replaceable
        class="parameter">value</replaceable> causes the option to be toggled
        or unset, as described under the particular option.  If no such
        behavior is mentioned, then omitting
        <replaceable class="parameter">value</replaceable> just results in
        the current setting being displayed.
        </para>

        <para>
        <command>\pset</command> without any arguments displays the current status
        of all printing options.
        </para>

        <para>
        Adjustable printing options are:
        <variablelist>
          <varlistentry>
          <term><literal>border</literal></term>
          <listitem>
          <para>
          The <replaceable class="parameter">value</replaceable> must be a
          number. In general, the higher
          the number the more borders and lines the tables will have,
          but details depend on the particular format.
          In <acronym>HTML</acronym> format, this will translate directly
          into the <literal>border=...</literal> attribute.
          In most other formats only values 0 (no border), 1 (internal
          dividing lines), and 2 (table frame) make sense, and values above 2
          will be treated the same as <literal>border = 2</literal>.
          The <literal>latex</literal> and <literal>latex-longtable</literal>
          formats additionally allow a value of 3 to add dividing lines
          between data rows.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>columns</literal></term>
          <listitem>
          <para>
          Sets the target width for the <literal>wrapped</literal> format, and also
          the width limit for determining whether output is wide enough to
          require the pager or switch to the vertical display in expanded auto
          mode.
          Zero (the default) causes the target width to be controlled by the
          environment variable <envar>COLUMNS</envar>, or the detected screen width
          if <envar>COLUMNS</envar> is not set.
          In addition, if <literal>columns</literal> is zero then the
          <literal>wrapped</literal> format only affects screen output.
          If <literal>columns</literal> is nonzero then file and pipe output is
          wrapped to that width as well.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>expanded</literal> (or <literal>x</literal>)</term>
          <listitem>
          <para>
          If <replaceable class="parameter">value</replaceable> is specified it
          must be either <literal>on</literal> or <literal>off</literal>, which
          will enable or disable expanded mode, or <literal>auto</literal>.
          If <replaceable class="parameter">value</replaceable> is omitted the
          command toggles between the on and off settings.  When expanded mode
          is enabled, query results are displayed in two columns, with the
          column name on the left and the data on the right. This mode is
          useful if the data wouldn't fit on the screen in the
          normal <quote>horizontal</quote> mode.  In the auto setting, the
          expanded mode is used whenever the query output has more than one
          column and is wider than the screen; otherwise, the regular mode is
          used.  The auto setting is only
          effective in the aligned and wrapped formats.  In other formats, it
          always behaves as if the expanded mode is off.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>fieldsep</literal></term>
          <listitem>
          <para>
          Specifies the field separator to be used in unaligned output
          format. That way one can create, for example, tab- or
          comma-separated output, which other programs might prefer. To
          set a tab as field separator, type <literal>\pset fieldsep
          '\t'</literal>. The default field separator is
          <literal>'|'</literal> (a vertical bar).
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>fieldsep_zero</literal></term>
          <listitem>
          <para>
          Sets the field separator to use in unaligned output format to a zero
          byte.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>footer</literal></term>
          <listitem>
          <para>
          If <replaceable class="parameter">value</replaceable> is specified
          it must be either <literal>on</literal> or <literal>off</literal>
          which will enable or disable display of the table footer
          (the <literal>(<replaceable>n</replaceable> rows)</literal> count).
          If <replaceable class="parameter">value</replaceable> is omitted the
          command toggles footer display on or off.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>format</literal></term>
          <listitem>
          <para>
          Sets the output format to one of <literal>unaligned</literal>,
          <literal>aligned</literal>, <literal>wrapped</literal>,
          <literal>html</literal>, <literal>asciidoc</literal>,
          <literal>latex</literal> (uses <literal>tabular</literal>),
          <literal>latex-longtable</literal>, or
          <literal>troff-ms</literal>.
          Unique abbreviations are allowed.
          </para>

          <para><literal>unaligned</literal> format writes all columns of a row on one
          line, separated by the currently active field separator. This
          is useful for creating output that might be intended to be read
          in by other programs (for example, tab-separated or comma-separated
          format).
          </para>

          <para><literal>aligned</literal> format is the standard, human-readable,
          nicely formatted text output;  this is the default.
          </para>

          <para><literal>wrapped</literal> format is like <literal>aligned</literal> but wraps
          wide data values across lines to make the output fit in the target
          column width.  The target width is determined as described under
          the <literal>columns</literal> option.  Note that <application>psql</application> will
          not attempt to wrap column header titles; therefore,
          <literal>wrapped</literal> format behaves the same as <literal>aligned</literal>
          if the total width needed for column headers exceeds the target.
          </para>

          <para>
          The <literal>html</literal>, <literal>asciidoc</literal>, <literal>latex</literal>,
          <literal>latex-longtable</literal>, and <literal>troff-ms</literal>
          formats put out tables that are intended to
          be included in documents using the respective mark-up
          language. They are not complete documents! This might not be
          necessary in <acronym>HTML</acronym>, but in
          <application>LaTeX</application> you must have a complete
          document wrapper.  <literal>latex-longtable</literal>
          also requires the <application>LaTeX</application>
          <literal>longtable</literal> and <literal>booktabs</literal> packages.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>linestyle</literal></term>
          <listitem>
          <para>
          Sets the border line drawing style to one
          of <literal>ascii</literal>, <literal>old-ascii</literal>,
          or <literal>unicode</literal>.
          Unique abbreviations are allowed.  (That would mean one
          letter is enough.)
          The default setting is <literal>ascii</literal>.
          This option only affects the <literal>aligned</literal> and
          <literal>wrapped</literal> output formats.
          </para>

          <para><literal>ascii</literal> style uses plain <acronym>ASCII</acronym>
          characters.  Newlines in data are shown using
          a <literal>+</literal> symbol in the right-hand margin.
          When the <literal>wrapped</literal> format wraps data from
          one line to the next without a newline character, a dot
          (<literal>.</literal>) is shown in the right-hand margin of the first line,
          and again in the left-hand margin of the following line.
          </para>

          <para><literal>old-ascii</literal> style uses plain <acronym>ASCII</acronym>
          characters, using the formatting style used
          in <productname>PostgreSQL</productname> 8.4 and earlier.
          Newlines in data are shown using a <literal>:</literal>
          symbol in place of the left-hand column separator.
          When the data is wrapped from one line
          to the next without a newline character, a <literal>;</literal>
          symbol is used in place of the left-hand column separator.
          </para>

          <para><literal>unicode</literal> style uses Unicode box-drawing characters.
          Newlines in data are shown using a carriage return symbol
          in the right-hand margin.  When the data is wrapped from one line
          to the next without a newline character, an ellipsis symbol
          is shown in the right-hand margin of the first line, and
          again in the left-hand margin of the following line.
          </para>

          <para>
          When the <literal>border</literal> setting is greater than zero,
          the <literal>linestyle</literal> option also determines the
          characters with which the border lines are drawn.
          Plain <acronym>ASCII</acronym> characters work everywhere, but
          Unicode characters look nicer on displays that recognize them.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>null</literal></term>
          <listitem>
          <para>
          Sets the string to be printed in place of a null value.
          The default is to print nothing, which can easily be mistaken for
          an empty string. For example, one might prefer <literal>\pset null
          '(null)'</literal>.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>numericlocale</literal></term>
          <listitem>
          <para>
          If <replaceable class="parameter">value</replaceable> is specified
          it must be either <literal>on</literal> or <literal>off</literal>
          which will enable or disable display of a locale-specific character
          to separate groups of digits to the left of the decimal marker.
          If <replaceable class="parameter">value</replaceable> is omitted the
          command toggles between regular and locale-specific numeric output.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>pager</literal></term>
          <listitem>
          <para>
          Controls use of a pager program for query and <application>psql</application>
          help output.  If the environment variable <envar>PSQL_PAGER</envar>
          or <envar>PAGER</envar> is set, the output is piped to the
          specified program.  Otherwise a platform-dependent default program
          (such as <filename>more</filename>) is used.
          </para>

          <para>
          When the <literal>pager</literal> option is <literal>off</literal>, the pager
          program is not used. When the <literal>pager</literal> option is
          <literal>on</literal>, the pager is used when appropriate, i.e., when the
          output is to a terminal and will not fit on the screen.
          The <literal>pager</literal> option can also be set to <literal>always</literal>,
          which causes the pager to be used for all terminal output regardless
          of whether it fits on the screen.  <literal>\pset pager</literal>
          without a <replaceable class="parameter">value</replaceable>
          toggles pager use on and off.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>pager_min_lines</literal></term>
          <listitem>
          <para>
          If <literal>pager_min_lines</literal> is set to a number greater than the
          page height, the pager program will not be called unless there are
          at least this many lines of output to show. The default setting
          is 0.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>recordsep</literal></term>
          <listitem>
          <para>
          Specifies the record (line) separator to use in unaligned
          output format. The default is a newline character.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>recordsep_zero</literal></term>
          <listitem>
          <para>
          Sets the record separator to use in unaligned output format to a zero
          byte.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>tableattr</literal> (or <literal>T</literal>)</term>
          <listitem>
          <para>
          In <acronym>HTML</acronym> format, this specifies attributes
          to be placed inside the <sgmltag>table</sgmltag> tag.  This
          could for example be <literal>cellpadding</literal> or
          <literal>bgcolor</literal>. Note that you probably don't want
          to specify <literal>border</literal> here, as that is already
          taken care of by <literal>\pset border</literal>.
          If no
          <replaceable class="parameter">value</replaceable> is given,
          the table attributes are unset.
          </para>
          <para>
          In <literal>latex-longtable</literal> format, this controls
          the proportional width of each column containing a left-aligned
          data type.  It is specified as a whitespace-separated list of values,
          e.g. <literal>'0.2 0.2 0.6'</literal>.  Unspecified output columns
          use the last specified value.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>title</literal> (or <literal>C</literal>)</term>
          <listitem>
          <para>
          Sets the table title for any subsequently printed tables. This
          can be used to give your output descriptive tags. If no
          <replaceable class="parameter">value</replaceable> is given,
          the title is unset.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>tuples_only</literal> (or <literal>t</literal>)</term>
          <listitem>
          <para>
          If <replaceable class="parameter">value</replaceable> is specified
          it must be either <literal>on</literal> or <literal>off</literal>
          which will enable or disable tuples-only mode.
          If <replaceable class="parameter">value</replaceable> is omitted the
          command toggles between regular and tuples-only output.
          Regular output includes extra information such
          as column headers, titles, and various footers. In tuples-only
          mode, only actual table data is shown.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>unicode_border_linestyle</literal></term>
          <listitem>
          <para>
          Sets the border drawing style for the <literal>unicode</literal>
          line style to one of <literal>single</literal>
          or <literal>double</literal>.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>unicode_column_linestyle</literal></term>
          <listitem>
          <para>
          Sets the column drawing style for the <literal>unicode</literal>
          line style to one of <literal>single</literal>
          or <literal>double</literal>.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>unicode_header_linestyle</literal></term>
          <listitem>
          <para>
          Sets the header drawing style for the <literal>unicode</literal>
          line style to one of <literal>single</literal>
          or <literal>double</literal>.
          </para>
          </listitem>
          </varlistentry>
        </variablelist>
        </para>

        <para>
        Illustrations of how these different formats look can be seen in
        the <xref linkend="app-psql-examples"
        endterm="app-psql-examples-title"/> section.
        </para>

        <tip>
        <para>
        There are various shortcut commands for <command>\pset</command>. See
        <command>\a</command>, <command>\C</command>, <command>\f</command>,
        <command>\H</command>, <command>\t</command>, <command>\T</command>,
        and <command>\x</command>.
        </para>
        </tip>

        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\q</literal> or <literal>\quit</literal></term>
        <listitem>
        <para>
        Quits the <application>psql</application> program.
        In a script file, only execution of that script is terminated.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\qecho <replaceable class="parameter">text</replaceable> [ ... ] </literal></term>
        <listitem>
        <para>
        This command is identical to <command>\echo</command> except
        that the output will be written to the query output channel, as
        set by <command>\o</command>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\r</literal> or <literal>\reset</literal></term>
        <listitem>
        <para>
        Resets (clears) the query buffer.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\s [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <listitem>
        <para>
        Print <application>psql</application>'s command line history
        to <replaceable class="parameter">filename</replaceable>.
        If <replaceable class="parameter">filename</replaceable> is omitted,
        the history is written to the standard output (using the pager if
        appropriate).  This command is not available
        if <application>psql</application> was built
        without <application>Readline</application> support.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\set [ <replaceable class="parameter">name</replaceable> [ <replaceable class="parameter">value</replaceable> [ ... ] ] ]</literal></term>

        <listitem>
        <para>
        Sets the <application>psql</application> variable <replaceable
        class="parameter">name</replaceable> to <replaceable
        class="parameter">value</replaceable>, or if more than one value
        is given, to the concatenation of all of them. If only one
        argument is given, the variable is set to an empty-string value. To
        unset a variable, use the <command>\unset</command> command.
        </para>

        <para><command>\set</command> without any arguments displays the names and values
        of all currently-set <application>psql</application> variables.
        </para>

        <para>
        Valid variable names can contain letters, digits, and
        underscores. See the section <xref
        linkend="app-psql-variables"
        endterm="app-psql-variables-title"/> below for details.
        Variable names are case-sensitive.
        </para>

        <para>
        Certain variables are special, in that they
        control <application>psql</application>'s behavior or are
        automatically set to reflect connection state.  These variables are
        documented in <xref linkend="app-psql-variables"
        endterm="app-psql-variables-title"/>, below.
        </para>

        <note>
        <para>
        This command is unrelated to the <acronym>SQL</acronym>
        command <xref linkend="sql-set"/>.
        </para>
        </note>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\setenv <replaceable class="parameter">name</replaceable> [ <replaceable class="parameter">value</replaceable> ]</literal></term>

        <listitem>
        <para>
        Sets the environment variable <replaceable
        class="parameter">name</replaceable> to <replaceable
        class="parameter">value</replaceable>, or if the
        <replaceable class="parameter">value</replaceable> is
        not supplied, unsets the environment variable. Example:
<programlisting>
testdb=&gt; <userinput>\setenv PAGER less</userinput>
testdb=&gt; <userinput>\setenv LESS -imx4F</userinput>
</programlisting></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\sf[+] <replaceable class="parameter">function_description</replaceable> </literal></term>

        <listitem>
        <para>
         This command fetches and shows the definition of the named function or procedure,
         in the form of a <command>CREATE OR REPLACE FUNCTION</command> or
         <command>CREATE OR REPLACE PROCEDURE</command> command.
         The definition is printed to the current query output channel,
         as set by <command>\o</command>.
        </para>

        <para>
         The target function can be specified by name alone, or by name
         and arguments, for example <literal>foo(integer, text)</literal>.
         The argument types must be given if there is more
         than one function of the same name.
        </para>

        <para>
         If <literal>+</literal> is appended to the command name, then the
         output lines are numbered, with the first line of the function body
         being line 1.
        </para>

        <para>
        Unlike most other meta-commands, the entire remainder of the line is
        always taken to be the argument(s) of <command>\sf</command>, and neither
        variable interpolation nor backquote expansion are performed in the
        arguments.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\sv[+] <replaceable class="parameter">view_name</replaceable> </literal></term>

        <listitem>
         <para>
          This command fetches and shows the definition of the named view,
          in the form of a <command>CREATE OR REPLACE VIEW</command> command.
          The definition is printed to the current query output channel,
          as set by <command>\o</command>.
         </para>

         <para>
          If <literal>+</literal> is appended to the command name, then the
          output lines are numbered from 1.
         </para>

        <para>
        Unlike most other meta-commands, the entire remainder of the line is
        always taken to be the argument(s) of <command>\sv</command>, and neither
        variable interpolation nor backquote expansion are performed in the
        arguments.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\t</literal></term>
        <listitem>
        <para>
        Toggles the display of output column name headings and row count
        footer. This command is equivalent to <literal>\pset
        tuples_only</literal> and is provided for convenience.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\T <replaceable class="parameter">table_options</replaceable></literal></term>
        <listitem>
        <para>
        Specifies attributes to be placed within the
        <sgmltag>table</sgmltag> tag in <acronym>HTML</acronym>
        output format. This command is equivalent to <literal>\pset
        tableattr <replaceable
        class="parameter">table_options</replaceable></literal>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
       <term><literal>\timing [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> ]</literal></term>
        <listitem>
        <para>
         With a parameter, turns displaying of how long each SQL statement
         takes on or off.  Without a parameter, toggles the display between
         on and off.  The display is in milliseconds; intervals longer than
         1 second are also shown in minutes:seconds format, with hours and
         days fields added if needed.
        </para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\unset <replaceable class="parameter">name</replaceable></literal></term>

        <listitem>
        <para>
        Unsets (deletes) the <application>psql</application> variable <replaceable
        class="parameter">name</replaceable>.
        </para>

        <para>
        Most variables that control <application>psql</application>'s behavior
        cannot be unset; instead, an <literal>\unset</literal> command is interpreted
        as setting them to their default values.
        See <xref linkend="app-psql-variables"
        endterm="app-psql-variables-title"/>, below.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\w</literal> or <literal>\write</literal> <replaceable class="parameter">filename</replaceable></term>
        <term><literal>\w</literal> or <literal>\write</literal> <literal>|</literal><replaceable class="parameter">command</replaceable></term>
        <listitem>
        <para>
        Writes the current query buffer to the file <replaceable
        class="parameter">filename</replaceable> or pipes it to the shell
        command <replaceable class="parameter">command</replaceable>.
        If the current query buffer is empty, the most recently executed query
        is written instead.
        </para>

        <para>
        If the argument begins with <literal>|</literal>, then the entire remainder
        of the line is taken to be
        the <replaceable class="parameter">command</replaceable> to execute,
        and neither variable interpolation nor backquote expansion are
        performed in it.  The rest of the line is simply passed literally to
        the shell.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\watch [ <replaceable class="parameter">seconds</replaceable> ]</literal></term>
        <listitem>
        <para>
        Repeatedly execute the current query buffer (as <literal>\g</literal> does)
        until interrupted or the query fails.  Wait the specified number of
        seconds (default 2) between executions.  Each query result is
        displayed with a header that includes the <literal>\pset title</literal>
        string (if any), the time as of query start, and the delay interval.
        </para>
        <para>
        If the current query buffer is empty, the most recently sent query
        is re-executed instead.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\x [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> | <replaceable class="parameter">auto</replaceable> ]</literal></term>
        <listitem>
        <para>
        Sets or toggles expanded table formatting mode. As such it is equivalent to
        <literal>\pset expanded</literal>.
       </para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\z [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists tables, views and sequences with their
        associated access privileges.
        If a <replaceable class="parameter">pattern</replaceable> is
        specified, only tables, views and sequences whose names match the
        pattern are listed.
        </para>

        <para>
        This is an alias for <command>\dp</command> (<quote>display
        privileges</quote>).
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\! [ <replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        With no argument, escapes to a sub-shell; <application>psql</application>
        resumes when the sub-shell exits.  With an argument, executes the
        shell command <replaceable class="parameter">command</replaceable>.
        </para>

        <para>
        Unlike most other meta-commands, the entire remainder of the line is
        always taken to be the argument(s) of <command>\!</command>, and neither
        variable interpolation nor backquote expansion are performed in the
        arguments.  The rest of the line is simply passed literally to the
        shell.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\? [ <replaceable class="parameter">topic</replaceable> ]</literal></term>
        <listitem>
        <para>
        Shows help information. The optional
        <replaceable class="parameter">topic</replaceable> parameter
        (defaulting to <literal>commands</literal>) selects which part of <application>psql</application> is
        explained: <literal>commands</literal> describes <application>psql</application>'s
        backslash commands; <literal>options</literal> describes the command-line
        options that can be passed to <application>psql</application>;
        and <literal>variables</literal> shows help about <application>psql</application> configuration
        variables.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\;</literal></term>
        <listitem>
        <para>
        Backslash-semicolon is not a meta-command in the same way as the
        preceding commands; rather, it simply causes a semicolon to be
        added to the query buffer without any further processing.
        </para>

        <para>
        Normally, <application>psql</application> will dispatch a SQL command to the
        server as soon as it reaches the command-ending semicolon, even if
        more input remains on the current line.  Thus for example entering
<programlisting>
select 1; select 2; select 3;
</programlisting>
        will result in the three SQL commands being individually sent to
        the server, with each one's results being displayed before
        continuing to the next command.  However, a semicolon entered
        as <literal>\;</literal> will not trigger command processing, so that the
        command before it and the one after are effectively combined and
        sent to the server in one request.  So for example
<programlisting>
select 1\; select 2\; select 3;
</programlisting>
        results in sending the three SQL commands to the server in a single
        request, when the non-backslashed semicolon is reached.
        The server executes such a request as a single transaction,
        unless there are explicit <command>BEGIN</command>/<command>COMMIT</command>
        commands included in the string to divide it into multiple
        transactions.  (See <xref linkend="protocol-flow-multi-statement"/>
        for more details about how the server handles multi-query strings.)
        <application>psql</application> prints only the last query result
        it receives for each request; in this example, although all
        three <command>SELECT</command>s are indeed executed, <application>psql</application>
        only prints the <literal>3</literal>.
        </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </para>
____________________________________________________________________________-->
    <para>
    可以使用下列元命令：

    <variablelist>
      <varlistentry>
        <term><literal>\a</literal></term>
        <listitem>
        <para>
        如果当前的表输出格式是非对齐的，则切换成对齐格式。如果不是非对齐格式，则设置成非对齐格式。保留这个命令是为了向后兼容性。更一般的方案请见<command>\pset</command>。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\c</literal> or <literal>\connect [ -reuse-previous=<replaceable class="parameter">on|off</replaceable> ] [ <replaceable class="parameter">dbname</replaceable> [ <replaceable class="parameter">username</replaceable> ] [ <replaceable class="parameter">host</replaceable> ] [ <replaceable class="parameter">port</replaceable> ] | <replaceable class="parameter">conninfo</replaceable> ]</literal></term>
        <listitem>
        <para>
        与一台<productname>PostgreSQL</productname>服务器建立一个新连接。可以使用位置语法指定要使用的连接参数，或者使用<xref linkend="libpq-connstring"/>中详细介绍的<replaceable>conninfo</replaceable>连接串。
        </para>

        <para>
        在省略了数据库名、用户、主机或者端口的命令中，新的连接将会重用之前一个连接的值。默认情况下，前一个连接的值将会被重用，除非给出了一个<replaceable>conninfo</replaceable>串。给出第一个参数<literal>-reuse-previous=on</literal>或者<literal>-reuse-previous=off</literal>可以覆盖默认行为。当这个命令既没有指定一个参数也没有重用它时，将使用<application>libpq</application>的默认值。把<replaceable class="parameter">dbname</replaceable>、<replaceable class="parameter">username</replaceable>、<replaceable class="parameter">host</replaceable>或者<replaceable class="parameter">port</replaceable>中的任何一个指定为<literal>-</literal>等价于省略该参数。
        </para>

        <para>
        如果新连接成功地被建立，之前的连接会被关闭。如果连接尝试失败（错误的用户名、访问被拒绝等），只有在<application>psql</application>处于交互模式的情况下才会保留之前的连接。当执行一个非交互式脚本时出现连接尝试失败，处理将被立即停止，并且报出一个错误。这种区别一方面可以帮助用户发现打字错误，另一方面也可以作为一种安全机制防止脚本在错误的数据库上执行动作。
        </para>

        <para>
        例子：
        </para>
<programlisting>
=&gt; \c mydb myuser host.dom 6432
=&gt; \c service=foo
=&gt; \c "host=localhost port=5432 dbname=mydb connect_timeout=10 sslmode=disable"
=&gt; \c postgresql://tom@localhost/mydb?application_name=myapp
</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\C [ <replaceable class="parameter">title</replaceable> ]</literal></term>
        <listitem>
        <para>
        设置查询结果的任何表的标题，或者重置这类标题。这个命令等效于<literal>\pset title <replaceable class="parameter">title</replaceable></literal>（这个命令的名称来自于<quote>caption</quote>，因为它之前只被用来在<acronym>HTML</acronym>表格中设置标题）。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>\cd [ <replaceable>directory</replaceable> ]</literal></term>
       <listitem>
        <para>
         把当前工作目录改为<replaceable>directory</replaceable>。如果不带参数，则切换到当前用户的主目录。
        </para>

        <tip>
         <para>
          要打印当前的工作目录，可以使用<literal>\! pwd</literal>。
         </para>
        </tip>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\conninfo</literal></term>
        <listitem>
        <para>
        输出有关当前数据库连接的信息。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry id="app-psql-meta-commands-copy">
        <term><literal>\copy { <replaceable class="parameter">table</replaceable> [ ( <replaceable class="parameter">column_list</replaceable> ) ] | ( <replaceable class="parameter">query</replaceable> ) }
        { <literal>from</literal> | <literal>to</literal> }
        { <replaceable class="parameter">'filename'</replaceable> | program <replaceable class="parameter">'command'</replaceable> | stdin | stdout | pstdin | pstdout }
        [ [ with ] ( <replaceable class="parameter">option</replaceable> [, ...] ) ]</literal></term>

        <listitem>
        <para>
        执行一次前端拷贝。这个操作会运行一个<acronym>SQL</acronym> <xref linkend="sql-copy"/>命令，不过不是服务器读取或者写入指定的文件，而是由<application>psql</application>读写文件并且把数据从本地文件系统导向服务器。这意味着文件的可访问性和权限是本地用户的而非服务器上的，并且不需要 SQL 超级用户特权。
        </para>

        <para>
        当<literal>program</literal>被指定时，<replaceable class="parameter">command</replaceable>被<application>psql</application>执行并且传给<replaceable class="parameter">command</replaceable>的数据或者从<replaceable class="parameter">command</replaceable>传出的数据会在服务器和客户端之间流动。同样地，执行特权是本地用户的而非服务器上的，并且不需要 SQL 超级用户特权。
        </para>

        <para>
        对于<literal>\copy ... from stdin</literal>，数据行从发出该命令的同一来源读取，一直到读到<literal>\.</literal>或者数据流到达<acronym>EOF</acronym>。这个选项可以用来填充内嵌在一个 SQL 脚本文件中的表。对于<literal>\copy ... to stdout</literal>，输出被发送到与<application>psql</application>命令输出相同的位置，并且<literal>COPY <replaceable>count</replaceable></literal>命令的状态不会被打印（因为它会被一个数据行搞乱）。要读/写<application>psql</application>的标准输入或者输出而不管当前命令的来源或者<literal>\o</literal>选项，可以写<literal>from pstdin</literal>或者<literal>to pstdout</literal>。
        </para>

        <para>
        这个命令的语法和<acronym>SQL</acronym> <xref linkend="sql-copy"/>命令类似。所有除开数据来源/目的地的选项都和<xref linkend="sql-copy"/>指定的一样。因此，<command>\copy</command>元命令由特殊的解析规则。与大部分其他元命令不同，该行的所有剩余部分总是会被当做<command>\copy</command>的参数，并且在参数中不会执行变量篡改以及反引号展开。
        </para>

        <tip>
        <para>
        获得与<literal>\copy ... to</literal>相同结果的另一种方法是使用<acronym>SQL</acronym> <literal>COPY ... TO STDOUT</literal>
        命令并使用<literal>\g <replaceable>filename</replaceable></literal>或<literal>\ g | <replaceable>program </replaceable></literal>终止它。
        与<literal>\copy</literal>不同，此方法允许命令跨越多行; 此外，可以使用变量插值和反引号扩展。

        </para>
        </tip>

        <tip>
        <para>
        这些操作不如带有文件或程序数据源或目标的<acronym>SQL</acronym> <command>COPY</command>命令有效，
        因为所有数据都必须通过客户端/服务器连接。 对于大量数据，<acronym>SQL</acronym>命令可能更可取。
        </para>
        </tip>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\copyright</literal></term>
        <listitem>
        <para>
        显示<productname>PostgreSQL</productname>的版权以及发布条款。
        </para>
        </listitem>
      </varlistentry>
      
      <varlistentry id="app-psql-meta-commands-crosstabview">
        <term><literal>\crosstabview [
            <replaceable class="parameter">colV</replaceable>
            [ <replaceable class="parameter">colH</replaceable>
            [ <replaceable class="parameter">colD</replaceable>
            [ <replaceable class="parameter">sortcolH</replaceable>
            ] ] ] ] </literal></term>
        <listitem>
        <para>
        执行当前的查询缓冲区（像<literal>\g</literal>那样）并且在一个交叉表格子中显示结果。该查询必须返回至少三列。由<replaceable class="parameter">colV</replaceable>标识的输出列会成为垂直页眉并且<replaceable class="parameter">colH</replaceable>所标识的输出列会成为水平页眉。<replaceable class="parameter">colD</replaceable>标识显示在格子中的输出列。<replaceable class="parameter">sortcolH</replaceable>标识用于水平页眉的可选的排序列。
        </para>

        <para>
        每一个列说明可以是一个列编号（从 1 开始）或者一个列名。常用的 SQL 大小写折叠和引用规则适用于列名。如果省略，<replaceable class="parameter">colV</replaceable>被当做列 1 并且<replaceable class="parameter">colH</replaceable>被当做列 2。<replaceable class="parameter">colH</replaceable>必须和<replaceable class="parameter">colV</replaceable>不同。如果没有指定<replaceable class="parameter">colD</replaceable>，那么在查询结果中必须正好有三列，并且<replaceable class="parameter">colV</replaceable>和<replaceable class="parameter">colH</replaceable>之外的那一列会被当做<replaceable class="parameter">colD</replaceable>。
        </para>

        <para>
        垂直页眉显示为最左边的列，它包含列<replaceable class="parameter">colV</replaceable>中找到的值，值的顺序和查询结果中的顺序相同，但是重复值会被移除。
        </para>

        <para>
        水平页眉显示为第一行，它包含列<replaceable class="parameter">colH</replaceable>中找到的值，其中的重复值被移除。默认情况下，这些值会以查询结果中相同的顺序出现。但是如果给出了可选的<replaceable class="parameter">sortcolH</replaceable>参数，它标识一个值必须为整数编号的列，并且来自<replaceable class="parameter">colH</replaceable>的值将会根据相应的<replaceable class="parameter">sortcolH</replaceable>值排序后出现在水平页眉中。
        </para>

        <para>
        在交叉表格子中，对于<replaceable class="parameter">colH</replaceable>的每一个可区分的值<literal>x</literal>以及<replaceable class="parameter">colV</replaceable>的每一个可区分的值<literal>y</literal>，位于交叉点<literal>(x,y)</literal>的单元包含<replaceable class="parameter">colH</replaceable>值为<literal>x</literal>且<replaceable class="parameter">colV</replaceable>值为<literal>y</literal>的查询结果行中<literal>colD</literal>列的值。如果没有这样的行，则该单元为空。如果有多个这样的行，则会报告一个错误。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\d[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        对于每一个匹配<replaceable class="parameter">pattern</replaceable>的关系（表、视图、物化视图、索引、序列或者外部表）或者组合类型，显示所有的列、它们的类型、表空间（如果非默认表空间）以及任何诸如<literal>NOT NULL</literal>或者默认值的特殊属性。相关的索引、约束、规则以及触发器也会被显示。对于外部表，还会显示相关的外部服务器（下文的<xref linkend="app-psql-patterns" endterm="app-psql-patterns-title"/>中定义了<quote>匹配模式</quote>）。
        </para>

        <para>
        对于某些类型的关系，<literal>\d</literal>会为每一列显示额外的信息：对于序列会显示列值，对于索引显示被索引的表达式，对于外部表显示外部数据包装器选项。
        </para>

        <para>
        命令形式<literal>\d+</literal>是一样的，不过会显示更多信息：与该表的列相关的任何注释，表中是否存在 OID，如果关系是视图则显示视图定义，非默认的<link linkend="sql-createtable-replica-identity">replica identity</link>设置。
        </para>

        <para>
        默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。
        </para>

        <note>
        <para>
        如果使用<command>\d</command>但不带有<replaceable class="parameter">pattern</replaceable>参数，它等价于<command>\dtvmsE</command>，后者将显示所有可见的表、视图、物化视图、序列和外部表的列表。这纯粹是一种便利措施。
        </para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\da[S] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        列出聚集函数，以及它们的返回类型和它们所操作的数据类型。如果指定了<replaceable class="parameter">pattern</replaceable>，只显示名称匹配该模式的聚集。默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。
        </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><literal>\dA[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        列出访问方法。如果指定了<replaceable class="parameter">pattern</replaceable>，只显示名称匹配该模式的访问方法。如果在命令名称后面追加<literal>+</literal>，则与访问方法相关的处理器函数和描述也会和访问方法本身一起被列出。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\db[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        列出表空间。如果指定了<replaceable class="parameter">pattern</replaceable>，只显示名称匹配该模式的表空间。如果在命令名称后面追加<literal>+</literal>，则与表空间相关的选项、磁盘上的尺寸、权限以及描述也会和表空间本身一起被列出。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dc[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出字符集编码之间的转换。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的转换。默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。如果在命令名称后面追加<literal>+</literal>，则每一个对象相关的描述也会被列出。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dC[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出类型转换。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出源类型和目标类型匹配该模式的转换。如果在命令名称后面追加<literal>+</literal>，则每一个对象相关的描述也会被列出。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dd[S] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        显示<literal>约束</literal>、<literal>操作符类</literal>、<literal>操作符族</literal>、<literal>规则</literal>以及<literal>触发器</literal>类型对象的描述。所有其他注释可以通过那些对象类型相应的反斜线命令查看。
        </para>

        <para><literal>\dd</literal>显示匹配<replaceable class="parameter">pattern</replaceable>的对象的描述，如果没有给出参数则显示合适类型的可见对象的描述。但是在任一种情况下都只列出具有描述的对象。默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。
        </para>

        <para>
        对象的描述可以用<acronym>SQL</acronym>命令<xref linkend="sql-comment"/>创建。
       </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dD[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出域。如果指定了<replaceable class="parameter">pattern</replaceable>，只有名称匹配该模式的域会被显示。默认情况下，只有用户创建的对象会被显示，可以提供一个模式或者<literal>S</literal>修饰符以包括系统对象。如果<literal>+</literal>被追加到命令名称上，每一个被列出的对象会带有其相关的权限和描述。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\ddp [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出默认的访问特权设置。对那些默认特权设置已经被改变得与内建默认值不同的角色（以及模式，如果适用），为每一个角色（以及模式）显示一项。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出角色名称或者模式名称匹配该模式的项。
        </para>

        <para>
        <xref linkend="sql-alterdefaultprivileges"/>命令被用来设置默认访问特权。在<xref linkend="sql-grant"/>中解释了显示的特权的含义。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dE[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\di[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\dm[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\ds[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\dt[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <term><literal>\dv[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        在这一组命令中，字母<literal>E</literal>、<literal>i</literal>、<literal>m</literal>、<literal>s</literal>、<literal>t</literal>和<literal>v</literal>分别对应着外部表、索引、物化视图、序列、表和视图。你可以以任何顺序指定这些字母中的任意一个或者多个，这样可以得到这些类型的对象的列表。例如，<literal>\dit</literal>会列出索引和表。如果在命令名称后面追加<literal>+</literal>，则每一个对象的物理尺寸以及相关的描述也会被列出。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的对象。默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\des[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出外部服务器（助记：<quote>外部服务器</quote>）。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的那些服务器。如果使用了<literal>\des+</literal>形式，将显示每个服务器的完整描述，包括该服务器的 ACL、类型、版本、选项和描述。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\det[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出外部表（助记：<quote>外部表</quote>）。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出表名称或者模式名称匹配该模式的项。如果使用了<literal>\det+</literal>选项，一般选项和外部表描述也会被显示。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\deu[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出用户映射（助记：<quote>外部用户</quote>）。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出用户名匹配该模式的那些映射。如果使用了<literal>\deu+</literal>形式，有关每个映射的额外信息也会被显示。
        </para>

        <caution>
        <para>
        <literal>\deu+</literal>可能也会显示远程用户的用户名和口令，所以要小心不要把它们泄露出去。
        </para>
        </caution>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dew[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出外部数据包装器（助记：<quote>外部包装器</quote>）。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的那些外部数据包装器。如果使用了<literal>\dew+</literal>形式，外部数据包装器的 ACL、选项和描述也会被显示。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\df[anptwS+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        列出函数，以及它们的结果数据类型、参数数据类型和函数类型，函数类型被分为<quote>agg</quote>（聚集）、<quote>normal</quote>、<quote>procedure</quote>、<quote>trigger</quote>以及<quote>window</quote>。如果要只显示指定类型的函数，可以在该命令上增加相应的字母<literal>a</literal>、<literal>n</literal>、<literal>p</literal>、<literal>t</literal>或者<literal>w</literal>。如果指定了<replaceable class="parameter">pattern</replaceable>，只显示名称匹配该模式的函数。默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。如果使用了<literal>\df+</literal>形式，则有关每个函数的额外信息也会被显示，包括易失性、并行安全性、拥有者、安全性分类、访问特权、语言、源代码和描述。
        </para>

        <tip>
        <para>
        如果要查找接收指定数据类型参数或者返回指定类型值的函数，可以使用分页器的搜索能力来滚动显示<literal>\df</literal>输出。
        </para>
        </tip>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dF[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         列出文本搜索配置。如果指定了<replaceable class="parameter">pattern</replaceable>，只显示名称匹配该模式的配置。如果使用了<literal>\dF+</literal>形式，每种配置的完整描述也会被显示，包括底层的文本搜索解析器和用于每一种解析器记号类型的字典列表。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFd[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         列出文本搜索字典。如果指定了<replaceable class="parameter">pattern</replaceable>，只显示名称匹配该模式的字典。如果使用了<literal>\dFd+</literal>形式，有关每一种选中的字典的额外信息也会被显示，包括底层的文本搜索模板和选项值。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFp[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         列出文本搜索解析器。如果指定了<replaceable class="parameter">pattern</replaceable>，只显示名称匹配该模式的解析器。如果使用了<literal>\dFp+</literal>形式，每一种解析器的完整描述也会被显示，包括底层的函数和可识别的记号类型列表。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFt[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         列出文本搜索模板。如果指定了<replaceable class="parameter">pattern</replaceable>，只显示名称匹配该模式的模板。如果使用了<literal>\dFt+</literal>形式，每一种模板有关的额外信息也会被显示，包括底层的函数名称。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dg[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出数据库角色（因为<quote>用户</quote>和<quote>组</quote>的概念已经被统一成<quote>角色</quote>，这个命令现在等价于<literal>\du</literal>）。默认情况下只会显示用户创建的角色，提供一个模式或者<literal>S</literal>修饰符可以把系统角色包括在内。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的那些角色。如果使用了<literal>\dg+</literal>形式，有关每种角色的额外信息也将被显示，当前这种形式会为角色增加显示注释。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dl</literal></term>
        <listitem>
        <para>
        这是<command>\lo_list</command>的一个别名，它显示大对象的列表。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dL[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出过程语言。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的语言。默认情况下只会显示用户创建的语言，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。如果向命令名称追加<literal>+</literal>，则每一种语言会和它的调用处理器、验证器、访问特权以及它是否为系统对象一起列出。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dn[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        列出模式（名字空间）。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的模式。默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。如果向命令名称追加<literal>+</literal>，每个对象会与它相关的权限及描述（如果有）一起被列出。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\do[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出操作符及其操作数和结果类型。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的操作符。默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。如果向命令名称追加<literal>+</literal>，有关每个操作符的额外信息也将被显示，当前只包括底层函数的名称。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dO[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出排序规则。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的排序规则。默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。如果向命令名称追加<literal>+</literal>，每个排序规则将和它相关的描述（如果有）一起被列出。注意只有可用于当前数据库编码的排序规则会被显示，因此在同一个安装下的不同数据库中执行此命令可能会得到不同的结果。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dp [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出表、视图和序列，包括与它们相关的访问特权。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的表、视图以及序列。
        </para>

        <para>
        <xref linkend="sql-grant"/>和<xref linkend="sql-revoke"/>命令被用来设置访问特权。所显示的特权的含义在<xref linkend="sql-grant"/>中有介绍。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\drds [ <link linkend="app-psql-patterns"><replaceable class="parameter">role-pattern</replaceable></link> [ <link linkend="app-psql-patterns"><replaceable class="parameter">database-pattern</replaceable></link> ] ]</literal></term>
        <listitem>
        <para>
        列出已定义的配置设置。这些设置可以是针对角色的、针对数据库的或者同时针对两者的。<replaceable>role-pattern</replaceable>和<replaceable>database-pattern</replaceable>分别被用来选择要列出的角色和数据库。如果省略它们或者指定了<literal>*</literal>，则会列出所有设置，分别会包括针对角色和针对数据库的设置。
        </para>

        <para>
        <xref linkend="sql-alterrole"/>以及<xref linkend="sql-alterdatabase"/>命令可以用来定义一个角色以及一个数据库的配置设置。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dRp[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出复制的publication。如果指定有<replaceable class="parameter">pattern</replaceable>，只有那些名称匹配该模式的publication会被列出。如果<literal>+</literal>被追加到命令的名称上，与每个publication相关的表也会被显示。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dRs[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出复制的订阅。如果指定有<replaceable class="parameter">pattern</replaceable>，只有那些名字匹配该模式的订阅才会被列出。如果<literal>+</literal>被追加到命令的名称上，订阅的额外属性会被显示。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dT[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出数据类型。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的类型。如果向命令名称追加<literal>+</literal>，每一种类型、其内部名称和尺寸、允许的值（如果是一种<type>enum</type>类型）以及相关权限会被一同列出。默认情况下只会显示用户创建的对象，提供一个模式或者<literal>S</literal>修饰符可以把系统对象包括在内。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\du[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出数据库角色（因为<quote>用户</quote>和<quote>组</quote>的概念已经被统一成<quote>角色</quote>，这个命令现在等价于<literal>\dg</literal>）。默认情况下只会显示用户创建的角色，提供一个模式或者<literal>S</literal>修饰符可以把系统角色包括在内。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的那些角色。如果使用了<literal>\du+</literal>形式，有关每一种角色的额外信息也会被显示，当前只会多显示角色的注释。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dx[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出已安装的扩展。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的那些扩展。如果使用了<literal>\dx+</literal>形式，所有属于每个匹配扩展的对象会被列出。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dy[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出事件触发器。如果指定了<replaceable class="parameter">pattern</replaceable>，只列出名称匹配该模式的事件触发器。如果在命令名称后面加上<literal>+</literal>，还会为每个列出的对象显示其相关的描述。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\e</literal>或<literal>\edit</literal> <literal> <optional> <replaceable class="parameter">filename</replaceable> </optional> <optional> <replaceable class="parameter">line_number</replaceable> </optional> </literal></term>

        <listitem>
        <para>
        如果指定了<replaceable class="parameter">filename</replaceable>，则它是被编辑的文件，在编辑器退出后，该文件的内容会被拷贝到当前查询缓冲区中。如果没有给定<replaceable class="parameter">filename</replaceable>，当前查询缓冲区会被拷贝到一个临时文件中，并且接着以相同的方式编辑。或者，如果当前查询缓冲区为空，则最近被执行的查询会被拷贝到一个临时文件并且以同样的方式编辑。
        </para>

        <para>
        然后会根据<application>psql</application>的一般规则重新解析查询缓冲区的新内容，把整个缓冲区当作一个单一行来处理。任何完整的查询都会被立即执行，也就是说，如果查询缓冲区包含一个分号或者以一个分号结尾，则到分号处为止的所有东西都会被执行。剩下的东西会在查询缓冲区中等待，输入分号或者<literal>\g</literal>会把它发送出去，输入<literal>\r</literal>会通过清除查询缓冲区来取消它。把缓冲区当作单一行主要会影响元命令：缓冲区中在一个元命令之后的任何东西都将被当作该元命令的参数，即便元命令之后的内容跨越多行也是如此。（因此不能以这种方式来制作使用元命令的脚本。应该使用<command>\i</command>。）
        </para>

        <para>
        如果指定了一个行号，<application>psql</application>将会把游标（注意不是服务器端的游标）定位到文件或者查询缓冲区的指定行上。注意如果给出了一个全是数字的参数，<application>psql</application>就会假定它是行号而不是文件名。
        </para>

        <tip>
        <para>
        关于如何配置以及自定义编辑器，请见<xref linkend="app-psql-environment" endterm="app-psql-environment-title"/>。
        </para>
        </tip>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\echo <replaceable class="parameter">text</replaceable> [ ... ]</literal></term>
        <listitem>
        <para>
        把参数打印到标准输出，参数之间用一个空格分隔，最后加上一个新行。这可以用来在脚本的输出中间混入信息，例如：
<programlisting>
=&gt; <userinput>\echo `date`</userinput>
Tue Oct 26 21:40:57 CEST 1999
</programlisting>
        如果第一个参数是一个没有加引号的<literal>-n</literal>，则不会加上最后的新行。
        </para>

        <tip>
        <para>
        如果使用<command>\o</command>命令来重定向查询的输出，你可能希望使用<command>\qecho</command>来取代这个命令。
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ef <optional> <replaceable class="parameter">function_description</replaceable> <optional>  <replaceable class="parameter">line_number</replaceable> </optional> </optional> </literal></term>

        <listitem>
        <para>
         这个命令会以一个<command>CREATE OR REPLACE FUNCTION</command>或<command>CREATE OR REPLACE PROCEDURE</command>命令的形式取出并且编辑指定函数或过程的定义。编辑的方式与<literal>\edit</literal>完全相同。在编辑器退出后，更新过的命令将在查询缓冲区中等待，可以键入分号或者<literal>\g</literal>把它发出，也可以用<literal>\r</literal>取消之。
        </para>

        <para>
         目标函数可以单独用名称或者用名称和参数（例如<literal>foo(integer, text)</literal>）来指定。如果有多于一个函数具有同样的名称，则必须给出参数的类型。
        </para>

        <para>
         如果没有指定函数，将会给出一个空白的<command>CREATE FUNCTION</command>模板来编辑。
        </para>

        <para>
        如果指定了一个行号，<application>psql</application>将把游标定位在该函数体的指定行上（注意函数体通常不是开始于文件的第一行）。
        </para>

        <para>
        和大部分其他元命令不同，该行的整个剩余部分总是会被当作<command>\ef</command>的参数，并且在参数中不会执行变量篡改以及反引号展开。
        </para>

        <tip>
        <para>
        有关如何配置和自定义编辑器可见<xref linkend="app-psql-environment" endterm="app-psql-environment-title"/>。
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\encoding [ <replaceable class="parameter">encoding</replaceable> ]</literal></term>

        <listitem>
        <para>
        设置客户端字符集编码。如果没有参数，这个命令会显示当前的编码。
        </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><literal>\errverbose</literal></term>

        <listitem>
        <para>
        以最详细的程度重复最近的服务器错误消息，就好像<varname>VERBOSITY</varname>被设置为<literal>verbose</literal>且<varname>SHOW_CONTEXT</varname>被设置为<literal>always</literal>。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ev <optional> <replaceable class="parameter">view_name</replaceable> <optional>  <replaceable class="parameter">line_number</replaceable> </optional> </optional> </literal></term>

        <listitem>
        <para>
         这个命令会以一个<command>CREATE OR REPLACE VIEW</command>的形式取出并且编辑指定函数的定义。编辑的方式与<literal>\edit</literal>完全相同。在编辑器退出后，更新过的命令将在查询缓冲区中等待，可以键入分号或者<literal>\g</literal>把它发出，也可以用<literal>\r</literal>取消之。
        </para>

        <para>
         如果没有指定函数，将会给出一个空白的<command>CREATE VIEW</command>模板来编辑。
        </para>

        <para>
         如果指定了一个行号，<application>psql</application>将把游标定位在该视图定义的指定行上。
        </para>

        <para>
        和大部分其他元命令不同，该行的整个剩余部分总是会被当作<command>\ev</command>的参数，并且在参数中不会执行变量篡改以及反引号展开。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\f [ <replaceable class="parameter">string</replaceable> ]</literal></term>

        <listitem>
        <para>
        设置用于非对齐查询输出的域分隔符。默认值是竖线（<literal>|</literal>）。它等效于<command>\pset fieldsep</command>。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\g [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <term><literal>\g [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        把当前查询缓冲区发送给服务器执行。如果给出一个参数，查询的输出将被写到提到的文件或者用管道导向给定的shell命令，而不是按照惯常显示出来。只有该查询成功地返回零或更多个元组时才会写文件或命令，如果查询失败或者不是一个数据返回SQL命令，则不会写文件或者导向shell命令。
        </para>
        <para>
        如果当前查询缓冲区为空，则重新执行最近一次被发送的查询。除了这种行为之外，没有参数的<literal>\g</literal>实际上等效于一个分号。一个带有参数的<literal>\g</literal>是<command>\o</command>命令的一种<quote>一次性</quote>选择。
        </para>
        <para>
        如果该参数以<literal>|</literal>开始，则该行的所有剩余部分总是会被当做要执行的<replaceable class="parameter">command</replaceable>，并且在参数中不会执行变量篡改以及反引号展开。该行的剩余部分会被简单地按字面传给shell。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\gdesc</literal></term>

        <listitem>
        <para>
         显示当前查询缓冲区的结果的描述（即列名和数据类型）。查询不会被实际执行，不过，如果它含有某种类型的语法错误，该错误将被以通常的方式报出。
        </para>

        <para>
         如果当前查询缓冲区为空，则会描述最近被发送的查询。
        </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term><literal>\gexec</literal></term>

        <listitem>
        <para>
         把当前查询缓冲区发送到服务器，然后该查询输出（如果有）中的每一行的每一列都当作一个要被执行的 SQL 语句。例如，要在<structname>my_table</structname>的每一列上都创建一个索引：
<programlisting>
=&gt; <userinput>SELECT format('create index on my_table(%I)', attname)</userinput>
-&gt; <userinput>FROM pg_attribute</userinput>
-&gt; <userinput>WHERE attrelid = 'my_table'::regclass AND attnum &gt; 0</userinput>
-&gt; <userinput>ORDER BY attnum</userinput>
-&gt; <userinput>\gexec</userinput>
CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
</programlisting>
        </para>

        <para>
         产生的查询会按照其所在行被返回的顺序执行，如果有多个列，则同一行中按照从左至右的顺序执行。NULL 域会被忽略。产生的查询会被原样发送给服务器处理，因此它们即不能是<application>psql</application>元命令，也不能包含<application>psql</application>变量引用。如果其中任何一个查询失败，剩余查询的执行将会继续，除非设置了<varname>ON_ERROR_STOP</varname>。每个查询的执行都遵照<varname>ECHO</varname>的处理（在使用<command>\gexec</command>时，通常建议设置<varname>ECHO</varname>为<literal>all</literal>或者<literal>queries</literal>）。查询日志、单步模式、计时以及其他查询执行特性也适用于每一个生成的查询。
        </para>
        <para>
         如果当前查询缓冲区为空，则会重新执行最近被发送的查询。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\gset [ <replaceable class="parameter">prefix</replaceable> ]</literal></term>

        <listitem>
        <para>
         把当前查询输入缓冲区发送给服务器并且将查询的输出存储在<application>psql</application>变量中（见<xref linkend="app-psql-variables" endterm="app-psql-variables-title"/>）。被执行的查询必须只返回一行。该行的每一列会被存储到一个单独的变量中，变量和该列的名字一样。例如：
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset</userinput>
=&gt; <userinput>\echo :var1 :var2</userinput>
hello 10
</programlisting>
        </para>
        <para>
         如果指定了一个<replaceable class="parameter">prefix</replaceable>，那么该字符串会被追加在该查询的输出列名称之前用来创建要使用的变量名：
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset result_</userinput>
=&gt; <userinput>\echo :result_var1 :result_var2</userinput>
hello 10
</programlisting>
        </para>
        <para>
         如果一个列的结果为 NULL，那么对应的变量会被重置而不是被设置。
        </para>
        <para>
         如果查询失败或者没有返回一行，则不会有任何变量被更改。
        </para>
        <para>
         如果当前查询缓冲区为空，则重新执行最近被发送的查询。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\gx [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <term><literal>\gx [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        <literal>\gx</literal>等效于<literal>\g</literal>，但会为这个查询强制扩展的输出模式。请参考<literal>\x</literal>。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\h</literal> or <literal>\help</literal> <literal>[ <replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        给出指定<acronym>SQL</acronym>命令的语法帮助。如果没有指定<replaceable class="parameter">command</replaceable>，则<application>psql</application>会列出可以显示语法帮助的所有命令。如果<replaceable class="parameter">command</replaceable>是一个星号（<literal>*</literal>），则会显示所有<acronym>SQL</acronym>命令的语法帮助。
        </para>

        <para>
        与大部分其他元命令不同，该行的所有剩余部分总是会被当做<command>\help</command>的参数，并且在参数中不会执行变量篡改以及反引号展开。
        </para>

        <note>
        <para>
        为了简化输入，由几个词构成的命令不需要被加上引号。因此，键入<userinput>\help alter table</userinput>是可以的。
        </para>
        </note>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\H</literal> or <literal>\html</literal></term>
        <listitem>
        <para>
        开启<acronym>HTML</acronym>查询输出格式。如果<acronym>HTML</acronym>格式已经开启，这会把它切换回默认的对齐文本格式。这个命令是为了兼容性和方便，有关设置其他输出选项请见<command>\pset</command>。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\i</literal> or <literal>\include</literal> <replaceable class="parameter">filename</replaceable></term>
        <listitem>
        <para>
        从文件<replaceable class="parameter">filename</replaceable>读取输入并且把它当作从键盘输入的命令来执行。
        </para>
        <para>
        如果<replaceable>filename</replaceable>是<literal>-</literal>（连字符），那么会一直读取标准输入直到碰到一个 EOF 指示符或者<command>\q</command>元命令。这可以用来把交互式输入与文件输入混杂。注意只有在最外层激活了 readline 行为的情况下才将会使用 readline 行为。
        </para>
        <note>
        <para>
        如果想在屏幕上看到被读入的行，必须把变量<varname>ECHO</varname>设置成<literal>all</literal>。
        </para>
        </note>
        </listitem>
      </varlistentry>


      <varlistentry id="psql-metacommand-if">
        <term><literal>\if</literal> <replaceable class="parameter">expression</replaceable></term>
        <term><literal>\elif</literal> <replaceable class="parameter">expression</replaceable></term>
        <term><literal>\else</literal></term>
        <term><literal>\endif</literal></term>
        <listitem>
        <para>
        这一组命令实现可嵌套的条件块。条件块必须以一个<command>\if</command>开始并且以一个<command>\endif</command>结束。两者之间可能有任意数量的<command>\elif</command>子句，后面也可能有选择地跟着一个单一的<command>\else</command>子句。一般查询以及其他类型的反斜线命令可以出现在这些命令之间构成条件块。
        </para>
        <para>
        <command>\if</command>和<command>\elif</command>命令读取它们的参数并且将它们作为布尔表达式进行计算。如果表达式得到<literal>真</literal>则处理正常继续下去，否则会跳过下面的行直到到达一个匹配的<command>\elif</command>、<command>\else</command>或者<command>\endif</command>。一旦一个<command>\if</command>或者<command>\elif</command>测试成功，同一个块中后面的<command>\elif</command>命令的参数将不会被计算但会被当作为假。跟在一个<command>\else</command>后面的行只有在先前的匹配的<command>\if</command>或<command>\elif</command>成功时才被处理。
        </para>
        <para>
        就像任何其他反斜线命令参数一样，<command>\if</command>或者<command>\elif</command>命令的<replaceable class="parameter">expression</replaceable>参数服从变量篡改以及反引号展开。然后会像一个on/off选项变量的值一样来计算它。因此，对下列项无歧义、大小写无关的匹配都是有效的值：<literal>true</literal>、<literal>false</literal>、<literal>1</literal>、<literal>0</literal>、<literal>on</literal>、<literal>off</literal>、<literal>yes</literal>、<literal>no</literal>。例如，<literal>t</literal>、<literal>T</literal>以及<literal>tR</literal>都将被认为是<literal>真</literal>。
        </para>
        <para>
        无法被正确计算为真或假的表达式将产生一个警告并且被当做假。
        </para>
        <para>
        正在被跳过的行还是会被正常地解析以标识查询和反斜线命令，但是查询不会被发送到服务器，并且非条件（<command>\if</command>、<command>\elif</command>、<command>\else</command>、<command>\endif</command>）反斜线命令会被忽略。条件命令会被检查以判断嵌套是否有效。被跳过的行中的变量引用不会被展开，并且也不会执行反引号展开。
        </para>
        <para>
        一个给定条件块中的所有反斜线命令必须出现在相同的源文件中。如果在所有的本地<command>\if</command>块被关闭之前，主输入文件或者一个<command>\include</command>进来的文件上就达到了EOF，则<application>psql</application>将产生一个错误。
        </para>
        <para>
         这里是一个例子：
        </para>
<programlisting>
-- 检查数据库中两个单独记录的存在性并且把结果存在单独的psql变量中
SELECT
    EXISTS(SELECT 1 FROM customer WHERE customer_id = 123) as is_customer,
    EXISTS(SELECT 1 FROM employee WHERE employee_id = 456) as is_employee
\gset
\if :is_customer
    SELECT * FROM customer WHERE customer_id = 123;
\elif :is_employee
    \echo 'is not a customer but is an employee'
    SELECT * FROM employee WHERE employee_id = 456;
\else
    \if yes
        \echo 'not a customer or employee'
    \else
        \echo 'this will never print'
    \endif
\endif
</programlisting>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ir</literal> or <literal>\include_relative</literal> <replaceable class="parameter">filename</replaceable></term>
        <listitem>
        <para>
        <literal>\ir</literal>命令类似于<literal>\i</literal>，但是以不同的方式处理相对路径文件名。在交互模式中执行时，这两个命令的行为相同。不过，当被从脚本中调用时，<literal>\ir</literal>相对于脚本所在的目录而不是根据当前工作目录来解释文件名。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\l[+]</literal> or <literal>\list[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出服务器中的数据库并且显示它们的名称、拥有者、字符集编码以及访问特权。如果指定了<replaceable class="parameter">pattern</replaceable>，则只列出名称匹配该模式的数据库。如果向命令名称追加<literal>+</literal>，则还会显示数据库的尺寸、默认表空间以及描述（尺寸信息只对当前用户能连接的数据库可用）。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_export <replaceable class="parameter">loid</replaceable> <replaceable class="parameter">filename</replaceable></literal></term>

        <listitem>
        <para>
        从数据库中读取具有<acronym>OID</acronym> <replaceable class="parameter">loid</replaceable>的大对象并且将它写入到<replaceable class="parameter">filename</replaceable>。注意这和服务器函数<function>lo_export</function>有微妙的不同，后者会以运行数据库服务器的用户权限来执行并且运行在服务器的文件系统上。
        </para>
        <tip>
        <para>
        使用<command>\lo_list</command>可以找出大对象的<acronym>OID</acronym>。
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_import <replaceable class="parameter">filename</replaceable> [ <replaceable class="parameter">comment</replaceable> ]</literal></term>

        <listitem>
        <para>
        把该文件存储到<productname>PostgreSQL</productname>大对象。可选地，它可以把给定的注释关联到该对象。例如：
<programlisting>
foo=&gt; <userinput>\lo_import '/home/peter/pictures/photo.xcf' 'a picture of me'</userinput>
lo_import 152801
</programlisting>
        该响应表示该大对象得到的对象 ID 是 152801，未来可以用这个 ID 来访问这个新创建的大对象。为了便于阅读，推荐总是给每一个对象都关联人类可读的注释。OID 和注释都可以用<command>\lo_list</command>命令查看。
        </para>

        <para>
        注意这个命令和服务器端的<function>lo_import</function>有微妙的不同，因为它以本地文件系统上的本地用户的身份运行，而不是服务器用户和文件系统。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_list</literal></term>
        <listitem>
        <para>
        显示当前存储在数据库中的所有<productname>PostgreSQL</productname>大对象，同时显示它们的任何注释。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_unlink <replaceable class="parameter">loid</replaceable></literal></term>

        <listitem>
        <para>
        从数据库中删除<acronym>OID</acronym>为<replaceable class="parameter">loid</replaceable>的大对象。
        </para>

        <tip>
        <para>
        使用<command>\lo_list</command>可以找出该大对象的<acronym>OID</acronym>。
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\o</literal> or <literal>\out [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <term><literal>\o</literal> or <literal>\out [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        安排把未来的查询结果保存到文件<replaceable class="parameter">filename</replaceable>中或者用管道导向到 shell 命令<replaceable class="parameter">command</replaceable>。如果没有指定参数，查询输出会被重置到标准输出。
        </para>

        <para>
        如果该参数以<literal>|</literal>开始，则该行的所有剩余部分总是会被当做要执行的<replaceable class="parameter">command</replaceable>，并且在参数中不会执行变量篡改以及反引号展开。该行的剩余部分会被简单地按字面传给shell。
        </para>

        <para><quote>查询结果</quote>包括从数据库服务器得到的所有表、命令响应和提示，还有查询数据库的各种反斜线命令（如<command>\d</command>）的输出，但不包括错误消息。
        </para>

        <tip>
        <para>
        要在查询结果之间混入文本输出，可以使用<command>\qecho</command>。
        </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\p</literal> or <literal>\print</literal></term>
        <listitem>
        <para>
        把当前查询缓冲区打印到标准输出。如果当前查询缓冲区为空，会打印最近被执行的查询。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\password [ <replaceable class="parameter">username</replaceable> ]</literal></term>
        <listitem>
        <para>
        更改指定用户（默认情况下是当前用户）的口令。这个命令会提示要求输入新口令、对口令加密然后把加密后的口令作为一个<command>ALTER ROLE</command>命令发送到服务器。这确保新口令不会以明文的形式出现在命令历史、服务器日志或者其他地方。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\prompt [ <replaceable class="parameter">text</replaceable> ] <replaceable class="parameter">name</replaceable></literal></term>
        <listitem>
        <para>
         提示用户提供一个文本用于分配给变量<replaceable class="parameter">name</replaceable>。可以指定一个可选的提示字符串<replaceable class="parameter">text</replaceable>（对于多个词组成的提示，把文本包裹在单引号中）。
        </para>

        <para>
         默认情况下，<literal>\prompt</literal>使用终端进行输入和输出。不过，如果使用了<option>-f</option>命令行开关，<literal>\prompt</literal>会使用标准输入和标准输出。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\pset [ <replaceable class="parameter">option</replaceable> [ <replaceable class="parameter">value</replaceable> ] ]</literal></term>

        <listitem>
        <para>
        这个命令设置影响查询结果表输出的选项。<replaceable class="parameter">option</replaceable>表示要设置哪个选项。<replaceable class="parameter">value</replaceable>的语义取决于选中的选项。对于某些选项，如果省略<replaceable class="parameter">value</replaceable>会导致该选项值被切换或者被重置，具体是哪些选项可见特定选项的描述。如果没有上面提到的那种行为，那么省略<replaceable class="parameter">value</replaceable>只会导致当前设置被显示。
        </para>

        <para>
        不带任何参数的<command>\pset</command>显示所有打印选项的当前状态。
        </para>

        <para>
        可调整的打印选项有：
        <variablelist>
          <varlistentry>
          <term><literal>border</literal></term>
          <listitem>
          <para>
          <replaceable class="parameter">value</replaceable>必须是一个数字。通常，数字越大，表格就会有更多的边框和线条，但具体要看是哪一种格式。在<acronym>HTML</acronym>格式中，这会直接被转换成<literal>border=...</literal>属性。在大部分其他格式中，只有值 0（没有边框）、1（内部分隔线）和 2（表格边框）有意义，并且 2 以上的值会被视为与<literal>border = 2</literal>相同。<literal>latex</literal>和<literal>latex-longtable</literal>格式会额外地允许一个值 3 表示在数据行之间增加分隔线。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>columns</literal></term>
          <listitem>
          <para>
          为<literal>wrapped</literal>格式设置目标宽度，还有扩展自动模式中决定输出是否足够多到需要分页器或者切换到垂直显示的宽度限制。零（默认）导致目标宽度由环境变量<envar>COLUMNS</envar>所控制，如果没有设置<envar>COLUMNS</envar>则使用检测到的屏幕宽度。此外，如果<literal>columns</literal>为零则<literal>wrapped</literal>格式只影响屏幕输出。如果<literal>columns</literal>为非零则文件和管道输出也会被包裹成该宽度。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>expanded</literal> (or <literal>x</literal>)</term>
          <listitem>
          <para>
          如果<replaceable class="parameter">value</replaceable>被指定，它必须是<literal>on</literal>或者<literal>off</literal>，它们分别会启用或者禁用扩展模式，也可以是<literal>auto</literal>。如果<replaceable class="parameter">value</replaceable>被省略，则该命令会在开启和关闭设置之间切换。当扩展模式被启用时，查询结果被显示在两列中，第一列是列名而第二列是列值。如果在通常的<quote>水平</quote>模式中数据不适合屏幕，则可以用这种模式。在自动设置中，只要查询输出有多于一列并且比屏幕宽，就会使用扩展模式。否则，将使用常规模式。只有在对齐格式和 wrapped 格式中自动设置才有效。在其他格式中，它的行为总是像扩展模式被关闭一样。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>fieldsep</literal></term>
          <listitem>
          <para>
          指定在非对齐输出格式中使用的域分隔符。用那种方式，用户可以创建 tab 或者逗号分隔的输出，这种形式其他程序可能更喜欢。要设置 tab 为域分隔符，可以键入<literal>\pset fieldsep '\t'</literal>。默认的域分隔符是<literal>'|'</literal>（一个竖线）。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>fieldsep_zero</literal></term>
          <listitem>
          <para>
          把用在非对齐输出格式中的域分隔符设置为一个零字节。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>footer</literal></term>
          <listitem>
          <para>
          如果<replaceable class="parameter">value</replaceable>被指定，它必须是<literal>on</literal>或者<literal>off</literal>，它们分别会启用或者禁用表格页脚（<literal>(<replaceable>n</replaceable> rows)</literal>计数）的显示。如果<replaceable class="parameter">value</replaceable>被省略，则该命令会切换页脚显示为打开或者关闭。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>format</literal></term>
          <listitem>
          <para>
          设置输出格式为<literal>unaligned</literal>、<literal>aligned</literal>、<literal>wrapped</literal>、<literal>html</literal>、<literal>asciidoc</literal>、<literal>latex</literal>（使用<literal>tabular</literal>）、<literal>latex-longtable</literal>或者<literal>troff-ms</literal>之一。也可以使用不造成歧义的缩写（这意味着一个字母就够了）。
          </para>

          <para><literal>unaligned</literal>格式把一个数据行的所有列都写在一行上，之间用当前活动的域分隔符分隔。这可用于生成意图由其他程序读取的输出（例如，tab 分隔或者逗号分隔格式）。
          </para>

          <para><literal>aligned</literal>格式是标准的、人类可读的、格式化好的文本输出，这是默认格式。
          </para>

          <para><literal>wrapped</literal>格式和<literal>aligned</literal>相似，但是前者会把过宽的数据值分成多个行以便输出能够适合目标行的宽度。目标行的宽度由<literal>columns</literal>选项决定。注意<application>psql</application>将不会尝试对列头部标题进行换行，因此如果列头部需要的总宽度超过目标宽度，<literal>wrapped</literal>格式的行为就变得和<literal>aligned</literal>一样了。
          </para>

          <para>
          <literal>html</literal>、<literal>asciidoc</literal>、<literal>latex</literal>、<literal>latex-longtable</literal>和<literal>troff-ms</literal>格式分别用相应的标记语言把要输出的表格放在文档中，不过它们的输出并不是完整的文档。在<acronym>HTML</acronym>中这可能并不重要，但是在<application>LaTeX</application>中必须有完整的文档。<literal>latex-longtable</literal>还要求有<application>LaTeX</application>的<literal>longtable</literal>以及<literal>booktabs</literal>包。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>linestyle</literal></term>
          <listitem>
          <para>
          设置边框线的绘制样式为<literal>ascii</literal>、<literal>old-ascii</literal>或者<literal>unicode</literal>之一。允许不产生歧义的缩写（这意味着一个字母就足够了）。默认的设置是<literal>ascii</literal>。这个选项只影响<literal>aligned</literal>以及<literal>wrapped</literal>输出格式。
          </para>

          <para><literal>ascii</literal>样式使用纯<acronym>ASCII</acronym>字符。数据中的新行使用一个<literal>+</literal>符号在右手边的空白处显示。当在<literal>wrapped</literal>格式中包裹两行中间没有新行字符的数据时，会在第一行右手边空白处显示一个点号（<literal>.</literal>），并且在下一行的左手边空白处也显示一个点号（<literal>.</literal>）。
          </para>

          <para><literal>old-ascii</literal>样式使用纯<acronym>ASCII</acronym>字符，使用<productname>PostgreSQL</productname> 8.4 及更早版本中用过的格式化样式。数据中的新行使用<literal>:</literal>符号来代替左手边的列分隔符显示。在包裹两行中间没有新行字符的数据时，会用一个<literal>;</literal>符号取代左手边的列分隔符。
          </para>

          <para><literal>unicode</literal>样式使用 Unicode 的方框绘制字符。数据中的新行会使用一个回车符号显示在右手边的空白处。在包裹两行中间没有新行字符的数据时，会在第一行的右手边空白处显示一个省略号，并且在下一行的左手边空白处也显示一个省略号。
          </para>

          <para>
          当<literal>border</literal>设置大于零时，<literal>linestyle</literal>选项也决定边框线用什么字符绘制。纯<acronym>ASCII</acronym>字符到处都可以使用，但是在识别 Unicode 字符的显示上使用 Unicode 字符会更好看。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>null</literal></term>
          <listitem>
          <para>
          设置要用来替代空值被打印的字符串。默认是什么也不打印，对于一个空字符串这很容易弄错。例如，有人可能更想用<literal>\pset null '(null)'</literal>。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>numericlocale</literal></term>
          <listitem>
          <para>
          如果<replaceable class="parameter">value</replaceable>被指定，它必须是<literal>on</literal>或者<literal>off</literal>，它们将分别启用或者禁用一个与区域相关的字符来分隔数字和左边的十进制标记。如果<replaceable class="parameter">value</replaceable>被省略，该命令会在常规输出和区域相关的数字输出之间切换。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>pager</literal></term>
          <listitem>
          <para>
          控制对查询和<application>psql</application>的帮助输出使用分页器程序。如果环境变量<envar>PSQL_PAGER</envar>或<envar>PAGER</envar>被设置，输出会被用管道输送到指定的程序。否则将使用与平台相关的默认分页器程序（例如<filename>more</filename>）。
          </para>

          <para>
          如果<literal>pager</literal>选项被设为<literal>off</literal>，则不会使用分页器程序。如果<literal>pager</literal>选项被设为<literal>on</literal>，则会在适当的时候使用分页器，即当输出到终端并且无法适合屏幕时就会使用分页器。<literal>pager</literal>选项也可以被设置为<literal>always</literal>，这会导致对所有的终端输出都是用分页器而不管输出是否适合屏幕。不带<replaceable class="parameter">value</replaceable>的<literal>\pset pager</literal>会切换分页器开、关状态。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>pager_min_lines</literal></term>
          <listitem>
          <para>
          如果<literal>pager_min_lines</literal>被设置为一个大于页面高度的数字，在至少这么多输出行被显示之前都不会调用分页器程序。默认设置为 0。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>recordsep</literal></term>
          <listitem>
          <para>
          指定用在非对齐输出格式中的记录（行）分隔符。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>recordsep_zero</literal></term>
          <listitem>
          <para>
          把用在非对齐输出格式中的记录分隔符设置为一个零字节。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>tableattr</literal> (or <literal>T</literal>)</term>
          <listitem>
          <para>
          在<acronym>HTML</acronym>格式中，这会指定要放在<sgmltag>table</sgmltag>标记内的属性。例如，这可能是<literal>cellpadding</literal>或者<literal>bgcolor</literal>。注意你可能不想在这里指定<literal>border</literal>，因为那由<literal>\pset border</literal>负责。如果没有给出<replaceable class="parameter">value</replaceable>，则表属性会被重置。
          </para>
          <para>
          在<literal>latex-longtable</literal>格式中，这个选项控制每个包含左对齐数据类型的列的宽度比例。这个选项的值是一个由空格分隔的值列表，例如<literal>'0.2 0.2 0.6'</literal>。没有指定的输出列会使用最后一个指定的值。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>title</literal> (or <literal>C</literal>)</term>
          <listitem>
          <para>
          设置用于任何后续被打印表的表标题。这可以用来给输出加上描述性的标签。如果没有给出<replaceable class="parameter">value</replaceable>，这个标题会被复原。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>tuples_only</literal> (or <literal>t</literal>)</term>
          <listitem>
          <para>
          如果<replaceable class="parameter">value</replaceable>被指定，它必须是<literal>on</literal>或者<literal>off</literal>，这个选项将启用或者禁用只显示元组的模式。如果<replaceable class="parameter">value</replaceable>被省略，则该命令会在常规输出和只显示元组输出之间切换。常规输出包括列头、标题以及多种页脚之类的额外信息。在只显示元组的模式中，只会显示实际的表数据。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>unicode_border_linestyle</literal></term>
          <listitem>
          <para>
          设置<literal>unicode</literal>线型的边框绘制风格为<literal>single</literal>或者<literal>double</literal>之一。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>unicode_column_linestyle</literal></term>
          <listitem>
          <para>
          设置<literal>unicode</literal>线型的列绘制风格为<literal>single</literal>或者<literal>double</literal>之一。
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>unicode_header_linestyle</literal></term>
          <listitem>
          <para>
          设置<literal>unicode</literal>线型的页眉绘制风格为<literal>single</literal>或者<literal>double</literal>之一。
          </para>
          </listitem>
          </varlistentry>
        </variablelist>
        </para>

        <para>
        这些不同格式的外观可以在<xref linkend="app-psql-examples" endterm="app-psql-examples-title"/>小节的图示中看到。
        </para>

        <tip>
        <para>
        <command>\pset</command>有多种快捷命令。请参见<command>\a</command>、<command>\C</command>、<command>\f</command>、<command>\H</command>、<command>\t</command>、<command>\T</command>以及<command>\x</command>。
        </para>
        </tip>

        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\q</literal> or <literal>\quit</literal></term>
        <listitem>
        <para>
        退出<application>psql</application>程序。在一个脚本文件中，只有该脚本的执行会被终止。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\qecho <replaceable class="parameter">text</replaceable> [ ... ] </literal></term>
        <listitem>
        <para>
        这个命令和<command>\echo</command>一样，不过输出将被写到<command>\o</command>所设置的查询输出通道。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\r</literal> or <literal>\reset</literal></term>
        <listitem>
        <para>
        重置（清除）查询缓冲区。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\s [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
        <listitem>
        <para>
        打印<application>psql</application>的命令行历史到<replaceable class="parameter">filename</replaceable>。如果省略<replaceable class="parameter">filename</replaceable>，该历史会被写入到标准输出（如果适用则使用分页器）。如果编译<application>psql</application>时没有加上<application>Readline</application>支持，则这个命令不可用。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\set [ <replaceable class="parameter">name</replaceable> [ <replaceable class="parameter">value</replaceable> [ ... ] ] ]</literal></term>

        <listitem>
        <para>
        设置<application>psql</application>变量<replaceable class="parameter">name</replaceable>为<replaceable class="parameter">value</replaceable>，如果给出了多于一个值，则把该变量的值设置为所有给出的值的串接。如果只给了一个参数，该变量会被设置为空字符串值。要重置一个变量，可以使用<command>\unset</command> 命令。
        </para>

        <para>不带任何参数的<command>\set</command>显示所有当前设置的<application>psql</application>变量的名称和值。
        </para>

        <para>
        合法的变量名可以包含字母、数字和下划线。详见下文的<xref linkend="app-psql-variables" endterm="app-psql-variables-title"/>。变量名是大小写敏感的。
        </para>

        <para>
        某些变量是特殊的，它们控制<application>psql</application>的行为或者会被自动设置以反映连接状态。这些变量在下文的<xref linkend="app-psql-variables" endterm="app-psql-variables-title"/>中记录。
        </para>

        <note>
        <para>
        这个命令和<acronym>SQL</acronym>命令<xref linkend="sql-set"/>无关。
        </para>
        </note>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\setenv <replaceable class="parameter">name</replaceable> [ <replaceable class="parameter">value</replaceable> ]</literal></term>

        <listitem>
        <para>
        把环境变量<replaceable class="parameter">name</replaceable>设置为<replaceable class="parameter">value</replaceable>，如果没有提供<replaceable class="parameter">value</replaceable>，则会重置该环境变量。例如：
<programlisting>
testdb=&gt; <userinput>\setenv PAGER less</userinput>
testdb=&gt; <userinput>\setenv LESS -imx4F</userinput>
</programlisting></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\sf[+] <replaceable class="parameter">function_description</replaceable> </literal></term>

        <listitem>
        <para>
         这个命令以一个<command>CREATE OR REPLACE FUNCTION</command>命令或者<command>CREATE OR REPLACE PROCEDURE</command>命令取出并且显示指定函数或者过程的定义。定义会被打印到当前的查询输出渠道，就像<command>\o</command>所作的那样。
        </para>

        <para>
         目标函数可以单独用名称指定，也可以用名称和参数指定，例如<literal>foo(integer, text)</literal>。如果有多于一个函数具有相同的名字，则必须给出参数的类型。
        </para>

        <para>
         如果向命令名称追加<literal>+</literal>，那么输出行会被编号，函数体的第一行会被编为 1。
        </para>

        <para>
        与大部分其他元命令不同，该行的所有剩余部分总是会被当做<command>\sf</command>的参数，并且在参数中不会执行变量篡改以及反引号展开。
        </para>
        </listitem>
      </varlistentry>
      
      
      <varlistentry>
        <term><literal>\sv[+] <replaceable class="parameter">view_name</replaceable> </literal></term>

        <listitem>
         <para>
          这个命令以一个<command>CREATE OR REPLACE VIEW</command>命令取出并且显示指定视图的定义。定义会被打印到当前的查询输出渠道，就像<command>\o</command>所作的那样。
         </para>

         <para>
          如果在命令名称上追加<literal>+</literal>，那么输出行会从 1 开始编号。
         </para>

         <para>
        与大部分其他元命令不同，该行的所有剩余部分总是会被当做<command>\sv</command>的参数，并且在参数中不会执行变量篡改以及反引号展开。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\t</literal></term>
        <listitem>
        <para>
        切换输出列名标题和行计数页脚的显示。这个命令等效于<literal>\pset tuples_only</literal>，提供它只是为了使用方便而已。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\T <replaceable class="parameter">table_options</replaceable></literal></term>
        <listitem>
        <para>
        指定在<acronym>HTML</acronym>输出格式中，要放在<sgmltag>table</sgmltag>标签内的属性。这个命令等效于<literal>\pset tableattr <replaceable class="parameter">table_options</replaceable></literal>。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
       <term><literal>\timing [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> ]</literal></term>
        <listitem>
        <para>
         如果给出一个参数，这个参数用来打开或者关闭对每个SQL语句执行时长的显示。如果没有参数，则在打开和关闭之间切换。显示的数据以毫秒为单位，超过1秒的区间还会被显示为“分钟:秒”的格式，如果必要还会加上小时和日的字段。
        </para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\unset <replaceable class="parameter">name</replaceable></literal></term>

        <listitem>
        <para>
        重置（删除）<application>psql</application>变量<replaceable class="parameter">name</replaceable>。
        </para>

        <para>
        大部分控制<application>psql</application>行为的变量不能被重置，相反，<literal>\unset</literal>命令会被解释为把它们设置为其默认值。请参考下文的<xref linkend="app-psql-variables" endterm="app-psql-variables-title"/>。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\w</literal> or <literal>\write</literal> <replaceable class="parameter">filename</replaceable></term>
        <term><literal>\w</literal> or <literal>\write</literal> <literal>|</literal><replaceable class="parameter">command</replaceable></term>
        <listitem>
        <para>
        把当前查询缓冲区写到文件<replaceable class="parameter">filename</replaceable>或者用管道导出到 shell 命令<replaceable class="parameter">command</replaceable>。如果当前查询缓冲区为空，则写最近被执行的查询。
        </para>

        <para>
        如果参数以<literal>|</literal>开始，则该行的整个剩余部分会被当做要执行的<replaceable class="parameter">command</replaceable>，并且在参数中不会执行变量篡改以及反引号展开。该行的剩余部分会被简单地按字面传递给shell。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\watch [ <replaceable class="parameter">seconds</replaceable> ]</literal></term>
        <listitem>
        <para>
        反复执行当前的查询缓冲区（就像<literal>\g</literal>那样）直到被中止或者查询失败。两次执行之间等待指定的秒数（默认是 2 秒）。显示每个查询结果时带上一个由<literal>\pset title</literal>字符串（如果有）、从查询开始起的时间以及延时间隔组成的页眉。
        </para>
        <para>
        如果当前查询缓冲区为空，则会重新执行最近被发送的查询。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\x [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> | <replaceable class="parameter">auto</replaceable> ]</literal></term>
        <listitem>
        <para>
        设置或者切换扩展表格格式化模式。究其本身而言，这个命令等效于<literal>\pset expanded</literal>。
       </para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\z [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        列出表、视图和序列，以及它们相关的访问特权。如果指定了<replaceable class="parameter">pattern</replaceable>，则只会列出名称匹配该模式的表、视图和序列。
        </para>

        <para>
        这是<command>\dp</command>（<quote>display privileges</quote>）的一个别名。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\! [ <replaceable class="parameter">command</replaceable> ]</literal></term>
        <listitem>
        <para>
        如果没有参数，就跳出到一个子shell，当子shell退出时<application>psql</application>会继续。如果有一个参数，则执行shell命令<replaceable class="parameter">command</replaceable>。
        </para>

        <para>
        与大部分其他元命令不同，该行的所有剩余部分总是会被当做<command>\!</command>的参数，并且在参数中不会执行变量篡改以及反引号展开。该行的剩余部分会被简单地按字面传递给shell。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\? [ <replaceable class="parameter">topic</replaceable> ]</literal></term>
        <listitem>
        <para>
        显示帮助信息。可选的<replaceable class="parameter">topic</replaceable>参数（默认是<literal>commands</literal>）选择解释<application>psql</application>的哪一部分：<literal>commands</literal>表示<application>psql</application>的反斜线命令；<literal>options</literal>表示可以传递给<application>psql</application>的命令行选项；而<literal>variables</literal>显示有关<application>psql</application>配置变量的帮助。
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\;</literal></term>
        <listitem>
        <para>
        反斜线分号并非和前述命令相同的元命令，它只是会把一个分号加入到查询缓冲区且不会进一步执行。
        </para>

        <para>
        通常，只要<application>psql</application>达到了命令结束的分号，它就将分发一个SQL命令给服务器，即使在当前行上还留有更多输入。因此，例如输入
<programlisting>
select 1; select 2; select 3;
</programlisting>
        将导致三个SQL命令被逐个发送给服务器，在继续到下一个命令前会显示每一个命令的结果。不过，被输入为<literal>\;</literal>的分号将不会触发命令处理，这样在它之前的命令以及其后的命令实际上会被组合在一个请求中发送给服务器。例如
<programlisting>
select 1\; select 2\; select 3;
</programlisting>
        会导致在到达非反斜线分号时用一个单一的请求把三个SQL命令发送给服务器。服务器会把这样一个请求当作单一的事务执行，除非该字符串中有显式的<command>BEGIN</command>/<command>COMMIT</command>命令把它划分成多个事务（服务器如何处理多查询字符串的更多细节请参考<xref linkend="protocol-flow-multi-statement"/>）。<application>psql</application>对每个请求仅打印出它接收到的最后一个查询结果。在这个例子中，尽管所有三个<command>SELECT</command>确实都被执行了，但<application>psql</application>只会打印出<literal>3</literal>。
        </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </para>

  <refsect3 id="app-psql-patterns">
<!--==========================orignal english content==========================
   <title id="app-psql-patterns-title">Patterns</title>
____________________________________________________________________________-->
   <title id="app-psql-patterns-title">模式（Pattern）</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>patterns</primary>
    <secondary>in psql and pg_dump</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>patterns</primary>
    <secondary>in psql and pg_dump</secondary>
   </indexterm>

<!--==========================orignal english content==========================
  <para>
   The various <literal>\d</literal> commands accept a <replaceable
   class="parameter">pattern</replaceable> parameter to specify the
   object name(s) to be displayed.  In the simplest case, a pattern
   is just the exact name of the object.  The characters within a
   pattern are normally folded to lower case, just as in SQL names;
   for example, <literal>\dt FOO</literal> will display the table named
   <literal>foo</literal>.  As in SQL names, placing double quotes around
   a pattern stops folding to lower case.  Should you need to include
   an actual double quote character in a pattern, write it as a pair
   of double quotes within a double-quote sequence; again this is in
   accord with the rules for SQL quoted identifiers.  For example,
   <literal>\dt "FOO""BAR"</literal> will display the table named
   <literal>FOO"BAR</literal> (not <literal>foo"bar</literal>).  Unlike the normal
   rules for SQL names, you can put double quotes around just part
   of a pattern, for instance <literal>\dt FOO"FOO"BAR</literal> will display
   the table named <literal>fooFOObar</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   很多<literal>\d</literal>命令都可以用一个<replaceable class="parameter">pattern</replaceable>参数来指定要被显示的对象名称。在最简单的情况下，模式正好就是该对象的准确名称。在模式中的字符通常会被变成小写形式（就像在 SQL 名称中那样），例如<literal>\dt FOO</literal>将会显示名为<literal>foo</literal>的表。就像在 SQL 名称中那样，把模式放在双引号中可以阻止它被转换成小写形式。如果需要在一个模式中包括一个真正的双引号字符，则需要把它写成两个相邻的双引号，这同样是符合 SQL 引用标识符的规则。例如，<literal>\dt "FOO""BAR"</literal>将显示名为<literal>FOO"BAR</literal>（不是<literal>foo"bar</literal>）的表。和普通的 SQL 名称规则不同，你不能只在模式的一部分周围放上双引号，例如<literal>\dt FOO"FOO"BAR</literal>将会显示名为<literal>fooFOObar</literal>的表。
  </para>

<!--==========================orignal english content==========================
  <para>
   Whenever the <replaceable class="parameter">pattern</replaceable> parameter
   is omitted completely, the <literal>\d</literal> commands display all objects
   that are visible in the current schema search path &mdash; this is
   equivalent to using <literal>*</literal> as the pattern.
   (An object is said to be <firstterm>visible</firstterm> if its
   containing schema is in the search path and no object of the same
   kind and name appears earlier in the search path. This is equivalent to the
   statement that the object can be referenced by name without explicit
   schema qualification.)
   To see all objects in the database regardless of visibility,
   use <literal>*.*</literal> as the pattern.
  </para>
____________________________________________________________________________-->
  <para>
   只要<replaceable class="parameter">pattern</replaceable>参数被完全省略，<literal>\d</literal>命令会显示在当前 schema 搜索路径中可见的全部对象 &mdash; 这等价于用<literal>*</literal>作为模式（如果一个对象所在的 schema 位于搜索路径中并且没有同类且同名的对象出现在搜索路径中该 schema 之前的 schema 中，则说该对象是<firstterm>可见</firstterm>的。这表示可以直接用名称引用该对象，而不需要用 schema 来进行限定）。要查看数据库中所有的对象而不管它们的可见性，可以把<literal>*.*</literal>用作模式。
  </para>

<!--==========================orignal english content==========================
  <para>
   Within a pattern, <literal>*</literal> matches any sequence of characters
   (including no characters) and <literal>?</literal> matches any single character.
   (This notation is comparable to Unix shell file name patterns.)
   For example, <literal>\dt int*</literal> displays tables whose names
   begin with <literal>int</literal>.  But within double quotes, <literal>*</literal>
   and <literal>?</literal> lose these special meanings and are just matched
   literally.
  </para>
____________________________________________________________________________-->
  <para>
   如果放在一个模式中，<literal>*</literal>将匹配任意字符序列（包括空序列），而<literal>?</literal>会匹配任意的单个字符（这种记号方法就像 Unix shell 的文件名模式一样）。例如，<literal>\dt int*</literal>会显示名称以<literal>int</literal>开始的表。但是如果被放在双引号内，<literal>*</literal>和<literal>?</literal>就会失去这些特殊含义而变成普通的字符。
  </para>

<!--==========================orignal english content==========================
  <para>
   A pattern that contains a dot (<literal>.</literal>) is interpreted as a schema
   name pattern followed by an object name pattern.  For example,
   <literal>\dt foo*.*bar*</literal> displays all tables whose table name
   includes <literal>bar</literal> that are in schemas whose schema name
   starts with <literal>foo</literal>.  When no dot appears, then the pattern
   matches only objects that are visible in the current schema search path.
   Again, a dot within double quotes loses its special meaning and is matched
   literally.
  </para>
____________________________________________________________________________-->
  <para>
   包含一个点号（<literal>.</literal>）的模式被解释为一个 schema 名称模式后面跟上一个对象名称模式。例如，<literal>\dt foo*.*bar*</literal>会显示名称以<literal>foo</literal>开始的 schema 中所有名称包括<literal>bar</literal>的表。如果没有出现点号，那么模式将只匹配当前 schema 搜索路径中可见的对象。同样，双引号内的点号会失去其特殊含义并且变成普通的字符。
  </para>

<!--==========================orignal english content==========================
  <para>
   Advanced users can use regular-expression notations such as character
   classes, for example <literal>[0-9]</literal> to match any digit.  All regular
   expression special characters work as specified in
   <xref linkend="functions-posix-regexp"/>, except for <literal>.</literal> which
   is taken as a separator as mentioned above, <literal>*</literal> which is
   translated to the regular-expression notation <literal>.*</literal>,
   <literal>?</literal> which is translated to <literal>.</literal>, and
   <literal>$</literal> which is matched literally.  You can emulate
   these pattern characters at need by writing
   <literal>?</literal> for <literal>.</literal>,
   <literal>(<replaceable class="parameter">R</replaceable>+|)</literal> for
   <literal><replaceable class="parameter">R</replaceable>*</literal>, or
   <literal>(<replaceable class="parameter">R</replaceable>|)</literal> for
   <literal><replaceable class="parameter">R</replaceable>?</literal>.
   <literal>$</literal> is not needed as a regular-expression character since
   the pattern must match the whole name, unlike the usual
   interpretation of regular expressions (in other words, <literal>$</literal>
   is automatically appended to your pattern).  Write <literal>*</literal> at the
   beginning and/or end if you don't wish the pattern to be anchored.
   Note that within double quotes, all regular expression special characters
   lose their special meanings and are matched literally.  Also, the regular
   expression special characters are matched literally in operator name
   patterns (i.e., the argument of <literal>\do</literal>).
  </para>
____________________________________________________________________________-->
  <para>
   高级用户可以使用字符类等正则表达式记法，如<literal>[0-9]</literal>可以匹配任意数字。所有的正则表达式特殊字符都按照<xref linkend="functions-posix-regexp"/>所说的工作，以下字符除外：<literal>.</literal>会按照上面所说的作为一种分隔符，<literal>*</literal>会被翻译成正则表达式记号<literal>.*</literal>，<literal>?</literal>会被翻译成<literal>.</literal>，而<literal>$</literal>则按字面意思匹配。根据需要，可以通过书写<literal>?</literal>、<literal>(<replaceable class="parameter">R</replaceable>+|)</literal>、<literal>(<replaceable class="parameter">R</replaceable>|)</literal>和<literal><replaceable class="parameter">R</replaceable>?</literal>来分别模拟模式字符<literal>.</literal>、<literal><replaceable class="parameter">R</replaceable>*</literal>和<literal><replaceable class="parameter">R</replaceable>?</literal>。<literal>$</literal>不需要作为一个正则表达式字符，因为模式必须匹配整个名称，而不是像正则表达式的常规用法那样解释（换句话说，<literal>$</literal>会被自动地追加到模式上）。如果不希望该模式的匹配位置被固定，可以在开头或者结尾写上<literal>*</literal>。注意在双引号内，所有的正则表达式特殊字符会失去其特殊含义并且按照其字面意思进行匹配。还有，在操作符名称模式中（即作为<literal>\do</literal>的参数），正则表达式特殊字符也按照字面意思进行匹配。
  </para>
  </refsect3>
 </refsect2>

 <refsect2>
<!--==========================orignal english content==========================
  <title>Advanced Features</title>
____________________________________________________________________________-->
  <title>高级特性</title>

   <refsect3 id="app-psql-variables">
<!--==========================orignal english content==========================
    <title id="app-psql-variables-title">Variables</title>
____________________________________________________________________________-->
    <title id="app-psql-variables-title">变量</title>

<!--==========================orignal english content==========================
    <para>
    <application>psql</application> provides variable substitution
    features similar to common Unix command shells.
    Variables are simply name/value pairs, where the value
    can be any string of any length.  The name must consist of letters
    (including non-Latin letters), digits, and underscores.
    </para>
____________________________________________________________________________-->
    <para>
    <application>psql</application>提供了和普通 Unix 命令 shell 相似的变量替换特性。变量简单来说就是一对名称/值，其中值可以是任意长度的任意字符串。名称必须由字母（包括非拉丁字母）、数字和下划线构成。
    </para>

<!--==========================orignal english content==========================
    <para>
    To set a variable, use the <application>psql</application> meta-command
    <command>\set</command>.  For example,
<programlisting>
testdb=&gt; <userinput>\set foo bar</userinput>
</programlisting>
    sets the variable <literal>foo</literal> to the value
    <literal>bar</literal>. To retrieve the content of the variable, precede
    the name with a colon, for example:
<programlisting>
testdb=&gt; <userinput>\echo :foo</userinput>
bar
</programlisting>
    This works in both regular SQL commands and meta-commands; there is
    more detail in <xref linkend="app-psql-interpolation"
    endterm="app-psql-interpolation-title"/>, below.
    </para>
____________________________________________________________________________-->
    <para>
    要设置一个变量，可以使用<application>psql</application>的元命令<command>\set</command>。例如，
<programlisting>
testdb=&gt; <userinput>\set foo bar</userinput>
</programlisting>
    会设置<literal>foo</literal>为值<literal>bar</literal>。要检索该变量的内容，可以在名称前放一个分号，例如：
<programlisting>
testdb=&gt; <userinput>\echo :foo</userinput>
bar
</programlisting>
    这在常规 SQL 命令和元命令中均有效，下文的<xref linkend="app-psql-interpolation" endterm="app-psql-interpolation-title"/>中有更多细节。
    </para>

<!--==========================orignal english content==========================
    <para>
    If you call <command>\set</command> without a second argument, the
    variable is set to an empty-string value. To unset (i.e., delete)
    a variable, use the command <command>\unset</command>.  To show the
    values of all variables, call <command>\set</command> without any argument.
    </para>
____________________________________________________________________________-->
    <para>
    如果调用<command>\set</command>时没有第二个参数，该变量会被设置为一个空字符串值。要重置（即删除）一个变量，可以使用命令<command>\unset</command>。要显示所有变量的值，在调用<command>\set</command>时不带任何参数即可。
    </para>

    <note>
<!--==========================orignal english content==========================
    <para>
    The arguments of <command>\set</command> are subject to the same
    substitution rules as with other commands. Thus you can construct
    interesting references such as <literal>\set :foo
    'something'</literal> and get <quote>soft links</quote> or
    <quote>variable variables</quote> of <productname>Perl</productname>
    or <productname><acronym>PHP</acronym></productname> fame,
    respectively. Unfortunately (or fortunately?), there is no way to do
    anything useful with these constructs. On the other hand,
    <literal>\set bar :foo</literal> is a perfectly valid way to copy a
    variable.
    </para>
____________________________________________________________________________-->
    <para>
    <command>\set</command>的参数服从与其他命令相同的替换规则。因此可以构造有趣的引用，例如<literal>\set :foo 'something'</literal>以及分别得到<productname>Perl</productname>或者<productname><acronym>PHP</acronym></productname>的<quote>软链接</quote>或者<quote>可变变量</quote>。不幸的是（或者幸运的是？），这些构造出来的东西并没有什么用处。在另一方面，<literal>\set bar :foo</literal>是一种很好的拷贝变量的方法。
    </para>
    </note>

<!--==========================orignal english content==========================
    <para>
    A number of these variables are treated specially
    by <application>psql</application>. They represent certain option
    settings that can be changed at run time by altering the value of
    the variable, or in some cases represent changeable state of
    <application>psql</application>.
    By convention, all specially treated variables' names
    consist of all upper-case ASCII letters (and possibly digits and
    underscores). To ensure maximum compatibility in the future, avoid
    using such variable names for your own purposes.
   </para>
____________________________________________________________________________-->
    <para>
    有一些变量会被<application>psql</application>特殊对待。它们表示特定的选项设置，运行时这类选项设置可以通过修改该变量的值来改变，或者在某些情况下它们表示<application>psql</application>的可更改的状态。按照惯例，所有被特殊对待的变量的名称由全部大写形式的 ASCII 字母（还有可能是数字和下划线）组成。为了确保未来最大的兼容性，最好避免把这类变量名用于自己的目的。
   </para>

<!--==========================orignal english content==========================
   <para>
    Variables that control <application>psql</application>'s behavior
    generally cannot be unset or set to invalid values.  An <literal>\unset</literal>
    command is allowed but is interpreted as setting the variable to its
    default value.  A <literal>\set</literal> command without a second argument is
    interpreted as setting the variable to <literal>on</literal>, for control
    variables that accept that value, and is rejected for others.  Also,
    control variables that accept the values <literal>on</literal>
    and <literal>off</literal> will also accept other common spellings of Boolean
    values, such as <literal>true</literal> and <literal>false</literal>.
   </para>
____________________________________________________________________________-->
   <para>
    控制<application>psql</application>行为的变量通常不能被重置或者设置为无效值。允许<literal>\unset</literal>命令，但它会被解释为将变量设置为它的默认值。没有第二参数的<literal>\set</literal>命令会被解释为将变量设置为<literal>on</literal>（对于接受该值的控制变量），对不接受该值的变量则会拒绝这个命令。此外，接受值<literal>on</literal>和<literal>off</literal>的控制变量也能接受其他常见的布尔值拼写方式，例如<literal>true</literal>和<literal>false</literal>。
   </para>

<!--==========================orignal english content==========================
   <para>
    The specially treated variables are:
   </para>
____________________________________________________________________________-->
   <para>
    被特殊对待的变量是：
   </para>

    <variablelist>
      <varlistentry>
<!--==========================orignal english content==========================
      <term>
       <varname>AUTOCOMMIT</varname>
       <indexterm>
        <primary>autocommit</primary>
        <secondary>psql</secondary>
       </indexterm>
      </term>
____________________________________________________________________________-->
      <term>
       <varname>AUTOCOMMIT</varname>
       <indexterm>
        <primary>autocommit</primary>
        <secondary>psql</secondary>
       </indexterm>
      </term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        When <literal>on</literal> (the default), each SQL command is automatically
        committed upon successful completion.  To postpone commit in this
        mode, you must enter a <command>BEGIN</command> or <command>START
        TRANSACTION</command> SQL command.  When <literal>off</literal> or unset, SQL
        commands are not committed until you explicitly issue
        <command>COMMIT</command> or <command>END</command>.  The autocommit-off
        mode works by issuing an implicit <command>BEGIN</command> for you, just
        before any command that is not already in a transaction block and
        is not itself a <command>BEGIN</command> or other transaction-control
        command, nor a command that cannot be executed inside a transaction
        block (such as <command>VACUUM</command>).
        </para>
____________________________________________________________________________-->
        <para>
        在被设置为<literal>on</literal>（默认）时，每一个 SQL 命令在成功完成时会被自动提交。在这种模式中要推迟提交，必须输入一个<command>BEGIN</command>或者<command>START TRANSACTION</command> SQL 命令。当被设置为<literal>off</literal>或者被重置时，在显式发出<command>COMMIT</command>或者<command>END</command>之前，SQL 命令不会被提交。自动提交打开模式会为你发出一个隐式的<command>BEGIN</command>，这会发生在任何不在一个事务块中且本身即不是<command>BEGIN</command>及其他事务控制命令且不是无法在事务块中执行的命令（例如<command>VACUUM</command>）之前。
        </para>

        <note>
<!--==========================orignal english content==========================
        <para>
         In autocommit-off mode, you must explicitly abandon any failed
         transaction by entering <command>ABORT</command> or <command>ROLLBACK</command>.
         Also keep in mind that if you exit the session
         without committing, your work will be lost.
        </para>
____________________________________________________________________________-->
        <para>
         在自动提交关闭模式中，必须通过<command>ABORT</command>或者<command>ROLLBACK</command>显式地放弃任何失败的事务。还要记住，如果退出会话时没有提交，则所有的工作都会丢失。
        </para>
        </note>

        <note>
<!--==========================orignal english content==========================
        <para>
         The autocommit-on mode is <productname>PostgreSQL</productname>'s traditional
         behavior, but autocommit-off is closer to the SQL spec.  If you
         prefer autocommit-off, you might wish to set it in the system-wide
         <filename>psqlrc</filename> file or your
         <filename>~/.psqlrc</filename> file.
        </para>
____________________________________________________________________________-->
        <para>
         自动提交打开模式是<productname>PostgreSQL</productname>的传统行为，但是自动提交关闭模式更接近于 SQL 的规范。如果更喜欢自动提交关闭模式，可以在系统级的<filename>psqlrc</filename>文件或者个人的<filename>~/.psqlrc</filename>文件中设置它。
        </para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>COMP_KEYWORD_CASE</varname></term>
____________________________________________________________________________-->
        <term><varname>COMP_KEYWORD_CASE</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        Determines which letter case to use when completing an SQL key word.
        If set to <literal>lower</literal> or <literal>upper</literal>, the
        completed word will be in lower or upper case, respectively.  If set
        to <literal>preserve-lower</literal>
        or <literal>preserve-upper</literal> (the default), the completed word
        will be in the case of the word already entered, but words being
        completed without anything entered will be in lower or upper case,
        respectively.
        </para>
____________________________________________________________________________-->
        <para>
        确定在补全一个 SQL 关键词时要使用的大小写形式。如果被设置为<literal>lower</literal>或者<literal>upper</literal>，补全后的词将分别是小写或者大写形式。如果被设置为<literal>preserve-lower</literal>或者<literal>preserve-upper</literal>（默认），补全后的词将会保持该词已输入部分的大小写形式，但是如果被补全的词还没有被输入，则它会被分别补全成小写或者大写形式。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>DBNAME</varname></term>
____________________________________________________________________________-->
        <term><varname>DBNAME</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        The name of the database you are currently connected to. This is
        set every time you connect to a database (including program
        start-up), but can be changed or unset.
        </para>
____________________________________________________________________________-->
        <para>
        当前已连接的数据库名称。每次连接到一个数据库时都会设置该变量（包括程序启动时），但是可以被更改或者重置。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>ECHO</varname></term>
____________________________________________________________________________-->
        <term><varname>ECHO</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        If set to <literal>all</literal>, all nonempty input lines are printed
        to standard output as they are read.  (This does not apply to lines
        read interactively.)  To select this behavior on program
        start-up, use the switch <option>-a</option>. If set to
        <literal>queries</literal>,
        <application>psql</application> prints each query to standard output
        as it is sent to the server. The switch to select this behavior is
        <option>-e</option>. If set to <literal>errors</literal>, then only
        failed queries are displayed on standard error output. The switch
        for this behavior is <option>-b</option>. If set to
        <literal>none</literal> (the default), then no queries are displayed.
        </para>
____________________________________________________________________________-->
        <para>
        如果被设置为<literal>all</literal>，所有非空输入行会被按照读入它们的样子打印到标准输出（不适用于交互式读取的行）。要在程序开始时选择这种行为，可以使用开关<option>-a</option>。如果被设置为<literal>queries</literal>，<application>psql</application>会在发送每个查询给服务器时将它们打印到标准输出。选择这种行为的开关是<option>-e</option>。如果被设置为<literal>errors</literal>，那么只有失败的查询会被显示在标准错误输出上。这种行为的开关是<option>-b</option>。如果被重置或者设置为<literal>none</literal>（默认值）则不会显示任何查询。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>ECHO_HIDDEN</varname></term>
____________________________________________________________________________-->
        <term><varname>ECHO_HIDDEN</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        When this variable is set to <literal>on</literal> and a backslash command
        queries the database, the query is first shown.
        This feature helps you to study
        <productname>PostgreSQL</productname> internals and provide
        similar functionality in your own programs. (To select this behavior
        on program start-up, use the switch <option>-E</option>.)  If you set
        this variable to the value <literal>noexec</literal>, the queries are
        just shown but are not actually sent to the server and executed.
        The default value is <literal>off</literal>.
        </para>
____________________________________________________________________________-->
        <para>
        当这个变量被设置为<literal>on</literal>且一个反斜线命令查询数据库时，相应的查询会被先显示。这种特性可以帮助我们学习<productname>PostgreSQL</productname>的内部并且在自己的程序中提供类似的功能（要在程序开始时选择这种行为，可以使用开关<option>-E</option>）。如果把这个变量设置为值<literal>noexec</literal>，则对应的查询只会被显示而并不真正被发送给服务器执行。默认值是<literal>off</literal>。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>ENCODING</varname></term>
____________________________________________________________________________-->
        <term><varname>ENCODING</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        The current client character set encoding.
        This is set every time you connect to a database (including
        program start-up), and when you change the encoding
        with <literal>\encoding</literal>, but it can be changed or unset.
        </para>
____________________________________________________________________________-->
        <para>
        当前的客户端字符集编码。每一次你连接到一个数据库（包括程序启动）时以及当你用<literal>\encoding</literal>更改编码时，这个变量都会被设置，但它可以被更改或者重置。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
       <term><varname>ERROR</varname></term>
____________________________________________________________________________-->
       <term><varname>ERROR</varname></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         <literal>true</literal> if the last SQL query failed, <literal>false</literal> if
         it succeeded.  See also <varname>SQLSTATE</varname>.
        </para>
____________________________________________________________________________-->
        <para>
         如果上一个SQL查询失败则为<literal>true</literal>，如果成功则是<literal>false</literal>。另见<varname>SQLSTATE</varname>。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>FETCH_COUNT</varname></term>
____________________________________________________________________________-->
        <term><varname>FETCH_COUNT</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        If this variable is set to an integer value greater than zero,
        the results of <command>SELECT</command> queries are fetched
        and displayed in groups of that many rows, rather than the
        default behavior of collecting the entire result set before
        display.  Therefore only a
        limited amount of memory is used, regardless of the size of
        the result set.  Settings of 100 to 1000 are commonly used
        when enabling this feature.
        Keep in mind that when using this feature, a query might
        fail after having already displayed some rows.
        </para>
____________________________________________________________________________-->
        <para>
        如果这个变量被设置为一个大于零的整数值，<command>SELECT</command>查询的结果会以一组一组的方式取出并且显示（而不是像默认的那样把整个结果集拿到以后再显示），每一组就会包括这么多个行。因此，这种方式只会使用有限的内存量，而不管整个结果集的大小。在启用这个特性时，通常会使用 100 到 1000 的设置。记住在使用这种特性时，一个查询可能会在已经显示了一些行之后失败。
        </para>
        <tip>
<!--==========================orignal english content==========================
        <para>
        Although you can use any output format with this feature,
        the default <literal>aligned</literal> format tends to look bad
        because each group of <varname>FETCH_COUNT</varname> rows
        will be formatted separately, leading to varying column
        widths across the row groups.  The other output formats work better.
        </para>
____________________________________________________________________________-->
        <para>
        尽管可以把这种特性用于任何的输出格式，但是默认的<literal>aligned</literal>格式看起来会比较糟糕，因为每一组的<varname>FETCH_COUNT</varname>个行将被单独格式化，这就会导致不同的行组的列宽不同。其他的输出格式会更好。
        </para>
        </tip>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>HISTCONTROL</varname></term>
____________________________________________________________________________-->
        <term><varname>HISTCONTROL</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
         If this variable is set to <literal>ignorespace</literal>,
         lines which begin with a space are not entered into the history
         list. If set to a value of <literal>ignoredups</literal>, lines
         matching the previous history line are not entered. A value of
         <literal>ignoreboth</literal> combines the two options. If
         set to <literal>none</literal> (the default), all lines
         read in interactive mode are saved on the history list.
        </para>
____________________________________________________________________________-->
        <para>
         如果这个变量被设置为<literal>ignorespace</literal>，则以一个空格开始的行不会被放入到历史列表中。如果被设置为值<literal>ignoredups</literal>，则匹配之前的历史行的行不会被放入。值<literal>ignoreboth</literal>组合了上述两种值。如果被重置或者被设置为<literal>none</literal>（默认值），所有在交互模式中被读入的行都会保存在历史列表中。
        </para>
        <note>
<!--==========================orignal english content==========================
        <para>
        This feature was shamelessly plagiarized from
        <application>Bash</application>.
        </para>
____________________________________________________________________________-->
        <para>
        这个特性是可耻地从<application>Bash</application>抄袭过来的。
        </para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>HISTFILE</varname></term>
____________________________________________________________________________-->
        <term><varname>HISTFILE</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        The file name that will be used to store the history list.  If unset,
        the file name is taken from the <envar>PSQL_HISTORY</envar>
        environment variable.  If that is not set either, the default
        is <filename>~/.psql_history</filename>,
        or <filename>%APPDATA%\postgresql\psql_history</filename> on Windows.
        For example, putting:
<programlisting>
\set HISTFILE ~/.psql_history- :DBNAME
</programlisting>
        in <filename>~/.psqlrc</filename> will cause
        <application>psql</application> to maintain a separate history for
        each database.
        </para>
____________________________________________________________________________-->
        <para>
        该文件名将被用于存储历史列表。如果被重设，文件名将从<envar>PSQL_HISTORY</envar>环境变量中取得。如果该环境变量也没有被设置，则默认值是<filename>~/.psql_history</filename>，在Windows上是<filename>%APPDATA%\postgresql\psql_history</filename>。例如，
<programlisting>
\set HISTFILE ~/.psql_history- :DBNAME
</programlisting>
        放在<filename>~/.psqlrc</filename>中将会导致<application>psql</application>为每一个数据库维护一个单独的历史。
        </para>
        <note>
<!--==========================orignal english content==========================
        <para>
        This feature was shamelessly plagiarized from
        <application>Bash</application>.
        </para>
____________________________________________________________________________-->
        <para>
        这个特性是可耻地从<application>Bash</application>抄袭过来的。
        </para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>HISTSIZE</varname></term>
____________________________________________________________________________-->
        <term><varname>HISTSIZE</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        The maximum number of commands to store in the command history
        (default 500).  If set to a negative value, no limit is applied.
        </para>
____________________________________________________________________________-->
        <para>
        存储在命令历史中的最大命令数（默认值是500）。如果被设置为一个负值，则不会应用限制。
        </para>
        <note>
<!--==========================orignal english content==========================
        <para>
        This feature was shamelessly plagiarized from
        <application>Bash</application>.
        </para>
____________________________________________________________________________-->
        <para>
        这个特性是可耻地从<application>Bash</application>抄袭过来的。
        </para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>HOST</varname></term>
____________________________________________________________________________-->
        <term><varname>HOST</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        The database server host you are currently connected to. This is
        set every time you connect to a database (including program
        start-up), but can be changed or unset.
        </para>
____________________________________________________________________________-->
        <para>
        当前连接到的数据库服务器端口。每次连接到一个数据库时都会设置该变量（包括程序启动时），但是可以被更改或者重置。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>IGNOREEOF</varname></term>
____________________________________________________________________________-->
        <term><varname>IGNOREEOF</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
         If set to 1 or less, sending an <acronym>EOF</acronym> character (usually
         <keycombo action="simul"><keycap>Control</keycap><keycap>D</keycap></keycombo>)
         to an interactive session of <application>psql</application>
         will terminate the application.  If set to a larger numeric value,
         that many consecutive <acronym>EOF</acronym> characters must be typed to
         make an interactive session terminate.  If the variable is set to a
         non-numeric value, it is interpreted as 10.  The default is 0.
        </para>
____________________________________________________________________________-->
        <para>
         如果被设置为1或者更小，向一个<application>psql</application>的交互式会话发送一个<acronym>EOF</acronym>字符（通常是<keycombo action="simul"><keycap>Control</keycap><keycap>D</keycap></keycombo>）将会终止应用。如果设置为一个较大的数字值，则必须键入多个连续的<acronym>EOF</acronym>字符才能让交互式会话终止。如果该变量被设置为一个非数字值，则它会被解释为10。默认值为0。
        </para>
        <note>
<!--==========================orignal english content==========================
        <para>
        This feature was shamelessly plagiarized from
        <application>Bash</application>.
        </para>
____________________________________________________________________________-->
        <para>
        这个特性是可耻地从<application>Bash</application>抄袭过来的。
        </para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>LASTOID</varname></term>
____________________________________________________________________________-->
        <term><varname>LASTOID</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        The value of the last affected OID, as returned from an
        <command>INSERT</command> or <command>\lo_import</command>
        command. This variable is only guaranteed to be valid until
        after the result of the next <acronym>SQL</acronym> command has
        been displayed.
        </para>
____________________________________________________________________________-->
        <para>
        最后被影响的 OID 的值，这可能会由<command>INSERT</command>或者<command>\lo_import</command>命令返回。这个变量只保证在下一个<acronym>SQL</acronym>命令被显示完之前有效。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
       <term><varname>LAST_ERROR_MESSAGE</varname></term>
____________________________________________________________________________-->
       <term><varname>LAST_ERROR_MESSAGE</varname></term>
<!--==========================orignal english content==========================
       <term><varname>LAST_ERROR_SQLSTATE</varname></term>
____________________________________________________________________________-->
       <term><varname>LAST_ERROR_SQLSTATE</varname></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         The primary error message and associated SQLSTATE code for the most
         recent failed query in the current <application>psql</application> session, or
         an empty string and <literal>00000</literal> if no error has occurred in
         the current session.
        </para>
____________________________________________________________________________-->
        <para>
         当前<application>psql</application>会话中最近一个失败查询的主错误消息和相关的SQLSTATE代码，如果在当前会话中没有发生错误，则是一个空字符串和<literal>00000</literal>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
      <term>
       <varname>ON_ERROR_ROLLBACK</varname>
       <indexterm>
        <primary>rollback</primary>
        <secondary>psql</secondary>
       </indexterm>
      </term>
____________________________________________________________________________-->
      <term>
       <varname>ON_ERROR_ROLLBACK</varname>
       <indexterm>
        <primary>rollback</primary>
        <secondary>psql</secondary>
       </indexterm>
      </term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        When set to <literal>on</literal>, if a statement in a transaction block
        generates an error, the error is ignored and the transaction
        continues. When set to <literal>interactive</literal>, such errors are only
        ignored in interactive sessions, and not when reading script
        files. When set to <literal>off</literal> (the default), a statement in a
        transaction block that generates an error aborts the entire
        transaction. The error rollback mode works by issuing an
        implicit <command>SAVEPOINT</command> for you, just before each command
        that is in a transaction block, and then rolling back to the
        savepoint if the command fails.
        </para>
____________________________________________________________________________-->
        <para>
        当被设置为<literal>on</literal>时，如果事务块中的一个语句产生一个错误，该错误会被忽略并且该事务会继续。当被设置为<literal>interactive</literal>时，只在交互式会话中忽略这类错误，而读取脚本文件时则不会忽略错误。当被重置或者设置为<literal>off</literal>（默认值）时，事务块中产生错误的一个语句会中止整个事务。错误回滚模式的工作原理是在事务块的每个命令之前都为你发出一个隐式的<command>SAVEPOINT</command>，然后在该命令失败时回滚到该保存点。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>ON_ERROR_STOP</varname></term>
____________________________________________________________________________-->
        <term><varname>ON_ERROR_STOP</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        By default, command processing continues after an error.  When this
        variable is set to <literal>on</literal>, processing will instead stop
        immediately.  In interactive mode,
        <application>psql</application> will return to the command prompt;
        otherwise, <application>psql</application> will exit, returning
        error code 3 to distinguish this case from fatal error
        conditions, which are reported using error code 1.  In either case,
        any currently running scripts (the top-level script, if any, and any
        other scripts which it may have in invoked) will be terminated
        immediately.  If the top-level command string contained multiple SQL
        commands, processing will stop with the current command.
        </para>
____________________________________________________________________________-->
        <para>
        默认情况下，出现一个错误后命令处理会继续下去。当这个变量被设置为<literal>on</literal>后，出现错误后命令处理会立即停止。在交互模式下，<application>psql</application>将会返回到命令提示符；否则，<application>psql</application>将会退出并且返回错误代码 3 来把这种情况与致命错误区分开来，致命错误会被报告为错误代码 1。在两种情况下，任何当前正在运行的脚本（顶层脚本以及任何它已经调用的其他脚本）将被立即中止。如果顶层命名字符串包含多个 SQL 命令，将在当前命令处停止处理。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>PORT</varname></term>
____________________________________________________________________________-->
        <term><varname>PORT</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        The database server port to which you are currently connected.
        This is set every time you connect to a database (including
        program start-up), but can be changed or unset.
        </para>
____________________________________________________________________________-->
        <para>
        当前连接到的数据库服务器端口。每次连接到一个数据库时都会设置该变量（包括程序启动时），但是可以被更改或者重置。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>PROMPT1</varname></term>
____________________________________________________________________________-->
        <term><varname>PROMPT1</varname></term>
<!--==========================orignal english content==========================
        <term><varname>PROMPT2</varname></term>
____________________________________________________________________________-->
        <term><varname>PROMPT2</varname></term>
<!--==========================orignal english content==========================
        <term><varname>PROMPT3</varname></term>
____________________________________________________________________________-->
        <term><varname>PROMPT3</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        These specify what the prompts <application>psql</application>
        issues should look like. See <xref
        linkend="app-psql-prompting"
        endterm="app-psql-prompting-title"/> below.
        </para>
____________________________________________________________________________-->
        <para>
        这些变量指定<application>psql</application>发出的提示符的模样。见下文的<xref linkend="app-psql-prompting" endterm="app-psql-prompting-title"/>。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>QUIET</varname></term>
____________________________________________________________________________-->
        <term><varname>QUIET</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        Setting this variable to <literal>on</literal> is equivalent to the command
        line option <option>-q</option>. It is probably not too useful in
        interactive mode.
        </para>
____________________________________________________________________________-->
        <para>
        把这个变量设置为<literal>on</literal>等效于命令行选项<option>-q</option>。在交互模式下可能用处不大。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
       <term><varname>ROW_COUNT</varname></term>
____________________________________________________________________________-->
       <term><varname>ROW_COUNT</varname></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         The number of rows returned or affected by the last SQL query, or 0
         if the query failed or did not report a row count.
        </para>
____________________________________________________________________________-->
        <para>
         上一个SQL查询返回的行数或者受影响的行数，如果该查询失败或者没有报告行计数则为0。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>SERVER_VERSION_NAME</varname></term>
____________________________________________________________________________-->
        <term><varname>SERVER_VERSION_NAME</varname></term>
<!--==========================orignal english content==========================
        <term><varname>SERVER_VERSION_NUM</varname></term>
____________________________________________________________________________-->
        <term><varname>SERVER_VERSION_NUM</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        The server's version number as a string, for
        example <literal>9.6.2</literal>, <literal>10.1</literal> or <literal>11beta1</literal>,
        and in numeric form, for
        example <literal>90602</literal> or <literal>100001</literal>.
        These are set every time you connect to a database
        (including program start-up), but can be changed or unset.
        </para>
____________________________________________________________________________-->
        <para>
        字符串形式的服务器版本号，例如<literal>9.6.2</literal>、<literal>10.1</literal>或者<literal>11beta1</literal>，以及数字形式的服务器版本号，例如<literal>90602</literal>或者<literal>100001</literal>。每次你连接到一个数据库（包括程序启动）时，这些都会被设置，但可以被改变或者重设。
        </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>SHOW_CONTEXT</varname></term>
____________________________________________________________________________-->
        <term><varname>SHOW_CONTEXT</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        This variable can be set to the
        values <literal>never</literal>, <literal>errors</literal>, or <literal>always</literal>
        to control whether <literal>CONTEXT</literal> fields are displayed in
        messages from the server. The default is <literal>errors</literal> (meaning
        that context will be shown in error messages, but not in notice or
        warning messages).  This setting has no effect
        when <varname>VERBOSITY</varname> is set to <literal>terse</literal>.
        (See also <command>\errverbose</command>, for use when you want a verbose
        version of the error you just got.)
        </para>
____________________________________________________________________________-->
        <para>
        这个变量可以被设置为值<literal>never</literal>、<literal>errors</literal>或者<literal>always</literal>来控制是否在来自服务器的消息中显示<literal>CONTEXT</literal>域。默认是<literal>errors</literal>（表示在错误消息中显示上下文，但在通知和警告消息中不显示）。当<varname>VERBOSITY</varname>被设置为<literal>terse</literal>时，这个设置无效（另见<command>\errverbose</command>，它可以用来得到刚遇到的错误的详细信息）。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>SINGLELINE</varname></term>
____________________________________________________________________________-->
        <term><varname>SINGLELINE</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        Setting this variable to <literal>on</literal> is equivalent to the command
        line option <option>-S</option>.
        </para>
____________________________________________________________________________-->
        <para>
        设置这个变量为<literal>on</literal>等效于命令行选项<option>-S</option>。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>SINGLESTEP</varname></term>
____________________________________________________________________________-->
        <term><varname>SINGLESTEP</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        Setting this variable to <literal>on</literal> is equivalent to the command
        line option <option>-s</option>.
        </para>
____________________________________________________________________________-->
        <para>
        设置这个变量为<literal>on</literal>等效于命令选项<option>-s</option>。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
       <term><varname>SQLSTATE</varname></term>
____________________________________________________________________________-->
       <term><varname>SQLSTATE</varname></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         The error code (see <xref linkend="errcodes-appendix"/>) associated
         with the last SQL query's failure, or <literal>00000</literal> if it
         succeeded.
        </para>
____________________________________________________________________________-->
        <para>
         与上一个SQL查询的失败相关的错误代码（见<xref linkend="errcodes-appendix"/>），如果上一个查询成功则为<literal>00000</literal>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>USER</varname></term>
____________________________________________________________________________-->
        <term><varname>USER</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        The database user you are currently connected as. This is set
        every time you connect to a database (including program
        start-up), but can be changed or unset.
        </para>
____________________________________________________________________________-->
        <para>
        当前连接的数据库用户。每次连接到一个数据库时都会设置该变量（包括程序启动时），但是可以被更改或者重置。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>VERBOSITY</varname></term>
____________________________________________________________________________-->
        <term><varname>VERBOSITY</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        This variable can be set to the values <literal>default</literal>,
        <literal>verbose</literal>, or <literal>terse</literal> to control the verbosity
        of error reports.
        (See also <command>\errverbose</command>, for use when you want a verbose
        version of the error you just got.)
        </para>
____________________________________________________________________________-->
        <para>
        这个变量可以被设置为值<literal>default</literal>、<literal>verbose</literal>或者<literal>terse</literal>来控制错误报告的详细程度（另见<command>\errverbose</command>，在想得到之前的错误的详细版本时使用）。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
<!--==========================orignal english content==========================
        <term><varname>VERSION</varname></term>
____________________________________________________________________________-->
        <term><varname>VERSION</varname></term>
<!--==========================orignal english content==========================
        <term><varname>VERSION_NAME</varname></term>
____________________________________________________________________________-->
        <term><varname>VERSION_NAME</varname></term>
<!--==========================orignal english content==========================
        <term><varname>VERSION_NUM</varname></term>
____________________________________________________________________________-->
        <term><varname>VERSION_NUM</varname></term>
        <listitem>
<!--==========================orignal english content==========================
        <para>
        These variables are set at program start-up to reflect
        <application>psql</application>'s version, respectively as a verbose string,
        a short string (e.g., <literal>9.6.2</literal>, <literal>10.1</literal>,
        or <literal>11beta1</literal>), and a number (e.g., <literal>90602</literal>
        or <literal>100001</literal>).  They can be changed or unset.
        </para>
____________________________________________________________________________-->
        <para>
        这些变量在程序启动时被设置以反映<application>psql</application>的版本，分别是一个详细的字符串、一个短字符串（例如<literal>9.6.2</literal>、<literal>10.1</literal>或者<literal>11beta1</literal>）以及一个数字（例如<literal>90602</literal>或者<literal>100001</literal>）。它们可以被更改或重设。
        </para>
        </listitem>
      </varlistentry>

    </variablelist>

   </refsect3>

   <refsect3 id="app-psql-interpolation">
<!--==========================orignal english content==========================
    <title id="app-psql-interpolation-title"><acronym>SQL</acronym> Interpolation</title>
____________________________________________________________________________-->
    <title id="app-psql-interpolation-title"><acronym>SQL</acronym> 中插入变量</title>

<!--==========================orignal english content==========================
    <para>
    A key feature of <application>psql</application>
    variables is that you can substitute (<quote>interpolate</quote>)
    them into regular <acronym>SQL</acronym> statements, as well as the
    arguments of meta-commands.  Furthermore,
    <application>psql</application> provides facilities for
    ensuring that variable values used as SQL literals and identifiers are
    properly quoted.  The syntax for interpolating a value without
    any quoting is to prepend the variable name with a colon
    (<literal>:</literal>).  For example,
<programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :foo;</userinput>
</programlisting>
    would query the table <literal>my_table</literal>. Note that this
    may be unsafe: the value of the variable is copied literally, so it can
    contain unbalanced quotes, or even backslash commands. You must make sure
    that it makes sense where you put it.
    </para>
____________________________________________________________________________-->
    <para>
    <application>psql</application>变量的一个关键特性是可以把它们替换（<quote>插入</quote>）到常规<acronym>SQL</acronym>语句中，也可以把它们作为元命令的参数。此外，<application>psql</application>还提供了功能来确保被用作 SQL 文字和标识符的变量值会被正确地引用。插入一个值而不需要加引用的语法是在变量名前面加上一个冒号（<literal>:</literal>）。例如，
<programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :foo;</userinput>
</programlisting>
    将查询表<literal>my_table</literal>。注意这可能会不安全：该变量的值会被按字面拷贝，因此它可能包含不平衡的引号甚至反斜线命令。必须确保把它放在那里是有意义的。
    </para>

<!--==========================orignal english content==========================
    <para>
    When a value is to be used as an SQL literal or identifier, it is
    safest to arrange for it to be quoted.  To quote the value of
    a variable as an SQL literal, write a colon followed by the variable
    name in single quotes.  To quote the value as an SQL identifier, write
    a colon followed by the variable name in double quotes.
    These constructs deal correctly with quotes and other special
    characters embedded within the variable value.
    The previous example would be more safely written this way:
<programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :"foo";</userinput>
</programlisting>
    </para>
____________________________________________________________________________-->
    <para>
    当一个值被用作 SQL 文本或者标识符时，最安全的是把它加上引用。要引用一个变量的值作为 SQL 文本，可以把变量名称放在单引号中并且在引号前面写一个冒号。要引用作为 SQL 标识符，则可以把变量名称放在双引号中并且在引号前面写一个冒号。这种结构可以正确地处理变量值中嵌入的引号和其他特殊字符。之前的例子用这种方法写会更安全：
<programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :"foo";</userinput>
</programlisting>
    </para>

<!--==========================orignal english content==========================
    <para>
    Variable interpolation will not be performed within quoted
    <acronym>SQL</acronym> literals and identifiers.  Therefore, a
    construction such as <literal>':foo'</literal> doesn't work to produce a quoted
    literal from a variable's value (and it would be unsafe if it did work,
    since it wouldn't correctly handle quotes embedded in the value).
    </para>
____________________________________________________________________________-->
    <para>
    在被引用的<acronym>SQL</acronym>文本和标识符中将不会执行变量插入。因此，一个诸如<literal>':foo'</literal>的结构不会从一个变量的值产生一个被引用的文本（即便能够也会不安全，因为无法正确地处理嵌入在值中的引号）。
    </para>

<!--==========================orignal english content==========================
    <para>
    One example use of this mechanism is to
    copy the contents of a file into a table column.
    First load the file into a variable and then interpolate the variable's
    value as a quoted string:
<programlisting>
testdb=&gt; <userinput>\set content `cat my_file.txt`</userinput>
testdb=&gt; <userinput>INSERT INTO my_table VALUES (:'content');</userinput>
</programlisting>
    (Note that this still won't work if <filename>my_file.txt</filename> contains NUL bytes.
    <application>psql</application> does not support embedded NUL bytes in variable values.)
    </para>
____________________________________________________________________________-->
    <para>
    使用这种机制的一个例子是把一个文件的内容拷贝到一个表列中。首先把该文件载入到一个变量，然后把该变量的值作为一个被引用的字符串插入：
<programlisting>
testdb=&gt; <userinput>\set content `cat my_file.txt`</userinput>
testdb=&gt; <userinput>INSERT INTO my_table VALUES (:'content');</userinput>
</programlisting>
    （注意如果<filename>my_file.txt</filename>包含 NUL 字节，这样也不行。<application>psql</application>不支持在变量值中嵌入 NUL 字节）。
    </para>

<!--==========================orignal english content==========================
    <para>
    Since colons can legally appear in SQL commands, an apparent attempt
    at interpolation (that is, <literal>:name</literal>,
    <literal>:'name'</literal>, or <literal>:"name"</literal>) is not
    replaced unless the named variable is currently set. In any case, you
    can escape a colon with a backslash to protect it from substitution.
    </para>
____________________________________________________________________________-->
    <para>
    因为冒号可以合法地出现在 SQL 命令中，一次明显的插入尝试（即<literal>:name</literal>、<literal>:'name'</literal>或者<literal>:"name"</literal>）不会被替换，除非所提及的变量就是当前被设置的。在任何情况下，可以用一个反斜线对冒号进行转义以避免它被替换。
    </para>

<!--==========================orignal english content==========================
    <para>
    The <literal>:{?<replaceable>name</replaceable>}</literal> special syntax returns TRUE
    or FALSE depending on whether the variable exists or not, and is thus
    always substituted, unless the colon is backslash-escaped.
    </para>
____________________________________________________________________________-->
    <para>
    <literal>:{?<replaceable>name</replaceable>}</literal>特殊语法根据该变量存在与否返回TRUE或者FALSE，并且因此总是会被替换，除非分号被反斜线转义。
    </para>

<!--==========================orignal english content==========================
    <para>
    The colon syntax for variables is standard <acronym>SQL</acronym> for
    embedded query languages, such as <application>ECPG</application>.
    The colon syntaxes for array slices and type casts are
    <productname>PostgreSQL</productname> extensions, which can sometimes
    conflict with the standard usage.  The colon-quote syntax for escaping a
    variable's value as an SQL literal or identifier is a
    <application>psql</application> extension.
    </para>
____________________________________________________________________________-->
    <para>
    变量的冒号语法对嵌入式查询语言（例如<application>ECPG</application>）来说是标准的<acronym>SQL</acronym>。用于数组切片和类型造型的冒号语法是<productname>PostgreSQL</productname>扩展，它有时可能会与标准用法冲突。把一个变量值转义成 SQL 文本或者标识符的冒号引用语法是一种<application>psql</application>扩展。
    </para>

   </refsect3>

   <refsect3 id="app-psql-prompting">
<!--==========================orignal english content==========================
    <title id="app-psql-prompting-title">Prompting</title>
____________________________________________________________________________-->
    <title id="app-psql-prompting-title">提示符</title>

<!--==========================orignal english content==========================
    <para>
    The prompts <application>psql</application> issues can be customized
    to your preference. The three variables <varname>PROMPT1</varname>,
    <varname>PROMPT2</varname>, and <varname>PROMPT3</varname> contain strings
    and special escape sequences that describe the appearance of the
    prompt. Prompt 1 is the normal prompt that is issued when
    <application>psql</application> requests a new command. Prompt 2 is
    issued when more input is expected during command entry, for example
    because the command was not terminated with a semicolon or a quote
    was not closed.
    Prompt 3 is issued when you are running an <acronym>SQL</acronym>
    <command>COPY FROM STDIN</command> command and you need to type in
    a row value on the terminal.
    </para>
____________________________________________________________________________-->
    <para>
    <application>psql</application>发出的提示符可以根据用户的喜好自定义。<varname>PROMPT1</varname>、<varname>PROMPT2</varname>和<varname>PROMPT3</varname>这三个变量包含了描述提示符外观的字符串和特殊转义序列。Prompt 1 是当<application>psql</application>等待新命令时发出的常规提示符。Prompt 2 是在命令输入时需要更多输入时发出的提示符，例如因为当命令没有被分号终止或者引用没有被关闭时就会发出这个提示符。在运行一个<acronym>SQL</acronym> <command>COPY FROM STDIN</command>命令并且需要在终端上输入一个行值时，会发出 Prompt 3。
    </para>

<!--==========================orignal english content==========================
    <para>
    The value of the selected prompt variable is printed literally,
    except where a percent sign (<literal>%</literal>) is encountered.
    Depending on the next character, certain other text is substituted
    instead. Defined substitutions are:

    <variablelist>
      <varlistentry>
        <term><literal>%M</literal></term>
        <listitem>
         <para>
          The full host name (with domain name) of the database server,
          or <literal>[local]</literal> if the connection is over a Unix
          domain socket, or
          <literal>[local:<replaceable>/dir/name</replaceable>]</literal>,
          if the Unix domain socket is not at the compiled in default
          location.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%m</literal></term>
        <listitem>
         <para>
          The host name of the database server, truncated at the
          first dot, or <literal>[local]</literal> if the connection is
          over a Unix domain socket.
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%&gt;</literal></term>
        <listitem><para>The port number at which the database server is listening.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%n</literal></term>
        <listitem>
         <para>
          The database session user name.  (The expansion of this
          value might change during a database session as the result
          of the command <command>SET SESSION
          AUTHORIZATION</command>.)
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%/</literal></term>
        <listitem><para>The name of the current database.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%~</literal></term>
        <listitem><para>Like <literal>%/</literal>, but the output is <literal>~</literal>
         (tilde) if the database is your default database.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%#</literal></term>
        <listitem>
         <para>
          If the session user is a database superuser, then a
          <literal>#</literal>, otherwise a <literal>&gt;</literal>.
          (The expansion of this value might change during a database
          session as the result of the command <command>SET SESSION
          AUTHORIZATION</command>.)
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%p</literal></term>
        <listitem>
         <para>The process ID of the backend currently connected to.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%R</literal></term>
        <listitem>
        <para>
        In prompt 1 normally <literal>=</literal>,
        but <literal>@</literal> if the session is in an inactive branch of a
        conditional block, or <literal>^</literal> if in single-line mode,
        or <literal>!</literal> if the session is disconnected from the
        database (which can happen if <command>\connect</command> fails).
        In prompt 2 <literal>%R</literal> is replaced by a character that
        depends on why <application>psql</application> expects more input:
        <literal>-</literal> if the command simply wasn't terminated yet,
        but <literal>*</literal> if there is an unfinished
        <literal>/* ... */</literal> comment,
        a single quote if there is an unfinished quoted string,
        a double quote if there is an unfinished quoted identifier,
        a dollar sign if there is an unfinished dollar-quoted string,
        or <literal>(</literal> if there is an unmatched left parenthesis.
        In prompt 3 <literal>%R</literal> doesn't produce anything.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%x</literal></term>
        <listitem>
        <para>
        Transaction status: an empty string when not in a transaction
        block, or <literal>*</literal> when in a transaction block, or
        <literal>!</literal> when in a failed transaction block, or <literal>?</literal>
        when the transaction state is indeterminate (for example, because
        there is no connection).
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%l</literal></term>
        <listitem>
         <para>
          The line number inside the current statement, starting from <literal>1</literal>.
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%</literal><replaceable class="parameter">digits</replaceable></term>
        <listitem>
        <para>
        The character with the indicated octal code is substituted.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%:</literal><replaceable class="parameter">name</replaceable><literal>:</literal></term>
        <listitem>
        <para>
        The value of the <application>psql</application> variable
        <replaceable class="parameter">name</replaceable>. See the
        section <xref linkend="app-psql-variables"
        endterm="app-psql-variables-title"/> for details.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%`</literal><replaceable class="parameter">command</replaceable><literal>`</literal></term>
        <listitem>
        <para>
        The output of <replaceable
        class="parameter">command</replaceable>, similar to ordinary
        <quote>back-tick</quote> substitution.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%[</literal> ... <literal>%]</literal></term>
        <listitem>
         <para>
         Prompts can contain terminal control characters which, for
         example, change the color, background, or style of the prompt
         text, or change the title of the terminal window. In order for
         the line editing features of <application>Readline</application> to work properly, these
         non-printing control characters must be designated as invisible
         by surrounding them with <literal>%[</literal> and
         <literal>%]</literal>. Multiple pairs of these can occur within
         the prompt.  For example:
<programlisting>
testdb=&gt; \set PROMPT1 '%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%# '
</programlisting>
         results in a boldfaced (<literal>1;</literal>) yellow-on-black
         (<literal>33;40</literal>) prompt on VT100-compatible, color-capable
         terminals.
        </para>
        </listitem>
      </varlistentry>

    </variablelist>

    To insert a percent sign into your prompt, write
    <literal>%%</literal>. The default prompts are
    <literal>'%/%R%# '</literal> for prompts 1 and 2, and
    <literal>'&gt;&gt; '</literal> for prompt 3.
    </para>
____________________________________________________________________________-->
    <para>
    被选中的提示符变量会被原样打印，除非碰到一个百分号（<literal>%</literal>）。百分号的下一个字符会被特定的其他文本替换。预定义好的替换有：

    <variablelist>
      <varlistentry>
        <term><literal>%M</literal></term>
        <listitem>
         <para>
          数据库服务器的完整主机名（带有域名），或者当该连接是建立在一个 Unix 域套接字上时则是<literal>[local]</literal>，或者当 Unix 域套接字不在编译在系统内的默认位置上时则是<literal>[local:<replaceable>/dir/name</replaceable>]</literal>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%m</literal></term>
        <listitem>
         <para>
          数据库服务器的主机名称（在第一个点处截断），或者当连接建立在一个 Unix 域套接字上时是<literal>[local]</literal>。
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%&gt;</literal></term>
        <listitem><para>数据库服务器正在监听的端口号。</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%n</literal></term>
        <listitem>
         <para>
          数据库会话的用户名（在数据库会话期间，这个值可能会因为命令<command>SET SESSION AUTHORIZATION</command>的结果而改变）。
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%/</literal></term>
        <listitem><para>当前数据库的名称。</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%~</literal></term>
        <listitem><para>和<literal>%/</literal>类似，但是如果数据库是默认数据库时输出是<literal>~</literal>（波浪线）。</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%#</literal></term>
        <listitem>
         <para>
          如果会话用户时一个数据库超级用户，则是<literal>#</literal>，否则是一个<literal>&gt;</literal>（在数据库会话期间，这个值可能会因为命令<command>SET SESSION AUTHORIZATION</command>的结果而改变）。
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%p</literal></term>
        <listitem>
         <para>当前连接到的后端的进程 ID。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%R</literal></term>
        <listitem>
        <para>
        在提示符1下通常是<literal>=</literal>，但如果会话位于一个条件块的一个非活动分支中则是<literal>@</literal>，如果会话处于单行模式中则是<literal>^</literal>，如果会话从数据库断开连接（<command>\connect</command>失败时会发生这种情况）则是<literal>!</literal>。在提示符 2 中，根据为什么<application>psql</application>期待更多的输入，<literal>%R</literal>会被一个相应的字符替换：如果命令还没有被终止是<literal>-</literal>，如果有一个未完的<literal>/* ... */</literal>注释则是<literal>*</literal>，如果有一个未完的被引用字符串则是一个单引号，如果有一个未完的被引用标识符则是一个双引号，如果有一个未完的美元引用字符串则是一个美元符号，如果有一个还没有被配对的左圆括号则是<literal>(</literal>。在提示符 3 中<literal>%R</literal>不会产生任何东西。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%x</literal></term>
        <listitem>
        <para>
        事务状态：当不在事务块中时是一个空字符串，在一个事务块中时是<literal>*</literal>，在一个失败的事务块中时是<literal>!</literal>，当事务状态是未判定时（例如因为没有连接）为<literal>?</literal>。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%l</literal></term>
        <listitem>
         <para>
          当前语句中的行号，从<literal>1</literal>开始。
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%</literal><replaceable class="parameter">digits</replaceable></term>
        <listitem>
        <para>
        带有指定的八进制码的字符会被替换。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%:</literal><replaceable class="parameter">name</replaceable><literal>:</literal></term>
        <listitem>
        <para>
        <application>psql</application>变量<replaceable class="parameter">name</replaceable>的值。详见<xref linkend="app-psql-variables" endterm="app-psql-variables-title"/>。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%`</literal><replaceable class="parameter">command</replaceable><literal>`</literal></term>
        <listitem>
        <para>
        <replaceable class="parameter">command</replaceable>的输出，类似于平常的<quote>反引号</quote>替换。
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%[</literal> ... <literal>%]</literal></term>
        <listitem>
         <para>
         提示符可以包含终端控制字符，例如改变提示符文本的颜色、背景或者风格以及更改终端窗口标题的控制字符。为了让<application>Readline</application>的行编辑特性正确工作，这些不可打印的控制字符必须被包裹在<literal>%[</literal>和<literal>%]</literal>之间以指定它们是不可见的。在提示附中可以出现多个这样的标识对。例如：
<programlisting>
testdb=&gt; \set PROMPT1 '%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%# '
</programlisting>
         会导致一个在兼容 VT100 的彩色终端上的粗体（<literal>1;</literal>）的、黑底黄字（<literal>33;40</literal>）的提示符。
        </para>
        </listitem>
      </varlistentry>

    </variablelist>

    要在你的提示符中插入一个百分号，可以写成<literal>%%</literal>。提示符 1 和 2 的默认提示是<literal>'%/%R%# '</literal>，提示符 3 的提示是<literal>'&gt;&gt; '</literal>。
    </para>

    <note>
<!--==========================orignal english content==========================
    <para>
    This feature was shamelessly plagiarized from
    <application>tcsh</application>.
    </para>
____________________________________________________________________________-->
    <para>
    这个特性是可耻地从<application>tcsh</application>抄袭过来的。
    </para>
    </note>

   </refsect3>

   <refsect3>
<!--==========================orignal english content==========================
    <title>Command-Line Editing</title>
____________________________________________________________________________-->
    <title>命令行编辑</title>

<!--==========================orignal english content==========================
    <para>
    <application>psql</application> supports the <application>Readline</application>
    library for convenient line editing and retrieval. The command
    history is automatically saved when <application>psql</application>
    exits and is reloaded when
    <application>psql</application> starts up. Tab-completion is also
    supported, although the completion logic makes no claim to be an
    <acronym>SQL</acronym> parser.  The queries generated by tab-completion
    can also interfere with other SQL commands, e.g. <literal>SET
    TRANSACTION ISOLATION LEVEL</literal>.
    If for some reason you do not like the tab completion, you
    can turn it off by putting this in a file named
    <filename>.inputrc</filename> in your home directory:
<programlisting>
$if psql
set disable-completion on
$endif
</programlisting>
    (This is not a <application>psql</application> but a
    <application>Readline</application> feature. Read its documentation
    for further details.)
    </para>
____________________________________________________________________________-->
    <para>
    为了方便的行编辑和检索，<application>psql</application>支持<application>Readline</application>库。<application>psql</application>退出时命令历史会被自动保存，而当<application>psql</application>启动时命令历史会被重新载入。<application>psql</application>也支持 tab 补全，不过补全逻辑绝不是一个<acronym>SQL</acronym>解析器。tab 补全产生的查询也可能会受其他 SQL 命令干扰，例如<literal>SET TRANSACTION ISOLATION LEVEL</literal>。如果出于某种原因不想用 tab 键补全，可以把下面的代码放在主目录下的名为<filename>.inputrc</filename>文件中关闭该特性：
<programlisting>
$if psql
set disable-completion on
$endif
</programlisting>
    （这不是<application>psql</application>特性而是<application>Readline</application>的特性。进一步的细节请阅读它的文档。）
    </para>
   </refsect3>
  </refsect2>
 </refsect1>


 <refsect1 id="app-psql-environment">
<!--==========================orignal english content==========================
  <title id="app-psql-environment-title">Environment</title>
____________________________________________________________________________-->
  <title id="app-psql-environment-title">环境</title>

  <variablelist>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>COLUMNS</envar></term>
____________________________________________________________________________-->
    <term><envar>COLUMNS</envar></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      If <literal>\pset columns</literal> is zero, controls the
      width for the <literal>wrapped</literal> format and width for determining
      if wide output requires the pager or should be switched to the
      vertical format in expanded auto mode.
     </para>
____________________________________________________________________________-->
     <para>
      如果<literal>\pset columns</literal>为零，这个环境变量控制用于<literal>wrapped</literal>格式的宽度以及用来确定是否输出需要用到分页器或者切换到扩展自动模式中的垂直格式的宽度。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>PGDATABASE</envar></term>
____________________________________________________________________________-->
    <term><envar>PGDATABASE</envar></term>
<!--==========================orignal english content==========================
    <term><envar>PGHOST</envar></term>
____________________________________________________________________________-->
    <term><envar>PGHOST</envar></term>
<!--==========================orignal english content==========================
    <term><envar>PGPORT</envar></term>
____________________________________________________________________________-->
    <term><envar>PGPORT</envar></term>
<!--==========================orignal english content==========================
    <term><envar>PGUSER</envar></term>
____________________________________________________________________________-->
    <term><envar>PGUSER</envar></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Default connection parameters (see <xref linkend="libpq-envars"/>).
     </para>
____________________________________________________________________________-->
     <para>
      默认连接参数（见<xref linkend="libpq-envars"/>）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>PSQL_EDITOR</envar></term>
____________________________________________________________________________-->
    <term><envar>PSQL_EDITOR</envar></term>
<!--==========================orignal english content==========================
    <term><envar>EDITOR</envar></term>
____________________________________________________________________________-->
    <term><envar>EDITOR</envar></term>
<!--==========================orignal english content==========================
    <term><envar>VISUAL</envar></term>
____________________________________________________________________________-->
    <term><envar>VISUAL</envar></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Editor used by the <command>\e</command>, <command>\ef</command>,
      and <command>\ev</command> commands.
      These variables are examined in the order listed;
      the first that is set is used.
      If none of them is set, the default is to use <filename>vi</filename>
      on Unix systems or <filename>notepad.exe</filename> on Windows systems.
     </para>
____________________________________________________________________________-->
     <para>
      <command>\e</command>、<command>\ef</command>以及<command>\ev</command>命令所使用的编辑器。会按照列出的顺序检查这些变量，第一个被设置的将被使用。如果都没有被设置，默认是使用Unix系统上的<filename>vi</filename>或者Windows系统上的<filename>notepad.exe</filename>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>PSQL_EDITOR_LINENUMBER_ARG</envar></term>
____________________________________________________________________________-->
    <term><envar>PSQL_EDITOR_LINENUMBER_ARG</envar></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      When <command>\e</command>, <command>\ef</command>, or
      <command>\ev</command> is used
      with a line number argument, this variable specifies the
      command-line argument used to pass the starting line number to
      the user's editor.  For editors such as <productname>Emacs</productname> or
      <productname>vi</productname>, this is a plus sign.  Include a trailing
      space in the value of the variable if there needs to be space
      between the option name and the line number.  Examples:
<programlisting>
PSQL_EDITOR_LINENUMBER_ARG='+'
PSQL_EDITOR_LINENUMBER_ARG='-&minus;line '
</programlisting>
     </para>
____________________________________________________________________________-->
     <para>
      当<command>\e</command>、<command>\ef</command>或者<command>\ev</command>带有一个行号参数时，这个变量指定用于传递起始行号给用户编辑器的命令行参数。对于<productname>Emacs</productname>或者<productname>vi</productname>之类的编辑器，这个变量是一个加号。如果需要在选项名称和行号之间有空格，可以在该变量的值中包括一个结尾的空格。例如：
<programlisting>
PSQL_EDITOR_LINENUMBER_ARG='+'
PSQL_EDITOR_LINENUMBER_ARG='--line '
</programlisting>
     </para>

<!--==========================orignal english content==========================
     <para>
      The default is <literal>+</literal> on Unix systems
      (corresponding to the default editor <filename>vi</filename>,
      and useful for many other common editors); but there is no
      default on Windows systems.
     </para>
____________________________________________________________________________-->
     <para>
      在 Unix 系统上默认是<literal>+</literal>（对应于默认编辑器<filename>vi</filename>，且对很多其他常见编辑器可用）。在 Windows 系统上没有默认值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>PSQL_HISTORY</envar></term>
____________________________________________________________________________-->
    <term><envar>PSQL_HISTORY</envar></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Alternative location for the command history file. Tilde (<literal>~</literal>) expansion is performed.
     </para>
____________________________________________________________________________-->
     <para>
      命令历史文件的替代位置。波浪线（<literal>~</literal>）扩展会被执行。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>PSQL_PAGER</envar></term>
____________________________________________________________________________-->
    <term><envar>PSQL_PAGER</envar></term>
<!--==========================orignal english content==========================
    <term><envar>PAGER</envar></term>
____________________________________________________________________________-->
    <term><envar>PAGER</envar></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      If a query's results do not fit on the screen, they are piped
      through this command. Typical values are <literal>more</literal>
      or <literal>less</literal>.
      Use of the pager can be disabled by setting <envar>PSQL_PAGER</envar>
      or <envar>PAGER</envar> to an empty string, or by adjusting the
      pager-related options of the <command>\pset</command> command.
      These variables are examined in the order listed;
      the first that is set is used.
      If none of them is set, the default is to use <literal>more</literal> on most
      platforms, but <literal>less</literal> on Cygwin.
     </para>
____________________________________________________________________________-->
     <para>
      如果一个查询的结果在屏幕上放不下，它们会通过这个命令分页显示。典型的值是<literal>more</literal>或<literal>less</literal>。通过把<envar>PSQL_PAGER</envar>或<envar>PAGER</envar>设置为空字符串可以禁用分页器的使用，调整<command>\pset</command>命令与分页器相关的选项也能达到同样的效果。会按照列出的顺序检查这些变量，第一个被设置的将被使用。如果都没有被设置，则大部分平台上默认使用<literal>more</literal>，但在Cygwin上使用<literal>less</literal>。
     </para>

    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>PSQLRC</envar></term>
____________________________________________________________________________-->
    <term><envar>PSQLRC</envar></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Alternative location of the user's <filename>.psqlrc</filename> file. Tilde (<literal>~</literal>) expansion is performed.
     </para>
____________________________________________________________________________-->
     <para>
      用户的<filename>.psqlrc</filename>文件的替代位置。波浪线（<literal>~</literal>）扩展会被执行。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>SHELL</envar></term>
____________________________________________________________________________-->
    <term><envar>SHELL</envar></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Command executed by the <command>\!</command> command.
     </para>
____________________________________________________________________________-->
     <para>
      被<command>\!</command>命令执行的命令。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>TMPDIR</envar></term>
____________________________________________________________________________-->
    <term><envar>TMPDIR</envar></term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      Directory for storing temporary files.  The default is
      <filename>/tmp</filename>.
     </para>
____________________________________________________________________________-->
     <para>
      存储临时文件的目录。默认是<filename>/tmp</filename>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

<!--==========================orignal english content==========================
  <para>
   This utility, like most other <productname>PostgreSQL</productname> utilities,
   also uses the environment variables supported by <application>libpq</application>
   (see <xref linkend="libpq-envars"/>).
  </para>
____________________________________________________________________________-->
  <para>
   和大部分其他<productname>PostgreSQL</productname>工具一样，这个工具也使用<application>libpq</application>所支持的环境变量（见<xref linkend="libpq-envars"/>）。
  </para>

 </refsect1>


 <refsect1>
<!--==========================orignal english content==========================
  <title>Files</title>
____________________________________________________________________________-->
  <title>文件</title>

 <variablelist>
  <varlistentry>
<!--==========================orignal english content==========================
   <term><filename>psqlrc</filename> and <filename>~/.psqlrc</filename></term>
____________________________________________________________________________-->
   <term><filename>psqlrc</filename> and <filename>~/.psqlrc</filename></term>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     Unless it is passed an <option>-X</option> option,
     <application>psql</application> attempts to read and execute commands
     from the system-wide startup file (<filename>psqlrc</filename>) and then
     the user's personal startup file (<filename>~/.psqlrc</filename>), after
     connecting to the database but before accepting normal commands.
     These files can be used to set up the client and/or the server to taste,
     typically with <command>\set</command> and <command>SET</command>
     commands.
    </para>
____________________________________________________________________________-->
    <para>
     如果没有<option>-X</option>选项，在连接到数据库后但在接收正常的命令之前，<application>psql</application>会尝试依次从系统级的启动文件（<filename>psqlrc</filename>）和用户的个人启动文件（<filename>~/.psqlrc</filename>）中读取并且执行命令。这些文件可以被用来设置客户端或者服务器，通常是一些<command>\set</command>和<command>SET</command>命令。
    </para>
<!--==========================orignal english content==========================
    <para>
     The system-wide startup file is named <filename>psqlrc</filename> and is
     sought in the installation's <quote>system configuration</quote> directory,
     which is most reliably identified by running <literal>pg_config
     -&minus;sysconfdir</literal>.  By default this directory will be <filename>../etc/</filename>
     relative to the directory containing
     the <productname>PostgreSQL</productname> executables.  The name of this
     directory can be set explicitly via the <envar>PGSYSCONFDIR</envar>
     environment variable.
    </para>
____________________________________________________________________________-->
    <para>
     系统级的启动文件是<filename>psqlrc</filename>，它应该在安装好的<productname>PostgreSQL</productname>的<quote>系统配置</quote>目录中，最可靠的定位方法是运行<literal>pg_config --sysconfdir</literal>。默认情况下，这个目录将是<filename>../etc/</filename>（相对于包含<productname>PostgreSQL</productname>可执行文件的目录）。可以通过<envar>PGSYSCONFDIR</envar>环境变量显式地设置这个目录的名称。
    </para>
<!--==========================orignal english content==========================
    <para>
     The user's personal startup file is named <filename>.psqlrc</filename>
     and is sought in the invoking user's home directory.  On Windows, which
     lacks such a concept, the personal startup file is named
     <filename>%APPDATA%\postgresql\psqlrc.conf</filename>.
     The location of the user's startup file can be set explicitly via
     the <envar>PSQLRC</envar> environment variable.
    </para>
____________________________________________________________________________-->
    <para>
     用户个人的启动文件是<filename>.psqlrc</filename>，它应该在调用用户的主目录中。在 Windows 上，由于没有用户主目录的概念，个人的启动文件是<filename>%APPDATA%\postgresql\psqlrc.conf</filename>。用户启动文件的位置可以通过<envar>PSQLRC</envar>环境变量设置。        
    </para>
<!--==========================orignal english content==========================
    <para>
     Both the system-wide startup file and the user's personal startup file
     can be made <application>psql</application>-version-specific
     by appending a dash and the <productname>PostgreSQL</productname>
     major or minor release number to the file name,
     for example <filename>~/.psqlrc-9.2</filename> or
     <filename>~/.psqlrc-9.2.5</filename>.  The most specific
     version-matching file will be read in preference to a
     non-version-specific file.
    </para>
____________________________________________________________________________-->
    <para>
     系统级和用户个人的启动文件都可以弄成是针对特定<application>psql</application>版本的，方法是在文件名后面加上一个横线以及<productname>PostgreSQL</productname>的主、次版本号，例如<filename>~/.psqlrc-9.2</filename>或者<filename>~/.psqlrc-9.2.5</filename>。版本最为匹配的文件会优先于不那么匹配的文件读入。
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
<!--==========================orignal english content==========================
   <term><filename>.psql_history</filename></term>
____________________________________________________________________________-->
   <term><filename>.psql_history</filename></term>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     The command-line history is stored in the file
     <filename>~/.psql_history</filename>, or
     <filename>%APPDATA%\postgresql\psql_history</filename> on Windows.
    </para>
____________________________________________________________________________-->
    <para>
     命令行历史被存储在文件<filename>~/.psql_history</filename>中，或者是 Windows 的文件<filename>%APPDATA%\postgresql\psql_history</filename>中。
    </para>
<!--==========================orignal english content==========================
    <para>
     The location of the history file can be set explicitly via
     the <varname>HISTFILE</varname> <application>psql</application> variable or
     the <envar>PSQL_HISTORY</envar> environment variable.
    </para>
____________________________________________________________________________-->
    <para>
     历史文件的位置可以通过<varname>HISTFILE</varname> <application>psql</application>变量或者<envar>PSQL_HISTORY</envar>环境变量明确的设置。
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 </refsect1>


 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

    <itemizedlist>
      <listitem>
<!--==========================orignal english content==========================
      <para><application>psql</application> works best with servers of the same
       or an older major version.  Backslash commands are particularly likely
       to fail if the server is of a newer version than <application>psql</application>
       itself.  However, backslash commands of the <literal>\d</literal> family should
       work with servers of versions back to 7.4, though not necessarily with
       servers newer than <application>psql</application> itself.  The general
       functionality of running SQL commands and displaying query results
       should also work with servers of a newer major version, but this cannot
       be guaranteed in all cases.
      </para>
____________________________________________________________________________-->
      <para><application>psql</application>和具有相同主版本或者更老的主版本服务器最为匹配。如果服务器的版本比<application>psql</application>本身要高，则反斜线命令尤其容易失败。不过，<literal>\d</literal>家族的反斜线命令应该可以和版本 7.4 之后的服务器一起使用，但服务器的版本不必比<application>psql</application>本身新。运行 SQL 命令并且显示查询结果的一般功能应该也能和具有更新主版本的服务器一起使用，但是并非在所有的情况下都能保证如此。
      </para>
<!--==========================orignal english content==========================
      <para>
       If you want to use <application>psql</application> to connect to several
       servers of different major versions, it is recommended that you use the
       newest version of <application>psql</application>.  Alternatively, you
       can keep around a copy of <application>psql</application> from each
       major version and be sure to use the version that matches the
       respective server.  But in practice, this additional complication should
       not be necessary.
      </para>
____________________________________________________________________________-->
      <para>
       如果你想用<application>psql</application>连接到多个具有不同主版本的服务器，推荐使用最新版本的<application>psql</application>。或者，你可以为每一个主版本保留一份<application>psql</application>拷贝，并且针对相应的服务器使用匹配的版本。但实际上，这种额外的麻烦是不必要的。
      </para>
      </listitem>

      <listitem>
<!--==========================orignal english content==========================
      <para>
       Before <productname>PostgreSQL</productname> 9.6,
       the <option>-c</option> option implied <option>-X</option>
       (<option>-&minus;no-psqlrc</option>); this is no longer the case.
      </para>
____________________________________________________________________________-->
      <para>
       在<productname>PostgreSQL</productname> 9.6 之前，<option>-c</option>选项表示<option>-X</option>（<option>--no-psqlrc</option>），但现在不是这样了。
      </para>
      </listitem>

      <listitem>
<!--==========================orignal english content==========================
      <para>
       Before <productname>PostgreSQL</productname> 8.4,
       <application>psql</application> allowed the
       first argument of a single-letter backslash command to start
       directly after the command, without intervening whitespace.
       Now, some whitespace is required.
      </para>
____________________________________________________________________________-->
      <para>
       在<productname>PostgreSQL</productname> 8.4 之前，<application>psql</application>允许一个单字母反斜线命令的第一个参数直接写在该命令后面，中间不需要空格。现在则要求一些空格。
      </para>
      </listitem>
    </itemizedlist>
 </refsect1>


 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes for Windows Users</title>
____________________________________________________________________________-->
  <title>给 Windows 用户的注解</title>

<!--==========================orignal english content==========================
 <para>
  <application>psql</application> is built as a <quote>console
  application</quote>.  Since the Windows console windows use a different
  encoding than the rest of the system, you must take special care
  when using 8-bit characters within <application>psql</application>.
  If <application>psql</application> detects a problematic
  console code page, it will warn you at startup. To change the
  console code page, two things are necessary:

   <itemizedlist>
    <listitem>
     <para>
      Set the code page by entering <userinput>cmd.exe /c chcp
      1252</userinput>. (1252 is a code page that is appropriate for
      German; replace it with your value.) If you are using Cygwin,
      you can put this command in <filename>/etc/profile</filename>.
     </para>
    </listitem>

    <listitem>
     <para>
      Set the console font to <literal>Lucida Console</literal>, because the
      raster font does not work with the ANSI code page.
     </para>
    </listitem>
   </itemizedlist></para>
____________________________________________________________________________-->
 <para>
  <application>psql</application>是一个<quote>控制台应用</quote>。由于 Windows 的控制台窗口使用的是一种和系统中其他应用不同的编码，在<application>psql</application>中使用 8 位字符时要特别注意。如果<application>psql</application>检测到一个有问题的控制台代码页，它将会在启动时警告你。要更改控制台代码页，有两件事是必要的：

   <itemizedlist>
    <listitem>
     <para>
      输入<userinput>cmd.exe /c chcp 1252</userinput>可以设置代码页（1252 是适用于德语的一个代码页，请在这里替换成你的值）。如果正在使用 Cygwin，可以把这个命令放在<filename>/etc/profile</filename>中。
     </para>
    </listitem>

    <listitem>
     <para>
      把控制台字体设置为<literal>Lucida Console</literal>，因为栅格字体无法与 ANSI 代码页一起使用。
     </para>
    </listitem>
   </itemizedlist></para>

 </refsect1>


 <refsect1 id="app-psql-examples">
<!--==========================orignal english content==========================
  <title id="app-psql-examples-title">Examples</title>
____________________________________________________________________________-->
  <title id="app-psql-examples-title">示例</title>

<!--==========================orignal english content==========================
  <para>
  The first example shows how to spread a command over several lines of
  input. Notice the changing prompt:
<programlisting>
testdb=&gt; <userinput>CREATE TABLE my_table (</userinput>
testdb(&gt; <userinput> first integer not null default 0,</userinput>
testdb(&gt; <userinput> second text)</userinput>
testdb-&gt; <userinput>;</userinput>
CREATE TABLE
</programlisting>
  Now look at the table definition again:
<programlisting>
testdb=&gt; <userinput>\d my_table</userinput>
              Table "public.my_table"
 Column |  Type   | Collation | Nullable | Default
-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-
 first  | integer |           | not null | 0
 second | text    |           |          | 
</programlisting>
  Now we change the prompt to something more interesting:
<programlisting>
testdb=&gt; <userinput>\set PROMPT1 '%n@%m %~%R%# '</userinput>
peter@localhost testdb=&gt;
</programlisting>
  Let's assume you have filled the table with data and want to take a
  look at it:
<programlisting>
peter@localhost testdb=&gt; SELECT * FROM my_table;
 first | second
-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;
     1 | one
     2 | two
     3 | three
     4 | four
(4 rows)

</programlisting>
  You can display tables in different ways by using the
  <command>\pset</command> command:
<programlisting>
peter@localhost testdb=&gt; <userinput>\pset border 2</userinput>
Border style is 2.
peter@localhost testdb=&gt; <userinput>SELECT * FROM my_table;</userinput>
+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;+
| first | second |
+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;+
|     1 | one    |
|     2 | two    |
|     3 | three  |
|     4 | four   |
+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;+
(4 rows)

peter@localhost testdb=&gt; <userinput>\pset border 0</userinput>
Border style is 0.
peter@localhost testdb=&gt; <userinput>SELECT * FROM my_table;</userinput>
first second
-&minus;-&minus;- -&minus;-&minus;-&minus;
    1 one
    2 two
    3 three
    4 four
(4 rows)

peter@localhost testdb=&gt; <userinput>\pset border 1</userinput>
Border style is 1.
peter@localhost testdb=&gt; <userinput>\pset format unaligned</userinput>
Output format is unaligned.
peter@localhost testdb=&gt; <userinput>\pset fieldsep ","</userinput>
Field separator is ",".
peter@localhost testdb=&gt; <userinput>\pset tuples_only</userinput>
Showing only tuples.
peter@localhost testdb=&gt; <userinput>SELECT second, first FROM my_table;</userinput>
one,1
two,2
three,3
four,4
</programlisting>
  Alternatively, use the short commands:
<programlisting>
peter@localhost testdb=&gt; <userinput>\a \t \x</userinput>
Output format is aligned.
Tuples only is off.
Expanded display is on.
peter@localhost testdb=&gt; <userinput>SELECT * FROM my_table;</userinput>
-[ RECORD 1 ]-
first  | 1
second | one
-[ RECORD 2 ]-
first  | 2
second | two
-[ RECORD 3 ]-
first  | 3
second | three
-[ RECORD 4 ]-
first  | 4
second | four
</programlisting></para>
____________________________________________________________________________-->
  <para>
  第一个例子展示了如何如何跨越多行输入一个命令。注意提示符的改变：
<programlisting>
testdb=&gt; <userinput>CREATE TABLE my_table (</userinput>
testdb(&gt; <userinput> first integer not null default 0,</userinput>
testdb(&gt; <userinput> second text)</userinput>
testdb-&gt; <userinput>;</userinput>
CREATE TABLE
</programlisting>
  现在再看看表定义：
<programlisting>
testdb=&gt; <userinput>\d my_table</userinput>
              Table "public.my_table"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 first  | integer |           | not null | 0
 second | text    |           |          | 
</programlisting>
  现在我们把提示符改一改：
<programlisting>
testdb=&gt; <userinput>\set PROMPT1 '%n@%m %~%R%# '</userinput>
peter@localhost testdb=&gt;
</programlisting>
  假定已经用数据填充了这个表并且想看看其中的数据：
<programlisting>
peter@localhost testdb=&gt; SELECT * FROM my_table;
 first | second
-------+--------
     1 | one
     2 | two
     3 | three
     4 | four
(4 rows)

</programlisting>
  你可以用<command>\pset</command>命令以不同的方式显示表：
<programlisting>
peter@localhost testdb=&gt; <userinput>\pset border 2</userinput>
Border style is 2.
peter@localhost testdb=&gt; <userinput>SELECT * FROM my_table;</userinput>
+-------+--------+
| first | second |
+-------+--------+
|     1 | one    |
|     2 | two    |
|     3 | three  |
|     4 | four   |
+-------+--------+
(4 rows)

peter@localhost testdb=&gt; <userinput>\pset border 0</userinput>
Border style is 0.
peter@localhost testdb=&gt; <userinput>SELECT * FROM my_table;</userinput>
first second
----- ------
    1 one
    2 two
    3 three
    4 four
(4 rows)

peter@localhost testdb=&gt; <userinput>\pset border 1</userinput>
Border style is 1.
peter@localhost testdb=&gt; <userinput>\pset format unaligned</userinput>
Output format is unaligned.
peter@localhost testdb=&gt; <userinput>\pset fieldsep ","</userinput>
Field separator is ",".
peter@localhost testdb=&gt; <userinput>\pset tuples_only</userinput>
Showing only tuples.
peter@localhost testdb=&gt; <userinput>SELECT second, first FROM my_table;</userinput>
one,1
two,2
three,3
four,4
</programlisting>
  或者使用短命令：
<programlisting>
peter@localhost testdb=&gt; <userinput>\a \t \x</userinput>
Output format is aligned.
Tuples only is off.
Expanded display is on.
peter@localhost testdb=&gt; <userinput>SELECT * FROM my_table;</userinput>
-[ RECORD 1 ]-
first  | 1
second | one
-[ RECORD 2 ]-
first  | 2
second | two
-[ RECORD 3 ]-
first  | 3
second | three
-[ RECORD 4 ]-
first  | 4
second | four
</programlisting></para>

<!--==========================orignal english content==========================
<para>
  When suitable, query results can be shown in a crosstab representation
  with the <command>\crosstabview</command> command:
<programlisting>
testdb=&gt; <userinput>SELECT first, second, first &gt; 2 AS gt2 FROM my_table;</userinput>
 first | second | gt2 
-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-
     1 | one    | f
     2 | two    | f
     3 | three  | t
     4 | four   | t
(4 rows)

testdb=&gt; <userinput>\crosstabview first second</userinput>
 first | one | two | three | four 
-&minus;-&minus;-&minus;-+-&minus;-&minus;-+-&minus;-&minus;-+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;
     1 | f   |     |       | 
     2 |     | f   |       | 
     3 |     |     | t     | 
     4 |     |     |       | t
(4 rows)
</programlisting>

This second example shows a multiplication table with rows sorted in reverse
numerical order and columns with an independent, ascending numerical order.
<programlisting>
testdb=&gt; <userinput>SELECT t1.first as "A", t2.first+100 AS "B", t1.first*(t2.first+100) as "AxB",</userinput>
testdb(&gt; <userinput>row_number() over(order by t2.first) AS ord</userinput>
testdb(&gt; <userinput>FROM my_table t1 CROSS JOIN my_table t2 ORDER BY 1 DESC</userinput>
testdb(&gt; <userinput>\crosstabview "A" "B" "AxB" ord</userinput>
 A | 101 | 102 | 103 | 104 
-&minus;-+-&minus;-&minus;-+-&minus;-&minus;-+-&minus;-&minus;-+-&minus;-&minus;-
 4 | 404 | 408 | 412 | 416
 3 | 303 | 306 | 309 | 312
 2 | 202 | 204 | 206 | 208
 1 | 101 | 102 | 103 | 104
(4 rows)
</programlisting>

</para>
____________________________________________________________________________-->
<para>
  如果需要，可以用<command>\crosstabview</command>命令以交叉表的形式显示查询结果：
<programlisting>
testdb=&gt; <userinput>SELECT first, second, first &gt; 2 AS gt2 FROM my_table;</userinput>
 first | second | gt2 
-------+--------+-----
     1 | one    | f
     2 | two    | f
     3 | three  | t
     4 | four   | t
(4 rows)

testdb=&gt; <userinput>\crosstabview first second</userinput>
 first | one | two | three | four 
-------+-----+-----+-------+------
     1 | f   |     |       | 
     2 |     | f   |       | 
     3 |     |     | t     | 
     4 |     |     |       | t
(4 rows)
</programlisting>

这第二个例子展示了表的“乘法”（连接），行按照序号降序排序且列按照独立的、升序的方式排序。
<programlisting>
testdb=&gt; <userinput>SELECT t1.first as "A", t2.first+100 AS "B", t1.first*(t2.first+100) as "AxB",</userinput>
testdb(&gt; <userinput>row_number() over(order by t2.first) AS ord</userinput>
testdb(&gt; <userinput>FROM my_table t1 CROSS JOIN my_table t2 ORDER BY 1 DESC</userinput>
testdb(&gt; <userinput>\crosstabview "A" "B" "AxB" ord</userinput>
 A | 101 | 102 | 103 | 104 
---+-----+-----+-----+-----
 4 | 404 | 408 | 412 | 416
 3 | 303 | 306 | 309 | 312
 2 | 202 | 204 | 206 | 208
 1 | 101 | 102 | 103 | 104
(4 rows)
</programlisting>

</para>

 </refsect1>

</refentry>
<!--
doc/src/sgml/ref/grant.sgml
PostgreSQL documentation
-->

<refentry id="sql-grant">
<!--==========================orignal english content==========================
 <indexterm zone="sql-grant">
  <primary>GRANT</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-grant">
  <primary>GRANT</primary>
 </indexterm>
 
<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>GRANT</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>GRANT</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - 语言语句</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>GRANT</refname>
  <refpurpose>define access privileges</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>GRANT</refname>
  <refpurpose>定义访问特权</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
         | ALL TABLES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( <replaceable class="parameter">column_name</replaceable> [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( <replaceable class="parameter">column_name</replaceable> [, ...] ) }
    ON [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE <replaceable class="parameter">sequence_name</replaceable> [, ...]
         | ALL SEQUENCES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE <replaceable>database_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN <replaceable>domain_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER <replaceable>fdw_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER <replaceable>server_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
    ON { { FUNCTION | PROCEDURE | ROUTINE } <replaceable>routine_name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">arg_name</replaceable> ] <replaceable class="parameter">arg_type</replaceable> [, ...] ] ) ] [, ...]
         | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE <replaceable>lang_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT <replaceable class="parameter">loid</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA <replaceable>schema_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE <replaceable>tablespace_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE <replaceable>type_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

<phrase>where <replaceable class="parameter">role_specification</replaceable> can be:</phrase>

    [ GROUP ] <replaceable class="parameter">role_name</replaceable>
  | PUBLIC
  | CURRENT_USER
  | SESSION_USER

GRANT <replaceable class="parameter">role_name</replaceable> [, ...] TO <replaceable class="parameter">role_name</replaceable> [, ...] [ WITH ADMIN OPTION ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
         | ALL TABLES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( <replaceable class="parameter">column_name</replaceable> [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( <replaceable class="parameter">column_name</replaceable> [, ...] ) }
    ON [ TABLE ] <replaceable class="parameter">table_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE <replaceable class="parameter">sequence_name</replaceable> [, ...]
         | ALL SEQUENCES IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE <replaceable>database_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN <replaceable>domain_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER <replaceable>fdw_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER <replaceable>server_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
    ON { { FUNCTION | PROCEDURE | ROUTINE } <replaceable>routine_name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">arg_name</replaceable> ] <replaceable class="parameter">arg_type</replaceable> [, ...] ] ) ] [, ...]
         | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA <replaceable class="parameter">schema_name</replaceable> [, ...] }
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE <replaceable>lang_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT <replaceable class="parameter">loid</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA <replaceable>schema_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE <replaceable>tablespace_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE <replaceable>type_name</replaceable> [, ...]
    TO <replaceable class="parameter">role_specification</replaceable> [, ...] [ WITH GRANT OPTION ]

<phrase>其中<replaceable class="parameter">role_specification</replaceable>可以是：</phrase>

    [ GROUP ] <replaceable class="parameter">role_name</replaceable>
  | PUBLIC
  | CURRENT_USER
  | SESSION_USER

GRANT <replaceable class="parameter">role_name</replaceable> [, ...] TO <replaceable class="parameter">role_name</replaceable> [, ...] [ WITH ADMIN OPTION ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-grant-description">
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   The <command>GRANT</command> command has two basic variants: one
   that grants privileges on a database object (table, column, view, foreign
   table, sequence, database, foreign-data wrapper, foreign server, function, procedure,
   procedural language, schema, or tablespace), and one that grants
   membership in a role.  These variants are similar in many ways, but
   they are different enough to be described separately.
  </para>
____________________________________________________________________________-->
  <para>
   <command>GRANT</command>命令由两种基本的变体：一种授予在一个数据库对象（表、列、视图、外部表、序列、数据库、外部数据包装器、外部服务器、函数、过程、过程语言、模式或表空间）上的特权，另一个授予一个角色中的成员关系。这些变体在很多方面都相似，但是也有很多不同，所以还是得分别描述它们。
  </para>

 <refsect2 id="sql-grant-description-objects">
<!--==========================orignal english content==========================
  <title>GRANT on Database Objects</title>
____________________________________________________________________________-->
  <title>在数据库对象上 GRANT</title>

<!--==========================orignal english content==========================
  <para>
   This variant of the <command>GRANT</command> command gives specific
   privileges on a database object to
   one or more roles.  These privileges are added
   to those already granted, if any.
  </para>
____________________________________________________________________________-->
  <para>
   这种<command>GRANT</command>命令的变体将一个数据库对象上的指定特权交给一个或多个角色。如果有一些已经被授予，这些特权会被加入到它们之中。
  </para>

<!--==========================orignal english content==========================
  <para>
   There is also an option to grant privileges on all objects of the same
   type within one or more schemas.  This functionality is currently supported
   only for tables, sequences, functions, and procedures.  <literal>ALL
   TABLES</literal> also affects views and foreign tables, just like the
   specific-object <command>GRANT</command> command.  <literal>ALL
   FUNCTIONS</literal> also affects aggregate functions, but not procedures,
   again just like the specific-object <command>GRANT</command> command.
  </para>
____________________________________________________________________________-->
  <para>
   还有一个选项可以授予一个或多个模式中同种类型的所有对象上的特权。这种功能当前只支持表、序列、函数和过程。<literal>ALL TABLES</literal>还影响视图和外部表，就像特定对象<command>GRANT</command>命令。<literal>ALL FUNCTIONS</literal>还影响聚集函数，但不影响过程，就像特定对象的<command>GRANT</command>命令。
  </para>

<!--==========================orignal english content==========================
  <para>
   The key word <literal>PUBLIC</literal> indicates that the
   privileges are to be granted to all roles, including those that might
   be created later.  <literal>PUBLIC</literal> can be thought of as an
   implicitly defined group that always includes all roles.
   Any particular role will have the sum
   of privileges granted directly to it, privileges granted to any role it
   is presently a member of, and privileges granted to
   <literal>PUBLIC</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   关键词<literal>PUBLIC</literal>指示特权要被授予给所有角色，包括那些可能稍后会被创建的角色。<literal>PUBLIC</literal>可以被认为是一个被隐式定义的总是包含所有角色的组。任何特定角色都将具有直接授予给它的特权、授予给它作为成员所在的任何角色的特权以及被授予给<literal>PUBLIC</literal>的特权。
  </para>

<!--==========================orignal english content==========================
  <para>
   If <literal>WITH GRANT OPTION</literal> is specified, the recipient
   of the privilege can in turn grant it to others.  Without a grant
   option, the recipient cannot do that.  Grant options cannot be granted
   to <literal>PUBLIC</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   如果指定了<literal>WITH GRANT OPTION</literal>，特权的接收者可以接着把它授予给其他人。如果没有授权选项，接收者就不能这样做。授权选项不能被授予给<literal>PUBLIC</literal>。
  </para>

<!--==========================orignal english content==========================
  <para>
   There is no need to grant privileges to the owner of an object
   (usually the user that created it),
   as the owner has all privileges by default.  (The owner could,
   however, choose to revoke some of their own privileges for safety.)
  </para>
____________________________________________________________________________-->
  <para>
   没有必要把权限授予给一个对象的拥有者（通常就是创建该对象的用户），
   因为拥有者默认具有所有的特权（不过拥有者可能为了安全选择撤回一些
   它们自己的特权）。
  </para>

<!--==========================orignal english content==========================
  <para>
   The right to drop an object, or to alter its definition in any way, is
   not treated as a grantable privilege; it is inherent in the owner,
   and cannot be granted or revoked.  (However, a similar effect can be
   obtained by granting or revoking membership in the role that owns
   the object; see below.)  The owner implicitly has all grant
   options for the object, too.
  </para>
____________________________________________________________________________-->
  <para>
   删除一个对象或者以任何方式修改其定义的权力是不被当作一个可授予特权的，它被固化在拥有者中，并且不能被授予和撤回（不过，相似地效果可以通过授予或者撤回在拥有该对象的角色中的成员关系来实现，见下文）。拥有者也隐式地拥有该对象的所有授权选项。
  </para>

<!--==========================orignal english content==========================
  <para>
   PostgreSQL grants default privileges on some types of objects to
   <literal>PUBLIC</literal>.  No privileges are granted to
   <literal>PUBLIC</literal> by default on
   tables,
   table columns,
   sequences,
   foreign data wrappers,
   foreign servers,
   large objects,
   schemas,
   or tablespaces.
   For other types of objects, the default privileges
   granted to <literal>PUBLIC</literal> are as follows:
   <literal>CONNECT</literal> and <literal>TEMPORARY</literal> (create
   temporary tables) privileges for databases;
   <literal>EXECUTE</literal> privilege for functions and procedures; and
   <literal>USAGE</literal> privilege for languages and data types
   (including domains).
   The object owner can, of course, <command>REVOKE</command>
   both default and  expressly granted privileges. (For maximum
   security, issue the <command>REVOKE</command> in the same transaction that
   creates the object; then there is no window in which another user
   can use the object.)
   Also, these initial default privilege settings can be changed using the
   <xref linkend="sql-alterdefaultprivileges"/>
   command.
  </para>
____________________________________________________________________________-->
  <para>
   PostgreSQL 会把某些类型的对象上的默认特权授予给<literal>PUBLIC</literal>。默认在表、表列、序列、外部数据包装器、外部服务器、大对象、方案或表空间上不会有特权会被授予给<literal>PUBLIC</literal>。对于其他类型的对象，被授予给<literal>PUBLIC</literal>的默认特权是下面这些：数据库上的<literal>CONNECT</literal>以及<literal>TEMPORARY</literal>（创建临时表）；函数和过程上的<literal>EXECUTE</literal>特权；语言和数据类型（包括域）的<literal>USAGE</literal>特权。当然，对象拥有者可以<command>REVOKE</command>默认和专门授予的特权（为了最好的安全性，应该在创建该对象的同一个事务中发出<command>REVOKE</command>，这样其他用户就没有时间窗口使用该对象）。还有，这些初始的默认特权设置可以使用<xref linkend="sql-alterdefaultprivileges"/>命令修改。
  </para>

<!--==========================orignal english content==========================
  <para>
   The possible privileges are:

   <variablelist>
    <varlistentry>
     <term><literal>SELECT</literal></term>
     <listitem>
      <para>
       Allows <xref linkend="sql-select"/> from
       any column, or the specific columns listed, of the specified table,
       view, or sequence.
       Also allows the use of
       <xref linkend="sql-copy"/> TO.
       This privilege is also needed to reference existing column values in
       <xref linkend="sql-update"/> or
       <xref linkend="sql-delete"/>.
       For sequences, this privilege also allows the use of the
       <function>currval</function> function.
       For large objects, this privilege allows the object to be read.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>INSERT</literal></term>
     <listitem>
      <para>
       Allows <xref linkend="sql-insert"/> of a new
       row into the specified table.  If specific columns are listed,
       only those columns may be assigned to in the <command>INSERT</command>
       command (other columns will therefore receive default values).
       Also allows <xref linkend="sql-copy"/> FROM.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>UPDATE</literal></term>
     <listitem>
      <para>
       Allows <xref linkend="sql-update"/> of any
       column, or the specific columns listed, of the specified table.
       (In practice, any nontrivial <command>UPDATE</command> command will require
       <literal>SELECT</literal> privilege as well, since it must reference table
       columns to determine which rows to update, and/or to compute new
       values for columns.)
       <literal>SELECT ... FOR UPDATE</literal>
       and <literal>SELECT ... FOR SHARE</literal>
       also require this privilege on at least one column, in addition to the
       <literal>SELECT</literal> privilege.  For sequences, this
       privilege allows the use of the <function>nextval</function> and
       <function>setval</function> functions.
       For large objects, this privilege allows writing or truncating the
       object.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>DELETE</literal></term>
     <listitem>
      <para>
       Allows <xref linkend="sql-delete"/> of a row
       from the specified table.
       (In practice, any nontrivial <command>DELETE</command> command will require
       <literal>SELECT</literal> privilege as well, since it must reference table
       columns to determine which rows to delete.)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TRUNCATE</literal></term>
     <listitem>
      <para>
       Allows <xref linkend="sql-truncate"/> on
       the specified table.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>REFERENCES</literal></term>
     <listitem>
      <para>
       Allows creation of a foreign key constraint referencing the specified
       table, or specified column(s) of the table.  (See the
       <xref linkend="sql-createtable"/> statement.)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TRIGGER</literal></term>
     <listitem>
      <para>
       Allows the creation of a trigger on the specified table.  (See the
       <xref linkend="sql-createtrigger"/> statement.)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>CREATE</literal></term>
     <listitem>
      <para>
       For databases, allows new schemas and publications to be created within the database.
      </para>
      <para>
       For schemas, allows new objects to be created within the schema.
       To rename an existing object, you must own the object <emphasis>and</emphasis>
       have this privilege for the containing schema.
      </para>
      <para>
       For tablespaces, allows tables, indexes, and temporary files to be
       created within the tablespace, and allows databases to be created that
       have the tablespace as their default tablespace.  (Note that revoking
       this privilege will not alter the placement of existing objects.)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>CONNECT</literal></term>
     <listitem>
      <para>
       Allows the user to connect to the specified database.  This
       privilege is checked at connection startup (in addition to checking
       any restrictions imposed by <filename>pg_hba.conf</filename>).
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TEMPORARY</literal></term>
     <term><literal>TEMP</literal></term>
     <listitem>
      <para>
       Allows temporary tables to be created while using the specified database.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>EXECUTE</literal></term>
     <listitem>
      <para>
       Allows the use of the specified function or procedure and the use of
       any operators that are implemented on top of the function.  This is the
       only type of privilege that is applicable to functions and procedures.
       The <literal>FUNCTION</literal> syntax also works for aggregate
       functions.  Alternatively, use <literal>ROUTINE</literal> to refer to a function,
       aggregate function, or procedure regardless of what it is.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>USAGE</literal></term>
     <listitem>
      <para>
       For procedural languages, allows the use of the specified language for
       the creation of functions in that language.  This is the only type
       of privilege that is applicable to procedural languages.
      </para>
      <para>
       For schemas, allows access to objects contained in the specified
       schema (assuming that the objects' own privilege requirements are
       also met).  Essentially this allows the grantee to <quote>look up</quote>
       objects within the schema.  Without this permission, it is still
       possible to see the object names, e.g. by querying the system tables.
       Also, after revoking this permission, existing backends might have
       statements that have previously performed this lookup, so this is not
       a completely secure way to prevent object access.
      </para>
      <para>
       For sequences, this privilege allows the use of the
       <function>currval</function> and <function>nextval</function> functions.
      </para>
      <para>
       For types and domains, this privilege allows the use of the type or
       domain in the creation of tables, functions, and other schema objects.
       (Note that it does not control general <quote>usage</quote> of the type,
       such as values of the type appearing in queries.  It only prevents
       objects from being created that depend on the type.  The main purpose of
       the privilege is controlling which users create dependencies on a type,
       which could prevent the owner from changing the type later.)
      </para>
      <para>
       For foreign-data wrappers, this privilege allows creation of
       new servers using the foreign-data wrapper.
      </para>
      <para>
       For servers, this privilege allows creation of foreign tables using
       the server.  Grantees may also create, alter, or drop their own
       user mappings associated with that server.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>ALL PRIVILEGES</literal></term>
     <listitem>
      <para>
       Grant all of the available privileges at once.
       The <literal>PRIVILEGES</literal> key word is optional in
       <productname>PostgreSQL</productname>, though it is required by
       strict SQL.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   The privileges required by other commands are listed on the
   reference page of the respective command.
  </para>
____________________________________________________________________________-->
  <para>
   可能的特权是：

   <variablelist>
    <varlistentry>
     <term><literal>SELECT</literal></term>
     <listitem>
      <para>
       允许从指定表、视图或序列的任何列或者列出的特定列进行<xref linkend="sql-select"/>。还允许使用<xref linkend="sql-copy"/> TO。在<xref linkend="sql-update"/>或<xref linkend="sql-delete"/>中引用已有列值时也需要这个特权。对于序列，这个特权也允许使用<function>currval</function>函数。对于大对象，这个特权允许读取对象。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>INSERT</literal></term>
     <listitem>
      <para>
       允许<xref linkend="sql-insert"/>一个新行到指定表中。如果列出了特定的列，只有这些列能在<command>INSERT</command>命令中被赋值（其他列将因此收到默认值）。还允许<xref linkend="sql-copy"/> FROM。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>UPDATE</literal></term>
     <listitem>
      <para>
       允许对指定表、视图或序列的任何列或者列出的特定列进行<xref linkend="sql-update"/>（实际上，任何非平凡的<command>UPDATE</command>命令也会要求<literal>SELECT</literal>特权，因为它必须引用表列来判断哪些行要被更新或者为列计算新值）。除<literal>SELECT</literal>特权之外，<literal>SELECT ... FOR UPDATE</literal>以及<literal>SELECT ... FOR SHARE</literal>也要求至少一列上的这个特权。对于序列，这个特权允许使用<function>nextval</function>和<function>setval</function>函数。对于大对象，这个特权允许写入或者截断对象。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>DELETE</literal></term>
     <listitem>
      <para>
       允许从指定的表中<xref linkend="sql-delete"/>一行（实际上，任何非平凡的<command>DELETE</command>命令也将要求<literal>SELECT</literal>特权，因为它必须引用表列来判断要删除哪些行）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TRUNCATE</literal></term>
     <listitem>
      <para>
       允许在指定的表上<xref linkend="sql-truncate"/>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>REFERENCES</literal></term>
     <listitem>
      <para>
       允许创建引用指定表或者表的指定列的外键约束（见<xref linkend="sql-createtable"/>语句）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TRIGGER</literal></term>
     <listitem>
      <para>
       允许在指定的表上创建触发器（见<xref linkend="sql-createtrigger"/>语句）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>CREATE</literal></term>
     <listitem>
      <para>
       对于数据库，允许在其中创建新方案和订阅。
      </para>
      <para>
       对于方案，允许在其中创建新的对象。要重命名一个已有对象，你必须拥有该对象<emphasis>并且</emphasis>具有所在方案的这个特权。
      </para>
      <para>
       对于表空间，允许在其中创建表、索引和临时文件，并且允许创建使用该表空间作为默认表空间的数据库（注意撤回这个特权将不会更改现有对象的放置位置）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>CONNECT</literal></term>
     <listitem>
      <para>
       允许用户连接到指定数据库。在连接开始时会检查这个特权（除了检查由<filename>pg_hba.conf</filename>施加的任何限制之外）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>TEMPORARY</literal></term>
     <term><literal>TEMP</literal></term>
     <listitem>
      <para>
       允许在使用指定数据库时创建临时表。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>EXECUTE</literal></term>
     <listitem>
      <para>
       允许使用指定的函数或者过程以及使用实现在函数之上的任何操作符。这是唯一一种适用于函数和过程的特权。<literal>FUNCTION</literal>语法对聚集函数也有效。另外，可使用<literal>ROUTINE</literal>引用函数、聚集函数或者过程而无需操心它究竟是什么。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>USAGE</literal></term>
     <listitem>
      <para>
       对于过程语言，允许使用指定的语言创建函数。这是适用于过程语言的唯一一种特权类型。
      </para>
      <para>
       对于模式，允许访问包含在指定模式中的对象（假定这些对象的拥有特权要求也满足）。本质上这允许被授权者在模式中<quote>查阅</quote>对象。如果没有这个权限，还是有可能看到对象名称，例如通过查询系统表。还有，在撤回这个权限之后，现有后端可能有语句之前已经执行过这种查阅，因此这不是一种阻止对象访问的完全安全的方法。
      </para>
      <para>
       对于序列，这种特权允许使用<function>currval</function>和<function>nextval</function>函数。
      </para>
      <para>
       对于类型和域，这种特权允许用该类型或域来创建表、函数和其他模式对象（注意这不能控制类型的一般<quote>用法</quote>，例如出现在查询中的该类型的值。它只阻止基于该类型创建对象。该特权的主要目的是控制哪些用户在一个类型上创建了依赖，这能够阻止拥有者以后更改该类型）。
      </para>
      <para>
       对于外部数据包装器，这个特权让被授权者能够创建新的使用该外部数据包装器的服务器。
      </para>
      <para>
       对于服务器，这个特权让被授权者使用该服务器创建外部表。被授权者还可以创建、修改或删除与该服务器相关的属于该用户的用户映射。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>ALL PRIVILEGES</literal></term>
     <listitem>
      <para>
       一次授予所有的可用特权。在<productname>PostgreSQL</productname>中，<literal>PRIVILEGES</literal>关键词是可选的，但是在严格的SQL中是要求它的。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   其他命令所要求的特权会被列在相应命令的参考页中。
  </para>
 </refsect2>

 <refsect2 id="sql-grant-description-roles">
<!--==========================orignal english content==========================
  <title>GRANT on Roles</title>
____________________________________________________________________________-->
  <title>角色上的 GRANT</title>

<!--==========================orignal english content==========================
  <para>
   This variant of the <command>GRANT</command> command grants membership
   in a role to one or more other roles.  Membership in a role is significant
   because it conveys the privileges granted to a role to each of its
   members.
  </para>
____________________________________________________________________________-->
  <para>
   <command>GRANT</command>命令的这种变体把一个角色中的成员关系授予一个或者多个其他角色。一个角色中的成员关系是有意义的，因为它会把授予给一个角色的特权带给该角色的每一个成员。
  </para>

<!--==========================orignal english content==========================
  <para>
   If <literal>WITH ADMIN OPTION</literal> is specified, the member can
   in turn grant membership in the role to others, and revoke membership
   in the role as well.  Without the admin option, ordinary users cannot
   do that.  A role is not considered to hold <literal>WITH ADMIN
   OPTION</literal> on itself, but it may grant or revoke membership in
   itself from a database session where the session user matches the
   role.  Database superusers can grant or revoke membership in any role
   to anyone.  Roles having <literal>CREATEROLE</literal> privilege can grant
   or revoke membership in any role that is not a superuser.
  </para>
____________________________________________________________________________-->
  <para>
   如果指定了<literal>WITH ADMIN OPTION</literal>，成员接着可以把该角色中的成员关系授予给其他用户，也可以撤回该角色中的成员关系。如果没有管理选项，普通用户就不能做这些工作。一个角色不被认为持有自身的<literal>WITH ADMIN OPTION</literal>，但是它可以从一个会话用户匹配该角色的数据库会话中授予或撤回自身中的成员关系。数据库超级用户能够授予或撤回任何角色中任何人的成员关系。具有<literal>CREATEROLE</literal>特权的角色能够授予或者撤回任何非超级用户角色中的成员关系。
  </para>

<!--==========================orignal english content==========================
  <para>
   Unlike the case with privileges, membership in a role cannot be granted
   to <literal>PUBLIC</literal>.  Note also that this form of the command does not
   allow the noise word <literal>GROUP</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   和特权的情况不同，一个角色中的成员关系不能被授予<literal>PUBLIC</literal>。还要注意这种形式的命令不允许噪声词<literal>GROUP</literal>。
  </para>
 </refsect2>
 </refsect1>


 <refsect1 id="sql-grant-notes">
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
   <para>
    The <xref linkend="sql-revoke"/> command is used
    to revoke access privileges.
   </para>
____________________________________________________________________________-->
   <para>
    <xref linkend="sql-revoke"/>命令被用来撤回访问特权。
   </para>

<!--==========================orignal english content==========================
   <para>
    Since <productname>PostgreSQL</productname> 8.1, the concepts of users and
    groups have been unified into a single kind of entity called a role.
    It is therefore no longer necessary to use the keyword <literal>GROUP</literal>
    to identify whether a grantee is a user or a group.  <literal>GROUP</literal>
    is still allowed in the command, but it is a noise word.
   </para>
____________________________________________________________________________-->
   <para>
    从<productname>PostgreSQL</productname> 8.1 开始，用户和组的概念已经被统一到一种单一类型的实体（被称为一个角色）。因此不再需要使用关键词<literal>GROUP</literal>来标识一个被授权者是一个用户或者一个组。在该命令中仍然允许<literal>GROUP</literal>，但是它只是一个噪音词而已。
   </para>

<!--==========================orignal english content==========================
   <para>
    A user may perform <command>SELECT</command>, <command>INSERT</command>, etc. on a
    column if they hold that privilege for either the specific column or
    its whole table.  Granting the privilege at the table level and then
    revoking it for one column will not do what one might wish: the
    table-level grant is unaffected by a column-level operation.
   </para>
____________________________________________________________________________-->
   <para>
    如果一个用户持有特定列或者其所在的整个表的特权，
    该用户可以在该列上执行<command>SELECT</command>、
    <command>INSERT</command>等命令。在表层面上授予特权
    然后对一列撤回该特权将不会按照你希望的运作：
    表级别的授权不会受到列级别操作的影响。
   </para>

<!--==========================orignal english content==========================
   <para>
    When a non-owner of an object attempts to <command>GRANT</command> privileges
    on the object, the command will fail outright if the user has no
    privileges whatsoever on the object.  As long as some privilege is
    available, the command will proceed, but it will grant only those
    privileges for which the user has grant options.  The <command>GRANT ALL
    PRIVILEGES</command> forms will issue a warning message if no grant options are
    held, while the other forms will issue a warning if grant options for
    any of the privileges specifically named in the command are not held.
    (In principle these statements apply to the object owner as well, but
    since the owner is always treated as holding all grant options, the
    cases can never occur.)
   </para>
____________________________________________________________________________-->
   <para>
    当一个对象的非拥有者尝试<command>GRANT</command>该对象上的特权，如果该用户在该对象上什么特权都不拥有，该命令将立刻失败。只要有一些特权可用，该命令将继续，但是它将只授予那些用户具有授权选项的特权。如果不持有授权选项，<command>GRANT ALL PRIVILEGES</command>形式将发出一个警告消息。而如果不持有命令中特别提到的任何特权的授权选项，其他形式将会发出一个警告（原则上这些语句也适用于对象拥有者，但是由于拥有者总是被视为持有所有授权选项，因此这种情况不会发生）。
   </para>

<!--==========================orignal english content==========================
   <para>
    It should be noted that database superusers can access
    all objects regardless of object privilege settings.  This
    is comparable to the rights of <literal>root</literal> in a Unix system.
    As with <literal>root</literal>, it's unwise to operate as a superuser
    except when absolutely necessary.
   </para>
____________________________________________________________________________-->
   <para>
    需要注意的是，数据库超级用户可以访问所有对象而不管对象特权的设置。这可与 Unix 系统中的<literal>root</literal>权力相提并论。对于<literal>root</literal>来说，除非绝对必要，使用一个超级用户来操作是不明智的。
   </para>

<!--==========================orignal english content==========================
   <para>
    If a superuser chooses to issue a <command>GRANT</command> or <command>REVOKE</command>
    command, the command is performed as though it were issued by the
    owner of the affected object.  In particular, privileges granted via
    such a command will appear to have been granted by the object owner.
    (For role membership, the membership appears to have been granted
    by the containing role itself.)
   </para>
____________________________________________________________________________-->
   <para>
    如果一个超级用户选择发出一个<command>GRANT</command>或者<command>REVOKE</command>命令，该命令将被执行，好像它是由被影响对象的拥有者发出的一样。特别地，通过这样一个命令授予的特权将好像是由对象拥有者授予的一样（对于角色成员关系，该成员关系好像是由该角色本身授予的一样）。
   </para>

<!--==========================orignal english content==========================
   <para>
    <command>GRANT</command> and <command>REVOKE</command> can also be done by a role
    that is not the owner of the affected object, but is a member of the role
    that owns the object, or is a member of a role that holds privileges
    <literal>WITH GRANT OPTION</literal> on the object.  In this case the
    privileges will be recorded as having been granted by the role that
    actually owns the object or holds the privileges
    <literal>WITH GRANT OPTION</literal>.  For example, if table
    <literal>t1</literal> is owned by role <literal>g1</literal>, of which role
    <literal>u1</literal> is a member, then <literal>u1</literal> can grant privileges
    on <literal>t1</literal> to <literal>u2</literal>, but those privileges will appear
    to have been granted directly by <literal>g1</literal>.  Any other member
    of role <literal>g1</literal> could revoke them later.
   </para>
____________________________________________________________________________-->
   <para>
    <command>GRANT</command>以及<command>REVOKE</command>也可以由一个不是受影响对象拥有者的角色完成，不过该角色是拥有该对象的角色的一个成员，或者是在该对象上持有特权的<literal>WITH GRANT OPTION</literal>的角色的一个成员。在这种情况下，特权将被记录为由实际拥有该对象的角色授予或者是由持有特权的<literal>WITH GRANT OPTION</literal>的角色授予。例如，如果表<literal>t1</literal>被角色<literal>g1</literal>拥有，<literal>u1</literal>是它的一个成员，那么<literal>u1</literal>可以把<literal>t1</literal>上的特权授予给<literal>u2</literal>，但是那些特权将好像是直接由<literal>g1</literal>授予的。角色<literal>g1</literal>的任何其他成员可以稍后撤回它们。
   </para>

<!--==========================orignal english content==========================
   <para>
    If the role executing <command>GRANT</command> holds the required privileges
    indirectly via more than one role membership path, it is unspecified
    which containing role will be recorded as having done the grant.  In such
    cases it is best practice to use <command>SET ROLE</command> to become the
    specific role you want to do the <command>GRANT</command> as.
   </para>
____________________________________________________________________________-->
   <para>
    如果执行<command>GRANT</command>的角色间接地通过多于一条角色成员关系路径持有所需的特权，将不会指定哪一个包含它的角色将被记录为完成了该授权。在这样的情况中，最好使用<command>SET ROLE</command>来成为你想用其做<command>GRANT</command>的特定角色。
   </para>

<!--==========================orignal english content==========================
   <para>
    Granting permission on a table does not automatically extend
    permissions to any sequences used by the table, including
    sequences tied to <type>SERIAL</type> columns.  Permissions on
    sequences must be set separately.
   </para>
____________________________________________________________________________-->
   <para>
    授予一个表上的权限不会自动地扩展权限给该表使用的任何序列，包括绑定在<type>SERIAL</type>列上的序列。序列上的权限必须被独立设置。
   </para>

<!--==========================orignal english content==========================
   <para>
    Use <xref linkend="app-psql"/>'s <command>\dp</command> command
    to obtain information about existing privileges for tables and
    columns.  For example:
<programlisting>
=&gt; \dp mytable
                              Access privileges
 Schema |  Name   | Type  |   Access privileges   | Column access privileges 
-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 public | mytable | table | miriam=arwdDxt/miriam | col1:
                          : =r/miriam             :   miriam_rw=rw/miriam
                          : admin=arw/miriam        
(1 row)
</programlisting>
    The entries shown by <command>\dp</command> are interpreted thus:
<literallayout class="monospaced">
rolename=xxxx -&minus; privileges granted to a role
        =xxxx -&minus; privileges granted to PUBLIC

            r -&minus; SELECT ("read")
            w -&minus; UPDATE ("write")
            a -&minus; INSERT ("append")
            d -&minus; DELETE
            D -&minus; TRUNCATE
            x -&minus; REFERENCES
            t -&minus; TRIGGER
            X -&minus; EXECUTE
            U -&minus; USAGE
            C -&minus; CREATE
            c -&minus; CONNECT
            T -&minus; TEMPORARY
      arwdDxt -&minus; ALL PRIVILEGES (for tables, varies for other objects)
            * -&minus; grant option for preceding privilege

        /yyyy -&minus; role that granted this privilege
</literallayout>

    The above example display would be seen by user <literal>miriam</literal> after
    creating table <literal>mytable</literal> and doing:

<programlisting>
GRANT SELECT ON mytable TO PUBLIC;
GRANT SELECT, UPDATE, INSERT ON mytable TO admin;
GRANT SELECT (col1), UPDATE (col1) ON mytable TO miriam_rw;
</programlisting>
   </para>
____________________________________________________________________________-->
   <para>
    使用<xref linkend="app-psql"/>的<command>\dp</command>命令可获得表和列上现有的特权的信息。例如：
<programlisting>
=&gt; \dp mytable
                              Access privileges
 Schema |  Name   | Type  |   Access privileges   | Column access privileges 
--------+---------+-------+-----------------------+--------------------------
 public | mytable | table | miriam=arwdDxt/miriam | col1:
                          : =r/miriam             :   miriam_rw=rw/miriam
                          : admin=arw/miriam        
(1 row)
</programlisting>
    <command>\dp</command>显示的项解释如下：
<literallayout class="monospaced">
角色名=xxxx -- 被授予给一个角色的特权
        =xxxx -- 被授予给 PUBLIC 的特权

            r -- SELECT ("读")
            w -- UPDATE ("写")
            a -- INSERT ("追加")
            d -- DELETE
            D -- TRUNCATE
            x -- REFERENCES
            t -- TRIGGER
            X -- EXECUTE
            U -- USAGE
            C -- CREATE
            c -- CONNECT
            T -- TEMPORARY
      arwdDxt -- ALL PRIVILEGES （对于表，对其他对象会变化）
            * -- 用于前述特权的授权选项

        /yyyy -- 授予该特权的角色
</literallayout>

    用户<literal>miriam</literal>在创建了表<literal>mytable</literal>并且执行了下面的操作后会看到上述例子的显示：

<programlisting>
GRANT SELECT ON mytable TO PUBLIC;
GRANT SELECT, UPDATE, INSERT ON mytable TO admin;
GRANT SELECT (col1), UPDATE (col1) ON mytable TO miriam_rw;
</programlisting>
   </para>

<!--==========================orignal english content==========================
   <para>
    For non-table objects there are other <command>\d</command> commands
    that can display their privileges.
   </para>
____________________________________________________________________________-->
   <para>
    对于非表对象，有其他的<command>\d</command>命令可显示它们的特权。
   </para>

<!--==========================orignal english content==========================
   <para>
    If the <quote>Access privileges</quote> column is empty for a given object,
    it means the object has default privileges (that is, its privileges column
    is null).  Default privileges always include all privileges for the owner,
    and can include some privileges for <literal>PUBLIC</literal> depending on the
    object type, as explained above.  The first <command>GRANT</command> or
    <command>REVOKE</command> on an object
    will instantiate the default privileges (producing, for example,
    <literal>{miriam=arwdDxt/miriam}</literal>) and then modify them per the
    specified request.  Similarly, entries are shown in <quote>Column access
    privileges</quote> only for columns with nondefault privileges.
    (Note: for this purpose, <quote>default privileges</quote> always means the
    built-in default privileges for the object's type.  An object whose
    privileges have been affected by an <command>ALTER DEFAULT PRIVILEGES</command>
    command will always be shown with an explicit privilege entry that
    includes the effects of the <command>ALTER</command>.)
   </para>
____________________________________________________________________________-->
   <para>
    如果一个给定对象的<quote>Access privileges</quote>列为空，表示该对象具有默认的特权（也就是，它的特权列为空）。默认特权总是包括拥有者的所有特权，并且如前所述根据对象类型可以包括一些<literal>PUBLIC</literal>的特权。一个对象上的第一个<command>GRANT</command>或者<command>REVOKE</command>将实例化默认特权（例如，产生<literal>{miriam=arwdDxt/miriam}</literal>）并且接着为每一个指定请求修改它们。类似地，显示在<quote>Column access privileges</quote>列中的项只用于带有非默认特权的列（注意，为了这个目的<quote>default privileges</quote>总是表示该对象类型的内建默认特权）。一个特权已经被一个<command>ALTER DEFAULT PRIVILEGES</command>命令影响的对象将与一个显式特权项一起显示，该项包括<command>ALTER</command>的效果）。
   </para>

<!--==========================orignal english content==========================
   <para>
    Notice that the owner's implicit grant options are not marked in the
    access privileges display.  A <literal>*</literal> will appear only when
    grant options have been explicitly granted to someone.
   </para>
____________________________________________________________________________-->
   <para>
    注意拥有者的隐式授权选项没有在访问特权显示中被标出。当授权选项被显式地授予给某人时，只会出现一个<literal>*</literal>。
   </para>
 </refsect1>

 <refsect1 id="sql-grant-examples">
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>例子</title>

<!--==========================orignal english content==========================
  <para>
   Grant insert privilege to all users on table <literal>films</literal>:

<programlisting>
GRANT INSERT ON films TO PUBLIC;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   把表<literal>films</literal>上的插入特权授予给所有用户：

<programlisting>
GRANT INSERT ON films TO PUBLIC;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Grant all available privileges to user <literal>manuel</literal> on view
   <literal>kinds</literal>:

<programlisting>
GRANT ALL PRIVILEGES ON kinds TO manuel;
</programlisting>

   Note that while the above will indeed grant all privileges if executed by a
   superuser or the owner of <literal>kinds</literal>, when executed by someone
   else it will only grant those permissions for which the someone else has
   grant options.
  </para>
____________________________________________________________________________-->
  <para>
   把视图<literal>kinds</literal>上的所有可用特权授予给用户<literal>manuel</literal>：

<programlisting>
GRANT ALL PRIVILEGES ON kinds TO manuel;
</programlisting>

   注意虽然上述语句被一个超级用户或者<literal>kinds</literal>的拥有者执行时确实会授予所有特权，但是当由其他人执行时将只会授予那些执行者拥有授权选项的权限。
  </para>

<!--==========================orignal english content==========================
  <para>
   Grant membership in role <literal>admins</literal> to user <literal>joe</literal>:

<programlisting>
GRANT admins TO joe;
</programlisting></para>
____________________________________________________________________________-->
  <para>
   把角色<literal>admins</literal>中的成员关系授予给用户<literal>joe</literal>：

<programlisting>
GRANT admins TO joe;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-grant-compatibility">
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
   <para>
    According to the SQL standard, the <literal>PRIVILEGES</literal>
    key word in <literal>ALL PRIVILEGES</literal> is required.  The
    SQL standard does not support setting the privileges on more than
    one object per command.
   </para>
____________________________________________________________________________-->
   <para>
    根据 SQL 标准，<literal>ALL PRIVILEGES</literal>中的<literal>PRIVILEGES</literal>关键词是必须的。SQL 标准不支持在每个命令中设置超过一个对象上的特权。
   </para>

<!--==========================orignal english content==========================
   <para>
    <productname>PostgreSQL</productname> allows an object owner to revoke their
    own ordinary privileges: for example, a table owner can make the table
    read-only to themselves by revoking their own <literal>INSERT</literal>,
    <literal>UPDATE</literal>, <literal>DELETE</literal>, and <literal>TRUNCATE</literal>
    privileges.  This is not possible according to the SQL standard.  The
    reason is that <productname>PostgreSQL</productname> treats the owner's
    privileges as having been granted by the owner to themselves; therefore they
    can revoke them too.  In the SQL standard, the owner's privileges are
    granted by an assumed entity <quote>_SYSTEM</quote>.  Not being
    <quote>_SYSTEM</quote>, the owner cannot revoke these rights.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>允许一个对象拥有者
    撤回它们拥有的普通特权：例如，一个表拥有者可以通过撤回其自身拥有
    的<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>
    和<literal>TRUNCATE</literal>特权让该表对它们自己只读。根据 SQL 标准
    这是不可能发生的。原因在于<productname>PostgreSQL</productname>
    认为拥有者的特权是由拥有者授予给它们自己的，因此它们也能够撤回它们。
    在 SQL 标准中，拥有者的特权是有一个假设的实体<quote>_SYSTEM</quote>所授予。
    由于不是<quote>_SYSTEM</quote>，拥有者就不能撤回这些权力。
   </para>

<!--==========================orignal english content==========================
   <para>
    According to the SQL standard, grant options can be granted to
    <literal>PUBLIC</literal>; PostgreSQL only supports granting grant options
    to roles.
   </para>
____________________________________________________________________________-->
   <para>
    根据 SQL 标准，授权选项可以被授予给<literal>PUBLIC</literal>， PostgreSQL 只支持把授权选项授予给角色。
   </para>

<!--==========================orignal english content==========================
   <para>
    The SQL standard provides for a <literal>USAGE</literal> privilege
    on other kinds of objects: character sets, collations,
    translations.
   </para>
____________________________________________________________________________-->
   <para>
    SQL 标准提供了其他对象类型上的<literal>USAGE</literal>特权：字符集、排序规则、翻译。
   </para>

<!--==========================orignal english content==========================
   <para>
    In the SQL standard, sequences only have a <literal>USAGE</literal>
    privilege, which controls the use of the <literal>NEXT VALUE FOR</literal>
    expression, which is equivalent to the
    function <function>nextval</function> in PostgreSQL.  The sequence
    privileges <literal>SELECT</literal> and <literal>UPDATE</literal> are
    PostgreSQL extensions.  The application of the
    sequence <literal>USAGE</literal> privilege to
    the <literal>currval</literal> function is also a PostgreSQL extension (as
    is the function itself).
   </para>
____________________________________________________________________________-->
   <para>
    在 SQL 标准中，序列只有一个<literal>USAGE</literal>特权，它控制<literal>NEXT VALUE FOR</literal>表达式的使用，该表达式等效于 PostgreSQL 中的函数<function>nextval</function>。序列的特权<literal>SELECT</literal>和<literal>UPDATE</literal>是 PostgreSQL 扩展。应用序列的<literal>USAGE</literal>特权到<literal>currval</literal>函数也是一个 PostgreSQL 扩展（该函数本身也是）。
   </para>

<!--==========================orignal english content==========================
   <para>
    Privileges on databases, tablespaces, schemas, and languages are
    <productname>PostgreSQL</productname> extensions.
   </para>
____________________________________________________________________________-->
   <para>
    数据库、表空间、模式和语言上的特权都是<productname>PostgreSQL</productname>扩展。
   </para>
 </refsect1>


 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-revoke"/></member>
   <member><xref linkend="sql-alterdefaultprivileges"/></member>
  </simplelist>
 </refsect1>

</refentry>

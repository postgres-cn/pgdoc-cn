<!--
doc/src/sgml/ref/lock.sgml
PostgreSQL documentation
-->

<refentry id="sql-lock">
<!--==========================orignal english content==========================
 <indexterm zone="sql-lock">
  <primary>LOCK</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-lock">
  <primary>LOCK</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>LOCK</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>LOCK</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>LOCK</refname>
  <refpurpose>lock a table</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>LOCK</refname>
  <refpurpose>锁定一个表</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
LOCK [ TABLE ] [ ONLY ] <replaceable class="parameter">name</replaceable> [ * ] [, ...] [ IN <replaceable class="parameter">lockmode</replaceable> MODE ] [ NOWAIT ]

<phrase>where <replaceable class="parameter">lockmode</replaceable> is one of:</phrase>

    ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE
    | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE
</synopsis>
____________________________________________________________________________-->
<synopsis>
LOCK [ TABLE ] [ ONLY ] <replaceable class="parameter">name</replaceable> [ * ] [, ...] [ IN <replaceable class="parameter">lockmode</replaceable> MODE ] [ NOWAIT ]

<phrase>其中 <replaceable class="parameter">lockmode</replaceable> 可以是以下之一：</phrase>

    ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE
    | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>LOCK TABLE</command> obtains a table-level lock, waiting
   if necessary for any conflicting locks to be released.  If
   <literal>NOWAIT</literal> is specified, <command>LOCK
   TABLE</command> does not wait to acquire the desired lock: if it
   cannot be acquired immediately, the command is aborted and an
   error is emitted.  Once obtained, the lock is held for the
   remainder of the current transaction.  (There is no <command>UNLOCK
   TABLE</command> command; locks are always released at transaction
   end.)
  </para>
____________________________________________________________________________-->
  <para>
   <command>LOCK TABLE</command>获得一个表级锁，必要时会
   等待任何冲突锁被释放。如果指定了<literal>NOWAIT</literal>，
   <command>LOCK TABLE</command>不会等待以获得想要的锁：
   如果它不能立刻得到，该命令会被中止并且发出一个错误。一旦获取到，
   该锁会被在当前事务中一直持有（没有<command>UNLOCK
   TABLE</command>命令，锁总是在事务结束时被释放）。
  </para>

<!--==========================orignal english content==========================
  <para>
   When a view is locked, all relations appearing in the view definition
   query are also locked recursively with the same lock mode.
  </para>
____________________________________________________________________________-->
  <para>
   当一个视图被锁定时，出现在该视图定义查询中的所有关系也将被使用同样的锁模式递归地锁住。
  </para>

<!--==========================orignal english content==========================
  <para>
   When acquiring locks automatically for commands that reference
   tables, <productname>PostgreSQL</productname> always uses the least
   restrictive lock mode possible. <command>LOCK TABLE</command>
   provides for cases when you might need more restrictive locking.
   For example, suppose an application runs a transaction at the
   <literal>READ COMMITTED</literal> isolation level and needs to ensure that
   data in a table remains stable for the duration of the transaction.
   To achieve this you could obtain <literal>SHARE</literal> lock mode over the
   table before querying. This will prevent concurrent data changes
   and ensure subsequent reads of the table see a stable view of
   committed data, because <literal>SHARE</literal> lock mode conflicts with
   the <literal>ROW EXCLUSIVE</literal> lock acquired by writers, and your
   <command>LOCK TABLE <replaceable
   class="parameter">name</replaceable> IN SHARE MODE</command>
   statement will wait until any concurrent holders of <literal>ROW
   EXCLUSIVE</literal> mode locks commit or roll back. Thus, once you
   obtain the lock, there are no uncommitted writes outstanding;
   furthermore none can begin until you release the lock.
  </para>
____________________________________________________________________________-->
  <para>
   在为引用表的命令自动获取锁时，
   <productname>PostgreSQL</productname>总是尽可能使用最不严格的
   锁模式。提供<command>LOCK TABLE</command>是用于想要更严格
   的锁定的情况。例如，假设一个应用运行一个<literal>READ COMMITTED</literal>
   隔离级别的事务，
   并且需要确保一个表中的数据在该事务的期间保持稳定。要实现这个目的，
   必须在查询之前在表上获得<literal>SHARE</literal>锁模式。这将阻止并发的
   数据更改并且确保该表的后续读操作会看到已提交数据的一个稳定视图，
   因为<literal>SHARE</literal>锁模式与写入者所要求的
   <literal>ROW EXCLUSIVE</literal>锁有冲突，并且你的
   <command>LOCK TABLE <replaceable
   class="parameter">name</replaceable> IN SHARE MODE</command>
   语句将等待，直到任何并发持有<literal>ROW
   EXCLUSIVE</literal>模式锁的持有者提交或者回滚。因此，一旦得到锁，
   就不会有未提交的写入还没有解决。更进一步，在释放该锁之前，任何
   人都不能开始。
  </para>

<!--==========================orignal english content==========================
  <para>
   To achieve a similar effect when running a transaction at the
   <literal>REPEATABLE READ</literal> or <literal>SERIALIZABLE</literal>
   isolation level, you have to execute the <command>LOCK TABLE</command> statement
   before executing any <command>SELECT</command> or data modification statement.
   A <literal>REPEATABLE READ</literal> or <literal>SERIALIZABLE</literal> transaction's
   view of data will be frozen when its first
   <command>SELECT</command> or data modification statement begins.  A <command>LOCK
   TABLE</command> later in the transaction will still prevent concurrent writes
   &mdash; but it won't ensure that what the transaction reads corresponds to
   the latest committed values.
  </para>
____________________________________________________________________________-->
  <para>
   要在运行在<literal>REPEATABLE READ</literal>或<literal>SERIALIZABLE</literal>
   隔离级别的事务中得到类似的效果，你必须在执行任何
   <command>SELECT</command>或者数据修改语句之前执行
   <command>LOCK TABLE</command>语句。一个
   <literal>REPEATABLE READ</literal>或者<literal>SERIALIZABLE</literal>事务的
   数据视图将在它的第一个<command>SELECT</command>或者数据修改语句开始
   时被冻结。在该事务中稍后的一个<command>LOCK TABLE</command>仍将阻止并发写
   &mdash; 但它不会确保该事务读到的东西对应于最新的已提交值。
  </para>

<!--==========================orignal english content==========================
  <para>
   If a transaction of this sort is going to change the data in the
   table, then it should use <literal>SHARE ROW EXCLUSIVE</literal> lock mode
   instead of <literal>SHARE</literal> mode.  This ensures that only one
   transaction of this type runs at a time.  Without this, a deadlock
   is possible: two transactions might both acquire <literal>SHARE</literal>
   mode, and then be unable to also acquire <literal>ROW EXCLUSIVE</literal>
   mode to actually perform their updates.  (Note that a transaction's
   own locks never conflict, so a transaction can acquire <literal>ROW
   EXCLUSIVE</literal> mode when it holds <literal>SHARE</literal> mode &mdash; but not
   if anyone else holds <literal>SHARE</literal> mode.)  To avoid deadlocks,
   make sure all transactions acquire locks on the same objects in the
   same order, and if multiple lock modes are involved for a single
   object, then transactions should always acquire the most
   restrictive mode first.
  </para>
____________________________________________________________________________-->
  <para>
   如果一个此类事务正要修改表中的数据，那么它应该使用
   <literal>SHARE ROW EXCLUSIVE</literal>锁模式来取代
   <literal>SHARE</literal>模式。这会保证一次只有一个此类事务运行。如果
   不用这种模式，死锁就可能出现：两个事务可能都要求
   <literal>SHARE</literal>模式，并且都不能获得
   <literal>ROW EXCLUSIVE</literal>模式来真正地执行它们的更新（注意一个
   事务所拥有的锁不会冲突，因此一个事务可以在它持有<literal>SHARE</literal>
   模式时获得<literal>ROW EXCLUSIVE</literal>模式 &mdash; 但是如果有其他
   人持有<literal>SHARE</literal>模式时则不能）。为了避免死锁，确保所有的
   事务在同样的对象上以相同的顺序获得锁，并且如果在一个对象上涉及多
   种锁模式，事务应该总是首先获得最严格的那种模式。
  </para>

<!--==========================orignal english content==========================
  <para>
   More information about the lock modes and locking strategies can be
   found in <xref linkend="explicit-locking"/>.
  </para>
____________________________________________________________________________-->
  <para>
   更多关于锁模式和锁策略的信息可见<xref linkend="explicit-locking"/>。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of an existing table to
      lock. If <literal>ONLY</literal> is specified before the table name, only that
      table is locked. If <literal>ONLY</literal> is not specified, the table and all
      its descendant tables (if any) are locked.  Optionally, <literal>*</literal>
      can be specified after the table name to explicitly indicate that
      descendant tables are included.
     </para>
____________________________________________________________________________-->
     <para>
      要锁定的一个现有表的名称（可以是模式限定的）。如果在表名前指定了
    <literal>ONLY</literal>，只有该表会被锁定。如果没有指定了
    <literal>ONLY</literal>，该表和它所有的后代表（如果有）都会被锁定。可选
    地，在表名后指定<literal>*</literal>来显式地表示把后代表包括在内。
     </para>

<!--==========================orignal english content==========================
     <para>
      The command <literal>LOCK TABLE a, b;</literal> is equivalent to
      <literal>LOCK TABLE a; LOCK TABLE b;</literal>. The tables are locked
      one-by-one in the order specified in the <command>LOCK
      TABLE</command> command.
     </para>
____________________________________________________________________________-->
     <para>
      命令<literal>LOCK TABLE a, b;</literal>等效于
      <literal>LOCK TABLE a; LOCK TABLE b;</literal>。这些表会被按照在
      <command>LOCK TABLE</command>中指定的顺序一个一个
      被锁定。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">lockmode</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">lockmode</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The lock mode specifies which locks this lock conflicts with.
      Lock modes are described in <xref linkend="explicit-locking"/>.
     </para>
____________________________________________________________________________-->
     <para>
      锁模式指定这个锁和哪些锁冲突。锁模式在<xref linkend="explicit-locking"/>中描述。
     </para>

<!--==========================orignal english content==========================
     <para>
      If no lock mode is specified, then <literal>ACCESS
      EXCLUSIVE</literal>, the most restrictive mode, is used.
     </para>
____________________________________________________________________________-->
     <para>
      如果没有指定锁模式，那儿将使用最严格的模式<literal>ACCESS
      EXCLUSIVE</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>NOWAIT</literal></term>
____________________________________________________________________________-->
    <term><literal>NOWAIT</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Specifies that <command>LOCK TABLE</command> should not wait for
      any conflicting locks to be released: if the specified lock(s)
      cannot be acquired immediately without waiting, the transaction
      is aborted.
     </para>
____________________________________________________________________________-->
     <para>
      指定<command>LOCK TABLE</command>不等待任何冲突锁被释放：
      如果所指定的锁不能立即获得，那么事务就会中止。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
   <para>
    <literal>LOCK TABLE ... IN ACCESS SHARE MODE</literal> requires <literal>SELECT</literal>
    privileges on the target table.  <literal>LOCK TABLE ... IN ROW EXCLUSIVE
    MODE</literal> requires <literal>INSERT</literal>, <literal>UPDATE</literal>, <literal>DELETE</literal>,
    or <literal>TRUNCATE</literal> privileges on the target table. All other forms of
    <command>LOCK</command> require table-level <literal>UPDATE</literal>, <literal>DELETE</literal>,
    or <literal>TRUNCATE</literal> privileges.
   </para>
____________________________________________________________________________-->
   <para>
    <literal>LOCK TABLE ... IN ACCESS SHARE MODE</literal>要求目标表上的<literal>SELECT</literal>特权。<literal>LOCK TABLE ... IN ROW EXCLUSIVE MODE</literal>要求目标表上的<literal>INSERT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>或<literal>TRUNCATE</literal>特权。所有其他形式的<command>LOCK</command>要求表级<literal>UPDATE</literal>、<literal>DELETE</literal>或<literal>TRUNCATE</literal>特权。
   </para>

<!--==========================orignal english content==========================
   <para>
    The user performing the lock on the view must have the corresponding privilege
    on the view.  In addition the view's owner must have the relevant privileges on
    the underlying base relations, but the user performing the lock does
    not need any permissions on the underlying base relations.
   </para>
____________________________________________________________________________-->
   <para>
    在该视图上执行锁定的用户必须具有该视图上相应的特权。此外视图的拥有者必须拥有底层基关系上的相关特权，但是执行锁定的用户不需要底层基关系上的任何权限。
   </para>

<!--==========================orignal english content==========================
   <para>
    <command>LOCK TABLE</command> is useless outside a transaction block: the lock
    would remain held only to the completion of the statement.  Therefore
    <productname>PostgreSQL</productname> reports an error if <command>LOCK</command>
    is used outside a transaction block.
    Use
    <xref linkend="sql-begin"/> and
    <xref linkend="sql-commit"/>
    (or <xref linkend="sql-rollback"/>)
    to define a transaction block.
   </para>
____________________________________________________________________________-->
   <para>
    <command>LOCK TABLE</command>在一个事务块外部没有用处：锁将只保持到语句完成。因此如果在一个事务块外部使用了<command>LOCK</command>，<productname>PostgreSQL</productname>会报告一个错误。使用<xref linkend="sql-begin"/>和<xref linkend="sql-commit"/>（或者<xref linkend="sql-rollback"/>）定义一个事务块。
   </para>

<!--==========================orignal english content==========================
  <para>
   <command>LOCK TABLE</command> only deals with table-level locks, and so
   the mode names involving <literal>ROW</literal> are all misnomers.  These
   mode names should generally be read as indicating the intention of
   the user to acquire row-level locks within the locked table.  Also,
   <literal>ROW EXCLUSIVE</literal> mode is a shareable table lock.  Keep in
   mind that all the lock modes have identical semantics so far as
   <command>LOCK TABLE</command> is concerned, differing only in the rules
   about which modes conflict with which. For information on how to
   acquire an actual row-level lock, see <xref linkend="locking-rows"/>
   and the <xref linkend="sql-for-update-share"
   endterm="sql-for-update-share-title"/> in the <command>SELECT</command>
   reference documentation.
  </para>
____________________________________________________________________________-->
  <para>
   <command>LOCK TABLE</command>只处理表级锁，因此涉及到
   <literal>ROW</literal>的模式名称在这里都是不当的。这些模式名称应该通常
   被解读为用户在被锁定表中获取行级锁的意向。还有，
   <literal>ROW EXCLUSIVE</literal>模式是一个可共享的表锁。记住就
   <command>LOCK TABLE</command>而言，所有的锁模式都具有相同的语义，
   只有模式的冲突规则有所不同。关于如何获取一个真正的行级锁的信息，
   请见<command>SELECT</command>参考文档中的
   <xref linkend="locking-rows"/>和<xref linkend="sql-for-update-share"
   endterm="sql-for-update-share-title"/>。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   Obtain a <literal>SHARE</literal> lock on a primary key table when going to perform
   inserts into a foreign key table:

<programlisting>
BEGIN WORK;
LOCK TABLE films IN SHARE MODE;
SELECT id FROM films
    WHERE name = 'Star Wars: Episode I - The Phantom Menace';
-&minus; Do ROLLBACK if record was not returned
INSERT INTO films_user_comments VALUES
    (_id_, 'GREAT! I was waiting for it for so long!');
COMMIT WORK;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   在将要向一个外键表中执行插入时在主键表上获得一个
   <literal>SHARE</literal>锁：

<programlisting>
BEGIN WORK;
LOCK TABLE films IN SHARE MODE;
SELECT id FROM films
    WHERE name = 'Star Wars: Episode I - The Phantom Menace';
-- 如果记录没有被返回就做 ROLLBACK
INSERT INTO films_user_comments VALUES
    (_id_, 'GREAT! I was waiting for it for so long!');
COMMIT WORK;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Take a <literal>SHARE ROW EXCLUSIVE</literal> lock on a primary key table when going to perform
   a delete operation:

<programlisting>
BEGIN WORK;
LOCK TABLE films IN SHARE ROW EXCLUSIVE MODE;
DELETE FROM films_user_comments WHERE id IN
    (SELECT id FROM films WHERE rating &lt; 5);
DELETE FROM films WHERE rating &lt; 5;
COMMIT WORK;
</programlisting></para>
____________________________________________________________________________-->
  <para>
   在将要执行一次删除操作前在主键表上取一个
   <literal>SHARE ROW EXCLUSIVE</literal>锁：

<programlisting>
BEGIN WORK;
LOCK TABLE films IN SHARE ROW EXCLUSIVE MODE;
DELETE FROM films_user_comments WHERE id IN
    (SELECT id FROM films WHERE rating &lt; 5);
DELETE FROM films WHERE rating &lt; 5;
COMMIT WORK;
</programlisting></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   There is no <command>LOCK TABLE</command> in the SQL standard,
   which instead uses <command>SET TRANSACTION</command> to specify
   concurrency levels on transactions.  <productname>PostgreSQL</productname> supports that too;
   see <xref linkend="sql-set-transaction"/> for details.
  </para>
____________________________________________________________________________-->
  <para>
   在 SQL 标准中没有<command>LOCK TABLE</command>，SQL 标准中使用
   <command>SET TRANSACTION</command>指定事务上的并发层次。
   <productname>PostgreSQL</productname>也支持这样做，详见
   <xref linkend="sql-set-transaction"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Except for <literal>ACCESS SHARE</literal>, <literal>ACCESS EXCLUSIVE</literal>,
   and <literal>SHARE UPDATE EXCLUSIVE</literal> lock modes, the
   <productname>PostgreSQL</productname> lock modes and the
   <command>LOCK TABLE</command> syntax are compatible with those
   present in <productname>Oracle</productname>.
  </para>
____________________________________________________________________________-->
  <para>
   除<literal>ACCESS SHARE</literal>、<literal>ACCESS EXCLUSIVE</literal>和
   <literal>SHARE UPDATE EXCLUSIVE</literal>锁模式之外，
   <productname>PostgreSQL</productname>锁模式和
   <command>LOCK TABLE</command>语法与
   <productname>Oracle</productname>中的兼容。
  </para>
 </refsect1>
</refentry>

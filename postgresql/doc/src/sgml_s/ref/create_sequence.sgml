<!--
doc/src/sgml/ref/create_sequence.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATESEQUENCE">
<!--==========================orignal english content==========================
 <indexterm zone="sql-createsequence">
  <primary>CREATE SEQUENCE</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-createsequence">
  <primary>CREATE SEQUENCE</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>CREATE SEQUENCE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>CREATE SEQUENCE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>CREATE SEQUENCE</refname>
  <refpurpose>define a new sequence generator</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>CREATE SEQUENCE</refname>
  <refpurpose>定义一个新的序列发生器</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
CREATE [ TEMPORARY | TEMP ] SEQUENCE [ IF NOT EXISTS ] <replaceable class="parameter">name</replaceable>
    [ AS <replaceable class="parameter">data_type</replaceable> ]
    [ INCREMENT [ BY ] <replaceable class="parameter">increment</replaceable> ]
    [ MINVALUE <replaceable class="parameter">minvalue</replaceable> | NO MINVALUE ] [ MAXVALUE <replaceable class="parameter">maxvalue</replaceable> | NO MAXVALUE ]
    [ START [ WITH ] <replaceable class="parameter">start</replaceable> ] [ CACHE <replaceable class="parameter">cache</replaceable> ] [ [ NO ] CYCLE ]
    [ OWNED BY { <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable> | NONE } ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
CREATE [ TEMPORARY | TEMP ] SEQUENCE [ IF NOT EXISTS ] <replaceable class="parameter">name</replaceable> [ INCREMENT [ BY ] <replaceable class="parameter">increment</replaceable> ]
    [ MINVALUE <replaceable class="parameter">minvalue</replaceable> | NO MINVALUE ] [ MAXVALUE <replaceable class="parameter">maxvalue</replaceable> | NO MAXVALUE ]
    [ START [ WITH ] <replaceable class="parameter">start</replaceable> ] [ CACHE <replaceable class="parameter">cache</replaceable> ] [ [ NO ] CYCLE ]
    [ OWNED BY { <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable> | NONE } ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE SEQUENCE</command> creates a new sequence number
   generator.  This involves creating and initializing a new special
   single-row table with the name <replaceable
   class="parameter">name</replaceable>.  The generator will be
   owned by the user issuing the command.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE SEQUENCE</command>创建一个新的序列数
   发生器。这涉及到用名称<replaceable
   class="parameter">name</replaceable>创建并且初始化
   一个新的特殊的单行表。该发生器将由发出该命令的用户所拥有。
  </para>

<!--==========================orignal english content==========================
  <para>
   If a schema name is given then the sequence is created in the
   specified schema.  Otherwise it is created in the current schema.
   Temporary sequences exist in a special schema, so a schema name cannot be
   given when creating a temporary sequence.
   The sequence name must be distinct from the name of any other sequence,
   table, index, view, or foreign table in the same schema.
  </para>
____________________________________________________________________________-->
  <para>
   如果给出一个模式名称，则该序列将将被创建在指定的模式中。否则它会被
   创建在当前模式中。临时序列存在于一个特殊的模式中，因此在创建临时序列
   时不能给出模式名。序列名称必须与同一模式中任何其他序列、表、索引、
   视图或者外部表的名称不同。
  </para>

<!--==========================orignal english content==========================
  <para>
   After a sequence is created, you use the functions
   <function>nextval</function>,
   <function>currval</function>, and
   <function>setval</function>
   to operate on the sequence.  These functions are documented in
   <xref linkend="functions-sequence">.
  </para>
____________________________________________________________________________-->
  <para>
   在序列被创建后，可以使用函数
   <function>nextval</function>、
   <function>currval</function>以及
   <function>setval</function>来操作该序列。这些函数在
   <xref linkend="functions-sequence"/>中有介绍。
  </para>

<!--==========================orignal english content==========================
  <para>
   Although you cannot update a sequence directly, you can use a query like:

<programlisting>
SELECT * FROM <replaceable>name</replaceable>;
</programlisting>

   to examine the parameters and current state of a sequence.  In particular,
   the <literal>last_value</> field of the sequence shows the last value
   allocated by any session.  (Of course, this value might be obsolete
   by the time it's printed, if other sessions are actively doing
   <function>nextval</> calls.)
  </para>
____________________________________________________________________________-->
  <para>
   尽管无法直接更新一个序列，可以使用这样的查询：

<programlisting>
SELECT * FROM <replaceable>name</replaceable>;
</programlisting>

   来检查一个序列的参数以及当前状态。特别地，序列的
   <literal>last_value</literal>域显示被任意会话最后一次取得的值（当然，
   在被打印时该值可能已经过时了，因为可能有其他会话正在执行
   <function>nextval</function>调用）。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
____________________________________________________________________________-->
    <term><literal>TEMPORARY</literal> or <literal>TEMP</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      If specified, the sequence object is created only for this
      session, and is automatically dropped on session exit.  Existing
      permanent sequences with the same name are not visible (in this
      session) while the temporary sequence exists, unless they are
      referenced with schema-qualified names.
     </para>
____________________________________________________________________________-->
     <para>
      如果被指定，只会为这个会话创建序列对象，并且在会话退出时自动
      删除它。当临时序列存在时，已有的同名永久序列（在这个会话中）
      会变得不可见，不过可以用模式限定的名称来引用同名永久序列。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>IF NOT EXISTS</literal></term>
____________________________________________________________________________-->
    <term><literal>IF NOT EXISTS</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Do not throw an error if a relation with the same name already exists.
      A notice is issued in this case. Note that there is no guarantee that
      the existing relation is anything like the sequence that would have
      been created - it might not even be a sequence.
     </para>
____________________________________________________________________________-->
     <para>
      如果已经存在一个同名的关系时不要抛出错误。这种情况下会发出一个
      提示。注意这不保证现有的关系与即将创建的序列相似 -- 它甚至可能
      都不是一个序列。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of the sequence to be created.
     </para>
____________________________________________________________________________-->
     <para>
      要创建的序列的名称（可以是模式限定的）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">data_type</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">data_type</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The optional
      clause <literal>AS <replaceable class="parameter">data_type</replaceable></literal>
      specifies the data type of the sequence.  Valid types are
      <literal>smallint</literal>, <literal>integer</literal>,
      and <literal>bigint</literal>.  <literal>bigint</literal> is the
      default.  The data type determines the default minimum and maximum
      values of the sequence.
     </para>
____________________________________________________________________________-->
     <para>
      可选的子句<literal>AS <replaceable class="parameter">data_type</replaceable></literal>
      制定序列的数据类型。有效类型是
      <literal>smallint</literal>、<literal>integer</literal>、
      和<literal>bigint</literal>。默认是<literal>bigint</literal>。
      数据类型决定了序列的默认最小和最大值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">increment</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">increment</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The optional clause <literal>INCREMENT BY <replaceable
      class="parameter">increment</replaceable></literal> specifies
      which value is added to the current sequence value to create a
      new value.  A positive value will make an ascending sequence, a
      negative one a descending sequence.  The default value is 1.
     </para>
____________________________________________________________________________-->
     <para>
      可选的子句<literal>INCREMENT BY <replaceable
      class="parameter">increment</replaceable></literal>指定为了
      创建新值会把哪个值加到当前序列值上。一个正值将会创造一个上升
      序列，负值会创造一个下降序列。默认值是 1。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">minvalue</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">minvalue</replaceable></term>
<!--==========================orignal english content==========================
    <term><literal>NO MINVALUE</literal></term>
____________________________________________________________________________-->
    <term><literal>NO MINVALUE</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The optional clause <literal>MINVALUE <replaceable
      class="parameter">minvalue</replaceable></literal> determines
      the minimum value a sequence can generate. If this clause is not
      supplied or <option>NO MINVALUE</option> is specified, then
      defaults will be used.  The default for an ascending sequence is 1.  The
      default for a descending sequence is the minimum value of the data type.
     </para>
____________________________________________________________________________-->
     <para>
      可选的子句<literal>MINVALUE <replaceable
      class="parameter">minvalue</replaceable></literal>决定一个序列
      能产生的最小值。如果没有提供这个子句或者指定了
      <option>NO MINVALUE</option>，那么会使用默认值。
	  升序序列的默认值为1。降序序列的默认值为数据类型的最小值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">maxvalue</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">maxvalue</replaceable></term>
<!--==========================orignal english content==========================
    <term><literal>NO MAXVALUE</literal></term>
____________________________________________________________________________-->
    <term><literal>NO MAXVALUE</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The optional clause <literal>MAXVALUE <replaceable
      class="parameter">maxvalue</replaceable></literal> determines
      the maximum value for the sequence. If this clause is not
      supplied or <option>NO MAXVALUE</option> is specified, then
      default values will be used.  The default for an ascending sequence is
      the maximum value of the data type.  The default for a descending
      sequence is -1.
     </para>
____________________________________________________________________________-->
     <para>
      可选的子句<literal>MAXVALUE <replaceable
      class="parameter">maxvalue</replaceable></literal>决定该序列
      的最大值。如果没有提供这个子句或者指定了
      <option>NO MAXVALUE</option>，那么将会使用默认值。
	  升序序列的默认值是数据类型的最大值。降序序列的默认值是-1。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">start</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">start</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The optional clause <literal>START WITH <replaceable
      class="parameter">start</replaceable> </literal> allows the
      sequence to begin anywhere.  The default starting value is
      <replaceable class="parameter">minvalue</replaceable> for
      ascending sequences and <replaceable
      class="parameter">maxvalue</replaceable> for descending ones.
     </para>
____________________________________________________________________________-->
     <para>
      可选的子句<literal>START WITH <replaceable
      class="parameter">start</replaceable> </literal>允许序列从任何
      地方开始。对于上升序列和下降序列来说，默认的开始值分别是
      <replaceable class="parameter">minvalue</replaceable>和
      <replaceable class="parameter">maxvalue</replaceable>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">cache</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">cache</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The optional clause <literal>CACHE <replaceable
      class="parameter">cache</replaceable></literal> specifies how
      many sequence numbers are to be preallocated and stored in
      memory for faster access. The minimum value is 1 (only one value
      can be generated at a time, i.e., no cache), and this is also the
      default.
     </para>
____________________________________________________________________________-->
     <para>
      可选的子句<literal>CACHE <replaceable
      class="parameter">cache</replaceable></literal>指定要预分配多少
      个序列数并且把它们放在内存中以便快速访问。最小值为 1 （一次只生成
      一个值，即没有缓存），默认值也是 1。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>CYCLE</literal></term>
____________________________________________________________________________-->
    <term><literal>CYCLE</literal></term>
<!--==========================orignal english content==========================
    <term><literal>NO CYCLE</literal></term>
____________________________________________________________________________-->
    <term><literal>NO CYCLE</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The <literal>CYCLE</literal> option allows the sequence to wrap
      around when the <replaceable
      class="parameter">maxvalue</replaceable> or <replaceable
      class="parameter">minvalue</replaceable> has been reached by an
      ascending or descending sequence respectively. If the limit is
      reached, the next number generated will be the <replaceable
      class="parameter">minvalue</replaceable> or <replaceable
      class="parameter">maxvalue</replaceable>, respectively.
     </para>
____________________________________________________________________________-->
     <para>
      对于上升序列和下降序列，<literal>CYCLE</literal>选项允许序列
      在分别达到<replaceable
      class="parameter">maxvalue</replaceable>和<replaceable
      class="parameter">minvalue</replaceable>时回卷。如果达到
      该限制，下一个产生的数字将分别是<replaceable
      class="parameter">minvalue</replaceable>和<replaceable
      class="parameter">maxvalue</replaceable>。
     </para>

<!--==========================orignal english content==========================
     <para>
      If <literal>NO CYCLE</literal> is specified, any calls to
      <function>nextval</function> after the sequence has reached its
      maximum value will return an error.  If neither
      <literal>CYCLE</literal> or <literal>NO CYCLE</literal> are
      specified, <literal>NO CYCLE</literal> is the default.
     </para>
____________________________________________________________________________-->
     <para>
      如果指定了<literal>NO CYCLE</literal>，当序列到达其最大值
      后任何<function>nextval</function>调用将返回一个错误。如果
      <literal>CYCLE</literal>和<literal>NO CYCLE</literal>都没有
      被指定，则默认为<literal>NO CYCLE</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>OWNED BY</literal> <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable></term>
____________________________________________________________________________-->
    <term><literal>OWNED BY</literal> <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><literal>OWNED BY NONE</literal></term>
____________________________________________________________________________-->
    <term><literal>OWNED BY NONE</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The <literal>OWNED BY</literal> option causes the sequence to be
      associated with a specific table column, such that if that column
      (or its whole table) is dropped, the sequence will be automatically
      dropped as well.  The specified table must have the same owner and be in
      the same schema as the sequence.
      <literal>OWNED BY NONE</literal>, the default, specifies that there
      is no such association.
     </para>
____________________________________________________________________________-->
     <para>
      <literal>OWNED BY</literal>选项导致序列被与一个特定的表列关联
      在一起，这样如果该列（或者整个表）被删除，该序列也将被自动删除。
      指定的表必须和序列具有相同的拥有者并且在同一个模式中。默认选项
      <literal>OWNED BY NONE</literal>指定该序列不与某个列关联。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   Use <command>DROP SEQUENCE</command> to remove a sequence.
  </para>
____________________________________________________________________________-->
  <para>
   使用<command>DROP SEQUENCE</command>移除一个序列。
  </para>

<!--==========================orignal english content==========================
  <para>
   Sequences are based on <type>bigint</> arithmetic, so the range
   cannot exceed the range of an eight-byte integer
   (-9223372036854775808 to 9223372036854775807).
  </para>
____________________________________________________________________________-->
  <para>
   序列是基于<type>bigint</type>算法的，因此范围是不能超过一个八字节
   整数的范围（-9223372036854775808 到 9223372036854775807）。
  </para>
  
<!--==========================orignal english content==========================
  <para>
   Because <function>nextval</> and <function>setval</> calls are never
   rolled back, sequence objects cannot be used if <quote>gapless</>
   assignment of sequence numbers is needed.  It is possible to build
   gapless assignment by using exclusive locking of a table containing a
   counter; but this solution is much more expensive than sequence
   objects, especially if many transactions need sequence numbers
   concurrently.
  </para>
____________________________________________________________________________-->
  <para>
   由于<function>nextval</function>和<function>setval</function>调用绝不会回滚，
   如果需要序数的<quote>无间隙</quote>分配，则不能使用序列对象。可以
   通过在一个只包含一个计数器的表上使用排他锁来构建无间隙的分配，
   但是这种方案比序列对象开销更大，特别是当有很多事务并发请求序数
   时。
  </para>

<!--==========================orignal english content==========================
  <para>
   Unexpected results might be obtained if a <replaceable
   class="parameter">cache</replaceable> setting greater than one is
   used for a sequence object that will be used concurrently by
   multiple sessions.  Each session will allocate and cache successive
   sequence values during one access to the sequence object and
   increase the sequence object's <literal>last_value</> accordingly.
   Then, the next <replaceable class="parameter">cache</replaceable>-1
   uses of <function>nextval</> within that session simply return the
   preallocated values without touching the sequence object.  So, any
   numbers allocated but not used within a session will be lost when
   that session ends, resulting in <quote>holes</quote> in the
   sequence.
  </para>
____________________________________________________________________________-->
  <para>
   如果对一个将由多个会话并发使用的序列对象使用了大于 1 的<replaceable
   class="parameter">cache</replaceable>设置，可能会得到意想不到的结果。
   每个会话会在访问该序列对象时分配并且缓存后续的序列值，并且相应地增加
   该序列对象的<literal>last_value</literal>。然后，在该会话中下一次
   <function>nextval</function>会做
   <replaceable class="parameter">cache</replaceable>-1，并且简单地
   返回预分配的值而不修改序列对象。因此，任何已分配但没有在会话中使用的
   数字将会在该会话结束时丢失，导致该序列中的<quote>空洞</quote>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Furthermore, although multiple sessions are guaranteed to allocate
   distinct sequence values, the values might be generated out of
   sequence when all the sessions are considered.  For example, with
   a <replaceable class="parameter">cache</replaceable> setting of 10,
   session A might reserve values 1..10 and return
   <function>nextval</function>=1, then session B might reserve values
   11..20 and return <function>nextval</function>=11 before session A
   has generated <literal>nextval</literal>=2.  Thus, with a
   <replaceable class="parameter">cache</replaceable> setting of one
   it is safe to assume that <function>nextval</> values are generated
   sequentially; with a <replaceable
   class="parameter">cache</replaceable> setting greater than one you
   should only assume that the <function>nextval</> values are all
   distinct, not that they are generated purely sequentially.  Also,
   <literal>last_value</> will reflect the latest value reserved by
   any session, whether or not it has yet been returned by
   <function>nextval</>.
  </para>
____________________________________________________________________________-->
  <para>
   进一步，尽管多个会话能分配到不同的序列值，这些值可能会在所有会话都被
   考虑时生成出来。例如，
   <replaceable class="parameter">cache</replaceable>的设置为 10，会话
   A 可能储存值 1..10 并且返回<function>nextval</function>=1，然后会话 
   B 可能储存值 11..20 并且在 A 生成<literal>nextval</literal>=2 之前返回
   <function>nextval</function>=11。因此，如果
   <replaceable class="parameter">cache</replaceable>设置为 1，可以
   安全地假设<function>nextval</function>值被顺序地生成。如果<replaceable
   class="parameter">cache</replaceable>设置大于 1，就只能假定
   <function>nextval</function>值都是可区分的，但不能保证它们被完全地顺序生成。
   还有，<literal>last_value</literal>将反映服务于任意会话的最后一个值，不管它
   是否已经被<function>nextval</function>返回过。
  </para>

<!--==========================orignal english content==========================
  <para>
   Another consideration is that a <function>setval</> executed on
   such a sequence will not be noticed by other sessions until they
   have used up any preallocated values they have cached.
  </para>
____________________________________________________________________________-->
  <para>
   另一个考虑是，在这样一个序列上执行的<function>setval</function>将不会通知
   其他会话，直到它们用尽了任何已缓存的预分配值。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   Create an ascending sequence called <literal>serial</literal>, starting at 101:
<programlisting>
CREATE SEQUENCE serial START 101;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   创建一个称作<literal>serial</literal>的上升序列，从 101 开始：
<programlisting>
CREATE SEQUENCE serial START 101;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Select the next number from this sequence:
<programlisting>
SELECT nextval('serial');

 nextval
-&minus;-&minus;-&minus;-&minus;-
     101
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   从这个序列中选取下一个数字：
<programlisting>
SELECT nextval('serial');

 nextval
---------
     101
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Select the next number from this sequence:
<programlisting>
SELECT nextval('serial');

 nextval
-&minus;-&minus;-&minus;-&minus;-
     102
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   再从这个序列中选取下一个数字：
<programlisting>
SELECT nextval('serial');

 nextval
---------
     102
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Use this sequence in an <command>INSERT</command> command:
<programlisting>
INSERT INTO distributors VALUES (nextval('serial'), 'nothing');
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   在一个<command>INSERT</command>命令中使用这个序列：
<programlisting>
INSERT INTO distributors VALUES (nextval('serial'), 'nothing');
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Update the sequence value after a <command>COPY FROM</command>:
<programlisting>
BEGIN;
COPY distributors FROM 'input_file';
SELECT setval('serial', max(id)) FROM distributors;
END;
</programlisting></para>
____________________________________________________________________________-->
  <para>
   在一次<command>COPY FROM</command>后更新新列值：
<programlisting>
BEGIN;
COPY distributors FROM 'input_file';
SELECT setval('serial', max(id)) FROM distributors;
END;
</programlisting></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE SEQUENCE</command> conforms to the <acronym>SQL</acronym>
   standard, with the following exceptions:
   <itemizedlist>
    <listitem>
     <para>
      Obtaining the next value is done using the <function>nextval()</>
      function instead of the standard's <command>NEXT VALUE FOR</command>
      expression.
     </para>
    </listitem>
    <listitem>
     <para>
      The <literal>OWNED BY</> clause is a <productname>PostgreSQL</>
      extension.
     </para>
    </listitem>
   </itemizedlist></para>
____________________________________________________________________________-->
  <para>
   <command>CREATE SEQUENCE</command>符合<acronym>SQL</acronym>
   标准，不过下列除外：
   <itemizedlist>
    <listitem>
     <para>
      使用<function>nextval()</function>而不是标准的<command>NEXT VALUE FOR</command>
      表达式获取下一个值。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>OWNED BY</literal>子句是一种<productname>PostgreSQL</productname>扩展。
     </para>
    </listitem>
   </itemizedlist></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altersequence"/></member>
   <member><xref linkend="sql-dropsequence"/></member>
  </simplelist>
 </refsect1>

</refentry>

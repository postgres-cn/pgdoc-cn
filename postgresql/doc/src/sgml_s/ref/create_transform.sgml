<!-- doc/src/sgml/ref/create_transform.sgml -->

<refentry id="SQL-CREATETRANSFORM">
<!--==========================orignal english content==========================
 <indexterm zone="sql-createtransform">
  <primary>CREATE TRANSFORM</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-createtransform">
  <primary>CREATE TRANSFORM</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>CREATE TRANSFORM</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>CREATE TRANSFORM</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>CREATE TRANSFORM</refname>
  <refpurpose>define a new transform</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>CREATE TRANSFORM</refname>
  <refpurpose>定义一个新的转换</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
CREATE [ OR REPLACE ] TRANSFORM FOR <replaceable>type_name</replaceable> LANGUAGE <replaceable>lang_name</replaceable> (
    FROM SQL WITH FUNCTION <replaceable>from_sql_function_name</replaceable> [ (<replaceable>argument_type</replaceable> [, ...]) ],
    TO SQL WITH FUNCTION <replaceable>to_sql_function_name</replaceable> [ (<replaceable>argument_type</replaceable> [, ...]) ]
);
</synopsis>
____________________________________________________________________________-->
<synopsis>
CREATE [ OR REPLACE ] TRANSFORM FOR <replaceable>type_name</replaceable> LANGUAGE <replaceable>lang_name</replaceable> (
    FROM SQL WITH FUNCTION <replaceable>from_sql_function_name</replaceable> [ (<replaceable>argument_type</replaceable> [, ...]) ],
    TO SQL WITH FUNCTION <replaceable>to_sql_function_name</replaceable> [ (<replaceable>argument_type</replaceable> [, ...]) ]
);
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createtransform-description">
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>简介</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE TRANSFORM</command> defines a new transform.
   <command>CREATE OR REPLACE TRANSFORM</command> will either create a new
   transform, or replace an existing definition.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE TRANSFORM</command>定义一种新的转换。
   <command>CREATE OR REPLACE TRANSFORM</command>将
   创建一种新的转换或者替换现有的定义。
  </para>

<!--==========================orignal english content==========================
  <para>
   A transform specifies how to adapt a data type to a procedural language.
   For example, when writing a function in PL/Python using
   the <type>hstore</type> type, PL/Python has no prior knowledge how to
   present <type>hstore</type> values in the Python environment.  Language
   implementations usually default to using the text representation, but that
   is inconvenient when, for example, an associative array or a list would be
   more appropriate.
  </para>
____________________________________________________________________________-->
  <para>
   一种转换指定了如何把一种数据类型适配到一种过程语言。例如，在用
   PL/Python 编写一个使用<type>hstore</type>类型的函数时，PL/Python
   没有关于如何在 Python 环境中表示<type>hstore</type>值的先验知识。
   语言的实现通常默认会使用文本表示，但是在一些时候这很不方便，例如
   有时可能用一个联合数组或者列表更合适。
  </para>

<!--==========================orignal english content==========================
  <para>
   A transform specifies two functions:
   <itemizedlist>
    <listitem>
     <para>
      A <quote>from SQL</quote> function that converts the type from the SQL
      environment to the language.  This function will be invoked on the
      arguments of a function written in the language.
     </para>
    </listitem>

    <listitem>
     <para>
      A <quote>to SQL</quote> function that converts the type from the
      language to the SQL environment.  This function will be invoked on the
      return value of a function written in the language.
     </para>
    </listitem>
   </itemizedlist>
   It is not necessary to provide both of these functions.  If one is not
   specified, the language-specific default behavior will be used if
   necessary.  (To prevent a transformation in a certain direction from
   happening at all, you could also write a transform function that always
   errors out.)
  </para>
____________________________________________________________________________-->
  <para>
   一种转换指定了两个函数：
   <itemizedlist>
    <listitem>
     <para>
      一个<quote>from SQL</quote>函数负责将类型从 SQL 环境转换到语言。
      这个函数将在该语言编写的一个函数的参数上调用。
     </para>
    </listitem>

    <listitem>
     <para>
      一个<quote>to SQL</quote>函数负责将类型从语言转换到 SQL 环境。这
      个函数将在该语言编写的一个函数的返回值上调用。
     </para>
    </listitem>
   </itemizedlist>
   没有必要同时提供这些函数。如果有一种没有被指定，将在必要时使用与语言相
   关的默认行为（为了完全阻止在一个方向上发生转换，你也可以写一个总是报错
   的转换函数）。
  </para>

<!--==========================orignal english content==========================
  <para>
   To be able to create a transform, you must own and
   have <literal>USAGE</literal> privilege on the type, have
   <literal>USAGE</literal> privilege on the language, and own and
   have <literal>EXECUTE</literal> privilege on the from-SQL and to-SQL
   functions, if specified.
  </para>
____________________________________________________________________________-->
  <para>
   要创建一种转换，你必须拥有该类型并且具有该类型上的
   <literal>USAGE</literal>特权，拥有该语言上的
   <literal>USAGE</literal>特权，并且拥有 from-SQL 和 to-SQL 函数（如果
   指定了）及其上的<literal>EXECUTE</literal>特权。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

   <variablelist>
    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable>type_name</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>type_name</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the data type of the transform.
      </para>
____________________________________________________________________________-->
      <para>
       该转换的数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable>lang_name</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>lang_name</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the language of the transform.
      </para>
____________________________________________________________________________-->
      <para>
       该转换的语言的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal><replaceable>from_sql_function_name</replaceable>[(<replaceable>argument_type</replaceable> [, ...])]</literal></term>
____________________________________________________________________________-->
     <term><literal><replaceable>from_sql_function_name</replaceable>[(<replaceable>argument_type</replaceable> [, ...])]</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the function for converting the type from the SQL
       environment to the language.  It must take one argument of
       type <type>internal</type> and return type <type>internal</type>.  The
       actual argument will be of the type for the transform, and the function
       should be coded as if it were.  (But it is not allowed to declare an
       SQL-level function returning <type>internal</type> without at
       least one argument of type <type>internal</type>.)  The actual return
       value will be something specific to the language implementation.
       If no argument list is specified, the function name must be unique in
       its schema.
      </para>
____________________________________________________________________________-->
      <para>
       将该类型从 SQL 环境转换到该语言的函数名。它必须接受一个
       <type>internal</type>类型的参数并且返回类型<type>internal</type>。
       实参将是该转换所适用的类型，并且该函数也应该被写成认为它是那种类型（
       但是不允许声明一个返回<type>internal</type>但没有至少一个
       <type>internal</type>类型参数的 SQL 层函数）。实际的返回值将与
       语言的实现相关。如果没有指定参数列表，则函数名在该模式中必须唯一。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal><replaceable>to_sql_function_name</replaceable>[(<replaceable>argument_type</replaceable> [, ...])]</literal></term>
____________________________________________________________________________-->
     <term><literal><replaceable>to_sql_function_name</replaceable>[(<replaceable>argument_type</replaceable> [, ...])]</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the function for converting the type from the language to
       the SQL environment.  It must take one argument of type
       <type>internal</type> and return the type that is the type for the
       transform.  The actual argument value will be something specific to the
       language implementation.
       If no argument list is specified, the function name must be unique in
       its schema.
      </para>
____________________________________________________________________________-->
      <para>
       将该类型从语言转换到 SQL 环境的函数名。它必须接受一个
       <type>internal</type>类型的参数并且返回该转换所适用的类型。实参值
       将与语言的实现相关。如果没有指定参数列表，则函数名在该模式中必须唯一。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
 </refsect1>

 <refsect1 id="sql-createtransform-notes">
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   Use <xref linkend="sql-droptransform"> to remove transforms.
  </para>
____________________________________________________________________________-->
  <para>
   使用<xref linkend="sql-droptransform"/>移除转换。
  </para>
 </refsect1>

 <refsect1 id="sql-createtransform-examples">
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   To create a transform for type <type>hstore</type> and language
   <literal>plpythonu</literal>, first set up the type and the language:
<programlisting>
CREATE TYPE hstore ...;

CREATE LANGUAGE plpythonu ...;
</programlisting>
   Then create the necessary functions:
<programlisting>
CREATE FUNCTION hstore_to_plpython(val internal) RETURNS internal
LANGUAGE C STRICT IMMUTABLE
AS ...;

CREATE FUNCTION plpython_to_hstore(val internal) RETURNS hstore
LANGUAGE C STRICT IMMUTABLE
AS ...;
</programlisting>
   And finally create the transform to connect them all together:
<programlisting>
CREATE TRANSFORM FOR hstore LANGUAGE plpythonu (
    FROM SQL WITH FUNCTION hstore_to_plpython(internal),
    TO SQL WITH FUNCTION plpython_to_hstore(internal)
);
</programlisting>
   In practice, these commands would be wrapped up in extensions.
  </para>
____________________________________________________________________________-->
  <para>
   要为类型<type>hstore</type>和语言
   <literal>plpythonu</literal>创建一种转换，先搞定该类型和语言：
<programlisting>
CREATE TYPE hstore ...;

CREATE LANGUAGE plpythonu ...;
</programlisting>
   然后创建需要的函数：
<programlisting>
CREATE FUNCTION hstore_to_plpython(val internal) RETURNS internal
LANGUAGE C STRICT IMMUTABLE
AS ...;

CREATE FUNCTION plpython_to_hstore(val internal) RETURNS hstore
LANGUAGE C STRICT IMMUTABLE
AS ...;
</programlisting>
   最后创建转换把它们连接起来：
<programlisting>
CREATE TRANSFORM FOR hstore LANGUAGE plpythonu (
    FROM SQL WITH FUNCTION hstore_to_plpython(internal),
    TO SQL WITH FUNCTION plpython_to_hstore(internal)
);
</programlisting>
   实际上，这些命令将被包裹在扩展中。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <filename>contrib</filename> section contains a number of extensions
   that provide transforms, which can serve as real-world examples.
  </para>
____________________________________________________________________________-->
  <para>
   <filename>contrib</filename>小节包含了一些提供转换的扩展，
   它们可以作为实际的例子。
  </para>
 </refsect1>

 <refsect1 id="sql-createtransform-compat">
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   This form of <command>CREATE TRANSFORM</command> is a
   <productname>PostgreSQL</productname> extension.  There is a <command>CREATE
   TRANSFORM</command> command in the <acronym>SQL</acronym> standard, but it
   is for adapting data types to client languages.  That usage is not supported
   by <productname>PostgreSQL</productname>.
  </para>
____________________________________________________________________________-->
  <para>
   这种形式的<command>CREATE TRANSFORM</command>是一种
   <productname>PostgreSQL</productname>扩展。在
   <acronym>SQL</acronym>标准中有一个<command>CREATE
   TRANSFORM</command>命令，但是它是用于把数据类型适配到
   客户端语言。该用法不受
   <productname>PostgreSQL</productname>支持。
  </para>
 </refsect1>

 <refsect1 id="sql-createtransform-seealso">
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

<!--==========================orignal english content==========================
  <para>
   <xref linkend="sql-createfunction">,
   <xref linkend="sql-createlanguage">,
   <xref linkend="sql-createtype">,
   <xref linkend="sql-droptransform">
  </para>
____________________________________________________________________________-->
  <para>
   <xref linkend="sql-createfunction"/>,
   <xref linkend="sql-createlanguage"/>,
   <xref linkend="sql-createtype"/>,
   <xref linkend="sql-droptransform"/>
  </para>
 </refsect1>

</refentry>

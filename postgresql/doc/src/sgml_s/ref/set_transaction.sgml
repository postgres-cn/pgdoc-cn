<!-- doc/src/sgml/ref/set_transaction.sgml -->
<refentry id="SQL-SET-TRANSACTION">
<!--==========================orignal english content==========================
 <indexterm zone="sql-set-transaction">
  <primary>SET TRANSACTION</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-set-transaction">
  <primary>SET TRANSACTION</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>transaction isolation level</primary>
  <secondary>setting</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>事务隔离级别</primary>
  <secondary>设置</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>read-only transaction</primary>
  <secondary>setting</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>只读事务</primary>
  <secondary>设置</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>deferrable transaction</primary>
  <secondary>setting</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>可延迟事务</primary>
  <secondary>设置</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>SET TRANSACTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>SET TRANSACTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>SET TRANSACTION</refname>
  <refpurpose>set the characteristics of the current transaction</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>SET TRANSACTION</refname>
  <refpurpose>设置当前事务的特性</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
SET TRANSACTION <replaceable class="parameter">transaction_mode</replaceable> [, ...]
SET TRANSACTION SNAPSHOT <replaceable class="parameter">snapshot_id</replaceable>
SET SESSION CHARACTERISTICS AS TRANSACTION <replaceable class="parameter">transaction_mode</replaceable> [, ...]

<phrase>where <replaceable class="parameter">transaction_mode</replaceable> is one of:</phrase>

    ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED }
    READ WRITE | READ ONLY
    [ NOT ] DEFERRABLE
</synopsis>
____________________________________________________________________________-->
<synopsis>
SET TRANSACTION <replaceable class="parameter">transaction_mode</replaceable> [, ...]
SET TRANSACTION SNAPSHOT <replaceable class="parameter">snapshot_id</replaceable>
SET SESSION CHARACTERISTICS AS TRANSACTION <replaceable class="parameter">transaction_mode</replaceable> [, ...]

<phrase>其中 <replaceable class="parameter">transaction_mode</replaceable> 是下列之一：</phrase>

    ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED }
    READ WRITE | READ ONLY
    [ NOT ] DEFERRABLE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   The <command>SET TRANSACTION</command> command sets the
   characteristics of the current transaction. It has no effect on any
   subsequent transactions.  <command>SET SESSION
   CHARACTERISTICS</command> sets the default transaction
   characteristics for subsequent transactions of a session.  These
   defaults can be overridden by <command>SET TRANSACTION</command>
   for an individual transaction.
  </para>
____________________________________________________________________________-->
  <para>
   <command>SET TRANSACTION</command>命令设置当前
   会话的特性。<command>SET SESSION
   CHARACTERISTICS</command>设置一个会话后续事务的默认
   事务特性。在个体事务中可以用
   <command>SET TRANSACTION</command>覆盖这些默认值。
  </para>

<!--==========================orignal english content==========================
  <para>
   The available transaction characteristics are the transaction
   isolation level, the transaction access mode (read/write or
   read-only), and the deferrable mode.
   In addition, a snapshot can be selected, though only for the current
   transaction, not as a session default.
  </para>
____________________________________________________________________________-->
  <para>
   可用的事务特性是事务隔离级别、事务访问模式（读/写或只读）以及
   可延迟模式。此外，可以选择一个快照，不过只能用于当前事务而不能
   作为会话默认值。
  </para>

<!--==========================orignal english content==========================
  <para>
   The isolation level of a transaction determines what data the
   transaction can see when other transactions are running concurrently:

   <variablelist>
    <varlistentry>
     <term><literal>READ COMMITTED</literal></term>
     <listitem>
      <para>
       A statement can only see rows committed before it began. This
       is the default.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>REPEATABLE READ</literal></term>
     <listitem>
      <para>
       All statements of the current transaction can only see rows committed
       before the first query or data-modification statement was executed in
       this transaction.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>SERIALIZABLE</literal></term>
     <listitem>
      <para>
       All statements of the current transaction can only see rows committed
       before the first query or data-modification statement was executed in
       this transaction.  If a pattern of reads and writes among concurrent
       serializable transactions would create a situation which could not
       have occurred for any serial (one-at-a-time) execution of those
       transactions, one of them will be rolled back with a
       <literal>serialization_failure</literal> error.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   The SQL standard defines one additional level, <literal>READ
   UNCOMMITTED</literal>.
   In <productname>PostgreSQL</productname> <literal>READ
   UNCOMMITTED</literal> is treated as <literal>READ COMMITTED</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   一个事务的隔离级别决定当其他事务并行运行时该事务能看见什么数据：

   <variablelist>
    <varlistentry>
     <term><literal>READ COMMITTED</literal></term>
     <listitem>
      <para>
       一个语句只能看到在它开始前提交的行。这是默认值。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>REPEATABLE READ</literal></term>
     <listitem>
      <para>
       当前事务的所有语句只能看到这个事务中执行的第一个查询或者
       数据修改语句之前提交的行。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>SERIALIZABLE</literal></term>
     <listitem>
      <para>
       当前事务的所有语句只能看到这个事务中执行的第一个查询或者
       数据修改语句之前提交的行。如果并发的可序列化事务间的读写
       模式可能导致一种那些事务串行（一次一个）执行时不可能出现
       的情况，其中之一将会被回滚并且得到一个
       <literal>serialization_failure</literal>错误。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   SQL 标准定义了一种额外的级别：<literal>READ
   UNCOMMITTED</literal>。在
   <productname>PostgreSQL</productname>中<literal>READ
   UNCOMMITTED</literal>被视作
   <literal>READ COMMITTED</literal>。
  </para>

<!--==========================orignal english content==========================
  <para>
   The transaction isolation level cannot be changed after the first query or
   data-modification statement (<command>SELECT</command>,
   <command>INSERT</command>, <command>DELETE</command>,
   <command>UPDATE</command>, <command>FETCH</command>, or
   <command>COPY</command>) of a transaction has been executed.  See
   <xref linkend="mvcc"> for more information about transaction
   isolation and concurrency control.
  </para>
____________________________________________________________________________-->
  <para>
   一个事务执行了第一个查询或者数据修改语句（
   <command>SELECT</command>、
   <command>INSERT</command>、<command>DELETE</command>、
   <command>UPDATE</command>、<command>FETCH</command>或
   <command>COPY</command>）之后就无法更改事务隔离级别。
   更多有关事务隔离级别和并发控制的信息可见<xref linkend="mvcc"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   The transaction access mode determines whether the transaction is
   read/write or read-only.  Read/write is the default.  When a
   transaction is read-only, the following SQL commands are
   disallowed: <literal>INSERT</literal>, <literal>UPDATE</literal>,
   <literal>DELETE</literal>, and <literal>COPY FROM</literal> if the
   table they would write to is not a temporary table; all
   <literal>CREATE</literal>, <literal>ALTER</literal>, and
   <literal>DROP</literal> commands; <literal>COMMENT</literal>,
   <literal>GRANT</literal>, <literal>REVOKE</literal>,
   <literal>TRUNCATE</literal>; and <literal>EXPLAIN ANALYZE</literal>
   and <literal>EXECUTE</literal> if the command they would execute is
   among those listed.  This is a high-level notion of read-only that
   does not prevent all writes to disk.
  </para>
____________________________________________________________________________-->
  <para>
   事务的访问模式决定该事务是否为读/写或者只读。读/写是默认值。
   当一个事务为只读时，如果 SQL 命令
   <literal>INSERT</literal>、<literal>UPDATE</literal>、
   <literal>DELETE</literal>和<literal>COPY FROM</literal>
   要写的表不是一个临时表，则它们不被允许。不允许
   <literal>CREATE</literal>、<literal>ALTER</literal>以及
   <literal>DROP</literal>命令。不允许<literal>COMMENT</literal>、
   <literal>GRANT</literal>、<literal>REVOKE</literal>、
   <literal>TRUNCATE</literal>。如果<literal>EXPLAIN ANALYZE</literal>
   和<literal>EXECUTE</literal>要执行的命令是上述命令之一，
   则它们也不被允许。这是一种高层的只读概念，它不能阻止所有对
   磁盘的写入。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <literal>DEFERRABLE</literal> transaction property has no effect
   unless the transaction is also <literal>SERIALIZABLE</literal> and
   <literal>READ ONLY</literal>.  When all three of these properties are
   selected for a
   transaction, the transaction may block when first acquiring its snapshot,
   after which it is able to run without the normal overhead of a
   <literal>SERIALIZABLE</literal> transaction and without any risk of
   contributing to or being canceled by a serialization failure.  This mode
   is well suited for long-running reports or backups.
  </para>
____________________________________________________________________________-->
  <para>
   只有事务也是<literal>SERIALIZABLE</literal>以及
   <literal>READ ONLY</literal>时，<literal>DEFERRABLE</literal>
   事务属性才会有效。当一个事务的所有这三个属性都被选择时，该事务在
   第一次获取其快照时可能会阻塞，在那之后它运行时就不会有
   <literal>SERIALIZABLE</literal>事务的开销并且不会有任何牺牲或者
   被一次序列化失败取消的风险。这种模式很适合于长时间运行的报表或者
   备份。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <literal>SET TRANSACTION SNAPSHOT</literal> command allows a new
   transaction to run with the same <firstterm>snapshot</> as an existing
   transaction.  The pre-existing transaction must have exported its snapshot
   with the <literal>pg_export_snapshot</literal> function (see <xref
   linkend="functions-snapshot-synchronization">).  That function returns a
   snapshot identifier, which must be given to <literal>SET TRANSACTION
   SNAPSHOT</literal> to specify which snapshot is to be imported.  The
   identifier must be written as a string literal in this command, for example
   <literal>'000003A1-1'</>.
   <literal>SET TRANSACTION SNAPSHOT</literal> can only be executed at the
   start of a transaction, before the first query or
   data-modification statement (<command>SELECT</command>,
   <command>INSERT</command>, <command>DELETE</command>,
   <command>UPDATE</command>, <command>FETCH</command>, or
   <command>COPY</command>) of the transaction.  Furthermore, the transaction
   must already be set to <literal>SERIALIZABLE</literal> or
   <literal>REPEATABLE READ</literal> isolation level (otherwise, the snapshot
   would be discarded immediately, since <literal>READ COMMITTED</> mode takes
   a new snapshot for each command).  If the importing transaction uses
   <literal>SERIALIZABLE</literal> isolation level, then the transaction that
   exported the snapshot must also use that isolation level.  Also, a
   non-read-only serializable transaction cannot import a snapshot from a
   read-only transaction.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>SET TRANSACTION SNAPSHOT</literal>命令允许新的事务
   使用与一个现有事务相同的<firstterm>快照</firstterm>运行。已经存在的事务
   必须已经把它的快照用<literal>pg_export_snapshot</literal>函数（
   见<xref linkend="functions-snapshot-synchronization"/>）导出。
   该函数会返回一个快照标识符，<literal>SET TRANSACTION
   SNAPSHOT</literal>需要被给定一个快照标识符来指定要导入的快照。
   在这个命令中该标识符必须被写成一个字符串，例如
   <literal>'000003A1-1'</literal>。
   <literal>SET TRANSACTION SNAPSHOT</literal>只能在一个事务的
   开始执行，并且要在该事务的第一个查询或者数据修改语句（
   <command>SELECT</command>、
   <command>INSERT</command>、<command>DELETE</command>、
   <command>UPDATE</command>、<command>FETCH</command>或
   <command>COPY</command>）之前执行。此外，该事务必须已经被设置
   为<literal>SERIALIZABLE</literal>或者
   <literal>REPEATABLE READ</literal>隔离级别（否则，该快照将被立刻抛弃，
   因为<literal>READ COMMITTED</literal>模式会为每一个命令取一个新快照）。
   如果导入事务使用了<literal>SERIALIZABLE</literal>隔离级别，那么导入快照
   的事务必须也使用该隔离级别。还有，一个非只读可序列化事务不能导入来自只读
   事务的快照。
  </para>

 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   If <command>SET TRANSACTION</command> is executed without a prior
   <command>START TRANSACTION</command> or <command>BEGIN</command>,
   it emits a warning and otherwise has no effect.
  </para>
____________________________________________________________________________-->
  <para>
   如果执行<command>SET TRANSACTION</command>之前没有
   <command>START TRANSACTION</command>或者
   <command>BEGIN</command>，它会发出一个警告并且不会有任何效果。
  </para>

<!--==========================orignal english content==========================
  <para>
   It is possible to dispense with <command>SET TRANSACTION</command>
   by instead specifying the desired <replaceable
   class="parameter">transaction_modes</replaceable> in
   <command>BEGIN</command> or <command>START TRANSACTION</command>.
   But that option is not available for <command>SET TRANSACTION
   SNAPSHOT</command>.
  </para>
____________________________________________________________________________-->
  <para>
   可以通过在<command>BEGIN</command>或者
   <command>START TRANSACTION</command>中指定想要的<replaceable
   class="parameter">transaction_modes</replaceable>来省掉
   <command>SET TRANSACTION</command>。但是在
   <command>SET TRANSACTION SNAPSHOT</command>中该选项不可用。
  </para>

<!--==========================orignal english content==========================
  <para>
   The session default transaction modes can also be set by setting the
   configuration parameters <xref linkend="guc-default-transaction-isolation">,
   <xref linkend="guc-default-transaction-read-only">, and
   <xref linkend="guc-default-transaction-deferrable">.
   (In fact <command>SET SESSION CHARACTERISTICS</command> is just a
   verbose equivalent for setting these variables with <command>SET</>.)
   This means the defaults can be set in the configuration file, via
   <command>ALTER DATABASE</>, etc.  Consult <xref linkend="runtime-config">
   for more information.
  </para>
____________________________________________________________________________-->
  <para>
   会话默认的事务模式也可以通过设置配置参数
   <xref linkend="guc-default-transaction-isolation"/>、
   <xref linkend="guc-default-transaction-read-only"/>和
   <xref linkend="guc-default-transaction-deferrable"/>来设置（实际上
   <command>SET SESSION CHARACTERISTICS</command>只是用
   <command>SET</command>设置这些变量的等效体）。这意味着可以通过配置文件、
   <command>ALTER DATABASE</command>等方式设置默认值。详见
   <xref linkend="runtime-config"/>。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   To begin a new transaction with the same snapshot as an already
   existing transaction, first export the snapshot from the existing
   transaction. That will return the snapshot identifier, for example:

<programlisting>
BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT pg_export_snapshot();
 pg_export_snapshot
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 00000003-0000001B-1
(1 row)
</programlisting>

   Then give the snapshot identifier in a <command>SET TRANSACTION
   SNAPSHOT</command> command at the beginning of the newly opened
   transaction:

<programlisting>
BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET TRANSACTION SNAPSHOT '00000003-0000001B-1';
</programlisting></para>
____________________________________________________________________________-->
  <para>
   要用一个已经存在的事务的同一快照开始一个新事务，首先要从该现有
   事务导出快照。这将会返回快照标识符，例如：

<programlisting>
BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT pg_export_snapshot();
 pg_export_snapshot
---------------------
 00000003-0000001B-1
(1 row)
</programlisting>

   然后在一个新开始的事务的开头把该快照标识符用在一个
   <command>SET TRANSACTION
   SNAPSHOT</command>命令中：

<programlisting>
BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET TRANSACTION SNAPSHOT '00000003-0000001B-1';
</programlisting></para>
 </refsect1>

 <refsect1 id="R1-SQL-SET-TRANSACTION-3">
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   These commands are defined in the <acronym>SQL</acronym> standard,
   except for the <literal>DEFERRABLE</literal> transaction mode
   and the <command>SET TRANSACTION SNAPSHOT</> form, which are
   <productname>PostgreSQL</productname> extensions.
  </para>
____________________________________________________________________________-->
  <para>
   <acronym>SQL</acronym>标准中定义了这些命令，不过
   <literal>DEFERRABLE</literal>事务模式和
   <command>SET TRANSACTION SNAPSHOT</command>形式除外，这两者是
   <productname>PostgreSQL</productname>扩展。
  </para>

<!--==========================orignal english content==========================
  <para>
   <literal>SERIALIZABLE</literal> is the default transaction
   isolation level in the standard.  In
   <productname>PostgreSQL</productname> the default is ordinarily
   <literal>READ COMMITTED</literal>, but you can change it as
   mentioned above.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>SERIALIZABLE</literal>是标准中默认的事务隔离级别。在
   <productname>PostgreSQL</productname>中默认值是普通的
   <literal>READ COMMITTED</literal>，但是你可以按上述的方式更改。
  </para>

<!--==========================orignal english content==========================
  <para>
   In the SQL standard, there is one other transaction characteristic
   that can be set with these commands: the size of the diagnostics
   area.  This concept is specific to embedded SQL, and therefore is
   not implemented in the <productname>PostgreSQL</productname> server.
  </para>
____________________________________________________________________________-->
  <para>
   在 SQL 标准中，可以用这些命令设置一个其他的事务特性：诊断区域
   的尺寸。这个概念与嵌入式 SQL 有关，并且因此没有在
   <productname>PostgreSQL</productname>服务器中实现。
  </para>

<!--==========================orignal english content==========================
  <para>
   The SQL standard requires commas between successive <replaceable
   class="parameter">transaction_modes</replaceable>, but for historical
   reasons <productname>PostgreSQL</productname> allows the commas to be
   omitted.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 标准要求连续的<replaceable
   class="parameter">transaction_modes</replaceable>之间有逗号，
   但是出于历史原因
   <productname>PostgreSQL</productname>允许省略逗号。
  </para>
 </refsect1>
</refentry>

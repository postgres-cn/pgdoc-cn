<!--
doc/src/sgml/ref/notify.sgml
PostgreSQL documentation
-->

<refentry id="SQL-NOTIFY">
<!--==========================orignal english content==========================
 <indexterm zone="sql-notify">
  <primary>NOTIFY</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-notify">
  <primary>NOTIFY</primary>
 </indexterm>
 
<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>NOTIFY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>NOTIFY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - 语言语句</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>NOTIFY</refname>
  <refpurpose>generate a notification</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>NOTIFY</refname>
  <refpurpose>生成一个通知</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
NOTIFY <replaceable class="parameter">channel</replaceable> [ , <replaceable class="parameter">payload</replaceable> ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
NOTIFY <replaceable class="parameter">channel</replaceable> [ , <replaceable class="parameter">payload</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   The <command>NOTIFY</command> command sends a notification event together
   with an optional <quote>payload</> string to each client application that
   has previously executed
   <command>LISTEN <replaceable class="parameter">channel</></command>
   for the specified channel name in the current database.
   Notifications are visible to all users.
  </para>
____________________________________________________________________________-->
  <para>
   <command>NOTIFY</command>命令发送一个通知事件以及一个可选的<quote>载荷</quote>字符串给每个正在监听的客户端应用，这些应用之前都在当前数据库中为指定的频道名执行过<command>LISTEN <replaceable class="parameter">channel</replaceable></command>。通知对所有用户都可见。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>NOTIFY</command> provides a simple
   interprocess communication mechanism for a collection of processes
   accessing the same <productname>PostgreSQL</productname> database.
   A payload string can be sent along with the notification, and
   higher-level mechanisms for passing structured data can be built by using
   tables in the database to pass additional data from notifier to listener(s).
  </para>
____________________________________________________________________________-->
  <para>
   <command>NOTIFY</command>为访问同一个<productname>PostgreSQL</productname>数据库的进程集合提供了一种简单的进程间通讯机制。伴随着通知可以发送一个载荷字符串，通过使用数据库中的表从通知者向监听者传递额外的数据，也可以构建用于传输结构化数据的高层机制。
  </para>

<!--==========================orignal english content==========================
  <para>
   The information passed to the client for a notification event includes the
   notification channel
   name, the notifying session's server process <acronym>PID</>, and the
   payload string, which is an empty string if it has not been specified.
  </para>
____________________________________________________________________________-->
  <para>
   由一个通知事件传递给客户端的信息包括通知频道名称、发出通知的会话的服务器进程<acronym>PID</acronym>以及载荷字符串，如果载荷字符串没有被指定则它为空字符串。
  </para>

<!--==========================orignal english content==========================
  <para>
   It is up to the database designer to define the channel names that will
   be used in a given database and what each one means.
   Commonly, the channel name is the same as the name of some table in
   the database, and the notify event essentially means, <quote>I changed this table,
   take a look at it to see what's new</quote>.  But no such association is enforced by
   the <command>NOTIFY</command> and <command>LISTEN</command> commands.  For
   example, a database designer could use several different channel names
   to signal different sorts of changes to a single table.  Alternatively,
   the payload string could be used to differentiate various cases.
  </para>
____________________________________________________________________________-->
  <para>
   将在一个给定数据库以及其他数据库中使用的频道名称由数据库设计者定义。通常，频道名称与数据库中某个表的名称相同，并且通知事件其实就意味着：<quote>我改变了这个表，来看看改了什么吧</quote>。但是<command>NOTIFY</command>和<command>LISTEN</command>命令并未强制这样的关联。例如，一个数据库设计者可以使用几个不同的频道名称来标志一个表上的不同种类的改变。另外，载荷字符串可以被用于多种不同的情况。
  </para>

<!--==========================orignal english content==========================
  <para>
   When <command>NOTIFY</command> is used to signal the occurrence of changes
   to a particular table, a useful programming technique is to put the
   <command>NOTIFY</command> in a statement trigger that is triggered by table updates.
   In this way, notification happens automatically when the table is changed,
   and the application programmer cannot accidentally forget to do it.
  </para>
____________________________________________________________________________-->
  <para>
   当<command>NOTIFY</command>被用来标志对一个特定表的改变时，
   一种有用的编程技巧是把<command>NOTIFY</command>
   放在一个由表更新触发的语句触发器中。在这种方式中，每当表被改变时
   都将自动发生通知，并且应用程序员不可能会忘记发出通知。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>NOTIFY</command> interacts with SQL transactions in some important
   ways.  Firstly, if a <command>NOTIFY</command> is executed inside a
   transaction, the notify events are not delivered until and unless the
   transaction is committed.  This is appropriate, since if the transaction
   is aborted, all the commands within it have had no
   effect, including <command>NOTIFY</command>.  But it can be disconcerting if one
   is expecting the notification events to be delivered immediately.  Secondly, if
   a listening session receives a notification signal while it is within a transaction,
   the notification event will not be delivered to its connected client until just
   after the transaction is completed (either committed or aborted).  Again, the
   reasoning is that if a notification were delivered within a transaction that was
   later aborted, one would want the notification to be undone somehow &mdash;
   but
   the server cannot <quote>take back</quote> a notification once it has sent it to the client.
   So notification events are only delivered between transactions.  The upshot of this
   is that applications using <command>NOTIFY</command> for real-time signaling
   should try to keep their transactions short.
  </para>
____________________________________________________________________________-->
  <para>
   <command>NOTIFY</command>以一些重要的方式与 SQL 事务互动。首先，如果一个<command>NOTIFY</command>在一个事务内执行，在事务被提交之前，该通知事件都不会被递送。这是合适的，因为如果该事务被中止，所有其中的命令都将不会产生效果，包括<command>NOTIFY</command>在内。但如果期望通知事件被立即递送，那这种行为就会令人不安。其次，如果一个监听会话收到了一个通知信号而它正在一个事务中，在该事务完成（提交或者中止）之前，该通知事件将不会被递送给它连接的客户端。同样，原因在于如果一个通知在一个事务内被递送且该事务后来被中止，我们会希望该通知能以某种方式被撤销 &mdash; 但是服务器一旦把通知发送给客户端就无法<quote>收回它</quote>。因此通知事件只能在事务之间递送。其中的要点是把<command>NOTIFY</command>用作实时信号的应用应该让它们事务尽可能短小。
  </para>

<!--==========================orignal english content==========================
  <para>
   If the same channel name is signaled multiple times from the same
   transaction with identical payload strings, the
   database server can decide to deliver a single notification only.
   On the other hand, notifications with distinct payload strings will
   always be delivered as distinct notifications. Similarly, notifications from
   different transactions will never get folded into one notification.
   Except for dropping later instances of duplicate notifications,
   <command>NOTIFY</command> guarantees that notifications from the same
   transaction get delivered in the order they were sent.  It is also
   guaranteed that messages from different transactions are delivered in
   the order in which the transactions committed.
  </para>
____________________________________________________________________________-->
  <para>
   如果从同一个事务多次用相同的载荷字符串对同一个频道名称发送通知，数据库服务器能决定只递送一个单一的通知。另一方面，带有不同载荷字符串的通知将总是作为不同的通知被递送。类似地，来自不同事务的通知将不会被折叠成一个通知。除了丢弃后来生成的重复通知实例之外，<command>NOTIFY</command>保证来自同一个事务的通知按照它们被发送的顺序被递送。还可以保证的是，来自不同事务的消息会按照其事务被提交的顺序递送。
  </para>

<!--==========================orignal english content==========================
  <para>
   It is common for a client that executes <command>NOTIFY</command>
   to be listening on the same notification channel itself.  In that case
   it will get back a notification event, just like all the other
   listening sessions.  Depending on the application logic, this could
   result in useless work, for example, reading a database table to
   find the same updates that that session just wrote out.  It is
   possible to avoid such extra work by noticing whether the notifying
   session's server process <acronym>PID</> (supplied in the
   notification event message) is the same as one's own session's
   <acronym>PID</> (available from <application>libpq</>).  When they
   are the same, the notification event is one's own work bouncing
   back, and can be ignored.
  </para>
____________________________________________________________________________-->
  <para>
   一个执行<command>NOTIFY</command>的客户端自己也同时在监听同一个通知频道是很常见的事。在这种情况下，和所有其他监听会话一样，它会取回一个通知事件。根据应用的逻辑，这可能导致无用的工作，例如从自己刚刚写入的一个表中读出相同的更新。可以通过关注发出通知的服务器进程<acronym>PID</acronym>（在通知事件消息中提供）与自己的会话<acronym>PID</acronym>（可以从<application>libpq</application>得到）是否相同来避免这种额外的工作。当两者相同时，该通知事件就是当前会话自己发出的，所以可以忽略。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">channel</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">channel</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Name of the notification channel to be signaled (any identifier).
     </para>
____________________________________________________________________________-->
     <para>
      要对其发信号的通知频道的名称（任意标识符）。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">payload</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">payload</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The <quote>payload</> string to be communicated along with the
      notification.  This must be specified as a simple string literal.
      In the default configuration it must be shorter than 8000 bytes.
      (If binary data or large amounts of information need to be communicated,
      it's best to put it in a database table and send the key of the record.)
     </para>
____________________________________________________________________________-->
     <para>
      要通过通知进行沟通的<quote>载荷</quote>字符串。这必须是一个简单的字符串。在默认配置下，该字符串不能超过 8000 字节（如果需要发送二进制数据或者更多信息，最好是把它放在一个数据库表中并且发送该记录的键）。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   There is a queue that holds notifications that have been sent but not
   yet processed by all listening sessions.  If this queue becomes full,
   transactions calling <command>NOTIFY</command> will fail at commit.
   The queue is quite large (8GB in a standard installation) and should be
   sufficiently sized for almost every use case. However, no cleanup can take
   place if a session executes <command>LISTEN</command> and then enters a
   transaction for a very long time. Once the queue is half full you will see
   warnings in the log file pointing you to the session that is preventing
   cleanup. In this case you should make sure that this session ends its
   current transaction so that cleanup can proceed.
  </para>
____________________________________________________________________________-->
  <para>
   有一个队列保持着已经发送但是还没有被所有监听会话处理的通知。如果该队列被占满，调用<command>NOTIFY</command>的事务将在提交时失败。该队列非常大（标准安装中是 8GB）并且应该足以应付几乎每一种用例。不过，如果一个会话执行了<command>NOTIFY</command>并且接着长时间进入一个事务，不会发生清理操作。一旦该队列使用过半，你将在日志文件中看到警告，它指出哪个会话阻止了清理。在这种情况中，应该确保这个会话结束它的当前事务，这样清理才能够进行下去。
  </para>
<!--==========================orignal english content==========================
  <para>
   The function <function>pg_notification_queue_usage</function> returns the
   fraction of the queue that is currently occupied by pending notifications.
   See <xref linkend="functions-info"> for more information.
  </para>
____________________________________________________________________________-->
  <para>
   函数<function>pg_notification_queue_usage</function>返回队列中当前被
   待处理通知所占据的比例。详见<xref linkend="functions-info"/>。
  </para>
<!--==========================orignal english content==========================
  <para>
   A transaction that has executed <command>NOTIFY</command> cannot be
   prepared for two-phase commit.
  </para>
____________________________________________________________________________-->
  <para>
   一个已经执行了<command>NOTIFY</command>的事务不能为两阶段提交做准备。
  </para>

  <refsect2>
<!--==========================orignal english content==========================
   <title>pg_notify</title>
____________________________________________________________________________-->
   <title>pg_notify</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>pg_notify</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>pg_notify</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    To send a notification you can also use the function
    <literal><function>pg_notify</function>(<type>text</type>,
    <type>text</type>)</literal>. The function takes the channel name as the
    first argument and the payload as the second. The function is much easier
    to use than the <command>NOTIFY</command> command if you need to work with
    non-constant channel names and payloads.
   </para>
____________________________________________________________________________-->
   <para>
    要发送一个通知，你也能使用函数<literal><function>pg_notify</function>(<type>text</type>,
    <type>text</type>)</literal>。该函数采用频道名称作为第一个参数，而载荷则作为第二个参数。如果你需要使用非常量的频道名称和载荷，这个函数比<command>NOTIFY</command>命令更容易使用。
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>例子</title>

<!--==========================orignal english content==========================
  <para>
   Configure and execute a listen/notify sequence from
   <application>psql</application>:

<programlisting>
LISTEN virtual;
NOTIFY virtual;
Asynchronous notification "virtual" received from server process with PID 8448.
NOTIFY virtual, 'This is the payload';
Asynchronous notification "virtual" with payload "This is the payload" received from server process with PID 8448.

LISTEN foo;
SELECT pg_notify('fo' || 'o', 'pay' || 'load');
Asynchronous notification "foo" with payload "payload" received from server process with PID 14728.
</programlisting></para>
____________________________________________________________________________-->
  <para>
   从<application>psql</application>配置和执行一个监听/通知序列：

<programlisting>
LISTEN virtual;
NOTIFY virtual;
Asynchronous notification "virtual" received from server process with PID 8448.
NOTIFY virtual, 'This is the payload';
Asynchronous notification "virtual" with payload "This is the payload" received from server process with PID 8448.

LISTEN foo;
SELECT pg_notify('fo' || 'o', 'pay' || 'load');
Asynchronous notification "foo" with payload "payload" received from server process with PID 14728.
</programlisting></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   There is no <command>NOTIFY</command> statement in the SQL
   standard.
  </para>
____________________________________________________________________________-->
  <para>
   在 SQL 标准中没有<command>NOTIFY</command>语句。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-listen"/></member>
   <member><xref linkend="sql-unlisten"/></member>
  </simplelist>
 </refsect1>
</refentry>

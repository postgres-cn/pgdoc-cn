<!--
doc/src/sgml/ref/delete.sgml
PostgreSQL documentation
-->

<refentry id="SQL-DELETE">
<!--==========================orignal english content==========================
 <indexterm zone="sql-delete">
  <primary>DELETE</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-delete">
  <primary>DELETE</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>DELETE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>DELETE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>DELETE</refname>
  <refpurpose>delete rows of a table</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>DELETE</refname>
  <refpurpose>删除一个表的行</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
DELETE FROM [ ONLY ] <replaceable class="parameter">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    [ USING <replaceable class="parameter">using_list</replaceable> ]
    [ WHERE <replaceable class="parameter">condition</replaceable> | WHERE CURRENT OF <replaceable class="parameter">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
DELETE FROM [ ONLY ] <replaceable class="parameter">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    [ USING <replaceable class="parameter">using_list</replaceable> ]
    [ WHERE <replaceable class="parameter">condition</replaceable> | WHERE CURRENT OF <replaceable class="parameter">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>DELETE</command> deletes rows that satisfy the
   <literal>WHERE</literal> clause from the specified table.  If the
   <literal>WHERE</literal> clause is absent, the effect is to delete
   all rows in the table.  The result is a valid, but empty table.
  </para>
____________________________________________________________________________-->
  <para>
   <command>DELETE</command>从指定表中删除满足
   <literal>WHERE</literal>子句的行。如果<literal>WHERE</literal>
   子句没有出现，效果将会是删除表中的所有行。结果是一个合法的空表。
  </para>

   <tip>
<!--==========================orignal english content==========================
    <para>
     <xref linkend="sql-truncate"> provides a
     faster mechanism to remove all rows from a table.
    </para>
____________________________________________________________________________-->
    <para>
     <xref linkend="sql-truncate"/>提供移除表中所有行的快速机制。
    </para>
   </tip>

<!--==========================orignal english content==========================
  <para>
   There are two ways to delete rows in a table using information
   contained in other tables in the database: using sub-selects, or
   specifying additional tables in the <literal>USING</literal> clause.
   Which technique is more appropriate depends on the specific
   circumstances.
  </para>
____________________________________________________________________________-->
  <para>
   有两种方式可以使用数据库中其他表中包含的信息来删除一个表的行：
   使用子选择或者在<literal>USING</literal>子句中指定额外的表。
   哪种技术更合适取决于特定的环境。
  </para>

<!--==========================orignal english content==========================
  <para>
   The optional <literal>RETURNING</> clause causes <command>DELETE</>
   to compute and return value(s) based on each row actually deleted.
   Any expression using the table's columns, and/or columns of other
   tables mentioned in <literal>USING</literal>, can be computed.
   The syntax of the <literal>RETURNING</> list is identical to that of the
   output list of <command>SELECT</>.
  </para>
____________________________________________________________________________-->
  <para>
   可选的<literal>RETURNING</literal>子句导致<command>DELETE</command>
   基于实际被删除的每一行计算并且返回值。任何使用被删除表列或者
   <literal>USING</literal>中提到的其他表的列的表达式都可以被计算。
   <literal>RETURNING</literal>列表的语法和<command>SELECT</command>的
   输出列表语法相同。
  </para>

<!--==========================orignal english content==========================
  <para>
   You must have the <literal>DELETE</literal> privilege on the table
   to delete from it, as well as the <literal>SELECT</literal>
   privilege for any table in the <literal>USING</literal> clause or
   whose values are read in the <replaceable
   class="parameter">condition</replaceable>.
  </para>
____________________________________________________________________________-->
  <para>
   要从表中删除行，你必须具有其上的<literal>DELETE</literal>特权，
   以及<literal>USING</literal>子句中任何表以及其值在<replaceable
   class="parameter">condition</replaceable>中被读取的表上的
   <literal>SELECT</literal>特权。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">with_query</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The <literal>WITH</literal> clause allows you to specify one or more
      subqueries that can be referenced by name in the <command>DELETE</>
      query. See <xref linkend="queries-with"> and <xref linkend="sql-select">
      for details.
     </para>
____________________________________________________________________________-->
     <para>
      <literal>WITH</literal>子句允许你指定一个或者多个子查询，在 
      <command>DELETE</command>查询中可以用子查询的名字来引用它们。
      详见<xref linkend="queries-with"/>和<xref linkend="sql-select"/>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">table_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of the table to delete rows
      from.  If <literal>ONLY</> is specified before the table name,
      matching rows are deleted from the named table only.  If
      <literal>ONLY</> is not specified, matching rows are also deleted
      from any tables inheriting from the named table.  Optionally,
      <literal>*</> can be specified after the table name to explicitly
      indicate that descendant tables are included.
     </para>
____________________________________________________________________________-->
     <para>
      要从其中删除行的表名（可以是模式限定的）。如果在表名前指定
      <literal>ONLY</literal>，只会从提到的表中删除匹配的行。如果没有指定
      <literal>ONLY</literal>，还会删除该表的任何继承表中的匹配行。可选地，
      可以在表名后面指定<literal>*</literal>来显式指定要包括继承表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">alias</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A substitute name for the target table. When an alias is
      provided, it completely hides the actual name of the table.  For
      example, given <literal>DELETE FROM foo AS f</>, the remainder
      of the <command>DELETE</command> statement must refer to this
      table as <literal>f</> not <literal>foo</>.
     </para>
____________________________________________________________________________-->
     <para>
      目标表的一个别名。提供别名时，它会完全隐藏该表的真实名称。例如，
      对于<literal>DELETE FROM foo AS f</literal>，
      <command>DELETE</command>语句的剩余部分都会用
      <literal>f</literal>而不是 <literal>foo</literal>来引用该表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">using_list</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">using_list</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A list of table expressions, allowing columns from other tables
      to appear in the <literal>WHERE</> condition.  This is similar
      to the list of tables that can be specified in the <xref
      linkend="sql-from" endterm="sql-from-title"> of a
      <command>SELECT</command> statement; for example, an alias for
      the table name can be specified.  Do not repeat the target table
      in the <replaceable class="parameter">using_list</replaceable>,
      unless you wish to set up a self-join.
     </para>
____________________________________________________________________________-->
     <para>
      一个表表达式的列表，它允许在<literal>WHERE</literal>条件中出现
      来自其他表的列。这和<command>SELECT</command>语句
      的<xref linkend="sql-from" endterm="sql-from-title"/>中指定
      的表列表相似。例如，可以指定表的别名。除非想要进行自连接，
      否则不要在<replaceable class="parameter">using_list</replaceable>
      再写上目标表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">condition</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      An expression that returns a value of type <type>boolean</type>.
      Only rows for which this expression returns <literal>true</>
      will be deleted.
     </para>
____________________________________________________________________________-->
     <para>
      一个返回<type>boolean</type>类型值的表达式。只有让这个
      表达式返回<literal>true</literal>的行才将被删除。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">cursor_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">cursor_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of the cursor to use in a <literal>WHERE CURRENT OF</>
      condition.  The row to be deleted is the one most recently fetched
      from this cursor.  The cursor must be a non-grouping
      query on the <command>DELETE</>'s target table.
      Note that <literal>WHERE CURRENT OF</> cannot be
      specified together with a Boolean condition.  See
      <xref linkend="sql-declare">
      for more information about using cursors with
      <literal>WHERE CURRENT OF</>.
     </para>
____________________________________________________________________________-->
     <para>
      要在<literal>WHERE CURRENT OF</literal>情况中使用的游标
      的名称。最近一次从这个游标中取出的行将被删除。该游标
      必须是<command>DELETE</command>的目标表上的非分组查询。
      注意不能在使用<literal>WHERE CURRENT OF</literal>的同时
      指定一个布尔条件。有关将游标用于
      <literal>WHERE CURRENT OF</literal>的更多信息请见
      <xref linkend="sql-declare"/>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">output_expression</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">output_expression</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      An expression to be computed and returned by the <command>DELETE</>
      command after each row is deleted.  The expression can use any
      column names of the table named by <replaceable class="parameter">table_name</replaceable>
      or table(s) listed in <literal>USING</>.
      Write <literal>*</> to return all columns.
     </para>
____________________________________________________________________________-->
     <para>
      在每一行被删除后，会被<command>DELETE</command>计算并且返回的表达式。
      该表达式可以使用<replaceable class="parameter">table_name</replaceable>
      以及<literal>USING</literal>中的表的任何列。写成<literal>*</literal>可以返回所有列。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">output_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">output_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A name to use for a returned column.
     </para>
____________________________________________________________________________-->
     <para>
      被返回列的名称。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Outputs</title>
____________________________________________________________________________-->
  <title>输出</title>

<!--==========================orignal english content==========================
  <para>
   On successful completion, a <command>DELETE</> command returns a command
   tag of the form
<screen>
DELETE <replaceable class="parameter">count</replaceable>
</screen>
   The <replaceable class="parameter">count</replaceable> is the number
   of rows deleted.  Note that the number may be less than the number of
   rows that matched the <replaceable
   class="parameter">condition</replaceable> when deletes were
   suppressed by a <literal>BEFORE DELETE</> trigger.  If <replaceable
   class="parameter">count</replaceable> is 0, no rows were deleted by
   the query (this is not considered an error).
  </para>
____________________________________________________________________________-->
  <para>
   在成功完成时，一个<command>DELETE</command>命令会返回以下形式
   的命令标签：
<screen>
DELETE <replaceable class="parameter">count</replaceable>
</screen>
   <replaceable class="parameter">count</replaceable>是被删除行的数目。
   注意如果有一个<literal>BEFORE DELETE</literal>触发器抑制删除，那么该数目
   可能小于匹配<replaceable class="parameter">condition</replaceable>
   的行数。如果<replaceable class="parameter">count</replaceable>为 0，
   表示查询没有删除行（这并非一种错误）。
  </para>

<!--==========================orignal english content==========================
  <para>
   If the <command>DELETE</> command contains a <literal>RETURNING</>
   clause, the result will be similar to that of a <command>SELECT</>
   statement containing the columns and values defined in the
   <literal>RETURNING</> list, computed over the row(s) deleted by the
   command.
  </para>
____________________________________________________________________________-->
  <para>
   如果<command>DELETE</command>命令包含<literal>RETURNING</literal>子句，
   则结果会与包含有<literal>RETURNING</literal>列表中定义的列和值的
   <command>SELECT</command>语句结果相似，这些结果是在被该命令删除的
   行上计算得来。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</productname> lets you reference columns of
   other tables in the <literal>WHERE</> condition by specifying the
   other tables in the <literal>USING</literal> clause.  For example,
   to delete all films produced by a given producer, one can do:
<programlisting>
DELETE FROM films USING producers
  WHERE producer_id = producers.id AND producers.name = 'foo';
</programlisting>
   What is essentially happening here is a join between <structname>films</>
   and <structname>producers</>, with all successfully joined
   <structname>films</> rows being marked for deletion.
   This syntax is not standard.  A more standard way to do it is:
<programlisting>
DELETE FROM films
  WHERE producer_id IN (SELECT id FROM producers WHERE name = 'foo');
</programlisting>
   In some cases the join style is easier to write or faster to
   execute than the sub-select style.
  </para>
____________________________________________________________________________-->
  <para>
   通过在<literal>USING</literal>子句中指定其他的表，
   <productname>PostgreSQL</productname>允许在
   <literal>WHERE</literal>条件中引用其他表的列。例如，要
   删除有一个给定制片人制作的所有电影，可以这样做：
<programlisting>
DELETE FROM films USING producers
  WHERE producer_id = producers.id AND producers.name = 'foo';
</programlisting>
   这里实际发生的事情是在<structname>films</structname>和
   <structname>producers</structname>之间进行连接，然后删除
   所有成功连接的<structname>films</structname>行。这种语法不
   属于标准。更标准的方式是：
<programlisting>
DELETE FROM films
  WHERE producer_id IN (SELECT id FROM producers WHERE name = 'foo');
</programlisting>
   在一些情况下，连接形式比子查询形式更容易书写或者执行更快。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   Delete all films but musicals:
<programlisting>
DELETE FROM films WHERE kind &lt;&gt; 'Musical';
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   删除所有电影，但音乐剧除外：
<programlisting>
DELETE FROM films WHERE kind &lt;&gt; 'Musical';
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Clear the table <literal>films</literal>:
<programlisting>
DELETE FROM films;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   清空表<literal>films</literal>：
<programlisting>
DELETE FROM films;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Delete completed tasks, returning full details of the deleted rows:
<programlisting>
DELETE FROM tasks WHERE status = 'DONE' RETURNING *;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   删除已完成的任务，返回被删除行的明细：
<programlisting>
DELETE FROM tasks WHERE status = 'DONE' RETURNING *;
</programlisting>
  </para>

<!--==========================orignal english content==========================
   <para>
   Delete the row of <structname>tasks</> on which the cursor
   <literal>c_tasks</> is currently positioned:
<programlisting>
DELETE FROM tasks WHERE CURRENT OF c_tasks;
</programlisting></para>
____________________________________________________________________________-->
   <para>
   删除<structname>tasks</structname>中游标<literal>c_tasks</literal>
   当前位于其上的行：
<programlisting>
DELETE FROM tasks WHERE CURRENT OF c_tasks;
</programlisting></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   This command conforms to the <acronym>SQL</acronym> standard, except
   that the <literal>USING</literal> and <literal>RETURNING</> clauses
   are <productname>PostgreSQL</productname> extensions, as is the ability
   to use <literal>WITH</> with <command>DELETE</>.
  </para>
____________________________________________________________________________-->
  <para>
   这个命令符合<acronym>SQL</acronym>标准，不过
   <literal>USING</literal>和<literal>RETURNING</literal>子句是
   <productname>PostgreSQL</productname>扩展，在
   <command>DELETE</command>中使用<literal>WITH</literal>也是扩展。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-truncate"/></member>
  </simplelist>
 </refsect1>
 </refentry>

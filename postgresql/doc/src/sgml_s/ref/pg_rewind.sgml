<!--
doc/src/sgml/ref/pg_rewind.sgml
PostgreSQL documentation
-->

<refentry id="app-pgrewind">
<!--==========================orignal english content==========================
 <indexterm zone="app-pgrewind">
  <primary>pg_rewind</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="app-pgrewind">
  <primary>pg_rewind</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle><application>pg_rewind</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle><application>pg_rewind</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>pg_rewind</refname>
  <refpurpose>synchronize a <productname>PostgreSQL</productname> data directory with another data directory that was forked from it</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>pg_rewind</refname>
  <refpurpose>把一个<productname>PostgreSQL</productname>数据目录与另一个从该目录中复制出来的数据目录同步</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
  <cmdsynopsis>
   <command>pg_rewind</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <group choice="plain">
    <group choice="req">
     <arg choice="plain"><option>-D </option></arg>
     <arg choice="plain"><option>-&minus;target-pgdata</option></arg>
    </group>
    <replaceable> directory</replaceable>
    <group choice="req">
     <arg choice="plain"><option>-&minus;source-pgdata=<replaceable>directory</replaceable></option></arg>
     <arg choice="plain"><option>-&minus;source-server=<replaceable>connstr</replaceable></option></arg>
    </group>
   </group>
  </cmdsynopsis>
____________________________________________________________________________-->
  <cmdsynopsis>
   <command>pg_rewind</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <group choice="plain">
    <group choice="req">
     <arg choice="plain"><option>-D </option></arg>
     <arg choice="plain"><option>--target-pgdata</option></arg>
    </group>
    <replaceable> directory</replaceable>
    <group choice="req">
     <arg choice="plain"><option>--source-pgdata=<replaceable>directory</replaceable></option></arg>
     <arg choice="plain"><option>--source-server=<replaceable>connstr</replaceable></option></arg>
    </group>
   </group>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>简介</title>

<!--==========================orignal english content==========================
  <para>
   <application>pg_rewind</application> is a tool for synchronizing a PostgreSQL cluster
   with another copy of the same cluster, after the clusters' timelines have
   diverged. A typical scenario is to bring an old master server back online
   after failover as a standby that follows the new master.
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_rewind</application>是用于在集簇的时间线分叉以后，同步一个 PostgreSQL 集簇和同一集簇的另一份拷贝的工具。一种典型的场景是在失效后让一个旧的主服务器重新上线，同时有一个后备机跟随着新的主机。
  </para>

<!--==========================orignal english content==========================
  <para>
   The result is equivalent to replacing the target data directory with the
   source one. Only changed blocks from relation files are copied;
   all other files are copied in full, including configuration files. The
   advantage of <application>pg_rewind</application> over taking a new base backup, or
   tools like <application>rsync</application>, is that <application>pg_rewind</application> does
   not require reading through unchanged blocks in the cluster. This makes
   it a lot faster when the database is large and only a small
   fraction of blocks differ between the clusters.
  </para>
____________________________________________________________________________-->
  <para>
   其结果等效于把目标数据目录替换成源数据目录。关系文件中只有更改过的块才会被拷贝，所有其他的文件会被整个拷贝，包括配置文件。<application>pg_rewind</application>比起做一个新的基础备份或者<application>rsync</application>等工具的优势在于，<application>pg_rewind</application>不要求通读集簇中未更改的块。这使得它在数据库很大并且在集簇间只有小部分块不同时速度很快。
  </para>

<!--==========================orignal english content==========================
  <para>
   <application>pg_rewind</application> examines the timeline histories of the source
   and target clusters to determine the point where they diverged, and
   expects to find WAL in the target cluster's <filename>pg_wal</filename> directory
   reaching all the way back to the point of divergence. The point of divergence
   can be found either on the target timeline, the source timeline, or their common
   ancestor. In the typical failover scenario where the target cluster was
   shut down soon after the divergence, this is not a problem, but if the
   target cluster ran for a long time after the divergence, the old WAL
   files might no longer be present. In that case, they can be manually
   copied from the WAL archive to the <filename>pg_wal</filename> directory, or
   fetched on startup by configuring <filename>recovery.conf</filename>.  The use of
   <application>pg_rewind</application> is not limited to failover, e.g.  a standby
   server can be promoted, run some write transactions, and then rewinded
   to become a standby again.
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_rewind</application>检查源集簇和目标集簇的时间线历史来判断它们在哪一点分叉，并且期望在目标集簇的<filename>pg_wal</filename>目录中找到 WAL 来返回到分叉点。分叉点可能会在目标时间线、源时间线或者它们的共同祖先上找到。在典型的失效场景中，目标集簇在分叉后很快就被关闭，这不是问题，但是如果目标集簇在分叉后已经运行了很长时间，旧的 WAL 文件可能已经不存在了。在这样的情况下，它们可以被手工从 WAL 归档复制到<filename>pg_wal</filename>目录，或者通过配置<filename>recovery.conf</filename>在启动时取得。<application>pg_rewind</application>的使用并不限于失效的场景，例如一个后备服务器可能被提升、运行一些写事务，然后被倒回再次成为一个后备。
  </para>

<!--==========================orignal english content==========================
  <para>
   When the target server is started for the first time after running
   <application>pg_rewind</application>, it will go into recovery mode and replay all
   WAL generated in the source server after the point of divergence.
   If some of the WAL was no longer available in the source server when
   <application>pg_rewind</application> was run, and therefore could not be copied by the
   <application>pg_rewind</application> session, it must be made available when the
   target server is started. This can be done by creating a
   <filename>recovery.conf</filename> file in the target data directory with a
   suitable <varname>restore_command</varname>.
  </para>
____________________________________________________________________________-->
  <para>
   当目标服务器在运行了<application>pg_rewind</application>之后第一次启动时，它将进入到恢复模式并且重放源服务器在分叉点之后产生的所有 WAL。当<application>pg_rewind</application>被运行时有某些 WAL 在源服务器上不可用，并且因此无法被<application>pg_rewind</application>会话所复制，则在目标服务器被启动时必须让这些 WAL 可用。这可以通过在目标数据目录中创建一个<filename>recovery.conf</filename>文件并且在其中使用一个适当的<varname>restore_command</varname>来实现。
  </para>

<!--==========================orignal english content==========================
  <para>
   <application>pg_rewind</application> requires that the target server either has
   the <xref linkend="guc-wal-log-hints"/> option enabled
   in <filename>postgresql.conf</filename> or data checksums enabled when
   the cluster was initialized with <application>initdb</application>.  Neither of these
   are currently on by default.  <xref linkend="guc-full-page-writes"/>
   must also be set to <literal>on</literal>, but is enabled by default.
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_rewind</application>要求目标服务器在<filename>postgresql.conf</filename>中启用了<xref linkend="guc-wal-log-hints"/>选项，或者在用<application>initdb</application>初始化集簇时启用了数据校验。目前默认情况下这两者都没有被打开。<xref linkend="guc-full-page-writes"/>也必须被设置为<literal>on</literal>，这是默认的。
  </para>

  <warning>
<!--==========================orignal english content==========================
   <para>
    If <application>pg_rewind</application> fails while processing, then
    the data folder of the target is likely not in a state that can be
    recovered.  In such a case, taking a new fresh backup is recommended.
   </para>
____________________________________________________________________________-->
   <para>
    如果在处理时<application>pg_rewind</application>失败，则目标的数据目录很可能不在可恢复的状态。在这种情况下，推荐创建一个新的备份。
   </para>

<!--==========================orignal english content==========================
   <para>
    <application>pg_rewind</application> will fail immediately if it finds
    files it cannot write directly to.  This can happen for example when
    the source and the target server use the same file mapping for read-only
    SSL keys and certificates.  If such files are present on the target server
    it is recommended to remove them before running
    <application>pg_rewind</application>.  After doing the rewind, some of
    those files may have been copied from the source, in which case it may
    be necessary to remove the data copied and restore back the set of links
    used before the rewind.
   </para>
____________________________________________________________________________-->
   <para>
    如果<application>pg_rewind</application>发现它无法直接写入的文件，它将立刻失败。例如当源服务器和目标服务器为只读的SSL密钥及证书使用相同的文件映射，就会发生这种情况。如果在目标服务器上存在这样的文件，推荐在运行<application>pg_rewind</application>之前移除它们。在做了rewind之后，一些那样的文件可能已经被从源服务器拷贝，这样就有必要移除已经拷贝的数据并且恢复到rewind之前使用的链接集合。
   </para>
  </warning>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Options</title>
____________________________________________________________________________-->
  <title>选项</title>

<!--==========================orignal english content==========================
   <para>
    <application>pg_rewind</application> accepts the following command-line
    arguments:

    <variablelist>
     <varlistentry>
      <term><option>-D <replaceable class="parameter">directory</replaceable></option></term>
      <term><option>-&minus;target-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
        This option specifies the target data directory that is synchronized
        with the source. The target server must be shut down cleanly before
        running <application>pg_rewind</application>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;source-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
        Specifies the file system path to the data directory of the source
        server to synchronize the target with. This option requires the
        source server to be cleanly shut down.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;source-server=<replaceable class="parameter">connstr</replaceable></option></term>
      <listitem>
       <para>
        Specifies a libpq connection string to connect to the source
        <productname>PostgreSQL</productname> server to synchronize the target with.
        The connection must be a normal (non-replication) connection
        with superuser access. This option requires the source
        server to be running and not in recovery mode.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>-&minus;dry-run</option></term>
      <listitem>
       <para>
        Do everything except actually modifying the target directory.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option></term>
      <term><option>-&minus;progress</option></term>
      <listitem>
       <para>
        Enables progress reporting. Turning this on will deliver an approximate
        progress report while copying data from the source cluster.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;debug</option></term>
      <listitem>
       <para>
        Print verbose debugging output that is mostly useful for developers
        debugging <application>pg_rewind</application>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>-&minus;version</option></term>
      <listitem><para>Display version information, then exit.</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>-&minus;help</option></term>
      <listitem><para>Show help, then exit.</para></listitem>
     </varlistentry>

    </variablelist>
   </para>
____________________________________________________________________________-->
   <para>
    <application>pg_rewind</application>接受下列命令行参数：

    <variablelist>
     <varlistentry>
      <term><option>-D <replaceable class="parameter">directory</replaceable></option></term>
      <term><option>--target-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
        这个选项指定要与源数据目录同步的目标数据目录。在运行<application>pg_rewind</application>之前目标服务器必须被干净地关闭。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
        指定要和目标服务器同步的源服务器的数据目录的文件系统路径。这个选项要求源服务器必须被干净地关闭。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-server=<replaceable class="parameter">connstr</replaceable></option></term>
      <listitem>
       <para>
        指定一个 libpq 连接串用于连接要与目标服务器同步的源<productname>PostgreSQL</productname>服务器。该连接必须是一个具有超级用户访问权限的普通（非复制）连接。这个选项要求源服务器正在运行且不处于恢复模式。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--dry-run</option></term>
      <listitem>
       <para>
        做除了实际修改目标目录之外的其他所有事情。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option></term>
      <term><option>--progress</option></term>
      <listitem>
       <para>
        启用进度报告。在从源集簇拷贝数据时，打开这个选项将会发送一个近似的进度报告。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--debug</option></term>
      <listitem>
       <para>
        打印冗长的调试输出，这主要对于调试<application>pg_rewind</application>的开发者有用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem><para>显示版本信息然后退出。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem><para>显示帮助然后退出。</para></listitem>
     </varlistentry>

    </variablelist>
   </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Environment</title>
____________________________________________________________________________-->
  <title>环境</title>

<!--==========================orignal english content==========================
  <para>
   When <option>-&minus;source-server</option> option is used,
   <application>pg_rewind</application> also uses the environment variables
   supported by <application>libpq</application> (see <xref linkend="libpq-envars"/>).
  </para>
____________________________________________________________________________-->
  <para>
   在使用<option>--source-server</option>选项时，<application>pg_rewind</application>也使用<application>libpq</application>支持的环境变量（见<xref linkend="libpq-envars"/>）。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

  <refsect2>
<!--==========================orignal english content==========================
   <title>How it works</title>
____________________________________________________________________________-->
   <title>如何工作</title>

<!--==========================orignal english content==========================
   <para>
    The basic idea is to copy all file system-level changes from the source
    cluster to the target cluster:
   </para>
____________________________________________________________________________-->
   <para>
    其基本思想是从源集簇拷贝所有文件系统级别的改变到目标集簇：
   </para>

   <procedure>
    <step>
<!--==========================orignal english content==========================
     <para>
      Scan the WAL log of the target cluster, starting from the last
      checkpoint before the point where the source cluster's timeline
      history forked off from the target cluster. For each WAL record,
      record each data block that was touched. This yields a list of all
      the data blocks that were changed in the target cluster, after the
      source cluster forked off.
     </para>
____________________________________________________________________________-->
     <para>
      以源集簇的时间线历史从目标集簇分叉出来的点之前的最后一个检查点为起点，扫描目标集簇的 WAL 日志。对于每一个 WAL 记录，读取每一个被动过的数据块。这会得到在目标集簇中从源集簇被分支出去以后所有被更改过的数据块列表。
     </para>
    </step>
    <step>
<!--==========================orignal english content==========================
     <para>
      Copy all those changed blocks from the source cluster to
      the target cluster, either using direct file system access
      (<option>-&minus;source-pgdata</option>) or SQL (<option>-&minus;source-server</option>).
     </para>
____________________________________________________________________________-->
     <para>
      使用直接的文件系统访问（<option>--source-pgdata</option>）或者 SQL （<option>--source-server</option>），把所有那些更改过的块从源集簇拷贝到目标集簇。
     </para>
    </step>
    <step>
<!--==========================orignal english content==========================
     <para>
      Copy all other files such as <filename>pg_xact</filename> and
      configuration files from the source cluster to the target cluster
      (everything except the relation files). Similarly to base backups,
      the contents of the directories <filename>pg_dynshmem/</filename>,
      <filename>pg_notify/</filename>, <filename>pg_replslot/</filename>,
      <filename>pg_serial/</filename>, <filename>pg_snapshots/</filename>,
      <filename>pg_stat_tmp/</filename>, and
      <filename>pg_subtrans/</filename> are omitted from the data copied
      from the source cluster. Any file or directory beginning with
      <filename>pgsql_tmp</filename> is omitted, as well as are
      <filename>backup_label</filename>,
      <filename>tablespace_map</filename>,
      <filename>pg_internal.init</filename>,
      <filename>postmaster.opts</filename> and
      <filename>postmaster.pid</filename>.
     </para>
____________________________________________________________________________-->
     <para>
      把所有其他诸如<filename>pg_xact</filename>和配置文件（除了关系文件之外所有的东西）从源集簇拷贝到目标集簇。与基础备份类似，在从源集簇拷贝的数据中，目录<filename>pg_dynshmem/</filename>、<filename>pg_notify/</filename>、<filename>pg_replslot/</filename>、<filename>pg_serial/</filename>、<filename>pg_snapshots/</filename>、<filename>pg_stat_tmp/</filename>以及<filename>pg_subtrans/</filename>的内容会被忽略。任何以<filename>pgsql_tmp</filename>开始的文件或目录都会被忽略，<filename>backup_label</filename>、<filename>tablespace_map</filename>、<filename>pg_internal.init</filename>、<filename>postmaster.opts</filename>以及<filename>postmaster.pid</filename>也是这样。
     </para>
    </step>
    <step>
<!--==========================orignal english content==========================
     <para>
      Apply the WAL from the source cluster, starting from the checkpoint
      created at failover. (Strictly speaking, <application>pg_rewind</application>
      doesn't apply the WAL, it just creates a backup label file that
      makes <productname>PostgreSQL</productname> start by replaying all WAL from
      that checkpoint forward.)
     </para>
____________________________________________________________________________-->
     <para>
      从源集簇应用 WAL，从失效处创建的检查点开始（严格来说，<application>pg_rewind</application>并不应用 WAL，它只是创建一个备份标签文件，该文件让<productname>PostgreSQL</productname>从那个检查点开始向前重放所有 WAL）。
     </para>
    </step>
   </procedure>
  </refsect2>
 </refsect1>

</refentry>

<!--
doc/src/sgml/ref/comment.sgml
PostgreSQL documentation
-->

<refentry id="SQL-COMMENT">
<!--==========================orignal english content==========================
 <indexterm zone="sql-comment">
  <primary>COMMENT</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-comment">
  <primary>COMMENT</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>COMMENT</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>COMMENT</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>COMMENT</refname>
  <refpurpose>define or change the comment of an object</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>COMMENT</refname>
  <refpurpose>定义或者更改一个对象的注释</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
COMMENT ON
{
  ACCESS METHOD <replaceable class="parameter">object_name</replaceable> |
  AGGREGATE <replaceable class="parameter">aggregate_name</replaceable> ( <replaceable>aggregate_signature</replaceable> ) |
  CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>) |
  COLLATION <replaceable class="parameter">object_name</replaceable> |
  COLUMN <replaceable class="parameter">relation_name</replaceable>.<replaceable class="parameter">column_name</replaceable> |
  CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ON DOMAIN <replaceable class="parameter">domain_name</replaceable> |
  CONVERSION <replaceable class="parameter">object_name</replaceable> |
  DATABASE <replaceable class="parameter">object_name</replaceable> |
  DOMAIN <replaceable class="parameter">object_name</replaceable> |
  EXTENSION <replaceable class="parameter">object_name</replaceable> |
  EVENT TRIGGER <replaceable class="parameter">object_name</replaceable> |
  FOREIGN DATA WRAPPER <replaceable class="parameter">object_name</replaceable> |
  FOREIGN TABLE <replaceable class="parameter">object_name</replaceable> |
  FUNCTION <replaceable class="parameter">function_name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ] |
  INDEX <replaceable class="parameter">object_name</replaceable> |
  LARGE OBJECT <replaceable class="parameter">large_object_oid</replaceable> |
  MATERIALIZED VIEW <replaceable class="parameter">object_name</replaceable> |
  OPERATOR <replaceable class="parameter">operator_name</replaceable> (<replaceable class="parameter">left_type</replaceable>, <replaceable class="parameter">right_type</replaceable>) |
  OPERATOR CLASS <replaceable class="parameter">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  OPERATOR FAMILY <replaceable class="parameter">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  POLICY <replaceable class="parameter">policy_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">object_name</replaceable> |
  PUBLICATION <replaceable class="parameter">object_name</replaceable> |
  ROLE <replaceable class="parameter">object_name</replaceable> |
  RULE <replaceable class="parameter">rule_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  SCHEMA <replaceable class="parameter">object_name</replaceable> |
  SEQUENCE <replaceable class="parameter">object_name</replaceable> |
  SERVER <replaceable class="parameter">object_name</replaceable> |
  STATISTICS <replaceable class="parameter">object_name</replaceable> |
  SUBSCRIPTION <replaceable class="parameter">object_name</replaceable> |
  TABLE <replaceable class="parameter">object_name</replaceable> |
  TABLESPACE <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH CONFIGURATION <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH DICTIONARY <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH PARSER <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH TEMPLATE <replaceable class="parameter">object_name</replaceable> |
  TRANSFORM FOR <replaceable>type_name</replaceable> LANGUAGE <replaceable>lang_name</replaceable> |
  TRIGGER <replaceable class="parameter">trigger_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  TYPE <replaceable class="parameter">object_name</replaceable> |
  VIEW <replaceable class="parameter">object_name</replaceable>
} IS '<replaceable class="parameter">text</replaceable>'

<phrase>where <replaceable>aggregate_signature</replaceable> is:</phrase>

* |
[ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] |
[ [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] ] ORDER BY [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
COMMENT ON
{
  ACCESS METHOD <replaceable class="parameter">object_name</replaceable> |
  AGGREGATE <replaceable class="parameter">aggregate_name</replaceable> ( <replaceable>aggregate_signature</replaceable> ) |
  CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>) |
  COLLATION <replaceable class="parameter">object_name</replaceable> |
  COLUMN <replaceable class="parameter">relation_name</replaceable>.<replaceable class="parameter">column_name</replaceable> |
  CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ON DOMAIN <replaceable class="parameter">domain_name</replaceable> |
  CONVERSION <replaceable class="parameter">object_name</replaceable> |
  DATABASE <replaceable class="parameter">object_name</replaceable> |
  DOMAIN <replaceable class="parameter">object_name</replaceable> |
  EXTENSION <replaceable class="parameter">object_name</replaceable> |
  EVENT TRIGGER <replaceable class="parameter">object_name</replaceable> |
  FOREIGN DATA WRAPPER <replaceable class="parameter">object_name</replaceable> |
  FOREIGN TABLE <replaceable class="parameter">object_name</replaceable> |
  FUNCTION <replaceable class="parameter">function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) |
  INDEX <replaceable class="parameter">object_name</replaceable> |
  LARGE OBJECT <replaceable class="parameter">large_object_oid</replaceable> |
  MATERIALIZED VIEW <replaceable class="parameter">object_name</replaceable> |
  OPERATOR <replaceable class="parameter">operator_name</replaceable> (<replaceable class="parameter">left_type</replaceable>, <replaceable class="parameter">right_type</replaceable>) |
  OPERATOR CLASS <replaceable class="parameter">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  OPERATOR FAMILY <replaceable class="parameter">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  POLICY <replaceable class="parameter">policy_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">object_name</replaceable> |
  ROLE <replaceable class="parameter">object_name</replaceable> |
  RULE <replaceable class="parameter">rule_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  SCHEMA <replaceable class="parameter">object_name</replaceable> |
  SEQUENCE <replaceable class="parameter">object_name</replaceable> |
  SERVER <replaceable class="parameter">object_name</replaceable> |
  TABLE <replaceable class="parameter">object_name</replaceable> |
  TABLESPACE <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH CONFIGURATION <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH DICTIONARY <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH PARSER <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH TEMPLATE <replaceable class="parameter">object_name</replaceable> |
  TRANSFORM FOR <replaceable>type_name</replaceable> LANGUAGE <replaceable>lang_name</replaceable> |
  TRIGGER <replaceable class="parameter">trigger_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  TYPE <replaceable class="parameter">object_name</replaceable> |
  VIEW <replaceable class="parameter">object_name</replaceable>
} IS '<replaceable class="parameter">text</replaceable>'
  ACCESS METHOD <replaceable class="parameter">object_name</replaceable> |
  AGGREGATE <replaceable class="parameter">aggregate_name</replaceable> ( <replaceable>aggregate_signature</replaceable> ) |
  CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>) |
  COLLATION <replaceable class="parameter">object_name</replaceable> |
  COLUMN <replaceable class="parameter">relation_name</replaceable>.<replaceable class="parameter">column_name</replaceable> |
  CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ON DOMAIN <replaceable class="parameter">domain_name</replaceable> |
  CONVERSION <replaceable class="parameter">object_name</replaceable> |
  DATABASE <replaceable class="parameter">object_name</replaceable> |
  DOMAIN <replaceable class="parameter">object_name</replaceable> |
  EXTENSION <replaceable class="parameter">object_name</replaceable> |
  EVENT TRIGGER <replaceable class="parameter">object_name</replaceable> |
  FOREIGN DATA WRAPPER <replaceable class="parameter">object_name</replaceable> |
  FOREIGN TABLE <replaceable class="parameter">object_name</replaceable> |
  FUNCTION <replaceable class="parameter">function_name</replaceable> [ ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) ] |
  INDEX <replaceable class="parameter">object_name</replaceable> |
  LARGE OBJECT <replaceable class="parameter">large_object_oid</replaceable> |
  MATERIALIZED VIEW <replaceable class="parameter">object_name</replaceable> |
  OPERATOR <replaceable class="parameter">operator_name</replaceable> (<replaceable class="parameter">left_type</replaceable>, <replaceable class="parameter">right_type</replaceable>) |
  OPERATOR CLASS <replaceable class="parameter">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  OPERATOR FAMILY <replaceable class="parameter">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  POLICY <replaceable class="parameter">policy_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">object_name</replaceable> |
  PUBLICATION <replaceable class="parameter">object_name</replaceable> |
  ROLE <replaceable class="parameter">object_name</replaceable> |
  RULE <replaceable class="parameter">rule_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  SCHEMA <replaceable class="parameter">object_name</replaceable> |
  SEQUENCE <replaceable class="parameter">object_name</replaceable> |
  SERVER <replaceable class="parameter">object_name</replaceable> |
  STATISTICS <replaceable class="parameter">object_name</replaceable> |
  SUBSCRIPTION <replaceable class="parameter">object_name</replaceable> |
  TABLE <replaceable class="parameter">object_name</replaceable> |
  TABLESPACE <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH CONFIGURATION <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH DICTIONARY <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH PARSER <replaceable class="parameter">object_name</replaceable> |
  TEXT SEARCH TEMPLATE <replaceable class="parameter">object_name</replaceable> |
  TRANSFORM FOR <replaceable>type_name</replaceable> LANGUAGE <replaceable>lang_name</replaceable> |
  TRIGGER <replaceable class="parameter">trigger_name</replaceable> ON <replaceable class="parameter">table_name</replaceable> |
  TYPE <replaceable class="parameter">object_name</replaceable> |
  VIEW <replaceable class="parameter">object_name</replaceable>
} IS '<replaceable class="parameter">text</replaceable>'

<phrase>其中 <replaceable>aggregate_signature</replaceable> 是：</phrase>

* |
[ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] |
[ [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] ] ORDER BY [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>COMMENT</command> stores a comment about a database object.
  </para>
____________________________________________________________________________-->
  <para>
   <command>COMMENT</command>存储关于一个数据库对象的注释。
  </para>

<!--==========================orignal english content==========================
  <para>
   Only one comment string is stored for each object, so to modify a comment,
   issue a new <command>COMMENT</> command for the same object.  To remove a
   comment, write <literal>NULL</literal> in place of the text string.
   Comments are automatically dropped when their object is dropped.
  </para>
____________________________________________________________________________-->
  <para>
   对每一个对象只保存一个注释字符串，因此为了修改一段注释，对同一个对象
   发出一个新的<command>COMMENT</command>命令。要移除一段注释，可在文
   本字符串的位置上写上<literal>NULL</literal>。当对象被删除时，其注释
   也会被自动删除。
  </para>

<!--==========================orignal english content==========================
  <para>
   For most kinds of object, only the object's owner can set the comment.
   Roles don't have owners, so the rule for <literal>COMMENT ON ROLE</> is
   that you must be superuser to comment on a superuser role, or have the
   <literal>CREATEROLE</> privilege to comment on non-superuser roles.
   Likewise, access methods don't have owners either; you must be superuser
   to comment on an access method.
   Of course, a superuser can comment on anything.
  </para>
____________________________________________________________________________-->
  <para>
   对大部分类型的对象，只有对象的拥有者可以设置注释。角色没有拥有者，因此
   <literal>COMMENT ON ROLE</literal>的规则是你必须作为一个超级用户来对一个
   超级用户角色设置注释，或者具有<literal>CREATEROLE</literal>特权来对非超级用
   户角色设置注释。同样的，访问方法也没有拥有者，你必须作为一个超级用户来
   对一个访问方法设置注释。当然，一个超级用户可以对任何东西设置注释。
  </para>

<!--==========================orignal english content==========================
  <para>
    Comments can be viewed using <application>psql</application>'s
    <command>\d</command> family of commands.
    Other user interfaces to retrieve comments can be built atop
    the same built-in functions that <application>psql</application> uses, namely
    <function>obj_description</>, <function>col_description</>,
    and <function>shobj_description</>
    (see <xref linkend="functions-info-comment-table">).
  </para>
____________________________________________________________________________-->
  <para>
    使用<application>psql</application>的<command>\d</command>
    命令家族可以查看注释。其他检索注释的用户接口可以构建在
    <application>psql</application>使用的内建函数之上，即
    <function>obj_description</function>、<function>col_description</function>
    以及<function>shobj_description</function>
    （见<xref linkend="functions-info-comment-table"/>）。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">object_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">object_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">relation_name</replaceable>.<replaceable>column_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">relation_name</replaceable>.<replaceable>column_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">aggregate_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">aggregate_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">constraint_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">constraint_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">function_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">function_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">operator_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">operator_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">policy_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">policy_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">rule_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">rule_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">trigger_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">trigger_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of the object to be commented.  Names of tables,
      aggregates, collations, conversions, domains, foreign tables, functions,
      indexes, operators, operator classes, operator families, sequences,
      statistics, text search objects, types, and views can be
      schema-qualified. When commenting on a column,
      <replaceable class="parameter">relation_name</replaceable> must refer
      to a table, view, composite type, or foreign table.
     </para>
____________________________________________________________________________-->
     <para>
      要被注释的对象的名称。表、聚集、排序方式、转换、域、外部表、函数、
      索引、操作符、操作符类、操作符族、序列、统计信息、文本搜索对象、类型和视图
      的名称可以被模式限定。在注释一列时，
      <replaceable class="parameter">relation_name</replaceable>必须
      引用一个表、视图、组合类型或者外部表。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">table_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">table_name</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">domain_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">domain_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      When creating a comment on a constraint, a trigger, a rule or
      a policy these parameters specify the name of the table or domain on
      which that object is defined.
     </para>
____________________________________________________________________________-->
     <para>
      当在一个约束、触发器、规则或者策略上创建一段注释时，这些参数指定在其上定义
      该对象的表或域的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable>source_type</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>source_type</replaceable></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the source data type of the cast.
      </para>
____________________________________________________________________________-->
      <para>
       造型的源数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable>target_type</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>target_type</replaceable></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the target data type of the cast.
      </para>
____________________________________________________________________________-->
      <para>
       造型的目标数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">argmode</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">argmode</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The mode of a function or aggregate
      argument: <literal>IN</>, <literal>OUT</>,
      <literal>INOUT</>, or <literal>VARIADIC</>.
      If omitted, the default is <literal>IN</>.
      Note that <command>COMMENT</command> does not actually pay
      any attention to <literal>OUT</> arguments, since only the input
      arguments are needed to determine the function's identity.
      So it is sufficient to list the <literal>IN</>, <literal>INOUT</>,
      and <literal>VARIADIC</> arguments.
     </para>
____________________________________________________________________________-->
     <para>
      一个函数或者聚集的参数的模式：<literal>IN</literal>、
      <literal>OUT</literal>、<literal>INOUT</literal>或者<literal>VARIADIC</literal>。
      如果被省略，默认值是<literal>IN</literal>。注意
      <command>COMMENT</command>并不真正关心
      <literal>OUT</literal>参数，因为决定函数的身份只需要输入参数。因此
      列出<literal>IN</literal>、<literal>INOUT</literal>和<literal>VARIADIC</literal>
      参数就足够了。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">argname</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">argname</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of a function or aggregate argument.
      Note that <command>COMMENT</command> does not actually pay
      any attention to argument names, since only the argument data
      types are needed to determine the function's identity.
     </para>
____________________________________________________________________________-->
     <para>
      一个函数或者聚集参数的名称。注意
      <command>COMMENT</command>并不真正关心参数名称，
      因为决定函数的身份只需要参数数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">argtype</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">argtype</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The data type of a function or aggregate argument.
     </para>
____________________________________________________________________________-->
     <para>
      一个函数或者聚集参数的数据类型。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">large_object_oid</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">large_object_oid</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The OID of the large object.
     </para>
____________________________________________________________________________-->
     <para>
      大对象的 OID。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">left_type</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">left_type</replaceable></term>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">right_type</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">right_type</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The data type(s) of the operator's arguments (optionally
      schema-qualified).  Write <literal>NONE</> for the missing argument
      of a prefix or postfix operator.
     </para>
____________________________________________________________________________-->
     <para>
      操作符的参数的数据类型（可以是模式限定的）。对一个前缀后后缀操作符
      的缺失参数可以写<literal>NONE</literal>。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>PROCEDURAL</literal></term>
____________________________________________________________________________-->
     <term><literal>PROCEDURAL</literal></term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       This is a noise word.
      </para>
____________________________________________________________________________-->
      <para>
       这是一个噪声词。
      </para>
     </listitem>
    </varlistentry>
    
    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable>type_name</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>type_name</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the data type of the transform.
      </para>
____________________________________________________________________________-->
      <para>
       该转换的数据类型的名称。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable>lang_name</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable>lang_name</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the language of the transform.
      </para>
____________________________________________________________________________-->
      <para>
       该转换的语言的名称。
      </para>
     </listitem>
    </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">text</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">text</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The new comment, written as a string literal; or <literal>NULL</>
      to drop the comment.
     </para>
____________________________________________________________________________-->
     <para>
      写成一个字符串的新注释。如果要删除注释，写成<literal>NULL</literal>。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   There is presently no security mechanism for viewing comments: any user
   connected to a database can see all the comments for objects in
   that database.  For shared objects such as
   databases, roles, and tablespaces, comments are stored globally so any
   user connected to any database in the cluster can see all the comments
   for shared objects.  Therefore, don't put security-critical
   information in comments.
  </para>
____________________________________________________________________________-->
  <para>
   当前对查看注释没有安全机制：任何连接到一个数据库的用户能够看到
   该数据库中所有对象的注释。对于数据库、角色、表空间这类共享对象，
   注释被全局存储，因此连接到集簇中任何数据库的任何用户可以看到共
   享对象的所有注释。因此，不要在注释中放置有安全性风险的信息。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   Attach a comment to the table <literal>mytable</literal>:

<programlisting>
COMMENT ON TABLE mytable IS 'This is my table.';
</programlisting>

   Remove it again:

<programlisting>
COMMENT ON TABLE mytable IS NULL;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   为表<literal>mytable</literal>附加一段注释：

<programlisting>
COMMENT ON TABLE mytable IS 'This is my table.';
</programlisting>

   移除它：

<programlisting>
COMMENT ON TABLE mytable IS NULL;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Some more examples:

<programlisting>
COMMENT ON ACCESS METHOD rtree IS 'R-Tree access method';
COMMENT ON AGGREGATE my_aggregate (double precision) IS 'Computes sample variance';
COMMENT ON CAST (text AS int4) IS 'Allow casts from text to int4';
COMMENT ON COLLATION "fr_CA" IS 'Canadian French';
COMMENT ON COLUMN my_table.my_column IS 'Employee ID number';
COMMENT ON CONVERSION my_conv IS 'Conversion to UTF8';
COMMENT ON CONSTRAINT bar_col_cons ON bar IS 'Constrains column col';
COMMENT ON CONSTRAINT dom_col_constr ON DOMAIN dom IS 'Constrains col of domain';
COMMENT ON DATABASE my_database IS 'Development Database';
COMMENT ON DOMAIN my_domain IS 'Email Address Domain';
COMMENT ON EXTENSION hstore IS 'implements the hstore data type';
COMMENT ON FOREIGN DATA WRAPPER mywrapper IS 'my foreign data wrapper';
COMMENT ON FOREIGN TABLE my_foreign_table IS 'Employee Information in other database';
COMMENT ON FUNCTION my_function (timestamp) IS 'Returns Roman Numeral';
COMMENT ON INDEX my_index IS 'Enforces uniqueness on employee ID';
COMMENT ON LANGUAGE plpython IS 'Python support for stored procedures';
COMMENT ON LARGE OBJECT 346344 IS 'Planning document';
COMMENT ON MATERIALIZED VIEW my_matview IS 'Summary of order history';
COMMENT ON OPERATOR ^ (text, text) IS 'Performs intersection of two texts';
COMMENT ON OPERATOR - (NONE, integer) IS 'Unary minus';
COMMENT ON OPERATOR CLASS int4ops USING btree IS '4 byte integer operators for btrees';
COMMENT ON OPERATOR FAMILY integer_ops USING btree IS 'all integer operators for btrees';
COMMENT ON POLICY my_policy ON mytable IS 'Filter rows by users';
COMMENT ON ROLE my_role IS 'Administration group for finance tables';
COMMENT ON RULE my_rule ON my_table IS 'Logs updates of employee records';
COMMENT ON SCHEMA my_schema IS 'Departmental data';
COMMENT ON SEQUENCE my_sequence IS 'Used to generate primary keys';
COMMENT ON SERVER myserver IS 'my foreign server';
COMMENT ON STATISTICS my_statistics IS 'Improves planner row estimations';
COMMENT ON TABLE my_schema.my_table IS 'Employee Information';
COMMENT ON TABLESPACE my_tablespace IS 'Tablespace for indexes';
COMMENT ON TEXT SEARCH CONFIGURATION my_config IS 'Special word filtering';
COMMENT ON TEXT SEARCH DICTIONARY swedish IS 'Snowball stemmer for Swedish language';
COMMENT ON TEXT SEARCH PARSER my_parser IS 'Splits text into words';
COMMENT ON TEXT SEARCH TEMPLATE snowball IS 'Snowball stemmer';
COMMENT ON TRANSFORM FOR hstore LANGUAGE plpythonu IS 'Transform between hstore and Python dict';
COMMENT ON TRIGGER my_trigger ON my_table IS 'Used for RI';
COMMENT ON TYPE complex IS 'Complex number data type';
COMMENT ON VIEW my_view IS 'View of departmental costs';
</programlisting></para>
____________________________________________________________________________-->
  <para>
   更多的一些例子：

<programlisting>
COMMENT ON ACCESS METHOD rtree IS 'R-Tree access method';
COMMENT ON AGGREGATE my_aggregate (double precision) IS 'Computes sample variance';
COMMENT ON CAST (text AS int4) IS 'Allow casts from text to int4';
COMMENT ON COLLATION "fr_CA" IS 'Canadian French';
COMMENT ON COLUMN my_table.my_column IS 'Employee ID number';
COMMENT ON CONVERSION my_conv IS 'Conversion to UTF8';
COMMENT ON CONSTRAINT bar_col_cons ON bar IS 'Constrains column col';
COMMENT ON CONSTRAINT dom_col_constr ON DOMAIN dom IS 'Constrains col of domain';
COMMENT ON DATABASE my_database IS 'Development Database';
COMMENT ON DOMAIN my_domain IS 'Email Address Domain';
COMMENT ON EXTENSION hstore IS 'implements the hstore data type';
COMMENT ON FOREIGN DATA WRAPPER mywrapper IS 'my foreign data wrapper';
COMMENT ON FOREIGN TABLE my_foreign_table IS 'Employee Information in other database';
COMMENT ON FUNCTION my_function (timestamp) IS 'Returns Roman Numeral';
COMMENT ON INDEX my_index IS 'Enforces uniqueness on employee ID';
COMMENT ON LANGUAGE plpython IS 'Python support for stored procedures';
COMMENT ON LARGE OBJECT 346344 IS 'Planning document';
COMMENT ON MATERIALIZED VIEW my_matview IS 'Summary of order history';
COMMENT ON OPERATOR ^ (text, text) IS 'Performs intersection of two texts';
COMMENT ON OPERATOR - (NONE, integer) IS 'Unary minus';
COMMENT ON OPERATOR CLASS int4ops USING btree IS '4 byte integer operators for btrees';
COMMENT ON OPERATOR FAMILY integer_ops USING btree IS 'all integer operators for btrees';
COMMENT ON POLICY my_policy ON mytable IS 'Filter rows by users';
COMMENT ON ROLE my_role IS 'Administration group for finance tables';
COMMENT ON RULE my_rule ON my_table IS 'Logs updates of employee records';
COMMENT ON SCHEMA my_schema IS 'Departmental data';
COMMENT ON SEQUENCE my_sequence IS 'Used to generate primary keys';
COMMENT ON SERVER myserver IS 'my foreign server';
COMMENT ON STATISTICS my_statistics IS 'Improves planner row estimations';
COMMENT ON TABLE my_schema.my_table IS 'Employee Information';
COMMENT ON TABLESPACE my_tablespace IS 'Tablespace for indexes';
COMMENT ON TEXT SEARCH CONFIGURATION my_config IS 'Special word filtering';
COMMENT ON TEXT SEARCH DICTIONARY swedish IS 'Snowball stemmer for Swedish language';
COMMENT ON TEXT SEARCH PARSER my_parser IS 'Splits text into words';
COMMENT ON TEXT SEARCH TEMPLATE snowball IS 'Snowball stemmer';
COMMENT ON TRANSFORM FOR hstore LANGUAGE plpythonu IS 'Transform between hstore and Python dict';
COMMENT ON TRIGGER my_trigger ON my_table IS 'Used for RI';
COMMENT ON TYPE complex IS 'Complex number data type';
COMMENT ON VIEW my_view IS 'View of departmental costs';
</programlisting></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   There is no <command>COMMENT</command> command in the SQL standard.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 标准中没有<command>COMMENT</command>命令。
  </para>
 </refsect1>
</refentry>

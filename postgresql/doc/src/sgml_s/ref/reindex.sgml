<!--
doc/src/sgml/ref/reindex.sgml
PostgreSQL documentation
-->

<refentry id="sql-reindex">
<!--==========================orignal english content==========================
 <indexterm zone="sql-reindex">
  <primary>REINDEX</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-reindex">
  <primary>REINDEX</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>REINDEX</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>REINDEX</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>REINDEX</refname>
  <refpurpose>rebuild indexes</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>REINDEX</refname>
  <refpurpose>重建索引</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
REINDEX [ ( VERBOSE ) ] { INDEX | TABLE | SCHEMA | DATABASE | SYSTEM } <replaceable class="parameter">name</replaceable>
</synopsis>
____________________________________________________________________________-->
<synopsis>
REINDEX [ ( VERBOSE ) ] { INDEX | TABLE | SCHEMA | DATABASE | SYSTEM } <replaceable class="parameter">name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>REINDEX</command> rebuilds an index using the data
   stored in the index's table, replacing the old copy of the index. There are
   several scenarios in which to use <command>REINDEX</command>:

   <itemizedlist>
    <listitem>
     <para>
      An index has become corrupted, and no longer contains valid
      data. Although in theory this should never happen, in
      practice indexes can become corrupted due to software bugs or
      hardware failures.  <command>REINDEX</command> provides a
      recovery method.
     </para>
    </listitem>

    <listitem>
     <para>
      An index has become <quote>bloated</quote>, that is it contains many
      empty or nearly-empty pages.  This can occur with B-tree indexes in
      <productname>PostgreSQL</productname> under certain uncommon access
      patterns. <command>REINDEX</command> provides a way to reduce
      the space consumption of the index by writing a new version of
      the index without the dead pages. See <xref
      linkend="routine-reindex"/> for more information.
     </para>
    </listitem>

    <listitem>
     <para>
      You have altered a storage parameter (such as fillfactor)
      for an index, and wish to ensure that the change has taken full effect.
     </para>
    </listitem>

    <listitem>
     <para>
      An index build with the <literal>CONCURRENTLY</literal> option failed, leaving
      an <quote>invalid</quote> index. Such indexes are useless but it can be
      convenient to use <command>REINDEX</command> to rebuild them. Note that
      <command>REINDEX</command> will not perform a concurrent build. To build the
      index without interfering with production you should drop the index and
      reissue the <command>CREATE INDEX CONCURRENTLY</command> command.
     </para>
    </listitem>

   </itemizedlist></para>
____________________________________________________________________________-->
  <para>
   <command>REINDEX</command>使用索引的表里存储的数据重建一个索引，
   并且替换该索引的旧拷贝。有一些场景需要使用<command>REINDEX</command>：

   <itemizedlist>
    <listitem>
     <para>
      一个索引已经损坏，并且不再包含合法数据。尽管理论上这不会发生，
      实际上索引会因为软件缺陷或硬件失效损坏。
      <command>REINDEX</command>提供了一种恢复方法。
     </para>
    </listitem>

    <listitem>
     <para>
      一个索引变得<quote>臃肿</quote>，其中包含很多空的或者近乎为空的页面。
      <productname>PostgreSQL</productname>中的 B-树索引在特定的非
      常规访问模式下可能会发生这种情况。<command>REINDEX</command>
      提供了一种方法来减少索引的空间消耗，即制造一个新版本的索引，其中没有
      死亡页面。详见<xref linkend="routine-reindex"/>。
     </para>
    </listitem>

    <listitem>
     <para>
      修改了一个索引的存储参数（例如填充因子），并且希望确保这种修改完全
      生效。
     </para>
    </listitem>

    <listitem>
     <para>
      用<literal>CONCURRENTLY</literal>选项进行的一次索引创建失败，留下了
      一个<quote>无效的</quote>索引。这类索引是没有用处的，但是可以用
      <command>REINDEX</command>来重建它们。注意，
      <command>REINDEX</command>将不会执行一次并发构建。要构建该索引并且
      不干扰生产，应该先删除索引并且重新发出
      <command>CREATE INDEX CONCURRENTLY</command>命令。
     </para>
    </listitem>

   </itemizedlist></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>INDEX</literal></term>
____________________________________________________________________________-->
    <term><literal>INDEX</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Recreate the specified index.
     </para>
____________________________________________________________________________-->
     <para>
      重新创建指定的索引。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>TABLE</literal></term>
____________________________________________________________________________-->
    <term><literal>TABLE</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Recreate all indexes of the specified table.  If the table has a
      secondary <quote>TOAST</quote> table, that is reindexed as well.
     </para>
____________________________________________________________________________-->
     <para>
      重新创建指定表的所有索引。如果该表有一个二级
      <quote>TOAST</quote>表，它也会被重索引。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>SCHEMA</literal></term>
____________________________________________________________________________-->
    <term><literal>SCHEMA</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Recreate all indexes of the specified schema.  If a table of this
      schema has a secondary <quote>TOAST</quote> table, that is reindexed as
      well. Indexes on shared system catalogs are also processed.
      This form of <command>REINDEX</command> cannot be executed inside a
      transaction block.
     </para>
____________________________________________________________________________-->
     <para>
      重建指定方案的所有索引。如果这个方案中的一个表有次级的<quote>TOAST</quote>表，它也会被重建索引。共享系统目录上的索引也会被处理。这种形式的<command>REINDEX</command>不能在事务块内执行。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>DATABASE</literal></term>
____________________________________________________________________________-->
    <term><literal>DATABASE</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Recreate all indexes within the current database.
      Indexes on shared system catalogs are also processed.
      This form of <command>REINDEX</command> cannot be executed inside a
      transaction block.
     </para>
____________________________________________________________________________-->
     <para>
      重新创建当前数据库内的所有索引。共享的系统目录上的索引也会被
      处理。这种形式的<command>REINDEX</command>不能在一个
      事务块内执行。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>SYSTEM</literal></term>
____________________________________________________________________________-->
    <term><literal>SYSTEM</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Recreate all indexes on system catalogs within the current database.
      Indexes on shared system catalogs are included.
      Indexes on user tables are not processed.
      This form of <command>REINDEX</command> cannot be executed inside a
      transaction block.
     </para>
____________________________________________________________________________-->
     <para>
      重新创建当前数据库中在系统目录上的所有索引。共享系统目录上的
      索引也被包括在内。用户表上的索引则不会被处理。这种形式的
      <command>REINDEX</command>不能在一个事务块内执行。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of the specific index, table, or database to be
      reindexed.  Index and table names can be schema-qualified.
      Presently, <command>REINDEX DATABASE</command> and <command>REINDEX SYSTEM</command>
      can only reindex the current database, so their parameter must match
      the current database's name.
     </para>
____________________________________________________________________________-->
     <para>
      要被重索引的特定索引、表或者数据库的名字。索引和表名可以被
      模式限定。当前，<command>REINDEX DATABASE</command>和
      <command>REINDEX SYSTEM</command>只能重索引当前数据库，因此
      它们的参数必须匹配当前数据库的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>VERBOSE</literal></term>
____________________________________________________________________________-->
    <term><literal>VERBOSE</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Prints a progress report as each index is reindexed.
     </para>
____________________________________________________________________________-->
     <para>
      在每个索引被重建时打印进度报告。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   If you suspect corruption of an index on a user table, you can
   simply rebuild that index, or all indexes on the table, using
   <command>REINDEX INDEX</command> or <command>REINDEX TABLE</command>.
  </para>
____________________________________________________________________________-->
  <para>
   如果怀疑一个用户表上的索引损坏，可以使用
   <command>REINDEX INDEX</command>或者
   <command>REINDEX TABLE</command>简单地重建该索引
   或者表上的所有索引。
  </para>

<!--==========================orignal english content==========================
  <para>
   Things are more difficult if you need to recover from corruption of
   an index on a system table.  In this case it's important for the
   system to not have used any of the suspect indexes itself.
   (Indeed, in this sort of scenario you might find that server
   processes are crashing immediately at start-up, due to reliance on
   the corrupted indexes.)  To recover safely, the server must be started
   with the <option>-P</option> option, which prevents it from using
   indexes for system catalog lookups.
  </para>
____________________________________________________________________________-->
  <para>
   如果你需要从一个系统表上的索引损坏中恢复，就更困难一些。在
   这种情况下，对系统来说重要的是没有使用过任何可疑的索引本身（
   实际上，这种场景中，你可能会发现服务器进程会在启动时立刻崩溃，
   这是因为对于损坏的索引的依赖）。要安全地恢复，服务器必须用
   <option>-P</option>选项启动，这将阻止它使用索引来进行系统
   目录查找。
  </para>

<!--==========================orignal english content==========================
  <para>
   One way to do this is to shut down the server and start a single-user
   <productname>PostgreSQL</productname> server
   with the <option>-P</option> option included on its command line.
   Then, <command>REINDEX DATABASE</command>, <command>REINDEX SYSTEM</command>,
   <command>REINDEX TABLE</command>, or <command>REINDEX INDEX</command> can be
   issued, depending on how much you want to reconstruct.  If in
   doubt, use <command>REINDEX SYSTEM</command> to select
   reconstruction of all system indexes in the database.  Then quit
   the single-user server session and restart the regular server.
   See the <xref linkend="app-postgres"/> reference page for more
   information about how to interact with the single-user server
   interface.
  </para>
____________________________________________________________________________-->
  <para>
   这样做的一种方法是关闭服务器，并且启动一个单用户的
   <productname>PostgreSQL</productname>服务器，在其命令行
   中包括<option>-P</option>选项。然后，可以发出
   <command>REINDEX DATABASE</command>、<command>REINDEX SYSTEM</command>、
   <command>REINDEX TABLE</command>或者<command>REINDEX INDEX</command>，
   具体使用哪个命令取决于你想要重构多少东西。如果有疑问，可以使用
   <command>REINDEX SYSTEM</command>来选择重建数据库中的所有系统索引。
   然后退出单用户服务器会话并且重启常规的服务器。更多关于如何与
   单用户服务器接口交互的内容请见<xref linkend="app-postgres"/>参考页。
  </para>

<!--==========================orignal english content==========================
  <para>
   Alternatively, a regular server session can be started with
   <option>-P</option> included in its command line options.
   The method for doing this varies across clients, but in all
   <application>libpq</application>-based clients, it is possible to set
   the <envar>PGOPTIONS</envar> environment variable to <literal>-P</literal>
   before starting the client.  Note that while this method does not
   require locking out other clients, it might still be wise to prevent
   other users from connecting to the damaged database until repairs
   have been completed.
  </para>
____________________________________________________________________________-->
  <para>
   在另一种方法中，可以开始一个常规的服务器会话，在其命令行选项
   中包括<option>-P</option>。这样做的方法与客户端有关，但是在
   所有基于<application>libpq</application>的客户端中都可以在开始客户端
   之前设置<envar>PGOPTIONS</envar>环境变量为<literal>-P</literal>。
   注意虽然这种方法不要求用锁排斥其他客户端，在修复完成之前避免
   其他用户连接到受损的数据库才是更加明智的。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>REINDEX</command> is similar to a drop and recreate of the index
   in that the index contents are rebuilt from scratch.  However, the locking
   considerations are rather different.  <command>REINDEX</command> locks out writes
   but not reads of the index's parent table.  It also takes an exclusive lock
   on the specific index being processed, which will block reads that attempt
   to use that index.  In contrast, <command>DROP INDEX</command> momentarily takes
   an exclusive lock on the parent table, blocking both writes and reads.  The
   subsequent <command>CREATE INDEX</command> locks out writes but not reads; since
   the index is not there, no read will attempt to use it, meaning that there
   will be no blocking but reads might be forced into expensive sequential
   scans.
  </para>
____________________________________________________________________________-->
  <para>
   <command>REINDEX</command>类似于删除索引并且重建索引，在其中
   索引内容会被从头开始建立。不过，锁定方面的考虑却相当不同。
   <command>REINDEX</command>会用锁排斥写，但不会排斥在索引的父表上的读。
   它也会在被处理的索引上取得一个排他锁，该锁将会阻塞对该索引的使用尝试。
   相反，<command>DROP INDEX</command> 会暂时在附表上取得一个排他锁，阻塞
   写和读。后续的<command>CREATE INDEX</command>会排斥写但不排斥读，由于
   该索引不存在，所以不会有读取它的尝试，这意味着不会有阻塞但是读操作可能
   被强制成昂贵的顺序扫描。
  </para>

<!--==========================orignal english content==========================
  <para>
   Reindexing a single index or table requires being the owner of that
   index or table.  Reindexing a schema or database requires being the
   owner of that schema or database.  Note that is therefore sometimes
   possible for non-superusers to rebuild indexes of tables owned by
   other users.  However, as a special exception, when
   <command>REINDEX DATABASE</command>, <command>REINDEX SCHEMA</command>
   or <command>REINDEX SYSTEM</command> is issued by a non-superuser,
   indexes on shared catalogs will be skipped unless the user owns the
   catalog (which typically won't be the case).  Of course, superusers
   can always reindex anything.
  </para>
____________________________________________________________________________-->
  <para>
   重索引单独一个索引或者表要求用户是该索引或表的拥有者。对方案或数据库重建索引要求是该方案或者数据库的拥有者。注意因此非超级用户有时无法重建其他用户拥有的表上的索引。不过，作为一种特例，当一个非超级用户发出<command>REINDEX DATABASE</command>、<command>REINDEX SCHEMA</command>或者<command>REINDEX SYSTEM</command>时，共享目录上的索引将被跳过，除非该用户拥有该目录（通常不会是这样）。当然，超级用户总是可以重建所有的索引。
  </para>

<!--==========================orignal english content==========================
  <para>
   Reindexing partitioned tables or partitioned indexes is not supported.
   Each individual partition can be reindexed separately instead.
  </para>
____________________________________________________________________________-->
  <para>
   不支持重建分区表的索引或者分区索引。不过可以单独为每个分区重建索引。
  </para>

 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   Rebuild a single index:

<programlisting>
REINDEX INDEX my_index;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   重建单个索引：

<programlisting>
REINDEX INDEX my_index;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Rebuild all the indexes on the table <literal>my_table</literal>:

<programlisting>
REINDEX TABLE my_table;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   重建表<literal>my_table</literal>上的所有索引：

<programlisting>
REINDEX TABLE my_table;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Rebuild all indexes in a particular database, without trusting the
   system indexes to be valid already:

<programlisting>
$ <userinput>export PGOPTIONS="-P"</userinput>
$ <userinput>psql broken_db</userinput>
...
broken_db=&gt; REINDEX DATABASE broken_db;
broken_db=&gt; \q
</programlisting></para>
____________________________________________________________________________-->
  <para>
   重建一个特定数据库中的所有索引，且不假设系统索引已经可用：

<programlisting>
$ <userinput>export PGOPTIONS="-P"</userinput>
$ <userinput>psql broken_db</userinput>
...
broken_db=&gt; REINDEX DATABASE broken_db;
broken_db=&gt; \q
</programlisting></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   There is no <command>REINDEX</command> command in the SQL standard.
  </para>
____________________________________________________________________________-->
  <para>
   在 SQL 标准中没有<command>REINDEX</command>命令。
  </para>
 </refsect1>
</refentry>

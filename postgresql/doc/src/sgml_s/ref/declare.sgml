<!--
doc/src/sgml/ref/declare.sgml
PostgreSQL documentation
-->

<refentry id="SQL-DECLARE">
<!--==========================orignal english content==========================
 <indexterm zone="sql-declare">
  <primary>DECLARE</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-declare">
  <primary>DECLARE</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <indexterm zone="sql-declare">
  <primary>cursor</primary>
  <secondary>DECLARE</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-declare">
  <primary>cursor</primary>
  <secondary>DECLARE</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>DECLARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>DECLARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>DECLARE</refname>
  <refpurpose>define a cursor</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>DECLARE</refname>
  <refpurpose>定义一个游标</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
DECLARE <replaceable class="parameter">name</replaceable> [ BINARY ] [ INSENSITIVE ] [ [ NO ] SCROLL ]
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR <replaceable class="parameter">query</replaceable>
</synopsis>
____________________________________________________________________________-->
<synopsis>
DECLARE <replaceable class="parameter">name</replaceable> [ BINARY ] [ INSENSITIVE ] [ [ NO ] SCROLL ]
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR <replaceable class="parameter">query</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>DECLARE</command> allows a user to create cursors, which
   can be used to retrieve
   a small number of rows at a time out of a larger query.
   After the cursor is created, rows are fetched from it using
   <xref linkend="sql-fetch">.
  </para>
____________________________________________________________________________-->
  <para>
   <command>DECLARE</command>允许用户创建游标，
   游标可以被用来在大型查询暂停时检索少量的行。游标被创建后，
   可以用<xref linkend="sql-fetch"/>从中取得行。
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    This page describes usage of cursors at the SQL command level.
    If you are trying to use cursors inside a <application>PL/pgSQL</>
    function, the rules are different &mdash;
    see <xref linkend="plpgsql-cursors">.
   </para>
____________________________________________________________________________-->
   <para>
    这个页面描述在 SQL 命令层面上游标的用法。如果想要在
    <application>PL/pgSQL</application>函数中使用游标，其规则是不同的
     &mdash; 详见<xref linkend="plpgsql-cursors"/>。
   </para>
  </note>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of the cursor to be created.
     </para>
____________________________________________________________________________-->
     <para>
      要创建的游标的名称。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>BINARY</literal></term>
____________________________________________________________________________-->
    <term><literal>BINARY</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Causes the cursor to return data in binary rather than in text format.
     </para>
____________________________________________________________________________-->
     <para>
      让游标返回二进制数据而不是返回文本格式数据。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>INSENSITIVE</literal></term>
____________________________________________________________________________-->
    <term><literal>INSENSITIVE</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Indicates that data retrieved from the cursor should be
      unaffected by updates to the table(s) underlying the cursor that occur
      after the cursor is created.  In <productname>PostgreSQL</productname>,
      this is the default behavior; so this key word has no
      effect and is only accepted for compatibility with the SQL standard.
     </para>
____________________________________________________________________________-->
     <para>
      指示从游标中检索数据的过程不受游标创建之后在其底层表上发生的更新的
      影响。在<productname>PostgreSQL</productname>中，这是默认的
      行为。因此这个关键词没有实际效果，仅仅被用于兼容 SQL 标准。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>SCROLL</literal></term>
____________________________________________________________________________-->
    <term><literal>SCROLL</literal></term>
<!--==========================orignal english content==========================
    <term><literal>NO SCROLL</literal></term>
____________________________________________________________________________-->
    <term><literal>NO SCROLL</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para><literal>SCROLL</literal> specifies that the cursor can be used
      to retrieve rows in a nonsequential fashion (e.g.,
      backward). Depending upon the complexity of the query's
      execution plan, specifying <literal>SCROLL</literal> might impose
      a performance penalty on the query's execution time.
      <literal>NO SCROLL</literal> specifies that the cursor cannot be
      used to retrieve rows in a nonsequential fashion.  The default is to
      allow scrolling in some cases; this is not the same as specifying
      <literal>SCROLL</literal>. See <xref linkend="sql-declare-notes"
      endterm="sql-declare-notes-title"> for details.
     </para>
____________________________________________________________________________-->
     <para><literal>SCROLL</literal>指定游标可以用非顺序（例如，反向）
     的方式从中检索行。根据查询的执行计划的复杂度，指定
     <literal>SCROLL</literal>可能导致查询执行时间上的性能损失。
      <literal>NO SCROLL</literal>指定游标不能以非顺序的方式从中检索
      行。默认是允许在某些情况下滚动，但这和指定
      <literal>SCROLL</literal>不完全相同。详情请见
      <xref linkend="sql-declare-notes"
      endterm="sql-declare-notes-title"/>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>WITH HOLD</literal></term>
____________________________________________________________________________-->
    <term><literal>WITH HOLD</literal></term>
<!--==========================orignal english content==========================
    <term><literal>WITHOUT HOLD</literal></term>
____________________________________________________________________________-->
    <term><literal>WITHOUT HOLD</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para><literal>WITH HOLD</literal> specifies that the cursor can
      continue to be used after the transaction that created it
      successfully commits.  <literal>WITHOUT HOLD</literal> specifies
      that the cursor cannot be used outside of the transaction that
      created it. If neither <literal>WITHOUT HOLD</literal> nor
      <literal>WITH HOLD</literal> is specified, <literal>WITHOUT
      HOLD</literal> is the default.
     </para>
____________________________________________________________________________-->
     <para><literal>WITH HOLD</literal>指定该游标在创建它的事务提交
     之后还能被继续使用。<literal>WITHOUT HOLD</literal>指定该游标
     不能在创建它的事务之外使用。如果两者都没有指定，则默认为
     <literal>WITHOUT HOLD</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">query</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">query</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A <xref linkend="sql-select"> or
      <xref linkend="sql-values"> command
      which will provide the rows to be returned by the cursor.
     </para>
____________________________________________________________________________-->
     <para>
      用于提供该游标返回的行的<xref linkend="sql-select"/>或者
      <xref linkend="sql-values"/>命令。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

<!--==========================orignal english content==========================
  <para>
   The key words <literal>BINARY</literal>,
   <literal>INSENSITIVE</literal>, and <literal>SCROLL</literal> can
   appear in any order.
  </para>
____________________________________________________________________________-->
  <para>
   关键词<literal>BINARY</literal>、
   <literal>INSENSITIVE</literal>和<literal>SCROLL</literal>
   可以以任意顺序出现。
  </para>
 </refsect1>

 <refsect1 id="sql-declare-notes">
<!--==========================orignal english content==========================
  <title id="sql-declare-notes-title">Notes</title>
____________________________________________________________________________-->
  <title id="sql-declare-notes-title">注解</title>

<!--==========================orignal english content==========================
  <para>
   Normal cursors return data in text format, the same as a
   <command>SELECT</> would produce.  The <literal>BINARY</> option
   specifies that the cursor should return data in binary format.
   This reduces conversion effort for both the server and client,
   at the cost of more programmer effort to deal with platform-dependent
   binary data formats.
   As an example, if a query returns a value of one from an integer column,
   you would get a string of <literal>1</> with a default cursor,
   whereas with a binary cursor you would get
   a 4-byte field containing the internal representation of the value
   (in big-endian byte order).
  </para>
____________________________________________________________________________-->
  <para>
   普通游标以文本格式返回数据，这和<command>SELECT</command>产生的数据一样。
   <literal>BINARY</literal>选项指定游标应该以二进制格式返回数据。这减少了服务
   器和客户端的转换负担，但程序员需要付出更多工作来处理与平台相关的二进制
   数据格式。例如，如果一个查询从一个整数列中返回一个值一，用一个默认游标
   将得到一个字符串<literal>1</literal>，而使用一个二进制游标将得到该值的四字节
   内部表示（big-endian 大端字节顺序）。
  </para>

<!--==========================orignal english content==========================
  <para>
   Binary cursors should be used carefully.  Many applications,
   including <application>psql</application>, are not prepared to
   handle binary cursors and expect data to come back in the text
   format.
  </para>
____________________________________________________________________________-->
  <para>
   使用二进制游标时应该小心。很多应用（包括
   <application>psql</application>）还没有准备好处理二进制游标，
   它们仍然期待数据以文本格式到来。
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    When the client application uses the <quote>extended query</> protocol
    to issue a <command>FETCH</> command, the Bind protocol message
    specifies whether data is to be retrieved in text or binary format.
    This choice overrides the way that the cursor is defined.  The concept
    of a binary cursor as such is thus obsolete when using extended query
    protocol &mdash; any cursor can be treated as either text or binary.
   </para>
____________________________________________________________________________-->
   <para>
    当客户端应用使用<quote>扩展查询</quote>协议发出一个
    <command>FETCH</command>命令，绑定协议消息会指定使用文本还是
    二进制格式检索数据。这种选择会覆盖定义游标时指定的方式。因此
    在使用扩展查询协议时，这样一个二进制游标的概念实际是被废弃的
    &mdash; 任何游标都可以被视作文本或者二进制。
   </para>
  </note>

<!--==========================orignal english content==========================
   <para>
    Unless <literal>WITH HOLD</literal> is specified, the cursor
    created by this command can only be used within the current
    transaction.  Thus, <command>DECLARE</> without <literal>WITH
    HOLD</literal> is useless outside a transaction block: the cursor would
    survive only to the completion of the statement.  Therefore
    <productname>PostgreSQL</productname> reports an error if such a
    command is used outside a transaction block.
    Use
    <xref linkend="sql-begin"> and
    <xref linkend="sql-commit">
    (or <xref linkend="sql-rollback">)
    to define a transaction block.
   </para>
____________________________________________________________________________-->
   <para>
    除非指定了<literal>WITH HOLD</literal>，这个命令创建的游标
    只能在当前事务中使用。因此，没有<literal>WITH HOLD</literal>
    的<command>DECLARE</command>在事务块外是没有用的：游标只会生存
    到该语句结束。因此如果这种命令在事务块之外被使用，
    <productname>PostgreSQL</productname>会报告一个错误。
    定义事务块需要使用<xref linkend="sql-begin"/>和
    <xref linkend="sql-commit"/>（或者<xref linkend="sql-rollback"/>）。
   </para>

<!--==========================orignal english content==========================
   <para>
    If <literal>WITH HOLD</literal> is specified and the transaction
    that created the cursor successfully commits, the cursor can
    continue to be accessed by subsequent transactions in the same
    session.  (But if the creating transaction is aborted, the cursor
    is removed.)  A cursor created with <literal>WITH HOLD</literal>
    is closed when an explicit <command>CLOSE</command> command is
    issued on it, or the session ends.  In the current implementation,
    the rows represented by a held cursor are copied into a temporary
    file or memory area so that they remain available for subsequent
    transactions.
   </para>
____________________________________________________________________________-->
   <para>
    如果指定了<literal>WITH HOLD</literal>并且创建游标的事务
    成功提交，在同一个会话中的后续事务中还能够继续访问该游标（
    但是如果创建事务被中止，游标会被移除）。一个用
    <literal>WITH HOLD</literal>创建的游标可以用一个显式的
    <command>CLOSE</command>命令关闭，或者会话结束时它
    也会被关闭。在当前的实现中，由一个被保持游标表示的行会被复
    制到一个临时文件或者内存区域中，这样它们才会在后续事务中保
    持可用。
   </para>

<!--==========================orignal english content==========================
   <para>
    <literal>WITH HOLD</literal> may not be specified when the query
    includes <literal>FOR UPDATE</> or <literal>FOR SHARE</>.
   </para>
____________________________________________________________________________-->
   <para>
    当查询包括<literal>FOR UPDATE</literal>或<literal>FOR SHARE</literal>时，
    不能指定<literal>WITH HOLD</literal>。
   </para>

<!--==========================orignal english content==========================
   <para>
    The <literal>SCROLL</> option should be specified when defining a
    cursor that will be used to fetch backwards.  This is required by
    the SQL standard.  However, for compatibility with earlier
    versions, <productname>PostgreSQL</productname> will allow
    backward fetches without <literal>SCROLL</>, if the cursor's query
    plan is simple enough that no extra overhead is needed to support
    it. However, application developers are advised not to rely on
    using backward fetches from a cursor that has not been created
    with <literal>SCROLL</literal>.  If <literal>NO SCROLL</> is
    specified, then backward fetches are disallowed in any case.
   </para>
____________________________________________________________________________-->
   <para>
    在定义一个将被反向取元组的游标时，应该指定<literal>SCROLL</literal>
    选项。这是 SQL 标准所要求的。不过，为了和早期版本兼容，
    如果游标的查询计划足够简单到支持它不需要额外的开销，
    <productname>PostgreSQL</productname>会允许在没有
    <literal>SCROLL</literal>的情况下反向取元组。不过，建议应用开发者
    不要依赖于从没有用<literal>SCROLL</literal>创建的游标中反向取
    元组。如果指定了<literal>NO SCROLL</literal>，那么任何情况下都不
    允许反向取元组。
   </para>

<!--==========================orignal english content==========================
   <para>
    Backward fetches are also disallowed when the query
    includes <literal>FOR UPDATE</> or <literal>FOR SHARE</>; therefore
    <literal>SCROLL</literal> may not be specified in this case.
   </para>
____________________________________________________________________________-->
   <para>
    当查询包括<literal>FOR UPDATE</literal>或<literal>FOR SHARE</literal>时，
    也不允许反向取元组。因此在这种情况下不能指定
    <literal>SCROLL</literal>。
   </para>

   <caution>
<!--==========================orignal english content==========================
    <para>
     Scrollable and <literal>WITH HOLD</literal> cursors may give unexpected
     results if they invoke any volatile functions (see <xref
     linkend="xfunc-volatility">).  When a previously fetched row is
     re-fetched, the functions might be re-executed, perhaps leading to
     results different from the first time.  One workaround for such cases
     is to declare the cursor <literal>WITH HOLD</literal> and commit the
     transaction before reading any rows from it.  This will force the
     entire output of the cursor to be materialized in temporary storage,
     so that volatile functions are executed exactly once for each row.
    </para>
____________________________________________________________________________-->
    <para>
     如果可滚动和<literal>WITH HOLD</literal>游标调用了任何不稳定的
     函数（见<xref linkend="xfunc-volatility"/>），它们可能给出预期之外
     的结果。当重新取得一个之前取得过的行时，那些函数会被重新执行，这
     可能导致得到与第一次不同的结果。对这类情况的一种变通方法是，声明
     游标为<literal>WITH HOLD</literal>并且在从其中读取任何行之前提交
     事务。这将强制该游标的整个输出被物化在临时存储中，这样针对每一行
     只会执行一次不稳定函数。
    </para>
   </caution>

<!--==========================orignal english content==========================
   <para>
    If the cursor's query includes <literal>FOR UPDATE</> or <literal>FOR
    SHARE</>, then returned rows are locked at the time they are first
    fetched, in the same way as for a regular
    <xref linkend="sql-select"> command with
    these options.
    In addition, the returned rows will be the most up-to-date versions;
    therefore these options provide the equivalent of what the SQL standard
    calls a <quote>sensitive cursor</>.  (Specifying <literal>INSENSITIVE</>
    together with <literal>FOR UPDATE</> or <literal>FOR SHARE</> is an error.)
   </para>
____________________________________________________________________________-->
   <para>
    如果游标的查询包括<literal>FOR UPDATE</literal>或者<literal>FOR
    SHARE</literal>，那么被返回的行会在它们第一次被取得时被锁定，这和带有
    这些选项的常规<xref linkend="sql-select"/>命令一样。此外，被返回的
    行将是最新的版本，因此这些选项提供了被 SQL 标准称为
    <quote>敏感游标</quote>的等效体（把<literal>INSENSITIVE</literal>与
    <literal>FOR UPDATE</literal>或者<literal>FOR SHARE</literal>一起指定是错误）。
   </para>

   <caution>
<!--==========================orignal english content==========================
    <para>
     It is generally recommended to use <literal>FOR UPDATE</> if the cursor
     is intended to be used with <command>UPDATE ... WHERE CURRENT OF</> or
     <command>DELETE ... WHERE CURRENT OF</>.  Using <literal>FOR UPDATE</>
     prevents other sessions from changing the rows between the time they are
     fetched and the time they are updated.  Without <literal>FOR UPDATE</>,
     a subsequent <literal>WHERE CURRENT OF</> command will have no effect if
     the row was changed since the cursor was created.
    </para>
____________________________________________________________________________-->
    <para>
     如果游标要和<command>UPDATE ... WHERE CURRENT OF</command>或者
     <command>DELETE ... WHERE CURRENT OF</command>一起使用，通常推荐
     使用<literal>FOR UPDATE</literal>。使用<literal>FOR UPDATE</literal>可以
     阻止其他会话在行被取得和被更新之间修改行。如果没有
     <literal>FOR UPDATE</literal>，当行在游标创建后被更改后，一个后续的
     <literal>WHERE CURRENT OF</literal>命令将不会产生效果。
    </para>

<!--==========================orignal english content==========================
    <para>
     Another reason to use <literal>FOR UPDATE</> is that without it, a
     subsequent <literal>WHERE CURRENT OF</> might fail if the cursor query
     does not meet the SQL standard's rules for being <quote>simply
     updatable</> (in particular, the cursor must reference just one table
     and not use grouping or <literal>ORDER BY</>).  Cursors
     that are not simply updatable might work, or might not, depending on plan
     choice details; so in the worst case, an application might work in testing
     and then fail in production.
    </para>
____________________________________________________________________________-->
    <para>
     另一个使用<literal>FOR UPDATE</literal>的原因是，如果没有它，当游标查询不符合
     SQL 标准的<quote>简单可更新</quote>规则时，后续的
     <literal>WHERE CURRENT OF</literal>可能会失败（特别地，该游标必须只引用一个
     表并且没有使用分组或者<literal>ORDER BY</literal>）。不是简单可更新的游标可能
     成功也可能不成功，这取决于计划选择的细节。因此在最坏的情况下，应用可能会
     在测试时成功但是在生产中失败。
    </para>

<!--==========================orignal english content==========================
    <para>
     The main reason not to use <literal>FOR UPDATE</> with <literal>WHERE
     CURRENT OF</> is if you need the cursor to be scrollable, or to be
     insensitive to the subsequent updates (that is, continue to show the old
     data).  If this is a requirement, pay close heed to the caveats shown
     above.
    </para>
____________________________________________________________________________-->
    <para>
     不把<literal>FOR UPDATE</literal>和<literal>WHERE CURRENT OF</literal>一起用的
     主要原因是，需要游标时可滚动的或者对于后续更新不敏感（也就是说，继续显示
     旧的数据）。如果这是你的需求，应密切关注安上述警示。
    </para>
   </caution>

<!--==========================orignal english content==========================
   <para>
    The SQL standard only makes provisions for cursors in embedded
    <acronym>SQL</acronym>.  The <productname>PostgreSQL</productname>
    server does not implement an <command>OPEN</command> statement for
    cursors; a cursor is considered to be open when it is declared.
    However, <application>ECPG</application>, the embedded SQL
    preprocessor for <productname>PostgreSQL</productname>, supports
    the standard SQL cursor conventions, including those involving
    <command>DECLARE</command> and <command>OPEN</command> statements.
   </para>
____________________________________________________________________________-->
   <para>
    SQL 标准只对嵌入式<acronym>SQL</acronym>中的游标做出了规定。
    <productname>PostgreSQL</productname>服务器没有为游标实现
    <command>OPEN</command>语句。当游标被声明时就被认为已经
    被打开。不过，<application>ECPG</application>（
    <productname>PostgreSQL</productname>的嵌入式 SQL 预处理器）
    支持标准 SQL 游标习惯，包括那些<command>DECLARE</command>
    和<command>OPEN</command>语句。
   </para>

<!--==========================orignal english content==========================
   <para>
    You can see all available cursors by querying the <link
    linkend="view-pg-cursors"><structname>pg_cursors</structname></link>
    system view.
   </para>
____________________________________________________________________________-->
   <para>
    你可以通过查询<link
    linkend="view-pg-cursors"><structname>pg_cursors</structname></link>
    系统视图可以看到所有可用的游标。
   </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   To declare a cursor:
<programlisting>
DECLARE liahona CURSOR FOR SELECT * FROM films;
</programlisting>
   See <xref linkend="sql-fetch"> for more
   examples of cursor usage.
  </para>
____________________________________________________________________________-->
  <para>
   声明一个游标：
<programlisting>
DECLARE liahona CURSOR FOR SELECT * FROM films;
</programlisting>
   更多游标的例子请见<xref linkend="sql-fetch"/>。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   The SQL standard says that it is implementation-dependent whether cursors
   are sensitive to concurrent updates of the underlying data by default.  In
   <productname>PostgreSQL</productname>, cursors are insensitive by default,
   and can be made sensitive by specifying <literal>FOR UPDATE</>.  Other
   products may work differently.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 标准认为游标是否默认对底层数据的并发更新敏感是与实现相关的。在
   <productname>PostgreSQL</productname>中，默认游标对此是不敏
   感的，并且可以通过指定<literal>FOR UPDATE</literal>让它变得对此敏感。其他
   产品的行为可能有所不同。
  </para>

<!--==========================orignal english content==========================
  <para>
   The SQL standard allows cursors only in embedded
   <acronym>SQL</acronym> and in modules. <productname>PostgreSQL</>
   permits cursors to be used interactively.
  </para>
____________________________________________________________________________-->
  <para>
   SQL 标准只允许在嵌入式<acronym>SQL</acronym>和模块中使用游标。
   <productname>PostgreSQL</productname>允许以交互的方式使用游标。
  </para>

<!--==========================orignal english content==========================
  <para>
   Binary cursors are a <productname>PostgreSQL</productname>
   extension.
  </para>
____________________________________________________________________________-->
  <para>
   二进制游标是一种<productname>PostgreSQL</productname>
   扩展。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-close"/></member>
   <member><xref linkend="sql-fetch"/></member>
   <member><xref linkend="sql-move"/></member>
  </simplelist>
 </refsect1>
</refentry>

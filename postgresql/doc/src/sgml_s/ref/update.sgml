<!--
doc/src/sgml/ref/update.sgml
PostgreSQL documentation
-->

<refentry id="sql-update">
<!--==========================orignal english content==========================
 <indexterm zone="sql-update">
  <primary>UPDATE</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-update">
  <primary>UPDATE</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>UPDATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>UPDATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>UPDATE</refname>
  <refpurpose>update rows of a table</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>UPDATE</refname>
  <refpurpose>更新一个表的行</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
UPDATE [ ONLY ] <replaceable class="parameter">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    SET { <replaceable class="parameter">column_name</replaceable> = { <replaceable class="parameter">expression</replaceable> | DEFAULT } |
          ( <replaceable class="parameter">column_name</replaceable> [, ...] ) = [ ROW ] ( { <replaceable class="parameter">expression</replaceable> | DEFAULT } [, ...] ) |
          ( <replaceable class="parameter">column_name</replaceable> [, ...] ) = ( <replaceable class="parameter">sub-SELECT</replaceable> )
        } [, ...]
    [ FROM <replaceable class="parameter">from_list</replaceable> ]
    [ WHERE <replaceable class="parameter">condition</replaceable> | WHERE CURRENT OF <replaceable class="parameter">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
UPDATE [ ONLY ] <replaceable class="parameter">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    SET { <replaceable class="parameter">column_name</replaceable> = { <replaceable class="parameter">expression</replaceable> | DEFAULT } |
          ( <replaceable class="parameter">column_name</replaceable> [, ...] ) = [ ROW ] ( { <replaceable class="parameter">expression</replaceable> | DEFAULT } [, ...] ) |
          ( <replaceable class="parameter">column_name</replaceable> [, ...] ) = ( <replaceable class="parameter">sub-SELECT</replaceable> )
        } [, ...]
    [ FROM <replaceable class="parameter">from_list</replaceable> ]
    [ WHERE <replaceable class="parameter">condition</replaceable> | WHERE CURRENT OF <replaceable class="parameter">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>UPDATE</command> changes the values of the specified
   columns in all rows that satisfy the condition. Only the columns to
   be modified need be mentioned in the <literal>SET</literal> clause;
   columns not explicitly modified retain their previous values.
  </para>
____________________________________________________________________________-->
  <para>
   <command>UPDATE</command>更改满足条件的所有行中指定列
   的值。只有要被修改的列需要在<literal>SET</literal>子句中提及，
   没有被显式修改的列保持它们之前的值。
  </para>

<!--==========================orignal english content==========================
  <para>
   There are two ways to modify a table using information contained in
   other tables in the database: using sub-selects, or specifying
   additional tables in the <literal>FROM</literal> clause. Which
   technique is more appropriate depends on the specific
   circumstances.
  </para>
____________________________________________________________________________-->
  <para>
   有两种方法使用包含在数据库其他表中的信息来修改一个表：使用子选择
   或者在<literal>FROM</literal>子句中指定额外的表。这种技术只适合
   特定的环境。
  </para>

<!--==========================orignal english content==========================
  <para>
   The optional <literal>RETURNING</literal> clause causes <command>UPDATE</command>
   to compute and return value(s) based on each row actually updated.
   Any expression using the table's columns, and/or columns of other
   tables mentioned in <literal>FROM</literal>, can be computed.
   The new (post-update) values of the table's columns are used.
   The syntax of the <literal>RETURNING</literal> list is identical to that of the
   output list of <command>SELECT</command>.
  </para>
____________________________________________________________________________-->
  <para>
   可选的<literal>RETURNING</literal>子句导致<command>UPDATE</command>
   基于实际被更新的每一行计算并且返回值。任何使用该表的列以及
   <literal>FROM</literal>中提到的其他表的列的表达式都能被计算。
   计算时会使用该表的列的新（更新后）值。<literal>RETURNING</literal>
   列表的语法和<command>SELECT</command>的输出列表相同。
  </para>

<!--==========================orignal english content==========================
  <para>
   You must have the <literal>UPDATE</literal> privilege on the table,
   or at least on the column(s) that are listed to be updated.
   You must also have the <literal>SELECT</literal>
   privilege on any column whose values are read in the
   <replaceable class="parameter">expressions</replaceable> or
   <replaceable class="parameter">condition</replaceable>.
  </para>
____________________________________________________________________________-->
  <para>
   你必须拥有该表上的<literal>UPDATE</literal>特权，或者至少拥有
   要被更新的列上的该特权。如果任何一列的值需要被
   <replaceable class="parameter">expressions</replaceable>或者
   <replaceable class="parameter">condition</replaceable>读取，
   你还必须拥有该列上的<literal>SELECT</literal>特权。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">with_query</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The <literal>WITH</literal> clause allows you to specify one or more
      subqueries that can be referenced by name in the <command>UPDATE</command>
      query. See <xref linkend="queries-with"/> and <xref linkend="sql-select"/>
      for details.
     </para>
____________________________________________________________________________-->
     <para>
      <literal>WITH</literal>子句允许你指定一个或者更多个在
      <command>UPDATE</command>中可用其名称引用的子查询。详见
      <xref linkend="queries-with"/>和<xref linkend="sql-select"/>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">table_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name (optionally schema-qualified) of the table to update.
      If <literal>ONLY</literal> is specified before the table name, matching rows
      are updated in the named table only.  If <literal>ONLY</literal> is not
      specified, matching rows are also updated in any tables inheriting from
      the named table.  Optionally, <literal>*</literal> can be specified after the
      table name to explicitly indicate that descendant tables are included.
     </para>
____________________________________________________________________________-->
     <para>
      要更新的表的名称（可以是模式限定的）。如果在表名前指定了
      <literal>ONLY</literal>，只会更新所提及表中的匹配行。如果没有指定
      <literal>ONLY</literal>，任何从所提及表继承得到的表中的匹配行也会
      被更新。可选地，在表名之后指定<literal>*</literal>可以显式地指示要
      把后代表也包括在内。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">alias</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A substitute name for the target table. When an alias is
      provided, it completely hides the actual name of the table.  For
      example, given <literal>UPDATE foo AS f</literal>, the remainder of the
      <command>UPDATE</command> statement must refer to this table as
      <literal>f</literal> not <literal>foo</literal>.
     </para>
____________________________________________________________________________-->
     <para>
      目标表的一个替代名称。在提供了一个别名时，它会完全隐藏表的真实
      名称。例如，给定<literal>UPDATE foo AS f</literal>，
      <command>UPDATE</command>语句的剩余部分必须用
      <literal>f</literal>而不是<literal>foo</literal>来引用该表。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">column_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">column_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of a column in the table named by <replaceable
      class="parameter">table_name</replaceable>.
      The column name can be qualified with a subfield name or array
      subscript, if needed.  Do not include the table's name in the
      specification of a target column &mdash; for example,
      <literal>UPDATE table_name SET table_name.col = 1</literal> is invalid.
     </para>
____________________________________________________________________________-->
     <para>
      <replaceable class="parameter">table_name</replaceable>
      所指定的表的一列的名称。如果需要，该列名可以用一个子域名称或者
      数组下标限定。不要在目标列的说明中包括表的名称 &mdash; 例如
      <literal>UPDATE table_name SET table_name.col = 1</literal>是非法的。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">expression</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">expression</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      An expression to assign to the column.  The expression can use the
      old values of this and other columns in the table.
     </para>
____________________________________________________________________________-->
     <para>
      要被赋值给该列的一个表达式。该表达式可以使用该表中这一列或者
      其他列的旧值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><literal>DEFAULT</literal></term>
____________________________________________________________________________-->
    <term><literal>DEFAULT</literal></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Set the column to its default value (which will be NULL if no
      specific default expression has been assigned to it).
     </para>
____________________________________________________________________________-->
     <para>
      将该列设置为它的默认值（如果没有为它指定默认值表达式，默认值
      将会为 NULL）。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">sub-SELECT</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">sub-SELECT</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A <literal>SELECT</literal> sub-query that produces as many output columns
      as are listed in the parenthesized column list preceding it.  The
      sub-query must yield no more than one row when executed.  If it
      yields one row, its column values are assigned to the target columns;
      if it yields no rows, NULL values are assigned to the target columns.
      The sub-query can refer to old values of the current row of the table
      being updated.
     </para>
____________________________________________________________________________-->
     <para>
      一个<literal>SELECT</literal>子查询，它产生和在它之前的圆括号中列列表中
      一样多的输出列。被执行时，该子查询必须得到不超过一行。如果它得到
      一行，其列值会被赋予给目标列。如果它得不到行，NULL 值将被赋予给
      目标列。该子查询可以引用被更新表中当前行的旧值。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">from_list</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">from_list</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A list of table expressions, allowing columns from other tables
      to appear in the <literal>WHERE</literal> condition and the update
      expressions. This is similar to the list of tables that can be
      specified in the <xref linkend="sql-from"
      endterm="sql-from-title"/> of a <command>SELECT</command>
      statement.  Note that the target table must not appear in the
      <replaceable>from_list</replaceable>, unless you intend a self-join (in which
      case it must appear with an alias in the <replaceable>from_list</replaceable>).
     </para>
____________________________________________________________________________-->
     <para>
      表表达式的列表，允许来自其他表的列出现在<literal>WHERE</literal>
      条件和更新表达式中。这类似于可以在
      <command>SELECT</command>语句的<xref linkend="sql-from"
      endterm="sql-from-title"/>中指定的表列表。注意目标表不能出现在
      <replaceable>from_list</replaceable>中，除非你想做自连接（这种情况下它必须
      以别名出现在<replaceable>from_list</replaceable>中）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">condition</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      An expression that returns a value of type <type>boolean</type>.
      Only rows for which this expression returns <literal>true</literal>
      will be updated.
     </para>
____________________________________________________________________________-->
     <para>
      一个返回<type>boolean</type>类型值的表达式。让这个
      表达式返回<literal>true</literal>的行将会被更新。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">cursor_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">cursor_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The name of the cursor to use in a <literal>WHERE CURRENT OF</literal>
      condition.  The row to be updated is the one most recently fetched
      from this cursor.  The cursor must be a non-grouping
      query on the <command>UPDATE</command>'s target table.
      Note that <literal>WHERE CURRENT OF</literal> cannot be
      specified together with a Boolean condition.  See
      <xref linkend="sql-declare"/>
      for more information about using cursors with
      <literal>WHERE CURRENT OF</literal>.
     </para>
____________________________________________________________________________-->
     <para>
      要在<literal>WHERE CURRENT OF</literal>条件中使用的游标名。
      要被更新的是从这个游标中最近取出的行。该游标必须是一个
      在<command>UPDATE</command>目标表上的非分组查询。注意
      <literal>WHERE CURRENT OF</literal>不能和一个布尔条件一起
      指定。有关对游标使用<literal>WHERE CURRENT OF</literal>的
      更多信息请见<xref linkend="sql-declare"/>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">output_expression</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">output_expression</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      An expression to be computed and returned by the <command>UPDATE</command>
      command after each row is updated.  The expression can use any
      column names of the table named by <replaceable class="parameter">table_name</replaceable>
      or table(s) listed in <literal>FROM</literal>.
      Write <literal>*</literal> to return all columns.
     </para>
____________________________________________________________________________-->
     <para>
      在每一行被更新后，要被<command>UPDATE</command>命令计算并且返回
      的表达式。该表达式可以使用
      <replaceable class="parameter">table_name</replaceable>指定
      的表或者<literal>FROM</literal>列出的表中的任何列名。写<literal>*</literal>
      可以返回所有列。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">output_name</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">output_name</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A name to use for a returned column.
     </para>
____________________________________________________________________________-->
     <para>
      用于一个被返回列的名称。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Outputs</title>
____________________________________________________________________________-->
  <title>输出</title>

<!--==========================orignal english content==========================
  <para>
   On successful completion, an <command>UPDATE</command> command returns a command
   tag of the form
<screen>
UPDATE <replaceable class="parameter">count</replaceable>
</screen>
   The <replaceable class="parameter">count</replaceable> is the number
   of rows updated, including matched rows whose values did not change.
   Note that the number may be less than the number of rows that matched
   the <replaceable class="parameter">condition</replaceable> when
   updates were suppressed by a <literal>BEFORE UPDATE</literal> trigger.  If
   <replaceable class="parameter">count</replaceable> is 0, no rows were
   updated by the query (this is not considered an error).
  </para>
____________________________________________________________________________-->
  <para>
   成功完成时，一个<command>UPDATE</command>命令返回形如
<screen>
UPDATE <replaceable class="parameter">count</replaceable>
</screen>
   的命令标签。
   <replaceable class="parameter">count</replaceable>是被更新的行数，
   包括值没有更改的匹配行。注意，当更新被一个<literal>BEFORE UPDATE</literal>
   触发器抑制时，这个数量可能比匹配
   <replaceable class="parameter">condition</replaceable>的行数少。如果
   <replaceable class="parameter">count</replaceable>为零，没有行被该查
   询更新（这不是一个错误）。
  </para>

<!--==========================orignal english content==========================
  <para>
   If the <command>UPDATE</command> command contains a <literal>RETURNING</literal>
   clause, the result will be similar to that of a <command>SELECT</command>
   statement containing the columns and values defined in the
   <literal>RETURNING</literal> list, computed over the row(s) updated by the
   command.
  </para>
____________________________________________________________________________-->
  <para>
   如果<command>UPDATE</command>命令包含一个<literal>RETURNING</literal>
   子句，其结果将类似于一个包含<literal>RETURNING</literal>列表中定义的
   列和值的<command>SELECT</command>语句（在被该命令更新的行上计算）
   的结果。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   When a <literal>FROM</literal> clause is present, what essentially happens
   is that the target table is joined to the tables mentioned in the
   <replaceable>from_list</replaceable>, and each output row of the join
   represents an update operation for the target table.  When using
   <literal>FROM</literal> you should ensure that the join
   produces at most one output row for each row to be modified.  In
   other words, a target row shouldn't join to more than one row from
   the other table(s).  If it does, then only one of the join rows
   will be used to update the target row, but which one will be used
   is not readily predictable.
  </para>
____________________________________________________________________________-->
  <para>
   当存在<literal>FROM</literal>子句时，实际发生的是：目标表被连接到
   <replaceable>from_list</replaceable>中的表，并且该连接的每一
   个输出行表示对目标表的一个更新操作。在使用<literal>FROM</literal>
   时，你应该确保该连接对每一个要修改的行产生至多一个输出行。换
   句话说，一个目标行不应该连接到来自其他表的多于一行上。如果发
   生这种情况，则只有一个连接行将被用于更新目标行，但是将使用哪
   一行是很难预测的。
  </para>

<!--==========================orignal english content==========================
  <para>
   Because of this indeterminacy, referencing other tables only within
   sub-selects is safer, though often harder to read and slower than
   using a join.
  </para>
____________________________________________________________________________-->
  <para>
   由于这种不确定性，只在一个子选择中引用其他表更安全，不过这种
   语句通常很难写并且也比使用连接慢。
  </para>

<!--==========================orignal english content==========================
  <para>
   In the case of a partitioned table, updating a row might cause it to no
   longer satisfy the partition constraint of the containing partition. In that
   case, if there is some other partition in the partition tree for which this
   row satisfies its partition constraint, then the row is moved to that
   partition. If there is no such partition, an error will occur.  Behind the
   scenes, the row movement is actually a <command>DELETE</command> and
   <command>INSERT</command> operation. However, there is a possibility that a
   concurrent <command>UPDATE</command> or <command>DELETE</command> on the
   same row may miss this row. For details see the section
   <xref linkend="ddl-partitioning-declarative-limitations"/>.
   Currently, rows cannot be moved from a partition that is a
   foreign table to some other partition, but they can be moved into a foreign
   table if the foreign data wrapper supports it.
  </para>
____________________________________________________________________________-->
  <para>
   在分区表的情况下，更新一行有可能导致它不再满足其所在分区的分区约束。此时，如果这个行满足分区树中某个其他分区的分区约束，那么这个行会被移动到那个分区。如果没有这样的分区，则会发生错误。在后台，行的移动实际上是一次<command>DELETE</command>操作和一次<command>INSERT</command>操作。不过，有可能同一行上的并发<command>UPDATE</command>或<command>DELETE</command>会错过这一行。详情请见<xref linkend="ddl-partitioning-declarative-limitations"/>小节。当前，行不能从外部表分区移动到其他分区，但是如果外部数据包装器支持，它们可以被移入到外部表。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   Change the word <literal>Drama</literal> to <literal>Dramatic</literal> in the
   column <structfield>kind</structfield> of the table <structname>films</structname>:

<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   把表<structname>films</structname>的列<structfield>kind</structfield>
   中的单词<literal>Drama</literal>改成<literal>Dramatic</literal>：

<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Adjust temperature entries and reset precipitation to its default
   value in one row of the table <structname>weather</structname>:

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   在表<structname>weather</structname>的一行中调整温度项并且
   把沉淀物重置为它的默认值：

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Perform the same operation and return the updated entries:

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_lo, temp_hi, prcp;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   执行相同的操作并且返回更新后的项：

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_lo, temp_hi, prcp;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Use the alternative column-list syntax to do the same update:
<programlisting>
UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   使用另一种列列表语法来做同样的更新：
<programlisting>
UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Increment the sales count of the salesperson who manages the
   account for Acme Corporation, using the <literal>FROM</literal>
   clause syntax:
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 FROM accounts
  WHERE accounts.name = 'Acme Corporation'
  AND employees.id = accounts.sales_person;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   为管理Acme Corporation账户的销售人员增加销售量，使用
   <literal>FROM</literal>子句语法：
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 FROM accounts
  WHERE accounts.name = 'Acme Corporation'
  AND employees.id = accounts.sales_person;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Perform the same operation, using a sub-select in the
   <literal>WHERE</literal> clause:
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 WHERE id =
  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   执行相同的操作，在
   <literal>WHERE</literal>子句中使用子选择：
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 WHERE id =
  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');
</programlisting>
  </para>
  
<!--==========================orignal english content==========================
  <para>
   Update contact names in an accounts table to match the currently assigned
   salesmen:
<programlisting>
UPDATE accounts SET (contact_first_name, contact_last_name) =
    (SELECT first_name, last_name FROM salesmen
     WHERE salesmen.id = accounts.sales_id);
</programlisting>
   A similar result could be accomplished with a join:
<programlisting>
UPDATE accounts SET contact_first_name = first_name,
                    contact_last_name = last_name
  FROM salesmen WHERE salesmen.id = accounts.sales_id;
</programlisting>
   However, the second query may give unexpected results
   if <structname>salesmen</structname>.<structfield>id</structfield> is not a unique key, whereas
   the first query is guaranteed to raise an error if there are multiple
   <structfield>id</structfield> matches.  Also, if there is no match for a particular
   <structname>accounts</structname>.<structfield>sales_id</structfield> entry, the first query
   will set the corresponding name fields to NULL, whereas the second query
   will not update that row at all.
  </para>
____________________________________________________________________________-->
  <para>
   更新 accounts 表中的联系人姓名以匹配当前被分配的销售员：
<programlisting>
UPDATE accounts SET (contact_first_name, contact_last_name) =
    (SELECT first_name, last_name FROM salesmen
     WHERE salesmen.id = accounts.sales_id);
</programlisting>
   可以用连接完成类似的结果：
<programlisting>
UPDATE accounts SET contact_first_name = first_name,
                    contact_last_name = last_name
  FROM salesmen WHERE salesmen.id = accounts.sales_id;
</programlisting>
   不过，如果<structname>salesmen</structname>.<structfield>id</structfield>不是一个唯一键，
   第二个查询可能会给出令人意外的结果，然而如果有多个<structfield>id</structfield>匹配，
   第一个查询保证会发生错误。还有，如果对于一个特定的
   <structname>accounts</structname>.<structfield>sales_id</structfield>项没有匹配，第一个查询将
   把相应的姓名域设置为 NULL，而第二个查询完全不会更新该行。
  </para>

<!--==========================orignal english content==========================
  <para>
   Update statistics in a summary table to match the current data:
<programlisting>
UPDATE summary s SET (sum_x, sum_y, avg_x, avg_y) =
    (SELECT sum(x), sum(y), avg(x), avg(y) FROM data d
     WHERE d.group_id = s.group_id);
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   更新一个统计表中的统计数据以匹配当前数据：
<programlisting>
UPDATE summary s SET (sum_x, sum_y, avg_x, avg_y) =
    (SELECT sum(x), sum(y), avg(x), avg(y) FROM data d
     WHERE d.group_id = s.group_id);
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Attempt to insert a new stock item along with the quantity of stock. If
   the item already exists, instead update the stock count of the existing
   item. To do this without failing the entire transaction, use savepoints:
<programlisting>
BEGIN;
-&minus; other operations
SAVEPOINT sp1;
INSERT INTO wines VALUES('Chateau Lafite 2003', '24');
-&minus; Assume the above fails because of a unique key violation,
-&minus; so now we issue these commands:
ROLLBACK TO sp1;
UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003';
-&minus; continue with other operations, and eventually
COMMIT;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   尝试插入一个新库存项及其库存量。如果该项已经存在，则转而更新
   已有项的库存量。要这样做并且不让整个事务失败，可以使用保存点：
<programlisting>
BEGIN;
-- 其他操作
SAVEPOINT sp1;
INSERT INTO wines VALUES('Chateau Lafite 2003', '24');
-- 假定上述语句由于未被唯一键失败，
-- 那么现在我们发出这些命令：
ROLLBACK TO sp1;
UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003';
-- 继续其他操作，并且最终
COMMIT;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Change the <structfield>kind</structfield> column of the table
   <structname>films</structname> in the row on which the cursor
   <literal>c_films</literal> is currently positioned:
<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;
</programlisting></para>
____________________________________________________________________________-->
  <para>
   更改表<structname>films</structname>中由游标<literal>c_films</literal>
   定位的行的<structfield>kind</structfield>列：
<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;
</programlisting></para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   This command conforms to the <acronym>SQL</acronym> standard, except
   that the <literal>FROM</literal> and <literal>RETURNING</literal> clauses
   are <productname>PostgreSQL</productname> extensions, as is the ability
   to use <literal>WITH</literal> with <command>UPDATE</command>.
  </para>
____________________________________________________________________________-->
  <para>
   这个命令符合<acronym>SQL</acronym>标准，不过
   <literal>FROM</literal>和<literal>RETURNING</literal>子句是
   <productname>PostgreSQL</productname>扩展，把
   <literal>WITH</literal>用于<command>UPDATE</command>也是扩展。
  </para>

<!--==========================orignal english content==========================
  <para>
   Some other database systems offer a <literal>FROM</literal> option in which
   the target table is supposed to be listed again within <literal>FROM</literal>.
   That is not how <productname>PostgreSQL</productname> interprets
   <literal>FROM</literal>.  Be careful when porting applications that use this
   extension.
  </para>
____________________________________________________________________________-->
  <para>
   有些其他数据库系统提供了一个<literal>FROM</literal>选项，在其中在其中目标表
   可以在<literal>FROM</literal>中被再次列出。但
   <productname>PostgreSQL</productname>不是这样解释
   <literal>FROM</literal>的。在移植使用这种扩展的应用时要小心。
  </para>
  
<!--==========================orignal english content==========================
  <para>
   According to the standard, the source value for a parenthesized sub-list of
   target column names can be any row-valued expression yielding the correct
   number of columns.  <productname>PostgreSQL</productname> only allows the
   source value to be a <link linkend="sql-syntax-row-constructors">row
   constructor</link> or a sub-<literal>SELECT</literal>.  An individual column's
   updated value can be specified as <literal>DEFAULT</literal> in the
   row-constructor case, but not inside a sub-<literal>SELECT</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   根据标准，一个目标列名的圆括号子列表的来源值可以是任意得到正确列数的行值
   表达式。<productname>PostgreSQL</productname>只允许来源值是一个
   <link linkend="sql-syntax-row-constructors">行构造器</link>或者一个子-<literal>SELECT</literal>。一个列的
   被更新值可以在行构造器的情况中被指定为<literal>DEFAULT</literal>，但在
   子-<literal>SELECT</literal>的情况中不能这样做。
  </para>
 </refsect1>
</refentry>

<!--
doc/src/sgml/ref/create_language.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATELANGUAGE">
<!--==========================orignal english content==========================
 <indexterm zone="sql-createlanguage">
  <primary>CREATE LANGUAGE</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-createlanguage">
  <primary>CREATE LANGUAGE</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
  <refpurpose>define a new procedural language</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
  <refpurpose>定义一种新的过程语言</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
CREATE [ OR REPLACE ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
    HANDLER <replaceable class="parameter">call_handler</replaceable> [ INLINE <replaceable class="parameter">inline_handler</replaceable> ] [ VALIDATOR <replaceable>valfunction</replaceable> ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
CREATE [ OR REPLACE ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
    HANDLER <replaceable class="parameter">call_handler</replaceable> [ INLINE <replaceable class="parameter">inline_handler</replaceable> ] [ VALIDATOR <replaceable>valfunction</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createlanguage-description">
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE LANGUAGE</command> registers a new
   procedural language with a <productname>PostgreSQL</productname>
   database.  Subsequently, functions and trigger procedures can be
   defined in this new language.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE LANGUAGE</command>为一个
   <productname>PostgreSQL</productname>数据库注册一种新的
   过程语言。接着，可以用这种新语言定义函数和触发器过程。
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    As of <productname>PostgreSQL</productname> 9.1, most procedural
    languages have been made into <quote>extensions</>, and should
    therefore be installed with <xref linkend="sql-createextension">
    not <command>CREATE LANGUAGE</command>.  Direct use of
    <command>CREATE LANGUAGE</command> should now be confined to
    extension installation scripts.  If you have a <quote>bare</>
    language in your database, perhaps as a result of an upgrade,
    you can convert it to an extension using
    <literal>CREATE EXTENSION <replaceable>langname</> FROM
    unpackaged</literal>.
   </para>
____________________________________________________________________________-->
   <para>
    从<productname>PostgreSQL</productname> 9.1 开始，大多数
    过程语言已经被做成了<quote>扩展</quote>，并且应该用
    <xref linkend="sql-createextension"/>而不是
    <command>CREATE LANGUAGE</command>来安装。
    <command>CREATE LANGUAGE</command>的直接使用现在应该
    被限制在扩展安装脚本中。如果在数据库中有一种<quote>裸</quote>语言（
    可能是一次升级的结果），可以用
    <literal>CREATE EXTENSION <replaceable>langname</replaceable> FROM
    unpackaged</literal>把它转换成一个扩展。
   </para>
  </note>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE LANGUAGE</command> effectively associates the
   language name with handler function(s) that are responsible for executing
   functions written in the language.  Refer to <xref linkend="plhandler">
   for more information about language handlers.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE LANGUAGE</command>实际上把该语言名称与
   负责执行用该语言编写的函数的处理器函数关联在一起。有关语言处理器的
   更多信息可以参考<xref linkend="plhandler"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   There are two forms of the <command>CREATE LANGUAGE</command> command.
   In the first form, the user supplies just the name of the desired
   language, and the <productname>PostgreSQL</productname> server consults
   the <link linkend="catalog-pg-pltemplate"><structname>pg_pltemplate</structname></link>
   system catalog to determine the correct parameters.  In the second form,
   the user supplies the language parameters along with the language name.
   The second form can be used to create a language that is not defined in
   <structname>pg_pltemplate</>, but this approach is considered obsolescent.
  </para>
____________________________________________________________________________-->
  <para>
   有两种形式的<command>CREATE LANGUAGE</command>命令。在
   第一种形式中，用户只提供想要的语言的名称。
   <productname>PostgreSQL</productname>服务器会查询
   <link linkend="catalog-pg-pltemplate"><structname>pg_pltemplate</structname></link>系统目录来决定正确的参数。在第二种形式中，用户
   要提供语言参数和语言名称。第二种形式可以被用来创建一种没有定义在
   <structname>pg_pltemplate</structname>中的语言，但是这种方法被认为即将
   废弃。
  </para>

<!--==========================orignal english content==========================
  <para>
   When the server finds an entry in the <structname>pg_pltemplate</> catalog
   for the given language name, it will use the catalog data even if the
   command includes language parameters.  This behavior simplifies loading of
   old dump files, which are likely to contain out-of-date information
   about language support functions.
  </para>
____________________________________________________________________________-->
  <para>
   当服务器在<structname>pg_pltemplate</structname>目录中为给定的语言名称
   找到一个项时，即使命令中已经包括了语言参数，它也将使用目录中的
   数据。这种行为简化了旧转储文件的载入，旧转储文件很可能包含过时的
   信息。
  </para>

<!--==========================orignal english content==========================
  <para>
   Ordinarily, the user must have the
   <productname>PostgreSQL</productname> superuser privilege to
   register a new language.  However, the owner of a database can register
   a new language within that database if the language is listed in
   the <structname>pg_pltemplate</structname> catalog and is marked
   as allowed to be created by database owners (<structfield>tmpldbacreate</>
   is true).  The default is that trusted languages can be created
   by database owners, but this can be adjusted by superusers by modifying
   the contents of <structname>pg_pltemplate</structname>.
   The creator of a language becomes its owner and can later
   drop it, rename it, or assign it to a new owner.
  </para>
____________________________________________________________________________-->
  <para>
   通常，用户必须拥有
   <productname>PostgreSQL</productname>超级用户特权来注册
   一种新的语言。不过，如果该语言被列举在
   <structname>pg_pltemplate</structname>目录中并且被标记为允许
   由数据库拥有者创建（<structfield>tmpldbacreate</structfield>为真），则数据
   库的拥有者可以把新语言注册在数据库中。默认是可信的语言能够由数据
   库拥有者创建，但是超级用户可以通过修改
   <structname>pg_pltemplate</structname>的内容来调整这种行为。
   语言的创建者会成为它的拥有者，并且以后可以删除它、对它重命名或者
   把它赋予给一个新的拥有者。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE OR REPLACE LANGUAGE</command> will either create a
   new language, or replace an existing definition.  If the language
   already exists, its parameters are updated according to the values
   specified or taken from <structname>pg_pltemplate</structname>,
   but the language's ownership and permissions settings do not change,
   and any existing functions written in the language are assumed to still
   be valid.  In addition to the normal privilege requirements for creating
   a language, the user must be superuser or owner of the existing language.
   The <literal>REPLACE</> case is mainly meant to be used to
   ensure that the language exists.  If the language has a
   <structname>pg_pltemplate</structname> entry then <literal>REPLACE</>
   will not actually change anything about an existing definition, except in
   the unusual case where the <structname>pg_pltemplate</structname> entry
   has been modified since the language was created.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE OR REPLACE LANGUAGE</command>将创建
   或者替换一种现有的定义。如果该语言已经存在，其参数会被根据指定的
   值或者来自<structname>pg_pltemplate</structname>的值更新。但
   该语言的拥有关系和权限设置不会更改，并且任何已有的用该语言编写的
   函数仍然被假定有效。除了创建一种语言的普通特权需求，用户还必须是
   超级用户或者已有语言的拥有者。<literal>REPLACE</literal>情况主要被用来
   确保该语言存在。如果该语言有一个
   <structname>pg_pltemplate</structname>项，那么
   <literal>REPLACE</literal>将不会实际更改现有定义的任何东西，除非从该语
   言被创建以来<structname>pg_pltemplate</structname>已经被修改
   过（很少见的情况）。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-parameters">
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

   <variablelist>
    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>TRUSTED</literal></term>
____________________________________________________________________________-->
     <term><literal>TRUSTED</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para><literal>TRUSTED</literal> specifies that the language does
       not grant access to data that the user would not otherwise
       have.  If this key word is omitted
       when registering the language, only users with the
       <productname>PostgreSQL</productname> superuser privilege can
       use this language to create new functions.
      </para>
____________________________________________________________________________-->
      <para><literal>TRUSTED</literal>指定该语言不会授予用户不该具有的
      数据访问。如果在注册语言时这个关键词被省略，只有具有
       <productname>PostgreSQL</productname>超级用户特权的用户才能
       使用该语言创建新函数。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>PROCEDURAL</literal></term>
____________________________________________________________________________-->
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       This is a noise word.
      </para>
____________________________________________________________________________-->
      <para>
       这是一个噪声词。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable class="parameter">name</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the new procedural language.
       The name must be unique among the languages in the database.
      </para>
____________________________________________________________________________-->
      <para>
       新过程语言的名称。该名称必须在该数据库的语言中唯一。
      </para>

<!--==========================orignal english content==========================
      <para>
       For backward compatibility, the name can be enclosed by single
       quotes.
      </para>
____________________________________________________________________________-->
      <para>
       为了向后兼容，名称可以用单引号围绕。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>HANDLER</literal> <replaceable class="parameter">call_handler</replaceable></term>
____________________________________________________________________________-->
     <term><literal>HANDLER</literal> <replaceable class="parameter">call_handler</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para><replaceable class="parameter">call_handler</replaceable> is
       the name of a previously registered function that will be
       called to execute the procedural language's functions.  The call
       handler for a procedural language must be written in a compiled
       language such as C with version 1 call convention and
       registered with <productname>PostgreSQL</productname> as a
       function taking no arguments and returning the
       <type>language_handler</type> type, a placeholder type that is
       simply used to identify the function as a call handler.
      </para>
____________________________________________________________________________-->
      <para><replaceable class="parameter">call_handler</replaceable>
       是一个之前注册的函数的名称，它将被调用来执行该过程语言的函数。
       一种过程语言的调用处理器必须以一种编译型语言（如 C）编写并且
       具有版本 1 的调用约定，它必须在
       <productname>PostgreSQL</productname>内注册为一个没有
       参数并且返回<type>language_handler</type>类型的函数。
       <type>language_handler</type>是一种占位符类型， 它被用来
       标识该函数为一个调用处理器。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>INLINE</literal> <replaceable class="parameter">inline_handler</replaceable></term>
____________________________________________________________________________-->
     <term><literal>INLINE</literal> <replaceable class="parameter">inline_handler</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para><replaceable class="parameter">inline_handler</replaceable> is the
       name of a previously registered function that will be called
       to execute an anonymous code block
       (<xref linkend="sql-do"> command)
       in this language.
       If no <replaceable class="parameter">inline_handler</replaceable>
       function is specified, the language does not support anonymous code
       blocks.
       The handler function must take one argument of
       type <type>internal</type>, which will be the <command>DO</> command's
       internal representation, and it will typically return
       <type>void</>.  The return value of the handler is ignored.
      </para>
____________________________________________________________________________-->
      <para><replaceable class="parameter">inline_handler</replaceable>
       是一个之前注册的函数的名称，它将被调用来执行一个该语言的匿名代码块（
       <xref linkend="sql-do"/>命令）。如果没有指定
       <replaceable class="parameter">inline_handler</replaceable>函数，则
       该语言不支持匿名代码块。该处理器函数必须接受一个<type>internal</type>
       类型的参数，该参数将是<command>DO</command>命令的内部表示，而且它通常
       将返回<type>void</type>。该处理器的返回值会被忽略。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>VALIDATOR</literal> <replaceable class="parameter">valfunction</replaceable></term>
____________________________________________________________________________-->
     <term><literal>VALIDATOR</literal> <replaceable class="parameter">valfunction</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para><replaceable class="parameter">valfunction</replaceable> is the
       name of a previously registered function that will be called
       when a new function in the language is created, to validate the
       new function.
       If no
       validator function is specified, then a new function will not
       be checked when it is created.
       The validator function must take one argument of
       type <type>oid</type>, which will be the OID of the
       to-be-created function, and will typically return <type>void</>.
      </para>
____________________________________________________________________________-->
      <para><replaceable class="parameter">valfunction</replaceable> is the
       是一个之前注册的函数的名称，当一个该语言的新函数被创建时会调用该函数来
       验证新函数。如果没有指定验证器函数，那么一个新函数被创建时不会被检查。
       验证器函数必须接受一个<type>oid</type>类型的参数，它将是要被创建的
       函数的 OID，而且它通常将返回<type>void</type>。
      </para>

<!--==========================orignal english content==========================
      <para>
       A validator function would typically inspect the function body
       for syntactical correctness, but it can also look at other
       properties of the function, for example if the language cannot
       handle certain argument types.  To signal an error, the
       validator function should use the <function>ereport()</function>
       function.  The return value of the function is ignored.
      </para>
____________________________________________________________________________-->
      <para>
       一个验证器函数通常会检查函数体中的语法正确性，但是它也能查看函数的其他
       属性，例如该语言能否处理特定的参数类型。为了发出一个错误，验证器函数应该
       使用<function>ereport()</function>函数。验证器函数的返回值会被忽略。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

<!--==========================orignal english content==========================
  <para>
   The <literal>TRUSTED</> option and the support function name(s) are
   ignored if the server has an entry for the specified language
   name in <structname>pg_pltemplate</>.
  </para>
____________________________________________________________________________-->
  <para>
   如果指定的语言名称在<structname>pg_pltemplate</structname>中有一项，服务器会忽略
   <literal>TRUSTED</literal>选项和支持函数的名称。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-notes">
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   Use <xref linkend="sql-droplanguage"> to drop procedural languages.
  </para>
____________________________________________________________________________-->
  <para>
   使用<xref linkend="sql-droplanguage"/>删除过程语言。
  </para>

<!--==========================orignal english content==========================
  <para>
   The system catalog <classname>pg_language</classname> (see <xref
   linkend="catalog-pg-language">) records information about the
   currently installed languages.  Also, the <application>psql</application>
   command <command>\dL</command> lists the installed languages.
  </para>
____________________________________________________________________________-->
  <para>
   系统目录<classname>pg_language</classname>（见<xref
   linkend="catalog-pg-language"/>）记录着有关当前已安装的语言的信息。
   还有，<application>psql</application>命令<command>\dL</command>列出已安装的语言。
  </para>

<!--==========================orignal english content==========================
  <para>
   To create functions in a procedural language, a user must have the
   <literal>USAGE</literal> privilege for the language.  By default,
   <literal>USAGE</> is granted to <literal>PUBLIC</> (i.e., everyone)
   for trusted languages.  This can be revoked if desired.
  </para>
____________________________________________________________________________-->
  <para>
   要以一种过程语言创建函数，用户必须具有对于该语言的
   <literal>USAGE</literal>特权。默认情况下，对于可信语言，
   <literal>USAGE</literal>被授予给<literal>PUBLIC</literal>（即所有人）。
   如果需要可以将它收回。
  </para>

<!--==========================orignal english content==========================
  <para>
   Procedural languages are local to individual databases.
   However, a language can be installed into the <literal>template1</literal>
   database, which will cause it to be available automatically in
   all subsequently-created databases.
  </para>
____________________________________________________________________________-->
  <para>
   过程语言对于单个数据库来说是本地的。但是，一种语言可以被安装在
   <literal>template1</literal>数据库中，这会导致它在所有后续创建的
   数据库中自动变得可用。
  </para>

<!--==========================orignal english content==========================
  <para>
   The call handler function, the inline handler function (if any),
   and the validator function (if any)
   must already exist if the server does not have an entry for the language
   in <structname>pg_pltemplate</>.  But when there is an entry,
   the functions need not already exist;
   they will be automatically defined if not present in the database.
   (This might result in <command>CREATE LANGUAGE</> failing, if the
   shared library that implements the language is not available in
   the installation.)
  </para>
____________________________________________________________________________-->
  <para>
   如果对语言在服务器的<structname>pg_pltemplate</structname>中没有一项，
   调用处理器函数、内联处理器函数（如果有）以及验证器函数（如果有）
   必须已经存在。但是当有一个那样的项时，这些函数不必已经存在。如果
   它们在数据库中不存在，将自动定义它们（如果安装中实现该语言的共享
   库不可用可能会导致<command>CREATE LANGUAGE</command>失败）。
  </para>

<!--==========================orignal english content==========================
  <para>
   In <productname>PostgreSQL</productname> versions before 7.3, it was
   necessary to declare handler functions as returning the placeholder
   type <type>opaque</>, rather than <type>language_handler</>.
   To support loading
   of old dump files, <command>CREATE LANGUAGE</> will accept a function
   declared as returning <type>opaque</>, but it will issue a notice and
   change the function's declared return type to <type>language_handler</>.
  </para>
____________________________________________________________________________-->
  <para>
   在<productname>PostgreSQL</productname> 版本 7.3 之前，需要
   将处理器函数声明为返回占位符类型<type>opaque</type>而不是
   <type>language_handler</type>。为了支持载入旧的转储文件，
   <command>CREATE LANGUAGE</command>将接受被声明为返回
   <type>opaque</type>的函数，但是它将发出一个提示并且把该函数的声明
   返回类型改为<type>language_handler</type>。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-examples">
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   The preferred way of creating any of the standard procedural languages
   is just:
<programlisting>
CREATE LANGUAGE plperl;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   创建任何标准过程语言的最好的方式是：
<programlisting>
CREATE LANGUAGE plperl;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   For a language not known in the <structname>pg_pltemplate</> catalog, a
   sequence such as this is needed:
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting></para>
____________________________________________________________________________-->
  <para>
   对于<structname>pg_pltemplate</structname>目录不知道的一种语言，需要这样的命令序列：
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-createlanguage-compat">
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE LANGUAGE</command> is a
   <productname>PostgreSQL</productname> extension.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE LANGUAGE</command>是一种
   <productname>PostgreSQL</productname>扩展。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterlanguage"/></member>
   <member><xref linkend="sql-createfunction"/></member>
   <member><xref linkend="sql-droplanguage"/></member>
   <member><xref linkend="sql-grant"/></member>
   <member><xref linkend="sql-revoke"/></member>
  </simplelist>
 </refsect1>
</refentry>

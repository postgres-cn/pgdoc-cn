<!--
doc/src/sgml/ref/pg_dump.sgml
PostgreSQL documentation
-->

<refentry id="app-pgdump">
<!--==========================orignal english content==========================
 <indexterm zone="app-pgdump">
  <primary>pg_dump</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="app-pgdump">
  <primary>pg_dump</primary>
 </indexterm>
 
<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>pg_dump</refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>pg_dump</refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>pg_dump</refname>

  <refpurpose>
   extract a <productname>PostgreSQL</productname> database into a script file or other archive file
  </refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>pg_dump</refname>

  <refpurpose>
   把<productname>PostgreSQL</productname>数据库抽取为一个脚本文件或其他归档文件
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
  <cmdsynopsis>
   <command>pg_dump</command>
   <arg rep="repeat"><replaceable>connection-option</replaceable></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
____________________________________________________________________________-->
  <cmdsynopsis>
   <command>pg_dump</command>
   <arg rep="repeat"><replaceable>connection-option</replaceable></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>


 <refsect1 id="pg-dump-description">
<!--==========================orignal english content==========================
  <title>
   Description
  </title>
____________________________________________________________________________-->
  <title>
   描述
  </title>

<!--==========================orignal english content==========================
  <para>
   <application>pg_dump</application> is a utility for backing up a
   <productname>PostgreSQL</productname> database. It makes consistent
   backups even if the database is being used concurrently.
   <application>pg_dump</application> does not block other users
   accessing the database (readers or writers).
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_dump</application>是用于备份一种<productname>PostgreSQL</productname>数据库的工具。即使数据库正在被并发使用，它也能创建一致的备份。<application>pg_dump</application>不阻塞其他用户访问数据库（读取或写入）。
  </para>
  
<!--==========================orignal english content==========================
  <para>
   <application>pg_dump</application> only dumps a single database.
   To back up an entire cluster, or to back up global objects that are
   common to all databases in a cluster (such as roles and tablespaces),
   use <xref linkend="app-pg-dumpall"/>.
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_dump</application>只转储单个数据库。要备份一个集簇或者集簇中
   对于所有数据库公共的全局对象（例如角色和表空间），应使用
   <xref linkend="app-pg-dumpall"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Dumps can be output in script or archive file formats. Script
   dumps are plain-text files containing the SQL commands required
   to reconstruct the database to the state it was in at the time it was
   saved. To restore from such a script, feed it to <xref
   linkend="app-psql"/>. Script files
   can be used to reconstruct the database even on other machines and
   other architectures; with some modifications, even on other SQL
   database products.
  </para>
____________________________________________________________________________-->
  <para>
   转储可以被输出到脚本或归档文件格式。脚本转储是包含 SQL 命令的纯文本文件，它们可以用来重构数据库到它被转储时的状态。要从这样一个脚本恢复，将它喂给<xref linkend="app-psql"/>。脚本文件甚至可以被用来在其他机器和其他架构上重构数据库。在经过一些修改后，甚至可以在其他 SQL 数据库产品上重构数据库。
  </para>

<!--==========================orignal english content==========================
  <para>
   The alternative archive file formats must be used with
   <xref linkend="app-pgrestore"/> to rebuild the database.  They
   allow <application>pg_restore</application> to be selective about
   what is restored, or even to reorder the items prior to being
   restored.
   The archive file formats are designed to be portable across
   architectures.
  </para>
____________________________________________________________________________-->
  <para>
   另一种可选的归档文件格式必须与<xref linkend="app-pgrestore"/>配合使用来重建数据库。它们允许<application>pg_restore</application>能选择恢复什么，或者甚至在恢复之前对条目重排序。归档文件格式被设计为在架构之间可移植。
  </para>

<!--==========================orignal english content==========================
  <para>
   When used with one of the archive file formats and combined with
   <application>pg_restore</application>,
   <application>pg_dump</application> provides a flexible archival and
   transfer mechanism. <application>pg_dump</application> can be used to
   backup an entire database, then <application>pg_restore</application>
   can be used to examine the archive and/or select which parts of the
   database are to be restored. The most flexible output file formats are
   the <quote>custom</quote> format (<option>-Fc</option>) and the
   <quote>directory</quote> format (<option>-Fd</option>). They allow
   for selection and reordering of all archived items, support parallel
   restoration, and are compressed by default. The <quote>directory</quote>
   format is the only format that supports parallel dumps.
  </para>
____________________________________________________________________________-->
  <para>
   当使用归档文件格式之一并与<application>pg_restore</application>组合时，<application>pg_dump</application>提供了一种灵活的归档和传输机制。<application>pg_dump</application>可以被用来备份整个数据库，然后<application>pg_restore</application>可以被用来检查归档并/或选择数据库的哪些部分要被恢复。最灵活的输出文件格式是<quote>自定义</quote>格式（<option>-Fc</option>）和<quote>目录</quote>格式（<option>-Fd</option>）。它们允许选择和重排序所有已归档项、支持并行恢复并且默认是压缩的。<quote>目录</quote>格式是唯一一种支持并行转储的格式。
  </para>

<!--==========================orignal english content==========================
  <para>
   While running <application>pg_dump</application>, one should examine the
   output for any warnings (printed on standard error), especially in
   light of the limitations listed below.
  </para>
____________________________________________________________________________-->
  <para>
   当运行<application>pg_dump</application>时，我们应该检查输出中有没有任何警告（打印在标准错误上），特别是考虑到下面列出的限制。
  </para>

 </refsect1>

 <refsect1 id="pg-dump-options">
<!--==========================orignal english content==========================
  <title>Options</title>
____________________________________________________________________________-->
  <title>选项</title>

<!--==========================orignal english content==========================
  <para>
    The following command-line options control the content and
    format of the output.

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">dbname</replaceable></term>
      <listitem>
       <para>
        Specifies the name of the database to be dumped.  If this is
        not specified, the environment variable
        <envar>PGDATABASE</envar> is used.  If that is not set, the
        user name specified for the connection is used.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-a</option></term>
      <term><option>-&minus;data-only</option></term>
      <listitem>
       <para>
        Dump only the data, not the schema (data definitions).
        Table data, large objects, and sequence values are dumped.
       </para>

       <para>
        This option is similar to, but for historical reasons not identical
        to, specifying <option>-&minus;section=data</option>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-b</option></term>
      <term><option>-&minus;blobs</option></term>
      <listitem>
       <para>
        Include large objects in the dump.  This is the default behavior
        except when <option>-&minus;schema</option>, <option>-&minus;table</option>, or
        <option>-&minus;schema-only</option> is specified.  The <option>-b</option>
        switch is therefore only useful to add large objects to dumps
        where a specific schema or table has been requested.  Note that
        blobs are considered data and therefore will be included when
        <option>-&minus;data-only</option> is used, but not
        when <option>-&minus;schema-only</option> is.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-B</option></term>
      <term><option>-&minus;no-blobs</option></term>
      <listitem>
       <para>
        Exclude large objects in the dump.
       </para>

       <para>
        When both <option>-b</option> and <option>-B</option> are given, the behavior
        is to output large objects, when data is being dumped, see the
        <option>-b</option> documentation.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option></term>
      <term><option>-&minus;clean</option></term>
      <listitem>
       <para>
        Output commands to clean (drop)
        database objects prior to outputting the commands for creating them.
        (Unless <option>-&minus;if-exists</option> is also specified,
        restore might generate some harmless error messages, if any objects
        were not present in the destination database.)
       </para>

       <para>
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-C</option></term>
      <term><option>-&minus;create</option></term>
      <listitem>
       <para>
        Begin the output with a command to create the
        database itself and reconnect to the created database.  (With a
        script of this form, it doesn't matter which database in the
        destination installation you connect to before running the script.)
        If <option>-&minus;clean</option> is also specified, the script drops and
        recreates the target database before reconnecting to it.
       </para>

       <para>
        With <option>-&minus;create</option>, the output also includes the
        database's comment if any, and any configuration variable settings
        that are specific to this database, that is,
        any <command>ALTER DATABASE ... SET ...</command>
        and <command>ALTER ROLE ... IN DATABASE ... SET ...</command>
        commands that mention this database.
        Access privileges for the database itself are also dumped,
        unless <option>-&minus;no-acl</option> is specified.
       </para>

       <para>
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-E <replaceable class="parameter">encoding</replaceable></option></term>
      <term><option>-&minus;encoding=<replaceable class="parameter">encoding</replaceable></option></term>
      <listitem>
       <para>
        Create the dump in the specified character set encoding. By default,
        the dump is created in the database encoding.  (Another way to get the
        same result is to set the <envar>PGCLIENTENCODING</envar> environment
        variable to the desired dump encoding.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-f <replaceable class="parameter">file</replaceable></option></term>
      <term><option>-&minus;file=<replaceable class="parameter">file</replaceable></option></term>
      <listitem>
       <para>
        Send output to the specified file. This parameter can be omitted for
        file based output formats, in which case the standard output is used.
        It must be given for the directory output format however, where it
        specifies the target directory instead of a file. In this case the
        directory is created by <command>pg_dump</command> and must not exist
        before.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-F <replaceable class="parameter">format</replaceable></option></term>
      <term><option>-&minus;format=<replaceable class="parameter">format</replaceable></option></term>
      <listitem>
       <para>
        Selects the format of the output.
        <replaceable>format</replaceable> can be one of the following:

       <variablelist>
        <varlistentry>
         <term><literal>p</literal></term>
         <term><literal>plain</literal></term>
         <listitem>
          <para>
           Output a plain-text <acronym>SQL</acronym> script file (the default).
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>c</literal></term>
         <term><literal>custom</literal></term>
         <listitem>
          <para>
           Output a custom-format archive suitable for input into
           <application>pg_restore</application>.
           Together with the directory output format, this is the most flexible
           output format in that it allows manual selection and reordering of
           archived items during restore. This format is also compressed by
           default.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>d</literal></term>
         <term><literal>directory</literal></term>
         <listitem>
          <para>
           Output a directory-format archive suitable for input into
           <application>pg_restore</application>. This will create a directory
           with one file for each table and blob being dumped, plus a
           so-called Table of Contents file describing the dumped objects in a
           machine-readable format that <application>pg_restore</application>
           can read. A directory format archive can be manipulated with
           standard Unix tools; for example, files in an uncompressed archive
           can be compressed with the <application>gzip</application> tool.
           This format is compressed by default and also supports parallel
           dumps.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>t</literal></term>
         <term><literal>tar</literal></term>
         <listitem>
          <para>
           Output a <command>tar</command>-format archive suitable for input
           into <application>pg_restore</application>. The tar format is
           compatible with the directory format: extracting a tar-format
           archive produces a valid directory-format archive.
           However, the tar format does not support compression. Also, when
           using tar format the relative order of table data items cannot be
           changed during restore.
          </para>
         </listitem>
        </varlistentry>
       </variablelist></para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j <replaceable class="parameter">njobs</replaceable></option></term>
      <term><option>-&minus;jobs=<replaceable class="parameter">njobs</replaceable></option></term>
      <listitem>
       <para>
        Run the dump in parallel by dumping <replaceable class="parameter">njobs</replaceable>
        tables simultaneously. This option reduces the time of the dump but it also
        increases the load on the database server. You can only use this option with the
        directory output format because this is the only output format where multiple processes
        can write their data at the same time.
       </para>
       <para><application>pg_dump</application> will open <replaceable class="parameter">njobs</replaceable>
        + 1 connections to the database, so make sure your <xref linkend="guc-max-connections"/>
        setting is high enough to accommodate all connections.
       </para>
       <para>
        Requesting exclusive locks on database objects while running a parallel dump could
        cause the dump to fail. The reason is that the <application>pg_dump</application> master process
        requests shared locks on the objects that the worker processes are going to dump later
        in order to
        make sure that nobody deletes them and makes them go away while the dump is running.
        If another client then requests an exclusive lock on a table, that lock will not be
        granted but will be queued waiting for the shared lock of the master process to be
        released. Consequently any other access to the table will not be granted either and
        will queue after the exclusive lock request. This includes the worker process trying
        to dump the table. Without any precautions this would be a classic deadlock situation.
        To detect this conflict, the <application>pg_dump</application> worker process requests another
        shared lock using the <literal>NOWAIT</literal> option. If the worker process is not granted
        this shared lock, somebody else must have requested an exclusive lock in the meantime
        and there is no way to continue with the dump, so <application>pg_dump</application> has no choice
        but to abort the dump.
       </para>
       <para>
        For a consistent backup, the database server needs to support
        synchronized snapshots, a feature that was introduced in
        <productname>PostgreSQL</productname> 9.2 for primary servers and 10
        for standbys. With this feature, database clients can ensure they see
        the same data set even though they use different connections.
        <command>pg_dump -j</command> uses multiple database connections; it
        connects to the database once with the master process and once again
        for each worker job. Without the synchronized snapshot feature, the
        different worker jobs wouldn't be guaranteed to see the same data in
        each connection, which could lead to an inconsistent backup.
       </para>
       <para>
        If you want to run a parallel dump of a pre-9.2 server, you need to make sure that the
        database content doesn't change from between the time the master connects to the
        database until the last worker job has connected to the database. The easiest way to
        do this is to halt any data modifying processes (DDL and DML) accessing the database
        before starting the backup. You also need to specify the
        <option>-&minus;no-synchronized-snapshots</option> parameter when running
        <command>pg_dump -j</command> against a pre-9.2 <productname>PostgreSQL</productname>
        server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n <replaceable class="parameter">schema</replaceable></option></term>
      <term><option>-&minus;schema=<replaceable class="parameter">schema</replaceable></option></term>
      <listitem>
       <para>
        Dump only schemas matching <replaceable
        class="parameter">schema</replaceable>; this selects both the
        schema itself, and all its contained objects.  When this option is
        not specified, all non-system schemas in the target database will be
        dumped.  Multiple schemas can be
        selected by writing multiple <option>-n</option> switches.  Also, the
        <replaceable class="parameter">schema</replaceable> parameter is
        interpreted as a pattern according to the same rules used by
        <application>psql</application>'s <literal>\d</literal> commands (see <xref
        linkend="app-psql-patterns" endterm="app-psql-patterns-title"/>),
        so multiple schemas can also be selected by writing wildcard characters
        in the pattern.  When using wildcards, be careful to quote the pattern
        if needed to prevent the shell from expanding the wildcards;  see
        <xref linkend="pg-dump-examples" endterm="pg-dump-examples-title"/>.
       </para>

       <note>
        <para>
         When <option>-n</option> is specified, <application>pg_dump</application>
         makes no attempt to dump any other database objects that the selected
         schema(s) might depend upon. Therefore, there is no guarantee
         that the results of a specific-schema dump can be successfully
         restored by themselves into a clean database.
        </para>
       </note>

       <note>
        <para>
         Non-schema objects such as blobs are not dumped when <option>-n</option> is
         specified.  You can add blobs back to the dump with the
         <option>-&minus;blobs</option> switch.
        </para>
       </note>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N <replaceable class="parameter">schema</replaceable></option></term>
      <term><option>-&minus;exclude-schema=<replaceable class="parameter">schema</replaceable></option></term>
      <listitem>
       <para>
        Do not dump any schemas matching the <replaceable
        class="parameter">schema</replaceable> pattern.  The pattern is
        interpreted according to the same rules as for <option>-n</option>.
        <option>-N</option> can be given more than once to exclude schemas
        matching any of several patterns.
       </para>

       <para>
        When both <option>-n</option> and <option>-N</option> are given, the behavior
        is to dump just the schemas that match at least one <option>-n</option>
        switch but no <option>-N</option> switches.  If <option>-N</option> appears
        without <option>-n</option>, then schemas matching <option>-N</option> are
        excluded from what is otherwise a normal dump.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-o</option></term>
      <term><option>-&minus;oids</option></term>
      <listitem>
       <para>
        Dump object identifiers (<acronym>OID</acronym>s) as part of the
        data for every table.  Use this option if your application references
        the <acronym>OID</acronym>
        columns in some way (e.g., in a foreign key constraint).
        Otherwise, this option should not be used.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-O</option></term>
      <term><option>-&minus;no-owner</option></term>
      <listitem>
       <para>
        Do not output commands to set
        ownership of objects to match the original database.
        By default, <application>pg_dump</application> issues
        <command>ALTER OWNER</command> or
        <command>SET SESSION AUTHORIZATION</command>
        statements to set ownership of created database objects.
        These statements
        will fail when the script is run unless it is started by a superuser
        (or the same user that owns all of the objects in the script).
        To make a script that can be restored by any user, but will give
        that user ownership of all the objects, specify <option>-O</option>.
       </para>

       <para>
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option></term>
      <term><option>-&minus;no-reconnect</option></term>
      <listitem>
       <para>
        This option is obsolete but still accepted for backwards
        compatibility.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option></term>
      <term><option>-&minus;schema-only</option></term>
      <listitem>
       <para>
        Dump only the object definitions (schema), not data.
       </para>
       <para>
        This option is the inverse of <option>-&minus;data-only</option>.
        It is similar to, but for historical reasons not identical to,
        specifying
        <option>-&minus;section=pre-data -&minus;section=post-data</option>.
       </para>
       <para>
        (Do not confuse this with the <option>-&minus;schema</option> option, which
        uses the word <quote>schema</quote> in a different meaning.)
       </para>
       <para>
        To exclude table data for only a subset of tables in the database,
        see <option>-&minus;exclude-table-data</option>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S <replaceable class="parameter">username</replaceable></option></term>
      <term><option>-&minus;superuser=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        Specify the superuser user name to use when disabling triggers.
        This is relevant only if <option>-&minus;disable-triggers</option> is used.
        (Usually, it's better to leave this out, and instead start the
        resulting script as superuser.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t <replaceable class="parameter">table</replaceable></option></term>
      <term><option>-&minus;table=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        Dump only tables with names matching
        <replaceable class="parameter">table</replaceable>.
        For this purpose, <quote>table</quote> includes views, materialized views,
        sequences, and foreign tables.  Multiple tables
        can be selected by writing multiple <option>-t</option> switches.  Also, the
        <replaceable class="parameter">table</replaceable> parameter is
        interpreted as a pattern according to the same rules used by
        <application>psql</application>'s <literal>\d</literal> commands (see <xref
        linkend="app-psql-patterns" endterm="app-psql-patterns-title"/>),
        so multiple tables can also be selected by writing wildcard characters
        in the pattern.  When using wildcards, be careful to quote the pattern
        if needed to prevent the shell from expanding the wildcards;  see
        <xref linkend="pg-dump-examples" endterm="pg-dump-examples-title"/>.
       </para>

       <para>
        The <option>-n</option> and <option>-N</option> switches have no effect when
        <option>-t</option> is used, because tables selected by <option>-t</option> will
        be dumped regardless of those switches, and non-table objects will not
        be dumped.
       </para>

       <note>
        <para>
         When <option>-t</option> is specified, <application>pg_dump</application>
         makes no attempt to dump any other database objects that the selected
         table(s) might depend upon. Therefore, there is no guarantee
         that the results of a specific-table dump can be successfully
         restored by themselves into a clean database.
        </para>
       </note>

       <note>
        <para>
         The behavior of the <option>-t</option> switch is not entirely upward
         compatible with pre-8.2 <productname>PostgreSQL</productname>
         versions.  Formerly, writing <literal>-t tab</literal> would dump all
         tables named <literal>tab</literal>, but now it just dumps whichever one
         is visible in your default search path.  To get the old behavior
         you can write <literal>-t '*.tab'</literal>.  Also, you must write something
         like <literal>-t sch.tab</literal> to select a table in a particular schema,
         rather than the old locution of <literal>-n sch -t tab</literal>.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T <replaceable class="parameter">table</replaceable></option></term>
      <term><option>-&minus;exclude-table=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        Do not dump any tables matching the <replaceable
        class="parameter">table</replaceable> pattern.  The pattern is
        interpreted according to the same rules as for <option>-t</option>.
        <option>-T</option> can be given more than once to exclude tables
        matching any of several patterns.
       </para>

       <para>
        When both <option>-t</option> and <option>-T</option> are given, the behavior
        is to dump just the tables that match at least one <option>-t</option>
        switch but no <option>-T</option> switches.  If <option>-T</option> appears
        without <option>-t</option>, then tables matching <option>-T</option> are
        excluded from what is otherwise a normal dump.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>-&minus;verbose</option></term>
      <listitem>
       <para>
        Specifies verbose mode.  This will cause
        <application>pg_dump</application> to output detailed object
        comments and start/stop times to the dump file, and progress
        messages to standard error.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-V</option></term>
       <term><option>-&minus;version</option></term>
       <listitem>
       <para>
       Print the <application>pg_dump</application> version and exit.
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-x</option></term>
      <term><option>-&minus;no-privileges</option></term>
      <term><option>-&minus;no-acl</option></term>
      <listitem>
       <para>
        Prevent dumping of access privileges (grant/revoke commands).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-Z <replaceable class="parameter">0..9</replaceable></option></term>
      <term><option>-&minus;compress=<replaceable class="parameter">0..9</replaceable></option></term>
      <listitem>
       <para>
        Specify the compression level to use.  Zero means no compression.
        For the custom archive format, this specifies compression of
        individual table-data segments, and the default is to compress
        at a moderate level.
        For plain text output, setting a nonzero compression level causes
        the entire output file to be compressed, as though it had been
        fed through <application>gzip</application>; but the default is not to compress.
        The tar archive format currently does not support compression at all.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;binary-upgrade</option></term>
      <listitem>
       <para>
        This option is for use by in-place upgrade utilities.  Its use
        for other purposes is not recommended or supported.  The
        behavior of the option may change in future releases without
        notice.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;column-inserts</option></term>
      <term><option>-&minus;attribute-inserts</option></term>
      <listitem>
       <para>
        Dump data as <command>INSERT</command> commands with explicit
        column names (<literal>INSERT INTO
        <replaceable>table</replaceable>
        (<replaceable>column</replaceable>, ...) VALUES
        ...</literal>).  This will make restoration very slow; it is mainly
        useful for making dumps that can be loaded into
        non-<productname>PostgreSQL</productname> databases.
        However, since this option generates a separate command for each row,
        an error in reloading a row causes only that row to be lost rather
        than the entire table contents.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;disable-dollar-quoting</option></term>
      <listitem>
       <para>
        This option disables the use of dollar quoting for function bodies,
        and forces them to be quoted using SQL standard string syntax.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;disable-triggers</option></term>
      <listitem>
       <para>
        This option is relevant only when creating a data-only dump.
        It instructs <application>pg_dump</application> to include commands
        to temporarily disable triggers on the target tables while
        the data is reloaded.  Use this if you have referential
        integrity checks or other triggers on the tables that you
        do not want to invoke during data reload.
       </para>

       <para>
        Presently, the commands emitted for <option>-&minus;disable-triggers</option>
        must be done as superuser.  So, you should also specify
        a superuser name with <option>-S</option>, or preferably be careful to
        start the resulting script as a superuser.
       </para>

       <para>
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;enable-row-security</option></term>
      <listitem>
       <para>
        This option is relevant only when dumping the contents of a table
        which has row security.  By default, <application>pg_dump</application> will set
        <xref linkend="guc-row-security"/> to off, to ensure
        that all data is dumped from the table.  If the user does not have
        sufficient privileges to bypass row security, then an error is thrown.
        This parameter instructs <application>pg_dump</application> to set
        <xref linkend="guc-row-security"/> to on instead, allowing the user
        to dump the parts of the contents of the table that they have access to.
       </para>

       <para>
        Note that if you use this option currently, you probably also want
        the dump be in <command>INSERT</command> format, as the
        <command>COPY FROM</command> during restore does not support row security.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;exclude-table-data=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        Do not dump data for any tables matching the <replaceable
        class="parameter">table</replaceable> pattern. The pattern is
        interpreted according to the same rules as for <option>-t</option>.
        <option>-&minus;exclude-table-data</option> can be given more than once to
        exclude tables matching any of several patterns. This option is
        useful when you need the definition of a particular table even
        though you do not need the data in it.
       </para>
       <para>
        To exclude data for all tables in the database, see <option>-&minus;schema-only</option>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;if-exists</option></term>
      <listitem>
       <para>
        Use conditional commands (i.e. add an <literal>IF EXISTS</literal>
        clause) when cleaning database objects.  This option is not valid
        unless <option>-&minus;clean</option> is also specified.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;inserts</option></term>
      <listitem>
       <para>
        Dump data as <command>INSERT</command> commands (rather
        than <command>COPY</command>).  This will make restoration very slow;
        it is mainly useful for making dumps that can be loaded into
        non-<productname>PostgreSQL</productname> databases.
        However, since this option generates a separate command for each row,
        an error in reloading a row causes only that row to be lost rather
        than the entire table contents.
        Note that
        the restore might fail altogether if you have rearranged column order.
        The <option>-&minus;column-inserts</option> option is safe against column
        order changes, though even slower.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;load-via-partition-root</option></term>
      <listitem>
       <para>
        When dumping data for a table partition, make
        the <command>COPY</command> or <command>INSERT</command> statements
        target the root of the partitioning hierarchy that contains it, rather
        than the partition itself.  This causes the appropriate partition to
        be re-determined for each row when the data is loaded.  This may be
        useful when reloading data on a server where rows do not always fall
        into the same partitions as they did on the original server.  That
        could happen, for example, if the partitioning column is of type text
        and the two systems have different definitions of the collation used
        to sort the partitioning column.
       </para>

       <para>
        It is best not to use parallelism when restoring from an archive made
        with this option, because <application>pg_restore</application> will
        not know exactly which partition(s) a given archive data item will
        load data into.  This could result in inefficiency due to lock
        conflicts between parallel jobs, or perhaps even reload failures due
        to foreign key constraints being set up before all the relevant data
        is loaded.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;lock-wait-timeout=<replaceable class="parameter">timeout</replaceable></option></term>
      <listitem>
       <para>
        Do not wait forever to acquire shared table locks at the beginning of
        the dump. Instead fail if unable to lock a table within the specified
        <replaceable class="parameter">timeout</replaceable>. The timeout may be
        specified in any of the formats accepted by <command>SET
        statement_timeout</command>.  (Allowed formats vary depending on the server
        version you are dumping from, but an integer number of milliseconds
        is accepted by all versions.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;no-comments</option></term>
      <listitem>
       <para>
        Do not dump comments.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;no-publications</option></term>
      <listitem>
       <para>
        Do not dump publications.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;no-security-labels</option></term>
      <listitem>
       <para>
        Do not dump security labels.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;no-subscriptions</option></term>
      <listitem>
       <para>
        Do not dump subscriptions.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;no-sync</option></term>
      <listitem>
       <para>
        By default, <command>pg_dump</command> will wait for all files
        to be written safely to disk.  This option causes
        <command>pg_dump</command> to return without waiting, which is
        faster, but means that a subsequent operating system crash can leave
        the dump corrupt.  Generally, this option is useful for testing
        but should not be used when dumping data from production installation.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;no-synchronized-snapshots</option></term>
      <listitem>
       <para>
        This option allows running <command>pg_dump -j</command> against a pre-9.2
        server, see the documentation of the <option>-j</option> parameter
        for more details.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;no-tablespaces</option></term>
      <listitem>
       <para>
        Do not output commands to select tablespaces.
        With this option, all objects will be created in whichever
        tablespace is the default during restore.
       </para>

       <para>
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;no-unlogged-table-data</option></term>
      <listitem>
       <para>
        Do not dump the contents of unlogged tables.  This option has no
        effect on whether or not the table definitions (schema) are dumped;
        it only suppresses dumping the table data. Data in unlogged tables
        is always excluded when dumping from a standby server.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;quote-all-identifiers</option></term>
      <listitem>
       <para>
        Force quoting of all identifiers.  This option is recommended when
        dumping a database from a server whose <productname>PostgreSQL</productname>
        major version is different from <application>pg_dump</application>'s, or when
        the output is intended to be loaded into a server of a different
        major version.  By default, <application>pg_dump</application> quotes only
        identifiers that are reserved words in its own major version.
        This sometimes results in compatibility issues when dealing with
        servers of other versions that may have slightly different sets
        of reserved words.  Using <option>-&minus;quote-all-identifiers</option> prevents
        such issues, at the price of a harder-to-read dump script.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-&minus;section=<replaceable class="parameter">sectionname</replaceable></option></term>
       <listitem>
         <para>
          Only dump the named section. The section name can be
          <option>pre-data</option>, <option>data</option>, or <option>post-data</option>.
          This option can be specified more than once to select multiple
          sections. The default is to dump all sections.
         </para>
         <para>
          The data section contains actual table data, large-object
          contents, and sequence values.
          Post-data items include definitions of indexes, triggers, rules,
          and constraints other than validated check constraints.
          Pre-data items include all other data definition items.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;serializable-deferrable</option></term>
      <listitem>
       <para>
        Use a <literal>serializable</literal> transaction for the dump, to
        ensure that the snapshot used is consistent with later database
        states; but do this by waiting for a point in the transaction stream
        at which no anomalies can be present, so that there isn't a risk of
        the dump failing or causing other transactions to roll back with a
        <literal>serialization_failure</literal>.  See <xref linkend="mvcc"/>
        for more information about transaction isolation and concurrency
        control.
       </para>

       <para>
        This option is not beneficial for a dump which is intended only for
        disaster recovery.  It could be useful for a dump used to load a
        copy of the database for reporting or other read-only load sharing
        while the original database continues to be updated.  Without it the
        dump may reflect a state which is not consistent with any serial
        execution of the transactions eventually committed.  For example, if
        batch processing techniques are used, a batch may show as closed in
        the dump without all of the items which are in the batch appearing.
       </para>

       <para>
        This option will make no difference if there are no read-write
        transactions active when pg_dump is started.  If read-write
        transactions are active, the start of the dump may be delayed for an
        indeterminate length of time.  Once running, performance with or
        without the switch is the same.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-&minus;snapshot=<replaceable class="parameter">snapshotname</replaceable></option></term>
       <listitem>
         <para>
          Use the specified synchronized snapshot when making a dump of the
          database (see
          <xref linkend="functions-snapshot-synchronization-table"/> for more
          details).
         </para>
         <para>
          This option is useful when needing to synchronize the dump with
          a logical replication slot (see <xref linkend="logicaldecoding"/>)
          or with a concurrent session.
         </para>
         <para>
          In the case of a parallel dump, the snapshot name defined by this
          option is used rather than taking a new snapshot.
         </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;strict-names</option></term>
      <listitem>
       <para>
        Require that each schema
        (<option>-n</option>/<option>-&minus;schema</option>) and table
        (<option>-t</option>/<option>-&minus;table</option>) qualifier match at
        least one schema/table in the database to be dumped.  Note that if
        none of the schema/table qualifiers find
        matches, <application>pg_dump</application> will generate an error
        even without <option>-&minus;strict-names</option>.
       </para>
       <para>
        This option has no effect
        on <option>-N</option>/<option>-&minus;exclude-schema</option>,
        <option>-T</option>/<option>-&minus;exclude-table</option>,
        or <option>-&minus;exclude-table-data</option>.  An exclude pattern failing
        to match any objects is not considered an error.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;use-set-session-authorization</option></term>
      <listitem>
       <para>
        Output SQL-standard <command>SET SESSION AUTHORIZATION</command> commands
        instead of <command>ALTER OWNER</command> commands to determine object
        ownership.  This makes the dump more standards-compatible, but
        depending on the history of the objects in the dump, might not restore
        properly.  Also, a dump using <command>SET SESSION AUTHORIZATION</command>
        will certainly require superuser privileges to restore correctly,
        whereas <command>ALTER OWNER</command> requires lesser privileges.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-?</option></term>
       <term><option>-&minus;help</option></term>
       <listitem>
       <para>
       Show help about <application>pg_dump</application> command line
       arguments, and exit.
       </para>
       </listitem>
     </varlistentry>

    </variablelist>
   </para>
____________________________________________________________________________-->
  <para>
    下列命令选项控制输出的内容和格式。

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">dbname</replaceable></term>
      <listitem>
       <para>
        指定要被转储的数据库名。如果没有指定，将使用环境变量<envar>PGDATABASE</envar>。如果环境变量也没有设置，则使用指定给该连接的用户名。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-a</option></term>
      <term><option>--data-only</option></term>
      <listitem>
       <para>
        只转储数据，而不转储模式（数据定义）。表数据、大对象和序列值都会被转储。
       </para>

       <para>
        这个选项类似于指定<option>--section=data</option>，但是由于历史原因又不完全相同。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-b</option></term>
      <term><option>--blobs</option></term>
      <listitem>
       <para>
        在转储中包括大对象。这是当<option>--schema</option>、<option>--table</option>或<option>--schema-only</option>被指定时的默认行为。因此，只有在请求转储一个特定方案或者表的情况中，<option>-b</option>开关才对向转储中加入大对象有用。注意blobs是被考虑的数据，因此在使用<option>--data-only</option>时将被包括在内，但在使用<option>--schema-only</option>时则不会包括。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-B</option></term>
      <term><option>--no-blobs</option></term>
      <listitem>
       <para>
        在转储中排除大对象。
       </para>

       <para>
        当同时给定<option>-b</option>和<option>-B</option>时，行为是在数据被转储时输出大对象，请参考<option>-b</option>文档。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option></term>
      <term><option>--clean</option></term>
      <listitem>
       <para>
        在输出创建数据库对象的命令之前输出清除（删除）它们的命令
        （除非也指定了<option>--if-exists</option>，如果任何对象不存在于
        目的数据库中，恢复可能会产生一些伤害性的错误消息）。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在调用<command>pg_restore</command>时指定该选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-C</option></term>
      <term><option>--create</option></term>
      <listitem>
       <para>
        使得在输出的开始是一个创建数据库本身并且重新连接到被创建的数据库的命令（通过这种形式的一个脚本，在运行脚本之前你连接的是目标安装中的哪个数据库都没有关系）。如果也指定了<option>--clean</option>，脚本会在重新连接到目标数据库之前先删除它然后再重建。
       </para>

       <para>
        通过<option>--create</option>，输出还会包括数据库的注释（如果有）以及与这个数据库相关的任何配置变量设置，也就是任何提到了这个数据库的<command>ALTER DATABASE ... SET ...</command>命令和<command>ALTER ROLE ... IN DATABASE ... SET ...</command>命令。该数据库本身的访问特权也会被转储，除非指定有<option>--no-acl</option>。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在你调用<command>pg_restore</command>时指定这个选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-E <replaceable class="parameter">encoding</replaceable></option></term>
      <term><option>--encoding=<replaceable class="parameter">encoding</replaceable></option></term>
      <listitem>
       <para>
        以指定的字符集编码创建转储。在默认情况下，该转储会以该数据库的编码创建（另一种得到相同结果的方式是将<envar>PGCLIENTENCODING</envar>环境变量设置成想要的转储编码）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-f <replaceable class="parameter">file</replaceable></option></term>
      <term><option>--file=<replaceable class="parameter">file</replaceable></option></term>
      <listitem>
       <para>
        将输出发送到指定文件。对于基于输出格式的文件这个参数可以被忽略，在那种情况下将使用标准输出。不过对于目录输出格式必须给定这个参数，在目录输出格式中指定的是一个目录而不是一个文件。在这种情况中，该目录会由<command>pg_dump</command>创建并且不需要以前就存在。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-F <replaceable class="parameter">format</replaceable></option></term>
      <term><option>--format=<replaceable class="parameter">format</replaceable></option></term>
      <listitem>
       <para>
        选择输出的格式。<replaceable>format</replaceable>可以是下列之一：

       <variablelist>
        <varlistentry>
         <term><literal>p</literal></term>
         <term><literal>plain</literal></term>
         <listitem>
          <para>
           输出一个纯文本形式的<acronym>SQL</acronym>脚本文件（默认值）。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>c</literal></term>
         <term><literal>custom</literal></term>
         <listitem>
          <para>
           输出一个适合于作为<application>pg_restore</application>输入的自定义格式归档。和目录输出格式一起，这是最灵活的输出格式，它允许在恢复时手动选择和排序已归档的项。这种格式在默认情况还会被压缩。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>d</literal></term>
         <term><literal>directory</literal></term>
         <listitem>
          <para>
           输出一个适合作为<application>pg_restore</application>输入的目录格式归档。这将创建一个目录，其中每个被转储的表和大对象都有一个文件，外加一个所谓的目录文件，该文件以一种<application>pg_restore</application>能读取的机器可读格式描述被转储的对象。一个目录格式归档能用标准 Unix 工具操纵，例如一个未压缩归档中的文件可以使用<application>gzip</application>工具压缩。这种格式默认情况下是被压缩的并且也支持并行转储。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>t</literal></term>
         <term><literal>tar</literal></term>
         <listitem>
          <para>
           输出一个适合于输入到<application>pg_restore</application>中的<command>tar</command>-格式归档。tar 格式可以兼容目录格式，抽取一个 tar 格式的归档会产生一个合法的目录格式归档。不过，tar 格式不支持压缩。还有，在使用 tar 格式时，表数据项的相对顺序不能在恢复过程中被更改。
          </para>
         </listitem>
        </varlistentry>
       </variablelist></para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j <replaceable class="parameter">njobs</replaceable></option></term>
      <term><option>--jobs=<replaceable class="parameter">njobs</replaceable></option></term>
      <listitem>
       <para>
        通过同时归档<replaceable class="parameter">njobs</replaceable>个表来运行并行转储。这个选项缩减了转储的时间，但是它也增加了数据库服务器上的负载。你只能和目录输出格式一起使用这个选项，因为这是唯一一种让多个进程能在同一时间写其数据的输出格式。
       </para>
       <para><application>pg_dump</application>将打开<replaceable class="parameter">njobs</replaceable> + 1 个到该数据库的连接，因此确保你的<xref linkend="guc-max-connections"/>设置足够高以容纳所有的连接。
       </para>
       <para>
        在运行一次并行转储时请求数据库对象上的排他锁可能导致转储失败。其原因是，<application>pg_dump</application>主控进程会在工作者进程将要稍后转储的对象上请求共享锁，以便确保在转储运行时不会有人删除它们并让它们出错。如果另一个客户端接着请求一个表上的排他锁，那个锁将不会被授予但是会被排入队列等待主控进程的共享锁被释放。因此，任何其他对该表的访问将不会被授予或者将排在排他锁请求之后。这包括尝试转储该表的工作者进程。如果没有任何防范措施，这可能会是一种经典的死锁情况。要检测这种冲突，<application>pg_dump</application>工作者进程使用<literal>NOWAIT</literal>选项请求另一个共享锁。 如果该工作者进程没有被授予这个共享锁，其他某人必定已经在同时请求了一个排他锁并且没有办法继续转储，因此<application>pg_dump</application>除了中止转储之外别无选择。
       </para>
       <para>
        对于一个一致的备份，数据库服务器需要支持同步的快照，在<productname>PostgreSQL</productname> 9.2的主服务器和10的后备服务器中引入了一种特性。有了这种特性，即便数据库客户端使用不同的连接，也可以保证他们看到相同的数据集。<command>pg_dump -j</command>使用多个数据库连接，它用主控进程连接到数据一次，并且为每一个工作者任务再一次连接数据库。如果没有同步快照特征，在每一个连接中不同的工作者任务将不能被保证看到相同的数据，这可能导致一个不一致的备份。
       </para>
       <para>
        如果你希望运行一个 9.2 之前服务器的并行转储，你需要确保数据库内容从主控进程连接到数据库一直到最后一个工作者任务连接到数据库之间不会改变。做这些最简单的方法是在开始备份之前停止任何访问数据库的数据修改进程（DDL 以及 DML）。当对一个 9.2 之前的<productname>PostgreSQL</productname>服务器运行<command>pg_dump -j</command>时，你还需要指定<option>--no-synchronized-snapshots</option>参数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n <replaceable class="parameter">schema</replaceable></option></term>
      <term><option>--schema=<replaceable class="parameter">schema</replaceable></option></term>
      <listitem>
       <para>
        只转储匹配<replaceable class="parameter">schema</replaceable>的模式，这会选择模式本身以及它所包含的所有对象。当没有指定这个选项时，目标数据库中所有非系统模式都将被转储。多个模式可以通过书写多个<option>-n</option>开关来选择。另外，<replaceable class="parameter">schema</replaceable>参数可以被解释为一种根据<application>psql</application>'s <literal>\d</literal>命令所用的相同规则（见<xref linkend="app-psql-patterns" endterm="app-psql-patterns-title"/>）编写的模式，这样多个模式也可以通过在该模式中书写通配字符来选择。在使用通配符时，如果需要阻止 shell 展开通配符需要小心引用该模式，见<xref linkend="pg-dump-examples" endterm="pg-dump-examples-title"/>。
       </para>

       <note>
        <para>
         当<option>-n</option>被指定时，<application>pg_dump</application>不会尝试转储所选模式可能依赖的任何其他数据库对象。因此，无法保证一次指定模式转储的结果能够仅凭其本身被成功地恢复到一个干净的数据库中。
        </para>
       </note>

       <note>
        <para>
         当<option>-n</option>被指定时，非模式对象（如二进制大对象）不会被转储。你可以使用<option>--blobs</option>开关将二进制大对象加回到该转储中。
        </para>
       </note>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N <replaceable class="parameter">schema</replaceable></option></term>
      <term><option>--exclude-schema=<replaceable class="parameter">schema</replaceable></option></term>
      <listitem>
       <para>
        不转储匹配<replaceable class="parameter">schema</replaceable>模式的任何模式。该模式被根据<option>-n</option>所用的相同规则被解释。<option>-N</option>可以被给定多次来排除匹配几个模式中任意一个的模式。
       </para>

       <para>
        当<option>-n</option>和<option>-N</option>都被给定时，该行为是只转储匹配至少一个<option>-n</option>开关但是不匹配<option>-N</option>开关的模式。如果只有<option>-N</option>而没有<option>-n</option>，那么匹配<option>-N</option>的模式会被从一个正常转储中排除。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-o</option></term>
      <term><option>--oids</option></term>
      <listitem>
       <para>
        转储对象标识符（<acronym>OID</acronym>）作为每个表数据的一部分。如果你的应用以某种方式引用<acronym>OID</acronym>列（例如在一个外键约束中），应使用这个选项。否则，这个选项不应该被使用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-O</option></term>
      <term><option>--no-owner</option></term>
      <listitem>
       <para>
        不输出设置对象拥有关系来匹配原始数据库的命令。默认情况下，<application>pg_dump</application>会发出<command>ALTER OWNER</command>或<command>SET SESSION AUTHORIZATION</command>语句来设置被创建的数据库对象的拥有关系。除非该脚本被一个超级用户（或是拥有脚本中所有对象的同一个用户）启动，这些语句都将会失败。要使一个脚本能够被任意用户恢复，但把所有对象的拥有关系都给这个用户，可指定<option>-O</option>。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在调用<command>pg_restore</command>时指定该选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option></term>
      <term><option>--no-reconnect</option></term>
      <listitem>
       <para>
        这个选项已经废弃，但是为了向后兼容仍然能被接受。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option></term>
      <term><option>--schema-only</option></term>
      <listitem>
       <para>
        只转储对象定义（模式），而非数据。
       </para>
       <para>
        这个选项是<option>--data-only</option>的逆选项。它和指定<option>--section=pre-data --section=post-data</option>相似，但是由于历史原因又不完全相同。
       </para>
       <para>
        （不要把这个选项和<option>--schema</option>选项混淆，后者在<quote>schema</quote>的使用上有不同的含义）。
       </para>
       <para>
        要为数据库中表的一个子集排除表数据，见<option>--exclude-table-data</option>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S <replaceable class="parameter">username</replaceable></option></term>
      <term><option>--superuser=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        指定要在禁用触发器时使用的超级用户的用户名。只有使用<option>--disable-triggers</option>时，这个选项才相关（通常，最好省去这个选项，而作为超级用户来启动结果脚本来取而代之）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t <replaceable class="parameter">table</replaceable></option></term>
      <term><option>--table=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        只转储名字匹配<replaceable class="parameter">table</replaceable>的表，<quote>table</quote>还可以包括视图、物化视图、序列和外部表。通过写多个<option>-t</option>开关可以选择多个表。另外，<replaceable class="parameter">table</replaceable>参数可以被解释为一种根据<application>psql</application>'s <literal>\d</literal>命令所用的相同规则（见<xref linkend="app-psql-patterns" endterm="app-psql-patterns-title"/>）编写的模式，这样多个表也可以通过在该模式中书写通配字符来选择。在使用通配符时，如果需要阻止 shell 展开通配符需要小心引用该模式，见<xref linkend="pg-dump-examples" endterm="pg-dump-examples-title"/>。
       </para>

       <para>
        当<option>-t</option>被使用时，<option>-n</option>和<option>-N</option>开关不会有效果，因为被<option>-t</option>选择的表将被转储而无视那些开关，并且非表对象将不会被转储。
       </para>

       <note>
        <para>
         
         当<option>-t</option>被指定时，<application>pg_dump</application>不会尝试转储所选表可能依赖的任何其他数据库对象。因此，无法保证一次指定表转储的结果能够仅凭其本身被成功地恢复到一个干净的数据库中。
        </para>
       </note>

       <note>
        <para>
         <option>-t</option>开关的行为不完全向前兼容 8.2 之前的<productname>PostgreSQL</productname>版本。以前，写<literal>-t tab</literal>将转储所有命名为<literal>tab</literal>的表，但现在它仅仅转储在你默认搜索路径中可见的那一个。要得到旧的行为，你可以写成<literal>-t '*.tab'</literal>。还有，你必须写类似<literal>-t sch.tab</literal>的东西来选择一个特定模式中的一个表，而不是用老的惯用语<literal>-n sch -t tab</literal>。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T <replaceable class="parameter">table</replaceable></option></term>
      <term><option>--exclude-table=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        不转储匹配<replaceable class="parameter">table</replaceable>模式的任何表。该模式被根据<option>-t</option>所用的相同规则被解释。<option>-T</option>可以被给定多次来排除匹配几个模式中任意一个的模式。
       </para>

       <para>
        当<option>-t</option>和<option>-T</option>都被给定时，该行为是只转储匹配至少一个<option>-t</option>开关但是不匹配<option>-T</option>开关的表。如果只有<option>-T</option>而没有<option>-t</option>，那么匹配<option>-T</option>的表会被从一个正常转储中排除。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--verbose</option></term>
      <listitem>
       <para>
        指定冗长模式。这将导致<application>pg_dump</application>向标准错误输出详细的对象注释以及转储文件的开始/停止时间，还有进度消息。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-V</option></term>
       <term><option>--version</option></term>
       <listitem>
       <para>
       <application>pg_dump</application>版本并退出。
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-x</option></term>
      <term><option>--no-privileges</option></term>
      <term><option>--no-acl</option></term>
      <listitem>
       <para>
        防止转储访问特权（授予/收回命令）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-Z <replaceable class="parameter">0..9</replaceable></option></term>
      <term><option>--compress=<replaceable class="parameter">0..9</replaceable></option></term>
      <listitem>
       <para>
        指定要使用的压缩级别。零意味着不压缩。对于自定义归档格式，这会指定个体表数据段的压缩，并且默认是进行中等级别的压缩。对于纯文本输出，设置一个非零压缩级别会导致整个输出文件被压缩，就好像它被<application>gzip</application>处理过一样，但是默认是不压缩。tar 归档格式当前完全不支持压缩。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--binary-upgrade</option></term>
      <listitem>
       <para>
        这个选项用于就地升级功能。我们不推荐也不支持把它用于其他目的。这个选项在未来的发行中可能被改变而不做通知。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--column-inserts</option></term>
      <term><option>--attribute-inserts</option></term>
      <listitem>
       <para>
        将数据转储为带有显式列名的<command>INSERT</command>命令（<literal>INSERT INTO
        <replaceable>table</replaceable>
        (<replaceable>column</replaceable>, ...) VALUES
        ...</literal>）。这将使得恢复过程非常慢，这主要用于使转储能够被载入到非<productname>PostgreSQL</productname>数据库中。不过，由于这个选项为每一行都产生一个单独的命令，重载一行时的一个错误只会导致那一行被丢失而不是整个表内容丢失。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--disable-dollar-quoting</option></term>
      <listitem>
       <para>
        这个选项禁止在函数体中使用美元符号引用，并且强制它们使用 SQL 标准字符串语法被引用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--disable-triggers</option></term>
      <listitem>
       <para>
        只有在创建一个只转储数据的转储时，这个选项才相关。它指示<application>pg_dump</application>包括在数据被重新载入时能够临时禁用目标表上的触发器的命令。如果你在表上有引用完整性检查或其他触发器，并且你在数据重新载入期间不想调用它们，请使用这个选项。
       </para>

       <para>
        当前，为<option>--disable-triggers</option>发出的命令必须作为超级用户来执行。因此，你还应当使用<option>-S</option>指定一个超级用户名，或者宁可作为一个超级用户启动结果脚本。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在调用<command>pg_restore</command>时指定这个选项。
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><option>--enable-row-security</option></term>
      <listitem>
       <para>
        只有在转储具有行安全性的表的内容时，这个选项才相关。默认情况下，
        <application>pg_dump</application>将把
        <xref linkend="guc-row-security"/>设置为 off 来确保从该表中转储
        出所有的数据。如果用户不具有足够能绕过行安全性的特权，那么会抛出
        一个错误这个参数指示<application>pg_dump</application>将
        <xref linkend="guc-row-security"/>设置为 on，允许用户只转储该表中
        它们能够访问到的部分内容。
       </para>

       <para>
        注意如果当前你使用了这个选项，你可能还想得到<command>INSERT</command>格式的转储，因为恢复期间的<command>COPY FROM</command>不支持行安全性。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--exclude-table-data=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
        不转储匹配<replaceable class="parameter">table</replaceable>模式的任何表中的数据。该模式根据<option>-t</option>的相同规则被解释。<option>--exclude-table-data</option>可以被给定多次来排除匹配多个模式的表。当你需要一个特定表的定义但不想要其中的数据时，这个选项就有用了。
       </para>
       <para>
        要排除数据库中所有表的数据，见<option>--schema-only</option>。
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><option>--if-exists</option></term>
      <listitem>
       <para>
        时间条件性命令（即增加一个<literal>IF EXISTS</literal>子句）来清除数据库和其他对象。
        只有同时指定了<option>--clean</option>时，这个选项才可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--inserts</option></term>
      <listitem>
       <para>
        将数据转储为<command>INSERT</command>命令（而不是<command>COPY</command>）。这将使得恢复非常慢，这主要用于使转储能够被载入到非<productname>PostgreSQL</productname>数据库中。不过，由于这个选项为每一行都产生一个单独的命令，重载一行时的一个错误只会导致那一行被丢失而不是整个表内容丢失。注意如果你已经重新安排了列序，该恢复可能会一起失败。<option>--column-inserts</option>选项对于列序改变是安全的，但是会更慢。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--load-via-partition-root</option></term>
      <listitem>
       <para>
        在为一个分区表转储数据时，让<command>COPY</command>语句或者<command>INSERT</command>语句把包含它的分区层次的根而不是分区自身作为目标。这导致在数据被装载时，会为每一个行重新确定合适的分区。如果在一台服务器上重新装载数据时会出现行并不是总是落入到和原始服务器上相同的分区中的情况，这个选项就很有用。例如，如果分区列是文本类型并且两个系统中用于排序分区列的排序规则有着不同的定义，就会发生这种情况。
       </para>

       <para>
        在从用这个选项制作的归档恢复时，最好不要使用并行，因为<application>pg_restore</application>将不能准确地知道一个给定的归档数据项将把数据装载到哪个分区中。这会导致效率不高，因为在并行任务见会有锁冲突，或者甚至可能由于在所有的相关数据被装载前建立了外键约束而导致重新装载失败。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--lock-wait-timeout=<replaceable class="parameter">timeout</replaceable></option></term>
      <listitem>
       <para>
        在转储的开始从不等待共享表锁的获得。而是在指定的<replaceable class="parameter">timeout</replaceable>内不能锁定一个表时失败。超时时长可以用<command>SET statement_timeout</command>接受的任何格式指定（允许的值根据你从其转出的服务器版本变化，但是从 7.3 以来的所有版本都接受一个整数表示的毫秒数。如果从 7.3 以前的服务器转出，这个选项会被忽略。）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-comments</option></term>
      <listitem>
       <para>
        不转储注释。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-publications</option></term>
      <listitem>
       <para>
        不转储publication。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-security-labels</option></term>
      <listitem>
       <para>
        不转储安全标签。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-subscriptions</option></term>
      <listitem>
       <para>
        不转储订阅。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-sync</option></term>
      <listitem>
       <para>
        默认情况下，<command>pg_dump</command>将等待所有文件被安全地写入磁盘。这个选项会让<command>pg_dump</command>不等待直接返回，这样会更快，但是也意味着后续的一次操作系统崩溃会让该转储损坏。通常这个选项对测试有用，但是不应该在从生产安装中转储数据时使用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-synchronized-snapshots</option></term>
      <listitem>
       <para>
        这个选项允许对 9.2 以前的服务器运行<command>pg_dump -j</command>，详见<option>-j</option>参数的文档。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-tablespaces</option></term>
      <listitem>
       <para>
        不要输出选择表空间的命令。通过这个选项，在恢复期间所有的对象都会被创建在任何作为默认的表空间中。
       </para>

       <para>
        这个选项只对纯文本格式有意义。对于归档格式，你可以在调用<command>pg_restore</command>时指定该选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-unlogged-table-data</option></term>
      <listitem>
       <para>
        不转储非日志记录表的内容。这个选项对于表定义（模式）是否被转储没有影响，它只会限制转储表数据。当从一个后备服务器转储时，在非日志记录表中的数据总是会被排除。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--quote-all-identifiers</option></term>
      <listitem>
       <para>
        强制引用所有标识符。当从<productname>PostgreSQL</productname>主版本与<application>pg_dump</application>不同的服务器上转储一个数据库时或者当输出准备载入到一个具有不同主版本的服务器时，推荐使用这个选项。默认情况下，<application>pg_dump</application>只对在其主版本中是被保留词的标识符加上引号。在转储其他版本服务器时，这种默认行为有时会导致兼容性问题，因为那些版本可能具有些许不同的被保留词集合。使用<option>--quote-all-identifiers</option>能阻止这种问题，但代价是转储脚本更难阅读。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>--section=<replaceable class="parameter">sectionname</replaceable></option></term>
       <listitem>
         <para>
          只转储命名节。节的名称可以是<option>pre-data</option>、<option>data</option>或<option>post-data</option>。这个选项可以被指定多次来选择多个节。默认是转储所有节。
         </para>
         <para>
          数据节包含真正的表数据、大对象内容和序列值。数据后项包括索引、触发器、规则和除了已验证检查约束之外的约束的定义。数据前项包括所有其他数据定义项。
         </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--serializable-deferrable</option></term>
      <listitem>
       <para>
        为转储使用一个<literal>可序列化</literal>事务，以保证所使用的快照与后来的数据库状态是一致的。但是这样做是在事务流中等待一个点，在该点上不能存在异常，这样就不会有转储失败或者导致其他事务带着<literal>serialization_failure</literal>回滚的风险。关于事务隔离和并发控制详见<xref linkend="mvcc"/>。
       </para>

       <para>
        对于一个只为灾难恢复存在的转储，这个选项没什么益处。如果一个转储被用来在原始数据库持续被更新期间载入一份用于报表或其他只读负载的数据库拷贝时，这个选项就有所帮助。如果没有这个选项，转储可能会反映一个与最终提交事务的任何执行序列都不一致的状态。例如，如果使用了批处理技术，一个批处理在转储中可以显示为关闭，而其中的所有项都不出现。
       </para>

       <para>
        如果 pg_dump 被启动时没有读写事务在活动，则这个选项没有什么不同。如果有读写事务在活动，该转储的启动可能会被延迟一段不确定的时间。一旦开始运行，有没有这个开关的表现是相同的。
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry>
       <term><option>--snapshot=<replaceable class="parameter">snapshotname</replaceable></option></term>
       <listitem>
         <para>
          在做一个数据库的转储时指定一个同步的快照（详见
          <xref linkend="functions-snapshot-synchronization-table"/>）。
         </para>
         <para>
          在需要把转储和一个逻辑复制槽（见<xref linkend="logicaldecoding"/>）
          或者一个并发会话同步时可以用上这个选项。
         </para>
         <para>
          在并行转储的情况下，将使用这个选项指定的快照名而不是取一个新快照。
         </para>
       </listitem>
     </varlistentry>
     
     <varlistentry>
      <term><option>--strict-names</option></term>
      <listitem>
       <para>
        要求每一个模式（<option>-n</option>/<option>--schema</option>）和表（<option>-t</option>/<option>--table</option>）限定符匹配要转储的数据库中至少一个模式/表。注意，如果没有找到有这样的模式/表限定符匹配，即便没有<option>--strict-names</option>，<application>pg_dump</application>也将生成一个错误。
       </para>
       <para>
        这个选项对<option>-N</option>/<option>--exclude-schema</option>、<option>-T</option>/<option>--exclude-table</option>或者<option>--exclude-table-data</option>没有效果。无法匹配任何对象的排除模式不会被当作错误。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--use-set-session-authorization</option></term>
      <listitem>
       <para>
        输出 SQL-标准的<command>SET SESSION AUTHORIZATION</command>命令取代<command>ALTER OWNER</command>命令来确定对象的所有关系。这让该转储更加兼容标准，但是取决于该转储中对象的历史，该转储可能无法正常恢复。而且，一个使用<command>SET SESSION AUTHORIZATION</command>的转储将一定会要求超级用户特权来正确地恢复，而<command>ALTER OWNER</command>要求更少的特权。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-?</option></term>
       <term><option>--help</option></term>
       <listitem>
       <para>
       显示有关<application>pg_dump</application>命令行参数的帮助并退出。
       </para>
       </listitem>
     </varlistentry>

    </variablelist>
   </para>

<!--==========================orignal english content==========================
   <para>
    The following command-line options control the database connection parameters.

    <variablelist>
     <varlistentry>
      <term><option>-d <replaceable class="parameter">dbname</replaceable></option></term>
      <term><option>-&minus;dbname=<replaceable class="parameter">dbname</replaceable></option></term>
      <listitem>
      <para>
       Specifies the name of the database to connect to. This is
       equivalent to specifying <replaceable
       class="parameter">dbname</replaceable> as the first non-option
       argument on the command line.
      </para>
      <para>
       If this parameter contains an <symbol>=</symbol> sign or starts
       with a valid <acronym>URI</acronym> prefix
       (<literal>postgresql://</literal>
       or <literal>postgres://</literal>), it is treated as a
       <parameter>conninfo</parameter> string. See <xref linkend="libpq-connect"/> for more information.
      </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-h <replaceable class="parameter">host</replaceable></option></term>
      <term><option>-&minus;host=<replaceable class="parameter">host</replaceable></option></term>
      <listitem>
       <para>
        Specifies the host name of the machine on which the server is
        running.  If the value begins with a slash, it is used as the
        directory for the Unix domain socket. The default is taken
        from the <envar>PGHOST</envar> environment variable, if set,
        else a Unix domain socket connection is attempted.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>-&minus;port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
       <para>
        Specifies the TCP port or local Unix domain socket file
        extension on which the server is listening for connections.
        Defaults to the <envar>PGPORT</envar> environment variable, if
        set, or a compiled-in default.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U <replaceable>username</replaceable></option></term>
      <term><option>-&minus;username=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        User name to connect as.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</option></term>
      <term><option>-&minus;no-password</option></term>
      <listitem>
       <para>
        Never issue a password prompt.  If the server requires
        password authentication and a password is not available by
        other means such as a <filename>.pgpass</filename> file, the
        connection attempt will fail.  This option can be useful in
        batch jobs and scripts where no user is present to enter a
        password.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-W</option></term>
      <term><option>-&minus;password</option></term>
      <listitem>
       <para>
        Force <application>pg_dump</application> to prompt for a
        password before connecting to a database.
       </para>

       <para>
        This option is never essential, since
        <application>pg_dump</application> will automatically prompt
        for a password if the server demands password authentication.
        However, <application>pg_dump</application> will waste a
        connection attempt finding out that the server wants a password.
        In some cases it is worth typing <option>-W</option> to avoid the extra
        connection attempt.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-&minus;role=<replaceable class="parameter">rolename</replaceable></option></term>
      <listitem>
       <para>
        Specifies a role name to be used to create the dump.
        This option causes <application>pg_dump</application> to issue a
        <command>SET ROLE</command> <replaceable class="parameter">rolename</replaceable>
        command after connecting to the database. It is useful when the
        authenticated user (specified by <option>-U</option>) lacks privileges
        needed by <application>pg_dump</application>, but can switch to a role with
        the required rights.  Some installations have a policy against
        logging in directly as a superuser, and use of this option allows
        dumps to be made without violating the policy.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
____________________________________________________________________________-->
   <para>
    下列命令行选项控制数据库连接参数。

    <variablelist>
     <varlistentry>
      <term><option>-d <replaceable class="parameter">dbname</replaceable></option></term>
      <term><option>--dbname=<replaceable class="parameter">dbname</replaceable></option></term>
      <listitem>
      <para>
       指定要连接到的数据库名。这等效于指定<replaceable
       class="parameter">dbname</replaceable>为命令行上的第一个非选项参数。
      </para>
      <para>
       如果这个参数包含一个<symbol>=</symbol>符号或者以一个合法的<acronym>URI</acronym>前缀（<literal>postgresql://</literal>或<literal>postgres://</literal>）开始，它将被视作一个<parameter>conninfo</parameter>字符串。详见<xref linkend="libpq-connect"/>。
      </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-h <replaceable class="parameter">host</replaceable></option></term>
      <term><option>--host=<replaceable class="parameter">host</replaceable></option></term>
      <listitem>
       <para>
        指定服务器正在运行的机器的主机名。如果该值开始于一个斜线，它被用作一个 Unix 域套接字的目录。默认是从<envar>PGHOST</envar>环境变量中取得（如果被设置），否则将尝试一次 Unix 域套接字连接。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>--port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
       <para>
        指定服务器正在监听连接的 TCP 端口或本地 Unix 域套接字文件扩展名。默认是放在<envar>PGPORT</envar>环境变量中（如果被设置），否则使用编译在程序中的默认值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U <replaceable>username</replaceable></option></term>
      <term><option>--username=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        要作为哪个用户连接。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</option></term>
      <term><option>--no-password</option></term>
      <listitem>
       <para>
        从不发出一个口令提示。如果服务器要求口令认证并且没有其他方式提供口令（例如一个<filename>.pgpass</filename>文件），那么连接尝试将失败。这个选项对于批处理任务和脚本有用，因为在其中没有一个用户来输入口令。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-W</option></term>
      <term><option>--password</option></term>
      <listitem>
       <para>
        强制<application>pg_dump</application>在连接到一个数据库之前提示要求一个口令。
       </para>

       <para>
        这个选项从来不是必须的，因为如果服务器要求口令认证，<application>pg_dump</application>将自动提示要求一个口令。但是，<application>pg_dump</application>将浪费一次连接尝试来发现服务器想要一个口令。在某些情况下，值得键入<option>-W</option>来避免额外的连接尝试。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--role=<replaceable class="parameter">rolename</replaceable></option></term>
      <listitem>
       <para>
        指定一个用来创建该转储的角色名。这个选项导致<application>pg_dump</application>在连接到数据库后发出一个<command>SET ROLE</command> <replaceable class="parameter">rolename</replaceable>命令。当已认证用户（由<option>-U</option>指定）缺少<application>pg_dump</application>所需的特权但是能够切换到一个具有所需权利的角色时，这个选项很有用。一些安装有针对直接作为超级用户登录的策略，使用这个选项可以让转储在不违反该策略的前提下完成。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Environment</title>
____________________________________________________________________________-->
  <title>环境</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><envar>PGDATABASE</envar></term>
____________________________________________________________________________-->
    <term><envar>PGDATABASE</envar></term>
<!--==========================orignal english content==========================
    <term><envar>PGHOST</envar></term>
____________________________________________________________________________-->
    <term><envar>PGHOST</envar></term>
<!--==========================orignal english content==========================
    <term><envar>PGOPTIONS</envar></term>
____________________________________________________________________________-->
    <term><envar>PGOPTIONS</envar></term>
<!--==========================orignal english content==========================
    <term><envar>PGPORT</envar></term>
____________________________________________________________________________-->
    <term><envar>PGPORT</envar></term>

<!--==========================orignal english content==========================
    <term><envar>PGUSER</envar></term>
____________________________________________________________________________-->
    <term><envar>PGUSER</envar></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Default connection parameters.
     </para>
____________________________________________________________________________-->
     <para>
      默认连接参数
     </para>
    </listitem>

   </varlistentry>
  </variablelist>

<!--==========================orignal english content==========================
  <para>
   This utility, like most other <productname>PostgreSQL</productname> utilities,
   also uses the environment variables supported by <application>libpq</application>
   (see <xref linkend="libpq-envars"/>).
  </para>
____________________________________________________________________________-->
  <para>
   和大部分其他<productname>PostgreSQL</productname>工具相似，这个工具也使用<application>libpq</application>（见<xref linkend="libpq-envars"/>）支持的环境变量。
  </para>

 </refsect1>

 <refsect1 id="app-pgdump-diagnostics">
<!--==========================orignal english content==========================
  <title>Diagnostics</title>
____________________________________________________________________________-->
  <title>诊断</title>

<!--==========================orignal english content==========================
  <para>
   <application>pg_dump</application> internally executes
   <command>SELECT</command> statements. If you have problems running
   <application>pg_dump</application>, make sure you are able to
   select information from the database using, for example, <xref
   linkend="app-psql"/>.  Also, any default connection settings and environment
   variables used by the <application>libpq</application> front-end
   library will apply.
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_dump</application>在内部执行<command>SELECT</command>语句。如果你运行<application>pg_dump</application>时出现问题，确定你能够从正在使用的数据库中选择信息，例如<xref linkend="app-psql"/>。此外，<application>libpq</application>前端-后端库所使用的任何默认连接设置和环境变量都将适用。
  </para>

<!--==========================orignal english content==========================
  <para>
   The database activity of <application>pg_dump</application> is
   normally collected by the statistics collector.  If this is
   undesirable, you can set parameter <varname>track_counts</varname>
   to false via <envar>PGOPTIONS</envar> or the <literal>ALTER
   USER</literal> command.
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_dump</application>的数据库活动会被统计收集器正常地收集。如果不想这样，你可以通过<envar>PGOPTIONS</envar>或<literal>ALTER USER</literal>命令设置参数<varname>track_counts</varname>为假。
  </para>

 </refsect1>


 <refsect1 id="pg-dump-notes">
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   If your database cluster has any local additions to the <literal>template1</literal> database,
   be careful to restore the output of <application>pg_dump</application> into a
   truly empty database; otherwise you are likely to get errors due to
   duplicate definitions of the added objects.  To make an empty database
   without any local additions, copy from <literal>template0</literal> not <literal>template1</literal>,
   for example:
<programlisting>
CREATE DATABASE foo WITH TEMPLATE template0;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   如果你的数据库集簇对于<literal>template1</literal>数据库有任何本地添加，要注意将<application>pg_dump</application>的输出恢复到一个真正的空数据库。否则你很可能由于以增加对象的重复定义而得到错误。要创建一个不带任何本地添加的空数据库，从<literal>template0</literal>而不是<literal>template1</literal>复制它，例如：
<programlisting>
CREATE DATABASE foo WITH TEMPLATE template0;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   When a data-only dump is chosen and the option <option>-&minus;disable-triggers</option>
   is used, <application>pg_dump</application> emits commands
   to disable triggers on user tables before inserting the data,
   and then commands to re-enable them after the data has been
   inserted.  If the restore is stopped in the middle, the system
   catalogs might be left in the wrong state.
  </para>
____________________________________________________________________________-->
  <para>
   当一个只含数据的转储被选中并且使用了选项<option>--disable-triggers</option>时，<application>pg_dump</application>在开始插入数据之前会发出命令禁用用户表上的触发器，并且接着在数据被插入之后发出命令重新启用它们。如果恢复中途被停止，系统目录可能会停留在一种错误状态。
  </para>

<!--==========================orignal english content==========================
  <para>
   The dump file produced by <application>pg_dump</application>
   does not contain the statistics used by the optimizer to make
   query planning decisions.  Therefore, it is wise to run
   <command>ANALYZE</command> after restoring from a dump file
   to ensure optimal performance; see <xref linkend="vacuum-for-statistics"/>
   and <xref linkend="autovacuum"/> for more information.
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_dump</application>产生的转储文件不包含优化器用来做出查询计划决定的统计信息。因此，在从一个转储文件恢复后运行<command>ANALYZE</command>来确保最优性能是明智的，详见<xref linkend="vacuum-for-statistics"/>和<xref linkend="autovacuum"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Because <application>pg_dump</application> is used to transfer data
   to newer versions of <productname>PostgreSQL</productname>, the output of
   <application>pg_dump</application> can be expected to load into
   <productname>PostgreSQL</productname> server versions newer than
   <application>pg_dump</application>'s version.  <application>pg_dump</application> can also
   dump from <productname>PostgreSQL</productname> servers older than its own version.
   (Currently, servers back to version 8.0 are supported.)
   However, <application>pg_dump</application> cannot dump from
   <productname>PostgreSQL</productname> servers newer than its own major version;
   it will refuse to even try, rather than risk making an invalid dump.
   Also, it is not guaranteed that <application>pg_dump</application>'s output can
   be loaded into a server of an older major version &mdash; not even if the
   dump was taken from a server of that version.  Loading a dump file
   into an older server may require manual editing of the dump file
   to remove syntax not understood by the older server.
   Use of the <option>-&minus;quote-all-identifiers</option> option is recommended
   in cross-version cases, as it can prevent problems arising from varying
   reserved-word lists in different <productname>PostgreSQL</productname> versions.
  </para>
____________________________________________________________________________-->
  <para>
   因为<application>pg_dump</application>被用来传输数据到更新版本的<productname>PostgreSQL</productname>，<application>pg_dump</application>的输出被认为可以载入到比<application>pg_dump</application>版本更新的<productname>PostgreSQL</productname>服务器中。<application>pg_dump</application>也能够从比其版本更旧的<productname>PostgreSQL</productname>服务器中转储（当前支持回退到版本 7.0）。不过，<application>pg_dump</application>无法从比起主版本号更新的<productname>PostgreSQL</productname>服务器中转储，它甚至将拒绝冒着创建一个非法转储的风险尝试。还有，不保证<application>pg_dump</application>的输出能被载入到一个更旧主版本的服务器 &mdash; 即使该转储是从该版本的服务器中被取得也不行。将一个转储文件载入到一个更旧的服务器可能需要手工编辑该转储文件来移除旧服务器无法理解的语法。在跨版本的情况下，推荐使用<option>--quote-all-identifiers</option>选项，因为它可以避免因为不同<productname>PostgreSQL</productname>版本间的保留词列表变化而发生问题。
  </para>

<!--==========================orignal english content==========================
  <para>
   When dumping logical replication subscriptions,
   <application>pg_dump</application> will generate <command>CREATE
   SUBSCRIPTION</command> commands that use the <literal>connect = false</literal>
   option, so that restoring the subscription does not make remote connections
   for creating a replication slot or for initial table copy.  That way, the
   dump can be restored without requiring network access to the remote
   servers.  It is then up to the user to reactivate the subscriptions in a
   suitable way.  If the involved hosts have changed, the connection
   information might have to be changed.  It might also be appropriate to
   truncate the target tables before initiating a new full table copy.
  </para>
____________________________________________________________________________-->
  <para>
   在转储逻辑复制订阅时，<application>pg_dump</application>将生成使用<literal>connect = false</literal>选项的<command>CREATE SUBSCRIPTION</command>命令，这样恢复订阅时不会建立远程连接来创建复制槽或者进行初始的表拷贝。通过这种方式，可以无需到远程服务器的网络访问就能恢复该转储。然后就需要用户以一种合适的方式重新激活订阅。如果涉及到的主机已经改变，连接信息可能也必须被改变。在开启一次新的全表拷贝之前，截断目标表也可能是合适的。
  </para>
 </refsect1>

 <refsect1 id="pg-dump-examples">
<!--==========================orignal english content==========================
  <title id="pg-dump-examples-title">Examples</title>
____________________________________________________________________________-->
  <title id="pg-dump-examples-title">实例</title>

<!--==========================orignal english content==========================
  <para>
   To dump a database called <literal>mydb</literal> into a SQL-script file:
<screen>
<prompt>$</prompt> <userinput>pg_dump mydb &gt; db.sql</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要把一个数据库<literal>mydb</literal>转储到一个 SQL 脚本文件：
<screen>
<prompt>$</prompt> <userinput>pg_dump mydb &gt; db.sql</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To reload such a script into a (freshly created) database named
   <literal>newdb</literal>:

<screen>
<prompt>$</prompt> <userinput>psql -d newdb -f db.sql</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要把这样一个脚本重新载入到一个（新创建的）名为<literal>newdb</literal>的数据库中：

<screen>
<prompt>$</prompt> <userinput>psql -d newdb -f db.sql</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To dump a database into a custom-format archive file:

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fc mydb &gt; db.dump</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要转储一个数据库到一个自定义格式归档文件：

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fc mydb &gt; db.dump</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To dump a database into a directory-format archive:

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fd mydb -f dumpdir</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要转储一个数据库到一个目录格式的归档：

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fd mydb -f dumpdir</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To dump a database into a directory-format archive in parallel with
   5 worker jobs:

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fd mydb -j 5 -f dumpdir</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要用 5 个并行的工作者任务转储一个数据库到一个目录格式的归档：

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fd mydb -j 5 -f dumpdir</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To reload an archive file into a (freshly created) database named
   <literal>newdb</literal>:

<screen>
<prompt>$</prompt> <userinput>pg_restore -d newdb db.dump</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要把一个归档文件重新载入到一个（新创建的）名为<literal>newdb</literal>的数据库：

<screen>
<prompt>$</prompt> <userinput>pg_restore -d newdb db.dump</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To reload an archive file into the same database it was dumped from,
   discarding the current contents of that database:

<screen>
<prompt>$</prompt> <userinput>pg_restore -d postgres -&minus;clean -&minus;create db.dump</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   把一个归档文件重新装载到同一个数据库（该归档正是从这个数据库中转储得来）中，丢掉那个数据库中的当前内容：

<screen>
<prompt>$</prompt> <userinput>pg_restore -d postgres --clean --create db.dump</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To dump a single table named <literal>mytab</literal>:

<screen>
<prompt>$</prompt> <userinput>pg_dump -t mytab mydb &gt; db.sql</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要转储一个名为<literal>mytab</literal>的表：

<screen>
<prompt>$</prompt> <userinput>pg_dump -t mytab mydb &gt; db.sql</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To dump all tables whose names start with <literal>emp</literal> in the
   <literal>detroit</literal> schema, except for the table named
   <literal>employee_log</literal>:

<screen>
<prompt>$</prompt> <userinput>pg_dump -t 'detroit.emp*' -T detroit.employee_log mydb &gt; db.sql</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要转储<literal>detroit</literal>模式中名称以<literal>emp</literal>开始的所有表，排除名为<literal>employee_log</literal>的表：

<screen>
<prompt>$</prompt> <userinput>pg_dump -t 'detroit.emp*' -T detroit.employee_log mydb &gt; db.sql</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To dump all schemas whose names start with <literal>east</literal> or
   <literal>west</literal> and end in <literal>gsm</literal>, excluding any schemas whose
   names contain the word <literal>test</literal>:

<screen>
<prompt>$</prompt> <userinput>pg_dump -n 'east*gsm' -n 'west*gsm' -N '*test*' mydb &gt; db.sql</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要转储名称以<literal>east</literal>或者<literal>west</literal>开始并且以<literal>gsm</literal>结束的所有模式，排除名称包含词<literal>test</literal>的任何模式：

<screen>
<prompt>$</prompt> <userinput>pg_dump -n 'east*gsm' -n 'west*gsm' -N '*test*' mydb &gt; db.sql</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   The same, using regular expression notation to consolidate the switches:

<screen>
<prompt>$</prompt> <userinput>pg_dump -n '(east|west)*gsm' -N '*test*' mydb &gt; db.sql</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   同样，用正则表达式记号法来合并开关：

<screen>
<prompt>$</prompt> <userinput>pg_dump -n '(east|west)*gsm' -N '*test*' mydb &gt; db.sql</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To dump all database objects except for tables whose names begin with
   <literal>ts_</literal>:

<screen>
<prompt>$</prompt> <userinput>pg_dump -T 'ts_*' mydb &gt; db.sql</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   要转储除了名称以<literal>ts_</literal>开头的表之外的所有数据库对象：

<screen>
<prompt>$</prompt> <userinput>pg_dump -T 'ts_*' mydb &gt; db.sql</userinput>
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   To specify an upper-case or mixed-case name in <option>-t</option> and related
   switches, you need to double-quote the name; else it will be folded to
   lower case (see <xref
   linkend="app-psql-patterns" endterm="app-psql-patterns-title"/>).  But
   double quotes are special to the shell, so in turn they must be quoted.
   Thus, to dump a single table with a mixed-case name, you need something
   like

<screen>
<prompt>$</prompt> <userinput>pg_dump -t "\"MixedCaseName\"" mydb &gt; mytab.sql</userinput>
</screen></para>
____________________________________________________________________________-->
  <para>
   要在<option>-t</option>和相关开关中指定一个大写形式或混合大小写形式的名称，你需要双引用该名称，否则它会被折叠到小写形式（见<xref linkend="app-psql-patterns" endterm="app-psql-patterns-title"/>）。但是双引号对于 shell 是特殊的，所以反过来它们必须被引用。因此，要转储一个有混合大小写名称的表，你需要类似这样的东西：

<screen>
<prompt>$</prompt> <userinput>pg_dump -t "\"MixedCaseName\"" mydb &gt; mytab.sql</userinput>
</screen></para>

 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="app-pg-dumpall"/></member>
   <member><xref linkend="app-pgrestore"/></member>
   <member><xref linkend="app-psql"/></member>
  </simplelist>
 </refsect1>

</refentry>

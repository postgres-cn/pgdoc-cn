<!--
doc/src/sgml/ref/values.sgml
PostgreSQL documentation
-->

<refentry id="SQL-VALUES">
<!--==========================orignal english content==========================
 <indexterm zone="sql-values">
  <primary>VALUES</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-values">
  <primary>VALUES</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>VALUES</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>VALUES</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>VALUES</refname>
  <refpurpose>compute a set of rows</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>VALUES</refname>
  <refpurpose>计算一个行集合</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
VALUES ( <replaceable class="parameter">expression</replaceable> [, ...] ) [, ...]
    [ ORDER BY <replaceable class="parameter">sort_expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operator</replaceable> ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">count</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">start</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">count</replaceable> ] { ROW | ROWS } ONLY ]
</synopsis>
____________________________________________________________________________-->
<synopsis>
VALUES ( <replaceable class="parameter">expression</replaceable> [, ...] ) [, ...]
    [ ORDER BY <replaceable class="parameter">sort_expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operator</replaceable> ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">count</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">start</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">count</replaceable> ] { ROW | ROWS } ONLY ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>VALUES</command> computes a row value or set of row values
   specified by value expressions.  It is most commonly used to generate
   a <quote>constant table</> within a larger command, but it can be
   used on its own.
  </para>
____________________________________________________________________________-->
  <para>
   <command>VALUES</command>计算由值表达式指定的一个行值或者
   一组行值。更常见的是把它用来生成一个大型命令内的<quote>常量表</quote>，
   但是它也可以被独自使用。
  </para>

<!--==========================orignal english content==========================
  <para>
   When more than one row is specified, all the rows must have the same
   number of elements.  The data types of the resulting table's columns are
   determined by combining the explicit or inferred types of the expressions
   appearing in that column, using the same rules as for <literal>UNION</>
   (see <xref linkend="typeconv-union-case">).
  </para>
____________________________________________________________________________-->
  <para>
   当多于一行被指定时，所有行都必须具有相同数量的元素。结果表的列数据类型
   由出现在该列的表达式的显式或者推导类型组合决定，决定的规则与
   <literal>UNION</literal>相同（见<xref linkend="typeconv-union-case"/>）。
  </para>

<!--==========================orignal english content==========================
  <para>
   Within larger commands, <command>VALUES</> is syntactically allowed
   anywhere that <command>SELECT</> is.  Because it is treated like a
   <command>SELECT</> by the grammar, it is possible to use
   the <literal>ORDER BY</>, <literal>LIMIT</> (or
   equivalently <literal>FETCH FIRST</literal>),
   and <literal>OFFSET</> clauses with a
   <command>VALUES</> command.
  </para>
____________________________________________________________________________-->
  <para>
   在大型的命令中，在语法上允许<command>VALUES</command>出现在
   <command>SELECT</command>出现的任何地方。因为语法把它当做一个
   <command>SELECT</command>，可以为一个<command>VALUES</command>
   命令使用<literal>ORDER BY</literal>、
   <literal>LIMIT</literal>（或者等效的<literal>FETCH FIRST</literal>）
   以及<literal>OFFSET</literal>子句。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">expression</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">expression</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A constant or expression to compute and insert at the indicated place
      in the resulting table (set of rows).  In a <command>VALUES</> list
      appearing at the top level of an <command>INSERT</>, an
      <replaceable class="parameter">expression</replaceable> can be replaced
      by <literal>DEFAULT</literal> to indicate that the destination column's
      default value should be inserted.  <literal>DEFAULT</literal> cannot
      be used when <command>VALUES</> appears in other contexts.
     </para>
____________________________________________________________________________-->
     <para>
      要在结果表（行集合）中指定位置计算并且插入的一个常量或者表达式。
      在一个出现于<command>INSERT</command>顶层的
      <command>VALUES</command>列表中，
      <replaceable class="parameter">expression</replaceable>可以
      被<literal>DEFAULT</literal>替代以表示应该插入目标列的默认值。
      当<command>VALUES</command>出现在其他环境中时，不能使用
      <literal>DEFAULT</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">sort_expression</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">sort_expression</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      An expression or integer constant indicating how to sort the result
      rows.  This expression can refer to the columns of the
      <command>VALUES</> result as <literal>column1</>, <literal>column2</>,
      etc.  For more details see
      <xref linkend="sql-orderby" endterm="sql-orderby-title">.
     </para>
____________________________________________________________________________-->
     <para>
      一个指示如何排序结果行的表达式或者整型常量。这个表达式
      可以用<literal>column1</literal>、<literal>column2</literal>等来
      引用该<command>VALUES</command>结果的列。详见
      <xref linkend="sql-orderby" endterm="sql-orderby-title"/>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">operator</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">operator</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      A sorting operator.  For details see
      <xref linkend="sql-orderby" endterm="sql-orderby-title">.
     </para>
____________________________________________________________________________-->
     <para>
      一个排序操作符。详见
      <xref linkend="sql-orderby" endterm="sql-orderby-title"/>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">count</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">count</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The maximum number of rows to return.  For details see
      <xref linkend="sql-limit" endterm="sql-limit-title">.
     </para>
____________________________________________________________________________-->
     <para>
      要返回的最大行数。详见
      <xref linkend="sql-limit" endterm="sql-limit-title"/>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term><replaceable class="parameter">start</replaceable></term>
____________________________________________________________________________-->
    <term><replaceable class="parameter">start</replaceable></term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      The number of rows to skip before starting to return rows.
      For details see
      <xref linkend="sql-limit" endterm="sql-limit-title">.
     </para>
____________________________________________________________________________-->
     <para>
      开始返回行之前要跳过的行数。详见
      <xref linkend="sql-limit" endterm="sql-limit-title"/>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   <command>VALUES</> lists with very large numbers of rows should be avoided,
   as you might encounter out-of-memory failures or poor performance.
   <command>VALUES</> appearing within <command>INSERT</> is a special case
   (because the desired column types are known from the <command>INSERT</>'s
   target table, and need not be inferred by scanning the <command>VALUES</>
   list), so it can handle larger lists than are practical in other contexts.
  </para>
____________________________________________________________________________-->
  <para>
   应该避免具有大量行的<command>VALUES</command>列表，否则可能会
   碰到内存不足失败或者很差的性能。出现在<command>INSERT</command>
   中的<command>VALUES</command>是一种特殊情况（因为想要的列类型
   可以从<command>INSERT</command>的目标表得知，并且不需要通过扫描
   该<command>VALUES</command>列表来推导），因此它可以处理比其他
   环境中更大的列表。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   A bare <command>VALUES</> command:

<programlisting>
VALUES (1, 'one'), (2, 'two'), (3, 'three');
</programlisting>

   This will return a table of two columns and three rows.  It's effectively
   equivalent to:

<programlisting>
SELECT 1 AS column1, 'one' AS column2
UNION ALL
SELECT 2, 'two'
UNION ALL
SELECT 3, 'three';
</programlisting>

  </para>
____________________________________________________________________________-->
  <para>
   一个纯粹的<command>VALUES</command>命令：

<programlisting>
VALUES (1, 'one'), (2, 'two'), (3, 'three');
</programlisting>

   这将返回一个具有两列、三行的表。它实际等效于：

<programlisting>
SELECT 1 AS column1, 'one' AS column2
UNION ALL
SELECT 2, 'two'
UNION ALL
SELECT 3, 'three';
</programlisting>

  </para>

<!--==========================orignal english content==========================
  <para>
   More usually, <command>VALUES</> is used within a larger SQL command.
   The most common use is in <command>INSERT</>:

<programlisting>
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   更常用地，<command>VALUES</command>可以被用在一个大型 SQL 命令中。
   在<command>INSERT</command>中最常用：

<programlisting>
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   In the context of <command>INSERT</>, entries of a <command>VALUES</> list
   can be <literal>DEFAULT</literal> to indicate that the column default
   should be used here instead of specifying a value:

<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'),
    ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama', DEFAULT);
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   在<command>INSERT</command>的环境中，一个<command>VALUES</command>列表
   的项可以是<literal>DEFAULT</literal>来指示应该使用该列的默认值而不是
   指定一个值：

<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'),
    ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama', DEFAULT);
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>VALUES</> can also be used where a sub-<command>SELECT</> might
   be written, for example in a <literal>FROM</> clause:

<programlisting>
SELECT f.*
  FROM films f, (VALUES('MGM', 'Horror'), ('UA', 'Sci-Fi')) AS t (studio, kind)
  WHERE f.studio = t.studio AND f.kind = t.kind;

UPDATE employees SET salary = salary * v.increase
  FROM (VALUES(1, 200000, 1.2), (2, 400000, 1.4)) AS v (depno, target, increase)
  WHERE employees.depno = v.depno AND employees.sales &gt;= v.target;
</programlisting>

   Note that an <literal>AS</> clause is required when <command>VALUES</>
   is used in a <literal>FROM</> clause, just as is true for
   <command>SELECT</>.  It is not required that the <literal>AS</> clause
   specify names for all the columns, but it's good practice to do so.
   (The default column names for <command>VALUES</> are <literal>column1</>,
   <literal>column2</>, etc in <productname>PostgreSQL</productname>, but
   these names might be different in other database systems.)
  </para>
____________________________________________________________________________-->
  <para>
   <command>VALUES</command>也可以被用在可以写子-<command>SELECT</command>
   的地方，例如在一个<literal>FROM</literal>子句中：

<programlisting>
SELECT f.*
  FROM films f, (VALUES('MGM', 'Horror'), ('UA', 'Sci-Fi')) AS t (studio, kind)
  WHERE f.studio = t.studio AND f.kind = t.kind;

UPDATE employees SET salary = salary * v.increase
  FROM (VALUES(1, 200000, 1.2), (2, 400000, 1.4)) AS v (depno, target, increase)
  WHERE employees.depno = v.depno AND employees.sales &gt;= v.target;
</programlisting>

   注意当<command>VALUES</command>被用在一个<literal>FROM</literal>子句中时，
   需要提供一个<literal>AS</literal>子句，与<command>SELECT</command>相同。
   不需要为所有的列用<literal>AS</literal>子句指定名称，但是那样做是一种好
   习惯（在<productname>PostgreSQL</productname>中，
   <command>VALUES</command>的默认列名是<literal>column1</literal>、
   <literal>column2</literal>等，但在其他数据库系统中可能会不同）。
  </para>

<!--==========================orignal english content==========================
  <para>
   When <command>VALUES</> is used in <command>INSERT</>, the values are all
   automatically coerced to the data type of the corresponding destination
   column.  When it's used in other contexts, it might be necessary to specify
   the correct data type.  If the entries are all quoted literal constants,
   coercing the first is sufficient to determine the assumed type for all:

<programlisting>
SELECT * FROM machines
WHERE ip_address IN (VALUES('192.168.0.1'::inet), ('192.168.0.10'), ('192.168.1.43'));
</programlisting></para>
____________________________________________________________________________-->
  <para>
   当在<command>INSERT</command>中使用<command>VALUES</command>时，值都会
   被自动地强制为相应目标列的数据类型。当在其他环境中使用时，有必要指定
   正确的数据类型。如果项都是带引号的字符串常量，强制第一个就足以为所有
   项假设数据类型：

<programlisting>
SELECT * FROM machines
WHERE ip_address IN (VALUES('192.168.0.1'::inet), ('192.168.0.10'), ('192.168.1.43'));
</programlisting></para>

  <tip>
<!--==========================orignal english content==========================
   <para>
    For simple <literal>IN</> tests, it's better to rely on the
    <link linkend="functions-comparisons-in-scalar">list-of-scalars</link>
    form of <literal>IN</> than to write a <command>VALUES</>
    query as shown above.  The list of scalars method requires less writing
    and is often more efficient.
   </para>
____________________________________________________________________________-->
   <para>
    对于简单的<literal>IN</literal>测试，最好使用<literal>IN</literal>的
    <link linkend="functions-comparisons-in-scalar">list-of-scalars</link>形式
    而不是写一个上面那样的<command>VALUES</command>查询。标量列表方法的
    书写更少并且常常更加高效。
   </para>
  </tip>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para><command>VALUES</command> conforms to the SQL standard.
   <literal>LIMIT</literal> and <literal>OFFSET</literal> are
   <productname>PostgreSQL</productname> extensions; see also
   under <xref linkend="sql-select">.
  </para>
____________________________________________________________________________-->
  <para><command>VALUES</command>符合 SQL 标准。
   <literal>LIMIT</literal>和<literal>OFFSET</literal>是
   <productname>PostgreSQL</productname>扩展，另见
   <xref linkend="sql-select"/>。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-insert"/></member>
   <member><xref linkend="sql-select"/></member>
  </simplelist>
 </refsect1>
</refentry>

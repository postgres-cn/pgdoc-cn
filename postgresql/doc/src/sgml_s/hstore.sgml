<!-- doc/src/sgml/hstore.sgml -->

<sect1 id="hstore" xreflabel="hstore">
<!--==========================orignal english content==========================
 <title>hstore</title>
____________________________________________________________________________-->
 <title>hstore</title>

<!--==========================orignal english content==========================
 <indexterm zone="hstore">
  <primary>hstore</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="hstore">
  <primary>hstore</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  This module implements the <type>hstore</> data type for storing sets of
  key/value pairs within a single <productname>PostgreSQL</> value.
  This can be useful in various scenarios, such as rows with many attributes
  that are rarely examined, or semi-structured data.  Keys and values are
  simply text strings.
 </para>
____________________________________________________________________________-->
 <para>
  这个模块实现了<type>hstore</type>数据类型用来在一个单一<productname>PostgreSQL</productname>值中存储键值对。这在很多情景下都有用，例如带有很多很少被检查的属性的行或者半结构化数据。键和值都是简单的文本字符串。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title><type>hstore</> External Representation</title>
____________________________________________________________________________-->
  <title><type>hstore</type> 外部表示</title>

<!--==========================orignal english content==========================
  <para>

   The text representation of an <type>hstore</>, used for input and output,
   includes zero or more <replaceable>key</> <literal>=&gt;</>
   <replaceable>value</> pairs separated by commas. Some examples:

<synopsis>
k =&gt; v
foo =&gt; bar, baz =&gt; whatever
"1-a" =&gt; "anything at all"
</synopsis>

   The order of the pairs is not significant (and may not be reproduced on
   output). Whitespace between pairs or around the <literal>=&gt;</> sign is
   ignored. Double-quote keys and values that include whitespace, commas,
   <literal>=</>s or <literal>&gt;</>s. To include a double quote or a
   backslash in a key or value, escape it with a backslash.
  </para>
____________________________________________________________________________-->
  <para>

   一个<type>hstore</type>的文本表示用于输入和输出，包括零个或者多个由逗号分隔的<replaceable>key</replaceable> <literal>=&gt;</literal> <replaceable>value</replaceable>对。一些例子：

<synopsis>
k =&gt; v
foo =&gt; bar, baz =&gt; whatever
"1-a" =&gt; "anything at all"
</synopsis>

   键值对的顺序没有意义（并且在输出时也不会重现）。键值对之间或者<literal>=&gt;</literal>号周围的空白会被忽略。双引号内的键和值可以包括空白、逗号、<literal>=</literal>或<literal>&gt;</literal>。要在一个键或值中包括一个双引号或一个反斜线，用一个反斜线对它转义。
  </para>

<!--==========================orignal english content==========================
  <para>
   Each key in an <type>hstore</> is unique. If you declare an <type>hstore</>
   with duplicate keys, only one will be stored in the <type>hstore</> and
   there is no guarantee as to which will be kept:

<programlisting>
SELECT 'a=&gt;1,a=&gt;2'::hstore;
  hstore
-&minus;-&minus;-&minus;-&minus;-&minus;
 "a"=&gt;"1"
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   一个<type>hstore</type>中的每一个键是唯一的。如果你声明了一个有重复键的<type>hstore</type>，只有一个会被存储在<type>hstore</type>中并且无法保证哪一个将被保留：

<programlisting>
SELECT 'a=&gt;1,a=&gt;2'::hstore;
  hstore
----------
 "a"=&gt;"1"
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   A value (but not a key) can be an SQL <literal>NULL</>. For example:

<programlisting>
key =&gt; NULL
</programlisting>

   The <literal>NULL</> keyword is case-insensitive. Double-quote the
   <literal>NULL</> to treat it as the ordinary string <quote>NULL</quote>.
  </para>
____________________________________________________________________________-->
  <para>
   一个值（但不是一个键）能够是一个 SQL <literal>NULL</literal>。例如：

<programlisting>
key =&gt; NULL
</programlisting>

   <literal>NULL</literal>关键词是大小写不敏感的。将<literal>NULL</literal>放在双引号中可以将它当作一个普通的字符串<quote>NULL</quote>。
  </para>

  <note>
<!--==========================orignal english content==========================
  <para>
   Keep in mind that the <type>hstore</> text format, when used for input,
   applies <emphasis>before</> any required quoting or escaping. If you are
   passing an <type>hstore</> literal via a parameter, then no additional
   processing is needed. But if you're passing it as a quoted literal
   constant, then any single-quote characters and (depending on the setting of
   the <varname>standard_conforming_strings</> configuration parameter)
   backslash characters need to be escaped correctly. See
   <xref linkend="sql-syntax-strings"> for more on the handling of string
   constants.
  </para>
____________________________________________________________________________-->
  <para>
   记住当<type>hstore</type>文本格式当被用于输入时，它应用在任何必须的引用或转义<emphasis>之前</emphasis>。如果你通过一个参数传递一个<type>hstore</type>文字，那么不需要额外的处理。但是如果你将它作为一个引用的文字常数，那么任何单引号字符以及（取决于<varname>standard_conforming_strings</varname>配置参数的设置）反斜线字符需要被正确地转义。更多关于处理字符串常量的处理可见<xref linkend="sql-syntax-strings"/>。
  </para>
  </note>

<!--==========================orignal english content==========================
  <para>
   On output, double quotes always surround keys and values, even when it's
   not strictly necessary.
  </para>
____________________________________________________________________________-->
  <para>
   在输出时，双引号总是围绕着键和值，即使这样做不是绝对必要。
  </para>

 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title><type>hstore</> Operators and Functions</title>
____________________________________________________________________________-->
  <title><type>hstore</type> 操作符和函数</title>

<!--==========================orignal english content==========================
  <para>
   The operators provided by the <literal>hstore</literal> module are
   shown in <xref linkend="hstore-op-table">, the functions
   in <xref linkend="hstore-func-table">.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>hstore</literal>模块所提供的操作符显示在<xref linkend="hstore-op-table"/>中，函数在<xref linkend="hstore-func-table"/>中。
  </para>

  <table id="hstore-op-table">
<!--==========================orignal english content==========================
   <title><type>hstore</> Operators</title>
____________________________________________________________________________-->
   <title><type>hstore</type> 操作符</title>

   <tgroup cols="4">
    <thead>
<!--==========================orignal english content==========================
     <row>
      <entry>Operator</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>操作符</entry>
      <entry>描述</entry>
      <entry>例子</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>-&gt;</> <type>text</></entry>
      <entry>get value for key (<literal>NULL</> if not present)</entry>
      <entry><literal>'a=&gt;x, b=&gt;y'::hstore -&gt; 'a'</literal></entry>
      <entry><literal>x</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>-&gt;</literal> <type>text</type></entry>
      <entry>为键得到值（不存在则是<literal>NULL</literal>）</entry>
      <entry><literal>'a=&gt;x, b=&gt;y'::hstore -&gt; 'a'</literal></entry>
      <entry><literal>x</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>-&gt;</> <type>text[]</></entry>
      <entry>get values for keys (<literal>NULL</> if not present)</entry>
      <entry><literal>'a=&gt;x, b=&gt;y, c=&gt;z'::hstore -&gt; ARRAY['c','a']</literal></entry>
      <entry><literal>{"z","x"}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>-&gt;</literal> <type>text[]</type></entry>
      <entry>为多个键得到值（不存在则是<literal>NULL</literal>）</entry>
      <entry><literal>'a=&gt;x, b=&gt;y, c=&gt;z'::hstore -&gt; ARRAY['c','a']</literal></entry>
      <entry><literal>{"z","x"}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>||</> <type>hstore</></entry>
      <entry>concatenate <type>hstore</>s</entry>
      <entry><literal>'a=&gt;b, c=&gt;d'::hstore || 'c=&gt;x, d=&gt;q'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"b", "c"=&gt;"x", "d"=&gt;"q"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>||</literal> <type>hstore</type></entry>
      <entry>串接<type>hstore</type></entry>
      <entry><literal>'a=&gt;b, c=&gt;d'::hstore || 'c=&gt;x, d=&gt;q'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"b", "c"=&gt;"x", "d"=&gt;"q"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>?</> <type>text</></entry>
      <entry>does <type>hstore</> contain key?</entry>
      <entry><literal>'a=&gt;1'::hstore ? 'a'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>?</literal> <type>text</type></entry>
      <entry><type>hstore</type>是否包含键？</entry>
      <entry><literal>'a=&gt;1'::hstore ? 'a'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>?&amp;</> <type>text[]</></entry>
      <entry>does <type>hstore</> contain all specified keys?</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?&amp; ARRAY['a','b']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>?&amp;</literal> <type>text[]</type></entry>
      <entry><type>hstore</type>是否包含所有指定的键？</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?&amp; ARRAY['a','b']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>?|</> <type>text[]</></entry>
      <entry>does <type>hstore</> contain any of the specified keys?</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?| ARRAY['b','c']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>?|</literal> <type>text[]</type></entry>
      <entry><type>hstore</type>是否包含任何指定的键？</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?| ARRAY['b','c']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>@&gt;</> <type>hstore</></entry>
      <entry>does left operand contain right?</entry>
      <entry><literal>'a=&gt;b, b=&gt;1, c=&gt;NULL'::hstore @&gt; 'b=&gt;1'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>@&gt;</literal> <type>hstore</type></entry>
      <entry>左操作数是否包含右操作数？</entry>
      <entry><literal>'a=&gt;b, b=&gt;1, c=&gt;NULL'::hstore @&gt; 'b=&gt;1'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>&lt;@</> <type>hstore</></entry>
      <entry>is left operand contained in right?</entry>
      <entry><literal>'a=&gt;c'::hstore &lt;@ 'a=&gt;b, b=&gt;1, c=&gt;NULL'</literal></entry>
      <entry><literal>f</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>&lt;@</literal> <type>hstore</type></entry>
      <entry>左操作数是否被包含在右操作数中？</entry>
      <entry><literal>'a=&gt;c'::hstore &lt;@ 'a=&gt;b, b=&gt;1, c=&gt;NULL'</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>-</> <type>text</></entry>
      <entry>delete key from left operand</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'b'::text</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>-</literal> <type>text</type></entry>
      <entry>从左操作数中删除键</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'b'::text</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>-</> <type>text[]</></entry>
      <entry>delete keys from left operand</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - ARRAY['a','b']</literal></entry>
      <entry><literal>"c"=&gt;"3"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>-</literal> <type>text[]</type></entry>
      <entry>从左操作数中删除多个键</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - ARRAY['a','b']</literal></entry>
      <entry><literal>"c"=&gt;"3"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>hstore</> <literal>-</> <type>hstore</></entry>
      <entry>delete matching pairs from left operand</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'a=&gt;4, b=&gt;2'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>hstore</type> <literal>-</literal> <type>hstore</type></entry>
      <entry>从左操作数中删除匹配的对</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'a=&gt;4, b=&gt;2'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><type>record</> <literal>#=</> <type>hstore</></entry>
      <entry>replace fields in <type>record</> with matching values from <type>hstore</></entry>
      <entry>see Examples section</entry>
      <entry></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>record</type> <literal>#=</literal> <type>hstore</type></entry>
      <entry>用来自<type>hstore</type>的匹配值替换<type>record</type>中的域</entry>
      <entry>见示例小节</entry>
      <entry></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><literal>%%</> <type>hstore</></entry>
      <entry>convert <type>hstore</> to array of alternating keys and values</entry>
      <entry><literal>%% 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{a,foo,b,bar}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>%%</literal> <type>hstore</type></entry>
      <entry>把<type>hstore</type>转换成键和值交替出现的数组</entry>
      <entry><literal>%% 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{a,foo,b,bar}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><literal>%#</> <type>hstore</></entry>
      <entry>convert <type>hstore</> to two-dimensional key/value array</entry>
      <entry><literal>%# 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{{a,foo},{b,bar}}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>%#</literal> <type>hstore</type></entry>
      <entry>把<type>hstore</type>转换成二维的键值数组</entry>
      <entry><literal>%# 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{{a,foo},{b,bar}}</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <note>
<!--==========================orignal english content==========================
  <para>
   Prior to PostgreSQL 8.2, the containment operators <literal>@&gt;</>
   and <literal>&lt;@</> were called <literal>@</> and <literal>~</>,
   respectively. These names are still available, but are deprecated and will
   eventually be removed. Notice that the old names are reversed from the
   convention formerly followed by the core geometric data types!
   </para>
____________________________________________________________________________-->
  <para>
   在 PostgreSQL 8.2 之前，包含操作符<literal>@&gt;</literal>和<literal>&lt;@</literal>分别被称为<literal>@</literal>和<literal>~</literal>。这些名称仍然可用，但是已经被弃用并且最终将被移除。注意，旧名称和原来核心几何数据类型所遵循的习惯是相反的！
   </para>
  </note>

  <table id="hstore-func-table">
<!--==========================orignal english content==========================
   <title><type>hstore</> Functions</title>
____________________________________________________________________________-->
   <title><type>hstore</type> 函数</title>

   <tgroup cols="5">
    <thead>
<!--==========================orignal english content==========================
     <row>
      <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>函数</entry>
      <entry>返回类型</entry>
      <entry>描述</entry>
      <entry>例子</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore(record)</function><indexterm><primary>hstore</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <entry>construct an <type>hstore</> from a record or row</entry>
      <entry><literal>hstore(ROW(1,2))</literal></entry>
      <entry><literal>f1=&gt;1,f2=&gt;2</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore(record)</function><indexterm><primary>hstore</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <entry>从一个记录或行构造一个<type>hstore</type></entry>
      <entry><literal>hstore(ROW(1,2))</literal></entry>
      <entry><literal>f1=&gt;1,f2=&gt;2</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore(text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>construct an <type>hstore</> from an array, which may be either
       a key/value array, or a two-dimensional array</entry>
      <entry><literal>hstore(ARRAY['a','1','b','2']) || hstore(ARRAY[['c','3'],['d','4']])</literal></entry>
      <entry><literal>a=&gt;1, b=&gt;2, c=&gt;3, d=&gt;4</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore(text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>从一个数组构造一个<type>hstore</type>，数组可以是一个键值数组或者一个二维数组</entry>
      <entry><literal>hstore(ARRAY['a','1','b','2']) || hstore(ARRAY[['c','3'],['d','4']])</literal></entry>
      <entry><literal>a=&gt;1, b=&gt;2, c=&gt;3, d=&gt;4</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore(text[], text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>construct an <type>hstore</> from separate key and value arrays</entry>
      <entry><literal>hstore(ARRAY['a','b'], ARRAY['1','2'])</literal></entry>
      <entry><literal>"a"=&gt;"1","b"=&gt;"2"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore(text[], text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>从独立的键和值数组构建一个<type>hstore</type></entry>
      <entry><literal>hstore(ARRAY['a','b'], ARRAY['1','2'])</literal></entry>
      <entry><literal>"a"=&gt;"1","b"=&gt;"2"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore(text, text)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>make single-item <type>hstore</></entry>
      <entry><literal>hstore('a', 'b')</literal></entry>
      <entry><literal>"a"=&gt;"b"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore(text, text)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>构造单一项的<type>hstore</type></entry>
      <entry><literal>hstore('a', 'b')</literal></entry>
      <entry><literal>"a"=&gt;"b"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>akeys(hstore)</function><indexterm><primary>akeys</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>get <type>hstore</>'s keys as an array</entry>
      <entry><literal>akeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,b}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>akeys(hstore)</function><indexterm><primary>akeys</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>取得<type>hstore</type>的键作为一个数组</entry>
      <entry><literal>akeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,b}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>skeys(hstore)</function><indexterm><primary>skeys</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
      <entry>get <type>hstore</>'s keys as a set</entry>
      <entry><literal>skeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
a
b
</programlisting></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>skeys(hstore)</function><indexterm><primary>skeys</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
      <entry>取得<type>hstore</type>的键作为一个集合</entry>
      <entry><literal>skeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
a
b
</programlisting></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>avals(hstore)</function><indexterm><primary>avals</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>get <type>hstore</>'s values as an array</entry>
      <entry><literal>avals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{1,2}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>avals(hstore)</function><indexterm><primary>avals</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>取得<type>hstore</type>的值作为一个数组</entry>
      <entry><literal>avals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{1,2}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>svals(hstore)</function><indexterm><primary>svals</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
      <entry>get <type>hstore</>'s values as a set</entry>
      <entry><literal>svals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
1
2
</programlisting></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>svals(hstore)</function><indexterm><primary>svals</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
      <entry>取得<type>hstore</type>的值作为一个集合</entry>
      <entry><literal>svals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
1
2
</programlisting></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore_to_array(hstore)</function><indexterm><primary>hstore_to_array</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>get <type>hstore</>'s keys and values as an array of alternating
       keys and values</entry>
      <entry><literal>hstore_to_array('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,1,b,2}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore_to_array(hstore)</function><indexterm><primary>hstore_to_array</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>取得<type>hstore</type>的键和值作为一个键和值交替出现的数组</entry>
      <entry><literal>hstore_to_array('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,1,b,2}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore_to_matrix(hstore)</function><indexterm><primary>hstore_to_matrix</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>get <type>hstore</>'s keys and values as a two-dimensional array</entry>
      <entry><literal>hstore_to_matrix('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{{a,1},{b,2}}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore_to_matrix(hstore)</function><indexterm><primary>hstore_to_matrix</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>取得<type>hstore</type>的键和值作为一个二维的数组</entry>
      <entry><literal>hstore_to_matrix('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{{a,1},{b,2}}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore_to_json(hstore)</function><indexterm><primary>hstore_to_json</primary></indexterm></entry>
      <entry><type>json</type></entry>
      <entry>get <type>hstore</type> as a <type>json</type> value, converting
       all non-null values to JSON strings</entry>
      <entry><literal>hstore_to_json('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore_to_json(hstore)</function><indexterm><primary>hstore_to_json</primary></indexterm></entry>
      <entry><type>json</type></entry>
      <entry>取得<type>hstore</type>作为一个<type>json</type>值，把所有非空值转换为 JSON 字符串</entry>
      <entry><literal>hstore_to_json('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</literal></entry>
     </row>
     
<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore_to_jsonb(hstore)</function><indexterm><primary>hstore_to_jsonb</primary></indexterm></entry>
      <entry><type>jsonb</type></entry>
      <entry>get <type>hstore</type> as a <type>jsonb</type> value, converting
       all non-null values to JSON strings</entry>
      <entry><literal>hstore_to_jsonb('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore_to_jsonb(hstore)</function><indexterm><primary>hstore_to_jsonb</primary></indexterm></entry>
      <entry><type>jsonb</type></entry>
      <entry>取得<type>hstore</type>作为一个<type>jsonb</type>值，把把所有非空值转换为 JSON 字符串</entry>
      <entry><literal>hstore_to_jsonb('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore_to_json_loose(hstore)</function><indexterm><primary>hstore_to_json_loose</primary></indexterm></entry>
      <entry><type>json</type></entry>
      <entry>get <type>hstore</type> as a <type>json</type> value, but attempt to distinguish numerical and Boolean values so they are unquoted in the JSON</entry>
      <entry><literal>hstore_to_json_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore_to_json_loose(hstore)</function><indexterm><primary>hstore_to_json_loose</primary></indexterm></entry>
      <entry><type>json</type></entry>
      <entry>取得<type>hstore</type>作为一个<type>json</type>值，但是尝试区分数字值和布尔值这样它们在 JSON 中无需引用</entry>
      <entry><literal>hstore_to_json_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</literal></entry>
     </row>
     
<!--==========================orignal english content==========================
     <row>
      <entry><function>hstore_to_jsonb_loose(hstore)</function><indexterm><primary>hstore_to_jsonb_loose</primary></indexterm></entry>
      <entry><type>jsonb</type></entry>
      <entry>get <type>hstore</type> as a <type>jsonb</type> value, but attempt to distinguish numerical and Boolean values so they are unquoted in the JSON</entry>
      <entry><literal>hstore_to_jsonb_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>hstore_to_jsonb_loose(hstore)</function><indexterm><primary>hstore_to_jsonb_loose</primary></indexterm></entry>
      <entry><type>jsonb</type></entry>
      <entry>取得<type>hstore</type>作为一个<type>jsonb</type>值，但是尝试区分数字值和布尔值这样它们在 JSON 中无需引用</entry>
      <entry><literal>hstore_to_jsonb_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>slice(hstore, text[])</function><indexterm><primary>slice</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <entry>extract a subset of an <type>hstore</></entry>
      <entry><literal>slice('a=&gt;1,b=&gt;2,c=&gt;3'::hstore, ARRAY['b','c','x'])</literal></entry>
      <entry><literal>"b"=&gt;"2", "c"=&gt;"3"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>slice(hstore, text[])</function><indexterm><primary>slice</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <entry>从一个<type>hstore</type>抽取一个子集</entry>
      <entry><literal>slice('a=&gt;1,b=&gt;2,c=&gt;3'::hstore, ARRAY['b','c','x'])</literal></entry>
      <entry><literal>"b"=&gt;"2", "c"=&gt;"3"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>each(hstore)</function><indexterm><primary>each</primary></indexterm></entry>
      <entry><type>setof(key text, value text)</type></entry>
      <entry>get <type>hstore</>'s keys and values as a set</entry>
      <entry><literal>select * from each('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
 key | value
-&minus;-&minus;-+-&minus;-&minus;-&minus;-
 a   | 1
 b   | 2
</programlisting></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>each(hstore)</function><indexterm><primary>each</primary></indexterm></entry>
      <entry><type>setof(key text, value text)</type></entry>
      <entry>取得<type>hstore</type>的键和值作为一个集合</entry>
      <entry><literal>select * from each('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
 key | value
-----+-------
 a   | 1
 b   | 2
</programlisting></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>exist(hstore,text)</function><indexterm><primary>exist</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>hstore</> contain key?</entry>
      <entry><literal>exist('a=&gt;1','a')</literal></entry>
      <entry><literal>t</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>exist(hstore,text)</function><indexterm><primary>exist</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
      <entry><type>hstore</type>是否包含键？</entry>
      <entry><literal>exist('a=&gt;1','a')</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>defined(hstore,text)</function><indexterm><primary>defined</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
      <entry>does <type>hstore</> contain non-<literal>NULL</> value for key?</entry>
      <entry><literal>defined('a=&gt;NULL','a')</literal></entry>
      <entry><literal>f</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>defined(hstore,text)</function><indexterm><primary>defined</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
      <entry><type>hstore</type>是否为键包含非<literal>NULL</literal>值？</entry>
      <entry><literal>defined('a=&gt;NULL','a')</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>delete(hstore,text)</function><indexterm><primary>delete</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <entry>delete pair with matching key</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','b')</literal></entry>
      <entry><literal>"a"=&gt;"1"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>delete(hstore,text)</function><indexterm><primary>delete</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <entry>删除匹配键的对</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','b')</literal></entry>
      <entry><literal>"a"=&gt;"1"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>delete(hstore,text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>delete pairs with matching keys</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2,c=&gt;3',ARRAY['a','b'])</literal></entry>
      <entry><literal>"c"=&gt;"3"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>delete(hstore,text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>删除匹配多个键的多个对</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2,c=&gt;3',ARRAY['a','b'])</literal></entry>
      <entry><literal>"c"=&gt;"3"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>delete(hstore,hstore)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>delete pairs matching those in the second argument</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','a=&gt;4,b=&gt;2'::hstore)</literal></entry>
      <entry><literal>"a"=&gt;"1"</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>delete(hstore,hstore)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>删除匹配第二个参数的对</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','a=&gt;4,b=&gt;2'::hstore)</literal></entry>
      <entry><literal>"a"=&gt;"1"</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>populate_record(record,hstore)</function><indexterm><primary>populate_record</primary></indexterm></entry>
      <entry><type>record</type></entry>
      <entry>replace fields in <type>record</> with matching values from <type>hstore</></entry>
      <entry>see Examples section</entry>
      <entry></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>populate_record(record,hstore)</function><indexterm><primary>populate_record</primary></indexterm></entry>
      <entry><type>record</type></entry>
      <entry>用来自<type>hstore</type>的匹配值替换<type>record</type>中的域</entry>
      <entry>见示例小节</entry>
      <entry></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <note>
<!--==========================orignal english content==========================
   <para>
     The function <function>hstore_to_json</function> is used when
     an <type>hstore</type> value is cast to <type>json</type>.
     Likewise, <function>hstore_to_jsonb</function> is used when
     an <type>hstore</type> value is cast to <type>jsonb</type>.
   </para>
____________________________________________________________________________-->
   <para>
     当一个<type>hstore</type>值被造型成<type>json</type>时，将使用函数<function>hstore_to_json</function>。同样地，当一个<type>hstore</type>值被造型成<type>jsonb</type>时，将使用函数<function>hstore_to_jsonb</function>。
   </para>
  </note>

  <note>
<!--==========================orignal english content==========================
   <para>
    The function <function>populate_record</function> is actually declared
    with <type>anyelement</>, not <type>record</>, as its first argument,
    but it will reject non-record types with a run-time error.
   </para>
____________________________________________________________________________-->
   <para>
    函数<function>populate_record</function>实际上被声明为第一个参数为<type>anyelement</type>而非<type>record</type>，但是它将会用一个运行时错误拒绝非记录类型。
   </para>
  </note>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Indexes</title>
____________________________________________________________________________-->
  <title>索引</title>

<!--==========================orignal english content==========================
  <para>
   <type>hstore</> has GiST and GIN index support for the <literal>@&gt;</>,
   <literal>?</>, <literal>?&amp;</> and <literal>?|</> operators. For example:
  </para>
____________________________________________________________________________-->
  <para>
   <type>hstore</type>有对<literal>@&gt;</literal>、<literal>?</literal>、<literal>?&amp;</literal>和<literal>?|</literal>操作符的 GiST 和 GIN 索引支持。例如：
  </para>
<!--==========================orignal english content==========================
<programlisting>
CREATE INDEX hidx ON testhstore USING GIST (h);

CREATE INDEX hidx ON testhstore USING GIN (h);
</programlisting>
____________________________________________________________________________-->
<programlisting>
CREATE INDEX hidx ON testhstore USING GIST (h);

CREATE INDEX hidx ON testhstore USING GIN (h);
</programlisting>

<!--==========================orignal english content==========================
  <para>
   <type>hstore</> also supports <type>btree</> or <type>hash</> indexes for
   the <literal>=</> operator. This allows <type>hstore</> columns to be
   declared <literal>UNIQUE</>, or to be used in <literal>GROUP BY</>,
   <literal>ORDER BY</> or <literal>DISTINCT</> expressions. The sort ordering
   for <type>hstore</> values is not particularly useful, but these indexes
   may be useful for equivalence lookups. Create indexes for <literal>=</>
   comparisons as follows:
  </para>
____________________________________________________________________________-->
  <para>
   <type>hstore</type>也为<literal>=</literal>操作符支持<type>btree</type>或<type>hash</type>索引。这允许<type>hstore</type>列被声明为<literal>UNIQUE</literal>或者被使用在<literal>GROUP BY</literal>、<literal>ORDER BY</literal>或<literal>DISTINCT</literal>表达式中。<type>hstore</type>值的排序顺序不是特别有用，但是这些索引可能对等值查找有用。为<literal>=</literal>比较创建以下索引：
  </para>
<!--==========================orignal english content==========================
<programlisting>
CREATE INDEX hidx ON testhstore USING BTREE (h);

CREATE INDEX hidx ON testhstore USING HASH (h);
</programlisting>
____________________________________________________________________________-->
<programlisting>
CREATE INDEX hidx ON testhstore USING BTREE (h);

CREATE INDEX hidx ON testhstore USING HASH (h);
</programlisting>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>例子</title>

<!--==========================orignal english content==========================
  <para>
   Add a key, or update an existing key with a new value:
<programlisting>
UPDATE tab SET h = h || hstore('c', '3');
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   增加一个键，或者用一个新值更新一个现有的键：
<programlisting>
UPDATE tab SET h = h || hstore('c', '3');
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Delete a key:
<programlisting>
UPDATE tab SET h = delete(h, 'k1');
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   删除一个键：
<programlisting>
UPDATE tab SET h = delete(h, 'k1');
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Convert a <type>record</> to an <type>hstore</>:
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT hstore(t) FROM test AS t;
                   hstore                    
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
 "col1"=&gt;"123", "col2"=&gt;"foo", "col3"=&gt;"bar"
(1 row)
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   将一个<type>record</type>转换成一个<type>hstore</type>：
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT hstore(t) FROM test AS t;
                   hstore                    
---------------------------------------------
 "col1"=&gt;"123", "col2"=&gt;"foo", "col3"=&gt;"bar"
(1 row)
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Convert an <type>hstore</> to a predefined <type>record</> type:
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);

SELECT * FROM populate_record(null::test,
                              '"col1"=&gt;"456", "col2"=&gt;"zzz"');
 col1 | col2 | col3 
-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;
  456 | zzz  | 
(1 row)
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   将一个<type>hstore</type>转换成一个预定义的<type>record</type>类型：
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);

SELECT * FROM populate_record(null::test,
                              '"col1"=&gt;"456", "col2"=&gt;"zzz"');
 col1 | col2 | col3 
------+------+------
  456 | zzz  | 
(1 row)
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Modify an existing record using the values from an <type>hstore</>:
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT (r).* FROM (SELECT t #= '"col3"=&gt;"baz"' AS r FROM test t) s;
 col1 | col2 | col3 
-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;
  123 | foo  | baz
(1 row)
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   用来自于一个<type>hstore</type>的值修改一个现有的记录：
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT (r).* FROM (SELECT t #= '"col3"=&gt;"baz"' AS r FROM test t) s;
 col1 | col2 | col3 
------+------+------
  123 | foo  | baz
(1 row)
</programlisting>
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Statistics</title>
____________________________________________________________________________-->
  <title>统计</title>

<!--==========================orignal english content==========================
  <para>
   The <type>hstore</> type, because of its intrinsic liberality, could
   contain a lot of different keys. Checking for valid keys is the task of the
   application. The following examples demonstrate several techniques for
   checking keys and obtaining statistics.
  </para>
____________________________________________________________________________-->
  <para>
   由于<type>hstore</type>类型本质的宽大性，它能够包含一些不同的键。检查合法键是应用的任务。下列例子验证了用于检查键以及获得统计的一些技术。
  </para>

<!--==========================orignal english content==========================
  <para>
   Simple example:
<programlisting>
SELECT * FROM each('aaa=&gt;bq, b=&gt;NULL, ""=&gt;1');
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   简单例子：
<programlisting>
SELECT * FROM each('aaa=&gt;bq, b=&gt;NULL, ""=&gt;1');
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Using a table:
<programlisting>
SELECT (each(h)).key, (each(h)).value INTO stat FROM testhstore;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   使用一个表：
<programlisting>
SELECT (each(h)).key, (each(h)).value INTO stat FROM testhstore;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Online statistics:
<programlisting>
SELECT key, count(*) FROM
  (SELECT (each(h)).key FROM testhstore) AS stat
  GROUP BY key
  ORDER BY count DESC, key;
    key    | count
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-
 line      |   883
 query     |   207
 pos       |   203
 node      |   202
 space     |   197
 status    |   195
 public    |   194
 title     |   190
 org       |   189
...................
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   在线统计：
<programlisting>
SELECT key, count(*) FROM
  (SELECT (each(h)).key FROM testhstore) AS stat
  GROUP BY key
  ORDER BY count DESC, key;
    key    | count
-----------+-------
 line      |   883
 query     |   207
 pos       |   203
 node      |   202
 space     |   197
 status    |   195
 public    |   194
 title     |   190
 org       |   189
...................
</programlisting>
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   As of PostgreSQL 9.0, <type>hstore</> uses a different internal
   representation than previous versions. This presents no obstacle for
   dump/restore upgrades since the text representation (used in the dump) is
   unchanged.
  </para>
____________________________________________________________________________-->
  <para>
   从 PostgreSQL 9.0 开始，<type>hstore</type>使用了与之前版本不同的内部表示。这不会为转储/恢复升级造成障碍，因为文本表示（用于转储）没有改变。
  </para>

<!--==========================orignal english content==========================
  <para>
   In the event of a binary upgrade, upward compatibility is maintained by
   having the new code recognize old-format data. This will entail a slight
   performance penalty when processing data that has not yet been modified by
   the new code. It is possible to force an upgrade of all values in a table
   column by doing an <literal>UPDATE</> statement as follows:
<programlisting>
UPDATE tablename SET hstorecol = hstorecol || '';
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   在一次二进制升级中，通过让新代码识别旧格式数据来维持向上兼容。当处理还没有被新代码修改过的数据时，这会带来一定的性能惩罚。可以通过执行一个下面的<literal>UPDATE</literal>语句来强制升级表中的所有值：
<programlisting>
UPDATE tablename SET hstorecol = hstorecol || '';
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Another way to do it is:
<programlisting>
ALTER TABLE tablename ALTER hstorecol TYPE hstore USING hstorecol || '';
</programlisting>
   The <command>ALTER TABLE</> method requires an exclusive lock on the table,
   but does not result in bloating the table with old row versions.
  </para>
____________________________________________________________________________-->
  <para>
   另一种方法：
<programlisting>
ALTER TABLE tablename ALTER hstorecol TYPE hstore USING hstorecol || '';
</programlisting>
   <command>ALTER TABLE</command>方法要求表上的一个排他锁，但是不会导致表因为旧行版本而膨胀。
  </para>

 </sect2>
 
 <sect2>
<!--==========================orignal english content==========================
  <title>Transforms</title>
____________________________________________________________________________-->
  <title>转换</title>

<!--==========================orignal english content==========================
  <para>
   Additional extensions are available that implement transforms for
   the <type>hstore</type> type for the languages PL/Perl and PL/Python.  The
   extensions for PL/Perl are called <literal>hstore_plperl</literal>
   and <literal>hstore_plperlu</literal>, for trusted and untrusted PL/Perl.
   If you install these transforms and specify them when creating a
   function, <type>hstore</type> values are mapped to Perl hashes.  The
   extensions for PL/Python are
   called <literal>hstore_plpythonu</literal>, <literal>hstore_plpython2u</literal>,
   and <literal>hstore_plpython3u</literal>
   (see <xref linkend="plpython-python23"> for the PL/Python naming
   convention).  If you use them, <type>hstore</type> values are mapped to
   Python dictionaries.
  </para>
____________________________________________________________________________-->
  <para>
   有一些额外的扩展为语言 PL/Perl 和 PL/Python 实现了<type>hstore</type>
   类型的转换。用于 PL/Perl 的扩展叫做<literal>hstore_plperl</literal>和
   <literal>hstore_plperlu</literal>，分别用于可信的和不可信的 PL/Perl。
   如果安装这些转换并且在创建函数时指定它们，<type>hstore</type>值会被
   映射成 Perl 哈希。用于 PL/Python 的扩展是<literal>hstore_plpythonu</literal>、
   <literal>hstore_plpython2u</literal>和<literal>hstore_plpython3u</literal>（
   PL/Python 命名习惯见<xref linkend="plpython-python23"/>）。如果使用它们，
   <type>hstore</type>值会被映射成 Python 字典。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Authors</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscow, Moscow University, Russia
  </para>
____________________________________________________________________________-->
  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>，俄罗斯莫斯科大学
  </para>

<!--==========================orignal english content==========================
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscow, Delta-Soft Ltd., Russia
  </para>
____________________________________________________________________________-->
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>，俄罗斯德尔塔软件有限公司
  </para>

<!--==========================orignal english content==========================
  <para>
   Additional enhancements by Andrew Gierth <email>andrew@tao11.riddles.org.uk</email>,
   United Kingdom
  </para>
____________________________________________________________________________-->
  <para>
   额外的提升由英国的 Andrew Gierth <email>andrew@tao11.riddles.org.uk</email> 提供
  </para>
 </sect2>

</sect1>

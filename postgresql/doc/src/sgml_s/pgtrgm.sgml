<!-- doc/src/sgml/pgtrgm.sgml -->

<sect1 id="pgtrgm" xreflabel="pg_trgm">
<!--==========================orignal english content==========================
 <title>pg_trgm</title>
____________________________________________________________________________-->
 <title>pg_trgm</title>

<!--==========================orignal english content==========================
 <indexterm zone="pgtrgm">
  <primary>pg_trgm</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="pgtrgm">
  <primary>pg_trgm</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>pg_trgm</filename> module provides functions and operators
  for determining the similarity of
  alphanumeric text based on trigram matching, as
  well as index operator classes that support fast searching for similar
  strings.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>pg_trgm</filename>模块提供用于决定基于 trigram 匹配的字母数字文本相似度的函数和操作符，以及支持快速搜索相似字符串的索引操作符类。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Trigram (or Trigraph) Concepts</title>
____________________________________________________________________________-->
  <title>Trigram（或者 Trigraph）概念</title>

<!--==========================orignal english content==========================
  <para>
   A trigram is a group of three consecutive characters taken
   from a string.  We can measure the similarity of two strings by
   counting the number of trigrams they share.  This simple idea
   turns out to be very effective for measuring the similarity of
   words in many natural languages.
  </para>
____________________________________________________________________________-->
  <para>
   一个 trigram 是从一个字符串中取出的由三个连续字符组成的组。我们可以通过对两个字符串之间共享的 trigram 计数来度量它们的相似度。这种简单的思想已经成为在很多自然语言中度量词相似度的有效方法。
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    <filename>pg_trgm</filename> ignores non-word characters
    (non-alphanumerics) when extracting trigrams from a string.
    Each word is considered to have two spaces
    prefixed and one space suffixed when determining the set
    of trigrams contained in the string.
    For example, the set of trigrams in the string
    <quote><literal>cat</literal></quote> is
    <quote><literal>  c</literal></quote>,
    <quote><literal> ca</literal></quote>,
    <quote><literal>cat</literal></quote>, and
    <quote><literal>at </literal></quote>.
    The set of trigrams in the string
    <quote><literal>foo|bar</literal></quote> is
    <quote><literal>  f</literal></quote>,
    <quote><literal> fo</literal></quote>,
    <quote><literal>foo</literal></quote>,
    <quote><literal>oo </literal></quote>,
    <quote><literal>  b</literal></quote>,
    <quote><literal> ba</literal></quote>,
    <quote><literal>bar</literal></quote>, and
    <quote><literal>ar </literal></quote>.
   </para>
____________________________________________________________________________-->
   <para>
    在从一个字符串中提取 trigram 时，<filename>pg_trgm</filename>会忽略非词字符（非字母数字）。在决定字符串中所含的 trigram 集合时，每一个词被认为具有两个空格前缀和一个空格后缀。例如，字符串<quote><literal>cat</literal></quote>中的 trigram 集合是：
    <quote><literal>  c</literal></quote>、
    <quote><literal> ca</literal></quote>、
    <quote><literal>cat</literal></quote>以及
    <quote><literal>at </literal></quote>。
    字符串<quote><literal>foo|bar</literal></quote>中的 trigram 集合是：
    <quote><literal>  f</literal></quote>、
    <quote><literal> fo</literal></quote>、
    <quote><literal>foo</literal></quote>、
    <quote><literal>oo </literal></quote>、
    <quote><literal>  b</literal></quote>、
    <quote><literal> ba</literal></quote>、
    <quote><literal>bar</literal></quote>以及
    <quote><literal>ar </literal></quote>。
   </para>
  </note>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Functions and Operators</title>
____________________________________________________________________________-->
  <title>函数和操作符</title>

<!--==========================orignal english content==========================
  <para>
   The functions provided by the <filename>pg_trgm</filename> module
   are shown in <xref linkend="pgtrgm-func-table"/>, the operators
   in <xref linkend="pgtrgm-op-table"/>.
  </para>
____________________________________________________________________________-->
  <para>
   <filename>pg_trgm</filename>模块所提供的函数如<xref linkend="pgtrgm-func-table"/>中所示，操作符则显示在<xref linkend="pgtrgm-op-table"/>中。
  </para>

  <table id="pgtrgm-func-table">
<!--==========================orignal english content==========================
   <title><filename>pg_trgm</filename> Functions</title>
____________________________________________________________________________-->
   <title><filename>pg_trgm</filename>函数</title>
   <tgroup cols="3">
    <thead>
<!--==========================orignal english content==========================
     <row>
      <entry>Function</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>函数</entry>
      <entry>返回值</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
<!--==========================orignal english content==========================
     <row>
      <entry><function>similarity(text, text)</function><indexterm><primary>similarity</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       Returns a number that indicates how similar the two arguments are.
       The range of the result is zero (indicating that the two strings are
       completely dissimilar) to one (indicating that the two strings are
       identical).
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>similarity(text, text)</function><indexterm><primary>similarity</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       返回一个数字指示两个参数有多相似。该结果的范围是 0（指示两个字符串完全不相似）到 1（指示两个字符串完全一样）。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><function>show_trgm(text)</function><indexterm><primary>show_trgm</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>
       Returns an array of all the trigrams in the given string.
       (In practice this is seldom useful except for debugging.)
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>show_trgm(text)</function><indexterm><primary>show_trgm</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>
       返回一个给定字符串中所有的 trigram 组成的一个数组（实际上除了调试很少有用）。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry>
       <function>word_similarity(text, text)</function>
       <indexterm><primary>word_similarity</primary></indexterm>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Returns a number that indicates the greatest similarity between
       the set of trigrams in the first string and any continuous extent
       of an ordered set of trigrams in the second string.  For details, see
       the explanation below.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>
       <function>word_similarity(text, text)</function>
       <indexterm><primary>word_similarity</primary></indexterm>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       返回一个数字表示第一个字符串中的trigram集合与第二个字符串中trigram的有序集中任何连续部分的最大相似度。详情请见下文的解释。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry>
       <function>strict_word_similarity(text, text)</function>
       <indexterm><primary>strict_word_similarity</primary></indexterm>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Same as <function>word_similarity(text, text)</function>, but forces
       extent boundaries to match word boundaries.  Since we don't have
       cross-word trigrams, this function actually returns greatest similarity
       between first string and any continuous extent of words of the second
       string.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>
       <function>strict_word_similarity(text, text)</function>
       <indexterm><primary>strict_word_similarity</primary></indexterm>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       与<function>word_similarity(text, text)</function>相同，但是强制连续部分的边界与词边界相匹配。由于我们没有跨词的trigram，这个函数实际上返回第一个字符串和第二个字符串任意连续部分的相似度。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><function>show_limit()</function><indexterm><primary>show_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       Returns the current similarity threshold used by the <literal>%</literal>
       operator.  This sets the minimum similarity between
       two words for them to be considered similar enough to
       be misspellings of each other, for example
       (<emphasis>deprecated</emphasis>).
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>show_limit()</function><indexterm><primary>show_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       返回<literal>%</literal>操作符使用的当前相似度阈值。例如，这设定两个词被认为足够相似时，它们之间应满足的最小相似度（<emphasis>已废弃</emphasis>）。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><function>set_limit(real)</function><indexterm><primary>set_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       Sets the current similarity threshold that is used by the <literal>%</literal>
       operator.  The threshold must be between 0 and 1 (default is 0.3).
       Returns the same value passed in (<emphasis>deprecated</emphasis>).
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>set_limit(real)</function><indexterm><primary>set_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       设定<literal>%</literal>操作符使用的当前相似度阈值。该阈值必须介于 0 和 1 之间（默认为 0.3）。返回传递进来的同一个值（<emphasis>已废弃</emphasis>）。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

<!--==========================orignal english content==========================
  <para>
   Consider the following example:

<programlisting>
# SELECT word_similarity('word', 'two words');
 word_similarity
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
             0.8
(1 row)
</programlisting>

   In the first string, the set of trigrams is
   <literal>{"  w"," wo","wor","ord","rd "}</literal>.
   In the second string, the ordered set of trigrams is
   <literal>{"  t"," tw","two","wo ","  w"," wo","wor","ord","rds","ds "}</literal>.
   The most similar extent of an ordered set of trigrams in the second string
   is <literal>{"  w"," wo","wor","ord"}</literal>, and the similarity is
   <literal>0.8</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   考虑下面的例子：

<programlisting>
# SELECT word_similarity('word', 'two words');
 word_similarity
-----------------
             0.8
(1 row)
</programlisting>

   在第一个字符串中，trigram集合是<literal>{"  w"," wo","wor","ord","rd "}</literal>。在第二个字符串中，trigram的有序集是<literal>{"  t"," tw","two","wo ","  w"," wo","wor","ord","rds","ds "}</literal>。在第二个字符串中最相似的trigram有序集的部分是<literal>{"  w"," wo","wor","ord"}</literal>，并且相似度是<literal>0.8</literal>。
  </para>

<!--==========================orignal english content==========================
  <para>
   This function returns a value that can be approximately understood as the
   greatest similarity between the first string and any substring of the second
   string.  However, this function does not add padding to the boundaries of
   the extent.  Thus, the number of additional characters present in the
   second string is not considered, except for the mismatched word boundaries.
  </para>
____________________________________________________________________________-->
  <para>
   这个函数返回的值可以大概地理解为第一个字符串和第二个字符串任意子串的最大相似度。不过，这个函数不会对该部分的边界加入填充。因此，除了失配的词边界之外，第二个字符串中存在的额外字符的数目没有被考虑。
  </para>

<!--==========================orignal english content==========================
  <para>
   At the same time, <function>strict_word_similarity(text, text)</function>
   selects an extent of words in the second string.  In the example above,
   <function>strict_word_similarity(text, text)</function> would select the
   extent of a single word <literal>'words'</literal>, whose set of trigrams is
   <literal>{"  w"," wo","wor","ord","rds","ds "}</literal>.

<programlisting>
# SELECT strict_word_similarity('word', 'two words'), similarity('word', 'words');
 strict_word_similarity | similarity
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
               0.571429 |   0.571429
(1 row)
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   同时，<function>strict_word_similarity(text, text)</function>在第二个字符串中选择一个由词构成的部分。在上面的例子中，<function>strict_word_similarity(text, text)</function>会选择单个词<literal>'words'</literal>形成的部分，其trigram集合为<literal>{"  w"," wo","wor","ord","rds","ds "}</literal>。

<programlisting>
# SELECT strict_word_similarity('word', 'two words'), similarity('word', 'words');
 strict_word_similarity | similarity
------------------------+------------
               0.571429 |   0.571429
(1 row)
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   Thus, the <function>strict_word_similarity(text, text)</function> function
   is useful for finding the similarity to whole words, while
   <function>word_similarity(text, text)</function> is more suitable for
   finding the similarity for parts of words.
  </para>
____________________________________________________________________________-->
  <para>
   因此，<function>strict_word_similarity(text, text)</function>函数对于计算整个词的相似度有用，而<function>word_similarity(text, text)</function>更适合于计算词的部分相似度。
  </para>

  <table id="pgtrgm-op-table">
<!--==========================orignal english content==========================
   <title><filename>pg_trgm</filename> Operators</title>
____________________________________________________________________________-->
   <title><filename>pg_trgm</filename>操作符</title>
   <tgroup cols="3">
    <thead>
<!--==========================orignal english content==========================
     <row>
      <entry>Operator</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>操作符</entry>
      <entry>返回值</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
<!--==========================orignal english content==========================
     <row>
      <entry><type>text</type> <literal>%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Returns <literal>true</literal> if its arguments have a similarity that is
       greater than the current similarity threshold set by
       <varname>pg_trgm.similarity_threshold</varname>.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>text</type> <literal>%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       如果参数具有超过<varname>pg_trgm.similarity_threshold</varname>设置的当前相似度阈值的相似度，则返回<literal>true</literal>。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><type>text</type> <literal>&lt;%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Returns <literal>true</literal> if the similarity between the trigram
       set in the first argument and a continuous extent of an ordered trigram
       set in the second argument is greater than the current word similarity
       threshold set by <varname>pg_trgm.word_similarity_threshold</varname>
       parameter.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>text</type> <literal>&lt;%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       如果第一个参数中的trigram集合与第二个参数中有序trigram集合的一个连续部分之间的相似度超过<varname>pg_trgm.word_similarity_threshold</varname>参数设置的当前词相似度阈值，则返回<literal>true</literal>。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><type>text</type> <literal>%&gt;</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Commutator of the <literal>&lt;%</literal> operator.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>text</type> <literal>%&gt;</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       <literal>&lt;%</literal>操作符的交换子。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><type>text</type> <literal>&lt;&lt;%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Returns <literal>true</literal> if its second argument has a continuous
       extent of an ordered trigram set that matches word boundaries,
       and its similarity to the trigram set of the first argument is greater
       than the current strict word similarity threshold set by the
       <varname>pg_trgm.strict_word_similarity_threshold</varname> parameter.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>text</type> <literal>&lt;&lt;%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       如果第二个参数有有序trigram集合的一个连续部分匹配词边界，并且其与第一个参数的trigram集合的相似度超过<varname>pg_trgm.strict_word_similarity_threshold</varname>参数设置的当前严格词相似度阈值，则返回<literal>true</literal>。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><type>text</type> <literal>%&gt;&gt;</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Commutator of the <literal>&lt;&lt;%</literal> operator.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>text</type> <literal>%&gt;&gt;</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       <literal>&lt;&lt;%</literal>操作符的交换子。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><type>text</type> <literal>&lt;-&gt;</literal> <type>text</type></entry>
      <entry><type>real</type></entry>
      <entry>
       Returns the <quote>distance</quote> between the arguments, that is
       one minus the <function>similarity()</function> value.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><type>text</type> <literal>&lt;-&gt;</literal> <type>text</type></entry>
      <entry><type>real</type></entry>
      <entry>
       返回参数之间的<quote>距离</quote>，即 1 减去<function>similarity()</function>值。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry>
       <type>text</type> <literal>&lt;&lt;-&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Returns the <quote>distance</quote> between the arguments, that is
       one minus the <function>word_similarity()</function> value.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>
       <type>text</type> <literal>&lt;&lt;-&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       返回参数之间的<quote>距离</quote>，它是 1 减去<function>word_similarity()</function>的值。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry>
       <type>text</type> <literal>&lt;-&gt;&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Commutator of the <literal>&lt;&lt;-&gt;</literal> operator.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>
       <type>text</type> <literal>&lt;-&gt;&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       <literal>&lt;&lt;-&gt;</literal>操作符的交换子。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry>
       <type>text</type> <literal>&lt;&lt;&lt;-&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Returns the <quote>distance</quote> between the arguments, that is
       one minus the <function>strict_word_similarity()</function> value.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>
       <type>text</type> <literal>&lt;&lt;&lt;-&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       返回参数之间的<quote>距离</quote>，也就是1减去<function>strict_word_similarity()</function>的值。
      </entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry>
       <type>text</type> <literal>&lt;-&gt;&gt;&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Commutator of the <literal>&lt;&lt;&lt;-&gt;</literal> operator.
      </entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>
       <type>text</type> <literal>&lt;-&gt;&gt;&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       <literal>&lt;&lt;&lt;-&gt;</literal>操作符的交换子。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>
 
 <sect2>
<!--==========================orignal english content==========================
  <title>GUC Parameters</title>
____________________________________________________________________________-->
  <title>GUC 参数</title>

  <variablelist>
   <varlistentry id="guc-pgtrgm-similarity-threshold" xreflabel="pg_trgm.similarity_threshold">
<!--==========================orignal english content==========================
    <term>
     <varname>pg_trgm.similarity_threshold</varname> (<type>real</type>)
     <indexterm>
      <primary><varname>pg_trgm.similarity_threshold</varname> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>pg_trgm.similarity_threshold</varname> (<type>real</type>)
     <indexterm>
      <primary><varname>pg_trgm.similarity_threshold</varname> 配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Sets the current similarity threshold that is used by the <literal>%</literal>
      operator.  The threshold must be between 0 and 1 (default is 0.3).
     </para>
____________________________________________________________________________-->
     <para>
      设置<literal>%</literal>操作符使用的当前相似度阈值。该阈值必须位于 0 和 1 之间（默认是 0.3）。
     </para>
    </listitem>
   </varlistentry>
    <varlistentry id="guc-pgtrgm-word-similarity-threshold" xreflabel="pg_trgm.word_similarity_threshold">
<!--==========================orignal english content==========================
     <term>
      <varname>pg_trgm.word_similarity_threshold</varname> (<type>real</type>)
      <indexterm>
       <primary>
        <varname>pg_trgm.word_similarity_threshold</varname> configuration parameter
       </primary>
      </indexterm>
     </term>
____________________________________________________________________________-->
     <term>
      <varname>pg_trgm.word_similarity_threshold</varname> (<type>real</type>)
      <indexterm>
       <primary>
        <varname>pg_trgm.word_similarity_threshold</varname> 配置参数
       </primary>
      </indexterm>
     </term>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       Sets the current word similarity threshold that is used by
       <literal>&lt;%</literal> and <literal>%&gt;</literal> operators.  The threshold
       must be between 0 and 1 (default is 0.6).
      </para>
____________________________________________________________________________-->
      <para>
       设置<literal>&lt;%</literal>和<literal>%&gt;</literal>操作符使用的当前词相似度阈值。该阈值必须位于 0 和 1 之间（默认是 0.6）。
      </para>
     </listitem>
    </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Index Support</title>
____________________________________________________________________________-->
  <title>索引支持</title>

<!--==========================orignal english content==========================
  <para>
   The <filename>pg_trgm</filename> module provides GiST and GIN index
   operator classes that allow you to create an index over a text column for
   the purpose of very fast similarity searches.  These index types support
   the above-described similarity operators, and additionally support
   trigram-based index searches for <literal>LIKE</literal>, <literal>ILIKE</literal>,
   <literal>~</literal> and <literal>~*</literal> queries.  (These indexes do not
   support equality nor simple comparison operators, so you may need a
   regular B-tree index too.)
  </para>
____________________________________________________________________________-->
  <para>
   <filename>pg_trgm</filename>模块提供了 GiST 和 GIN 索引操作符类，这允许你在一个文本列上创建索引用于快速相似度搜索的目的。这些索引类型支持上述的相似度操作符，并且额外支持基于 trigram 的索引搜索用于<literal>LIKE</literal>、<literal>ILIKE</literal>、<literal>~</literal>和<literal>~*</literal>查询（这些索引不支持等值或简单比较操作符，因此你可能还需要一个常规的 B-树索引）。
  </para>

<!--==========================orignal english content==========================
  <para>
   Example:

<programlisting>
CREATE TABLE test_trgm (t text);
CREATE INDEX trgm_idx ON test_trgm USING GIST (t gist_trgm_ops);
</programlisting>
or
<programlisting>
CREATE INDEX trgm_idx ON test_trgm USING GIN (t gin_trgm_ops);
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   例子：

<programlisting>
CREATE TABLE test_trgm (t text);
CREATE INDEX trgm_idx ON test_trgm USING GIST (t gist_trgm_ops);
</programlisting>
或
<programlisting>
CREATE INDEX trgm_idx ON test_trgm USING GIN (t gin_trgm_ops);
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   At this point, you will have an index on the <structfield>t</structfield> column that
   you can use for similarity searching.  A typical query is
<programlisting>
SELECT t, similarity(t, '<replaceable>word</replaceable>') AS sml
  FROM test_trgm
  WHERE t % '<replaceable>word</replaceable>'
  ORDER BY sml DESC, t;
</programlisting>
   This will return all values in the text column that are sufficiently
   similar to <replaceable>word</replaceable>, sorted from best match to worst.  The
   index will be used to make this a fast operation even over very large data
   sets.
  </para>
____________________________________________________________________________-->
  <para>
   此时，你将有一个<structfield>t</structfield>列上的索引，你可以用它进行相似度搜索。一个典型的查询是
<programlisting>
SELECT t, similarity(t, '<replaceable>word</replaceable>') AS sml
  FROM test_trgm
  WHERE t % '<replaceable>word</replaceable>'
  ORDER BY sml DESC, t;
</programlisting>
   这将返回在文本列中与<replaceable>word</replaceable>足够相似的所有值，按最佳匹配到最差匹配的方式排序。索引将被用来让这种搜索变快，即使在一个非常大的数据集上。
  </para>

<!--==========================orignal english content==========================
  <para>
   A variant of the above query is
<programlisting>
SELECT t, t &lt;-&gt; '<replaceable>word</replaceable>' AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   This can be implemented quite efficiently by GiST indexes, but not
   by GIN indexes.  It will usually beat the first formulation when only
   a small number of the closest matches is wanted.
  </para>
____________________________________________________________________________-->
  <para>
   上述查询的一种变体是
<programlisting>
SELECT t, t &lt;-&gt; '<replaceable>word</replaceable>' AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   这能够用 GiST 索引有效地实现，但是用 GIN 索引无法做到。当只想要少数最接近的匹配时，这通常会比第一种形式更好。
  </para>
  
<!--==========================orignal english content==========================
  <para>
   Also you can use an index on the <structfield>t</structfield> column for word
   similarity or strict word similarity.  Typical queries are:
<programlisting>
SELECT t, word_similarity('<replaceable>word</replaceable>', t) AS sml
  FROM test_trgm
  WHERE '<replaceable>word</replaceable>' &lt;% t
  ORDER BY sml DESC, t;
</programlisting>
   and
<programlisting>
SELECT t, strict_word_similarity('<replaceable>word</replaceable>', t) AS sml
  FROM test_trgm
  WHERE '<replaceable>word</replaceable>' &lt;&lt;% t
  ORDER BY sml DESC, t;
</programlisting>
   This will return all values in the text column for which there is a
   continuous extent in the corresponding ordered trigram set that is
   sufficiently similar to the trigram set of <replaceable>word</replaceable>,
   sorted from best match to worst.  The index will be used to make this
   a fast operation even over very large data sets.
  </para>
____________________________________________________________________________-->
  <para>
   也可以把一个<structfield>t</structfield>列上的索引用于词相似度或者严格词相似度。典型的查询是：
<programlisting>
SELECT t, word_similarity('<replaceable>word</replaceable>', t) AS sml
  FROM test_trgm
  WHERE '<replaceable>word</replaceable>' &lt;% t
  ORDER BY sml DESC, t;
</programlisting>
   和
<programlisting>
SELECT t, strict_word_similarity('<replaceable>word</replaceable>', t) AS sml
  FROM test_trgm
  WHERE '<replaceable>word</replaceable>' &lt;&lt;% t
  ORDER BY sml DESC, t;
</programlisting>
   这将返回文本列中符合条件的所有值：这些值在其对应的有序trigram集中有一个连续部分与<replaceable>word</replaceable>的trigram集合足够相似，这些值会按照最好匹配到最差匹配的顺序排列。即便在非常大的数据集上，索引也将使得这一操作的速度够快。
  </para>

<!--==========================orignal english content==========================
  <para>
   Possible variants of the above queries are:
<programlisting>
SELECT t, '<replaceable>word</replaceable>' &lt;&lt;-&gt; t AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   and
<programlisting>
SELECT t, '<replaceable>word</replaceable>' &lt;&lt;&lt;-&gt; t AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   This can be implemented quite efficiently by GiST indexes, but not
   by GIN indexes.
  </para>
____________________________________________________________________________-->
  <para>
   上述查询可能的变体有：
<programlisting>
SELECT t, '<replaceable>word</replaceable>' &lt;&lt;-&gt; t AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   和
<programlisting>
SELECT t, '<replaceable>word</replaceable>' &lt;&lt;&lt;-&gt; t AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   这可以用 GiST 索引很高效地实现，但是用 GIN 索引不行。
  </para>

<!--==========================orignal english content==========================
  <para>
   Beginning in <productname>PostgreSQL</productname> 9.1, these index types also support
   index searches for <literal>LIKE</literal> and <literal>ILIKE</literal>, for example
<programlisting>
SELECT * FROM test_trgm WHERE t LIKE '%foo%bar';
</programlisting>
   The index search works by extracting trigrams from the search string
   and then looking these up in the index.  The more trigrams in the search
   string, the more effective the index search is.  Unlike B-tree based
   searches, the search string need not be left-anchored.
  </para>
____________________________________________________________________________-->
  <para>
   从<productname>PostgreSQL</productname> 9.1 中开始，这些索引类型也支持用于<literal>LIKE</literal>和<literal>ILIKE</literal>的索引搜索，例如
<programlisting>
SELECT * FROM test_trgm WHERE t LIKE '%foo%bar';
</programlisting>
   该索引搜索通过从搜索字符串中抽取 trigram 并且在索引中查找它们来工作。搜索字符串中有更多 trigram，索引搜索的效率更高。不像基于 B-树的搜索，搜索字符串不需要是左锚定的。
  </para>

<!--==========================orignal english content==========================
  <para>
   Beginning in <productname>PostgreSQL</productname> 9.3, these index types also support
   index searches for regular-expression matches
   (<literal>~</literal> and <literal>~*</literal> operators), for example
<programlisting>
SELECT * FROM test_trgm WHERE t ~ '(foo|bar)';
</programlisting>
   The index search works by extracting trigrams from the regular expression
   and then looking these up in the index.  The more trigrams that can be
   extracted from the regular expression, the more effective the index search
   is.  Unlike B-tree based searches, the search string need not be
   left-anchored.
  </para>
____________________________________________________________________________-->
  <para>
   从<productname>PostgreSQL</productname> 9.3 中开始，这些索引类型也支持用于正则表达式匹配（<literal>~</literal>和<literal>~*</literal>操作符）的索引搜索，例如
<programlisting>
SELECT * FROM test_trgm WHERE t ~ '(foo|bar)';
</programlisting>
   该索引搜索通过从正则表达式中抽取 trigram 并且在索引中查找它们来工作。正则表达式中能抽取出更多 trigram，索引搜索的效率更高。不像基于 B-树的搜索，搜索字符串不需要是左锚定的。
  </para>

<!--==========================orignal english content==========================
  <para>
   For both <literal>LIKE</literal> and regular-expression searches, keep in mind
   that a pattern with no extractable trigrams will degenerate to a full-index
   scan.
  </para>
____________________________________________________________________________-->
  <para>
   对于<literal>LIKE</literal>和正则表达式搜索，记住没有可抽取 trigram 的模式将退化成一个全索引扫描。
  </para>

<!--==========================orignal english content==========================
  <para>
   The choice between GiST and GIN indexing depends on the relative
   performance characteristics of GiST and GIN, which are discussed elsewhere.
  </para>
____________________________________________________________________________-->
  <para>
   GiST 和 GIN 索引之间的选择依赖于 GiST 和 GIN 的相对性能特性，这在其他地方讨论。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Text Search Integration</title>
____________________________________________________________________________-->
  <title>文本搜索集成</title>

<!--==========================orignal english content==========================
  <para>
   Trigram matching is a very useful tool when used in conjunction
   with a full text index.  In particular it can help to recognize
   misspelled input words that will not be matched directly by the
   full text search mechanism.
  </para>
____________________________________________________________________________-->
  <para>
   在与一个全文索引联合使用时，trigram 匹配是一种非常有用的工具。特别是它能有助于识别拼写错误的输入词，这些词直接用全文搜索机制是不会被匹配的。
  </para>

<!--==========================orignal english content==========================
  <para>
   The first step is to generate an auxiliary table containing all
   the unique words in the documents:

<programlisting>
CREATE TABLE words AS SELECT word FROM
        ts_stat('SELECT to_tsvector(''simple'', bodytext) FROM documents');
</programlisting>

   where <structname>documents</structname> is a table that has a text field
   <structfield>bodytext</structfield> that we wish to search.  The reason for using
   the <literal>simple</literal> configuration with the <function>to_tsvector</function>
   function, instead of using a language-specific configuration,
   is that we want a list of the original (unstemmed) words.
  </para>
____________________________________________________________________________-->
  <para>
   第一步是生成一个包含文档中所有唯一词的辅助表：

<programlisting>
CREATE TABLE words AS SELECT word FROM
        ts_stat('SELECT to_tsvector(''simple'', bodytext) FROM documents');
</programlisting>

   其中<structname>documents</structname>是一个具有我们希望搜索的文本域<structfield>bodytext</structfield>的表。对<function>to_tsvector</function>函数使用<literal>simple</literal>配置而不是使用语言相关的配置的原因是，我们想要一个原始（没有去掉词根的）词的列表。
  </para>

<!--==========================orignal english content==========================
  <para>
   Next, create a trigram index on the word column:

<programlisting>
CREATE INDEX words_idx ON words USING GIN (word gin_trgm_ops);
</programlisting>

   Now, a <command>SELECT</command> query similar to the previous example can
   be used to suggest spellings for misspelled words in user search terms.
   A useful extra test is to require that the selected words are also of
   similar length to the misspelled word.
  </para>
____________________________________________________________________________-->
  <para>
   接下来，在词列上创建一个 trigram 索引：

<programlisting>
CREATE INDEX words_idx ON words USING GIN(word gin_trgm_ops);
</programlisting>

   现在，类似于前面例子的一个<command>SELECT</command>查询可以被用来为用户搜索术语中的拼写不当的词建议拼写。要求被选择的词也与拼写不当的词具有相似的长度是一种有用的额外测试。
  </para>

  <note>
<!--==========================orignal english content==========================
   <para>
    Since the <structname>words</structname> table has been generated as a separate,
    static table, it will need to be periodically regenerated so that
    it remains reasonably up-to-date with the document collection.
    Keeping it exactly current is usually unnecessary.
   </para>
____________________________________________________________________________-->
   <para>
    由于<structname>words</structname>表已经被生成为一个单独的、静态的表，它将需要被定期地重新生成，这样它能合理地与文档集合保持一致。但是要求它完全与文档集合同步通常是不必要的。
   </para>
  </note>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>References</title>
____________________________________________________________________________-->
  <title>参考</title>

<!--==========================orignal english content==========================
  <para>
   GiST Development Site
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>
  </para>
____________________________________________________________________________-->
  <para>
   GiST 开发站点
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>
  </para>
<!--==========================orignal english content==========================
  <para>
   Tsearch2 Development Site
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"></ulink>
  </para>
____________________________________________________________________________-->
  <para>
   Tsearch2 开发站点
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"></ulink>
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Authors</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscow, Moscow University, Russia
  </para>
____________________________________________________________________________-->
  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>，俄罗斯莫斯科大学
  </para>
<!--==========================orignal english content==========================
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscow, Delta-Soft Ltd.,Russia
  </para>
____________________________________________________________________________-->
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>，俄罗斯莫斯科 Delta-Soft 有限责任公司
  </para>
<!--==========================orignal english content==========================
  <para>
   Alexander Korotkov <email>a.korotkov@postgrespro.ru</email>, Moscow, Postgres Professional, Russia
  </para>
____________________________________________________________________________-->
  <para>
   Alexander Korotkov <email>a.korotkov@postgrespro.ru</email>，俄罗斯莫斯科，Postgres Professional
  </para>
<!--==========================orignal english content==========================
  <para>
   Documentation: Christopher Kings-Lynne
  </para>
____________________________________________________________________________-->
  <para>
   文档：Christopher Kings-Lynne
  </para>
<!--==========================orignal english content==========================
  <para>
   This module is sponsored by Delta-Soft Ltd., Moscow, Russia.
  </para>
____________________________________________________________________________-->
  <para>
   这个模块由俄罗斯莫斯科 Delta-Soft 有限责任公司赞助。
  </para>
 </sect2>

</sect1>

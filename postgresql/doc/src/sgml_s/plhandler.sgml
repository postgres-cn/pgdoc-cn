<!-- doc/src/sgml/plhandler.sgml -->

 <chapter id="plhandler">
<!--==========================orignal english content==========================
   <title>Writing A Procedural Language Handler</title>
____________________________________________________________________________-->
   <title>编写一个过程语言处理器</title>

<!--==========================orignal english content==========================
   <indexterm zone="plhandler">
    <primary>procedural language</primary>
    <secondary>handler for</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="plhandler">
    <primary>procedural language</primary>
    <secondary>handler for</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    All calls to functions that are written in a language other than
    the current <quote>version 1</quote> interface for compiled
    languages (this includes functions in user-defined procedural languages
    and functions written in SQL) go through a <firstterm>call handler</firstterm>
    function for the specific language.  It is the responsibility of
    the call handler to execute the function in a meaningful way, such
    as by interpreting the supplied source text.  This chapter outlines
    how a new procedural language's call handler can be written.
   </para>
____________________________________________________________________________-->
   <para>
    所有对用不是当前<quote>版本 1</quote>接口（用于编译型语言）语言编写的函数（这包括用户定义的过程语言中的函数、SQL 编写的函数）的调用都会流经一个用于指定语言的<firstterm>调用处理器</firstterm>。调用处理器负责以一种有意义的方式执行该函数，例如通过解释所提供的源文本。本章勾勒了如何编写一个新的过程语言调用处理器的轮廓。
   </para>

<!--==========================orignal english content==========================
   <para>
    The call handler for a procedural language is a
    <quote>normal</quote> function that must be written in a compiled
    language such as C, using the version-1 interface, and registered
    with <productname>PostgreSQL</productname> as taking no arguments
    and returning the type <type>language_handler</type>.  This
    special pseudo-type identifies the function as a call handler and
    prevents it from being called directly in SQL commands.
    For more details on C language calling conventions and dynamic loading,
    see <xref linkend="xfunc-c">.
   </para>
____________________________________________________________________________-->
   <para>
    一个过程语言的调用处理器是一个<quote>正常的</quote>函数，它必须以一种编译型语言（如 C）编写、使用版本-1接口并且在<productname>PostgreSQL</productname>中注册为无参数且返回类型<type>language_handler</type>。这种特殊的伪类型标识该函数是一个调用处理器并且阻止它在 SQL 命令中被直接调用。关于 C 语言调用惯例和动态载入的更多细节，请见<xref linkend="xfunc-c"/>。
   </para>

<!--==========================orignal english content==========================
   <para>
    The call handler is called in the same way as any other function:
    It receives a pointer to a
    <structname>FunctionCallInfoData</structname> <type>struct</> containing
    argument values and information about the called function, and it
    is expected to return a <type>Datum</type> result (and possibly
    set the <structfield>isnull</structfield> field of the
    <structname>FunctionCallInfoData</structname> structure, if it wishes
    to return an SQL null result).  The difference between a call
    handler and an ordinary callee function is that the
    <structfield>flinfo-&gt;fn_oid</structfield> field of the
    <structname>FunctionCallInfoData</structname> structure will contain
    the OID of the actual function to be called, not of the call
    handler itself.  The call handler must use this field to determine
    which function to execute.  Also, the passed argument list has
    been set up according to the declaration of the target function,
    not of the call handler.
   </para>
____________________________________________________________________________-->
   <para>
    调用处理器的调用方式和其他任何函数相同：它接收一个包含参数值和有关被调用函数信息的<structname>FunctionCallInfoData</structname> <type>结构</type>，并且它被期望返回一个<type>Datum</type>结果（并且如果它希望返回一个 SQL 空值结果，它可能设置<structname>FunctionCallInfoData</structname>结构的<structfield>isnull</structfield>域）。一个调用处理器和一个普通被调用函数之间的区别是<structname>FunctionCallInfoData</structname>结构的<structfield>flinfo-&gt;fn_oid</structfield>域将包含要被调用的实际函数的 OID，而不是调用处理器本身。调用处理器必须使用这个域来决定要执行哪个函数。同样，被传递的参数列表已经被根据目标函数而不是调用处理器的声明被设置好。
   </para>

<!--==========================orignal english content==========================
   <para>
    It's up to the call handler to fetch the entry of the function from the
    <classname>pg_proc</classname> system catalog and to analyze the argument
    and return types of the called function. The <literal>AS</> clause from the
    <command>CREATE FUNCTION</command> command for the function will be found
    in the <literal>prosrc</literal> column of the
    <classname>pg_proc</classname> row. This is commonly source
    text in the procedural language, but in theory it could be something else,
    such as a path name to a file, or anything else that tells the call handler
    what to do in detail.
   </para>
____________________________________________________________________________-->
   <para>
    调用处理器负责从<classname>pg_proc</classname>系统目录中取得该函数的项并且分析被调用函数的参数和返回类型。该函数的<command>CREATE FUNCTION</command>命令的<literal>AS</literal>子句可以在<classname>pg_proc</classname>行的<literal>prosrc</literal>列中被找到。通常这是过程语言中的源文本，但是在理论上它可以是其他某种东西，例如一个文件的路径名或其他任何详细告诉调用处理器做什么的东西。
   </para>

<!--==========================orignal english content==========================
   <para>
    Often, the same function is called many times per SQL statement.
    A call handler can avoid repeated lookups of information about the
    called function by using the
    <structfield>flinfo-&gt;fn_extra</structfield> field.  This will
    initially be <symbol>NULL</>, but can be set by the call handler to point at
    information about the called function.  On subsequent calls, if
    <structfield>flinfo-&gt;fn_extra</structfield> is already non-<symbol>NULL</>
    then it can be used and the information lookup step skipped.  The
    call handler must make sure that
    <structfield>flinfo-&gt;fn_extra</structfield> is made to point at
    memory that will live at least until the end of the current query,
    since an <structname>FmgrInfo</structname> data structure could be
    kept that long.  One way to do this is to allocate the extra data
    in the memory context specified by
    <structfield>flinfo-&gt;fn_mcxt</structfield>; such data will
    normally have the same lifespan as the
    <structname>FmgrInfo</structname> itself.  But the handler could
    also choose to use a longer-lived memory context so that it can cache
    function definition information across queries.
   </para>
____________________________________________________________________________-->
   <para>
    同一个函数在每个 SQL 命令中常常被调用多次。一个调用处理器可以通过使用<structfield>flinfo-&gt;fn_extra</structfield>域来避免重复查找关于被调用函数的信息。这个域最初将为<symbol>NULL</symbol>，但是可以被调用处理器设置为指向关于被调用函数的信息。在后续调用中，如果<structfield>flinfo-&gt;fn_extra</structfield>已经为非-<symbol>NULL</symbol>，则它可以被使用并且信息查找步骤将被跳过。调用处理器必须确保<structfield>flinfo-&gt;fn_extra</structfield>被指向直到当前查询的末尾都存活的内存，因为一个<structname>FmgrInfo</structname>数据接口可以被保持那么久。一种方式是在<structfield>flinfo-&gt;fn_mcxt</structfield>指定的内存上下文中分配额外的数据；这样的数据通常必须与<structname>FmgrInfo</structname>本身具有相同的生命期。但是处理器也可以选择使用一个生存时间更长的内存上下文，这样它能够在查询之间缓存函数定义信息。
   </para>

<!--==========================orignal english content==========================
   <para>
    When a procedural-language function is invoked as a trigger, no arguments
    are passed in the usual way, but the
    <structname>FunctionCallInfoData</structname>'s
    <structfield>context</structfield> field points at a
    <structname>TriggerData</structname> structure, rather than being <symbol>NULL</>
    as it is in a plain function call.  A language handler should
    provide mechanisms for procedural-language functions to get at the trigger
    information.
   </para>
____________________________________________________________________________-->
   <para>
    当一个过程语言函数被作为一个触发器调用时，不会有参数通过常用方式被传递，但是<structname>FunctionCallInfoData</structname>的<structfield>context</structfield>域指向一个<structname>TriggerData</structname>结构而不是为<symbol>NULL</symbol>（就像它在一个普通函数调用中那样）。一个语言处理器应该为过程语言函数提供机制来得到触发器信息。
   </para>

<!--==========================orignal english content==========================
   <para>
    This is a template for a procedural-language handler written in C:
<programlisting>
#include "postgres.h"
#include "executor/spi.h"
#include "commands/trigger.h"
#include "fmgr.h"
#include "access/heapam.h"
#include "utils/syscache.h"
#include "catalog/pg_proc.h"
#include "catalog/pg_type.h"

PG_MODULE_MAGIC;

PG_FUNCTION_INFO_V1(plsample_call_handler);

Datum
plsample_call_handler(PG_FUNCTION_ARGS)
{
    Datum          retval;

    if (CALLED_AS_TRIGGER(fcinfo))
    {
        /*
         * Called as a trigger function
         */
        TriggerData    *trigdata = (TriggerData *) fcinfo-&gt;context;

        retval = ...
    }
    else
    {
        /*
         * Called as a function
         */

        retval = ...
    }

    return retval;
}
</programlisting>
    Only a few thousand lines of code have to be added instead of the
    dots to complete the call handler.
   </para>
____________________________________________________________________________-->
   <para>
    这是一个用 C 编写的过程语言处理器的模板：
<programlisting>
#include "postgres.h"
#include "executor/spi.h"
#include "commands/trigger.h"
#include "fmgr.h"
#include "access/heapam.h"
#include "utils/syscache.h"
#include "catalog/pg_proc.h"
#include "catalog/pg_type.h"

PG_MODULE_MAGIC;

PG_FUNCTION_INFO_V1(plsample_call_handler);

Datum
plsample_call_handler(PG_FUNCTION_ARGS)
{
    Datum          retval;

    if (CALLED_AS_TRIGGER(fcinfo))
    {
        /*
         * Called as a trigger function
         */
        TriggerData    *trigdata = (TriggerData *) fcinfo-&gt;context;

        retval = ...
    }
    else
    {
        /*
         * Called as a function
         */

        retval = ...
    }

    return retval;
}
</programlisting>
    要完成该调用处理器，只需要加入几千行代码来替代点号即可。
   </para>

<!--==========================orignal english content==========================
   <para>
    After having compiled the handler function into a loadable module
    (see <xref linkend="dfunc">), the following commands then
    register the sample procedural language:
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '<replaceable>filename</replaceable>'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting>
   </para>
____________________________________________________________________________-->
   <para>
    在将处理器函数编译成一个可载入模块（<xref linkend="dfunc"/>）后，接着用下列命令注册例子过程语言：
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '<replaceable>filename</replaceable>'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting>
   </para>

<!--==========================orignal english content==========================
   <para>
    Although providing a call handler is sufficient to create a minimal
    procedural language, there are two other functions that can optionally
    be provided to make the language more convenient to use.  These
    are a <firstterm>validator</firstterm> and an
    <firstterm>inline handler</firstterm>.  A validator can be provided
    to allow language-specific checking to be done during
    <xref linkend="sql-createfunction">.
    An inline handler can be provided to allow the language to support
    anonymous code blocks executed via the <xref linkend="sql-do"> command.
   </para>
____________________________________________________________________________-->
   <para>
    尽管提供一个调用处理器对于创建一个最小过程语言已经足够，还可以提供其他两个可选的函数来让该函数更易用。它们是<firstterm>验证器</firstterm>和<firstterm>内联处理器</firstterm>。一个验证器可以被提供来允许在<xref linkend="sql-createfunction"/>期间完成语言相关的检查。一个内联处理器可以被提供来允许语言支持通过<xref linkend="sql-do"/>命令执行匿名代码块。
   </para>

<!--==========================orignal english content==========================
   <para>
    If a validator is provided by a procedural language, it
    must be declared as a function taking a single parameter of type
    <type>oid</>.  The validator's result is ignored, so it is customarily
    declared to return <type>void</>.  The validator will be called at
    the end of a <command>CREATE FUNCTION</> command that has created
    or updated a function written in the procedural language.
    The passed-in OID is the OID of the function's <classname>pg_proc</>
    row.  The validator must fetch this row in the usual way, and do
    whatever checking is appropriate.
    First, call <function>CheckFunctionValidatorAccess()</> to diagnose
    explicit calls to the validator that the user could not achieve through
    <command>CREATE FUNCTION</>.  Typical checks then include verifying
    that the function's argument and result types are supported by the
    language, and that the function's body is syntactically correct
    in the language.  If the validator finds the function to be okay,
    it should just return.  If it finds an error, it should report that
    via the normal <function>ereport()</> error reporting mechanism.
    Throwing an error will force a transaction rollback and thus prevent
    the incorrect function definition from being committed.
   </para>
____________________________________________________________________________-->
   <para>
    如果一个验证器被一个过程语言提供，它必须被声明为一个采用一个单一<type>oid</type>类型参数的函数。该验证器的结果被忽略，因为它通常被声明为返回<type>void</type>。验证器将在一个已经创建了或更新了一个以该过程语言编写的函数的<command>CREATE FUNCTION</command>命令之后被调用。被传入的 OID 是函数的<classname>pg_proc</classname>行的 OID。验证器必须用通常方式取得这个行，并且做任何合适的检查。首先，调用<function>CheckFunctionValidatorAccess()</function>来诊断对用户通过<command>CREATE FUNCTION</command>无法达到的验证器的显式调用。典型的检查包括验证函数的参数和结果类型是否被该语言支持，以及该函数体在该语言中语法是否正确。如果验证器发现该函数是好的，它应该只是返回。如果它发现一个错误，它应该通过通常的<function>ereport()</function>错误报告机制报告该错误。抛出一个错误将强制一次事务回滚并且因此阻止不正确的函数定义被提交。
   </para>

<!--==========================orignal english content==========================
   <para>
    Validator functions should typically honor the <xref
    linkend="guc-check-function-bodies"> parameter: if it is turned off then
    any expensive or context-sensitive checking should be skipped.  If the
    language provides for code execution at compilation time, the validator
    must suppress checks that would induce such execution.  In particular,
    this parameter is turned off by <application>pg_dump</> so that it can
    load procedural language functions without worrying about side effects or
    dependencies of the function bodies on other database objects.
    (Because of this requirement, the call handler should avoid
    assuming that the validator has fully checked the function.  The point
    of having a validator is not to let the call handler omit checks, but
    to notify the user immediately if there are obvious errors in a
    <command>CREATE FUNCTION</> command.)
    While the choice of exactly what to check is mostly left to the
    discretion of the validator function, note that the core
    <command>CREATE FUNCTION</> code only executes <literal>SET</> clauses
    attached to a function when <varname>check_function_bodies</> is on.
    Therefore, checks whose results might be affected by GUC parameters
    definitely should be skipped when <varname>check_function_bodies</> is
    off, to avoid false failures when reloading a dump.
   </para>
____________________________________________________________________________-->
   <para>
    验证器函数通常应该尊重<xref linkend="guc-check-function-bodies"/>参数：如果它被关闭那么任何代价大的或上下文敏感的检查应该被跳过。如果该语言提供了编译时代码执行，验证器必须抑制可能引起这种执行的检查。特别地，这个参数会被<application>pg_dump</application>关闭，这样它能载入过程语言函数而不用担心副作用或那些函数体对其他数据库对象的依赖（因为这种要求，调用处理器应该避免假设验证器已经完整地检查过该函数。拥有一个验证器的要点不是让调用处理器忽略检查，而是如果在一个<command>CREATE FUNCTION</command>命令中发现明显错误时立即提示用户）。然而究竟检查什么的选择大部分都留给了验证器函数，注意当<varname>check_function_bodies</varname>为打开时，核心<command>CREATE FUNCTION</command>代码只执行附加到一个函数的<literal>SET</literal>子句。 因此，为了避免在重新载入一个转储时的伪失败，当<varname>check_function_bodies</varname>为关闭时，结果可能会被 GUC 参数影响的检查绝对应当被跳过。
   </para>

<!--==========================orignal english content==========================
   <para>
    If an inline handler is provided by a procedural language, it
    must be declared as a function taking a single parameter of type
    <type>internal</>.  The inline handler's result is ignored, so it is
    customarily declared to return <type>void</>.  The inline handler
    will be called when a <command>DO</> statement is executed specifying
    the procedural language.  The parameter actually passed is a pointer
    to an <structname>InlineCodeBlock</> struct, which contains information
    about the <command>DO</> statement's parameters, in particular the
    text of the anonymous code block to be executed.  The inline handler
    should execute this code and return.
   </para>
____________________________________________________________________________-->
   <para>
    如果一个过程语言提供了一个内联处理器，它必须被声明为一个采用一个单一<type>internal</type>类型参数的函数。内联处理器的结果会被忽略，因此它通常被声明为返回<type>void</type>。当一个<command>DO</command>语句被调用执行指定过程语言时，内联处理器将被调用。实际被传递的参数是一个指向一个<structname>InlineCodeBlock</structname>结构的指针，它包含有关<command>DO</command>语句参数的而信息，特别是将被执行的匿名代码块的文本。内联处理器应该执行该代码并返回。
   </para>

<!--==========================orignal english content==========================
   <para>
    It's recommended that you wrap all these function declarations,
    as well as the <command>CREATE LANGUAGE</> command itself, into
    an <firstterm>extension</> so that a simple <command>CREATE EXTENSION</>
    command is sufficient to install the language.  See
    <xref linkend="extend-extensions"> for information about writing
    extensions.
   </para>
____________________________________________________________________________-->
   <para>
    我们推荐你包装所有这些函数声明，以及<command>CREATE LANGUAGE</command>命令本身到一个<firstterm>extension</firstterm>中，这样一个简单的<command>CREATE EXTENSION</command>命令就足以安装该语言。关于编写扩展的信息请见<xref linkend="extend-extensions"/>。
   </para>

<!--==========================orignal english content==========================
   <para>
    The procedural languages included in the standard distribution
    are good references when trying to write your own language handler.
    Look into the <filename>src/pl</> subdirectory of the source tree.
    The <xref linkend="sql-createlanguage">
    reference page also has some useful details.
   </para>
____________________________________________________________________________-->
   <para>
    在尝试编写你自己的语言处理器时，包括在标准发布中的过程语言是很好的参考。看看源码树中的<filename>src/pl</filename>子目录。<xref linkend="sql-createlanguage"/>参考页也有一些有用的细节。
   </para>

 </chapter>

<!-- doc/src/sgml/pgprewarm.sgml -->

<sect1 id="pgprewarm" xreflabel="pg_prewarm">
<!--==========================orignal english content==========================
 <title>pg_prewarm</title>
____________________________________________________________________________-->
 <title>pg_prewarm</title>

<!--==========================orignal english content==========================
 <indexterm zone="pgprewarm">
  <primary>pg_prewarm</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="pgprewarm">
  <primary>pg_prewarm</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>pg_prewarm</filename> module provides a convenient way
  to load relation data into either the operating system buffer cache
  or the <productname>PostgreSQL</productname> buffer cache.  Prewarming
  can be performed manually using the <filename>pg_prewarm</filename> function,
  or can be performed automatically by including <literal>pg_prewarm</literal> in
  <xref linkend="guc-shared-preload-libraries"/>.  In the latter case, the
  system will run a background worker which periodically records the contents
  of shared buffers in a file called <filename>autoprewarm.blocks</filename> and
  will, using 2 background workers, reload those same blocks after a restart.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>pg_prewarm</filename>模块提供一种方便的方法把关系
  数据载入到操作系统缓冲区或者
  <productname>PostgreSQL</productname>缓冲区。可以使用<filename>pg_prewarm</filename>函数手工执行预热，或者通过在<xref linkend="guc-shared-preload-libraries"/>中包括<literal>pg_prewarm</literal>来自动执行预热。在后一种情况中，系统将运行一个后台工作者，它会周期性地把共享内存中的内容记录在一个名为<filename>autoprewarm.blocks</filename>的文件中，并且在重新启动后用两个后台工作者重新载入那些块。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Functions</title>
____________________________________________________________________________-->
  <title>函数</title>

<!--==========================orignal english content==========================
<synopsis>
pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
           first_block int8 default null,
           last_block int8 default null) RETURNS int8
</synopsis>
____________________________________________________________________________-->
<synopsis>
pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
           first_block int8 default null,
           last_block int8 default null) RETURNS int8
</synopsis>

<!--==========================orignal english content==========================
  <para>
   The first argument is the relation to be prewarmed.  The second argument
   is the prewarming method to be used, as further discussed below; the third
   is the relation fork to be prewarmed, usually <literal>main</literal>.
   The fourth argument is the first block number to prewarm
   (<literal>NULL</literal> is accepted as a synonym for zero).  The fifth
   argument is the last block number to prewarm (<literal>NULL</literal>
   means prewarm through the last block in the relation).  The return value
   is the number of blocks prewarmed.
  </para>
____________________________________________________________________________-->
  <para>
   第一个参数是要预热的关系。第二个参数是要使用的预热方法，下文将会
   进一步讨论。第三个参数是要被预热的关系分叉，通常是<literal>main</literal>。
   第四个参数是要预热的第一个块号（<literal>NULL</literal>也被接受，它等同于
   零）。第五个参数是要预热的最后一个块号（<literal>NULL</literal>表示一直
   预热到关系的最后一个块）。返回值是被预热的块数。
  </para>

<!--==========================orignal english content==========================
  <para>
   There are three available prewarming methods.  <literal>prefetch</literal>
   issues asynchronous prefetch requests to the operating system, if this is
   supported, or throws an error otherwise.  <literal>read</literal> reads
   the requested range of blocks; unlike <literal>prefetch</literal>, this is
   synchronous and supported on all platforms and builds, but may be slower.
   <literal>buffer</literal> reads the requested range of blocks into the
   database buffer cache.
  </para>
____________________________________________________________________________-->
  <para>
   有三种可用的预热方法。<literal>prefetch</literal>会向操作系统发出异步
   预取请求（如果支持异步预取），不支持异步预取则抛出一个错误。
   <literal>read</literal>会读取要求范围的块。与<literal>prefetch</literal>
   不同，它是同步的并且在所有平台上都被支持，但是可能较慢。
   <literal>buffer</literal>会把要求范围的块读入道数据库的缓冲区。
  </para>

<!--==========================orignal english content==========================
  <para>
   Note that with any of these methods, attempting to prewarm more blocks than
   can be cached &mdash; by the OS when using <literal>prefetch</literal> or
   <literal>read</literal>, or by <productname>PostgreSQL</productname> when
   using <literal>buffer</literal> &mdash; will likely result in lower-numbered
   blocks being evicted as higher numbered blocks are read in.  Prewarmed data
   also enjoys no special protection from cache evictions, so it is possible
   that other system activity may evict the newly prewarmed blocks shortly
   after they are read; conversely, prewarming may also evict other data from
   cache. For these reasons, prewarming is typically most useful at startup,
   when caches are largely empty.
  </para>
____________________________________________________________________________-->
  <para>
   注意使用任意一种方法尝试预热比能缓存的数量更多的块 &mdash; 使用
   <literal>prefetch</literal>或者<literal>read</literal>（由 OS）或者使用
   <literal>buffer</literal>（由<productname>PostgreSQL</productname>
   ） &mdash; 将很可能导致高编号块被读入时把低编号的块从缓冲区中逐出的情况。
   被预热的数据也不享受对缓冲区替换的特别保护，因此其他系统活动可能会在刚刚
   被预热的块被读入后很快就将它们逐出。反过来，预热也可能把其他数据逐出缓存。
   由于这些原因，预热通常在启动时最有用，那时缓冲大部分都为空。
  </para>

<!--==========================orignal english content==========================
<synopsis>
autoprewarm_start_worker() RETURNS void
</synopsis>
____________________________________________________________________________-->
<synopsis>
autoprewarm_start_worker() RETURNS void
</synopsis>

<!--==========================orignal english content==========================
  <para>
   Launch the main autoprewarm worker.  This will normally happen
   automatically, but is useful if automatic prewarm was not configured at
   server startup time and you wish to start up the worker at a later time.
  </para>
____________________________________________________________________________-->
  <para>
   启动主要的autoprewarm工作者。这通常将会自动发生，但是如果没有在服务器启动时配置自动预热并且用户希望在稍晚的时候启动该工作者，这个函数就能发挥作用。
  </para>

<!--==========================orignal english content==========================
<synopsis>
autoprewarm_dump_now() RETURNS int8
</synopsis>
____________________________________________________________________________-->
<synopsis>
autoprewarm_dump_now() RETURNS int8
</synopsis>

<!--==========================orignal english content==========================
  <para>
   Update <filename>autoprewarm.blocks</filename> immediately.  This may be useful
   if the autoprewarm worker is not running but you anticipate running it
   after the next restart.  The return value is the number of records written
   to <filename>autoprewarm.blocks</filename>.
  </para>
____________________________________________________________________________-->
  <para>
   立即更新<filename>autoprewarm.blocks</filename>。如果autoprewarm工作者没有运行但用户希望它在下一次重启后运行，则这个函数会很有用。返回值是写入到<filename>autoprewarm.blocks</filename>中的记录数。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Configuration Parameters</title>
____________________________________________________________________________-->
  <title>配置参数</title>

 <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>pg_prewarm.autoprewarm</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm</varname> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>pg_prewarm.autoprewarm</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm</varname>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      Controls whether the server should run the autoprewarm worker. This is
      on by default. This parameter can only be set at server start.
     </para>
____________________________________________________________________________-->
     <para>
      控制服务器是否应该运行autoprewarm工作者。默认这个参数为on。这个参数只能在服务器启动时设置。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
   <term>
     <varname>pg_prewarm.autoprewarm_interval</varname> (<type>int</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm_interval</varname> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
   <term>
     <varname>pg_prewarm.autoprewarm_interval</varname> (<type>int</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm_interval</varname>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      This is the interval between updates to <literal>autoprewarm.blocks</literal>.
      The default is 300 seconds. If set to 0, the file will not be
      dumped at regular intervals, but only when the server is shut down.
     </para>
____________________________________________________________________________-->
     <para>
      这是更新<literal>autoprewarm.blocks</literal>的间隔。默认是300秒。如果被设置为0，该文件将不会以常规的间隔方式转储，而是只在服务器关闭时转储。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Author</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
____________________________________________________________________________-->
  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
 </sect2>

</sect1>

<!-- doc/src/sgml/regress.sgml -->

 <chapter id="regress">
<!--==========================orignal english content==========================
  <title>Regression Tests</title>
____________________________________________________________________________-->
  <title>回归测试</title>

<!--==========================orignal english content==========================
  <indexterm zone="regress">
   <primary>regression tests</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="regress">
   <primary>regression tests</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm zone="regress">
   <primary>test</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="regress">
   <primary>test</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   The regression tests are a comprehensive set of tests for the SQL
   implementation in <productname>PostgreSQL</productname>.  They test
   standard SQL operations as well as the extended capabilities of
   <productname>PostgreSQL</productname>.
  </para>
____________________________________________________________________________-->
  <para>
   回归测试是<productname>PostgreSQL</productname>中对于 SQL 实现的一组综合测试集。它们测试标准 SQL 操作以及<productname>PostgreSQL</productname>的扩展能力。
  </para>

  <sect1 id="regress-run">
<!--==========================orignal english content==========================
   <title>Running the Tests</title>
____________________________________________________________________________-->
   <title>运行测试</title>

<!--==========================orignal english content==========================
  <para>
   The regression tests can be run against an already installed and
   running server, or using a temporary installation within the build
   tree.  Furthermore, there is a <quote>parallel</quote> and a
   <quote>sequential</quote> mode for running the tests.  The
   sequential method runs each test script alone, while the
   parallel method starts up multiple server processes to run groups
   of tests in parallel.  Parallel testing adds confidence that
   interprocess communication and locking are working correctly.
  </para>
____________________________________________________________________________-->
  <para>
   回归测试可以在一个已经安装并运行的服务器上运行，或者在编译树中的一个临时安装上运行。此外，还有运行该测试的<quote>并行</quote>和<quote>顺序</quote>模式。顺序方法单独运行每一个测试脚本，而并行方法则开启多个服务器进程来并行地运行多组测试。并行测试能够发现进程间通信和锁定是否工作正确。
  </para>

  <sect2>
<!--==========================orignal english content==========================
   <title>Running the Tests Against a Temporary Installation</title>
____________________________________________________________________________-->
   <title>在一个临时安装上运行测试</title>

<!--==========================orignal english content==========================
  <para>
   To run the parallel regression tests after building but before installation,
   type:
<screen>
make check
</screen>
   in the top-level directory.  (Or you can change to
   <filename>src/test/regress</filename> and run the command there.)
   At the end you should see something like:
<screen>
<computeroutput>
=======================
 All 115 tests passed.
=======================
</computeroutput>
</screen>
   or otherwise a note about which tests failed.  See <xref
   linkend="regress-evaluation"/> below before assuming that a
   <quote>failure</quote> represents a serious problem.
  </para>
____________________________________________________________________________-->
  <para>
   要在编译之后且在安装之前运行并行回归测试，可在顶层目录中键入：
<screen>
make check
</screen>
   （或者你可以切换到<filename>src/test/regress</filename>并且在那里运行该命令）。最后你应该看到这样的信息：
<screen>
<computeroutput>
=======================
 All 115 tests passed.
=======================
</computeroutput>
</screen>
   或者关于哪些测试失败的提示。见下面的<xref linkend="regress-evaluation"/>来确定一个<quote>失败</quote>是否表示一个严重的问题。
  </para>

<!--==========================orignal english content==========================
   <para>
    Because this test method runs a temporary server, it will not work
    if you did the build as the root user, since the server will not start as
    root.  Recommended procedure is not to do the build as root, or else to
    perform testing after completing the installation.
   </para>
____________________________________________________________________________-->
   <para>
    因为这种测试方法运行一个临时服务器，如果你作为根用户进行了编译，它将无法工作，因为服务器无法用 root 启动。我们推荐的过程是不要作为 root 编译，或者在完成安装后执行测试。
   </para>

<!--==========================orignal english content==========================
   <para>
    If you have configured <productname>PostgreSQL</productname> to install
    into a location where an older <productname>PostgreSQL</productname>
    installation already exists, and you perform <literal>make check</literal>
    before installing the new version, you might find that the tests fail
    because the new programs try to use the already-installed shared
    libraries.  (Typical symptoms are complaints about undefined symbols.)
    If you wish to run the tests before overwriting the old installation,
    you'll need to build with <literal>configure -&minus;disable-rpath</literal>.
    It is not recommended that you use this option for the final installation,
    however.
   </para>
____________________________________________________________________________-->
   <para>
    如果你已经配置<productname>PostgreSQL</productname>安装到一个已经存在有旧的<productname>PostgreSQL</productname>安装的位置，并且你在安装新版本前执行了<literal>make check</literal>，你可能会发现测试会因为新程序尝试使用已经安装的共享库而失败（典型特征是抱怨未定义的符号）。如果你希望在覆盖旧安装之前运行测试，你将需要使用<literal>configure --disable-rpath</literal>编译。但是我们不推荐为最终安装使用这个选项。
   </para>

<!--==========================orignal english content==========================
   <para>
    The parallel regression test starts quite a few processes under your
    user ID.  Presently, the maximum concurrency is twenty parallel test
    scripts, which means forty processes: there's a server process and a
    <application>psql</application> process for each test script.
    So if your system enforces a per-user limit on the number of processes,
    make sure this limit is at least fifty or so, else you might get
    random-seeming failures in the parallel test.  If you are not in
    a position to raise the limit, you can cut down the degree of parallelism
    by setting the <literal>MAX_CONNECTIONS</literal> parameter.  For example:
<screen>
make MAX_CONNECTIONS=10 check
</screen>
    runs no more than ten tests concurrently.
   </para>
____________________________________________________________________________-->
   <para>
    并行回归测试会在你的用户 ID 下启动相当多的进程。当前，最大并发量是二十个并行测试脚本，这意味着四十个进程：对每一个测试脚本有一个服务器进程和一个<application>psql</application>进程。因此如果你的系统对每个用户的进程数有强制限制，确保这个限制至少是五十，否则你将在并行测试中失败。如果你没有权利提升该限制，你可以通过设置<literal>MAX_CONNECTIONS</literal>参数来降低并发度。例如：
<screen>
make MAX_CONNECTIONS=10 check
</screen>
    会并发运行不超过十个测试。
   </para>
  </sect2>

  <sect2>
<!--==========================orignal english content==========================
   <title>Running the Tests Against an Existing Installation</title>
____________________________________________________________________________-->
   <title>在一个现有安装上运行测试</title>

<!--==========================orignal english content==========================
  <para>
   To run the tests after installation (see <xref linkend="installation"/>),
   initialize a data area and start the
   server as explained in <xref linkend="runtime"/>, then type:
<screen>
make installcheck
</screen>
or for a parallel test:
<screen>
make installcheck-parallel
</screen>
   The tests will expect to contact the server at the local host and the
   default port number, unless directed otherwise by <envar>PGHOST</envar> and
   <envar>PGPORT</envar> environment variables.  The tests will be run in a
   database named <literal>regression</literal>; any existing database by this name
   will be dropped.
  </para>
____________________________________________________________________________-->
  <para>
   要在安装后运行测试（见<xref linkend="installation"/>），初始化一个数据区域并且按照<xref linkend="runtime"/>所解释的启动服务器，然后输入：
<screen>
make installcheck
</screen>
或者进行一次并行测试：
<screen>
make installcheck-parallel
</screen>
   该测试将期望联系在本地主机和默认端口号上的服务器（除非通过<envar>PGHOST</envar>和<envar>PGPORT</envar>环境变量覆盖）。该测试将在一个名为<literal>regression</literal>的数据库中运行，任何以该名称存在的数据库将被删除。
   </para>

<!--==========================orignal english content==========================
  <para>
   The tests will also transiently create some cluster-wide objects, such as
   roles and tablespaces.  These objects will have names beginning with
   <literal>regress_</literal>.  Beware of using <literal>installcheck</literal>
   mode in installations that have any actual users or tablespaces named
   that way.
  </para>
____________________________________________________________________________-->
  <para>
   该测试还将短暂地创建一些集簇范围内的对象，例如角色和表空间。这些对象的名称都会以<literal>regress_</literal>开始。在实际具有以这种方式命名对象的安装中使用<literal>installcheck</literal>模式时要格外小心。
  </para>
  </sect2>

  <sect2>
<!--==========================orignal english content==========================
   <title>Additional Test Suites</title>
____________________________________________________________________________-->
   <title>附加测试套件</title>

<!--==========================orignal english content==========================
  <para>
   The <literal>make check</literal> and <literal>make installcheck</literal> commands
   run only the <quote>core</quote> regression tests, which test built-in
   functionality of the <productname>PostgreSQL</productname> server.  The source
   distribution also contains additional test suites, most of them having
   to do with add-on functionality such as optional procedural languages.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>make check</literal>和<literal>make installcheck</literal>命令只运行<quote>核心的</quote>回归测试，这只测试<productname>PostgreSQL</productname>服务器的内建功能。源代码发布也包含额外的测试套件，它们中的大部分用于测试附加功能，例如可选的过程语言。
  </para>

<!--==========================orignal english content==========================
  <para>
   To run all test suites applicable to the modules that have been selected
   to be built, including the core tests, type one of these commands at the
   top of the build tree:
<screen>
make check-world
make installcheck-world
</screen>
   These commands run the tests using temporary servers or an
   already-installed server, respectively, just as previously explained
   for <literal>make check</literal> and <literal>make installcheck</literal>.  Other
   considerations are the same as previously explained for each method.
   Note that <literal>make check-world</literal> builds a separate temporary
   installation tree for each tested module, so it requires a great deal
   more time and disk space than <literal>make installcheck-world</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   要运行将被编译模块的所有测试套件（包括核心测试），在编译树的顶端输入这些命令之一：
<screen>
make check-world
make installcheck-world
</screen>
   这些命令分别在临时服务器或已经安装好的服务器上运行测试（与之前介绍的<literal>make check</literal>和<literal>make installcheck</literal>类似）。其他的考虑与之前为每种方法解释的相同。注意<literal>make check-world</literal>为每一个受测模块建立一个独立的临时安装树，因此它比起<literal>make installcheck-world</literal>需要更多的时间和磁盘空间。
  </para>

<!--==========================orignal english content==========================
  <para>
   Alternatively, you can run individual test suites by typing
   <literal>make check</literal> or <literal>make installcheck</literal> in the appropriate
   subdirectory of the build tree.  Keep in mind that <literal>make
   installcheck</literal> assumes you've installed the relevant module(s), not
   only the core server.
  </para>
____________________________________________________________________________-->
  <para>
   你也可以通过在编译树适当的子目录中输入<literal>make check</literal>或<literal>make installcheck</literal>来运行个体的测试套件。记住<literal>make installcheck</literal>假设你已经安装了相关模块，而不仅仅是核心服务器。
  </para>

<!--==========================orignal english content==========================
  <para>
   The additional tests that can be invoked this way include:
  </para>
____________________________________________________________________________-->
  <para>
   可以以这种方法调用的额外测试包括：
  </para>

  <itemizedlist>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     Regression tests for optional procedural languages (other than
     <application>PL/pgSQL</application>, which is tested by the core tests).
     These are located under <filename>src/pl</filename>.
    </para>
____________________________________________________________________________-->
    <para>
     可选过程语言的回归测试（除<application>PL/pgSQL</application>之外，它将被核心测试测试）。这些位于<filename>src/pl</filename>之下。
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     Regression tests for <filename>contrib</filename> modules,
     located under <filename>contrib</filename>.
     Not all <filename>contrib</filename> modules have tests.
    </para>
____________________________________________________________________________-->
    <para>
     <filename>contrib</filename>模块的回归测试，位于<filename>contrib</filename>。不是所有的<filename>contrib</filename>模块都有测试。
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     Regression tests for the ECPG interface library,
     located in <filename>src/interfaces/ecpg/test</filename>.
    </para>
____________________________________________________________________________-->
    <para>
     ECPG 接口库的回归测试，位于<filename>src/interfaces/ecpg/test</filename>。
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     Tests stressing behavior of concurrent sessions,
     located in <filename>src/test/isolation</filename>.
    </para>
____________________________________________________________________________-->
    <para>
     并发会话行为的压力测试，位于<filename>src/test/isolation</filename>。
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     Tests of client programs under <filename>src/bin</filename>.  See
     also <xref linkend="regress-tap"/>.
    </para>
____________________________________________________________________________-->
    <para>
     客户端的测试程序在<filename>src/bin</filename>下。另见
     <xref linkend="regress-tap"/>。
    </para>
   </listitem>
  </itemizedlist>

<!--==========================orignal english content==========================
  <para>
   When using <literal>installcheck</literal> mode, these tests will destroy any
   existing databases named <literal>pl_regression</literal>,
   <literal>contrib_regression</literal>, <literal>isolation_regression</literal>,
   <literal>ecpg1_regression</literal>, or <literal>ecpg2_regression</literal>, as well as
   <literal>regression</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   在使用<literal>installcheck</literal>模式时，这些测试将毁掉任何现有的名为<literal>pl_regression</literal>、<literal>contrib_regression</literal>、<literal>isolation_regression</literal>、<literal>ecpg1_regression</literal>或者<literal>ecpg2_regression</literal>的数据库，以及<literal>regression</literal>。
  </para>

<!--==========================orignal english content==========================
  <para>
   The TAP-based tests are run only when PostgreSQL was configured with the
   option <option>-&minus;enable-tap-tests</option>.  This is recommended for
   development, but can be omitted if there is no suitable Perl installation.
  </para>
____________________________________________________________________________-->
  <para>
   只有在PostgreSQL被使用选项<option>--enable-tap-tests</option>配置时，基于TAP的测试才能被运行。推荐在开发时使用这种方式，但如果没有合适的Perl安装可用也可以忽略。
  </para>

<!--==========================orignal english content==========================
  <para>
   Some test suites are not run by default, either because they are not secure
   to run on a multiuser system or because they require special software.  You
   can decide which test suites to run additionally by setting the
   <command>make</command> or environment variable
   <varname>PG_TEST_EXTRA</varname> to a whitespace-separated list, for
   example:
<programlisting>
make check-world PG_TEST_EXTRA='kerberos ldap ssl'
</programlisting>
   The following values are currently supported:
   <variablelist>
    <varlistentry>
     <term><literal>kerberos</literal></term>
     <listitem>
      <para>
       Runs the test suite under <filename>src/test/kerberos</filename>.  This
       requires an MIT Kerberos installation and opens TCP/IP listen sockets.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>ldap</literal></term>
     <listitem>
      <para>
       Runs the test suite under <filename>src/test/ldap</filename>.  This
       requires an <productname>OpenLDAP</productname> installation and opens
       TCP/IP listen sockets.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>ssl</literal></term>
     <listitem>
      <para>
       Runs the test suite under <filename>src/test/ssl</filename>.  This opens TCP/IP listen sockets.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   Tests for features that are not supported by the current build
   configuration are not run even if they are mentioned in
   <varname>PG_TEST_EXTRA</varname>.
  </para>
____________________________________________________________________________-->
  <para>
   一些测试套件默认不会被运行，因为它们在多用户系统上运行不安全或者它们需要特殊的软件。可以通过设置<command>make</command>或环境变量为空格分隔的列表来决定额外运行哪些测试套件，例如：
<programlisting>
make check-world PG_TEST_EXTRA='kerberos ldap ssl'
</programlisting>
   当前支持下列值：
   <variablelist>
    <varlistentry>
     <term><literal>kerberos</literal></term>
     <listitem>
      <para>
       运行<filename>src/test/kerberos</filename>下的测试套件。这要求一个MIT Kerberos安装并且打开TCP/IP监听端口。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>ldap</literal></term>
     <listitem>
      <para>
       运行<filename>src/test/ldap</filename>下的测试套件。这要求一个<productname>OpenLDAP</productname>安装并且打开TCP/IP监听端口。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>ssl</literal></term>
     <listitem>
      <para>
       运行<filename>src/test/ssl</filename>下的测试套件。这会打开TCP/IP监听端口。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   即便在<varname>PG_TEST_EXTRA</varname>中提到了当前编译配置不支持的特性，针对它们的测试也不会被运行。
  </para>
  </sect2>

  <sect2>
<!--==========================orignal english content==========================
   <title>Locale and Encoding</title>
____________________________________________________________________________-->
   <title>区域和编码</title>

<!--==========================orignal english content==========================
   <para>
    By default, tests using a temporary installation use the
    locale defined in the current environment and the corresponding
    database encoding as determined by <command>initdb</command>.  It
    can be useful to test different locales by setting the appropriate
    environment variables, for example:
<screen>
make check LANG=C
make check LC_COLLATE=en_US.utf8 LC_CTYPE=fr_CA.utf8
</screen>
    For implementation reasons, setting <envar>LC_ALL</envar> does not
    work for this purpose; all the other locale-related environment
    variables do work.
   </para>
____________________________________________________________________________-->
   <para>
    默认情况下，测试使用的临时安装将使用在当前环境中定义的区域和由<command>initdb</command>决定的相应数据库编码。通过设置适当的环境变量来测试不同的区域是有用的，例如：
<screen>
make check LANG=C
make check LC_COLLATE=en_US.utf8 LC_CTYPE=fr_CA.utf8
</screen>
    由于实现的原因，为此目的设置<envar>LC_ALL</envar>不能工作，所有其他区域相关的环境变量都可以工作。
   </para>

<!--==========================orignal english content==========================
   <para>
    When testing against an existing installation, the locale is
    determined by the existing database cluster and cannot be set
    separately for the test run.
   </para>
____________________________________________________________________________-->
   <para>
    在对一个现有安装测试时，区域由现有数据库集簇决定并且不能为测试而独立设置。
   </para>

<!--==========================orignal english content==========================
   <para>
    You can also choose the database encoding explicitly by setting
    the variable <envar>ENCODING</envar>, for example:
<screen>
make check LANG=C ENCODING=EUC_JP
</screen>
    Setting the database encoding this way typically only makes sense
    if the locale is C; otherwise the encoding is chosen automatically
    from the locale, and specifying an encoding that does not match
    the locale will result in an error.
   </para>
____________________________________________________________________________-->
   <para>
    你也可以通过设置变量<envar>ENCODING</envar>来显式地选择数据库编码，例如：
<screen>
make check LANG=C ENCODING=EUC_JP
</screen>
    这样设置数据库编码通常只对区域为 C 有意义；否则编码将自动从区域选择，并且指定一个不匹配区域的编码将会导致错误。
   </para>

<!--==========================orignal english content==========================
   <para>
    The database encoding can be set for tests against either a temporary or
    an existing installation, though in the latter case it must be
    compatible with the installation's locale.
   </para>
____________________________________________________________________________-->
   <para>
    不管测试是针对临时安装还是已有安装，数据库编码都可以被设置，然而在后一种情况中它必须与安装的区域相兼容。
   </para>
  </sect2>

  <sect2>
<!--==========================orignal english content==========================
   <title>Extra Tests</title>
____________________________________________________________________________-->
   <title>额外测试</title>

<!--==========================orignal english content==========================
   <para>
    The core regression test suite contains a few test files that are not
    run by default, because they might be platform-dependent or take a
    very long time to run.  You can run these or other extra test
    files by setting the variable <envar>EXTRA_TESTS</envar>.  For
    example, to run the <literal>numeric_big</literal> test:
<screen>
make check EXTRA_TESTS=numeric_big
</screen>
    To run the collation tests:
<screen>
make check EXTRA_TESTS='collate.icu.utf8 collate.linux.utf8' LANG=en_US.utf8
</screen>
    The <literal>collate.linux.utf8</literal> test works only on Linux/glibc
    platforms.  The <literal>collate.icu.utf8</literal> test only works when
    support for ICU was built.  Both tests will only succeed when run in a
    database that uses UTF-8 encoding.
   </para>
____________________________________________________________________________-->
   <para>
    核心回归测试套件包含一些默认情况下不被运行的测试文件，因为它们可能平台相关的或者需要很长时间来运行。你可以通过设置变量<envar>EXTRA_TESTS</envar>来运行这些或者其他额外测试文件。例如，要运行<literal>numeric_big</literal>测试：
<screen>
make check EXTRA_TESTS=numeric_big
</screen>
    要运行排序规则测试：
<screen>
make check EXTRA_TESTS='collate.icu.utf8 collate.linux.utf8' LANG=en_US.utf8
</screen>
    <literal>collate.linux.utf8</literal>测试只在 Linux/glibc 平台上能够工作。只有在编译了ICU支持时，<literal>collate.icu.utf8</literal>测试才能工作。两种测试只有在使用 UTF-8 编码的数据库中才能成功运行。
   </para>
  </sect2>

  <sect2>
<!--==========================orignal english content==========================
   <title>Testing Hot Standby</title>
____________________________________________________________________________-->
   <title>测试热备</title>

<!--==========================orignal english content==========================
  <para>
   The source distribution also contains regression tests for the static
   behavior of Hot Standby. These tests require a running primary server
   and a running standby server that is accepting new WAL changes from the
   primary (using either file-based log shipping or streaming replication).
   Those servers are not automatically created for you, nor is replication
   setup documented here. Please check the various sections of the
   documentation devoted to the required commands and related issues.
  </para>
____________________________________________________________________________-->
  <para>
   源代码发布中还包含有用于热备的静态行为的回归测试。这些测试需要一个运行着的主服务器和一个运行着的后备服务器，并且后备服务器正从主服务器接受新的 WAL 改变（使用基于文件的日志传送或流复制）。那些服务器不是自动创建的，这里也没有关于建立复制的文档。请查阅本文档中的相关章节。
  </para>

<!--==========================orignal english content==========================
  <para>
   To run the Hot Standby tests, first create a database
   called <literal>regression</literal> on the primary:
<screen>
psql -h primary -c "CREATE DATABASE regression"
</screen>
   Next, run the preparatory script
   <filename>src/test/regress/sql/hs_primary_setup.sql</filename>
   on the primary in the regression database, for example:
<screen>
psql -h primary -f src/test/regress/sql/hs_primary_setup.sql regression
</screen>
   Allow these changes to propagate to the standby.
  </para>
____________________________________________________________________________-->
  <para>
   要运行热备测试，首先在主服务器上创建一个名为<literal>regression</literal>的数据库：
<screen>
psql -h primary -c "CREATE DATABASE regression"
</screen>
   接下来，在主服务器上的 regression 数据库中运行准备脚本<filename>src/test/regress/sql/hs_primary_setup.sql</filename>，例如：
<screen>
psql -h primary -f src/test/regress/sql/hs_primary_setup.sql regression
</screen>
   允许这些改变传播到后备服务器。
  </para>

<!--==========================orignal english content==========================
  <para>
   Now arrange for the default database connection to be to the standby
   server under test (for example, by setting the <envar>PGHOST</envar> and
   <envar>PGPORT</envar> environment variables).
   Finally, run <literal>make standbycheck</literal> in the regression directory:
<screen>
cd src/test/regress
make standbycheck
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   为受测后备服务器安排默认数据库连接（例如通过设置<envar>PGHOST</envar>和<envar>PGPORT</envar>环境变量）。最后，在 regression 目录中运行<literal>make standbycheck</literal>：
<screen>
cd src/test/regress
make standbycheck
</screen>
  </para>

<!--==========================orignal english content==========================
  <para>
   Some extreme behaviors can also be generated on the primary using the
   script <filename>src/test/regress/sql/hs_primary_extremes.sql</filename>
   to allow the behavior of the standby to be tested.
  </para>
____________________________________________________________________________-->
  <para>
   在主服务器上也可以使用<filename>src/test/regress/sql/hs_primary_extremes.sql</filename>脚本生成某些极限行为来允许测试后备服务器的行为。
  </para>
  </sect2>
  </sect1>

  <sect1 id="regress-evaluation">
<!--==========================orignal english content==========================
   <title>Test Evaluation</title>
____________________________________________________________________________-->
   <title>测试评估</title>

<!--==========================orignal english content==========================
   <para>
    Some properly installed and fully functional
    <productname>PostgreSQL</productname> installations can
    <quote>fail</quote> some of these regression tests due to
    platform-specific artifacts such as varying floating-point representation
    and message wording. The tests are currently evaluated using a simple
    <command>diff</command> comparison against the outputs
    generated on a reference system, so the results are sensitive to
    small system differences.  When a test is reported as
    <quote>failed</quote>, always examine the differences between
    expected and actual results; you might find that the
    differences are not significant.  Nonetheless, we still strive to
    maintain accurate reference files across all supported platforms,
    so it can be expected that all tests pass.
   </para>
____________________________________________________________________________-->
   <para>
    一些正确安装的并且全功能的<productname>PostgreSQL</productname>安装可能会在这些回归测试中的某些上<quote>失败</quote>，其原因是平台相关的因素，例如可变浮点表示和 message wording。这些测试目前采用<command>diff</command>命令来比较测试输出和在参考系统上产生的输出，这样测试的结果对小的系统差异也很敏感。当一个测试被报告为<quote>失败</quote>时，请总是检查实际结果和期望结果之间的差异，你可能会发现该差异其实并不明显。不管怎样，我们将努力维护在所有被支持平台上的准确的参考文件，以期待所有的测试都能通过。
   </para>

<!--==========================orignal english content==========================
   <para>
    The actual outputs of the regression tests are in files in the
    <filename>src/test/regress/results</filename> directory. The test
    script uses <command>diff</command> to compare each output
    file against the reference outputs stored in the
    <filename>src/test/regress/expected</filename> directory.  Any
    differences are saved for your inspection in
    <filename>src/test/regress/regression.diffs</filename>.
    (When running a test suite other than the core tests, these files
    of course appear in the relevant subdirectory,
    not <filename>src/test/regress</filename>.)
   </para>
____________________________________________________________________________-->
   <para>
    回归测试的实际输出在<filename>src/test/regress/results</filename>目录中的文件内。测试脚本会使用<command>diff</command>来把每一个输出文件与存储在<filename>src/test/regress/expected</filename>目录中的参考输出进行比较。任何差异都被保存在<filename>src/test/regress/regression.diffs</filename>中便于你的观察（当运行一个除核心测试之外的测试套件时，这些文件当然会出现在相关子目录中，而不是<filename>src/test/regress</filename>）。
   </para>

<!--==========================orignal english content==========================
   <para>
    If you don't
    like the <command>diff</command> options that are used by default, set the
    environment variable <envar>PG_REGRESS_DIFF_OPTS</envar>, for
    instance <literal>PG_REGRESS_DIFF_OPTS='-u'</literal>.  (Or you
    can run <command>diff</command> yourself, if you prefer.)
   </para>
____________________________________________________________________________-->
   <para>
    如果你不喜欢被默认使用的<command>diff</command>选项，请设置环境变量<envar>PG_REGRESS_DIFF_OPTS</envar>，例如<literal>PG_REGRESS_DIFF_OPTS='-u'</literal>（或者如果你愿意，你可以自己运行<command>diff</command>）。
   </para>

<!--==========================orignal english content==========================
   <para>
    If for some reason a particular platform generates a <quote>failure</quote>
    for a given test, but inspection of the output convinces you that
    the result is valid, you can add a new comparison file to silence
    the failure report in future test runs.  See
    <xref linkend="regress-variant"/> for details.
   </para>
____________________________________________________________________________-->
   <para>
    如果由于某种原因一个特定的平台对一个给定测试产生了<quote>失败</quote>，而对输出的检查却说明该结果是合法的，你可以增加一个新的比较文件来让失败报告在未来的测试运行中保持沉默。详见<xref linkend="regress-variant"/>。
   </para>

   <sect2>
<!--==========================orignal english content==========================
    <title>Error Message Differences</title>
____________________________________________________________________________-->
    <title>错误消息差异</title>

<!--==========================orignal english content==========================
    <para>
     Some of the regression tests involve intentional invalid input
     values.  Error messages can come from either the
     <productname>PostgreSQL</productname> code or from the host
     platform system routines. In the latter case, the messages can
     vary between platforms, but should reflect similar
     information. These differences in messages will result in a
     <quote>failed</quote> regression test that can be validated by
     inspection.
    </para>
____________________________________________________________________________-->
    <para>
     某些回归测试涉及到故意的非法输入值。错误消息可能来自<productname>PostgreSQL</productname>代码或主机平台系统例程。在后一种情况中，消息会随着平台而变化，但是会反映相似的信息。这些消息中的差异将导致一次<quote>失败的</quote>回归测试，这可以通过检查来确认。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Locale Differences</title>
____________________________________________________________________________-->
    <title>区域差异</title>

<!--==========================orignal english content==========================
    <para>
     If you run the tests against a server that was
     initialized with a collation-order locale other than C, then
     there might be differences due to sort order and subsequent
     failures.  The regression test suite is set up to handle this
     problem by providing alternate result files that together are
     known to handle a large number of locales.
    </para>
____________________________________________________________________________-->
    <para>
     如果你在一台使用除 C 之外的排序规则顺序区域初始化的服务器上运行测试，那么可能会出现由于排序顺序和后续失败产生的差异。回归测试套件被设置为可以处理这种问题，方法是提供替代的结果文件来处理大量的区域。
    </para>

<!--==========================orignal english content==========================
    <para>
     To run the tests in a different locale when using the
     temporary-installation method, pass the appropriate
     locale-related environment variables on
     the <command>make</command> command line, for example:
<programlisting>
make check LANG=de_DE.utf8
</programlisting>
     (The regression test driver unsets <envar>LC_ALL</envar>, so it
     does not work to choose the locale using that variable.)  To use
     no locale, either unset all locale-related environment variables
     (or set them to <literal>C</literal>) or use the following
     special invocation:
<programlisting>
make check NO_LOCALE=1
</programlisting>
     When running the tests against an existing installation, the
     locale setup is determined by the existing installation.  To
     change it, initialize the database cluster with a different
     locale by passing the appropriate options
     to <command>initdb</command>.
    </para>
____________________________________________________________________________-->
    <para>
     要在使用临时安装方法时在一种不同的区域中运行测试，可在<command>make</command>命令行上传递适当的区域相关的环境变量，例如：
<programlisting>
make check LANG=de_DE.utf8
</programlisting>
     （回归测试驱动器会取消<envar>LC_ALL</envar>设置，因此使用这个变量选择区域是不起作用的）。要不使用区域，要么取消所有区域相关的环境变量设置（或把它们设置为<literal>C</literal>），要么使用下列特殊调用：
<programlisting>
make check NO_LOCALE=1
</programlisting>
     当对一个现有安装运行测试时，区域设置由现有安装决定。要改变它，通过向<command>initdb</command>传递合适的选项来使用不同的区域初始化数据库集簇。
    </para>

<!--==========================orignal english content==========================
    <para>
     In general, it is advisable to try to run the
     regression tests in the locale setup that is wanted for
     production use, as this will exercise the locale- and
     encoding-related code portions that will actually be used in
     production.  Depending on the operating system environment, you
     might get failures, but then you will at least know what
     locale-specific behaviors to expect when running real
     applications.
    </para>
____________________________________________________________________________-->
    <para>
     通常，我们建议对将要在生产环境中使用的区域设置运行回归测试，因为这样可以测试即将真正被用在生产环境中的与区域和编码相关的代码。根据 操作系统环境，你可能会得到失败，但是那样你将至少知道在真实应用运行时会得到什么样的与区域相关的行为。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Date and Time Differences</title>
____________________________________________________________________________-->
    <title>日期和时间差异</title>

<!--==========================orignal english content==========================
    <para>
     Most of the date and time results are dependent on the time zone
     environment.  The reference files are generated for time zone
     <literal>PST8PDT</literal> (Berkeley, California), and there will be
     apparent failures if the tests are not run with that time zone setting.
     The regression test driver sets environment variable
     <envar>PGTZ</envar> to <literal>PST8PDT</literal>, which normally
     ensures proper results.
    </para>
____________________________________________________________________________-->
    <para>
     大部分的日期和时间结果依赖于时区环境。参考文件是用时区<literal>PST8PDT</literal>（伯克利，加利福利亚）生成的，并且如果测试不是运行在该时区设置中显然会出现失败。回归测试驱动器会设置环境变量<envar>PGTZ</envar>为 <literal>PST8PDT</literal>，这通常能保证正确的结果。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Floating-Point Differences</title>
____________________________________________________________________________-->
    <title>浮点差异</title>

<!--==========================orignal english content==========================
    <para>
     Some of the tests involve computing 64-bit floating-point numbers (<type>double
     precision</type>) from table columns. Differences in
     results involving mathematical functions of <type>double
     precision</type> columns have been observed.  The <literal>float8</literal> and
     <literal>geometry</literal> tests are particularly prone to small differences
     across platforms, or even with different compiler optimization settings.
     Human eyeball comparison is needed to determine the real
     significance of these differences which are usually 10 places to
     the right of the decimal point.
    </para>
____________________________________________________________________________-->
    <para>
     某些测试涉及到从表列中计算 64 位浮点数（<type>双精度</type>）。我们已经发现了涉及到<type>双精度</type>列的数学函数的结果中的差异。<literal>float8</literal>和<literal>geometry</literal>测试容易在不同平台之间产生小的差异，甚至对不同的编译器优化设置也可能产生差异。这些差异通常位于小数点右边的 10 个位置，决定这些差异的实际意义需要人类眼球比较。
    </para>

<!--==========================orignal english content==========================
    <para>
     Some systems display minus zero as <literal>-0</literal>, while others
     just show <literal>0</literal>.
    </para>
____________________________________________________________________________-->
    <para>
     某些系统显示负零为<literal>-0</literal>，而其他的只显示<literal>0</literal>。
    </para>

<!--==========================orignal english content==========================
    <para>
     Some systems signal errors from <function>pow()</function> and
     <function>exp()</function> differently from the mechanism
     expected by the current <productname>PostgreSQL</productname>
     code.
    </para>
____________________________________________________________________________-->
    <para>
     某些系统标志来自<function>pow()</function>和<function>exp()</function>的错误的机制不同于当前<productname>PostgreSQL</productname>代码所期望的机制。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Row Ordering Differences</title>
____________________________________________________________________________-->
    <title>行序差异</title>

<!--==========================orignal english content==========================
    <para>
You might see differences in which the same rows are output in a
different order than what appears in the expected file.  In most cases
this is not, strictly speaking, a bug.  Most of the regression test
scripts are not so pedantic as to use an <literal>ORDER BY</literal> for every single
<literal>SELECT</literal>, and so their result row orderings are not well-defined
according to the SQL specification.  In practice, since we are
looking at the same queries being executed on the same data by the same
software, we usually get the same result ordering on all platforms,
so the lack of <literal>ORDER BY</literal> is not a problem.  Some queries do exhibit
cross-platform ordering differences, however.  When testing against an
already-installed server, ordering differences can also be caused by
non-C locale settings or non-default parameter settings, such as custom values
of <varname>work_mem</varname> or the planner cost parameters.
    </para>
____________________________________________________________________________-->
    <para>
你可能看到这样一些差异：一组相同的行在输出中的顺序与参考文件中的顺序不同。严格来说，在大部分情况下这不是缺陷。大部分回归测试脚本没有为每一个单独的<literal>SELECT</literal>使用一个<literal>ORDER BY</literal>，并且因此它们的结果行顺序根据 SQL 规范是非良定义的。实际上，因为我们考虑的是由相同的软件在相同的数据上执行相同的查询，我们通常会在所有平台上得到相同的结果顺序，所以缺少<literal>ORDER BY</literal>不是一个问题。但是，某些查询确实会在不同平台上产生不同的顺序。当对一个已经安装的服务器运行测试时，顺序差异可能由非 C 区域设置或非默认参数设置导致，例如<varname>work_mem</varname>的自定义值或规划器代价参数。
    </para>

<!--==========================orignal english content==========================
    <para>
Therefore, if you see an ordering difference, it's not something to
worry about, unless the query does have an <literal>ORDER BY</literal> that your
result is violating.  However, please report it anyway, so that we can add an
<literal>ORDER BY</literal> to that particular query to eliminate the bogus
<quote>failure</quote> in future releases.
    </para>
____________________________________________________________________________-->
    <para>
因此，如果你看到一个顺序差异，没有什么可担心的，除非结果被未被的查询确实有一个<literal>ORDER BY</literal>。但是，不管怎样请报告它，这样我们可以为特定的查询加上一个<literal>ORDER BY</literal>来在未来的发布中消除虚假的<quote>失败</quote>。
    </para>

<!--==========================orignal english content==========================
    <para>
You might wonder why we don't order all the regression test queries explicitly
to get rid of this issue once and for all.  The reason is that that would
make the regression tests less useful, not more, since they'd tend
to exercise query plan types that produce ordered results to the
exclusion of those that don't.
    </para>
____________________________________________________________________________-->
    <para>
你可能好奇为什么我们不对所有回归测试查询进行显式排序来一次性解决这个问题。其原因是那可能会降低回归测试的有用性，因为它们已经倾向于测试产生有序结果的查询计划类型而排除了那些无法产生有序结果的计划类型。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Insufficient Stack Depth</title>
____________________________________________________________________________-->
    <title>栈深度不足</title>

<!--==========================orignal english content==========================
    <para>
     If the <literal>errors</literal> test results in a server crash
     at the <literal>select infinite_recurse()</literal> command, it means that
     the platform's limit on process stack size is smaller than the
     <xref linkend="guc-max-stack-depth"/> parameter indicates.  This
     can be fixed by running the server under a higher stack
     size limit (4MB is recommended with the default value of
     <varname>max_stack_depth</varname>).  If you are unable to do that, an
     alternative is to reduce the value of <varname>max_stack_depth</varname>.
    </para>
____________________________________________________________________________-->
    <para>
     如果<literal>错误</literal>测试导致了在<literal>select infinite_recurse()</literal>命令上的一次服务器崩溃，它意味着平台对进程栈尺寸的限制低于<xref linkend="guc-max-stack-depth"/>参数所指定的值。这可以通过在一个更高的栈尺寸限制（对<varname>max_stack_depth</varname>的默认值，我们推荐 4 MB）下运行该服务器来修复。如果你不能这样做，一种可替代的方案是减小<varname>max_stack_depth</varname>的值。
    </para>

<!--==========================orignal english content==========================
    <para>
     On platforms supporting <function>getrlimit()</function>, the server should
     automatically choose a safe value of <varname>max_stack_depth</varname>;
     so unless you've manually overridden this setting, a failure of this
     kind is a reportable bug.
    </para>
____________________________________________________________________________-->
    <para>
     在支持<function>getrlimit()</function>的平台上，服务器应该自动选择一个<varname>max_stack_depth</varname>的安全值。所以除非你已经手工覆盖了该设置，这类失败就是一个可报告的缺陷。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>The <quote>random</quote> Test</title>
____________________________________________________________________________-->
    <title><quote>随机</quote>测试</title>

<!--==========================orignal english content==========================
    <para>
     The <literal>random</literal> test script is intended to produce
     random results.   In very rare cases, this causes that regression
     test to fail.  Typing:
<programlisting>
diff results/random.out expected/random.out
</programlisting>
     should produce only one or a few lines of differences.  You need
     not worry unless the random test fails repeatedly.
    </para>
____________________________________________________________________________-->
    <para>
     <literal>随机</literal>测试脚本用来产生随机结果。在非常少见的情况下，这会导致回归测试失败。输入：
<programlisting>
diff results/random.out expected/random.out
</programlisting>
     应当产生一行或少数几行差异。你不需要担心，除非随机测试重复地失败。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Configuration Parameters</title>
____________________________________________________________________________-->
    <title>配置参数</title>

<!--==========================orignal english content==========================
    <para>
     When running the tests against an existing installation, some non-default
     parameter settings could cause the tests to fail.  For example, changing
     parameters such as <varname>enable_seqscan</varname> or
     <varname>enable_indexscan</varname> could cause plan changes that would
     affect the results of tests that use <command>EXPLAIN</command>.
    </para>
____________________________________________________________________________-->
    <para>
     当对一个现有安装运行测试时，某些非默认参数设置可能导致测试失败。例如，改变<varname>enable_seqscan</varname>或<varname>enable_indexscan</varname>等参数可能导致计划改变，然后影响使用<command>EXPLAIN</command>的测试的结果。
    </para>
   </sect2>
  </sect1>

<!-- We might want to move the following section into the developer's guide. -->
  <sect1 id="regress-variant">
<!--==========================orignal english content==========================
   <title>Variant Comparison Files</title>
____________________________________________________________________________-->
   <title>变体比较文件</title>

<!--==========================orignal english content==========================
   <para>
    Since some of the tests inherently produce environment-dependent
    results, we have provided ways to specify alternate <quote>expected</quote>
    result files.  Each regression test can have several comparison files
    showing possible results on different platforms.  There are two
    independent mechanisms for determining which comparison file is used
    for each test.
   </para>
____________________________________________________________________________-->
   <para>
    因为某些测试生来就会产生依赖环境的结果，我们提供了方法来指定替代的<quote>预期</quote>结果文件。每一个回归测试可以有多个比较文件来展示在不同平台上的可能结果。有两种独立的机制来决定为每一个测试使用哪个比较文件。
   </para>

<!--==========================orignal english content==========================
   <para>
    The first mechanism allows comparison files to be selected for
    specific platforms.  There is a mapping file,
    <filename>src/test/regress/resultmap</filename>, that defines
    which comparison file to use for each platform.
    To eliminate bogus test <quote>failures</quote> for a particular platform,
    you first choose or make a variant result file, and then add a line to the
    <filename>resultmap</filename> file.
   </para>
____________________________________________________________________________-->
   <para>
    第一种机制允许为指定平台选择比较文件。这是一个映射文件<filename>src/test/regress/resultmap</filename>，它定义了为每一个平台使用哪个比较文件。要为一个特定平台消除虚假的测试<quote>失败</quote>，你可以首先选择或创建一个变体结果文件，然后在<filename>resultmap</filename>文件中增加一行。
   </para>

<!--==========================orignal english content==========================
   <para>
    Each line in the mapping file is of the form
<synopsis>
testname:output:platformpattern=comparisonfilename
</synopsis>
    The test name is just the name of the particular regression test
    module. The output value indicates which output file to check. For the
    standard regression tests, this is always <literal>out</literal>. The
    value corresponds to the file extension of the output file.
    The platform pattern is a pattern in the style of the Unix
    tool <command>expr</command> (that is, a regular expression with an implicit
    <literal>^</literal> anchor at the start).  It is matched against the
    platform name as printed by <command>config.guess</command>.
    The comparison file name is the base name of the substitute result
    comparison file.
   </para>
____________________________________________________________________________-->
   <para>
    在该映射文件中的每一行的形式为：
<synopsis>
testname:output:platformpattern=comparisonfilename
</synopsis>
    测试名只是该特定回归测试模块的名称。输出值指定要检查哪个输出文件。对于标准回归测试，这总是<literal>out</literal>。该值对应于输出文件的文件扩展。平台模式是一个 Unix 工具<command>expr</command>风格的模式（即在开头带有一个隐式<literal>^</literal>锚的正则表达式）。它被与<command>config.guess</command>打印出的平台名称进行匹配。匹配文件名称是替补的结果比较文件的基础名。
   </para>

<!--==========================orignal english content==========================
   <para>
    For example: some systems interpret very small floating-point values
    as zero, rather than reporting an underflow error.  This causes a
    few differences in the <filename>float8</filename> regression test.
    Therefore, we provide a variant comparison file,
    <filename>float8-small-is-zero.out</filename>, which includes
    the results to be expected on these systems.  To silence the bogus
    <quote>failure</quote> message on <systemitem>OpenBSD</systemitem>
    platforms, <filename>resultmap</filename> includes:
<programlisting>
float8:out:i.86-.*-openbsd=float8-small-is-zero.out
</programlisting>
    which will trigger on any machine where the output of
    <command>config.guess</command> matches <literal>i.86-.*-openbsd</literal>.
    Other lines
    in <filename>resultmap</filename> select the variant comparison file for other
    platforms where it's appropriate.
   </para>
____________________________________________________________________________-->
   <para>
    例如：某些系统会把非常小的浮点值解释为零，而不是报告一个下溢错误。这在<filename>float8</filename>回归测试中会导致一些差异。因此，我们提供一个变体比较文件<filename>float8-small-is-zero.out</filename>，其中包括了在这些系统上的期望结果。要在<systemitem>OpenBSD</systemitem>平台上屏蔽这种虚假的<quote>失败</quote>消息，<filename>resultmap</filename>包括：
<programlisting>
float8:out:i.86-.*-openbsd=float8-small-is-zero.out
</programlisting>
    这将在任何<command>config.guess</command>输出匹配<literal>i.86-.*-openbsd</literal>的机器上触发。<filename>resultmap</filename>中的其他行为其他平台选择变体比较文件。
   </para>

<!--==========================orignal english content==========================
   <para>
    The second selection mechanism for variant comparison files is
    much more automatic: it simply uses the <quote>best match</quote> among
    several supplied comparison files.  The regression test driver
    script considers both the standard comparison file for a test,
    <literal><replaceable>testname</replaceable>.out</literal>, and variant files named
    <literal><replaceable>testname</replaceable>_<replaceable>digit</replaceable>.out</literal>
    (where the <replaceable>digit</replaceable> is any single digit
    <literal>0</literal>-<literal>9</literal>).  If any such file is an exact match,
    the test is considered to pass; otherwise, the one that generates
    the shortest diff is used to create the failure report.  (If
    <filename>resultmap</filename> includes an entry for the particular
    test, then the base <replaceable>testname</replaceable> is the substitute
    name given in <filename>resultmap</filename>.)
   </para>
____________________________________________________________________________-->
   <para>
    第二种变体比较文件的选择机制更加自动：它简单地在多个提供的比较文件中采用<quote>最佳匹配</quote>。回归测试驱动器脚本对一个测试考虑两种标准比较文件，<literal><replaceable>testname</replaceable>.out</literal>以及名为<literal><replaceable>testname</replaceable>_<replaceable>digit</replaceable>.out</literal>的变体文件（其中<replaceable>digit</replaceable>是任何单一数字<literal>0</literal>-<literal>9</literal>）。如果任一这种文件是一个完全匹配，测试被认为是通过的。否则，产生最短区别的文件被用来创建失败报告（如果<filename>resultmap</filename>包括特定测试的一个项，那么基础<replaceable>testname</replaceable>是<filename>resultmap</filename>中给定的替补名称）。
   </para>

<!--==========================orignal english content==========================
   <para>
    For example, for the <literal>char</literal> test, the comparison file
    <filename>char.out</filename> contains results that are expected
    in the <literal>C</literal> and <literal>POSIX</literal> locales, while
    the file <filename>char_1.out</filename> contains results sorted as
    they appear in many other locales.
   </para>
____________________________________________________________________________-->
   <para>
    例如，对于<literal>char</literal>测试，比较文件<filename>char.out</filename>包含在<literal>C</literal>和<literal>POSIX</literal>区域中期望的结果，而文件<filename>char_1.out</filename>包含在其他很多区域中的排序结果。
   </para>

<!--==========================orignal english content==========================
   <para>
    The best-match mechanism was devised to cope with locale-dependent
    results, but it can be used in any situation where the test results
    cannot be predicted easily from the platform name alone.  A limitation of
    this mechanism is that the test driver cannot tell which variant is
    actually <quote>correct</quote> for the current environment; it will just pick
    the variant that seems to work best.  Therefore it is safest to use this
    mechanism only for variant results that you are willing to consider
    equally valid in all contexts.
   </para>
____________________________________________________________________________-->
   <para>
    最佳匹配机制被设计为与区域依赖的结果协同工作，但是它可以被用在任何测试结果无法只从平台名很容易地预测的情况中。这种机制的一个限制是测试驱动器不能说出哪个变体对当前环境是真正<quote>正确的</quote>，它将只是选择看起来工作得最好的变体。因此对你认为在所有上下文中具有同等合法性的变体结果使用这种机制才是最安全的。
   </para>

  </sect1>
  
  <sect1 id="regress-tap">
<!--==========================orignal english content==========================
   <title>TAP Tests</title>
____________________________________________________________________________-->
   <title>TAP 测试</title>

<!--==========================orignal english content==========================
   <para>
    Various tests, particularly the client program tests
    under <filename>src/bin</filename>, use the Perl TAP tools and are run
    using the Perl testing program <command>prove</command>.  You can pass
    command-line options to <command>prove</command> by setting
    the <command>make</command> variable <varname>PROVE_FLAGS</varname>, for example:
<programlisting>
make -C src/bin check PROVE_FLAGS='-&minus;timer'
</programlisting>
    See the manual page of <command>prove</command> for more information.
   </para>
____________________________________________________________________________-->
   <para>
    很多测试，特别是<filename>src/bin</filename>下面的客户端程序测试使用 Perl 的
    TAP 工具并且用Perl测试程序<command>prove</command>运行。你可以通过
    设置<command>make</command>变量<varname>PROVE_FLAGS</varname>
    向<command>prove</command>传递命令行选项，例如：
<programlisting>
make -C src/bin check PROVE_FLAGS='--timer'
</programlisting>
    详见<command>prove</command>的手册页。
   </para>

<!--==========================orignal english content==========================
   <para>
    The <command>make</command> variable <varname>PROVE_TESTS</varname>
    can be used to define a whitespace-separated list of paths relative
    to the <filename>Makefile</filename> invoking <command>prove</command>
    to run the specified subset of tests instead of the default
    <filename>t/*.pl</filename>.  For example:
<programlisting>
make check PROVE_TESTS='t/001_test1.pl t/003_test3.pl'
</programlisting>
   </para>
____________________________________________________________________________-->
   <para>
    <command>make</command>变量<varname>PROVE_TESTS</varname>可被用来定义一个空格分隔的列表，其中是调用<command>prove</command>来运行的指定测试子集的路径，这些测试子集将取代默认的<filename>t/*.pl</filename>，并且这些路径是相对于<filename>Makefile</filename>的。例如：
<programlisting>
make check PROVE_TESTS='t/001_test1.pl t/003_test3.pl'
</programlisting>
   </para>

<!--==========================orignal english content==========================
   <para>
    The TAP tests require the Perl module <literal>IPC::Run</literal>.
    This module is available from CPAN or an operating system package.
   </para>
____________________________________________________________________________-->
   <para>
    TAP测试需要 Perl 模块<literal>IPC::Run</literal>。
    这个模块可以从 CPAN 或者一个操作系统包得到。
   </para>
  </sect1>

  <sect1 id="regress-coverage">
<!--==========================orignal english content==========================
   <title>Test Coverage Examination</title>
____________________________________________________________________________-->
   <title>测试覆盖检查</title>

<!--==========================orignal english content==========================
   <para>
    The PostgreSQL source code can be compiled with coverage testing
    instrumentation, so that it becomes possible to examine which
    parts of the code are covered by the regression tests or any other
    test suite that is run with the code.  This is currently supported
    when compiling with GCC and requires the <command>gcov</command>
    and <command>lcov</command> programs.
   </para>
____________________________________________________________________________-->
   <para>
    PostgreSQL 源代码可以使用覆盖测试指令编译，因此可以检查哪些部分的代码被回归测试或任何其他测试套件所覆盖。当前使用 GCC 编译时支持该特性，并且需要<command>gcov</command>和<command>lcov</command>程序。
   </para>

<!--==========================orignal english content==========================
   <para>
    A typical workflow would look like this:
<screen>
./configure -&minus;enable-coverage ... OTHER OPTIONS ...
make
make check # or other test suite
make coverage-html
</screen>
    Then point your HTML browser
    to <filename>coverage/index.html</filename>.
    The <command>make</command> commands also work in subdirectories.
   </para>
____________________________________________________________________________-->
   <para>
    一个典型的工作流程看起来是：
<screen>
./configure --enable-coverage ... OTHER OPTIONS ...
make
make check # 或其他测试套件
make coverage-html
</screen>
    然后将你的 HTML 浏览器指向<filename>coverage/index.html</filename>。<command>make</command>命令在子目录中也能工作。
   </para>

<!--==========================orignal english content==========================
   <para>
    If you don't have <command>lcov</command> or prefer text output over an
    HTML report, you can also run
<screen>
make coverage
</screen>
    instead of <literal>make coverage-html</literal>, which will
    produce <filename>.gcov</filename> output files for each source file
    relevant to the test.  (<literal>make coverage</literal> and <literal>make
    coverage-html</literal> will overwrite each other's files, so mixing them
    might be confusing.)
   </para>
____________________________________________________________________________-->
   <para>
    如果没有<command>lcov</command>或者更喜欢文本输出而不是HTML报告，还可以运行
<screen>
make coverage
</screen>
    来取代<literal>make coverage-html</literal>，它将为每个与测试相关的源文件产生<filename>.gcov</filename>输出文件（<literal>make coverage</literal>和<literal>make
    coverage-html</literal>将覆盖彼此的文件，所以把它们混合在一起可能会导致混乱）。
   </para>

<!--==========================orignal english content==========================
   <para>
    To reset the execution counts between test runs, run:
<screen>
make coverage-clean
</screen>
   </para>
____________________________________________________________________________-->
   <para>
    要在多次测试运行之间重置执行计数，运行：
<screen>
make coverage-clean
</screen>
   </para>
  </sect1>

</chapter>

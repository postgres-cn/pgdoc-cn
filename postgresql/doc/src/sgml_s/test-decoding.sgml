<!-- doc/src/sgml/test-decoding.sgml -->

<sect1 id="test-decoding" xreflabel="test_decoding">
<!--==========================orignal english content==========================
 <title>test_decoding</title>
____________________________________________________________________________-->
 <title>test_decoding</title>

<!--==========================orignal english content==========================
 <indexterm zone="test-decoding">
  <primary>test_decoding</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="test-decoding">
  <primary>test_decoding</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  <filename>test_decoding</> is an example of a logical decoding
  output plugin. It doesn't do anything especially useful, but can serve as
  a starting point for developing your own output plugin.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>test_decoding</filename>是一个逻辑解码输出插件的例子。它其实不做
  任何特别有用的事情，但是可以作为开发你自己的输出插件的起点。
 </para>

<!--==========================orignal english content==========================
 <para>
  <filename>test_decoding</> receives WAL through the logical decoding
  mechanism and decodes it into text representations of the operations
  performed.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>test_decoding</filename>通过逻辑解码机制接收 WAL 并且把它解码成
  被执行的操作的文本表达形式。
 </para>

<!--==========================orignal english content==========================
 <para>
  Typical output from this plugin, used over the SQL logical decoding
  interface, might be:

<programlisting>
postgres=# SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL, 'include-xids', '0');
 location  | xid |                       data
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 0/16D30F8 | 691 | BEGIN
 0/16D32A0 | 691 | table public.data: INSERT: id[int4]:2 data[text]:'arg'
 0/16D32A0 | 691 | table public.data: INSERT: id[int4]:3 data[text]:'demo'
 0/16D32A0 | 691 | COMMIT
 0/16D32D8 | 692 | BEGIN
 0/16D3398 | 692 | table public.data: DELETE: id[int4]:2
 0/16D3398 | 692 | table public.data: DELETE: id[int4]:3
 0/16D3398 | 692 | COMMIT
(8 rows)
</programlisting>
 </para>
____________________________________________________________________________-->
 <para>
  这个插件的典型输出（在 SQL 逻辑解码接口上使用）可能是：

<programlisting>
postgres=# SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL, 'include-xids', '0');
 location  | xid |                       data
-----------+-----+--------------------------------------------------
 0/16D30F8 | 691 | BEGIN
 0/16D32A0 | 691 | table public.data: INSERT: id[int4]:2 data[text]:'arg'
 0/16D32A0 | 691 | table public.data: INSERT: id[int4]:3 data[text]:'demo'
 0/16D32A0 | 691 | COMMIT
 0/16D32D8 | 692 | BEGIN
 0/16D3398 | 692 | table public.data: DELETE: id[int4]:2
 0/16D3398 | 692 | table public.data: DELETE: id[int4]:3
 0/16D3398 | 692 | COMMIT
(8 rows)
</programlisting>
 </para>

</sect1>

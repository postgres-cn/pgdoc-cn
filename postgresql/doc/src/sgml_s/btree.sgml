<!-- doc/src/sgml/btree.sgml -->

<chapter id="btree">
<!--==========================orignal english content==========================
<title>B-Tree Indexes</title>
____________________________________________________________________________-->
<title>B-树索引</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>index</primary>
    <secondary>B-Tree</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>index</primary>
    <secondary>B-Tree</secondary>
   </indexterm>

<sect1 id="btree-intro">
<!--==========================orignal english content==========================
 <title>Introduction</title>
____________________________________________________________________________-->
 <title>简介</title>

<!--==========================orignal english content==========================
 <para>
  <productname>PostgreSQL</productname> includes an implementation of the
  standard <acronym>btree</acronym> (multi-way balanced tree) index data
  structure.  Any data type that can be sorted into a well-defined linear
  order can be indexed by a btree index.  The only limitation is that an
  index entry cannot exceed approximately one-third of a page (after TOAST
  compression, if applicable).
 </para>
____________________________________________________________________________-->
 <para>
  <productname>PostgreSQL</productname>包括了对标准<acronym>btree</acronym>（多路平衡树）索引数据结构的一个实现。任何能够被排序为良定义线性顺序的数据结构都可以用一个btree来索引。唯一的限制是一个索引项不能超过大约三分之一个页面（如果适用，可以是TOAST压缩后的大小）。
 </para>

<!--==========================orignal english content==========================
 <para>
  Because each btree operator class imposes a sort order on its data type,
  btree operator classes (or, really, operator families) have come to be
  used as <productname>PostgreSQL</productname>'s general representation
  and understanding of sorting semantics.  Therefore, they've acquired
  some features that go beyond what would be needed just to support btree
  indexes, and parts of the system that are quite distant from the
  btree AM make use of them.
 </para>
____________________________________________________________________________-->
 <para>
  因为每一种btree操作符类都会在其数据类型上施加一种排序顺序，btree的操作符类（或者实际上是操作符族）已经被用作<productname>PostgreSQL</productname>对排序语义的一般表达和理解。因此，它们需要一些支持btree索引之外的特性，并且这个系统的一些部分与利用它们的btree访问方法有较大的不同。
 </para>

</sect1>

<sect1 id="btree-behavior">
<!--==========================orignal english content==========================
 <title>Behavior of B-Tree Operator Classes</title>
____________________________________________________________________________-->
 <title>B-树操作符类的行为</title>

<!--==========================orignal english content==========================
 <para>
  As shown in <xref linkend="xindex-btree-strat-table"/>, a btree operator
  class must provide five comparison operators,
  <literal>&lt;</literal>,
  <literal>&lt;=</literal>,
  <literal>=</literal>,
  <literal>&gt;=</literal> and
  <literal>&gt;</literal>.
  One might expect that <literal>&lt;&gt;</literal> should also be part of
  the operator class, but it is not, because it would almost never be
  useful to use a <literal>&lt;&gt;</literal> WHERE clause in an index
  search.  (For some purposes, the planner treats <literal>&lt;&gt;</literal>
  as associated with a btree operator class; but it finds that operator via
  the <literal>=</literal> operator's negator link, rather than
  from <structname>pg_amop</structname>.)
 </para>
____________________________________________________________________________-->
 <para>
  如<xref linkend="xindex-btree-strat-table"/>中所示，一个btree操作符类必须提供五种比较操作符：<literal>&lt;</literal>、<literal>&lt;=</literal>、<literal>=</literal>、<literal>&gt;=</literal>以及<literal>&gt;</literal>。有人可能会想<literal>&lt;&gt;</literal>应该也是操作符类的一部分，但不是这样，因为几乎从不会在索引搜索中使用有<literal>&lt;&gt;</literal>的WHERE子句（出于某种原因，规划器会认为<literal>&lt;&gt;</literal>与一个btree操作符类相关，但它是通过<literal>=</literal>操作符的逆操作符链接来找到这个操作符，而不是从<structname>pg_amop</structname>中查找）。
 </para>

<!--==========================orignal english content==========================
 <para>
  When several data types share near-identical sorting semantics, their
  operator classes can be grouped into an operator family.  Doing so is
  advantageous because it allows the planner to make deductions about
  cross-type comparisons.  Each operator class within the family should
  contain the single-type operators (and associated support functions)
  for its input data type, while cross-type comparison operators and
  support functions are <quote>loose</quote> in the family.  It is
  recommendable that a complete set of cross-type operators be included
  in the family, thus ensuring that the planner can represent any
  comparison conditions that it deduces from transitivity.
 </para>
____________________________________________________________________________-->
 <para>
  当一些数据类型共享近乎相同的排序语义时，它们的操作符类可以被组合成一个操作符族。这样做是有好处的，因为这样就允许规划器对跨类型比较进行推演。在操作符族中的每一种操作符类对其输入数据类型应该包含单一类型的操作符（及其相关的支持函数），而跨类型比较操作符及其支持函数则<quote>松散</quote>地放在操作符族中。推荐在操作符族中包括一套完整的跨类型操作符，这样能确保规划器可以表达它通过传递性推演出的任何比较条件。
 </para>

<!--==========================orignal english content==========================
 <para>
  There are some basic assumptions that a btree operator family must
  satisfy:
 </para>
____________________________________________________________________________-->
 <para>
  这里有一些btree操作符类必须满足的基本假设：
 </para>

 <itemizedlist>
  <listitem>
<!--==========================orignal english content==========================
   <para>
    An <literal>=</literal> operator must be an equivalence relation; that
    is, for all non-null values <replaceable>A</replaceable>,
    <replaceable>B</replaceable>, <replaceable>C</replaceable> of the
    data type:

    <itemizedlist>
     <listitem>
      <para>
       <replaceable>A</replaceable> <literal>=</literal>
       <replaceable>A</replaceable> is true
       (<firstterm>reflexive law</firstterm>)
      </para>
     </listitem>
     <listitem>
      <para>
       if <replaceable>A</replaceable> <literal>=</literal>
       <replaceable>B</replaceable>,
       then <replaceable>B</replaceable> <literal>=</literal>
       <replaceable>A</replaceable>
       (<firstterm>symmetric law</firstterm>)
      </para>
     </listitem>
     <listitem>
      <para>
       if <replaceable>A</replaceable> <literal>=</literal>
       <replaceable>B</replaceable> and <replaceable>B</replaceable>
       <literal>=</literal> <replaceable>C</replaceable>,
       then <replaceable>A</replaceable> <literal>=</literal>
       <replaceable>C</replaceable>
       (<firstterm>transitive law</firstterm>)
      </para>
     </listitem>
    </itemizedlist>
   </para>
____________________________________________________________________________-->
   <para>
    一个<literal>=</literal>操作符必须是一种等值关系。也就是说，对于该数据类型的所有非空值<replaceable>A</replaceable>、<replaceable>B</replaceable>、<replaceable>C</replaceable>：

    <itemizedlist>
     <listitem>
      <para>
       <replaceable>A</replaceable> <literal>=</literal> <replaceable>A</replaceable>为真（<firstterm>自反律</firstterm>）
      </para>
     </listitem>
     <listitem>
      <para>
       如果<replaceable>A</replaceable> <literal>=</literal> <replaceable>B</replaceable>，则有<replaceable>B</replaceable> <literal>=</literal>
       <replaceable>A</replaceable>（<firstterm>对称律</firstterm>）
      </para>
     </listitem>
     <listitem>
      <para>
       如果<replaceable>A</replaceable> <literal>=</literal> <replaceable>B</replaceable>并且<replaceable>B</replaceable> <literal>=</literal> <replaceable>C</replaceable>，则有<replaceable>A</replaceable> <literal>=</literal> <replaceable>C</replaceable>（<firstterm>传递律</firstterm>）
      </para>
     </listitem>
    </itemizedlist>
   </para>
  </listitem>

  <listitem>
<!--==========================orignal english content==========================
   <para>
    A <literal>&lt;</literal> operator must be a strong ordering relation;
    that is, for all non-null values <replaceable>A</replaceable>,
    <replaceable>B</replaceable>, <replaceable>C</replaceable>:

    <itemizedlist>
     <listitem>
      <para>
       <replaceable>A</replaceable> <literal>&lt;</literal>
       <replaceable>A</replaceable> is false
       (<firstterm>irreflexive law</firstterm>)
      </para>
     </listitem>
     <listitem>
      <para>
       if <replaceable>A</replaceable> <literal>&lt;</literal>
       <replaceable>B</replaceable>
       and <replaceable>B</replaceable> <literal>&lt;</literal>
       <replaceable>C</replaceable>,
       then <replaceable>A</replaceable> <literal>&lt;</literal>
       <replaceable>C</replaceable>
       (<firstterm>transitive law</firstterm>)
      </para>
     </listitem>
    </itemizedlist>
   </para>
____________________________________________________________________________-->
   <para>
    一个<literal>&lt;</literal>操作符必须是一种强排序关系。也就是说，对于所有的非空值<replaceable>A</replaceable>、<replaceable>B</replaceable>、<replaceable>C</replaceable>：

    <itemizedlist>
     <listitem>
      <para>
       <replaceable>A</replaceable> <literal>&lt;</literal> <replaceable>A</replaceable>为假（<firstterm>非自反律</firstterm>）
      </para>
     </listitem>
     <listitem>
      <para>
       如果<replaceable>A</replaceable> <literal>&lt;</literal> <replaceable>B</replaceable>以及<replaceable>B</replaceable> <literal>&lt;</literal> <replaceable>C</replaceable>，则有<replaceable>A</replaceable> <literal>&lt;</literal> <replaceable>C</replaceable>（<firstterm>传递律</firstterm>）
      </para>
     </listitem>
    </itemizedlist>
   </para>
  </listitem>

  <listitem>
<!--==========================orignal english content==========================
   <para>
    Furthermore, the ordering is total; that is, for all non-null
    values <replaceable>A</replaceable>, <replaceable>B</replaceable>:

    <itemizedlist>
     <listitem>
      <para>
       exactly one of <replaceable>A</replaceable> <literal>&lt;</literal>
       <replaceable>B</replaceable>, <replaceable>A</replaceable>
       <literal>=</literal> <replaceable>B</replaceable>, and
       <replaceable>B</replaceable> <literal>&lt;</literal>
       <replaceable>A</replaceable> is true
       (<firstterm>trichotomy law</firstterm>)
      </para>
     </listitem>
    </itemizedlist>

    (The trichotomy law justifies the definition of the comparison support
    function, of course.)
   </para>
____________________________________________________________________________-->
   <para>
    此外，该排序是完全的。也就是说，对于所有非空值<replaceable>A</replaceable>、<replaceable>B</replaceable>、<replaceable>C</replaceable>：

    <itemizedlist>
     <listitem>
      <para>
       <replaceable>A</replaceable> <literal>&lt;</literal> <replaceable>B</replaceable>、<replaceable>A</replaceable> <literal>=</literal> <replaceable>B</replaceable>和<replaceable>B</replaceable> <literal>&lt;</literal> <replaceable>A</replaceable>之中恰好有一个为真（<firstterm>三分律</firstterm>）
      </para>
     </listitem>
    </itemizedlist>

    （三分律无疑证明了比较支持函数定义的正确性。）
   </para>
  </listitem>
 </itemizedlist>

<!--==========================orignal english content==========================
 <para>
  The other three operators are defined in terms of <literal>=</literal>
  and <literal>&lt;</literal> in the obvious way, and must act consistently
  with them.
 </para>
____________________________________________________________________________-->
 <para>
  其他三种操作符可以以显而易见的方式用<literal>=</literal>和<literal>&lt;</literal>来定义，并且必须和它们的行为保持一致。
 </para>

<!--==========================orignal english content==========================
 <para>
  For an operator family supporting multiple data types, the above laws must
  hold when <replaceable>A</replaceable>, <replaceable>B</replaceable>,
  <replaceable>C</replaceable> are taken from any data types in the family.
  The transitive laws are the trickiest to ensure, as in cross-type
  situations they represent statements that the behaviors of two or three
  different operators are consistent.
  As an example, it would not work to put <type>float8</type>
  and <type>numeric</type> into the same operator family, at least not with
  the current semantics that <type>numeric</type> values are converted
  to <type>float8</type> for comparison to a <type>float8</type>.  Because
  of the limited accuracy of <type>float8</type>, this means there are
  distinct <type>numeric</type> values that will compare equal to the
  same <type>float8</type> value, and thus the transitive law would fail.
 </para>
____________________________________________________________________________-->
 <para>
  对于一个支持多种数据类型的操作符族来说，当<replaceable>A</replaceable>、<replaceable>B</replaceable>、<replaceable>C</replaceable>取自该族中任意数据类型时，上述定律都必须保持。传递律是最难以保证的，因为在跨类型的情况中，传递律说明两种或者三种不同的操作符的行为是一致的。举个例子，把<type>float8</type>和<type>numeric</type>放在同一个操作符族中是行不通的，至少在当前的语义（为了和一个<type>float8</type>比较，<type>numeric</type>值会被转换成<type>float8</type>）下不行。因为<type>float8</type>有限的精度，这意味着不同的<type>numeric</type>值将被认为等于同一个<type>float8</type>值，因此传递律将被破坏。
 </para>

<!--==========================orignal english content==========================
 <para>
  Another requirement for a multiple-data-type family is that any implicit
  or binary-coercion casts that are defined between data types included in
  the operator family must not change the associated sort ordering.
 </para>
____________________________________________________________________________-->
 <para>
  对于多数据类型操作符族的另一个要求是，其中包括的定义在数据类型之间的任何隐式或者二进制强制造型不能改变相关的排序顺序。
 </para>

<!--==========================orignal english content==========================
 <para>
  It should be fairly clear why a btree index requires these laws to hold
  within a single data type: without them there is no ordering to arrange
  the keys with.  Also, index searches using a comparison key of a
  different data type require comparisons to behave sanely across two
  data types.  The extensions to three or more data types within a family
  are not strictly required by the btree index mechanism itself, but the
  planner relies on them for optimization purposes.
 </para>
____________________________________________________________________________-->
 <para>
  为何一个btree索引要求这些定律在单一数据类型中必须保持的原因应该相对比较清楚：没有这些定律就不存在用于安排键的顺序。此外，使用不同数据类型键的比较的索引搜索也要求比较操作在两种数据类型之间表现得稳定。btree索引机制本身并不严格要求在一个操作符族中扩展到三种或者更多种数据类型，但是规划器依赖于这种扩展来实现其优化的目的。
 </para>

</sect1>

<sect1 id="btree-support-funcs">
<!--==========================orignal english content==========================
 <title>B-Tree Support Functions</title>
____________________________________________________________________________-->
 <title>B-树支持函数</title>

<!--==========================orignal english content==========================
 <para>
  As shown in <xref linkend="xindex-btree-support-table"/>, btree defines
  one required and two optional support functions.
 </para>
____________________________________________________________________________-->
 <para>
  如<xref linkend="xindex-btree-support-table"/>中所示，btree定义了一种必需的和两种可选的支持函数。
 </para>

<!--==========================orignal english content==========================
 <para>
  For each combination of data types that a btree operator family provides
  comparison operators for, it must provide a comparison support function,
  registered in <structname>pg_amproc</structname> with support function
  number 1 and
  <structfield>amproclefttype</structfield>/<structfield>amprocrighttype</structfield>
  equal to the left and right data types for the comparison (i.e., the
  same data types that the matching operators are registered with
  in <structname>pg_amop</structname>).
  The comparison function must take two non-null values
  <replaceable>A</replaceable> and <replaceable>B</replaceable> and
  return an <type>int32</type> value that
  is <literal>&lt;</literal> <literal>0</literal>, <literal>0</literal>,
  or <literal>&gt;</literal> <literal>0</literal>
  when <replaceable>A</replaceable> <literal>&lt;</literal>
  <replaceable>B</replaceable>, <replaceable>A</replaceable>
  <literal>=</literal> <replaceable>B</replaceable>,
  or <replaceable>A</replaceable> <literal>&gt;</literal>
  <replaceable>B</replaceable>, respectively.
  A null result is disallowed: all values of the data type must be comparable.
  See <filename>src/backend/access/nbtree/nbtcompare.c</filename> for
  examples.
 </para>
____________________________________________________________________________-->
 <para>
  对于btree操作符族为其提供了比较操作符的每一种数据类型组合，操作符族必须提供一个比较支持函数，在<structname>pg_amproc</structname>中注册：支持函数编号为1，<structfield>amproclefttype</structfield>/<structfield>amprocrighttype</structfield>等于比较的左右数据类型（即匹配的操作符注册在<structname>pg_amop</structname>中的数据类型）。比较函数必须接收两个非空值<replaceable>A</replaceable>和<replaceable>B</replaceable>并且返回一个<type>int32</type>值，返回值在<replaceable>A</replaceable> <literal>&lt;</literal> <replaceable>B</replaceable>、<replaceable>A</replaceable> <literal>=</literal> <replaceable>B</replaceable>以及<replaceable>A</replaceable> <literal>&gt;</literal> <replaceable>B</replaceable>时分别为<literal>&lt;</literal> <literal>0</literal>、<literal>0</literal>和<literal>&gt;</literal> <literal>0</literal>。不允许空值结果：该数据类型的所有值必须是可比较的。例子请见<filename>src/backend/access/nbtree/nbtcompare.c</filename>。
 </para>

<!--==========================orignal english content==========================
 <para>
  If the compared values are of a collatable data type, the appropriate
  collation OID will be passed to the comparison support function, using
  the standard <function>PG_GET_COLLATION()</function> mechanism.
 </para>
____________________________________________________________________________-->
 <para>
  如果被比较的值是一种可排序的数据类型，合适的排序规则OID将使用标准的PG_GET_COLLATION()机制被传递给比较支持函数。
 </para>

<!--==========================orignal english content==========================
 <para>
  Optionally, a btree operator family may provide <firstterm>sort
  support</firstterm> function(s), registered under support function number
  2.  These functions allow implementing comparisons for sorting purposes
  in a more efficient way than naively calling the comparison support
  function.  The APIs involved in this are defined in
  <filename>src/include/utils/sortsupport.h</filename>.
 </para>
____________________________________________________________________________-->
 <para>
  可选地，btree操作符族可以提供<firstterm>排序支持</firstterm>函数，它们以支持函数编号2注册。这些函数允许以一种比单纯调用比较支持函数更加高效的方式实现排序比较。涉及的API在<filename>src/include/utils/sortsupport.h</filename>中定义。
 </para>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>in_range support functions</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>in_range support functions</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>support functions</primary>
  <secondary>in_range</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>support functions</primary>
  <secondary>in_range</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  Optionally, a btree operator family may
  provide <firstterm>in_range</firstterm> support function(s), registered
  under support function number 3.  These are not used during btree index
  operations; rather, they extend the semantics of the operator family so
  that it can support window clauses containing
  the <literal>RANGE</literal> <replaceable>offset</replaceable>
  <literal>PRECEDING</literal>
  and <literal>RANGE</literal> <replaceable>offset</replaceable>
  <literal>FOLLOWING</literal> frame bound types (see
  <xref linkend="syntax-window-functions"/>).  Fundamentally, the extra
  information provided is how to add or subtract
  an <replaceable>offset</replaceable> value in a way that is compatible
  with the family's data ordering.
 </para>
____________________________________________________________________________-->
 <para>
  可选地，btree操作符族可以提供<firstterm>in_range</firstterm>支持函数，它们以支持函数编号3注册。在btree索引操作期间不会用到这些函数，它们扩展了操作符族的语义，这样就能支持包含<literal>RANGE</literal> <replaceable>offset</replaceable> <literal>PRECEDING</literal>以及<literal>RANGE</literal> <replaceable>offset</replaceable> <literal>FOLLOWING</literal>窗口帧界类型（见<xref linkend="syntax-window-functions"/>）的窗口子句。归根到底，这些函数所提供的额外信息是如何以一种与该操作符族的数据排序相兼容的方式加上或者减去一个<replaceable>offset</replaceable>值。
 </para>

<!--==========================orignal english content==========================
 <para>
  An <function>in_range</function> function must have the signature
<synopsis>
in_range(<replaceable>val</replaceable> type1, <replaceable>base</replaceable> type1, <replaceable>offset</replaceable> type2, <replaceable>sub</replaceable> bool, <replaceable>less</replaceable> bool)
returns bool
</synopsis>
  <replaceable>val</replaceable> and <replaceable>base</replaceable> must be
  of the same type, which is one of the types supported by the operator
  family (i.e., a type for which it provides an ordering).
  However, <replaceable>offset</replaceable> could be of a different type,
  which might be one otherwise unsupported by the family.  An example is
  that the built-in <literal>time_ops</literal> family provides
  an <function>in_range</function> function that
  has <replaceable>offset</replaceable> of type <type>interval</type>.
  A family can provide <function>in_range</function> functions for any of
  its supported types and one or more <replaceable>offset</replaceable>
  types.  Each <function>in_range</function> function should be entered
  in <structname>pg_amproc</structname>
  with <structfield>amproclefttype</structfield> equal to <type>type1</type>
  and <structfield>amprocrighttype</structfield> equal to <type>type2</type>.
 </para>
____________________________________________________________________________-->
 <para>
  一个<function>in_range</function>函数必须具有这样的签名
<synopsis>
in_range(<replaceable>val</replaceable> type1, <replaceable>base</replaceable> type1, <replaceable>offset</replaceable> type2, <replaceable>sub</replaceable> bool, <replaceable>less</replaceable> bool)
returns bool
</synopsis>
  <replaceable>val</replaceable>和<replaceable>base</replaceable>必须是同一种类型，该类型也是操作符族所支持的类型之一（即它提供排序的一种类型）。不过，<replaceable>offset</replaceable>可以是一种不同的类型，该类型有可能不被该操作符族所支持。例如内建的<literal>time_ops</literal>族提供了一个<function>in_range</function>函数，其<replaceable>offset</replaceable>是类型<type>interval</type>。一个操作符族可以为其所支持的任意类型提供<function>in_range</function>函数以及一个或者更多种<replaceable>offset</replaceable>类型。每一个<function>in_range</function>函数在进入到<structname>pg_amproc</structname>时，需要有<structfield>amproclefttype</structfield>等于<type>type1</type>以及<structfield>amprocrighttype</structfield>等于<type>type2</type>。
 </para>

<!--==========================orignal english content==========================
 <para>
  The essential semantics of an <function>in_range</function> function
  depend on the two boolean flag parameters.  It should add or
  subtract <replaceable>base</replaceable>
  and <replaceable>offset</replaceable>, then
  compare <replaceable>val</replaceable> to the result, as follows:
  <itemizedlist>
   <listitem>
    <para>
     if <literal>!</literal><replaceable>sub</replaceable> and
     <literal>!</literal><replaceable>less</replaceable>,
     return <replaceable>val</replaceable> <literal>&gt;=</literal>
     (<replaceable>base</replaceable> <literal>+</literal>
     <replaceable>offset</replaceable>)
    </para>
   </listitem>
   <listitem>
    <para>
     if <literal>!</literal><replaceable>sub</replaceable>
     and <replaceable>less</replaceable>,
     return <replaceable>val</replaceable> <literal>&lt;=</literal>
     (<replaceable>base</replaceable> <literal>+</literal>
     <replaceable>offset</replaceable>)
    </para>
   </listitem>
   <listitem>
    <para>
     if <replaceable>sub</replaceable>
     and <literal>!</literal><replaceable>less</replaceable>,
     return <replaceable>val</replaceable> <literal>&gt;=</literal>
     (<replaceable>base</replaceable> <literal>-</literal>
     <replaceable>offset</replaceable>)
    </para>
   </listitem>
   <listitem>
    <para>
     if <replaceable>sub</replaceable> and <replaceable>less</replaceable>,
     return <replaceable>val</replaceable> <literal>&lt;=</literal>
     (<replaceable>base</replaceable> <literal>-</literal>
     <replaceable>offset</replaceable>)
    </para>
   </listitem>
  </itemizedlist>
  Before doing so, the function should check the sign
  of <replaceable>offset</replaceable>: if it is less than zero, raise
  error <literal>ERRCODE_INVALID_PRECEDING_OR_FOLLOWING_SIZE</literal> (22013)
  with error text like <quote>invalid preceding or following size in window
  function</quote>.  (This is required by the SQL standard, although
  nonstandard operator families might perhaps choose to ignore this
  restriction, since there seems to be little semantic necessity for it.)
  This requirement is delegated to the <function>in_range</function>
  function so that the core code needn't understand what <quote>less than
  zero</quote> means for a particular data type.
 </para>
____________________________________________________________________________-->
 <para>
  <function>in_range</function>函数的本质语义取决于两个布尔标志参数。它应该将<replaceable>base</replaceable>和<replaceable>offset</replaceable>相加或者相减，然后用<replaceable>val</replaceable>与其结果比较：
  <itemizedlist>
   <listitem>
    <para>
     如果<literal>!</literal><replaceable>sub</replaceable>并且<literal>!</literal><replaceable>less</replaceable>，则返回<replaceable>val</replaceable> <literal>&gt;=</literal> (<replaceable>base</replaceable> <literal>+</literal> <replaceable>offset</replaceable>)
    </para>
   </listitem>
   <listitem>
    <para>
     如果<literal>!</literal><replaceable>sub</replaceable>并且<replaceable>less</replaceable>，则返回<replaceable>val</replaceable> <literal>&lt;=</literal> (<replaceable>base</replaceable> <literal>+</literal> <replaceable>offset</replaceable>)
    </para>
   </listitem>
   <listitem>
    <para>
     如果<replaceable>sub</replaceable>并且<literal>!</literal><replaceable>less</replaceable>，则返回<replaceable>val</replaceable> <literal>&gt;=</literal> (<replaceable>base</replaceable> <literal>-</literal> <replaceable>offset</replaceable>)
    </para>
   </listitem>
   <listitem>
    <para>
     如果<replaceable>sub</replaceable>并且<replaceable>less</replaceable>，则返回<replaceable>val</replaceable> <literal>&lt;=</literal> (<replaceable>base</replaceable> <literal>-</literal> <replaceable>offset</replaceable>)
    </para>
   </listitem>
  </itemizedlist>
  在这样做之前，该函数应该检查<replaceable>offset</replaceable>的符号：如果它小于零，则抛出错误<literal>ERRCODE_INVALID_PRECEDING_OR_FOLLOWING_SIZE</literal> (22013)外加<quote>invalid preceding or following size in window function</quote>这样的错误文本（这是SQL标准所要求的，不过非标准操作符族可能会选择忽视这一限制，因为似乎其语义必要性很小）。这种要求被委托给了<function>in_range</function>函数，这样核心代码不需要理解对一种特定数据类型<quote>less than zero</quote>表示什么。
 </para>

<!--==========================orignal english content==========================
 <para>
  An additional expectation is that <function>in_range</function> functions
  should, if practical, avoid throwing an error
  if <replaceable>base</replaceable> <literal>+</literal>
  <replaceable>offset</replaceable>
  or <replaceable>base</replaceable> <literal>-</literal>
  <replaceable>offset</replaceable> would overflow.
  The correct comparison result can be determined even if that value would
  be out of the data type's range.  Note that if the data type includes
  concepts such as <quote>infinity</quote> or <quote>NaN</quote>, extra care
  may be needed to ensure that <function>in_range</function>'s results agree
  with the normal sort order of the operator family.
 </para>
____________________________________________________________________________-->
 <para>
  一个额外的期望是，如果可行，<function>in_range</function>函数应当在<replaceable>base</replaceable> <literal>+</literal> <replaceable>offset</replaceable>或者<replaceable>base</replaceable> <literal>-</literal> <replaceable>offset</replaceable>溢出时避免抛出错误。即便值超过了该数据类型的范围，也可以确定正确的比较结果。注意，如果数据类型包括诸如<quote>infinity</quote>或者<quote>NaN</quote>之类的概念，就需要额外的注意确保<function>in_range</function>的结果符合该操作符族的正常排序顺序。
 </para>

<!--==========================orignal english content==========================
 <para>
  The results of the <function>in_range</function> function must be
  consistent with the sort ordering imposed by the operator family.
  To be precise, given any fixed values of <replaceable>offset</replaceable>
  and <replaceable>sub</replaceable>, then:
  <itemizedlist>
   <listitem>
    <para>
     If <function>in_range</function> with <replaceable>less</replaceable> =
     true is true for some <replaceable>val1</replaceable>
     and <replaceable>base</replaceable>, it must be true for
     every <replaceable>val2</replaceable> <literal>&lt;=</literal>
     <replaceable>val1</replaceable> with the
     same <replaceable>base</replaceable>.
    </para>
   </listitem>
   <listitem>
    <para>
     If <function>in_range</function> with <replaceable>less</replaceable> =
     true is false for some <replaceable>val1</replaceable>
     and <replaceable>base</replaceable>, it must be false for
     every <replaceable>val2</replaceable> <literal>&gt;=</literal>
     <replaceable>val1</replaceable> with the
     same <replaceable>base</replaceable>.
    </para>
   </listitem>
   <listitem>
    <para>
     If <function>in_range</function> with <replaceable>less</replaceable> =
     true is true for some <replaceable>val</replaceable>
     and <replaceable>base1</replaceable>, it must be true for
     every <replaceable>base2</replaceable> <literal>&gt;=</literal>
     <replaceable>base1</replaceable> with the
     same <replaceable>val</replaceable>.
    </para>
   </listitem>
   <listitem>
    <para>
     If <function>in_range</function> with <replaceable>less</replaceable> =
     true is false for some <replaceable>val</replaceable>
     and <replaceable>base1</replaceable>, it must be false for
     every <replaceable>base2</replaceable> <literal>&lt;=</literal>
     <replaceable>base1</replaceable> with the
     same <replaceable>val</replaceable>.
    </para>
   </listitem>
  </itemizedlist>
  Analogous statements with inverted conditions hold
  when <replaceable>less</replaceable> = false.
 </para>
____________________________________________________________________________-->
 <para>
  <function>in_range</function>函数的结果必须与操作符族施加的排序顺序保持一致。准确的来说，给定任意固定的<replaceable>offset</replaceable>值以及<replaceable>sub</replaceable>值，那么：
  <itemizedlist>
   <listitem>
    <para>
     如果带有<replaceable>less</replaceable> = true的<function>in_range</function>对某个<replaceable>val1</replaceable>和<replaceable>base</replaceable>为真，则它必须对每一个有相同<replaceable>base</replaceable>的<replaceable>val2</replaceable> <literal>&lt;=</literal> <replaceable>val1</replaceable>为真。
    </para>
   </listitem>
   <listitem>
    <para>
     如果带有<replaceable>less</replaceable> = true的<function>in_range</function>对某个<replaceable>val1</replaceable>和<replaceable>base</replaceable>为假，则它必须对每一个有相同<replaceable>base</replaceable>的<replaceable>val2</replaceable> <literal>&gt;=</literal> <replaceable>val1</replaceable>为假。
    </para>
   </listitem>
   <listitem>
    <para>
     如果带有<replaceable>less</replaceable> = true的<function>in_range</function>对于某些<replaceable>val</replaceable>和<replaceable>base1</replaceable>为真,那么它对于每一个有相同<replaceable>val</replaceable>的<replaceable>base2</replaceable> <literal>&gt;=</literal> <replaceable>base1</replaceable>也必须为真。
    </para>
   </listitem>
   <listitem>
    <para>
     如果带有<replaceable>less</replaceable> =
     true的<function>in_range</function>对于某些<replaceable>val</replaceable>和<replaceable>base1</replaceable>为假, name它对于每一个有相同<replaceable>val</replaceable>的<replaceable>base2</replaceable> <literal>&lt;=</literal> <replaceable>base1</replaceable>也必须为假。
    </para>
   </listitem>
  </itemizedlist>
  当<replaceable>less</replaceable> = false时，类似的具有相逆条件的语句成立。
 </para>

<!--==========================orignal english content==========================
 <para>
  If the type being ordered (<type>type1</type>) is collatable,
  the appropriate collation OID will be passed to
  the <function>in_range</function> function, using the standard
  PG_GET_COLLATION() mechanism.
 </para>
____________________________________________________________________________-->
 <para>
  如果被排序的类型（<type>type1</type>）是可排序的，合适的排序规则OID将使用标准的PG_GET_COLLATION()机制被传递给<function>in_range</function>函数。
 </para>

<!--==========================orignal english content==========================
 <para>
  <function>in_range</function> functions need not handle NULL inputs, and
  typically will be marked strict.
 </para>
____________________________________________________________________________-->
 <para>
  <function>in_range</function>函数不需要处理NULL输入，并且通常将被标记为strict。
 </para>

</sect1>

<sect1 id="btree-implementation">
<!--==========================orignal english content==========================
 <title>Implementation</title>
____________________________________________________________________________-->
 <title>实现</title>

<!--==========================orignal english content==========================
  <para>
   An introduction to the btree index implementation can be found in
   <filename>src/backend/access/nbtree/README</filename>.
  </para>
____________________________________________________________________________-->
  <para>
   在<filename>src/backend/access/nbtree/README</filename>中可以找到对于btree索引实现的介绍。
  </para>

</sect1>

</chapter>

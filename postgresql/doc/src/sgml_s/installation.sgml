<!-- doc/src/sgml/installation.sgml -->
<!--

Use </link> not just </> so INSTALL.html can be created without links
to the main documentation.  Don't use <xref>; or if you must, wrap it
in a standalone-ignore clause.

-->

<chapter id="installation">
<!--==========================orignal english content==========================
 <title>Installation from Source Code</title>
____________________________________________________________________________-->
 <title>从源代码安装</title>

<!--==========================orignal english content==========================
 <indexterm zone="installation">
  <primary>installation</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="installation">
  <primary>installation</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  This <![%standalone-include;[document]]>
  <![%standalone-ignore;[chapter]]> describes the installation of
  <productname>PostgreSQL</productname> using the source code
  distribution.  (If you are installing a pre-packaged distribution,
  such as an RPM or Debian package, ignore this
  <![%standalone-include;[document]]>
  <![%standalone-ignore;[chapter]]>
  and read the packager's instructions instead.)
 </para>
____________________________________________________________________________-->
 <para>
  本章的内容描述从源代码发布安装<productname>PostgreSQL</productname>（如果你安装的是打包好的版本如RPM或Debian包，那么请略过这一章并且阅读打包者的指导）。
 </para>

 <sect1 id="install-short">
<!--==========================orignal english content==========================
  <title>Short Version</title>
____________________________________________________________________________-->
  <title>简单版</title>

<!--==========================orignal english content==========================
  <para>
<synopsis>
./configure
make
su
make install
adduser postgres
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data &gt;logfile 2&gt;&amp;1 &amp;
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</synopsis>
   The long version is the rest of this
   <![%standalone-include;[document.]]>
   <![%standalone-ignore;[chapter.]]>
  </para>
____________________________________________________________________________-->
  <para>
<synopsis>
./configure
make
su
make install
adduser postgres
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data &gt;logfile 2&gt;&amp;1 &amp;
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</synopsis>
   本章剩余部分都是完全版。
  </para>
 </sect1>


 <sect1 id="install-requirements">
<!--==========================orignal english content==========================
  <title>Requirements</title>
____________________________________________________________________________-->
  <title>要求</title>

<!--==========================orignal english content==========================
  <para>
   In general, a modern Unix-compatible platform should be able to run
   <productname>PostgreSQL</>.
   The platforms that had received specific testing at the
   time of release are listed in <xref linkend="supported-platforms">
   below. In the <filename>doc</> subdirectory of the distribution
   there are several platform-specific <acronym>FAQ</> documents you
   might wish to consult if you are having trouble.
  </para>
____________________________________________________________________________-->
  <para>
   一般说来，一个现代的与 Unix 兼容的平台应该就能运行<productname>PostgreSQL</productname>。 到发布为止已经明确测试过的平台的列表在 <xref linkend="supported-platforms"/>中列出。在发布的<filename>doc</filename>子目录里面有许多平台相关的 <acronym>FAQ</acronym>文档，如果你碰到问题你可能会需要参考它们。
  </para>

<!--==========================orignal english content==========================
  <para>
   The following software packages are required for building
   <productname>PostgreSQL</>:

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>make</primary>
      </indexterm>

      <acronym>GNU</> <application>make</> version 3.80 or newer is required; other
      <application>make</> programs or older <acronym>GNU</> <application>make</> versions will <emphasis>not</> work.
      (<acronym>GNU</> <application>make</> is sometimes installed under
      the name <filename>gmake</filename>.)  To test for <acronym>GNU</acronym>
      <application>make</application> enter:
<screen>
<userinput>make -&minus;version</userinput>
</screen>
     </para>
    </listitem>

    <listitem>
     <para>
      You need an <acronym>ISO</>/<acronym>ANSI</> C compiler (at least
      C89-compliant). Recent
      versions of <productname>GCC</> are recommended, but
      <productname>PostgreSQL</> is known to build using a wide variety
      of compilers from different vendors.
     </para>
    </listitem>

    <listitem>
     <para>
      <application>tar</> is required to unpack the source
      distribution, in addition to either
      <application>gzip</> or <application>bzip2</>.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>readline</primary>
      </indexterm>
      <indexterm>
       <primary>libedit</primary>
      </indexterm>

      The <acronym>GNU</> <productname>Readline</> library is used by
      default.  It allows <application>psql</application> (the
      PostgreSQL command line SQL interpreter) to remember each
      command you type, and allows you to use arrow keys to recall and
      edit previous commands.  This is very helpful and is strongly
      recommended.  If you don't want to use it then you must specify
      the <option>-&minus;without-readline</option> option to
      <filename>configure</>. As an alternative, you can often use the
      BSD-licensed <filename>libedit</filename> library, originally
      developed on <productname>NetBSD</productname>. The
      <filename>libedit</filename> library is
      GNU <productname>Readline</productname>-compatible and is used if
      <filename>libreadline</filename> is not found, or if
      <option>-&minus;with-libedit-preferred</option> is used as an
      option to <filename>configure</>. If you are using a package-based
      Linux distribution, be aware that you need both the
      <literal>readline</> and <literal>readline-devel</> packages, if
      those are separate in your distribution.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>

      The <productname>zlib</productname> compression library is
      used by default. If you don't want to use it then you must
      specify the <option>-&minus;without-zlib</option> option to
      <filename>configure</filename>. Using this option disables
      support for compressed archives in <application>pg_dump</> and
      <application>pg_restore</>.
     </para>
    </listitem>
   </itemizedlist>
  </para>
____________________________________________________________________________-->
  <para>
   编译<productname>PostgreSQL</productname>需要下列软件包：

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>make</primary>
      </indexterm>

      要求<acronym>GNU</acronym> <application>make</application>版本3.80或以上；其他的<application>make</application>程序或更老的<acronym>GNU</acronym> <application>make</application>版本将<emphasis>不会</emphasis>工作（<acronym>GNU</acronym> <application>make</application>有时以名字<filename>gmake</filename>安装）。要测试<acronym>GNU</acronym> <application>make</application>可以输入：
<screen>
<userinput>make --version</userinput>
</screen>
     </para>
    </listitem>

    <listitem>
     <para>
      你需要一个<acronym>ISO</acronym>/<acronym>ANSI</acronym> C 编译器（至少是 C89兼容的）。我们推荐使用最近版本的<productname>GCC</productname>，不过，众所周知的是<productname>PostgreSQL</productname>可以利用许多不同厂商的不同编译器进行编译。
     </para>
    </listitem>

    <listitem>
     <para>
      除了<application>gzip</application>和<application>bzip2</application>之外，我们还需要<application>tar</application>来解包源代码发布。
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>readline</primary>
      </indexterm>
      <indexterm>
       <primary>libedit</primary>
      </indexterm>

      默认时将自动使用<acronym>GNU</acronym> <productname>Readline</productname>库。它允许<application>psql</application>（PostgreSQL的命令行 SQL 解释器）记住你输入的每一个命令并且允许你使用箭头键来找回和编辑之前的命令。如果你不想用它，那么你必需给<filename>configure</filename>声明<option>--without-readline</option>选项。作为一种可选方案，你常常可以使用 BSD许可证的<filename>libedit</filename>库，它最初是在<productname>NetBSD</productname>上开发的。<filename>libedit</filename>库是GNU <productname>Readline</productname>兼容的， 如果没有发现<filename>libreadline</filename>或者<filename>configure</filename>使用了<option>--with-libedit-preferred</option>选项，都会使用这个库。如果你使用的是一个基于包的 Linux 发布，那么要注意你需要<literal>readline</literal>和<literal>readline-devel</literal>两个包，特别是如果这两个包在你的版本里是分开的时候。
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>

      默认的时候将使用<productname>zlib</productname>压缩库。 如果你不想使用它，那么你必须给<filename>configure</filename>声明<option>--without-zlib</option>选项。使用这个选项关闭了在<application>pg_dump</application>和<application>pg_restore</application>中对压缩归档的支持。
     </para>
    </listitem>
   </itemizedlist>
  </para>

<!--==========================orignal english content==========================
  <para>
   The following packages are optional.  They are not required in the
   default configuration, but they are needed when certain build
   options are enabled, as explained below:

   <itemizedlist>
    <listitem>
     <para>
      To build the server programming language
      <application>PL/Perl</application> you need a full
      <productname>Perl</productname> installation, including the
      <filename>libperl</filename> library and the header files.
      The minimum required version is <productname>Perl</productname> 5.8.3.
      Since <application>PL/Perl</application> will be a shared
      library, the <indexterm><primary>libperl</primary></indexterm>
      <filename>libperl</filename> library must be a shared library
      also on most platforms.  This appears to be the default in
      recent <productname>Perl</productname> versions, but it was not
      in earlier versions, and in any case it is the choice of whomever
      installed Perl at your site.  <filename>configure</filename> will fail
      if building <application>PL/Perl</application> is selected but it cannot
      find a shared <filename>libperl</filename>.  In that case, you will have
      to rebuild and install <productname>Perl</productname> manually to be
      able to build <application>PL/Perl</application>.  During the
      configuration process for <productname>Perl</productname>, request a
      shared library.
     </para>

     <para>
      If you intend to make more than incidental use of
      <application>PL/Perl</application>, you should ensure that the
      <productname>Perl</productname> installation was built with the
      <literal>usemultiplicity</> option enabled (<literal>perl -V</>
      will show whether this is the case).
     </para>
    </listitem>

    <listitem>
     <para>
      To build the <application>PL/Python</> server programming
      language, you need a <productname>Python</productname>
      installation with the header files and
      the <application>distutils</application> module.  The minimum
      required version is <productname>Python</productname> 2.4.
      <productname>Python 3</productname> is supported if it's
      version 3.1 or later; but see
      <xref linkend="plpython-python23"/>
      when using Python 3.
     </para>

     <para>
      Since <application>PL/Python</application> will be a shared
      library, the <indexterm><primary>libpython</primary></indexterm>
      <filename>libpython</filename> library must be a shared library
      also on most platforms.  This is not the case in a default
      <productname>Python</productname> installation built from source, but a
      shared library is available in many operating system
      distributions.  <filename>configure</filename> will fail if
      building <application>PL/Python</application> is selected but it cannot
      find a shared <filename>libpython</filename>.  That might mean that you
      either have to install additional packages or rebuild (part of) your
      <productname>Python</productname> installation to provide this shared
      library.  When building from source, run <productname>Python</>'s
      configure with the <literal>-&minus;enable-shared</> flag.
     </para>
    </listitem>

    <listitem>
     <para>
      To build the <application>PL/Tcl</application>
      procedural language, you of course need a <productname>Tcl</>
      installation.  The minimum required version is
      <productname>Tcl</productname> 8.4.
     </para>
    </listitem>

    <listitem>
     <para>
      To enable Native Language Support (<acronym>NLS</acronym>), that
      is, the ability to display a program's messages in a language
      other than English, you need an implementation of the
      <application>Gettext</> <acronym>API</acronym>.  Some operating
      systems have this built-in (e.g., <systemitem
      class="osname">Linux</>, <systemitem class="osname">NetBSD</>,
      <systemitem class="osname">Solaris</>), for other systems you
      can download an add-on package from <ulink
      url="http://www.gnu.org/software/gettext/"></ulink>.
      If you are using the <application>Gettext</> implementation in
      the <acronym>GNU</acronym> C library then you will additionally
      need the <productname>GNU Gettext</productname> package for some
      utility programs.  For any of the other implementations you will
      not need it.
     </para>
    </listitem>

    <listitem>
     <para>
      You need <productname>OpenSSL</>, if you want to support
      encrypted client connections. The minimum required version is
      0.9.8.
     </para>
    </listitem>

    <listitem>
     <para>
      You need <application>Kerberos</>, <productname>OpenLDAP</>,
      and/or <application>PAM</>, if you want to support authentication
      using those services.
     </para>
    </listitem>

    <listitem>
     <para>
      To build the <productname>PostgreSQL</productname> documentation,
      there is a separate set of requirements; see
      <xref linkend="docguide-toolsets"/>
     </para>
    </listitem>
   </itemizedlist>
  </para>
____________________________________________________________________________-->
  <para>
   下列包是可选的。在默认配置的时候并不要求它们，但是如果打开了一些编译选项之后就需要它们了，如下文所解释的：

   <itemizedlist>
    <listitem>
     <para>
      要编译服务器端编程语言<application>PL/Perl</application>，你需要一个完整的
      <productname>Perl</productname>安装，包括<filename>libperl</filename>
      库和头文件。
	  所需的最低版本是<productname>Perl</productname> 5.8.3。
	  因为<application>PL/Perl</application>是一个共享库，
      <indexterm><primary>libperl</primary></indexterm>
      <filename>libperl</filename>库在大多数平台上也必须是一个共享库。最近的版本的
      <productname>Perl</productname>好像已经默认这样做了，但是早先的版本可不是
      这样的，而且这总是一种在站点上安装 Perl 的选择。如果选择了编译
      <application>PL/Perl</application>但是它却找不到一个共享的
      <filename>libperl</filename>，那么<filename>configure</filename>将会失败。
      在这种情况下，你将不得不重新手工编译并且安装<productname>Perl</productname>
      以便能编译<application>PL/Perl</application>。在
      <productname>Perl</productname>的配置处理过程中，需要一个共享库。
     </para>
     
     <para>
      如果你想更多地使用<application>PL/Perl</application>，
      你应当保证<productname>Perl</productname>安装在编译时启用了
      <literal>usemultiplicity</literal>选项（<literal>perl -V</literal>将会显示是否是这样）。
     </para>
    </listitem>

    <listitem>
     <para>
      要编译<application>PL/Python</application>服务器端编程语言， 你需要一个<productname>Python</productname>的安装，包括头文件和<application>distutils</application>模块。最低的版本要求是<productname>Python</productname> 2.4。如果是版本3.1或更高版本，则支持<productname>Python 3</productname>，
      如果使用 Python 3 请参考<xref linkend="plpython-python23"/>
     </para>

     <para>
      因为<application>PL/Python</application>将以共享库的方式编译，
      <indexterm><primary>libpython</primary></indexterm> 
      <filename>libpython</filename>库在大多数平台上也必须是一个共享库。
      在默认的从源码安装<productname>Python</productname>时不是这样的，
      而是在很多操作系统发布中有一个共享库可用。如果选择了编译
      <application>PL/Python</application>但找不到一个共享的
      <filename>libpython</filename>，<filename>configure</filename>将
      会失败。这可能意味着你不得不安装额外的包或者（部分）重编译
      <productname>Python</productname>安装以提供这个共享库。
      在从源码编译时，请用<literal>--enable-shared</literal>标志运行
      <productname>Python</productname>的配置脚本。
     </para>
    </listitem>

    <listitem>
     <para>
      如果你想编译<application>PL/Tcl</application>过程语言， 
      你当然需要安装<productname>Tcl</productname>，要求的最低版本是
      <productname>Tcl</productname> 8.4。
     </para>
    </listitem>

    <listitem>
     <para>
      要打开本地语言支持（<acronym>NLS</acronym>），也就是说， 用英语之外的语言显示程序的消息，你需要一个<application>Gettext</application> <acronym>API</acronym>的实现。有些操作系统内置了这些（例如<systemitem class="osname">Linux</systemitem>、<systemitem class="osname">NetBSD</systemitem>、<systemitem class="osname">Solaris</systemitem>）， 对于其它系统，你可以从<ulink url="http://www.gnu.org/software/gettext/"></ulink>下载一个额外的包。如果你在使用<acronym>GNU</acronym> C 库里面的<application>Gettext</application>实现， 那么你就额外需要<productname>GNU Gettext</productname>包，因为我们需要里面的几个工具程序。对于任何其它的实现，你应该不需要它。
     </para>
    </listitem>

    <listitem>
     <para>
      如果您想支持加密的客户端连接，则需要<productname>OpenSSL</productname>。最低要求的版本是0.9.8。
     </para>
    </listitem>

    <listitem>
     <para>
      如果你想支持使用<application>Kerberos</application>、<productname>OpenLDAP</productname>和/或<application>PAM</application>服务的认证，那你需要相应的包。
     </para>
    </listitem>

    <listitem>
     <para>
      要编译<productname>PostgreSQL</productname>文档，有一些独立的要求集，请见
      <xref linkend="docguide-toolsets"/>。
     </para>
    </listitem>
   </itemizedlist>
  </para>

<!--==========================orignal english content==========================
  <para>
   If you are building from a <productname>Git</productname> tree instead of
   using a released source package, or if you want to do server development,
   you also need the following packages:

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>flex</primary>
      </indexterm>
      <indexterm>
       <primary>lex</primary>
      </indexterm>
      <indexterm>
       <primary>bison</primary>
      </indexterm>
      <indexterm>
       <primary>yacc</primary>
      </indexterm>

      GNU <application>Flex</> and <application>Bison</>
      are needed to build from a Git checkout, or if you changed the actual
      scanner and parser definition files. If you need them, be sure
      to get <application>Flex</> 2.5.31 or later and
      <application>Bison</> 1.875 or later. Other <application>lex</>
      and <application>yacc</> programs cannot be used.
     </para>
    </listitem>
    <listitem>
     <para>
      <indexterm>
       <primary>perl</primary>
      </indexterm>

      <application>Perl</> 5.8.3 or later is needed to build from a Git checkout,
      or if you changed the input files for any of the build steps that
      use Perl scripts.  If building on Windows you will need
      <application>Perl</> in any case.  <application>Perl</application> is
      also required to run some test suites.
     </para>
    </listitem>
   </itemizedlist>
  </para>
____________________________________________________________________________-->
  <para>
   如果你正从<productname>Git</productname>树而不是使用发布的源代码包进行编译，或者你想做服务器端开发， 那么你还需要下面的包：

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>flex</primary>
      </indexterm>
      <indexterm>
       <primary>lex</primary>
      </indexterm>
      <indexterm>
       <primary>bison</primary>
      </indexterm>
      <indexterm>
       <primary>yacc</primary>
      </indexterm>

      如果你需要从 Git 检出中编译，或者你修改了实际的扫描器和分析器的定义文件， 那么你需要 GNU <application>Flex</application>和<application>Bison</application>。 如果你需要它们，那么确保自己拿到的是<application>Flex</application> 2.5.31 或更新的版本， 以及<application>Bison</application> 1.875 或者更新的版本。不能使用其他<application>lex</application>和<application>yacc</application>程序。
     </para>
    </listitem>
    <listitem>
     <para>
      <indexterm>
       <primary>perl</primary>
      </indexterm>

      如果需要从 Git 检出中编译，或者你修改了任何使用 Perl 脚本的编译步骤的输入文件，那么你需要<application>Perl</application> 5.8.3或以后的版本。如果你在 Windows 上编译，你在任何情况下都需要<application>Perl</application>。运行一些测试套件时也需要<application>Perl</application>。
     </para>
    </listitem>
   </itemizedlist>
  </para>

<!--==========================orignal english content==========================
  <para>
   If you need to get a <acronym>GNU</acronym> package, you can find
   it at your local <acronym>GNU</acronym> mirror site (see <ulink
   url="http://www.gnu.org/order/ftp.html"></>
   for a list) or at <ulink
   url="ftp://ftp.gnu.org/gnu/"></ulink>.
  </para>
____________________________________________________________________________-->
  <para>
   如果你需要获取<acronym>GNU</acronym>包，你可以在你的本地<acronym>GNU</acronym>镜像站点 （看看 <ulink url="http://www.gnu.org/order/ftp.html"></ulink>或<ulink url="ftp://ftp.gnu.org/gnu/"></ulink>找到它们。
  </para>

<!--==========================orignal english content==========================
  <para>
   Also check that you have sufficient disk space. You will need about
   100 MB for the source tree during compilation and about 20 MB for
   the installation directory. An empty database cluster takes about
   35 MB; databases take about five times the amount of space that a
   flat text file with the same data would take. If you are going to
   run the regression tests you will temporarily need up to an extra
   150 MB. Use the <command>df</command> command to check free disk
   space.
  </para>
____________________________________________________________________________-->
  <para>
   还要检查一下你是否有足够的磁盘空间。你将大概需要近 100MB 用于存放编译过程中的源码树和大约 20 MB 用于安装目录。 一个空数据库集簇大概需要 35 MB。一个数据库所占的空间大约是存储同样数据的平面文件所占空间的五倍。如果你要运行回归测试，还临时需要额外的 150MB。请用<command>df</command>命令检查剩余磁盘空间。
  </para>
 </sect1>

 <sect1 id="install-getsource">
  <title>获取源码</title>

  <para>
   <productname>PostgreSQL</productname> &version; 源代码可以从我们的官方网站 <ulink url="https://www.postgresql.org/download/"></ulink>的下载区中获得。你将得到一个名为<filename>postgresql-&version;.tar.gz</filename>或<filename>postgresql-&version;.tar.bz2</filename>的文件。在你获取文件之后，解压缩它：
<screen>
<userinput>gunzip postgresql-&version;.tar.gz</userinput>
<userinput>tar xf postgresql-&version;.tar</userinput>
</screen>
   （如果你得到的是<filename>.bz2</filename>文件，请用<command>bunzip2</command>代替<command>gunzip</command>）。这样将在当前目录创建一个目录<filename>postgresql-&version;</filename>， 里面是<productname>PostgreSQL</productname>源代码。 进入这个目录完成安装过程的其他步骤。
  </para>

  <para>
   你也可以直接从版本控制库中获得源代码，参见<xref linkend="sourcerepo"/>。
  </para>
 </sect1>

 <sect1 id="install-procedure">
<!--==========================orignal english content==========================
  <title>Installation Procedure</title>
____________________________________________________________________________-->
  <title>安装过程</title>

  <procedure>

  <step id="configure">
<!--==========================orignal english content==========================
   <title>Configuration</title>
____________________________________________________________________________-->
   <title>配置</title>

<!--==========================orignal english content==========================
   <indexterm zone="configure">
    <primary>configure</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="configure">
    <primary>configure</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    The first step of the installation procedure is to configure the
    source tree for your system and choose the options you would like.
    This is done by running the <filename>configure</> script. For a
    default installation simply enter:
<screen>
<userinput>./configure</userinput>
</screen>
    This script will run a number of tests to determine values for various
    system dependent variables and detect any quirks of your
    operating system, and finally will create several files in the
    build tree to record what it found.  You can also run
    <filename>configure</filename> in a directory outside the source
    tree, if you want to keep the build directory separate.  This
    procedure is also called a
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>
    build.  Here's how:
<screen>
<userinput>mkdir build_dir</userinput>
<userinput>cd build_dir</userinput>
<userinput>/path/to/source/tree/configure [options go here]</userinput>
<userinput>make</userinput>
</screen>
   </para>
____________________________________________________________________________-->
   <para>
    安装过程的第一步就是为你的系统配置源代码树并选择你喜欢的选项。这个工作是通过运行<filename>configure</filename>脚本实现的，对于默认安装，你只需要简单地输入：
<screen>
<userinput>./configure</userinput>
</screen>
    该脚本将运行一些测试来决定一些系统相关的变量， 并检测你的操作系统的特殊设置，并且最后将在编译树中创建一些文件以记录它找到了什么。如果你想保持编译目录的独立，你也可以在一个源码树之外的目录中运行<filename>configure</filename> 。这个过程也被称为一个<indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>编译。做法如下：
<screen>
<userinput>mkdir build_dir</userinput>
<userinput>cd build_dir</userinput>
<userinput>/path/to/source/tree/configure [options go here]</userinput>
<userinput>make</userinput>
</screen>
   </para>

<!--==========================orignal english content==========================
   <para>
    The default configuration will build the server and utilities, as
    well as all client applications and interfaces that require only a
    C compiler. All files will be installed under
    <filename>/usr/local/pgsql</> by default.
   </para>
____________________________________________________________________________-->
   <para>
    默认设置将编译服务器和辅助程序，还有只需要 C 编译器的所有客户端程序和接口。默认时所有文件都将安装到<filename>/usr/local/pgsql</filename>。
   </para>

<!--==========================orignal english content==========================
   <para>
    You can customize the build and installation process by supplying one
    or more of the following command line options to
    <filename>configure</filename>:

     <variablelist>
      <varlistentry>
       <term><option>-&minus;prefix=<replaceable>PREFIX</></option></term>
       <listitem>
        <para>
         Install all files under the directory <replaceable>PREFIX</>
         instead of <filename>/usr/local/pgsql</filename>. The actual
         files will be installed into various subdirectories; no files
         will ever be installed directly into the
         <replaceable>PREFIX</> directory.
        </para>

        <para>
         If you have special needs, you can also customize the
         individual subdirectories with the following options. However,
         if you leave these with their defaults, the installation will be
         relocatable, meaning you can move the directory after
         installation. (The <literal>man</> and <literal>doc</>
         locations are not affected by this.)
        </para>

        <para>
         For relocatable installs, you might want to use
         <filename>configure</filename>'s <literal>-&minus;disable-rpath</>
         option.  Also, you will need to tell the operating system how
         to find the shared libraries.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;exec-prefix=<replaceable>EXEC-PREFIX</></option></term>
       <listitem>
        <para>
         You can install architecture-dependent files under a
         different prefix, <replaceable>EXEC-PREFIX</>, than what
         <replaceable>PREFIX</> was set to. This can be useful to
         share architecture-independent files between hosts. If you
         omit this, then <replaceable>EXEC-PREFIX</> is set equal to
         <replaceable>PREFIX</> and both architecture-dependent and
         independent files will be installed under the same tree,
         which is probably what you want.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;bindir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Specifies the directory for executable programs. The default
         is <filename><replaceable>EXEC-PREFIX</>/bin</>, which
         normally means <filename>/usr/local/pgsql/bin</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;sysconfdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the directory for various configuration files,
         <filename><replaceable>PREFIX</>/etc</> by default.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;libdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the location to install libraries and dynamically loadable
         modules. The default is
         <filename><replaceable>EXEC-PREFIX</>/lib</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;includedir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the directory for installing C and C++ header files. The
         default is <filename><replaceable>PREFIX</>/include</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;datarootdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the root directory for various types of read-only data
         files.  This only sets the default for some of the following
         options.  The default is
         <filename><replaceable>PREFIX</>/share</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;datadir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the directory for read-only data files used by the
         installed programs. The default is
         <filename><replaceable>DATAROOTDIR</></>. Note that this has
         nothing to do with where your database files will be placed.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;localedir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the directory for installing locale data, in particular
         message translation catalog files.  The default is
         <filename><replaceable>DATAROOTDIR</>/locale</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;mandir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         The man pages that come with <productname>PostgreSQL</> will be installed under
         this directory, in their respective
         <filename>man<replaceable>x</></> subdirectories.
         The default is <filename><replaceable>DATAROOTDIR</>/man</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;docdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         Sets the root directory for installing documentation files,
         except <quote>man</> pages.  This only sets the default for
         the following options.  The default value for this option is
         <filename><replaceable>DATAROOTDIR</>/doc/postgresql</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;htmldir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
         The HTML-formatted documentation for
         <productname>PostgreSQL</productname> will be installed under
         this directory.  The default is
         <filename><replaceable>DATAROOTDIR</></>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
      <para>
       Care has been taken to make it possible to install
       <productname>PostgreSQL</> into shared installation locations
       (such as <filename>/usr/local/include</filename>) without
       interfering with the namespace of the rest of the system. First,
       the string <quote><literal>/postgresql</literal></quote> is
       automatically appended to <varname>datadir</varname>,
       <varname>sysconfdir</varname>, and <varname>docdir</varname>,
       unless the fully expanded directory name already contains the
       string <quote><literal>postgres</></quote> or
       <quote><literal>pgsql</></quote>. For example, if you choose
       <filename>/usr/local</filename> as prefix, the documentation will
       be installed in <filename>/usr/local/doc/postgresql</filename>,
       but if the prefix is <filename>/opt/postgres</filename>, then it
       will be in <filename>/opt/postgres/doc</filename>. The public C
       header files of the client interfaces are installed into
       <varname>includedir</varname> and are namespace-clean. The
       internal header files and the server header files are installed
       into private directories under <varname>includedir</varname>. See
       the documentation of each interface for information about how to
       access its header files. Finally, a private subdirectory will
       also be created, if appropriate, under <varname>libdir</varname>
       for dynamically loadable modules.
      </para>
     </note>
    </para>
____________________________________________________________________________-->
   <para>
    你可以通过给出下面的<filename>configure</filename>命令行选项中的一个或更多的选项来自定义编译和安装过程：

     <variablelist>
      <varlistentry>
       <term><option>--prefix=<replaceable>PREFIX</replaceable></option></term>
       <listitem>
        <para>
         把所有文件装在目录<replaceable>PREFIX</replaceable>中而不是<filename>/usr/local/pgsql</filename>中。 实际的文件会安装到数个子目录中；没有一个文件会直接安装到<replaceable>PREFIX</replaceable>目录里。
        </para>

        <para>
         如果你有特殊需要，你还可以用下面的选项自定义不同的子目录的位置。 不过，如果你把这些设置保留默认，那么安装将是可重定位的，意思是你可以在安装过后移动目录（<literal>man</literal>和<literal>doc</literal>位置不受此影响）。
        </para>

        <para>
         对于可重定位的安装，你可能需要使用<filename>configure</filename>的<literal>--disable-rpath</literal>选项。 还有，你需要告诉操作系统如何找到共享库。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--exec-prefix=<replaceable>EXEC-PREFIX</replaceable></option></term>
       <listitem>
        <para>
         你可以把体系相关的文件安装到一个不同的前缀下（<replaceable>EXEC-PREFIX</replaceable>），而不是<replaceable>PREFIX</replaceable>中设置的地方。 这样做可以比较方便地在不同主机之间共享体系相关的文件。 如果你省略这些，那么<replaceable>EXEC-PREFIX</replaceable>就会被设置为等于 <replaceable>PREFIX</replaceable>并且体系相关和体系无关的文件都会安装到同一棵目录树下，这也可能是你想要的。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--bindir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         为可执行程序指定目录。默认是<filename><replaceable>EXEC-PREFIX</replaceable>/bin</filename>， 通常也就是<filename>/usr/local/pgsql/bin</filename>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--sysconfdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         用于各种各样配置文件的目录，默认为<filename><replaceable>PREFIX</replaceable>/etc</filename>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--libdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         设置安装库和动态装载模块的目录。默认是<filename><replaceable>EXEC-PREFIX</replaceable>/lib</filename>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--includedir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         C 和 C++ 头文件的目录。默认是<filename><replaceable>PREFIX</replaceable>/include</filename>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datarootdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         设置多种只读数据文件的根目录。这只为后面的某些选项设置默认值。默认值为<filename><replaceable>PREFIX</replaceable>/share</filename>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datadir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         设置被安装的程序使用的只读数据文件的目录。默认值为<filename><replaceable>DATAROOTDIR</replaceable></filename>。注意这不会对你的数据库文件被放置的位置产生任何影响。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--localedir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         设置安装区域数据的目录，特别是消息翻译目录文件。默认值为<filename><replaceable>DATAROOTDIR</replaceable>/locale</filename>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--mandir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         <productname>PostgreSQL</productname>自带的手册页将安装到这个目录，它们被安装在相应的<filename>man<replaceable>x</replaceable></filename>子目录里。 默认是<filename><replaceable>DATAROOTDIR</replaceable>/man</filename>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--docdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         设置安装文档文件的根目录，<quote>man</quote>页不包含在内。这只为后续选项设置默认值。这个选项的默认值为<filename><replaceable>DATAROOTDIR</replaceable>/doc/postgresql</filename>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--htmldir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         <productname>PostgreSQL</productname>的HTML格式的文档将被安装在这个目录中。默认值为<filename><replaceable>DATAROOTDIR</replaceable></filename>。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
      <para>
       为了让<productname>PostgreSQL</productname>能够安装在一些共享的安装位置（例如<filename>/usr/local/include</filename>）， 同时又不至于和系统其它部分产生名字空间干扰，我们特别做了一些处理。 首先，安装脚本会自动给<varname>datadir</varname>、<varname>sysconfdir</varname>和<varname>docdir</varname>后面附加上<quote><literal>/postgresql</literal></quote>字符串， 除非展开的完整路径名已经包含字符串<quote><literal>postgres</literal></quote>或者<quote><literal>pgsql</literal></quote>。 例如，如果你选择<filename>/usr/local</filename>作为前缀， 那么文档将安装在<filename>/usr/local/doc/postgresql</filename>，但如果前缀是<filename>/opt/postgres</filename>， 那么它将被放到<filename>/opt/postgres/doc</filename>。客户接口的公共 C 头文件安装到了<varname>includedir</varname>，并且是名字空间无关的。内部的头文件和服务器头文件都安装在<varname>includedir</varname>下的私有目录中。参考每种接口的文档获取关于如何访问头文件的信息。最后，如果合适，那么也会在<varname>libdir</varname>下创建一个私有的子目录用于动态可装载的模块。
      </para>
     </note>
    </para>

<!--==========================orignal english content==========================
    <para>
     <variablelist>
      <varlistentry>
       <term><option>-&minus;with-extra-version=<replaceable>STRING</></option></term>
       <listitem>
        <para>
         Append <replaceable>STRING</> to the PostgreSQL version number.  You
         can use this, for example, to mark binaries built from unreleased Git
         snapshots or containing custom patches with an extra version string
         such as a <command>git describe</command> identifier or a
         distribution package release number.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-includes=<replaceable>DIRECTORIES</></option></term>
       <listitem>
        <para>
         <replaceable>DIRECTORIES</> is a colon-separated list of
         directories that will be added to the list the compiler
         searches for header files. If you have optional packages
         (such as GNU <application>Readline</>) installed in a non-standard
         location,
         you have to use this option and probably also the corresponding
         <option>-&minus;with-libraries</> option.
        </para>
        <para>
         Example: <literal>-&minus;with-includes=/opt/gnu/include:/usr/sup/include</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-libraries=<replaceable>DIRECTORIES</></option></term>
       <listitem>
        <para>
         <replaceable>DIRECTORIES</> is a colon-separated list of
         directories to search for libraries. You will probably have
         to use this option (and the corresponding
         <option>-&minus;with-includes</> option) if you have packages
         installed in non-standard locations.
        </para>
        <para>
         Example: <literal>-&minus;with-libraries=/opt/gnu/lib:/usr/sup/lib</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;enable-nls<optional>=<replaceable>LANGUAGES</replaceable></optional></option></term>
       <listitem>
        <para>
         Enables Native Language Support (<acronym>NLS</acronym>),
         that is, the ability to display a program's messages in a
         language other than English.
         <replaceable>LANGUAGES</replaceable> is an optional space-separated
         list of codes of the languages that you want supported, for
         example <literal>-&minus;enable-nls='de fr'</>.  (The intersection
         between your list and the set of actually provided
         translations will be computed automatically.)  If you do not
         specify a list, then all available translations are
         installed.
        </para>

        <para>
         To use this option, you will need an implementation of the
         <application>Gettext</> API; see above.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-pgport=<replaceable>NUMBER</></option></term>
       <listitem>
        <para>
         Set <replaceable>NUMBER</> as the default port number for
         server and clients. The default is 5432. The port can always
         be changed later on, but if you specify it here then both
         server and clients will have the same default compiled in,
         which can be very convenient.  Usually the only good reason
         to select a non-default value is if you intend to run multiple
         <productname>PostgreSQL</> servers on the same machine.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-perl</option></term>
       <listitem>
        <para>
         Build the <application>PL/Perl</> server-side language.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-python</option></term>
       <listitem>
        <para>
         Build the <application>PL/Python</> server-side language.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-tcl</option></term>
       <listitem>
        <para>
         Build the <application>PL/Tcl</> server-side language.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-tclconfig=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Tcl installs the file <filename>tclConfig.sh</filename>, which
         contains configuration information needed to build modules
         interfacing to Tcl. This file is normally found automatically
         at a well-known location, but if you want to use a different
         version of Tcl you can specify the directory in which to look
         for it.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-gssapi</option></term>
       <listitem>
        <para>
         Build with support for GSSAPI authentication. On many
         systems, the GSSAPI (usually a part of the Kerberos installation)
         system is not installed in a location
         that is searched by default (e.g., <filename>/usr/include</>,
         <filename>/usr/lib</>), so you must use the options
         <option>-&minus;with-includes</> and <option>-&minus;with-libraries</> in
         addition to this option.  <filename>configure</> will check
         for the required header files and libraries to make sure that
         your GSSAPI installation is sufficient before proceeding.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-krb-srvnam=<replaceable>NAME</></option></term>
       <listitem>
        <para>
         The default name of the Kerberos service principal used
         by GSSAPI.
         <literal>postgres</literal> is the default. There's usually no
         reason to change this unless you have a Windows environment,
         in which case it must be set to upper case
         <literal>POSTGRES</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-icu</option></term>
       <listitem>
        <para>
         Build with support for
         the <productname>ICU</productname><indexterm><primary>ICU</></>
         library.  This requires the <productname>ICU4C</productname> package
         to be installed.  The minimum required version
         of <productname>ICU4C</productname> is currently 4.2.
        </para>

        <para>
         By default,
         <productname>pkg-config</productname><indexterm><primary>pkg-config</></>
         will be used to find the required compilation options.  This is
         supported for <productname>ICU4C</productname> version 4.6 and later.
         For older versions, or if <productname>pkg-config</productname> is
         not available, the variables <envar>ICU_CFLAGS</envar>
         and <envar>ICU_LIBS</envar> can be specified
         to <filename>configure</filename>, like in this example:
<programlisting>
./configure ... -&minus;with-icu ICU_CFLAGS='-I/some/where/include' ICU_LIBS='-L/some/where/lib -licui18n -licuuc -licudata'
</programlisting>
         (If <productname>ICU4C</productname> is in the default search path
         for the compiler, then you still need to specify a nonempty string in
         order to avoid use of <productname>pkg-config</productname>, for
         example, <literal>ICU_CFLAGS=' '</literal>.)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-openssl</option>
       <indexterm>
        <primary>OpenSSL</primary>
        <seealso>SSL</seealso>
       </indexterm>
       </term>
       <listitem>
        <para>
         Build with support for <acronym>SSL</> (encrypted)
         connections. This requires the <productname>OpenSSL</>
         package to be installed.  <filename>configure</> will check
         for the required header files and libraries to make sure that
         your <productname>OpenSSL</> installation is sufficient
         before proceeding.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-pam</option></term>
       <listitem>
        <para>
         Build with <acronym>PAM</><indexterm><primary>PAM</></>
         (Pluggable Authentication Modules) support.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-bsd-auth</option></term>
       <listitem>
        <para>
         Build with BSD Authentication support.
         (The BSD Authentication framework is
         currently only available on OpenBSD.)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-ldap</option></term>
       <listitem>
        <para>
         Build with <acronym>LDAP</><indexterm><primary>LDAP</></>
         support for authentication and connection parameter lookup (see
         <![%standalone-include[the documentation about client authentication
         and libpq]]><![%standalone-ignore[<xref linkend="libpq-ldap"> and
         <xref linkend="auth-ldap">]]> for more information). On Unix,
         this requires the <productname>OpenLDAP</> package to be
         installed. On Windows, the default <productname>WinLDAP</>
         library is used.  <filename>configure</> will check for the required
         header files and libraries to make sure that your
         <productname>OpenLDAP</> installation is sufficient before
         proceeding.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-systemd</option></term>
       <listitem>
        <para>
         Build with support
         for <application>systemd</application><indexterm><primary>systemd</primary></indexterm>
         service notifications.  This improves integration if the server binary
         is started under <application>systemd</application> but has no impact
         otherwise<![%standalone-ignore[; see <xref linkend="server-start"> for more
         information]]>.  <application>libsystemd</application> and the
         associated header files need to be installed to be able to use this
         option.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;without-readline</option></term>
       <listitem>
        <para>
         Prevents use of the <application>Readline</> library
         (and <application>libedit</> as well).  This option disables
         command-line editing and history in
         <application>psql</application>, so it is not recommended.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-libedit-preferred</option></term>
       <listitem>
        <para>
         Favors the use of the BSD-licensed <application>libedit</> library
         rather than GPL-licensed <application>Readline</>.  This option
         is significant only if you have both libraries installed; the
         default in that case is to use <application>Readline</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-bonjour</option></term>
       <listitem>
        <para>
         Build with Bonjour support.  This requires Bonjour support
         in your operating system.  Recommended on macOS.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-uuid=<replaceable>LIBRARY</replaceable></option></term>
       <listitem>
        <para>
         Build the <![%standalone-include[uuid-ossp]]>
         <![%standalone-ignore[<xref linkend="uuid-ossp">]]> module
         (which provides functions to generate UUIDs), using the specified
         UUID library.<indexterm><primary>UUID</primary></indexterm>
         <replaceable>LIBRARY</replaceable> must be one of:
        </para>
        <itemizedlist>
         <listitem>
          <para>
           <option>bsd</> to use the UUID functions found in FreeBSD, NetBSD,
           and some other BSD-derived systems
          </para>
         </listitem>
         <listitem>
          <para>
           <option>e2fs</> to use the UUID library created by
           the <literal>e2fsprogs</> project; this library is present in most
           Linux systems and in macOS, and can be obtained for other
           platforms as well
          </para>
         </listitem>
         <listitem>
          <para>
           <option>ossp</> to use the <ulink
           url="http://www.ossp.org/pkg/lib/uuid/">OSSP UUID library</ulink>
          </para>
         </listitem>
        </itemizedlist>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-ossp-uuid</option></term>
       <listitem>
        <para>
         Obsolete equivalent of <literal>-&minus;with-uuid=ossp</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-libxml</option></term>
       <listitem>
        <para>
         Build with libxml (enables SQL/XML support).  Libxml version 2.6.23 or
         later is required for this feature.
        </para>

        <para>
         Libxml installs a program <command>xml2-config</command> that
         can be used to detect the required compiler and linker
         options.  PostgreSQL will use it automatically if found.  To
         specify a libxml installation at an unusual location, you can
         either set the environment variable
         <envar>XML2_CONFIG</envar> to point to the
         <command>xml2-config</command> program belonging to the
         installation, or use the options
         <option>-&minus;with-includes</option> and
         <option>-&minus;with-libraries</option>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-libxslt</option></term>
       <listitem>
        <para>
         Use libxslt when building the
         <![%standalone-include[xml2]]>
         <![%standalone-ignore[<xref linkend="xml2">]]>
         module.  <application>xml2</> relies on this library
         to perform XSL transformations of XML.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;disable-float4-byval</option></term>
       <listitem>
        <para>
         Disable passing float4 values <quote>by value</>, causing them
         to be passed <quote>by reference</> instead.  This option costs
         performance, but may be needed for compatibility with old
         user-defined functions that are written in C and use the
         <quote>version 0</> calling convention.  A better long-term
         solution is to update any such functions to use the
         <quote>version 1</> calling convention.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;disable-float8-byval</option></term>
       <listitem>
        <para>
         Disable passing float8 values <quote>by value</>, causing them
         to be passed <quote>by reference</> instead.  This option costs
         performance, but may be needed for compatibility with old
         user-defined functions that are written in C and use the
         <quote>version 0</> calling convention.  A better long-term
         solution is to update any such functions to use the
         <quote>version 1</> calling convention.
         Note that this option affects not only float8, but also int8 and some
         related types such as timestamp.
         On 32-bit platforms, <option>-&minus;disable-float8-byval</> is the default
         and it is not allowed to select <option>-&minus;enable-float8-byval</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
        <para>
         Set the <firstterm>segment size</>, in gigabytes.  Large tables are
         divided into multiple operating-system files, each of size equal
         to the segment size.  This avoids problems with file size limits
         that exist on many platforms.  The default segment size, 1 gigabyte,
         is safe on all supported platforms.  If your operating system has
         <quote>largefile</> support (which most do, nowadays), you can use
         a larger segment size.  This can be helpful to reduce the number of
         file descriptors consumed when working with very large tables.
         But be careful not to select a value larger than is supported
         by your platform and the file systems you intend to use.  Other
         tools you might wish to use, such as <application>tar</>, could
         also set limits on the usable file size.
         It is recommended, though not absolutely required, that this value
         be a power of 2.
         Note that changing this value requires an initdb.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
         Set the <firstterm>block size</>, in kilobytes.  This is the unit
         of storage and I/O within tables.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 32 (kilobytes).
         Note that changing this value requires an initdb.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-wal-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
        <para>
         Set the <firstterm>WAL segment size</>, in megabytes.  This is
         the size of each individual file in the WAL log.  It may be useful
         to adjust this size to control the granularity of WAL log shipping.
         The default size is 16 megabytes.
         The value must be a power of 2 between 1 and 1024 (megabytes).
         Note that changing this value requires an initdb.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-wal-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
         Set the <firstterm>WAL block size</>, in kilobytes.  This is the unit
         of storage and I/O within the WAL log.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 64 (kilobytes).
         Note that changing this value requires an initdb.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;disable-spinlocks</option></term>
       <listitem>
        <para>
         Allow the build to succeed even if <productname>PostgreSQL</>
         has no CPU spinlock support for the platform.  The lack of
         spinlock support will result in poor performance; therefore,
         this option should only be used if the build aborts and
         informs you that the platform lacks spinlock support. If this
         option is required to build <productname>PostgreSQL</> on
         your platform, please report the problem to the
         <productname>PostgreSQL</> developers.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;disable-strong-random</option></term>
       <listitem>
        <para>
         Allow the build to succeed even if <productname>PostgreSQL</>
         has no support for strong random numbers on the platform.
         A source of random numbers is needed for some authentication
         protocols, as well as some routines in the
         <![%standalone-include[pgcrypto]]>
         <![%standalone-ignore[<xref linkend="pgcrypto">]]>
         module. <option>-&minus;disable-strong-random</option> disables functionality that
         requires cryptographically strong random numbers, and substitutes
         a weak pseudo-random-number-generator for the generation of
         authentication salt values and query cancel keys. It may make
         authentication less secure.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;disable-thread-safety</option></term>
       <listitem>
        <para>
         Disable the thread-safety of client libraries.  This prevents
         concurrent threads in <application>libpq</application> and
         <application>ECPG</application> programs from safely controlling
         their private connection handles.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;with-system-tzdata=<replaceable>DIRECTORY</replaceable></option>
       <indexterm>
        <primary>time zone data</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         <productname>PostgreSQL</> includes its own time zone database,
         which it requires for date and time operations.  This time zone
         database is in fact compatible with the IANA time zone
         database provided by many operating systems such as FreeBSD,
         Linux, and Solaris, so it would be redundant to install it again.
         When this option is used, the system-supplied time zone database
         in <replaceable>DIRECTORY</replaceable> is used instead of the one
         included in the PostgreSQL source distribution.
         <replaceable>DIRECTORY</replaceable> must be specified as an
         absolute path.  <filename>/usr/share/zoneinfo</filename> is a
         likely directory on some operating systems.  Note that the
         installation routine will not detect mismatching or erroneous time
         zone data.  If you use this option, you are advised to run the
         regression tests to verify that the time zone data you have
         pointed to works correctly with <productname>PostgreSQL</>.
        </para>

        <indexterm><primary>cross compilation</primary></indexterm>

        <para>
         This option is mainly aimed at binary package distributors
         who know their target operating system well.  The main
         advantage of using this option is that the PostgreSQL package
         won't need to be upgraded whenever any of the many local
         daylight-saving time rules change.  Another advantage is that
         PostgreSQL can be cross-compiled more straightforwardly if the
         time zone database files do not need to be built during the
         installation.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;without-zlib</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>zlib</primary>
         </indexterm>
         Prevents use of the <application>Zlib</> library.  This disables
         support for compressed archives in <application>pg_dump</application>
         and <application>pg_restore</application>.
         This option is only intended for those rare systems where this
         library is not available.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;enable-debug</option></term>
       <listitem>
        <para>
         Compiles all programs and libraries with debugging symbols.
         This means that you can run the programs in a debugger
         to analyze problems. This enlarges the size of the installed
         executables considerably, and on non-GCC compilers it usually
         also disables compiler optimization, causing slowdowns. However,
         having the symbols available is extremely helpful for dealing
         with any problems that might arise.  Currently, this option is
         recommended for production installations only if you use GCC.
         But you should always have it on if you are doing development work
         or running a beta version.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;enable-coverage</option></term>
       <listitem>
        <para>
         If using GCC, all programs and libraries are compiled with
         code coverage testing instrumentation.  When run, they
         generate files in the build directory with code coverage
         metrics.
         <![%standalone-ignore[See <xref linkend="regress-coverage">
         for more information.]]> This option is for use only with GCC
         and when doing development work.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;enable-profiling</option></term>
       <listitem>
        <para>
         If using GCC, all programs and libraries are compiled so they
         can be profiled.  On backend exit, a subdirectory will be created
         that contains the <filename>gmon.out</> file for use in profiling.
         This option is for use only with GCC and when doing development work.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;enable-cassert</option></term>
       <listitem>
        <para>
         Enables <firstterm>assertion</> checks in the server, which test for
         many <quote>cannot happen</> conditions.  This is invaluable for
         code development purposes, but the tests can slow down the
         server significantly.
         Also, having the tests turned on won't necessarily enhance the
         stability of your server!  The assertion checks are not categorized
         for severity, and so what might be a relatively harmless bug will
         still lead to server restarts if it triggers an assertion
         failure.  This option is not recommended for production use, but
         you should have it on for development work or when running a beta
         version.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;enable-depend</option></term>
       <listitem>
        <para>
         Enables automatic dependency tracking.  With this option, the
         makefiles are set up so that all affected object files will
         be rebuilt when any header file is changed.  This is useful
         if you are doing development work, but is just wasted overhead
         if you intend only to compile once and install.  At present,
         this option only works with GCC.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;enable-dtrace</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>DTrace</primary>
         </indexterm>
         Compiles <productname>PostgreSQL</productname> with support for the
         dynamic tracing tool DTrace.
         <![%standalone-ignore[See <xref linkend="dynamic-trace">
         for more information.]]>
        </para>

        <para>
         To point to the <command>dtrace</command> program, the
         environment variable <envar>DTRACE</envar> can be set.  This
         will often be necessary because <command>dtrace</command> is
         typically installed under <filename>/usr/sbin</filename>,
         which might not be in the path.
        </para>

        <para>
         Extra command-line options for the <command>dtrace</command> program
         can be specified in the environment variable
         <envar>DTRACEFLAGS</envar>.  On Solaris,
         to include DTrace support in a 64-bit binary, you must specify
         <literal>DTRACEFLAGS="-64"</> to configure.  For example,
         using the GCC compiler:
<screen>
./configure CC='gcc -m64' -&minus;enable-dtrace DTRACEFLAGS='-64' ...
</screen>
         Using Sun's compiler:
<screen>
./configure CC='/opt/SUNWspro/bin/cc -xtarget=native64' -&minus;enable-dtrace DTRACEFLAGS='-64' ...
</screen>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>-&minus;enable-tap-tests</option></term>
       <listitem>
        <para>
         Enable tests using the Perl TAP tools.  This requires a Perl
         installation and the Perl module <literal>IPC::Run</literal>.
         <![%standalone-ignore;[See <xref linkend="regress-tap"> for more information.]]>
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
____________________________________________________________________________-->
    <para>
     <variablelist>
      <varlistentry>
       <term><option>--with-extra-version=<replaceable>STRING</replaceable></option></term>
       <listitem>
        <para>
         把<replaceable>STRING</replaceable>追加到 PostgreSQL 版本号。例如，你可以使用它来标记从未发布的 Git 快照或者包含定制补丁（带有一个如<command>git describe</command>标识符之类的额外版本号或者一个分发包发行号）创建的二进制文件。
        </para>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term><option>--with-includes=<replaceable>DIRECTORIES</replaceable></option></term>
       <listitem>
        <para>
         <replaceable>DIRECTORIES</replaceable>是一个冒号分隔的目录列表，这些目录将被加入编译器的头文件搜索列表中。 如果你有一些可选的包（例如 GNU <application>Readline</application>）安装在非标准位置， 你就必须使用这个选项，以及可能还有相应的 <option>--with-libraries</option>选项。
        </para>
        <para>
         例子：<literal>--with-includes=/opt/gnu/include:/usr/sup/include</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libraries=<replaceable>DIRECTORIES</replaceable></option></term>
       <listitem>
        <para>
         <replaceable>DIRECTORIES</replaceable>是一个冒号分隔的目录列表，这些目录是用于查找库文件的。 如果你有一些包安装在非标准位置，你可能就需要使用这个选项（以及对应的<option>--with-includes</option>选项）。
        </para>
        <para>
         例子：<literal>--with-libraries=/opt/gnu/lib:/usr/sup/lib</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-nls<optional>=<replaceable>LANGUAGES</replaceable></optional></option></term>
       <listitem>
        <para>
         打开本地语言支持（<acronym>NLS</acronym>），也就是以非英文显示程序消息的能力。<replaceable>LANGUAGES</replaceable>是一个空格分隔的语言代码列表， 表示你想支持的语言。例如<literal>--enable-nls='de fr'</literal> （你提供的列表和实际支持的列表之间的交集将会自动计算出来）。如果你没有声明一个列表，那么就会安装所有可用的翻译。
        </para>

        <para>
         要使用这个选项，你需要一个<application>Gettext</application> API 的实现。见上文。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-pgport=<replaceable>NUMBER</replaceable></option></term>
       <listitem>
        <para>
         把<replaceable>NUMBER</replaceable>设置为服务器和客户端的默认端口。默认是 5432。 这个端口可以在以后修改，不过如果你在这里声明，那么服务器和客户端将有相同的编译好了的默认值。这样会非常方便些。 通常选取一个非默认值的理由是你企图在同一台机器上运行多个<productname>PostgreSQL</productname>服务器。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-perl</option></term>
       <listitem>
        <para>
         制作<application>PL/Perl</application>服务器端编程语言。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-python</option></term>
       <listitem>
        <para>
         制作<application>PL/Python</application>服务器端编程语言。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tcl</option></term>
       <listitem>
        <para>
         制作<application>PL/Tcl</application>服务器编程语言。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tclconfig=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Tcl 安装文件<filename>tclConfig.sh</filename>，其中里面包含编译与 Tcl 接口的模块的配置信息。该文件通常可以自动地在一个众所周知的位置找到，但是如果你需要一个不同版本的 Tcl，你也可以指定可以找到它的目录。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-gssapi</option></term>
       <listitem>
        <para>
         编译 GSSAPI 认证支持。在很多系统上，GSSAPI（通常是 Kerberos 安装的一部分）系统不会被安装在默认搜索位置（例如<filename>/usr/include</filename>、<filename>/usr/lib</filename>），因此你必须使用选项<option>--with-includes</option>和<option>--with-libraries</option>来配合该选项。<filename>configure</filename>将会检查所需的头文件和库以确保你的 GSSAPI 安装足以让配置继续下去。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-krb-srvnam=<replaceable>NAME</replaceable></option></term>
       <listitem>
        <para>
         默认的 Kerberos 服务主的名称（也被 GSSAPI 使用）。默认是<literal>postgres</literal>。通常没有理由改变这个值，除非你是一个 Windows 环境，这种情况下该名称必须被设置为大写形式<literal>POSTGRES</literal>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-icu</option></term>
       <listitem>
        <para>
         支持<productname>ICU</productname><indexterm><primary>ICU</primary></indexterm>库。
		 这需要安装<productname>ICU4C</productname>软件包。
		 目前要求的最低<productname>ICU4C</productname>版本是4.2。
        </para>

        <para>
         默认的，<productname>pkg-config</productname><indexterm><primary>pkg-config</primary></indexterm>
		 将被用来查找所需的编译选项。支持<productname>ICU4C</productname>版本4.6及更高版本。
		 对于较老版本，或者如果<productname>pkg-config</productname>不可用，
		 可以将变量<envar>ICU_CFLAGS</envar>和<envar>ICU_LIBS</envar>
		 指定为<filename>configure</filename>，就像下面的示例中那样：		
<programlisting>
./configure ... --with-icu ICU_CFLAGS='-I/some/where/include' ICU_LIBS='-L/some/where/lib -licui18n -licuuc -licudata'
</programlisting>
         (如果<productname>ICU4C</productname>在编译器的默认搜索路径中，
		 那么你仍然需要指定一个非空的字符串，以避免使用<productname>pkg-config</productname>，
		 例如<literal>ICU_CFLAGS=' '</literal>。)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-openssl</option>
       <indexterm>
        <primary>OpenSSL</primary>
        <seealso>SSL</seealso>
       </indexterm>

       </term>
       <listitem>
        <para>
         编译<acronym>SSL</acronym>（加密）连接支持。这个选项需要安装<productname>OpenSSL</productname>包。<filename>configure</filename>将会检查所需的头文件和库以确保你的 <productname>OpenSSL</productname>安装足以让配置继续下去。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-pam</option></term>
       <listitem>
        <para>
         编译<acronym>PAM</acronym><indexterm><primary>PAM</primary></indexterm>（可插拔认证模块）支持。
        </para>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term><option>--with-bsd-auth</option></term>
       <listitem>
        <para>
         编译 BSD 认证支持（BSD 认证框架目前只在 OpenBSD
         上可用）。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ldap</option></term>
       <listitem>
        <para>
         为认证和连接参数查找编译<acronym>LDAP</acronym><indexterm><primary>LDAP</primary></indexterm>支持
         （详见<xref linkend="libpq-ldap"/>和<xref linkend="auth-ldap"/>）。在 Unix 上，这需要安装<productname>OpenLDAP</productname>包。在 Windows 上将使用默认的<productname>WinLDAP</productname>库。<filename>configure</filename>将会检查所需的头文件和库以确保你的 <productname>OpenLDAP</productname>安装足以让配置继续下去。
        </para>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term><option>--with-systemd</option></term>
       <listitem>
        <para>
         编译对<application>systemd</application><indexterm><primary>systemd</primary></indexterm>
         服务通知的支持。如果服务器是在<application>systemd</application>
         机制下被启动，这可以提高集成度，否则不会有影响
         否则，<phrase condition="standalone-ignore">; 参考 <xref linkend="server-start"/> 查看更多信息
         </phrase>。要使用这个选项，必须安装<application>libsystemd</application>
         以及相关的头文件。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--without-readline</option></term>
       <listitem>
        <para>
         避免使用<application>Readline</application>库（以及<application>libedit</application>）。这个选项禁用了<application>psql</application>中的命令行编辑和历史， 因此我们不建议这么做。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libedit-preferred</option></term>
       <listitem>
        <para>
         更倾向于使用BSD许可证的<application>libedit</application>库而不是GPL许可证的<application>Readline</application>。这个选项只有在你同时安装了两个库时才有意义，在那种情况下默认会使用<application>Readline</application>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-bonjour</option></term>
       <listitem>
        <para>
         编译 Bonjour 支持。这要求你的操作系统支持 Bonjour。在 macOS 上建议使用。
        </para>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term><option>--with-uuid=<replaceable>LIBRARY</replaceable></option></term>
       <listitem>
        <para>
         使用指定的 UUID 库编译<xref linkend="uuid-ossp"/>模块（提供生成 UUID 的函数）。
         <indexterm><primary>UUID</primary></indexterm>
         <replaceable>LIBRARY</replaceable>必须是下列之一：
        </para>
        <itemizedlist>
         <listitem>
          <para>
           <option>bsd</option>，用来使用 FreeBSD、NetBSD 和一些其他 BSD 衍生系统
           中的 UUID 函数
          </para>
         </listitem>
         <listitem>
          <para>
           <option>e2fs</option>，用来使用<literal>e2fsprogs</literal>项目创建的 UUID 库，
           这个库出现在大部分的 Linux 系统和 macOS 中，并且也能找到用于其他平台的
           版本
          </para>
         </listitem>
         <listitem>
          <para>
           <option>ossp</option>，用来使用<ulink
           url="http://www.ossp.org/pkg/lib/uuid/">OSSP UUID library</ulink>
          </para>
         </listitem>
        </itemizedlist>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ossp-uuid</option></term>
       <listitem>
        <para>
         <literal>--with-uuid=ossp</literal>的已废弃的等效选项。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxml</option></term>
       <listitem>
        <para>
         编译 libxml （启用 SQL/XML 支持）。这个特性需要 Libxml 版本 2.6.23 及以上。
        </para>

        <para>
         Libxml 会安装一个程序<command>xml2-config</command>，它可以被用来检测所需的编译器和链接器选项。如果能找到，PostgreSQL 将自动使用它。要制定一个非常用的 libxml 安装位置，你可以设置环境变量<envar>XML2_CONFIG</envar>指向<command>xml2-config</command>程序所属的安装，或者使用选项<option>--with-includes</option>和<option>--with-libraries</option>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxslt</option></term>
       <listitem>
        <para>
         编译<xref linkend="xml2"/>模块时使用 libxslt。<application>xml2</application>依赖这个库来执行XML的XSL转换。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-float4-byval</option></term>
       <listitem>
        <para>
         禁用 float4 值的<quote>传值</quote>，导致它们只能被<quote>传引用</quote>。这个选项会损失性能，但是在需要兼容使用 C 编写并使用<quote>version 0</quote>调用规范的老用户定义函数时可能需要这个选项。更好的长久解决方案是将任何这样的函数更新成使用<quote>version 1</quote>调用规范。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-float8-byval</option></term>
       <listitem>
        <para>
         禁用 float8 值的<quote>传值</quote>，导致它们只能被<quote>传引用</quote>。这个选项会损失性能，但是在需要兼容使用 C 编写并使用<quote>version 0</quote>调用规范的老用户定义函数时可能需要这个选项。更好的长久解决方案是将任何这样的函数更新成使用<quote>version 1</quote>调用规范。注意这个选项并非只影响 float8，它还影响 int8 和某些相关类型如时间戳。在32位平台上，<option>--disable-float8-byval</option>是默认选项并且不允许选择<option>--enable-float8-byval</option>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
        <para>
         设置<firstterm>段尺寸</firstterm>，以 G 字节计。大型的表会被分解成多个操作系统文件，每一个的尺寸等于段尺寸。这避免了与操作系统对文件大小限制相关的问题。默认的段尺寸（1G字节）在所有支持的平台上都是安全的。如果你的操作系统有<quote>largefile</quote>支持（如今大部分都支持），你可以使用一个更大的段尺寸。这可以有助于在使用非常大的表时消耗的文件描述符数目。但是要当心不能选择一个超过你将使用的平台和文件系统所支持尺寸的值。你可能希望使用的其他工具（如<application>tar</application>）也可以对可用文件尺寸设限。如非绝对必要，我们推荐这个值应为2的幂。注意改变这个值需要一次 initdb。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
         设置<firstterm>块尺寸</firstterm>，以 K 字节计。这是表内存储和I/O的单位。默认值（8K字节）适合于大多数情况，但是在特殊情况下可能其他值更有用。这个值必须是2的幂并且在 1 和 32 （K字节）之间。注意修改这个值需要一次 initdb。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-wal-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
        <para>
         设置<firstterm>WAL 段尺寸</firstterm>，以 M 字节计。这是 WAL 日志中每一个独立文件的尺寸。调整这个值来控制传送 WAL 日志的粒度非常有用。默认尺寸为 16 M字节。这个值必须是2的幂并且在 1 到 1024 （M字节）之间。注意修改这个值需要一次 initdb。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-wal-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
         设置<firstterm>WAL 块尺寸</firstterm>，以 K 字节计。这是 WAL 日志存储和I/O的单位。默认值（8K 字节）适合于大多数情况，但是在特殊情况下其他值更好有用。这个值必须是2的幂并且在 1 到 64（K字节）之间。注意修改这个值需要一次 initdb。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-spinlocks</option></term>
       <listitem>
        <para>
         即便<productname>PostgreSQL</productname>对于该平台没有 CPU 自旋锁支持，也允许编译成功。自旋锁支持的缺乏会导致较差的性能，因此这个选项只有当编译终端或者通知你该平台缺乏自旋锁支持时才应被使用。如果在你的平台上要求使用该选项来编译<productname>PostgreSQL</productname>，请将此问题报告给<productname>PostgreSQL</productname>的开发者。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-strong-random</option></term>
       <listitem>
        <para>
         即使<productname>PostgreSQL</productname>不支持平台上的强大随机数，也允许构建成功。
		 一些认证协议以及<xref linkend="pgcrypto"/>
		 模块中的一些例程需要随机数的来源。<option>--disable-strong-random</option>
		 禁用需要密码强的随机数的功能，并用弱伪随机数生成器代替验证盐值生成和查询取消密钥。
		 它可能会使认证安全性降低。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-thread-safety</option></term>
       <listitem>
        <para>
         禁用客户端库的线程安全性。这会阻止<application>libpq</application>和<application>ECPG</application>程序中的并发线程安全地控制它们私有的连接句柄。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-system-tzdata=<replaceable>DIRECTORY</replaceable></option>
       <indexterm>
        <primary>time zone data</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         <productname>PostgreSQL</productname>包含它自己的时区数据库，它被用于日期和时间操作。这个时区数据库实际上是和 IANA 时区数据库相兼容的，后者在很多操作系统如 FreeBSD、Linux和Solaris上都有提供，因此再次安装它可能是冗余的。当这个选项被使用时，将不会使用<replaceable>DIRECTORY</replaceable>中系统提供的时区数据库，而是使用包括在 PostgreSQL 源码发布中的时区数据库。<replaceable>DIRECTORY</replaceable>必须被指定为一个绝对路径。<filename>/usr/share/zoneinfo</filename>在某些操作系统上是一个很有可能的路径。注意安装例程将不会检测不匹配或错误的时区数据。如果你使用这个选项，建议你运行回归测试来验证你指定的时区数据能正常地工作在<productname>PostgreSQL</productname>中。
        </para>

        <indexterm><primary>交叉编译</primary></indexterm>

        <para>
         这个选项主要针对那些很了解他们的目标操作系统的二进制包发布者。使用这个选项主要优点是不管何时当众多本地夏令时规则之一改变时， PostgreSQL 包不需要被升级。另一个优点是如果时区数据库文件在安装时不需要被编译， PostgreSQL 可以被更直接地交叉编译。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--without-zlib</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>zlib</primary>
         </indexterm>
         避免使用<application>Zlib</application>库。这样就禁用了<application>pg_dump</application>和 <application>pg_restore</application>中对压缩归档的支持。这个选项只适用于那些没有这个库的少见的系统。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-debug</option></term>
       <listitem>
        <para>
         把所有程序和库以带有调试符号的方式编译。这意味着你可以通过一个调试器运行程序来分析问题。 这样做显著增大了最后安装的可执行文件的大小，并且在非 GCC 的编译器上，这么做通常还要关闭编译器优化， 这些都导致速度的下降。但是，如果有这些符号的话，就可以非常有效地帮助定位可能发生问题的位置。目前，我们只是在你使用 GCC 的情况下才建议在生产安装中使用这个选项。但是如果你正在进行开发工作，或者正在使用 beta 版本，那么你就应该总是打开它。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-coverage</option></term>
       <listitem>
        <para>
         如果在使用 GCC，所有程序和库都会用代码覆盖率测试工具编译。在运行时，它们会在编译目录中生成代码覆盖率度量的文件。详见<xref linkend="regress-coverage"/>。这个选项只用于 GCC 以及做开发工作时。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-profiling</option></term>
       <listitem>
        <para>
         如果在使用 GCC，所有程序和库都被编译成可以进行性能分析。在后端退出时，将会创建一个子目录，其中包含用于性能分析的<filename>gmon.out</filename>文件。这个选项只用于 GCC 和做开发工作时。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-cassert</option></term>
       <listitem>
        <para>
         打开在服务器中的<firstterm>assertion</firstterm>检查， 它会检查许多<quote>不可能发生</quote>的条件。它对于代码开发的用途而言是无价之宝， 不过这些测试可能会显著地降低服务器的速度。并且，打开这个测试不会提高你的系统的稳定性！ 这些断言检查并不是按照严重性分类的，因此一些相对无害的小故障也可能导致服务器重启 &mdash; 只要它触发了一次断言失败。 目前，我们不推荐在生产环境中使用这个选项，但是如果你在做开发或者在使用 beta 版本的时候应该打开它。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-depend</option></term>
       <listitem>
        <para>
         打开自动倚赖性跟踪。如果打开这个选项，那么制作文件（makefile）将设置为在任何头文件被修改的时候都将重新编译所有受影响的目标文件。 如果你在做开发的工作，那么这个选项很有用，但是如果你只是想编译一次并且安装，那么这就是浪费时间。 目前，这个选项只对 GCC 有用。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-dtrace</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>DTrace</primary>
         </indexterm>
         为<productname>PostgreSQL</productname>编译对动态跟踪工具 DTrace 的支持。
         详见<xref linkend="dynamic-trace"/>。
        </para>

        <para>
         要指向<command>dtrace</command>程序，必须设置环境变量<envar>DTRACE</envar>。这通常是必需的，因为<command>dtrace</command>通常被安装在<filename>/usr/sbin</filename>中，该路径可能不在搜索路径中。
        </para>

        <para>
         <command>dtrace</command>程序的附加命令行选项可以在环境变量<envar>DTRACEFLAGS</envar>中指定。在 Solaris 上，要在一个64位二进制中包括 DTrace，你必须为 configure 指定<literal>DTRACEFLAGS="-64"</literal>。例如，使用 GCC 编译器：
<screen>
./configure CC='gcc -m64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
         使用 Sun 的编译器：
<screen>
./configure CC='/opt/SUNWspro/bin/cc -xtarget=native64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
        </para>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term><option>--enable-tap-tests</option></term>
       <listitem>
        <para>
         启用 Perl TAP 工具进行测试。这要求安装了 Perl 以及 Perl 模块<literal>IPC::Run</literal>。
         <phrase condition="standalone-ignore">详见 <xref linkend="regress-tap"/>。</phrase>
        </para>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

<!--==========================orignal english content==========================
    <para>
     If you prefer a C compiler different from the one
     <filename>configure</filename> picks, you can set the
     environment variable <envar>CC</> to the program of your choice.
     By default, <filename>configure</filename> will pick
     <filename>gcc</filename> if available, else the platform's
     default (usually <filename>cc</>).  Similarly, you can override the
     default compiler flags if needed with the <envar>CFLAGS</envar> variable.
    </para>
____________________________________________________________________________-->
    <para>
     如果你喜欢用那些和<filename>configure</filename>选取的不同的 C 编译器，那么你可以你的环境变量<envar>CC</envar>设置为你选择的程序。默认时，只要<filename>gcc</filename>可以使用，<filename>configure</filename>将选择它， 或者是该平台的默认（通常是<filename>cc</filename>）。类似地，你可以用<envar>CFLAGS</envar>变量覆盖默认编译器标志。
    </para>

<!--==========================orignal english content==========================
    <para>
     You can specify environment variables on the
     <filename>configure</filename> command line, for example:
<screen>
<userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe'</>
</screen>
    </para>
____________________________________________________________________________-->
    <para>
     你可以在<filename>configure</filename>命令行上指定环境变量， 例如：
<screen>
<userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe'</userinput>
</screen>
    </para>

<!--==========================orignal english content==========================
    <para>
     Here is a list of the significant variables that can be set in
     this manner:

     <variablelist>
      <varlistentry>
       <term><envar>BISON</envar></term>
       <listitem>
        <para>
         Bison program
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CC</envar></term>
       <listitem>
        <para>
         C compiler
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CFLAGS</envar></term>
       <listitem>
        <para>
         options to pass to the C compiler
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPP</envar></term>
       <listitem>
        <para>
         C preprocessor
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPPFLAGS</envar></term>
       <listitem>
        <para>
         options to pass to the C preprocessor
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACE</envar></term>
       <listitem>
        <para>
         location of the <command>dtrace</command> program
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACEFLAGS</envar></term>
       <listitem>
        <para>
         options to pass to the <command>dtrace</command> program
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>FLEX</envar></term>
       <listitem>
        <para>
         Flex program
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS</envar></term>
       <listitem>
        <para>
         options to use when linking either executables or shared libraries
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_EX</envar></term>
       <listitem>
        <para>
         additional options for linking executables only
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_SL</envar></term>
       <listitem>
        <para>
         additional options for linking shared libraries only
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>MSGFMT</envar></term>
       <listitem>
        <para>
         <command>msgfmt</command> program for native language support
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PERL</envar></term>
       <listitem>
        <para>
         Full path name of the Perl interpreter.  This will be used to
         determine the dependencies for building PL/Perl.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PYTHON</envar></term>
       <listitem>
        <para>
         Full path name of the Python interpreter.  This will be used to
         determine the dependencies for building PL/Python.  Also,
         whether Python 2 or 3 is specified here (or otherwise
         implicitly chosen) determines which variant of the PL/Python
         language becomes available.  See
         <![%standalone-include[the <application>PL/Python</>
         documentation]]>
         <![%standalone-ignore[<xref linkend="plpython-python23">]]>
         for more information.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>TCLSH</envar></term>
       <listitem>
        <para>
         Full path name of the Tcl interpreter.  This will be used to
         determine the dependencies for building PL/Tcl, and it will
         be substituted into Tcl scripts.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>XML2_CONFIG</envar></term>
       <listitem>
        <para>
         <command>xml2-config</command> program used to locate the
         libxml installation.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
____________________________________________________________________________-->
    <para>
     下面是可以以这种方式设置的有效变量的列表：

     <variablelist>
      <varlistentry>
       <term><envar>BISON</envar></term>
       <listitem>
        <para>
         Bison程序
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CC</envar></term>
       <listitem>
        <para>
         C编译器
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CFLAGS</envar></term>
       <listitem>
        <para>
         传递给 C 编译器的选项
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPP</envar></term>
       <listitem>
        <para>
         C 预处理器
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPPFLAGS</envar></term>
       <listitem>
        <para>
         传递给 C 预处理器的选项
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACE</envar></term>
       <listitem>
        <para>
         <command>dtrace</command>程序的位置
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACEFLAGS</envar></term>
       <listitem>
        <para>
         传递给<command>dtrace</command>程序的选项
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>FLEX</envar></term>
       <listitem>
        <para>
         Flex程序
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS</envar></term>
       <listitem>
        <para>
         链接可执行程序或共享库时使用的选项
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_EX</envar></term>
       <listitem>
        <para>
         只用于链接可执行程序的附加选项
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_SL</envar></term>
       <listitem>
        <para>
         只用于链接共享库的附加选项
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>MSGFMT</envar></term>
       <listitem>
        <para>
         用于本地语言支持的<command>msgfmt</command>程序
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PERL</envar></term>
       <listitem>
        <para>
         Perl 解释器的全路径名称。这将被用来决定编译 PL/Perl 时的依赖性。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PYTHON</envar></term>
       <listitem>
        <para>
         Python 解释器的全路径名称。这将被用来决定编译 PL/Python 时的依赖性。另外这里指定的是 Python 2 还是 Python 3 （或者是隐式选择）决定了 PL/Python 语言的哪一种变种将成为可用的。
         详见<xref linkend="plpython-python23"/>。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>TCLSH</envar></term>
       <listitem>
        <para>
         Tcl 解释器的全路径名称。这将被用来决定编译 PL/Tcl 时的依赖性，并且它将被替换到 Tcl 脚本中。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>XML2_CONFIG</envar></term>
       <listitem>
        <para>
         用于定位 libxml 安装的<command>xml2-config</command>程序。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
<!--==========================orignal english content==========================
 <para>
     Sometimes it is useful to add compiler flags after-the-fact to the set
     that were chosen by <filename>configure</>.  An important example is
     that <application>gcc</>'s <option>-Werror</> option cannot be included
     in the <envar>CFLAGS</envar> passed to <filename>configure</>, because
     it will break many of <filename>configure</>'s built-in tests.  To add
     such flags, include them in the <envar>COPT</envar> environment variable
     while running <filename>make</>.  The contents of <envar>COPT</envar>
     are added to both the <envar>CFLAGS</envar> and <envar>LDFLAGS</envar>
     options set up by <filename>configure</>.  For example, you could do
<screen>
<userinput>make COPT='-Werror'</>
</screen>
     or
<screen>
<userinput>export COPT='-Werror'</>
<userinput>make</>
</screen>
    </para>
____________________________________________________________________________-->
 <para>
     有时候，将编译器标志事后添加到由<filename>configure</filename>选择的集合中非常有用。
	 一个重要的例子是，<application>gcc</application>的<option>-Werror</option>
	 选项不能包含在传递给<filename>configure</filename>的<envar>CFLAGS</envar>中，
	 因为它会中断许多<filename>configure</filename>的内置测试。要添加这样的标志，
	 在运行<filename>make</filename>时将它们包含在<envar>COPT</envar>环境变量中。
	 将<envar>COPT</envar>的内容添加到由<filename>configure</filename>设置的
	<envar>CFLAGS</envar>和<envar>LDFLAGS</envar>中。例如，你可以这样做
<screen>
<userinput>make COPT='-Werror'</userinput>
</screen>
     或者
<screen>
<userinput>export COPT='-Werror'</userinput>
<userinput>make</userinput>
</screen>
    </para>

    <note>
<!--==========================orignal english content==========================
     <para>
      When developing code inside the server, it is recommended to
      use the configure options <option>-&minus;enable-cassert</> (which
      turns on many run-time error checks) and <option>-&minus;enable-debug</>
      (which improves the usefulness of debugging tools).
     </para>
____________________________________________________________________________-->
     <para>
      在开发服务器内部代码时，我们推荐使用配置选项<option>--enable-cassert</option>（它会打开很多运行时错误检查）和<option>--enable-debug</option>（它会提高调试工具的有用性）。
     </para>

<!--==========================orignal english content==========================
     <para>
      If using GCC, it is best to build with an optimization level of
      at least <option>-O1</>, because using no optimization
      (<option>-O0</>) disables some important compiler warnings (such
      as the use of uninitialized variables).  However, non-zero
      optimization levels can complicate debugging because stepping
      through compiled code will usually not match up one-to-one with
      source code lines.  If you get confused while trying to debug
      optimized code, recompile the specific files of interest with
      <option>-O0</>.  An easy way to do this is by passing an option
      to <application>make</>: <command>make PROFILE=-O0 file.o</>.
     </para>
____________________________________________________________________________-->
     <para>
      如果在使用 GCC，最好使用至少<option>-O1</option>的优化级别来编译，因为不使用优化（<option>-O0</option>）会禁用某些重要的编译器警告（例如使用未经初始化的变量）。但是，非零的优化级别会使调试更复杂，因为在编译好的代码中步进通常将不能和源代码行一一对应。如果你在尝试调试优化过的代码时觉得困惑，将感兴趣的特定文件使用<option>-O0</option>编译。一种简单的方式是传递一个选项给<application>make</application>：<command>make PROFILE=-O0 file.o</command>。
     </para>

<!--==========================orignal english content==========================
     <para>
      The <envar>COPT</> and <envar>PROFILE</> environment variables are
      actually handled identically by the <productname>PostgreSQL</>
      makefiles.  Which to use is a matter of preference, but a common habit
      among developers is to use <envar>PROFILE</> for one-time flag
      adjustments, while <envar>COPT</> might be kept set all the time.
     </para>
____________________________________________________________________________-->
     <para>
      <envar>COPT</envar>和<envar>PROFILE</envar>环境变量同样由<productname>PostgreSQL</productname>
	   makefile实际处理。要使用哪个是一个性能问题，但是开发者的共同习惯是将
	   <envar>PROFILE</envar>用于一次性的标识调整，而始终保持设置<envar>COPT</envar>。
     </para>
	 </note>
   </step>

  <step id="build">
<!--==========================orignal english content==========================
   <title>Build</title>
____________________________________________________________________________-->
   <title>编译</title>

<!--==========================orignal english content==========================
   <para>
    To start the build, type:
<screen>
<userinput>make</userinput>
</screen>
    (Remember to use <acronym>GNU</> <application>make</>.) The build
    will take a few minutes depending on your
    hardware. The last line displayed should be:
<screen>
All of PostgreSQL successfully made. Ready to install.
</screen>
   </para>
____________________________________________________________________________-->
   <para>
    要开始编译，键入：
<screen>
<userinput>make</userinput>
</screen>
    （一定要记得用<acronym>GNU</acronym> <application>make</application>）。依你的硬件而异，编译过程可能需要 5 分钟到半小时。显示的最后一行应该是：
<screen>
All of PostgreSQL successfully made. Ready to install.
</screen>
   </para>

<!--==========================orignal english content==========================
  <para>
   If you want to build everything that can be built, including the
   documentation (HTML and man pages), and the additional modules
   (<filename>contrib</filename>), type instead:
<screen>
<userinput>make world</userinput>
</screen>
   The last line displayed should be:
<screen>
PostgreSQL, contrib, and documentation successfully made. Ready to install.
</screen>
   </para>
____________________________________________________________________________-->
  <para>
   如果你希望编译所有能编译的东西，包括文档（HTML和手册页）以及附加模块（<filename>contrib</filename>），这样键入：
<screen>
<userinput>make world</userinput>
</screen>
   显示的最后一行应该是：
<screen>
PostgreSQL, contrib, and documentation successfully made. Ready to install.
</screen>
   </para>
  </step>

  <step>
<!--==========================orignal english content==========================
   <title>Regression Tests</title>
____________________________________________________________________________-->
   <title>回归测试</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>regression test</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>回归测试</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    If you want to test the newly built server before you install it,
    you can run the regression tests at this point. The regression
    tests are a test suite to verify that <productname>PostgreSQL</>
    runs on your machine in the way the developers expected it
    to. Type:
<screen>
<userinput>make check</userinput>
</screen>
    (This won't work as root; do it as an unprivileged user.)
    <![%standalone-include[The file
    <filename>src/test/regress/README</> and the
    documentation contain]]>
    <![%standalone-ignore[<xref linkend="regress"> contains]]>
    detailed information about interpreting the test results. You can
    repeat this test at any later time by issuing the same command.
   </para>
____________________________________________________________________________-->
   <para>
    如果你想在安装文件前测试新编译的服务器， 那么你可以在这个时候运行回归测试。 回归测试是一个用于验证<productname>PostgreSQL</productname>在你的系统上是否按照开发人员设想的那样运行的测试套件。键入：
<screen>
<userinput>make check</userinput>
</screen>
    （这条命令不能以 root 运行；请在非特权用户下运行该命令）。
    (This won't work as root; do it as an unprivileged user.)
    详细参考<xref linkend="regress"/>中关于如何解释测试结果的信息。你可以在以后的任何时间通过执行这条命令来运行这个测试。
   </para>
  </step>

  <step id="install">
<!--==========================orignal english content==========================
   <title>Installing the Files</title>
____________________________________________________________________________-->
   <title>安装文件</title>

   <note>
<!--==========================orignal english content==========================
    <para>
     If you are upgrading an existing system be sure to read
     <![%standalone-include[the documentation,]]>
     <![%standalone-ignore[<xref linkend="upgrading">]]>
     which has instructions about upgrading a
     cluster.
    </para>
____________________________________________________________________________-->
    <para>
     如果你正在升级一套现有的系统，请阅读<xref linkend="upgrading"/>。
     其中有关于升级一个集簇的指导。
    </para>
   </note>

<!--==========================orignal english content==========================
   <para>
    To install <productname>PostgreSQL</> enter:
<screen>
<userinput>make install</userinput>
</screen>
    This will install files into the directories that were specified
    in <xref linkend="configure">. Make sure that you have appropriate
    permissions to write into that area. Normally you need to do this
    step as root. Alternatively, you can create the target
    directories in advance and arrange for appropriate permissions to
    be granted.
   </para>
____________________________________________________________________________-->
   <para>
    要安装<productname>PostgreSQL</productname>，输入：
<screen>
<userinput>make install</userinput>
</screen>
    这条命令将把文件安装到在<xref linkend="configure"/>中指定的目录。确保你有足够的权限向该区域写入。通常你需要用 root 权限做这一步。或者你也可以事先创建目标目录并且分派合适的权限。
   </para>

<!--==========================orignal english content==========================
   <para>
    To install the documentation (HTML and man pages), enter:
<screen>
<userinput>make install-docs</userinput>
</screen>
   </para>
____________________________________________________________________________-->
   <para>
    要安装文档（HTML和手册页），输入：
<screen>
<userinput>make install-docs</userinput>
</screen>
   </para>

<!--==========================orignal english content==========================
   <para>
    If you built the world above, type instead:
<screen>
<userinput>make install-world</userinput>
</screen>
    This also installs the documentation.
   </para>
____________________________________________________________________________-->
   <para>
    如果你按照上面的方法编译了所有东西，输入：
<screen>
<userinput>make install-world</userinput>
</screen>
    这也会安装文档。
   </para>

<!--==========================orignal english content==========================
   <para>
    You can use <literal>make install-strip</literal> instead of
    <literal>make install</literal> to strip the executable files and
    libraries as they are installed.  This will save some space.  If
    you built with debugging support, stripping will effectively
    remove the debugging support, so it should only be done if
    debugging is no longer needed.  <literal>install-strip</literal>
    tries to do a reasonable job saving space, but it does not have
    perfect knowledge of how to strip every unneeded byte from an
    executable file, so if you want to save all the disk space you
    possibly can, you will have to do manual work.
   </para>
____________________________________________________________________________-->
   <para>
    你可以使用<literal>make install-strip</literal>代替<literal>make install</literal>， 在安装可执行文件和库文件时把它们剥离。 这样将节约一些空间。如果你编译时带着调试支持，那么抽取将有效地删除调试支持， 因此我们应该只是在不再需要调试的时候做这些事情。 <literal>install-strip</literal>力图做一些合理的工作来节约空间， 但是它并不了解如何从可执行文件中抽取每个不需要的字节， 因此，如果你希望节约所有可能节约的磁盘空间，那么你可能需要手工做些处理。
   </para>

<!--==========================orignal english content==========================
   <para>
    The standard installation provides all the header files needed for client
    application development as well as for server-side program
    development, such as custom functions or data types written in C.
    (Prior to <productname>PostgreSQL</> 8.0, a separate <literal>make
    install-all-headers</> command was needed for the latter, but this
    step has been folded into the standard install.)
   </para>
____________________________________________________________________________-->
   <para>
    标准的安装只提供客户端应用开发和服务器端程序开发所需的所有头文件，例如用 C 写的定制函数或者数据类型（在<productname>PostgreSQL</productname> 8.0 之前，后者需要独立地执行一次<literal>make  install-all-headers</literal>命令，不过现在这个步骤已经融合到标准的安装步骤中）。
   </para>

   <formalpara>
<!--==========================orignal english content==========================
    <title>Client-only installation:</title>
____________________________________________________________________________-->
    <title>只安装客户端：</title>
<!--==========================orignal english content==========================
    <para>
     If you want to install only the client applications and
     interface libraries, then you can use these commands:
<screen>
<userinput>make -C src/bin install</>
<userinput>make -C src/include install</>
<userinput>make -C src/interfaces install</>
<userinput>make -C doc install</>
</screen>
    <filename>src/bin</> has a few binaries for server-only use,
    but they are small.
    </para>
____________________________________________________________________________-->
    <para>
     如果你只想装客户应用和接口，那么你可以用下面的命令：
<screen>
<userinput>make -C src/bin install</userinput>
<userinput>make -C src/include install</userinput>
<userinput>make -C src/interfaces install</userinput>
<userinput>make -C doc install</userinput>
</screen>
    <filename>src/bin</filename>中有一些服务器专用的二进制文件，但是它们很小。
    </para>
   </formalpara>
  </step>
  </procedure>

  <formalpara>
<!--==========================orignal english content==========================
   <title>Uninstallation:</title>
____________________________________________________________________________-->
   <title>卸载：</title>
<!--==========================orignal english content==========================
   <para>
    To undo the installation use the command <command>make
    uninstall</>. However, this will not remove any created directories.
   </para>
____________________________________________________________________________-->
   <para>
    要撤销安装可以使用命令<command>make uninstall</command>。不过这样不会删除任何创建出来的目录。
   </para>
  </formalpara>

  <formalpara>
<!--==========================orignal english content==========================
   <title>Cleaning:</title>
____________________________________________________________________________-->
   <title>清理：</title>

<!--==========================orignal english content==========================
   <para>
    After the installation you can free disk space by removing the built
    files from the source tree with the command <command>make
    clean</>. This will preserve the files made by the <command>configure</command>
    program, so that you can rebuild everything with <command>make</>
    later on. To reset the source tree to the state in which it was
    distributed, use <command>make distclean</>. If you are going to
    build for several platforms within the same source tree you must do
    this and re-configure for each platform.  (Alternatively, use
    a separate build tree for each platform, so that the source tree
    remains unmodified.)
   </para>
____________________________________________________________________________-->
   <para>
    在安装完成以后，你可以通过在源码树里面用命令<command>make clean</command>删除编译文件。 这样会保留<command>configure</command>程序生成的文件，这样以后你就可以用<command>make</command>命令重新编译所有东西。 要把源码树恢复为发布时的状态，可用<command>make distclean</command>命令。 如果你想从同一棵源码树上为多个不同平台制作，你就一定要运行这条命令并且为每个编译重新配置（另外一种方法是在每种平台上使用一套独立的编译树，这样源代码树就可以保留不被更改）。
   </para>
  </formalpara>

<!--==========================orignal english content==========================
  <para>
   If you perform a build and then discover that your <command>configure</>
   options were wrong, or if you change anything that <command>configure</>
   investigates (for example, software upgrades), then it's a good
   idea to do <command>make distclean</> before reconfiguring and
   rebuilding.  Without this, your changes in configuration choices
   might not propagate everywhere they need to.
  </para>
____________________________________________________________________________-->
  <para>
   如果你执行了一次制作，然后发现你的<command>configure</command>选项是错误的， 或者你修改了任何<command>configure</command>所探测的东西（例如，升级了软件）， 那么在重新配置和编译之前运行一下<command>make distclean</command>是个好习惯。如果不这样做， 你修改的配置选项可能无法传播到所有需要变化的地方。
  </para>
 </sect1>

 <sect1 id="install-post">
<!--==========================orignal english content==========================
  <title>Post-Installation Setup</title>
____________________________________________________________________________-->
  <title>安装后设置</title>

  <sect2>
<!--==========================orignal english content==========================
   <title>Shared Libraries</title>
____________________________________________________________________________-->
   <title>共享库</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>shared library</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>共享库</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    On some systems with shared libraries
    you need to tell the system how to find the newly installed
    shared libraries.  The systems on which this is
    <emphasis>not</emphasis> necessary include
    <systemitem class="osname">FreeBSD</>,
    <systemitem class="osname">HP-UX</>,
    <systemitem class="osname">Linux</>,
    <systemitem class="osname">NetBSD</>, <systemitem
    class="osname">OpenBSD</>, and
    <systemitem class="osname">Solaris</>.
   </para>
____________________________________________________________________________-->
   <para>
    在一些有共享库的系统里，你需要告诉你的系统如何找到新安装的共享库。那些并<emphasis>不</emphasis>是必须做这个工作的系统包括 <systemitem class="osname">FreeBSD</systemitem>、<systemitem class="osname">HP-UX</systemitem>、<systemitem class="osname">Linux</systemitem>、<systemitem class="osname">NetBSD</systemitem>、<systemitem class="osname">OpenBSD</systemitem>和<systemitem class="osname">Solaris</systemitem>。
   </para>

<!--==========================orignal english content==========================
   <para>
    The method to set the shared library search path varies between
    platforms, but the most widely-used method is to set the
    environment variable <envar>LD_LIBRARY_PATH</> like so: In Bourne
    shells (<command>sh</>, <command>ksh</>, <command>bash</>, <command>zsh</>):
<programlisting>
LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH
</programlisting>
    or in <command>csh</> or <command>tcsh</>:
<programlisting>
setenv LD_LIBRARY_PATH /usr/local/pgsql/lib
</programlisting>
    Replace <literal>/usr/local/pgsql/lib</> with whatever you set
    <option><literal>-&minus;libdir</></> to in <xref linkend="configure">.
    You should put these commands into a shell start-up file such as
    <filename>/etc/profile</> or <filename>~/.bash_profile</>.  Some
    good information about the caveats associated with this method can
    be found at <ulink
    url="http://xahlee.org/UnixResource_dir/_/ldpath.html"></ulink>.
   </para>
____________________________________________________________________________-->
   <para>
    设置共享库的搜索路径的方法因平台而异， 但是最广泛使用的方法是设置环境变量<envar>LD_LIBRARY_PATH</envar>，例如在 Bourne shells （<command>sh</command>、<command>ksh</command>、<command>bash</command>、<command>zsh</command>）中：
<programlisting>
LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH
</programlisting>
    或者在<command>csh</command>或<command>tcsh</command>中：
<programlisting>
setenv LD_LIBRARY_PATH /usr/local/pgsql/lib
</programlisting>
    把<literal>/usr/local/pgsql/lib</literal>换成你在<xref linkend="configure"/>时设置的<option><literal>--libdir</literal></option>。 你应该把这些命令放到 shell 启动文件，如<filename>/etc/profile</filename>或<filename>~/.bash_profile</filename>中。 和这个方法相关的一些注意事项和很好的信息可以在<ulink url="http://xahlee.org/UnixResource_dir/_/ldpath.html"></ulink>找到。
   </para>

<!--==========================orignal english content==========================
   <para>
    On some systems it might be preferable to set the environment
    variable <envar>LD_RUN_PATH</envar> <emphasis>before</emphasis>
    building.
   </para>
____________________________________________________________________________-->
   <para>
    在有些系统上，更好的方法可能是在编译<emphasis>之前</emphasis>设置环境变量<envar>LD_RUN_PATH</envar>。
   </para>

<!--==========================orignal english content==========================
   <para>
    On <systemitem class="osname">Cygwin</systemitem>, put the library
    directory in the <envar>PATH</envar> or move the
    <filename>.dll</filename> files into the <filename>bin</filename>
    directory.
   </para>
____________________________________________________________________________-->
   <para>
    在<systemitem class="osname">Cygwin</systemitem>上，把库目录放在<envar>PATH</envar>中或者把<filename>.dll</filename>文件移动到<filename>bin</filename>目录。
   </para>

<!--==========================orignal english content==========================
   <para>
    If in doubt, refer to the manual pages of your system (perhaps
    <command>ld.so</command> or <command>rld</command>). If you later
    get a message like:
<screen>
psql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory
</screen>
    then this step was necessary.  Simply take care of it then.
   </para>
____________________________________________________________________________-->
   <para>
    如果有疑问，请参考你的系统的手册页（可能是<command>ld.so</command>或<command>rld</command>）。 如果稍后你收到下面这样的消息：
<screen>
psql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory
</screen>
    那么这一步就是必须的了。这个只需关注一下就是了。
   </para>

<!--==========================orignal english content==========================
   <para>
    <indexterm>
     <primary>ldconfig</primary>
    </indexterm>
    If you are on <systemitem class="osname">Linux</> and you have root
    access, you can run:
<programlisting>
/sbin/ldconfig /usr/local/pgsql/lib
</programlisting>
    (or equivalent directory) after installation to enable the
    run-time linker to find the shared libraries faster.  Refer to the
    manual page of <command>ldconfig</> for more information.  On
    <systemitem class="osname">FreeBSD</>, <systemitem
    class="osname">NetBSD</>, and <systemitem
    class="osname">OpenBSD</> the command is:
<programlisting>
/sbin/ldconfig -m /usr/local/pgsql/lib
</programlisting>
    instead.  Other systems are not known to have an equivalent
    command.
   </para>
____________________________________________________________________________-->
   <para>
    <indexterm>
     <primary>ldconfig</primary>
    </indexterm>
    如果你用的系统是<systemitem class="osname">Linux</systemitem>，并且你还有 root 权限，那么你可以在安装之后运行：
<programlisting>
/sbin/ldconfig /usr/local/pgsql/lib
</programlisting>
    （或者等效的目录）以便让运行时链接器更快地找到共享库。请参考<command>ldconfig</command>的手册页获取更多信息。在<systemitem class="osname">FreeBSD</systemitem>、<systemitem class="osname">NetBSD</systemitem>和<systemitem class="osname">OpenBSD</systemitem>上，命令是：
<programlisting>
/sbin/ldconfig -m /usr/local/pgsql/lib
</programlisting>
    我们不知道其它的系统有等效的命令。
   </para>
  </sect2>

  <sect2>
<!--==========================orignal english content==========================
   <title>Environment Variables</title>
____________________________________________________________________________-->
   <title>环境变量</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary><envar>PATH</envar></primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary><envar>PATH</envar></primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    If you installed into <filename>/usr/local/pgsql</> or some other
    location that is not searched for programs by default, you should
    add <filename>/usr/local/pgsql/bin</> (or whatever you set
    <option><literal>-&minus;bindir</></> to in <xref linkend="configure">)
    into your <envar>PATH</>.  Strictly speaking, this is not
    necessary, but it will make the use of <productname>PostgreSQL</>
    much more convenient.
   </para>
____________________________________________________________________________-->
   <para>
    如果你安装到<filename>/usr/local/pgsql</filename>或者其他默认不在搜索路径中的地方， 那你应该在你的<envar>PATH</envar>环境变量里面增加一个 <filename>/usr/local/pgsql/bin</filename>（或者是你在<xref linkend="configure"/>时给选项<option><literal>--bindir</literal></option>设置的任何值） 。严格来说，这些都不是必须的，但这么做可以让你使用<productname>PostgreSQL</productname>更方便。
   </para>

<!--==========================orignal english content==========================
   <para>
    To do this, add the following to your shell start-up file, such as
    <filename>~/.bash_profile</> (or <filename>/etc/profile</>, if you
    want it to affect all users):
<programlisting>
PATH=/usr/local/pgsql/bin:$PATH
export PATH
</programlisting>
    If you are using <command>csh</> or <command>tcsh</>, then use this command:
<programlisting>
set path = ( /usr/local/pgsql/bin $path )
</programlisting>
   </para>
____________________________________________________________________________-->
   <para>
    要做这些事情，把下面几行加到你的 shell 启动文件，如<filename>~/.bash_profile</filename>（如果想影响所有用户就放在<filename>/etc/profile</filename>）：
<programlisting>
PATH=/usr/local/pgsql/bin:$PATH
export PATH
</programlisting>
    如果你用的是<command>csh</command>或者<command>tcsh</command>，那么用这条命令：
<programlisting>
set path = ( /usr/local/pgsql/bin $path )
</programlisting>
   </para>

<!--==========================orignal english content==========================
   <para>
    <indexterm>
     <primary><envar>MANPATH</envar></primary>
    </indexterm>
    To enable your system to find the <application>man</>
    documentation, you need to add lines like the following to a
    shell start-up file unless you installed into a location that is
    searched by default:
<programlisting>
MANPATH=/usr/local/pgsql/share/man:$MANPATH
export MANPATH
</programlisting>
   </para>
____________________________________________________________________________-->
   <para>
    <indexterm>
     <primary><envar>MANPATH</envar></primary>
    </indexterm>
    为了让你的系统找得到<application>man</application>文档，你需要加类似下面的一行到一个shell启动文件里 （除非你安装到了默认搜索的位置）：
<programlisting>
MANPATH=/usr/local/pgsql/share/man:$MANPATH
export MANPATH
</programlisting>
   </para>

<!--==========================orignal english content==========================
   <para>
    The environment variables <envar>PGHOST</> and <envar>PGPORT</>
    specify to client applications the host and port of the database
    server, overriding the compiled-in defaults. If you are going to
    run client applications remotely then it is convenient if every
    user that plans to use the database sets <envar>PGHOST</>.  This
    is not required, however; the settings can be communicated via command
    line options to most client programs.
   </para>
____________________________________________________________________________-->
   <para>
    环境变量<envar>PGHOST</envar>和<envar>PGPORT</envar>为客户端应用指定了数据库服务器的主机和端口， 它们会覆盖编译时的默认项。如果你想从远程运行客户端应用， 那么为每个准备使用该数据库的用户都设置<envar>PGHOST</envar>将会非常方便。但这不是必须的，而且大部分客户端程序也可以通过命令行选项替换这些设置。
   </para>
  </sect2>
 </sect1>

 <sect1 id="supported-platforms">
<!--==========================orignal english content==========================
  <title>Supported Platforms</title>
____________________________________________________________________________-->
  <title>平台支持</title>

<!--==========================orignal english content==========================
  <para>
   A platform (that is, a CPU architecture and operating system combination)
   is considered supported by the <productname>PostgreSQL</> development
   community if the code contains provisions to work on that platform and
   it has recently been verified to build and pass its regression tests
   on that platform.  Currently, most testing of platform compatibility
   is done automatically by test machines in the
   <ulink url="https://buildfarm.postgresql.org/">PostgreSQL Build Farm</ulink>.
   If you are interested in using <productname>PostgreSQL</> on a platform
   that is not represented in the build farm, but on which the code works
   or can be made to work, you are strongly encouraged to set up a build
   farm member machine so that continued compatibility can be assured.
  </para>
____________________________________________________________________________-->
  <para>
   如果代码包含规定要工作在一个平台（即一种 CPU 架构和操作系统的结合）上并且它最近已经被验证能在该平台上编译并通过其回归测试，<productname>PostgreSQL</productname>开发社区才会认为该平台是被支持的。目前，大部分平台兼容性的测试都是由<ulink url="https://buildfarm.postgresql.org/">PostgreSQL 编译农场</ulink>的测试机器自动完成的。如果你对在一个并没有出现在编译农场中的平台上运行<productname>PostgreSQL</productname>感兴趣，但是代码确实能够工作或者能被修改得工作，我们强烈鼓励你建立一个编译农场成员机器，这样进一步的兼容性可以被确认。
  </para>

<!--==========================orignal english content==========================
  <para>
   In general, <productname>PostgreSQL</> can be expected to work on
   these CPU architectures: x86, x86_64, IA64, PowerPC,
   PowerPC 64, S/390, S/390x, Sparc, Sparc 64, ARM, MIPS, MIPSEL,
   and PA-RISC.  Code support exists for M68K, M32R, and VAX, but these
   architectures are not known to have been tested recently.  It is often
   possible to build on an unsupported CPU type by configuring with
   <option>-&minus;disable-spinlocks</option>, but performance will be poor.
  </para>
____________________________________________________________________________-->
  <para>
   通常，<productname>PostgreSQL</productname>被期望能在这些 CPU 架构上工作：x86、 x86_64、IA64、PowerPC、PowerPC 64、S/390、S/390x、Sparc、Sparc 64、ARM、MIPS、MIPSEL和PA-RISC。存在对 M68K、M32R  和 VAX 的代码支持，但是这些架构上并没有近期测试的报告。通常也可以在一个为支持的 CPU 类型上通过使用<option>--disable-spinlocks</option>配置来进行编译，但是性能将会比较差。
  </para>

<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</> can be expected to work on these operating
   systems: Linux (all recent distributions), Windows (Win2000 SP4 and later),
   FreeBSD, OpenBSD, NetBSD, macOS, AIX, HP/UX, and Solaris.
   Other Unix-like systems may also work but are not currently
   being tested.  In most cases, all CPU architectures supported by
   a given operating system will work.  Look in
   <xref linkend="installation-platform-notes"> below to see if
   there is information
   specific to your operating system, particularly if using an older system.
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>被期望能在这些操作系统上工作： Linux（所有最近的发布）、Windows（Win2000 SP4及以上）、
   FreeBSD、OpenBSD、NetBSD、macOS、AIX、HP/UX 和 Solaris。其他类 Unix 系统可能也可以工作，但是目前没有被测试。在大部分情况下，一个给定操作系统所支持的所有 CPU 架构都能工作。查找下文的<xref linkend="installation-platform-notes"/>来看是否有与你的操作系统相关的信息，特别是使用一个老的系统时更应该这样做。
  </para>

<!--==========================orignal english content==========================
  <para>
   If you have installation problems on a platform that is known
   to be supported according to recent build farm results, please report
   it to <email>pgsql-bugs@postgresql.org</email>.  If you are interested
   in porting <productname>PostgreSQL</> to a new platform,
   <email>pgsql-hackers@postgresql.org</email> is the appropriate place
   to discuss that.
  </para>
____________________________________________________________________________-->
  <para>
   如果你在一个平台上有安装问题，并且该平台根据最近的编译农场结果已经可以被支持，请将问题报告给<email>pgsql-bugs@postgresql.org</email>。如果你有兴趣将<productname>PostgreSQL</productname>移植到一个新的平台，<email>pgsql-hackers@postgresql.org</email>是一个合适的讨论它的地方。
  </para>
 </sect1>

 <sect1 id="installation-platform-notes">
<!--==========================orignal english content==========================
  <title>Platform-specific Notes</title>
____________________________________________________________________________-->
  <title>平台相关的说明</title>

<!--==========================orignal english content==========================
  <para>
   This section documents additional platform-specific issues
   regarding the installation and setup of PostgreSQL.  Be sure to
   read the installation instructions, and in
   particular <xref linkend="install-requirements"> as well.  Also,
   check <![%standalone-include[the
   file <filename>src/test/regress/README</> and the documentation]]>
   <![%standalone-ignore[<xref linkend="regress">]]> regarding the
   interpretation of regression test results.
  </para>
____________________________________________________________________________-->
  <para>
   这一节提供了考虑 PostgreSQL 安装和设置的附加平台相关的话题。确保阅读安装指导，特别是<xref linkend="install-requirements"/>。
   同样，检查关于回归测试结果解释的<xref linkend="regress"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Platforms that are not covered here have no known platform-specific
   installation issues.
  </para>
____________________________________________________________________________-->
  <para>
   这里没有覆盖的平台不存在平台相关的安装问题。
  </para>

  <sect2 id="installation-notes-aix">
<!--==========================orignal english content==========================
   <title>AIX</title>
____________________________________________________________________________-->
   <title>AIX</title>

<!--==========================orignal english content==========================
   <indexterm zone="installation-notes-aix">
    <primary>AIX</primary>
    <secondary>installation on</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="installation-notes-aix">
    <primary>AIX</primary>
    <secondary>installation on</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    PostgreSQL works on AIX, but getting it installed properly can be
    challenging.  AIX versions from 4.3.3 to 6.1 are considered supported.
    You can use GCC or the native IBM compiler <command>xlc</command>.  In
    general, using recent versions of AIX and PostgreSQL helps.  Check
    the build farm for up to date information about which versions of
    AIX are known to work.
   </para>
____________________________________________________________________________-->
   <para>
    PostgreSQL 能在 AIX 上工作，但是正确地安装它却富有挑战性。从4.3.3到6.1的 AIX 被认为是可支持的。你可以使用 GCC 或本地 IBM 编译器<command>xlc</command>。通常，使用最新版本的 AIX 和 PostgreSQL 能有所帮助。在编译农场中检查有关已知能工作的 AIX 版本的最新信息。
   </para>

<!--==========================orignal english content==========================
   <para>
    The minimum recommended fix levels for supported AIX versions are:
   </para>
____________________________________________________________________________-->
   <para>
    被支持的 AIX 版本的最小推荐修理级别是：
   </para>

   <variablelist>
    <varlistentry>
<!--==========================orignal english content==========================
     <term>AIX 4.3.3</term>
____________________________________________________________________________-->
     <term>AIX 4.3.3</term>
     <listitem><!--==========================orignal english content==========================
<para>Maintenance Level 11 + post ML11 bundle</para>
____________________________________________________________________________-->
<!--==========================orignal english content==========================
<para>Maintenance Level 11 + post ML11 bundle</para>
____________________________________________________________________________-->
<para>Maintenance Level 11 + post ML11 bundle</para></listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term>AIX 5.1</term>
____________________________________________________________________________-->
     <term>AIX 5.1</term>
     <listitem><!--==========================orignal english content==========================
<para>Maintenance Level 9 + post ML9 bundle</para>
____________________________________________________________________________-->
<!--==========================orignal english content==========================
<para>Maintenance Level 9 + post ML9 bundle</para>
____________________________________________________________________________-->
<para>Maintenance Level 9 + post ML9 bundle</para></listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term>AIX 5.2</term>
____________________________________________________________________________-->
     <term>AIX 5.2</term>
     <listitem><!--==========================orignal english content==========================
<para>Technology Level 10 Service Pack 3</para>
____________________________________________________________________________-->
<!--==========================orignal english content==========================
<para>Technology Level 10 Service Pack 3</para>
____________________________________________________________________________-->
<para>Technology Level 10 Service Pack 3</para></listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term>AIX 5.3</term>
____________________________________________________________________________-->
     <term>AIX 5.3</term>
     <listitem><!--==========================orignal english content==========================
<para>Technology Level 7</para>
____________________________________________________________________________-->
<!--==========================orignal english content==========================
<para>Technology Level 7</para>
____________________________________________________________________________-->
<para>Technology Level 7</para></listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term>AIX 6.1</term>
____________________________________________________________________________-->
     <term>AIX 6.1</term>
     <listitem><!--==========================orignal english content==========================
<para>Base Level</para>
____________________________________________________________________________-->
<!--==========================orignal english content==========================
<para>Base Level</para>
____________________________________________________________________________-->
<para>Base Level</para></listitem>
    </varlistentry>
   </variablelist>

<!--==========================orignal english content==========================
   <para>
    To check your current fix level, use
    <command>oslevel -r</command> in AIX 4.3.3 to AIX 5.2 ML 7, or
    <command>oslevel -s</command> in later versions.
   </para>
____________________________________________________________________________-->
   <para>
    要检查你当前的修理级别，在AIX 4.3.3 至 AIX 5.2 ML 7中使用
    <command>oslevel -r</command>，或者在后面的版本中使用
    <command>oslevel -s</command>。
   </para>

<!--==========================orignal english content==========================
   <para>
    Use the following <command>configure</command> flags in addition
    to your own if you have installed Readline or libz in
    <literal>/usr/local</>:
    <literal>-&minus;with-includes=/usr/local/include
    -&minus;with-libraries=/usr/local/lib</literal>.
   </para>
____________________________________________________________________________-->
   <para>
    如果你已经在<literal>/usr/local</literal>中安装了 Readline 或 libz，在你自己的选项之外使用下列<command>configure</command>标志：
    <literal>--with-includes=/usr/local/include
    --with-libraries=/usr/local/lib</literal>.
   </para>

   <sect3>
<!--==========================orignal english content==========================
    <title>GCC Issues</title>
____________________________________________________________________________-->
    <title>GCC问题</title>

<!--==========================orignal english content==========================
    <para>
     On AIX 5.3, there have been some problems getting PostgreSQL to
     compile and run using GCC.
    </para>
____________________________________________________________________________-->
    <para>
     在 AIX 5.3 上，使用 GCC 编译和运行 PostgreSQL 有一些问题。
    </para>

<!--==========================orignal english content==========================
    <para>
     You will want to use a version of GCC subsequent to 3.3.2,
     particularly if you use a prepackaged version.  We had good
     success with 4.0.1.  Problems with earlier versions seem to have
     more to do with the way IBM packaged GCC than with actual issues
     with GCC, so that if you compile GCC yourself, you might well
     have success with an earlier version of GCC.
    </para>
____________________________________________________________________________-->
    <para>
     你将要使用 GCC 继 3.3.2 之后的一个版本，特别是如果你在使用一个打包好的版本。我们在 4.0.1 上获得了成功。早期版本的问题看起来更多地与 IBM 打包的 GCC 有关，而非 GCC 真正的问题，因此如果你自己编译 GCC， 你更有可能使用早期版本的 GCC 取得成功。
    </para>
   </sect3>

   <sect3>
<!--==========================orignal english content==========================
    <title>Unix-Domain Sockets Broken</title>
____________________________________________________________________________-->
    <title>Unix域套接字崩溃</title>

<!--==========================orignal english content==========================
    <para>
     AIX 5.3 has a problem
     where <structname>sockaddr_storage</structname> is not defined to
     be large enough.  In version 5.3, IBM increased the size of
     <structname>sockaddr_un</structname>, the address structure for
     Unix-domain sockets, but did not correspondingly increase the
     size of <structname>sockaddr_storage</structname>.  The result of
     this is that attempts to use Unix-domain sockets with PostgreSQL
     lead to libpq overflowing the data structure.  TCP/IP connections
     work OK, but not Unix-domain sockets, which prevents the
     regression tests from working.
    </para>
____________________________________________________________________________-->
    <para>
     AIX 5.3 有一个问题是<structname>sockaddr_storage</structname>定义得不够大。在版本 5.3 中，IBM 增加了<structname>sockaddr_un</structname>（Unix域套接字的地址结构）的尺寸，但是没有相应地增加<structname>sockaddr_storage</structname>的尺寸。这样做的结果是在 PostgreSQL 中尝试使用 Unix域套接字会导致 libpq 让该数据结构溢出。 TCP/IP 连接工作正常，但是 Unix域套接字不行，这将使回归测试不能工作。
    </para>

<!--==========================orignal english content==========================
    <para>
     The problem was reported to IBM, and is recorded as bug report
     PMR29657.  If you upgrade to maintenance level 5300-03 or later,
     that will include this fix.  A quick workaround
     is to alter <symbol>_SS_MAXSIZE</symbol> to 1025 in
     <filename>/usr/include/sys/socket.h</filename>.  In either case,
     recompile PostgreSQL once you have the corrected header file.
    </para>
____________________________________________________________________________-->
    <para>
     该问题已经被报告给了 IBM，并且已被记录为缺陷报告 PMR29657。如果你升级到 maintenance level 5300-03 或更新，将会包括这个修复。一种快速的解决方法是把<filename>/usr/include/sys/socket.h</filename>中的<symbol>_SS_MAXSIZE</symbol>改成 1025。在两种情况中，一旦你得到了修正过的头文件，你都需要重编译 PostgreSQL。
    </para>
   </sect3>

   <sect3>
<!--==========================orignal english content==========================
    <title>Internet Address Issues</title>
____________________________________________________________________________-->
    <title>Internet地址问题</title>

<!--==========================orignal english content==========================
    <para>
     PostgreSQL relies on the system's <function>getaddrinfo</> function
     to parse IP addresses in <varname>listen_addresses</>,
     <filename>pg_hba.conf</>, etc.  Older versions of AIX have assorted
     bugs in this function.  If you have problems related to these settings,
     updating to the appropriate AIX fix level shown above
     should take care of it.
    </para>
____________________________________________________________________________-->
    <para>
     PostgreSQL 依赖系统的<function>getaddrinfo</function>函数来解析<varname>listen_addresses</varname>、<filename>pg_hba.conf</filename>等中的 IP 地址。旧版本的 AIX 在这个函数中有各种各样的缺陷。如果你存在与此有关的问题，更新到上文所示的合适的 AIX fix level 将会解决它。
    </para>

    <!-- https://archives.postgresql.org/message-id/6064jt6cfm.fsf_-_@dba2.int.libertyrms.com -->

<!--==========================orignal english content==========================
    <para>
     One user reports:
    </para>
____________________________________________________________________________-->
    <para>
     一个用户报告：
    </para>

<!--==========================orignal english content==========================
    <para>
     When implementing PostgreSQL version 8.1 on AIX 5.3, we
     periodically ran into problems where the statistics collector
     would <quote>mysteriously</quote> not come up successfully.  This
     appears to be the result of unexpected behavior in the IPv6
     implementation.  It looks like PostgreSQL and IPv6 do not play
     very well together on AIX 5.3.
    </para>
____________________________________________________________________________-->
    <para>
     当在 AIX 5.3 上实现 PostgreSQL 版本 8.1 时，我们会周期性地碰到问题，在其中统计收集器会<quote>神秘地</quote>无法成功启动。这似乎是在 IPv6 实现中意外行为的结果。看起来 PostgreSQL 和 IPv6 无法和 AIX 5.3 一起很好地工作。
    </para>

<!--==========================orignal english content==========================
    <para>
     Any of the following actions <quote>fix</quote> the problem.
     <itemizedlist>
      <listitem>
       <para>
        Delete the IPv6 address for localhost:
<screen>
(as root)
# ifconfig lo0 inet6 ::1/0 delete
</screen>
       </para>
      </listitem>

      <listitem>
       <para>
        Remove IPv6 from net services.  The
        file <filename>/etc/netsvc.conf</filename> on AIX is roughly
        equivalent to <filename>/etc/nsswitch.conf</filename> on
        Solaris/Linux.  The default, on AIX, is thus:
<programlisting>
hosts=local,bind
</programlisting>
        Replace this with:
<programlisting>
hosts=local4,bind4
</programlisting>
        to deactivate searching for IPv6 addresses.
       </para>
      </listitem>
     </itemizedlist>
    </para>
____________________________________________________________________________-->
    <para>
     下面任意一种动作都可以<quote>修复</quote>该问题。
     <itemizedlist>
      <listitem>
       <para>
        删除 localhost 的 IPv6 地址：
<screen>
(as root)
# ifconfig lo0 inet6 ::1/0 delete
</screen>
       </para>
      </listitem>

      <listitem>
       <para>
        从网络服务删除 IPv6。AIX 上的<filename>/etc/netsvc.conf</filename>大概等价于 Solaris/Linux 上的<filename>/etc/nsswitch.conf</filename>。在 AIX 上的默认值因此是：
<programlisting>
hosts=local,bind
</programlisting>
        将其换成：
<programlisting>
hosts=local4,bind4
</programlisting>
        来使 IPv6 地址的搜索无效。
       </para>
      </listitem>
     </itemizedlist>
    </para>

    <warning>
<!--==========================orignal english content==========================
    <para>
     This is really a workaround for problems relating
     to immaturity of IPv6 support, which improved visibly during the
     course of AIX 5.3 releases.  It has worked with AIX version 5.3,
     but does not represent an elegant solution to the problem.  It has
     been reported that this workaround is not only unnecessary, but
     causes problems on AIX 6.1, where IPv6 support has become more mature.
    </para>
____________________________________________________________________________-->
    <para>
     这实际上是对有关 IPv6 支持不成熟性的问题的一种变通方案，这在 AIX 5.3 发布的过程中有了显著地改进。它可以和 AIX 5.3 一起工作，但是不代表对此问题的一种华丽的解决方案。有报告称该变通方案不仅仅是多余的，还会在 AIX 6.1 上导致问题，在 AIX 6.1 中 IPv6 支持已变得更加成熟。
    </para>
    </warning>

   </sect3>

   <sect3>
<!--==========================orignal english content==========================
    <title>Memory Management</title>
____________________________________________________________________________-->
    <title>内存管理</title>
    <!-- https://archives.postgresql.org/message-id/603bgqmpl9.fsf@dba2.int.libertyrms.com -->

<!--==========================orignal english content==========================
    <para>
     AIX can be somewhat peculiar with regards to the way it does
     memory management.  You can have a server with many multiples of
     gigabytes of RAM free, but still get out of memory or address
     space errors when running applications.  One example
     is loading of extensions failing with unusual errors.
     For example, running as the owner of the PostgreSQL installation:
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": A memory address is not in the address space for the process.
</screen>
    Running as a non-owner in the group possessing the PostgreSQL
    installation:
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": Bad address
</screen>
     Another example is out of memory errors in the PostgreSQL server
     logs, with every memory allocation near or greater than 256 MB
     failing.
    </para>
____________________________________________________________________________-->
    <para>
     AIX 的特别之处在于它的内存管理。你可能有一个装备有好多个吉字节空闲 RAM 的服务器，但是在运行应用时仍然会得到内存不足或者地址空间错误。一个例子是加载扩展会因为罕见的错误失败。例如，作为 PostgreSQL 安装的拥有者运行：
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": A memory address is not in the address space for the process.
</screen>
    作为拥有 PostgreSQL 安装的组中的非拥有者运行：
<screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": Bad address
</screen>
     另一个例子是 PostgreSQL 服务器日志中的内存不足错误，每次内存分配接近或者超过 256 MB 时都会失败。
    </para>

<!--==========================orignal english content==========================
    <para>
     The overall cause of all these problems is the default bittedness
     and memory model used by the server process.  By default, all
     binaries built on AIX are 32-bit.  This does not depend upon
     hardware type or kernel in use.  These 32-bit processes are
     limited to 4 GB of memory laid out in 256 MB segments using one
     of a few models.  The default allows for less than 256 MB in the
     heap as it shares a single segment with the stack.
    </para>
____________________________________________________________________________-->
    <para>
     所有这些问题的总体成因是服务器进程所用的寻址空间和内存模型。默认情况下，所有在 AIX 上编译的二进制都是32位。这并不依赖于硬件类型或使用的内核。这些32位进程被限制在 4GB 的内存中，并被使用几种模型之一安排成 256 MB 的段。该默认值允许在堆中低于 256 MB，因为它和栈共享一个单独的段。
    </para>

<!--==========================orignal english content==========================
    <para>
     In the case of the <literal>plperl</literal> example, above,
     check your umask and the permissions of the binaries in your
     PostgreSQL installation.  The binaries involved in that example
     were 32-bit and installed as mode 750 instead of 755.  Due to the
     permissions being set in this fashion, only the owner or a member
     of the possessing group can load the library.  Since it isn't
     world-readable, the loader places the object into the process'
     heap instead of the shared library segments where it would
     otherwise be placed.
    </para>
____________________________________________________________________________-->
    <para>
     在<literal>plperl</literal>的例子中，检查你的 umask 和你的 PostgreSQL 安装中的二进制的权限。这个例子中涉及的二进制是32位的并且被用模式 750 而不是 755 安装。由于这种方式的权限设置，只有所有者或拥有组的成员可以载入该库。因为它不是所有人可读的，载入器将该对象放在进程的堆中而不是它应该被放入的共享库段中。
    </para>

<!--==========================orignal english content==========================
    <para>
     The <quote>ideal</quote> solution for this is to use a 64-bit
     build of PostgreSQL, but that is not always practical, because
     systems with 32-bit processors can build, but not run, 64-bit
     binaries.
    </para>
____________________________________________________________________________-->
    <para>
     这个问题的<quote>理想的</quote>解决方案是使用 PostgreSQL 的64位编译，但是这不是总是实用的，因为有32位处理器的系统可以编译64位二进制但是却不能运行它。
    </para>

<!--==========================orignal english content==========================
    <para>
     If a 32-bit binary is desired, set <symbol>LDR_CNTRL</symbol> to
     <literal>MAXDATA=0x<replaceable>n</replaceable>0000000</literal>,
     where 1 &lt;= n &lt;= 8, before starting the PostgreSQL server,
     and try different values and <filename>postgresql.conf</filename>
     settings to find a configuration that works satisfactorily.  This
     use of <symbol>LDR_CNTRL</symbol> tells AIX that you want the
     server to have <symbol>MAXDATA</symbol> bytes set aside for the
     heap, allocated in 256 MB segments.  When you find a workable
     configuration,
     <command>ldedit</command> can be used to modify the binaries so
     that they default to using the desired heap size.  PostgreSQL can
     also be rebuilt, passing <literal>configure
     LDFLAGS="-Wl,-bmaxdata:0x<replaceable>n</replaceable>0000000"</literal>
     to achieve the same effect.
    </para>
____________________________________________________________________________-->
    <para>
     如果想要一个 32 位二进制，在开始 PostgreSQL 服务器之前将<symbol>LDR_CNTRL</symbol>设置为<literal>MAXDATA=0x<replaceable>n</replaceable>0000000</literal>，其中 1 &lt;= n &lt;= 8，并且尝试不同的值以及<filename>postgresql.conf</filename>设置来找一个能让你满意的配置。这种<symbol>LDR_CNTRL</symbol>的使用告诉 AIX 你希望服务器留出<symbol>MAXDATA</symbol>字节给堆，以 256 MB 的段分配。当你找到了一个可工作的配置时，<command>ldedit</command>可以被用来修改二进制，这样它们默认使用想要的堆尺寸。PostgreSQL 也可以被重新编译，传递<literal>configure  LDFLAGS="-Wl,-bmaxdata:0x<replaceable>n</replaceable>0000000"</literal>来达到相同的效果。
    </para>

<!--==========================orignal english content==========================
    <para>
     For a 64-bit build, set <envar>OBJECT_MODE</envar> to 64 and
     pass <literal>CC="gcc -maix64"</literal>
     and <literal>LDFLAGS="-Wl,-bbigtoc"</literal>
     to <command>configure</command>.  (Options for
    <command>xlc</command> might differ.)  If you omit the export of
    <envar>OBJECT_MODE</envar>, your build may fail with linker errors.  When
    <envar>OBJECT_MODE</envar> is set, it tells AIX's build utilities
    such as <command>ar</>, <command>as</>, and <command>ld</> what
    type of objects to default to handling.
    </para>
____________________________________________________________________________-->
    <para>
     对于一个 64 位编译，设置<envar>OBJECT_MODE</envar>为 64 并且传递<literal>CC="gcc -maix64"</literal>和<literal>LDFLAGS="-Wl,-bbigtoc"</literal>给<command>configure</command>（给<command>xlc</command>的选项可能不同）。如果你省略<envar>OBJECT_MODE</envar>的输出，你的编译可能会因为链接器错误而失败。当<envar>OBJECT_MODE</envar>被设置时，它告诉 AIX 的编译工具（如<command>ar</command>、<command>as</command>和<command>ld</command>）默认要处理哪些对象类型。
    </para>

<!--==========================orignal english content==========================
    <para>
     By default, overcommit of paging space can happen.  While we have
     not seen this occur, AIX will kill processes when it runs out of
     memory and the overcommit is accessed.  The closest to this that
     we have seen is fork failing because the system decided that
     there was not enough memory for another process.  Like many other
     parts of AIX, the paging space allocation method and
     out-of-memory kill is configurable on a system- or process-wide
     basis if this becomes a problem.
    </para>
____________________________________________________________________________-->
    <para>
     默认情况下，过量使用页面空间的情况可能会发生。不过我们还没有看到过，当进程用尽内存并且出现了过量使用时 AIX 会杀死进程。我们见到过的最接近于此的是 fork 失败，其原因是系统觉得已经没有足够的内存给另一个进程。和 AIX 的很多其他部分一样，如果这成为了一个问题，页面空间分配方法和耗尽内存导致的杀死在系统范围或进程范围是可以配置的。
    </para>

    <bibliography>
<!--==========================orignal english content==========================
     <title>References and Resources</title>
____________________________________________________________________________-->
     <title>参考和资源</title>

<!--==========================orignal english content==========================
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/topic/com.ibm.aix.doc/aixprggd/genprogc/lrg_prg_support.htm">Large Program Support</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: General Programming Concepts: Writing and Debugging Programs</title>
      </biblioset>
     </biblioentry>
____________________________________________________________________________-->
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/topic/com.ibm.aix.doc/aixprggd/genprogc/lrg_prg_support.htm">Large Program Support</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: General Programming Concepts: Writing and Debugging Programs</title>
      </biblioset>
     </biblioentry>

<!--==========================orignal english content==========================
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/topic/com.ibm.aix.doc/aixprggd/genprogc/address_space.htm">Program Address Space Overview</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: General Programming Concepts: Writing and Debugging Programs</title>
      </biblioset>
     </biblioentry>
____________________________________________________________________________-->
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/topic/com.ibm.aix.doc/aixprggd/genprogc/address_space.htm">Program Address Space Overview</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: General Programming Concepts: Writing and Debugging Programs</title>
      </biblioset>
     </biblioentry>

<!--==========================orignal english content==========================
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.doc/aixbman/prftungd/resmgmt2.htm">Performance Overview of the Virtual Memory Manager (VMM)</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: Performance Management Guide</title>
      </biblioset>
     </biblioentry>
____________________________________________________________________________-->
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.doc/aixbman/prftungd/resmgmt2.htm">Performance Overview of the Virtual Memory Manager (VMM)</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: Performance Management Guide</title>
      </biblioset>
     </biblioentry>

<!--==========================orignal english content==========================
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.doc/aixbman/prftungd/memperf7.htm">Page Space Allocation</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: Performance Management Guide</title>
      </biblioset>
     </biblioentry>
____________________________________________________________________________-->
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.doc/aixbman/prftungd/memperf7.htm">Page Space Allocation</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: Performance Management Guide</title>
      </biblioset>
     </biblioentry>

<!--==========================orignal english content==========================
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.doc/aixbman/prftungd/memperf6.htm">Paging-space thresholds tuning</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: Performance Management Guide</title>
      </biblioset>
     </biblioentry>
____________________________________________________________________________-->
     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.doc/aixbman/prftungd/memperf6.htm">Paging-space thresholds tuning</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: Performance Management Guide</title>
      </biblioset>
     </biblioentry>

<!--==========================orignal english content==========================
     <biblioentry>
       <title><ulink url="http://www.redbooks.ibm.com/abstracts/sg245674.html?Open">Developing and Porting C and C++ Applications on AIX</ulink></title>
       <publisher>
        <publishername>IBM Redbook</publishername>
       </publisher>
     </biblioentry>
____________________________________________________________________________-->
     <biblioentry>
       <title><ulink url="http://www.redbooks.ibm.com/abstracts/sg245674.html?Open">Developing and Porting C and C++ Applications on AIX</ulink></title>
       <publisher>
        <publishername>IBM Redbook</publishername>
       </publisher>
     </biblioentry>
    </bibliography>
   </sect3>
  </sect2>

  <sect2 id="installation-notes-cygwin">
<!--==========================orignal english content==========================
   <title>Cygwin</title>
____________________________________________________________________________-->
   <title>Cygwin</title>

<!--==========================orignal english content==========================
   <indexterm zone="installation-notes-cygwin">
    <primary>Cygwin</primary>
    <secondary>installation on</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="installation-notes-cygwin">
    <primary>Cygwin</primary>
    <secondary>installation on</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    PostgreSQL can be built using Cygwin, a Linux-like environment for
    Windows, but that method is inferior to the native Windows build
    <![%standalone-ignore[(see <xref linkend="install-windows">)]]> and
    running a server under Cygwin is no longer recommended.
   </para>
____________________________________________________________________________-->
   <para>
    PostgreSQL 可以使用 Cygwin 来编译，它是用于 Windows 的一个类 Linux 环境，但是这种方法不如原生 Windows 编译见<xref linkend="install-windows"/>）并且我们已经不再推荐在 Cygwin 下运行一个服务器。
   </para>

<!--==========================orignal english content==========================
   <para>
    When building from source, proceed according to the normal
    installation procedure (i.e., <literal>./configure;
    make</literal>; etc.), noting the following-Cygwin specific
    differences:

    <itemizedlist>
     <listitem>
      <para>
       Set your path to use the Cygwin bin directory before the
       Windows utilities.  This will help prevent problems with
       compilation.
      </para>
     </listitem>

     <listitem>
      <para>
       The <command>adduser</command> command is not supported; use
       the appropriate user management application on Windows NT,
       2000, or XP.  Otherwise, skip this step.
      </para>
     </listitem>

     <listitem>
      <para>
       The <command>su</command> command is not supported; use ssh to
       simulate su on Windows NT, 2000, or XP. Otherwise, skip this
       step.
      </para>
     </listitem>

     <listitem>
      <para>
       OpenSSL is not supported.
      </para>
     </listitem>

     <listitem>
      <para>
       Start <command>cygserver</command> for shared memory support.
       To do this, enter the command <literal>/usr/sbin/cygserver
       &amp;</literal>.  This program needs to be running anytime you
       start the PostgreSQL server or initialize a database cluster
       (<command>initdb</command>).  The
       default <command>cygserver</command> configuration may need to
       be changed (e.g., increase <symbol>SEMMNS</symbol>) to prevent
       PostgreSQL from failing due to a lack of system resources.
      </para>
     </listitem>

     <listitem>
      <para>
        Building might fail on some systems where a locale other than
        C is in use. To fix this, set the locale to C by doing
        <command>export LANG=C.utf8</command> before building, and then
        setting it back to the previous setting, after you have installed
        PostgreSQL.
      </para>
     </listitem>

     <listitem>
      <para>
       The parallel regression tests (<literal>make check</literal>)
       can generate spurious regression test failures due to
       overflowing the <function>listen()</function> backlog queue
       which causes connection refused errors or hangs.  You can limit
       the number of connections using the make
       variable <varname>MAX_CONNECTIONS</varname> thus:
<programlisting>
make MAX_CONNECTIONS=5 check
</programlisting>
       (On some systems you can have up to about 10 simultaneous
       connections).
      </para>
     </listitem>
    </itemizedlist>
   </para>
____________________________________________________________________________-->
   <para>
    在从源代码编译时，按照正常安装过程进行（即<literal>./configure;
    make</literal>; 等；只要注意下列 Cygwin 相关的区别：

    <itemizedlist>
     <listitem>
      <para>
       将你的路径设置为使用 Cygwin 的 bin 目录并且把它放在 Windows 工具的前面。这将帮助避免很多编译的问题。
      </para>
     </listitem>

     <listitem>
      <para>
       不支持<command>adduser</command>命令；使用 Windows NT、2000 或 XP 上的用户管理应用来替代。否则，跳过这一步。
      </para>
     </listitem>

     <listitem>
      <para>
       不支持<command>su</command>命令；在 Windows NT、2000 或 XP 上使用 ssh 来模拟 su。否则，跳过这一步。
      </para>
     </listitem>

     <listitem>
      <para>
       不支持 OpenSSL。
      </para>
     </listitem>

     <listitem>
      <para>
       为共享内存支持启动<command>cygserver</command>。要这样做，输入命令<literal>/usr/sbin/cygserver &amp;</literal>。这个程序在你启动 PostgreSQL 服务器或初始化一个数据集簇（<command>initdb</command>）时的任何时刻都需要被运行。默认的<command>cygserver</command>配置可能需要被更改（例如增加<symbol>SEMMNS</symbol>）来防止 PostgreSQL 因为缺少系统资源而失败。
      </para>
     </listitem>

     <listitem>
      <para>
        在某些不使用 C 区域的系统上编译可能会失败。要修复这个问题，通过在边以前<command>export LANG=C.utf8</command>把区域设置为 C，并且在安装完 PostgreSQL 之后把区域恢复成之前的设置。
      </para>
     </listitem>

     <listitem>
      <para>
       并行回归测试（<literal>make check</literal>）可能产生虚假的回归测试错误，这是由于溢出的<function>listen()</function>连接缓冲区，它会导致连接拒绝错误或挂起。你可以使用<varname>MAX_CONNECTIONS</varname>来限制连接数：
<programlisting>
make MAX_CONNECTIONS=5 check
</programlisting>
       （在某些系统上你可以有大约 10 个同时连接）。
      </para>
     </listitem>
    </itemizedlist>
   </para>

<!--==========================orignal english content==========================
   <para>
    It is possible to install <command>cygserver</command> and the
    PostgreSQL server as Windows NT services.  For information on how
    to do this, please refer to the <filename>README</filename>
    document included with the PostgreSQL binary package on Cygwin.
    It is installed in the
    directory <filename>/usr/share/doc/Cygwin</filename>.
   </para>
____________________________________________________________________________-->
   <para>
    可以把<command>cygserver</command> PostgreSQL 服务器安装为 Windows NT 服务。关于如何这样做的信息，请参考包含在 Cygwin 上 PostgreSQL 二进制包中的<filename>README</filename>文档。它被安装在目录<filename>/usr/share/doc/Cygwin</filename>中。
   </para>
  </sect2>

  <sect2 id="installation-notes-hpux">
<!--==========================orignal english content==========================
   <title>HP-UX</title>
____________________________________________________________________________-->
   <title>HP-UX</title>

<!--==========================orignal english content==========================
   <indexterm zone="installation-notes-hpux">
    <primary>HP-UX</primary>
    <secondary>installation on</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="installation-notes-hpux">
    <primary>HP-UX</primary>
    <secondary>installation on</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    PostgreSQL 7.3+ should work on Series 700/800 PA-RISC machines
    running HP-UX 10.X or 11.X, given appropriate system patch levels
    and build tools.  At least one developer routinely tests on HP-UX
    10.20, and we have reports of successful installations on HP-UX
    11.00 and 11.11.
   </para>
____________________________________________________________________________-->
   <para>
    给定合适的系统补丁级别和编译工具，PostgreSQL 7.3+ 应该可以工作在运行 HP-UX 10.X 或 11.X 的 Series 700/800 PA-RISC 机器上。至少一个开发者例行地在 HP-UX 10.20 上测试过，并且我们有在 HP-UX 11.00 和 11.11 上成功安装的报告。
   </para>

<!--==========================orignal english content==========================
   <para>
    Aside from the PostgreSQL source distribution, you will need GNU
    make (HP's make will not do), and either GCC or HP's full ANSI C
    compiler.  If you intend to build from Git sources rather than a
    distribution tarball, you will also need Flex (GNU lex) and Bison
    (GNU yacc).  We also recommend making sure you are fairly
    up-to-date on HP patches.  At a minimum, if you are building 64
    bit binaries on HP-UX 11.11 you may need PHSS_30966 (11.11) or a
    successor patch otherwise <command>initdb</command> may hang:
<literallayout>
PHSS_30966  s700_800 ld(1) and linker tools cumulative patch
</literallayout>

    On general principles you should be current on libc and ld/dld
    patches, as well as compiler patches if you are using HP's C
    compiler.  See HP's support sites such
    as <ulink url="ftp://us-ffs.external.hp.com/"></ulink> for free
    copies of their latest patches.
   </para>
____________________________________________________________________________-->
   <para>
    除了 PostgreSQL 源代码发布，你将需要 GNU make（HP 的 make 不行），并且需要 GCC 或 HP 的 ANSI C 编译器。如果你想从 Git 源编译而不是一个发布包，你还将需要 Flex（GNU lex）和 Bison（GNU yacc）。我们还推荐确认你真的在使用最新的 HP 补丁。最低限度下，如果你在 HP-UX 11.11 上编译 64 位二进制，你可能需要 PHSS_30966 (11.11) 或一个后继补丁，否则<command>initdb</command>可能中止：
<literallayout>
PHSS_30966  s700_800 ld(1) and linker tools cumulative patch
</literallayout>

    在一般原则上，你应该使用 libc 和 ld/dld 的当前补丁，如果你在使用 HP 的 C 编译器也一样要用当前的编译器补丁。它们最新补丁的免费拷贝请见 HP 的支持站点如<ulink url="ftp://us-ffs.external.hp.com/"></ulink>。
   </para>

<!--==========================orignal english content==========================
   <para>
    If you are building on a PA-RISC 2.0 machine and want to have
    64-bit binaries using GCC, you must use a GCC 64-bit version.
   </para>
____________________________________________________________________________-->
   <para>
    如果你正在一台 PA-RISC 2.0 机器上编译并且项使用 GCC 得到 64 位二进制，你必须使用 GCC 的 64 位版本。
   </para>

<!--==========================orignal english content==========================
   <para>
    If you are building on a PA-RISC 2.0 machine and want the compiled
    binaries to run on PA-RISC 1.1 machines you will need to specify
    <option>+DAportable</option> in <envar>CFLAGS</envar>.
   </para>
____________________________________________________________________________-->
   <para>
    如果你正在一台 PA-RISC 2.0 机器上编译并且想让编译好的二进制运行在 PA-RISC 1.1 机器上，你将需要在<envar>CFLAGS</envar>中指定<option>+DAportable</option>。
   </para>

<!--==========================orignal english content==========================
   <para>
    If you are building on a HP-UX Itanium machine, you will need the
    latest HP ANSI C compiler with its dependent patch or successor
    patches:
<literallayout>
PHSS_30848  s700_800 HP C Compiler (A.05.57)
PHSS_30849  s700_800 u2comp/be/plugin library Patch
</literallayout>
   </para>
____________________________________________________________________________-->
   <para>
    如果你正在一台 HP-UX Itanium 机器上编译，你将需要最新的 HP ANSI C 编译器，以及它的依赖补丁或后继补丁：
<literallayout>
PHSS_30848  s700_800 HP C Compiler (A.05.57)
PHSS_30849  s700_800 u2comp/be/plugin library Patch
</literallayout>
   </para>

<!--==========================orignal english content==========================
   <para>
    If you have both HP's C compiler and GCC's, then you might want to
    explicitly select the compiler to use when you
    run <command>configure</command>:
<programlisting>
./configure CC=cc
</programlisting>
    for HP's C compiler, or
<programlisting>
./configure CC=gcc
</programlisting>
    for GCC.  If you omit this setting, then configure will
    pick <command>gcc</command> if it has a choice.
   </para>
____________________________________________________________________________-->
   <para>
    如果你同时有 HP 的 C 编译器和 GCC 的编译器，那么在运行<command>configure</command>时你可能希望显式地选择要使用的编译器：
<programlisting>
./configure CC=cc
</programlisting>
    用于 HP 的 C 编译器，或者
<programlisting>
./configure CC=gcc
</programlisting>
    用于 GCC。如果你忽略这个设置，configure 在可以选择时会使用<command>gcc</command>。
   </para>

<!--==========================orignal english content==========================
   <para>
    The default install target location
    is <filename>/usr/local/pgsql</filename>, which you might want to
    change to something under <filename>/opt</filename>.  If so, use
    the
    <option>-&minus;prefix</option> switch to <command>configure</command>.
   </para>
____________________________________________________________________________-->
   <para>
    默认的安装目标位置是<filename>/usr/local/pgsql</filename>，你可能希望修改它为<filename>/opt</filename>之下的某个地方。如果是这样，使用<command>configure</command>的<option>--prefix</option>开关。
   </para>

<!--==========================orignal english content==========================
   <para>
    In the regression tests, there might be some low-order-digit
    differences in the geometry tests, which vary depending on which
    compiler and math library versions you use.  Any other error is
    cause for suspicion.
   </para>
____________________________________________________________________________-->
   <para>
    在回归测试中，在几何测试中可能会有某些低序位差别，这会根据你使用的编译器和数学库版本而变化。任何其他错误都需要怀疑。
   </para>
  </sect2>

  <sect2 id="installation-notes-mingw">
<!--==========================orignal english content==========================
   <title>MinGW/Native Windows</title>
____________________________________________________________________________-->
   <title>MinGW/原生 Windows</title>

<!--==========================orignal english content==========================
   <indexterm zone="installation-notes-mingw">
    <primary>MinGW</primary>
    <secondary>installation on</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="installation-notes-mingw">
    <primary>MinGW</primary>
    <secondary>installation on</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    PostgreSQL for Windows can be built using MinGW, a Unix-like build
    environment for Microsoft operating systems, or using
    Microsoft's <productname>Visual C++</productname> compiler suite.
    The MinGW build variant uses the normal build system described in
    this chapter; the Visual C++ build works completely differently
    and is described in <![%standalone-include[the
    documentation]]><![%standalone-ignore[<xref linkend="install-windows">]]>.
    It is a fully native build and uses no additional software like
    MinGW.  A ready-made installer is available on the main
    PostgreSQL web site.
   </para>
____________________________________________________________________________-->
   <para>
    用于 Windows 的 PostgreSQL 可以使用 MinGW 编译，它是一个用于微软操作系统的类 Unix 的编译环境。也可以使用微软的<productname>Visual C++</productname>编译器套件来编译。MinGW 编译使用本章中描述的正常编译系统；而  Visual C++ 编译的工作完全不同并且在
    <xref linkend="install-windows"/>/中描述。后者是一种完全原生的编译并且没有像 MinGW 那样使用额外软件。在 PostgreSQL 的主网站上有一个现成的安装器可用。
   </para>

<!--==========================orignal english content==========================
   <para>
    The native Windows port requires a 32 or 64-bit version of Windows
    2000 or later. Earlier operating systems do
    not have sufficient infrastructure (but Cygwin may be used on
    those).  MinGW, the Unix-like build tools, and MSYS, a collection
    of Unix tools required to run shell scripts
    like <command>configure</command>, can be downloaded
    from <ulink url="http://www.mingw.org/"></ulink>.  Neither is
    required to run the resulting binaries; they are needed only for
    creating the binaries.
   </para>
____________________________________________________________________________-->
   <para>
    原生 Windows 移植要求一个 Windows 2000 或更高的 32 或 64 位版本。早期的操作系统没有足够的基础设施（但 Cygwin可以用在它们之上）。类 Unix 的编译工具 MinGW 和 MSYS（一个 Unix 工具集合，用于运行如<command>configure</command>之类的 shell 脚本）可以从<ulink url="http://www.mingw.org/"></ulink>下载。运行结果二进制两者都需要，它们只在创建二进制时需要。
   </para>

<!--==========================orignal english content==========================
   <para>
     To build 64 bit binaries using MinGW, install the 64 bit tool set
     from <ulink url="http://mingw-w64.sourceforge.net/"></ulink>, put its bin
     directory in the <envar>PATH</envar>, and run
     <command>configure</command> with the
     <command>-&minus;host=x86_64-w64-mingw32</command> option.
   </para>
____________________________________________________________________________-->
   <para>
     要使用 MinGW 编译 64 位二进制，从<ulink url="http://mingw-w64.sourceforge.net/"></ulink>安装 64 位工具。把它放在<envar>PATH</envar>中的 bin 目录，并且使用<command>--host=x86_64-w64-mingw32</command>选项运行<command>configure</command>.
   </para>

<!--==========================orignal english content==========================
   <para>
    After you have everything installed, it is suggested that you
    run <application>psql</application>
    under <command>CMD.EXE</command>, as the MSYS console has
    buffering issues.
   </para>
____________________________________________________________________________-->
   <para>
    在你安装完所有的东西之后，我们建议你在<command>CMD.EXE</command>下运行<application>psql</application>，因为 MSYS 控制台有缓冲问题。
   </para>

   <sect3 id="windows-crash-dumps">
<!--==========================orignal english content==========================
    <title>Collecting Crash Dumps on Windows</title>
____________________________________________________________________________-->
    <title>在 Windows 上收集崩溃转储</title>

<!--==========================orignal english content==========================
    <para>
     If PostgreSQL on Windows crashes, it has the ability to generate
     <productname>minidumps</> that can be used to track down the cause
     for the crash, similar to core dumps on Unix. These dumps can be
     read using the <productname>Windows Debugger Tools</> or using
     <productname>Visual Studio</>. To enable the generation of dumps
     on Windows, create a subdirectory named <filename>crashdumps</filename>
     inside the cluster data directory. The dumps will then be written
     into this directory with a unique name based on the identifier of
     the crashing process and the current time of the crash.
    </para>
____________________________________________________________________________-->
    <para>
     如果 PostgreSQL 在 Windows 上崩溃，它有能力产生<productname>minidumps</productname>，这可以被用来追踪崩溃发生的原因，这与 Unix 上的核心转储相似。这些转储可以被使用<productname>Windows Debugger Tools</productname>或<productname>Visual Studio</productname>读取。要启用在 Windows 上的转储生成，可在集簇数据目录下创建一个名为<filename>crashdumps</filename>的子目录。转储将被写入到这个目录，转储的名字基于崩溃进程的标识符和崩溃的当前时间来确定。
    </para>
   </sect3>
  </sect2>

  <sect2 id="installation-notes-solaris">
<!--==========================orignal english content==========================
   <title>Solaris</title>
____________________________________________________________________________-->
   <title>Solaris</title>

<!--==========================orignal english content==========================
   <indexterm zone="installation-notes-solaris">
    <primary>Solaris</primary>
    <secondary>installation on</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="installation-notes-solaris">
    <primary>Solaris</primary>
    <secondary>installation on</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    PostgreSQL is well-supported on Solaris.  The more up to date your
    operating system, the fewer issues you will experience; details
    below.
   </para>
____________________________________________________________________________-->
   <para>
    PostgreSQL 在 Solaris 上得到了很好的支持。你的操作系统越新，你将会碰到更少的问题；细节如下。
   </para>

   <sect3>
<!--==========================orignal english content==========================
    <title>Required Tools</title>
____________________________________________________________________________-->
    <title>要求的工具</title>

<!--==========================orignal english content==========================
    <para>
     You can build with either GCC or Sun's compiler suite.  For
     better code optimization, Sun's compiler is strongly recommended
     on the SPARC architecture.  We have heard reports of problems
     when using GCC 2.95.1; GCC 2.95.3 or later is recommended.  If
     you are using Sun's compiler, be careful not to select
     <filename>/usr/ucb/cc</filename>;
     use <filename>/opt/SUNWspro/bin/cc</filename>.
    </para>
____________________________________________________________________________-->
    <para>
     你可以使用 GCC 或 Sun 的编译器套件进行编译。为了更好的代码优化，我们强烈推荐在 SPARC 架构下使用 Sun 的编译器。我们已经得到一些使用 GCC 2.95.1 时的问题报告；我们推荐 GCC 2.95.3 或之后的版本。如果你正在使用 Sun 的编译器，注意不要选择<filename>/usr/ucb/cc</filename>；而是使用<filename>/opt/SUNWspro/bin/cc</filename>。
    </para>

<!--==========================orignal english content==========================
    <para>
     You can download Sun Studio
     from <ulink url="http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>.
     Many of GNU tools are integrated into Solaris 10, or they are
     present on the Solaris companion CD.  If you like packages for
     older version of Solaris, you can find these tools
     at <ulink url="http://www.sunfreeware.com"></ulink>.
     If you prefer
     sources, look
     at <ulink url="http://www.gnu.org/order/ftp.html"></ulink>.
    </para>
____________________________________________________________________________-->
    <para>
     你可以从<ulink url="http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>下载 Sun Studio。很多 GNU 工具都被整合到了 Solaris 10，或者它们在 Solaris companion CD 中。如果你喜欢用于老版本 Solaris 的包，你可以在<ulink url="http://www.sunfreeware.com"></ulink>找到这些工具。如果你想要源码，在<ulink url="http://www.gnu.org/order/ftp.html"></ulink>上找找。
    </para>
   </sect3>

   <sect3>
<!--==========================orignal english content==========================
    <title>configure Complains About a Failed Test Program</title>
____________________________________________________________________________-->
    <title>configure 抱怨一个失败的测试程序</title>

<!--==========================orignal english content==========================
    <para>
     If <command>configure</command> complains about a failed test
     program, this is probably a case of the run-time linker being
     unable to find some library, probably libz, libreadline or some
     other non-standard library such as libssl.  To point it to the
     right location, set the <envar>LDFLAGS</envar> environment
     variable on the <command>configure</command> command line, e.g.,
<programlisting>
configure ... LDFLAGS="-R /usr/sfw/lib:/opt/sfw/lib:/usr/local/lib"
</programlisting>
     See
     the <citerefentry><refentrytitle>ld</><manvolnum>1</></citerefentry>
     man page for more information.
    </para>
____________________________________________________________________________-->
    <para>
     如果<command>configure</command>抱怨一个失败的测试程序，可能的情况是运行时链接器无法找到某些库，可能是libz、libreadline或某些其他非标准库如 libssl。要向它指出正确的位置，在<command>configure</command>命令行上设置<envar>LDFLAGS</envar>环境变量，例如：
<programlisting>
configure ... LDFLAGS="-R /usr/sfw/lib:/opt/sfw/lib:/usr/local/lib"
</programlisting>
     更多信息可见<citerefentry><refentrytitle>ld</refentrytitle><manvolnum>1</manvolnum></citerefentry>手册页。
    </para>
   </sect3>

   <sect3>
<!--==========================orignal english content==========================
    <title>64-bit Build Sometimes Crashes</title>
____________________________________________________________________________-->
    <title>64-位编译有时会崩溃</title>

<!--==========================orignal english content==========================
    <para>
     On Solaris 7 and older, the 64-bit version of libc has a buggy
     <function>vsnprintf</function> routine, which leads to erratic
     core dumps in PostgreSQL.  The simplest known workaround is to
     force PostgreSQL to use its own version of <function>vsnprintf</function> rather than
     the library copy.  To do this, after you
     run <command>configure</command> edit a file produced by
     <command>configure</command>:
     In <filename>src/Makefile.global</filename>, change the line
<programlisting>
LIBOBJS =
</programlisting>
     to read
<programlisting>
LIBOBJS = snprintf.o
</programlisting>
     (There might be other files already listed in this variable.
     Order does not matter.)  Then build as usual.
    </para>
____________________________________________________________________________-->
    <para>
     在 Solaris 7 和更老的版本上，64-位版本的 libc 有一个有缺陷的<function>vsnprintf</function>例程，这导致 PostgreSQL 中不稳定的核心转储。最简单的已知解决方案是强制 PostgreSQL 使用它自己的<function>vsnprintf</function>版本而不是库中的拷贝。要这样做，运行<command>configure</command>之后编辑一个由<command>configure</command>产生的文件：
     在文件<filename>src/Makefile.global</filename>中将行
<programlisting>
LIBOBJS =
</programlisting>
     改成
<programlisting>
LIBOBJS = snprintf.o
</programlisting>
     （可能有其他文件已经被列在这个变量中。顺序无影响）。然后正常编译。
    </para>
   </sect3>

   <sect3>
<!--==========================orignal english content==========================
    <title>Compiling for Optimal Performance</title>
____________________________________________________________________________-->
    <title>为最优性能编译</title>

<!--==========================orignal english content==========================
    <para>
     On the SPARC architecture, Sun Studio is strongly recommended for
     compilation.  Try using the <option>-xO5</option> optimization
     flag to generate significantly faster binaries.  Do not use any
     flags that modify behavior of floating-point operations
     and <varname>errno</varname> processing (e.g.,
     <option>-fast</option>).  These flags could raise some
     nonstandard PostgreSQL behavior for example in the date/time
     computing.
    </para>
____________________________________________________________________________-->
    <para>
     在 SPARC 架构上，我们强烈推荐使用 Sun Studio来编译。尝试使用<option>-xO5</option>优化标志来生成显著加快的二进制。不要使用任何修改浮点操作和<varname>errno</varname>处理（例如<option>-fast</option>）行为的标志。这些标志可能会做出某些非标准 PostgreSQL 行为，例如在日期/时间计算中。
    </para>

<!--==========================orignal english content==========================
    <para>
     If you do not have a reason to use 64-bit binaries on SPARC,
     prefer the 32-bit version.  The 64-bit operations are slower and
     64-bit binaries are slower than the 32-bit variants.  And on
     other hand, 32-bit code on the AMD64 CPU family is not native,
     and that is why 32-bit code is significant slower on this CPU
     family.
    </para>
____________________________________________________________________________-->
    <para>
     如果你没有理由要使用 SPARC 上的 64 位二进制，最好用 32 位版本。64 位操作较慢并且 64 位二进制比其 32 位变体要慢。并且在另一方面，AMD64 CPU 家族上的32 位代码不是原生的，并且这也是问什么在这个 CPU 族中 32 位代码要明显地更慢。
    </para>
   </sect3>

   <sect3>
<!--==========================orignal english content==========================
    <title>Using DTrace for Tracing PostgreSQL</title>
____________________________________________________________________________-->
    <title>用 DTrace 来跟踪 PostgreSQL</title>

<!--==========================orignal english content==========================
    <para>
     Yes, using DTrace is possible.  See <![%standalone-include[the
     documentation]]>
     <![%standalone-ignore[<xref linkend="dynamic-trace">]]> for further
     information.
    </para>
____________________________________________________________________________-->
    <para>
     是的，可以使用 DTrace。详见<xref linkend="dynamic-trace"/>。
    </para>

<!--==========================orignal english content==========================
    <para>
     If you see the linking of the <command>postgres</command> executable abort with an
     error message like:
<screen>
Undefined                       first referenced
 symbol                             in file
AbortTransaction                    utils/probes.o
CommitTransaction                   utils/probes.o
ld: fatal: Symbol referencing errors. No output written to postgres
collect2: ld returned 1 exit status
make: *** [postgres] Error 1
</screen>
     your DTrace installation is too old to handle probes in static
     functions.  You need Solaris 10u4 or newer.
    </para>
____________________________________________________________________________-->
    <para>
     如果你看到<command>postgres</command>可执行程序的链接中断并且报出下面的错误消息：
<screen>
Undefined                       first referenced
 symbol                             in file
AbortTransaction                    utils/probes.o
CommitTransaction                   utils/probes.o
ld: fatal: Symbol referencing errors. No output written to postgres
collect2: ld returned 1 exit status
make: *** [postgres] Error 1
</screen>
     说明你的 DTrace 安装太旧，无法处理静态函数中的探测。你需要 Solaris 10u4 或更新的版本。
    </para>
   </sect3>
  </sect2>
 </sect1>

</chapter>

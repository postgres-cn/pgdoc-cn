<!-- doc/src/sgml/contrib-spi.sgml -->

<sect1 id="contrib-spi" xreflabel="spi">
<!--==========================orignal english content==========================
 <title>spi</title>
____________________________________________________________________________-->
 <title>spi</title>

<!--==========================orignal english content==========================
 <indexterm zone="contrib-spi">
  <primary>SPI</primary>
  <secondary>examples</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="contrib-spi">
  <primary>SPI</primary>
  <secondary>examples</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <application>spi</> module provides several workable examples
  of using the <link linkend="spi">Server Programming Interface</link>
  (<acronym>SPI</acronym>) and triggers.  While these functions are of some value in
  their own right, they are even more useful as examples to modify for
  your own purposes.  The functions are general enough to be used
  with any table, but you have to specify table and field names (as described
  below) while creating a trigger.
 </para>
____________________________________________________________________________-->
 <para>
  <application>spi</application>模块提供了多个可工作的使用<link linkend="spi">服务器编程接口</link>
  (<acronym>SPI</acronym>) 和触发器的例子。尽管这些例子的价值只对它们自己合适，它们甚至更有助于作为例子来修改达到你自己的目的。这些函数足够普通，可以与任何表一起使用，但是在创建一个触发器时你必须指定表名和域名（如下所述） 。
 </para>

<!--==========================orignal english content==========================
 <para>
  Each of the groups of functions described below is provided as a
  separately-installable extension.
 </para>
____________________________________________________________________________-->
 <para>
  下面描述的函数组中的每一个都作为一个独立可安装的扩展被提供。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>refint &mdash; Functions for Implementing Referential Integrity</title>
____________________________________________________________________________-->
  <title>refint &mdash; 用于实现参照完整性的函数</title>

<!--==========================orignal english content==========================
  <para>
   <function>check_primary_key()</> and
   <function>check_foreign_key()</> are used to check foreign key constraints.
   (This functionality is long since superseded by the built-in foreign
   key mechanism, of course, but the module is still useful as an example.)
  </para>
____________________________________________________________________________-->
  <para>
   <function>check_primary_key()</function>和<function>check_foreign_key()</function>被用来检查外键约束（当然，这个功能很早以前被内建的外建机制取代了，但是该模块还是可以用作一个例子）。
  </para>

<!--==========================orignal english content==========================
  <para>
   <function>check_primary_key()</> checks the referencing table.
   To use, create a <literal>BEFORE INSERT OR UPDATE</> trigger using this
   function on a table referencing another table. Specify as the trigger
   arguments: the referencing table's column name(s) which form the foreign
   key, the referenced table name, and the column names in the referenced table
   which form the primary/unique key.  To handle multiple foreign
   keys, create a trigger for each reference.
  </para>
____________________________________________________________________________-->
  <para>
   <function>check_primary_key()</function>检查引用表。用法是使用这个函数在一个引用其他表的表上创建一个<literal>BEFORE INSERT OR UPDATE</literal>触发器。指定该触发器的参数为：引用表中构成外键的列名、被引用表名称以及在被引用表中构成主键/唯一键的列名。要处理多个外键，请为每一个引用创建一个触发器。
  </para>

<!--==========================orignal english content==========================
  <para>
   <function>check_foreign_key()</> checks the referenced table.
   To use, create a <literal>BEFORE DELETE OR UPDATE</> trigger using this
   function on a table referenced by other table(s).  Specify as the trigger
   arguments: the number of referencing tables for which the function has to
   perform checking, the action if a referencing key is found
   (<literal>cascade</> &mdash; to delete the referencing row,
   <literal>restrict</> &mdash; to abort transaction if referencing keys
   exist, <literal>setnull</> &mdash; to set referencing key fields to null),
   the triggered table's column names which form the primary/unique key, then
   the referencing table name and column names (repeated for as many
   referencing tables as were specified by first argument).  Note that the
   primary/unique key columns should be marked NOT NULL and should have a
   unique index.
  </para>
____________________________________________________________________________-->
  <para>
   <function>check_foreign_key()</function>检查被引用表。用法是使用这个函数在一个被其他表引用的表上创建一个<literal>BEFORE DELETE OR UPDATE</literal>触发器。指定该触发器的参数为：该函数必须对其执行检查的引用表数量、找到一个引用键后的动作（<literal>cascade</literal> &mdash; 删除引用行，<literal>restrict</literal> &mdash; 如果引用键存在则中断事务，<literal>setnull</literal> &mdash; 设置引用键域为空）、触发器所在表中构成主键/唯一键的列名、引用表名称和列名称（第一个参数指定多少个引用表就重复多少次）。注意主键/唯一键列应该被标记为 NOT NULL 并且应该有一个唯一索引。
  </para>

<!--==========================orignal english content==========================
  <para>
   There are examples in <filename>refint.example</>.
  </para>
____________________________________________________________________________-->
  <para>
   <filename>refint.example</filename>中有一些例子。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>timetravel &mdash; Functions for Implementing Time Travel</title>
____________________________________________________________________________-->
  <title>timetravel &mdash; 实现时间旅行的函数</title>

<!--==========================orignal english content==========================
  <para>
   Long ago, <productname>PostgreSQL</> had a built-in time travel feature
   that kept the insert and delete times for each tuple.  This can be
   emulated using these functions.  To use these functions,
   you must add to a table two columns of <type>abstime</> type to store
   the date when a tuple was inserted (start_date) and changed/deleted
   (stop_date):

<programlisting>
CREATE TABLE mytab (
        ...             ...
        start_date      abstime,
        stop_date       abstime
        ...             ...
);
</programlisting>

   The columns can be named whatever you like, but in this discussion
   we'll call them start_date and stop_date.
  </para>
____________________________________________________________________________-->
  <para>
   很久以前，<productname>PostgreSQL</productname>有一个内建的时间旅行特性，它为每一个元组保留插入和删除时间。这能够用这些函数模拟。要使用这些函数，你必须为一个表增加两个<type>abstime</type>类型的列来存储元组被插入的日期（start_date）以及被改变/删除的日期（stop_date）：

<programlisting>
CREATE TABLE mytab (
        ...             ...
        start_date      abstime,
        stop_date       abstime
        ...             ...
);
</programlisting>

   这些列可以以你喜欢的方式命名，但是在这次讨论中我们称它们为 start_date 和 stop_date。
  </para>

<!--==========================orignal english content==========================
  <para>
   When a new row is inserted, start_date should normally be set to
   current time, and stop_date to <literal>infinity</>.  The trigger
   will automatically substitute these values if the inserted data
   contains nulls in these columns.  Generally, inserting explicit
   non-null data in these columns should only be done when re-loading
   dumped data.
  </para>
____________________________________________________________________________-->
  <para>
   当一个新行被插入时，start_date 通常应该被设置为当前时间，并且 stop_date 应当被设置为<literal>infinity</literal>。如果被插入的数据在这些列上包含空，触发器将自动替换这些值。通常，在这些列中插入显式非空数据的情况只有重新载入已转储数据。
  </para>

<!--==========================orignal english content==========================
  <para>
   Tuples with stop_date equal to <literal>infinity</> are <quote>valid
   now</quote>, and can be modified.  Tuples with a finite stop_date cannot
   be modified anymore &mdash; the trigger will prevent it.  (If you need
   to do that, you can turn off time travel as shown below.)
  </para>
____________________________________________________________________________-->
  <para>
   等于<literal>infinity</literal>的元组<quote>现在是合法的</quote>，并且能够被修改。具有有限 stop_date 的元组不能再被修改 &mdash; 触发器将阻止修改（如果你需要这样做，你可以按照下面展示的关闭时间旅行）。
  </para>

<!--==========================orignal english content==========================
  <para>
   For a modifiable row, on update only the stop_date in the tuple being
   updated will be changed (to current time) and a new tuple with the modified
   data will be inserted.  Start_date in this new tuple will be set to current
   time and stop_date to <literal>infinity</>.
  </para>
____________________________________________________________________________-->
  <para>
   对于一个可修改的行，更新时只有被更新元组的 stop_date 将被改变（为当前时间）并且将会插入一个带有被修改数据的新元组。在这个新元组中的 start_date 将被设置为当前时间而 stop_date 被设置为<literal>infinity</literal>。
  </para>

<!--==========================orignal english content==========================
  <para>
   A delete does not actually remove the tuple but only sets its stop_date
   to current time.
  </para>
____________________________________________________________________________-->
  <para>
   一次删除并非真正地移除元组，而只是将它的 stop_date 设置为当前时间。
  </para>

<!--==========================orignal english content==========================
  <para>
   To query for tuples <quote>valid now</quote>, include
   <literal>stop_date = 'infinity'</> in the query's WHERE condition.
   (You might wish to incorporate that in a view.)  Similarly, you can
   query for tuples valid at any past time with suitable conditions on
   start_date and stop_date.
  </para>
____________________________________________________________________________-->
  <para>
   要查询<quote>当前有效</quote>的元组，在查询的 WHERE 条件中包括<literal>stop_date = 'infinity'</literal>（你可能希望在一个视图中使用它）。类似地，你可以用 start_date 和 stop_date 上合适的条件来查询在任何过去时刻有效的元组。
  </para>

<!--==========================orignal english content==========================
  <para>
   <function>timetravel()</> is the general trigger function that supports
   this behavior.  Create a <literal>BEFORE INSERT OR UPDATE OR DELETE</>
   trigger using this function on each time-traveled table. Specify two
   trigger arguments: the actual
   names of the start_date and stop_date columns.
   Optionally, you can specify one to three more arguments, which must refer
   to columns of type <type>text</>.  The trigger will store the name of
   the current user into the first of these columns during INSERT, the
   second column during UPDATE, and the third during DELETE.
  </para>
____________________________________________________________________________-->
  <para>
   <function>timetravel()</function>是支持这种行为的通用触发器函数。使用这个函数在每一个需要时间旅行的表上创建一个<literal>BEFORE INSERT OR UPDATE OR DELETE</literal>触发器。指定两个触发器参数：start_date 和 stop_date 列的真实名称。可选地，你可以指定 1-3 个更多的参数，它们必须表示<type>text</type>类型的列。该触发器将会在 INSERT、UPDATE、DELETE 期间将当前用户名分别存储到第 1、2、3 列中。
  </para>

<!--==========================orignal english content==========================
  <para>
   <function>set_timetravel()</> allows you to turn time-travel on or off for
   a table.
   <literal>set_timetravel('mytab', 1)</> will turn TT ON for table <literal>mytab</>.
   <literal>set_timetravel('mytab', 0)</> will turn TT OFF for table <literal>mytab</>.
   In both cases the old status is reported.  While TT is off, you can modify
   the start_date and stop_date columns freely.  Note that the on/off status
   is local to the current database session &mdash; fresh sessions will
   always start out with TT ON for all tables.
  </para>
____________________________________________________________________________-->
  <para>
   <function>set_timetravel()</function>允许你在一个表上打开或关闭时间旅行。<literal>set_timetravel('mytab', 1)</literal>将为表<literal>mytab</literal>打开时间旅行。<literal>set_timetravel('mytab', 0)</literal>将为表<literal>mytab</literal>关闭时间旅行。在两种情况中都会报告旧的状态。当时间旅行被关闭时，你可以自由地修改 start_date 和 stop_date 列。注意开/关状态是对于当前数据库会话局部可见的 &mdash; 新会话开始时所有表上的时间旅行总是被打开的。
  </para>

<!--==========================orignal english content==========================
  <para>
   <function>get_timetravel()</> returns the TT state for a table without
   changing it.
  </para>
____________________________________________________________________________-->
  <para>
   <function>get_timetravel()</function>返回一个表的时间旅行状态，但不会改变它。
  </para>

<!--==========================orignal english content==========================
  <para>
   There is an example in <filename>timetravel.example</>.
  </para>
____________________________________________________________________________-->
  <para>
   在<filename>timetravel.example</filename>中有一个例子。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>autoinc &mdash; Functions for Autoincrementing Fields</title>
____________________________________________________________________________-->
  <title>autoinc &mdash; 用于自增域的函数</title>

<!--==========================orignal english content==========================
  <para>
   <function>autoinc()</> is a trigger that stores the next value of
   a sequence into an integer field.  This has some overlap with the
   built-in <quote>serial column</> feature, but it is not the same:
   <function>autoinc()</> will override attempts to substitute a
   different field value during inserts, and optionally it can be
   used to increment the field during updates, too.
  </para>
____________________________________________________________________________-->
  <para>
   <function>autoinc()</function>是一个将序列的下一个值存储到一个整数域的触发器。这和内建的<quote>序数列</quote>特性有些重叠，但是它并不完全一样：<function>autoinc()</function>在插入时会覆盖掉给出的不同域值，并且它可被选择用来在更新时增加域。
  </para>

<!--==========================orignal english content==========================
  <para>
   To use, create a <literal>BEFORE INSERT</> (or optionally <literal>BEFORE
   INSERT OR UPDATE</>) trigger using this function.  Specify two
   trigger arguments: the name of the integer column to be modified,
   and the name of the sequence object that will supply values.
   (Actually, you can specify any number of pairs of such names, if
   you'd like to update more than one autoincrementing column.)
  </para>
____________________________________________________________________________-->
  <para>
   用法是使用这个函数创建一个<literal>BEFORE INSERT</literal>（或者<literal>BEFORE INSERT OR UPDATE</literal>）触发器。指定两个触发器参数：要被修改的整数列名和将提供值的序列对象名（事实上，如果你想要更新多于一个自增列，你可以指定任意数量的这种名称对）。
  </para>

<!--==========================orignal english content==========================
  <para>
   There is an example in <filename>autoinc.example</>.
  </para>
____________________________________________________________________________-->
  <para>
   在<filename>autoinc.example</filename>中有一个例子。
  </para>

 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>insert_username &mdash; Functions for Tracking Who Changed a Table</title>
____________________________________________________________________________-->
  <title>insert_username &mdash; 用于跟踪谁修改了一个表的函数</title>

<!--==========================orignal english content==========================
  <para>
   <function>insert_username()</> is a trigger that stores the current
   user's name into a text field.  This can be useful for tracking
   who last modified a particular row within a table.
  </para>
____________________________________________________________________________-->
  <para>
   <function>insert_username()</function>是存储当前用户名到一个文本域的触发器。这有助于跟踪是谁最后在一个表中修改了一个特定行。
  </para>

<!--==========================orignal english content==========================
  <para>
   To use, create a <literal>BEFORE INSERT</> and/or <literal>UPDATE</>
   trigger using this function.  Specify a single trigger
   argument: the name of the text column to be modified.
  </para>
____________________________________________________________________________-->
  <para>
   用法是使用这个函数创建一个<literal>BEFORE INSERT</literal>以及/或者<literal>UPDATE</literal>触发器。指定一个触发器参数：要被修改的文本列名。
  </para>

<!--==========================orignal english content==========================
  <para>
   There is an example in <filename>insert_username.example</>.
  </para>
____________________________________________________________________________-->
  <para>
   在<filename>insert_username.example</filename>中有一个例子。
  </para>

 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>moddatetime &mdash; Functions for Tracking Last Modification Time</title>
____________________________________________________________________________-->
  <title>moddatetime &mdash; 用于跟踪上一次修改时间的函数</title>

<!--==========================orignal english content==========================
  <para>
   <function>moddatetime()</> is a trigger that stores the current
   time into a <type>timestamp</> field.  This can be useful for tracking
   the last modification time of a particular row within a table.
  </para>
____________________________________________________________________________-->
  <para>
   <function>moddatetime()</function>是一个存储当前时间到一个<type>timestamp</type>域的触发器。它有助于跟踪一个表中特定行最后一次的修改时间。
  </para>

<!--==========================orignal english content==========================
  <para>
   To use, create a <literal>BEFORE UPDATE</>
   trigger using this function.  Specify a single trigger
   argument: the name of the column to be modified.
   The column must be of type <type>timestamp</> or <type>timestamp with
   time zone</>.
  </para>
____________________________________________________________________________-->
  <para>
   用法是使用这个函数创建一个<literal>BEFORE UPDATE</literal>触发器。指定一个触发器参数：要被修改的列名。该列必须是类型<type>timestamp</type>或者<type>timestamp with time zone</type>。
  </para>

<!--==========================orignal english content==========================
  <para>
   There is an example in <filename>moddatetime.example</>.
  </para>
____________________________________________________________________________-->
  <para>
   在<filename>moddatetime.example</filename>中有一个例子。
  </para>

 </sect2>

</sect1>

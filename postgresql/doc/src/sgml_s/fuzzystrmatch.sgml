<!-- doc/src/sgml/fuzzystrmatch.sgml -->

<sect1 id="fuzzystrmatch" xreflabel="fuzzystrmatch">
<!--==========================orignal english content==========================
 <title>fuzzystrmatch</title>
____________________________________________________________________________-->
 <title>fuzzystrmatch</title>

<!--==========================orignal english content==========================
 <indexterm zone="fuzzystrmatch">
  <primary>fuzzystrmatch</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="fuzzystrmatch">
  <primary>fuzzystrmatch</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>fuzzystrmatch</> module provides several
  functions to determine similarities and distance between strings.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>fuzzystrmatch</filename>模块提供多个函数来判断字符串之间的相似性和距离。
 </para>

 <caution>
<!--==========================orignal english content==========================
  <para>
   At present, the <function>soundex</>, <function>metaphone</>,
   <function>dmetaphone</>, and <function>dmetaphone_alt</> functions do
   not work well with multibyte encodings (such as UTF-8).
  </para>
____________________________________________________________________________-->
  <para>
   当前，<function>soundex</function>、<function>metaphone</function>、<function>dmetaphone</function>和<function>dmetaphone_alt</function>函数使用多字节编码（例如 UTF-8）下工作得不好。
  </para>
 </caution>

 <sect2>
<!--==========================orignal english content==========================
  <title>Soundex</title>
____________________________________________________________________________-->
  <title>Soundex</title>

<!--==========================orignal english content==========================
  <para>
   The Soundex system is a method of matching similar-sounding names
   by converting them to the same code.  It was initially used by the
   United States Census in 1880, 1900, and 1910.  Note that Soundex
   is not very useful for non-English names.
  </para>
____________________________________________________________________________-->
  <para>
   语音表示法系统是一种将相似发音的名字转换成相同的代码来匹配它们的方法。这最初由美国国家统计局在 1880 年、1900 年和 1910 年使用。注意语音表示法对于非英语名称不是很有用。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <filename>fuzzystrmatch</> module provides two functions
   for working with Soundex codes:
  </para>
____________________________________________________________________________-->
  <para>
   <filename>fuzzystrmatch</filename>模块提供了两个函数用于语音表示法代码：
  </para>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>soundex</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>soundex</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>difference</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>difference</primary>
  </indexterm>

<!--==========================orignal english content==========================
<synopsis>
soundex(text) returns text
difference(text, text) returns int
</synopsis>
____________________________________________________________________________-->
<synopsis>
soundex(text) 返回 text
difference(text, text) 返回 int
</synopsis>

<!--==========================orignal english content==========================
  <para>
   The <function>soundex</> function converts a string to its Soundex code.
   The <function>difference</> function converts two strings to their Soundex
   codes and then reports the number of matching code positions.  Since
   Soundex codes have four characters, the result ranges from zero to four,
   with zero being no match and four being an exact match.  (Thus, the
   function is misnamed &mdash; <function>similarity</> would have been
   a better name.)
  </para>
____________________________________________________________________________-->
  <para>
   <function>soundex</function>函数将一个字符串转换成它的语音表示法代码。<function>difference</function>函数将两个字符串转换成它们的语音表示法代码并且接着报告能匹配代码位置的数量。由于语音表示法代码具有四个字符，结果可以从零到四，零表示没有匹配而四表示完全匹配（因此这个函数的命名并不适当 &mdash; <function>similarity</function>才是更合适的名称）。
  </para>

<!--==========================orignal english content==========================
  <para>
   Here are some usage examples:
  </para>
____________________________________________________________________________-->
  <para>
   这里有一些例子：
  </para>

<!--==========================orignal english content==========================
<programlisting>
SELECT soundex('hello world!');

SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');
SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');
SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');

CREATE TABLE s (nm text);

INSERT INTO s VALUES ('john');
INSERT INTO s VALUES ('joan');
INSERT INTO s VALUES ('wobbly');
INSERT INTO s VALUES ('jack');

SELECT * FROM s WHERE soundex(nm) = soundex('john');

SELECT * FROM s WHERE difference(s.nm, 'john') &gt; 2;
</programlisting>
____________________________________________________________________________-->
<programlisting>
SELECT soundex('hello world!');

SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');
SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');
SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');

CREATE TABLE s (nm text);

INSERT INTO s VALUES ('john');
INSERT INTO s VALUES ('joan');
INSERT INTO s VALUES ('wobbly');
INSERT INTO s VALUES ('jack');

SELECT * FROM s WHERE soundex(nm) = soundex('john');

SELECT * FROM s WHERE difference(s.nm, 'john') &gt; 2;
</programlisting>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Levenshtein</title>
____________________________________________________________________________-->
  <title>Levenshtein</title>

<!--==========================orignal english content==========================
  <para>
   This function calculates the Levenshtein distance between two strings:
  </para>
____________________________________________________________________________-->
  <para>
   这个函数计算两个字符串之间的编辑距离。
  </para>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>levenshtein</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>levenshtein</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>levenshtein_less_equal</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>levenshtein_less_equal</primary>
  </indexterm>

<!--==========================orignal english content==========================
<synopsis>
levenshtein(text source, text target, int ins_cost, int del_cost, int sub_cost) returns int
levenshtein(text source, text target) returns int
levenshtein_less_equal(text source, text target, int ins_cost, int del_cost, int sub_cost, int max_d) returns int
levenshtein_less_equal(text source, text target, int max_d) returns int
</synopsis>
____________________________________________________________________________-->
<synopsis>
levenshtein(text source, text target, int ins_cost, int del_cost, int sub_cost) 返回 int
levenshtein(text source, text target) 返回 int
levenshtein_less_equal(text source, text target, int ins_cost, int del_cost, int sub_cost, int max_d) 返回 int
levenshtein_less_equal(text source, text target, int max_d) 返回 int
</synopsis>

<!--==========================orignal english content==========================
  <para>
   Both <literal>source</literal> and <literal>target</literal> can be any
   non-null string, with a maximum of 255 characters.  The cost parameters
   specify how much to charge for a character insertion, deletion, or
   substitution, respectively.  You can omit the cost parameters, as in
   the second version of the function; in that case they all default to 1.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>source</literal>以及<literal>target</literal>都可以是任何非空字符串，
   最长为 255 个字符。代价参数分别指定一个字符插入、删除或替换的开销。
   你可以像这个函数的第二种版本那样忽略代价参数，那样它们都会默认为 1。
  </para>

<!--==========================orignal english content==========================
  <para>
   <function>levenshtein_less_equal</function> is an accelerated version of the
   Levenshtein function for use when only small distances are of interest.
   If the actual distance is less than or equal to <literal>max_d</>,
   then <function>levenshtein_less_equal</function> returns the correct
   distance; otherwise it returns some value greater than <literal>max_d</>.
   If <literal>max_d</> is negative then the behavior is the same as
   <function>levenshtein</function>.
  </para>
____________________________________________________________________________-->
  <para>
   <function>levenshtein_less_equal</function>是 Levenshtein 函数的速度更快
   的版本，它被用于只对小距离感兴趣的情况。如果实际距离小于等于<literal>max_d</literal>，
   那么<function>levenshtein_less_equal</function>返回正确的距离。否则它返回某个
   大于<literal>max_d</literal>的值。如果<literal>max_d</literal>是负值，那么其行为等同于
   <function>levenshtein</function>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Examples:
  </para>
____________________________________________________________________________-->
  <para>
   例子：
  </para>

<!--==========================orignal english content==========================
<screen>
test=# SELECT levenshtein('GUMBO', 'GAMBOL');
 levenshtein
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
           2
(1 row)

test=# SELECT levenshtein('GUMBO', 'GAMBOL', 2,1,1);
 levenshtein
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
           3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',2);
 levenshtein_less_equal
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
                      3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',4);
 levenshtein_less_equal
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
                      4
(1 row)
</screen>
____________________________________________________________________________-->
<screen>
test=# SELECT levenshtein('GUMBO', 'GAMBOL');
 levenshtein
-------------
           2
(1 row)

test=# SELECT levenshtein('GUMBO', 'GAMBOL', 2,1,1);
 levenshtein
-------------
           3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',2);
 levenshtein_less_equal
------------------------
                      3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',4);
 levenshtein_less_equal
------------------------
                      4
(1 row)
</screen>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Metaphone</title>
____________________________________________________________________________-->
  <title>Metaphone</title>

<!--==========================orignal english content==========================
  <para>
   Metaphone, like Soundex, is based on the idea of constructing a
   representative code for an input string.  Two strings are then
   deemed similar if they have the same codes.
  </para>
____________________________________________________________________________-->
  <para>
   和 Soundex 相似，Metaphone 的思想是构建一个输入字符串的一种代码。如果两个字符串具有相同的代码则认为它们相似。
  </para>

<!--==========================orignal english content==========================
  <para>
   This function calculates the metaphone code of an input string:
  </para>
____________________________________________________________________________-->
  <para>
   这个函数计算一个输入字符串的变音位代码：
  </para>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>metaphone</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>metaphone</primary>
  </indexterm>

<!--==========================orignal english content==========================
<synopsis>
metaphone(text source, int max_output_length) returns text
</synopsis>
____________________________________________________________________________-->
<synopsis>
metaphone(text source, int max_output_length) 返回 text
</synopsis>

<!--==========================orignal english content==========================
  <para>
   <literal>source</literal> has to be a non-null string with a maximum of
   255 characters.  <literal>max_output_length</literal> sets the maximum
   length of the output metaphone code; if longer, the output is truncated
   to this length.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>source</literal>必须是一个非空字符串，最大长度为 255 个字符。<literal>max_output_length</literal>设置输出的变音位代码的最大长度，如果超长，输出会被截断到这个长度。
  </para>

<!--==========================orignal english content==========================
  <para>
   Example:
  </para>
____________________________________________________________________________-->
  <para>
   例子：
  </para>

<!--==========================orignal english content==========================
<screen>
test=# SELECT metaphone('GUMBO', 4);
 metaphone
-&minus;-&minus;-&minus;-&minus;-&minus;-
 KM
(1 row)
</screen>
____________________________________________________________________________-->
<screen>
test=# SELECT metaphone('GUMBO', 4);
 metaphone
-----------
 KM
(1 row)
</screen>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Double Metaphone</title>
____________________________________________________________________________-->
  <title>双 Metaphone</title>

<!--==========================orignal english content==========================
  <para>
   The Double Metaphone system computes two <quote>sounds like</> strings
   for a given input string &mdash; a <quote>primary</> and an
   <quote>alternate</>.  In most cases they are the same, but for non-English
   names especially they can be a bit different, depending on pronunciation.
   These functions compute the primary and alternate codes:
  </para>
____________________________________________________________________________-->
  <para>
   双变音位系统为一个给定输入字符串计算两个<quote>听起来像的</quote>字符串 &mdash; 一个<quote>主要</quote>代码和一个<quote>次要</quote>代码。在大部分情况下它们是相同的，但是对于非英语名称它们可能有一点不同，这取决于发音。这些函数计算主要和次要代码：
  </para>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>dmetaphone</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>dmetaphone</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>dmetaphone_alt</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>dmetaphone_alt</primary>
  </indexterm>

<!--==========================orignal english content==========================
<synopsis>
dmetaphone(text source) returns text
dmetaphone_alt(text source) returns text
</synopsis>
____________________________________________________________________________-->
<synopsis>
dmetaphone(text source) 返回 text
dmetaphone_alt(text source) 返回 text
</synopsis>

<!--==========================orignal english content==========================
  <para>
   There is no length limit on the input strings.
  </para>
____________________________________________________________________________-->
  <para>
   对输入字符串没有长度限制。
  </para>

<!--==========================orignal english content==========================
  <para>
   Example:
  </para>
____________________________________________________________________________-->
  <para>
   例子：
  </para>

<!--==========================orignal english content==========================
<screen>
test=# SELECT dmetaphone('gumbo');
 dmetaphone
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 KMP
(1 row)
</screen>
____________________________________________________________________________-->
<screen>
test=# SELECT dmetaphone('gumbo');
 dmetaphone
------------
 KMP
(1 row)
</screen>
 </sect2>

</sect1>

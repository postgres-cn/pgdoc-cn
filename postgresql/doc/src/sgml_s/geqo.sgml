<!-- doc/src/sgml/geqo.sgml -->

 <chapter id="geqo">  

<!--==========================orignal english content==========================
  <title>Genetic Query Optimizer</title>
____________________________________________________________________________-->
  <title>遗传查询优化器</title>

<!--==========================orignal english content==========================
  <para>
   <note>
    <title>Author</title>
    <para>
     Written by Martin Utesch (<email>utesch@aut.tu-freiberg.de</email>)
     for the Institute of Automatic Control at the University of Mining and Technology in Freiberg, Germany.
    </para>
   </note>
  </para>
____________________________________________________________________________-->
  <para>
   <note>
    <title>作者</title>
    <para>
     Written by Martin Utesch (<email>utesch@aut.tu-freiberg.de</email>)
     for the Institute of Automatic Control at the University of Mining and Technology in Freiberg, Germany.
    </para>
   </note>
  </para>

  <sect1 id="geqo-intro">
<!--==========================orignal english content==========================
   <title>Query Handling as a Complex Optimization Problem</title>
____________________________________________________________________________-->
   <title>将查询处理看成是一个复杂的优化问题</title>

<!--==========================orignal english content==========================
   <para>
    Among all relational operators the most difficult one to process
    and optimize is the <firstterm>join</firstterm>. The number of
    possible query plans grows exponentially with the
    number of joins in the query. Further optimization effort is
    caused by the support of a variety of <firstterm>join
    methods</firstterm> (e.g., nested loop, hash join, merge join in
    <productname>PostgreSQL</productname>) to process individual joins
    and a diversity of <firstterm>indexes</firstterm> (e.g.,
    B-tree, hash, GiST and GIN in <productname>PostgreSQL</productname>) as
    access paths for relations.
   </para>
____________________________________________________________________________-->
   <para>
    在所有关系操作符中，最难于处理和优化的是<firstterm>连接</firstterm>。可能的查询计划数目以查询中连接数量的指数增长。对各种各样处理独立连接的<firstterm>连接方法</firstterm>（如<productname>PostgreSQL</productname>中的嵌套循环、哈希连接、归并连接）和多种关系访问方法的<firstterm>indexes</firstterm>（如<productname>PostgreSQL</productname>中的 B 树、哈希、GiST 和 GIN）的支持也进一步加重了优化的负担。
   </para>

<!--==========================orignal english content==========================
   <para>
    The normal <productname>PostgreSQL</productname> query optimizer
    performs a <firstterm>near-exhaustive search</firstterm> over the
    space of alternative strategies. This algorithm, first introduced
    in IBM's System R database, produces a near-optimal join order,
    but can take an enormous amount of time and memory space when the
    number of joins in the query grows large. This makes the ordinary
    <productname>PostgreSQL</productname> query optimizer
    inappropriate for queries that join a large number of tables.
   </para>
____________________________________________________________________________-->
   <para>
    通常的<productname>PostgreSQL</productname>查询优化器会执行一次在可选策略空间上的<firstterm>近似穷举搜索</firstterm>。这个算法最早由 IBM 的系统 R 数据库引入，它能产生接近最优的连接顺序，但是当查询中的连接数增长到很大时，该算法需要大量的时间和内存空间。这使得普通的<productname>PostgreSQL</productname>查询优化器不适合需要连接大量表的查询。
   </para>

<!--==========================orignal english content==========================
   <para>
    The Institute of Automatic Control at the University of Mining and
    Technology, in Freiberg, Germany, encountered some problems when
    it wanted to use <productname>PostgreSQL</productname> as the
    backend for a decision support knowledge based system for the
    maintenance of an electrical power grid. The DBMS needed to handle
    large join queries for the inference machine of the knowledge
    based system. The number of joins in these queries made using the
    normal query optimizer infeasible.
   </para>
____________________________________________________________________________-->
   <para>
    德国弗莱堡的矿业大学自动控制学院在使用<productname>PostgreSQL</productname>作为电力网格维护决策支持知识系统的后端时遇到了一些问题。DBMS 需要为知识系统中的推理机器处理大量连接查询。这些查询中的连接数不可能用普通的查询优化器来处理。
   </para>

<!--==========================orignal english content==========================
   <para>
    In the following we describe the implementation of a
    <firstterm>genetic algorithm</firstterm> to solve the join
    ordering problem in a manner that is efficient for queries
    involving large numbers of joins.
   </para>
____________________________________________________________________________-->
   <para>
    接下来我们将介绍一种<firstterm>遗传算法</firstterm>的实现，它被用来以一种更有效率的方式为涉及大量连接的查询解决连接顺序问题。
   </para>
  </sect1>

  <sect1 id="geqo-intro2">
<!--==========================orignal english content==========================
   <title>Genetic Algorithms</title>
____________________________________________________________________________-->
   <title>遗传算法</title>

<!--==========================orignal english content==========================
   <para>
    The genetic algorithm (<acronym>GA</acronym>) is a heuristic optimization method which
    operates through randomized search. The set of possible solutions for the
    optimization problem is considered as a
    <firstterm>population</firstterm> of <firstterm>individuals</firstterm>.
    The degree of adaptation of an individual to its environment is specified
    by its <firstterm>fitness</firstterm>.
   </para>
____________________________________________________________________________-->
   <para>
    遗传算法（<acronym>GA</acronym>）是一种通过随机搜索操作的启发式优化方法。优化问题的可能的解决方案集合被看成是<firstterm>个体</firstterm>的<firstterm>种群</firstterm>。一个个体对于它的环境的适应程度由其<firstterm>适应度</firstterm>指定。
   </para>

<!--==========================orignal english content==========================
   <para>
    The coordinates of an individual in the search space are represented
    by <firstterm>chromosomes</firstterm>, in essence a set of character
    strings. A <firstterm>gene</firstterm> is a
    subsection of a chromosome which encodes the value of a single parameter
    being optimized. Typical encodings for a gene could be <firstterm>binary</firstterm> or
    <firstterm>integer</firstterm>.
   </para>
____________________________________________________________________________-->
   <para>
    搜索空间中一个个体的座标被表示为<firstterm>染色体</firstterm>，实质上是一个字符串集合。一个<firstterm>基因</firstterm>是一个染色体的一个片段，它编码了一个要被优化参数的值。一个基因的典型编码包括<firstterm>二进制</firstterm>或<firstterm>整数</firstterm>。
   </para>

<!--==========================orignal english content==========================
   <para>
    Through simulation of the evolutionary operations <firstterm>recombination</firstterm>,
    <firstterm>mutation</firstterm>, and
    <firstterm>selection</firstterm> new generations of search points are found
    that show a higher average fitness than their ancestors.
   </para>
____________________________________________________________________________-->
   <para>
    通过对<firstterm>重组</firstterm>、<firstterm>变异</firstterm>和<firstterm>选择</firstterm>的模拟，比父辈平均适应度更好的新一代搜索点将被找到。
   </para>

<!--==========================orignal english content==========================
   <para>
    According to the <systemitem class="resource">comp.ai.genetic</> <acronym>FAQ</acronym> it cannot be stressed too
    strongly that a <acronym>GA</acronym> is not a pure random search for a solution to a
    problem. A <acronym>GA</acronym> uses stochastic processes, but the result is distinctly
    non-random (better than random).
   </para>
____________________________________________________________________________-->
   <para>
    根据<systemitem class="resource">comp.ai.genetic</systemitem> <acronym>FAQ</acronym>，<acronym>GA</acronym>并非是一个纯粹的随机搜索。<acronym>GA</acronym>会使用随机处理，但是结果的确是非随机的（比随机好）。
   </para>

   <figure id="geqo-diagram">
<!--==========================orignal english content==========================
    <title>Structured Diagram of a Genetic Algorithm</title>
____________________________________________________________________________-->
    <title>一种遗传算法的结构图</title>

    <informaltable frame="none">
     <tgroup cols="2">
      <tbody>
<!--==========================orignal english content==========================
       <row>
        <entry>P(t)</entry>
        <entry>generation of ancestors at a time t</entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry>P(t)</entry>
        <entry>在时刻 t 的祖先代</entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry>P''(t)</entry>
        <entry>generation of descendants at a time t</entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry>P''(t)</entry>
        <entry>在时刻 t 的后代</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

<!--==========================orignal english content==========================
<literallayout class="monospaced">
+=========================================+
|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Algorithm GA  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;|
+=========================================+
| INITIALIZE t := 0                       |
+=========================================+
| INITIALIZE P(t)                         |
+=========================================+
| evaluate FITNESS of P(t)                |
+=========================================+
| while not STOPPING CRITERION do         |
|   +-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+
|   | P'(t)  := RECOMBINATION{P(t)}       |
|   +-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+
|   | P''(t) := MUTATION{P'(t)}           |
|   +-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+
|   | P(t+1) := SELECTION{P''(t) + P(t)}  |
|   +-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+
|   | evaluate FITNESS of P''(t)          |
|   +-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+
|   | t := t + 1                          |
+===+=====================================+
</literallayout>
____________________________________________________________________________-->
<literallayout class="monospaced">
+=========================================+
|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Algorithm GA  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;|
+=========================================+
| INITIALIZE t := 0                       |
+=========================================+
| INITIALIZE P(t)                         |
+=========================================+
| evaluate FITNESS of P(t)                |
+=========================================+
| while not STOPPING CRITERION do         |
|   +-------------------------------------+
|   | P'(t)  := RECOMBINATION{P(t)}       |
|   +-------------------------------------+
|   | P''(t) := MUTATION{P'(t)}           |
|   +-------------------------------------+
|   | P(t+1) := SELECTION{P''(t) + P(t)}  |
|   +-------------------------------------+
|   | evaluate FITNESS of P''(t)          |
|   +-------------------------------------+
|   | t := t + 1                          |
+===+=====================================+
</literallayout>
   </figure>
  </sect1>

  <sect1 id="geqo-pg-intro">
<!--==========================orignal english content==========================
   <title>Genetic Query Optimization (<acronym>GEQO</acronym>) in PostgreSQL</title>
____________________________________________________________________________-->
   <title>PostgreSQL 中的遗传查询优化（<acronym>GEQO</acronym>）</title>

<!--==========================orignal english content==========================
   <para>
    The <acronym>GEQO</acronym> module approaches the query
    optimization problem as though it were the well-known traveling salesman
    problem (<acronym>TSP</acronym>).
    Possible query plans are encoded as integer strings. Each string
    represents the join order from one relation of the query to the next.
    For example, the join tree
<literallayout class="monospaced">
   /\
  /\ 2
 /\ 3
4  1
</literallayout>
    is encoded by the integer string '4-1-3-2',
    which means, first join relation '4' and '1', then '3', and
    then '2', where 1, 2, 3, 4 are relation IDs within the
    <productname>PostgreSQL</productname> optimizer.
   </para>
____________________________________________________________________________-->
   <para>
    <acronym>GEQO</acronym>模块把查询优化问题当做著名的货郎担问题（<acronym>TSP</acronym>）来处理。可能的查询计划被编码为整数的串。每一个串表示从查询中一个关系到下一个关系的连接顺序。例如，连接树
<literallayout class="monospaced">
   /\
  /\ 2
 /\ 3
4  1
</literallayout>
    被编码为整数串 '4-1-3-2'，它表示首先连接关系 '4' 和 '1'，然后连接 '3'，最后连接 '2'。这里 1、2、3、4 是<productname>PostgreSQL</productname>优化器中的关系 ID。
   </para>

<!--==========================orignal english content==========================
   <para>
    Specific characteristics of the <acronym>GEQO</acronym>
    implementation in <productname>PostgreSQL</productname>
    are:

    <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>
       Usage of a <firstterm>steady state</firstterm> <acronym>GA</acronym> (replacement of the least fit
       individuals in a population, not whole-generational replacement)
       allows fast convergence towards improved query plans. This is
       essential for query handling with reasonable time;
      </para>
     </listitem>

     <listitem>
      <para>
       Usage of <firstterm>edge recombination crossover</firstterm>
       which is especially suited to keep edge losses low for the
       solution of the <acronym>TSP</acronym> by means of a
       <acronym>GA</acronym>;
      </para>
     </listitem>

     <listitem>
      <para>
       Mutation as genetic operator is deprecated so that no repair
       mechanisms are needed to generate legal <acronym>TSP</acronym> tours.
      </para>
     </listitem>
    </itemizedlist>
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>中<acronym>GEQO</acronym>实现的特点有：

    <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>
       一种<firstterm>稳态</firstterm> <acronym>GA</acronym>（在种群中替换适应度最差的个体，而不是整代替换）的使用允许对改进的查询计划快速收敛。这对在合理时间内处理查询是最重要的；
      </para>
     </listitem>

     <listitem>
      <para>
       <firstterm>边重组杂交</firstterm>的使用特别适合于通过<acronym>GA</acronym>为<acronym>TSP</acronym>的解决方案保持低丢边率；
      </para>
     </listitem>

     <listitem>
      <para>
       遗传操作符变异被废弃，这样不需要修补机制来产生合法的<acronym>TSP</acronym>旅行。
      </para>
     </listitem>
    </itemizedlist>
   </para>

<!--==========================orignal english content==========================
   <para>
    Parts of the <acronym>GEQO</acronym> module are adapted from D. Whitley's
    Genitor algorithm.
   </para>
____________________________________________________________________________-->
   <para>
    <acronym>GEQO</acronym>模块的一部分是从 D. Whitley 的遗传算法中改编而来。
   </para>

<!--==========================orignal english content==========================
   <para>
    The <acronym>GEQO</acronym> module allows
    the <productname>PostgreSQL</productname> query optimizer to
    support large join queries effectively through
    non-exhaustive search.
   </para>
____________________________________________________________________________-->
   <para>
    <acronym>GEQO</acronym>模块允许<productname>PostgreSQL</productname>查询优化器支持通过非穷举搜索高效地处理大量连接的查询。
   </para>

  <sect2>
<!--==========================orignal english content==========================
   <title>Generating Possible Plans with <acronym>GEQO</acronym></title>
____________________________________________________________________________-->
   <title>用<acronym>GEQO</acronym>产生可能的计划</title>

<!--==========================orignal english content==========================
   <para>
    The <acronym>GEQO</acronym> planning process uses the standard planner
    code to generate plans for scans of individual relations.  Then join
    plans are developed using the genetic approach.  As shown above, each
    candidate join plan is represented by a sequence in which to join
    the base relations.  In the initial stage, the <acronym>GEQO</acronym>
    code simply generates some possible join sequences at random.  For each
    join sequence considered, the standard planner code is invoked to
    estimate the cost of performing the query using that join sequence.
    (For each step of the join sequence, all three possible join strategies
    are considered; and all the initially-determined relation scan plans
    are available.  The estimated cost is the cheapest of these
    possibilities.)  Join sequences with lower estimated cost are considered
    <quote>more fit</> than those with higher cost.  The genetic algorithm
    discards the least fit candidates.  Then new candidates are generated
    by combining genes of more-fit candidates &mdash; that is, by using
    randomly-chosen portions of known low-cost join sequences to create
    new sequences for consideration.  This process is repeated until a
    preset number of join sequences have been considered; then the best
    one found at any time during the search is used to generate the finished
    plan.
   </para>
____________________________________________________________________________-->
   <para>
    <acronym>GEQO</acronym>规划处理使用标准的规划器代码来产生用于扫描个体关系的计划。然后使用遗传方法发展连接计划。如上所示，每一个候选连接计划被表示为一个连接基本关系的序列。在初始阶段，<acronym>GEQO</acronym>代码简单地随机产生某些可能的连接序列。对于被考虑的每一个连接序列，标准规划器代码被调用来估算使用该序列执行查询的代价（对于连接序列的每一步，所有三种连接策略都被考虑；并且所有初始决定的关系扫描计划都可用。估计的代价是这些可能性中最低的那个。）。具有较低估计代价的连接序列被认为比具有较高代价的<quote>更适合</quote>。遗传算法会丢弃最不适应的候选。然后通过组合更适合的候选的基因来产生新的候选 &mdash; 即使从已知代价低的连接序列随机选择片段来创建用于考虑的新序列。这个处理将被重复，直到已经考虑的连接序列的数量达到一个预设值。然后在搜索中任何时候找到的最好的一个将被用来产生最终的计划。
   </para>

<!--==========================orignal english content==========================
   <para>
    This process is inherently nondeterministic, because of the randomized
    choices made during both the initial population selection and subsequent
    <quote>mutation</> of the best candidates.  To avoid surprising changes
    of the selected plan, each run of the GEQO algorithm restarts its
    random number generator with the current <xref linkend="guc-geqo-seed">
    parameter setting.  As long as <varname>geqo_seed</> and the other
    GEQO parameters are kept fixed, the same plan will be generated for a
    given query (and other planner inputs such as statistics).  To experiment
    with different search paths, try changing <varname>geqo_seed</>.
   </para>
____________________________________________________________________________-->
   <para>
    由于在初始种群选择和后续最佳候选的<quote>变异</quote>过程中都采用了随机选择，所以这种处理天生就是非确定性的。要避免被选中计划发生出乎意料的改变，每次 GEQO 算法的运行都会使用当前<xref linkend="guc-geqo-seed"/>参数设置来重启它的随机数生成器。只要<varname>geqo_seed</varname>以及其他 GEQO 参数保持固定（以及其他规划器输入，如统计信息），对一个给定的查询将产生相同的计划。要试验不同的搜索路径，可以尝试改变<varname>geqo_seed</varname>。
   </para>

  </sect2>

  <sect2 id="geqo-future">
<!--==========================orignal english content==========================
   <title>Future Implementation Tasks for
    <productname>PostgreSQL</> <acronym>GEQO</acronym></title>
____________________________________________________________________________-->
   <title><productname>PostgreSQL</productname> <acronym>GEQO</acronym>的未来实现任务</title>

<!--==========================orignal english content==========================
     <para>
      Work is still needed to improve the genetic algorithm parameter
      settings.
      In file <filename>src/backend/optimizer/geqo/geqo_main.c</filename>,
      routines
      <function>gimme_pool_size</function> and <function>gimme_number_generations</function>,
      we have to find a compromise for the parameter settings
      to satisfy two competing demands:
      <itemizedlist spacing="compact">
       <listitem>
        <para>
         Optimality of the query plan
        </para>
       </listitem>
       <listitem>
        <para>
         Computing time
        </para>
       </listitem>
      </itemizedlist>
     </para>
____________________________________________________________________________-->
     <para>
      仍需对改进遗传算法的参数设置做一些工作。在文件<filename>src/backend/optimizer/geqo/geqo_main.c</filename>、例程<function>gimme_pool_size</function>和<function>gimme_number_generations</function>中，我们必须为参数设置找到一种折中来满足两个互相竞争的需求：
      <itemizedlist spacing="compact">
       <listitem>
        <para>
         查询计划的最优性
        </para>
       </listitem>
       <listitem>
        <para>
         计算时间
        </para>
       </listitem>
      </itemizedlist>
     </para>

<!--==========================orignal english content==========================
     <para>
      In the current implementation, the fitness of each candidate join
      sequence is estimated by running the standard planner's join selection
      and cost estimation code from scratch.  To the extent that different
      candidates use similar sub-sequences of joins, a great deal of work
      will be repeated.  This could be made significantly faster by retaining
      cost estimates for sub-joins.  The problem is to avoid expending
      unreasonable amounts of memory on retaining that state.
     </para>
____________________________________________________________________________-->
     <para>
      在当前的实现中，每一个候选连接序列的适应度通过运行标准规划器的连接选择和代价估计代码从零估算而来。即使不同的候选中使用了相似的连接子序列，还是需要重复大量的工作。通过保留子连接的代价估计可以在这种情况下节省很多时间。但问题在于要避免为了保留那样的状态而不合理地占用过多内存。
     </para>

<!--==========================orignal english content==========================
     <para>
      At a more basic level, it is not clear that solving query optimization
      with a GA algorithm designed for TSP is appropriate.  In the TSP case,
      the cost associated with any substring (partial tour) is independent
      of the rest of the tour, but this is certainly not true for query
      optimization.  Thus it is questionable whether edge recombination
      crossover is the most effective mutation procedure.
     </para>
____________________________________________________________________________-->
     <para>
      在更基础的层面上，用一个为 TSP 设计的 GA 算法来解决查询优化问题是否合适也还需要探讨。在 TSP 情况中，与任何子串（部分旅程）相关的代价独立于剩余的旅程，但是对于查询优化肯定不是这样。因此边重组杂交是否比变异过程更有效还存有疑问。
     </para>

   </sect2>
  </sect1>

 <sect1 id="geqo-biblio">
<!--==========================orignal english content==========================
  <title>Further Reading</title>
____________________________________________________________________________-->
  <title>进一步阅读</title>

<!--==========================orignal english content==========================
  <para>
   The following resources contain additional information about
   genetic algorithms:

   <itemizedlist>
    <listitem>
     <para>
      <ulink url="http://www.aip.de/~ast/EvolCompFAQ/">
      The Hitch-Hiker's Guide to Evolutionary Computation</ulink>, (FAQ for <ulink
      url="news://comp.ai.genetic"></ulink>)
     </para>
    </listitem>

    <listitem>
     <para>
      <ulink url="http://www.red3d.com/cwr/evolve.html">
      Evolutionary Computation and its application to art and design</ulink>, by
      Craig Reynolds
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="ELMA04">
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="FONG">
     </para>
    </listitem>
   </itemizedlist>
  </para>
____________________________________________________________________________-->
  <para>
   下列资源包含关于遗传算法更多的信息：

   <itemizedlist>
    <listitem>
     <para>
      <ulink url="http://www.aip.de/~ast/EvolCompFAQ/">
      The Hitch-Hiker's Guide to Evolutionary Computation</ulink>, (FAQ for <ulink
      url="news://comp.ai.genetic"></ulink>)
     </para>
    </listitem>

    <listitem>
     <para>
      <ulink url="http://www.red3d.com/cwr/evolve.html">
      Evolutionary Computation and its application to art and design</ulink>, by
      Craig Reynolds
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="ELMA04"/>
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="FONG"/>
     </para>
    </listitem>
   </itemizedlist>
  </para>

 </sect1>
</chapter>

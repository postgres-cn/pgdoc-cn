<!-- doc/src/sgml/auto-explain.sgml -->

<sect1 id="auto-explain" xreflabel="auto_explain">
<!--==========================orignal english content==========================
 <title>auto_explain</title>
____________________________________________________________________________-->
 <title>auto_explain</title>

<!--==========================orignal english content==========================
 <indexterm zone="auto-explain">
  <primary>auto_explain</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="auto-explain">
  <primary>auto_explain</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>auto_explain</filename> module provides a means for
  logging execution plans of slow statements automatically, without
  having to run <xref linkend="sql-explain">
  by hand.  This is especially helpful for tracking down un-optimized queries
  in large applications.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>auto_explain</filename>模块提供了一种方式来自动记录慢速语句的执行计划，而不需
  要手工运行<xref linkend="sql-explain"/>。这在大型应用中追踪未被优化的查询时有用。
 </para>

<!--==========================orignal english content==========================
 <para>
  The module provides no SQL-accessible functions.  To use it, simply
  load it into the server.  You can load it into an individual session:

<programlisting>
LOAD 'auto_explain';
</programlisting>

  (You must be superuser to do that.)  More typical usage is to preload
  it into some or all sessions by including <literal>auto_explain</> in
  <xref linkend="guc-session-preload-libraries"> or
  <xref linkend="guc-shared-preload-libraries"> in
  <filename>postgresql.conf</>.  Then you can track unexpectedly slow queries
  no matter when they happen.  Of course there is a price in overhead for
  that.
 </para>
____________________________________________________________________________-->
 <para>
  该模块没有提供 SQL 可访问的函数。要使用它，简单地将它载入服务器。你可以把它载入到一个单独的
  会话：

<programlisting>
LOAD 'auto_explain';
</programlisting>

  （你必须作为超级用户来这样做）。更典型的用法是通过在<filename>postgresql.conf</filename>的<xref linkend="guc-session-preload-libraries"/>或<xref linkend="guc-shared-preload-libraries"/>参数中包括<literal>auto_explain</literal>将它预先
  载入到某些或者所有会话中。然后你就可以追踪那些出乎意料地慢的查询，而不管它们何时发生。当然为
  此会付出一些额外的负荷作为代价。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Configuration Parameters</title>
____________________________________________________________________________-->
  <title>配置参数</title>

<!--==========================orignal english content==========================
 <para>
  There are several configuration parameters that control the behavior of
  <filename>auto_explain</filename>.  Note that the default behavior is
  to do nothing, so you must set at least
  <varname>auto_explain.log_min_duration</varname> if you want any results.
 </para>
____________________________________________________________________________-->
 <para>
  有几个配置参数用来控制<filename>auto_explain</filename>的行为。注意默认行为是什么也不做，因此如果你想要任何结果就必须至少设置<varname>auto_explain.log_min_duration</varname>。
 </para>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>auto_explain.log_min_duration</varname> (<type>integer</type>)
     <indexterm>
      <primary><varname>auto_explain.log_min_duration</> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>auto_explain.log_min_duration</varname> (<type>integer</type>)
    <indexterm>
     <primary><varname>auto_explain.log_min_duration</varname>配置参数</primary>
    </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <varname>auto_explain.log_min_duration</varname> is the minimum statement
      execution time, in milliseconds, that will cause the statement's plan to
      be logged. Setting this to zero logs all plans. Minus-one (the default)
      disables logging of plans.  For example, if you set it to
      <literal>250ms</literal> then all statements that run 250ms or longer
      will be logged. Only superusers can change this setting.
     </para>
____________________________________________________________________________-->
     <para>
      <varname>auto_explain.log_min_duration</varname>是最小语句执行时间（以毫秒计），这将导致语句的计划被记录。设置这个参数为零将记录所有计划。负一（默认值）禁用记录计划。例如，如果你将它设置为<literal>250ms</literal>，则所有运行时间等于或超过 250ms 的语句将被记录。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>auto_explain.log_analyze</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_analyze</> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>auto_explain.log_analyze</varname> (<type>boolean</type>)
    <indexterm>
     <primary><varname>auto_explain.log_analyze</varname>配置参数</primary>
    </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <varname>auto_explain.log_analyze</varname> causes <command>EXPLAIN ANALYZE</>
      output, rather than just <command>EXPLAIN</> output, to be printed
      when an execution plan is logged. This parameter is off by default.
      Only superusers can change this setting.
     </para>
____________________________________________________________________________-->
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_analyze</varname>导致<command>EXPLAIN ANALYZE</command>输出（而不仅仅是<command>EXPLAIN</command>输出）被打印。默认情况下这个参数是关闭的。只有超级用户能够改变这个设置。
     </para>
     <note>
<!--==========================orignal english content==========================
      <para>
       When this parameter is on, per-plan-node timing occurs for all
       statements executed, whether or not they run long enough to actually
       get logged.  This can have an extremely negative impact on performance.
       Turning off <varname>auto_explain.log_timing</varname> ameliorates the
       performance cost, at the price of obtaining less information.
      </para>
____________________________________________________________________________-->
      <para>
       当这个参数为打开时，对所有被执行的语句将引起对每个计划节点的计时，不管它们是否运行得足够长以至于被记录。这可能对性能有极度负面的影响。
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>auto_explain.log_buffers</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_buffers</> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>auto_explain.log_buffers</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_buffers</varname>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <varname>auto_explain.log_buffers</varname> controls whether buffer
      usage statistics are printed when an execution plan is logged; it's
      equivalent to the <literal>BUFFERS</> option of <command>EXPLAIN</>.
      This parameter has no effect
      unless <varname>auto_explain.log_analyze</varname> is enabled.
      This parameter is off by default.
      Only superusers can change this setting.
     </para>
____________________________________________________________________________-->
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_buffers</varname>控制是否打印
      缓冲区使用统计信息；它等效于<command>EXPLAIN</command>的<literal>BUFFERS</literal>选项。除非
      <varname>auto_explain.log_analyze</varname>参数被设置，否则这个参数没有效果。这个参数默
      认情况下是关闭的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>auto_explain.log_timing</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_timing</> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>auto_explain.log_timing</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_timing</varname>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <varname>auto_explain.log_timing</varname> controls whether per-node
      timing information is printed when an execution plan is logged; it's
      equivalent to the <literal>TIMING</> option of <command>EXPLAIN</>.
      The overhead of repeatedly reading the system clock can slow down
      queries significantly on some systems, so it may be useful to set this
      parameter to off when only actual row counts, and not exact times, are
      needed.
      This parameter has no effect
      unless <varname>auto_explain.log_analyze</varname> is enabled.
      This parameter is on by default.
      Only superusers can change this setting.
     </para>
____________________________________________________________________________-->
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_timing</varname>控制是否打印每
      个结点上的计时信息；它等效于<command>EXPLAIN</command>的<literal>TIMING</literal>选项。重复读取
      系统锁的开销在某些系统上可能会显著地拖慢查询，因此当只需要实际行计数而非确切时间时，关闭
      这个参数将会很有帮助。只有当<varname>auto_explain.log_analyze</varname>也被启用
      时这个参数才有效。这个参数默认情况下是打开的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>auto_explain.log_triggers</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_triggers</> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>auto_explain.log_triggers</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_triggers</varname>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <varname>auto_explain.log_triggers</varname> causes trigger
      execution statistics to be included when an execution plan is logged.
      This parameter has no effect
      unless <varname>auto_explain.log_analyze</varname> is enabled.
      This parameter is off by default.
      Only superusers can change this setting.
     </para>
____________________________________________________________________________-->
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_triggers</varname>会导致触发
      器执行统计信息被包括在内。只有当<varname>auto_explain.log_analyze</varname>也被
      启用时这个参数才有效。这个参数默认情况下是关闭的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>auto_explain.log_verbose</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_verbose</> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>auto_explain.log_verbose</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_verbose</varname>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <varname>auto_explain.log_verbose</varname> controls whether verbose
      details are printed when an execution plan is logged; it's
      equivalent to the <literal>VERBOSE</> option of <command>EXPLAIN</>.
      This parameter is off by default.
      Only superusers can change this setting.
     </para>
____________________________________________________________________________-->
     <para>
      当一个执行计划被记录时，<varname>auto_explain.log_verbose</varname>控制是否打印很长的详细信息；它等效于<command>EXPLAIN</command>的<literal>VERBOSE</literal>选项。这个参数默认情况下是关闭的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>auto_explain.log_format</varname> (<type>enum</type>)
     <indexterm>
      <primary><varname>auto_explain.log_format</> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>auto_explain.log_format</varname> (<type>enum</type>)
     <indexterm>
      <primary><varname>auto_explain.log_format</varname>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <varname>auto_explain.log_format</varname> selects the
      <command>EXPLAIN</> output format to be used.
      The allowed values are <literal>text</literal>, <literal>xml</literal>,
      <literal>json</literal>, and <literal>yaml</literal>.  The default is text.
      Only superusers can change this setting.
     </para>
____________________________________________________________________________-->
     <para>
      <varname>auto_explain.log_format</varname>选择要使用的<command>EXPLAIN</command>输出格式。允许的值是<literal>text</literal>、<literal>xml</literal>、<literal>json</literal>和<literal>yaml</literal>。默认是文本形式。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>auto_explain.log_nested_statements</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_nested_statements</> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>auto_explain.log_nested_statements</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>auto_explain.log_nested_statements</varname>配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <varname>auto_explain.log_nested_statements</varname> causes nested
      statements (statements executed inside a function) to be considered
      for logging.  When it is off, only top-level query plans are logged. This
      parameter is off by default. Only superusers can change this setting.
     </para>
____________________________________________________________________________-->
     <para>
      <varname>auto_explain.log_nested_statements</varname>导致嵌套语句（在一个函数内执行的语句）会被考虑在记录范围之内。当它被关闭时，只有顶层查询计划被记录。这个参数默认情况下是关闭的。只有超级用户能够改变这个设置。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <varname>auto_explain.sample_rate</varname> (<type>real</type>)
     <indexterm>
      <primary><varname>auto_explain.sample_rate</> configuration parameter</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <varname>auto_explain.sample_rate</varname> (<type>real</type>)
     <indexterm>
      <primary><varname>auto_explain.sample_rate</varname> 配置参数</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <varname>auto_explain.sample_rate</varname> causes auto_explain to only
      explain a fraction of the statements in each session.  The default is 1,
      meaning explain all the queries.  In case of nested statements, either all
      will be explained or none. Only superusers can change this setting.
     </para>
____________________________________________________________________________-->
     <para>
      <varname>auto_explain.sample_rate</varname>会让 auto_explain 
      只解释每个会话中的一部分语句。默认值为 1，表示解释所有的查询。在嵌套
      语句的情况下，要么所有语句都被解释，要么一个也不被解释。只有超级用户
      能够更改这个设置。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

<!--==========================orignal english content==========================
  <para>
   In ordinary usage, these parameters are set
   in <filename>postgresql.conf</>, although superusers can alter them
   on-the-fly within their own sessions.
   Typical usage might be:
  </para>
____________________________________________________________________________-->
  <para>
   在普通用法中，这些参数都在<filename>postgresql.conf</filename>中设置，不过超级用户可以在他们自己的会话中随时修改这些参数。典型的用法可能是：
  </para>

<!--==========================orignal english content==========================
<programlisting>
# postgresql.conf
session_preload_libraries = 'auto_explain'

auto_explain.log_min_duration = '3s'
</programlisting>
____________________________________________________________________________-->
<programlisting>
# postgresql.conf
session_preload_libraries = 'auto_explain'

auto_explain.log_min_duration = '3s'
</programlisting>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Example</title>
____________________________________________________________________________-->
  <title>例子</title>

<!--==========================orignal english content==========================
<programlisting>
postgres=# LOAD 'auto_explain';
postgres=# SET auto_explain.log_min_duration = 0;
postgres=# SET auto_explain.log_analyze = true;
postgres=# SELECT count(*)
           FROM pg_class, pg_index
           WHERE oid = indrelid AND indisunique;
</programlisting>
____________________________________________________________________________-->
<programlisting>
postgres=# LOAD 'auto_explain';
postgres=# SET auto_explain.log_min_duration = 0;
postgres=# SET auto_explain.log_analyze = true;
postgres=# SELECT count(*)
           FROM pg_class, pg_index
           WHERE oid = indrelid AND indisunique;
</programlisting>

<!--==========================orignal english content==========================
  <para>
   This might produce log output such as:
  </para>
____________________________________________________________________________-->
  <para>
   这可能会产生这样的日志输出：
  </para>

<!--==========================orignal english content==========================
<screen><![CDATA[
LOG:  duration: 3.651 ms  plan:
  Query Text: SELECT count(*)
              FROM pg_class, pg_index
              WHERE oid = indrelid AND indisunique;
  Aggregate  (cost=16.79..16.80 rows=1 width=0) (actual time=3.626..3.627 rows=1 loops=1)
    ->  Hash Join  (cost=4.17..16.55 rows=92 width=0) (actual time=3.349..3.594 rows=92 loops=1)
          Hash Cond: (pg_class.oid = pg_index.indrelid)
          ->  Seq Scan on pg_class  (cost=0.00..9.55 rows=255 width=4) (actual time=0.016..0.140 rows=255 loops=1)
          ->  Hash  (cost=3.02..3.02 rows=92 width=4) (actual time=3.238..3.238 rows=92 loops=1)
                Buckets: 1024  Batches: 1  Memory Usage: 4kB
                ->  Seq Scan on pg_index  (cost=0.00..3.02 rows=92 width=4) (actual time=0.008..3.187 rows=92 loops=1)
                      Filter: indisunique
]]></screen>
____________________________________________________________________________-->
<screen><![CDATA[
LOG:  duration: 3.651 ms  plan:
  Query Text: SELECT count(*)
              FROM pg_class, pg_index
              WHERE oid = indrelid AND indisunique;
  Aggregate  (cost=16.79..16.80 rows=1 width=0) (actual time=3.626..3.627 rows=1 loops=1)
    ->  Hash Join  (cost=4.17..16.55 rows=92 width=0) (actual time=3.349..3.594 rows=92 loops=1)
          Hash Cond: (pg_class.oid = pg_index.indrelid)
          ->  Seq Scan on pg_class  (cost=0.00..9.55 rows=255 width=4) (actual time=0.016..0.140 rows=255 loops=1)
          ->  Hash  (cost=3.02..3.02 rows=92 width=4) (actual time=3.238..3.238 rows=92 loops=1)
                Buckets: 1024  Batches: 1  Memory Usage: 4kB
                ->  Seq Scan on pg_index  (cost=0.00..3.02 rows=92 width=4) (actual time=0.008..3.187 rows=92 loops=1)
                      Filter: indisunique
]]></screen>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Author</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>
  </para>
____________________________________________________________________________-->
  <para>
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>
  </para>
 </sect2>

</sect1>

<!-- doc/src/sgml/brin.sgml -->

<chapter id="brin">
<!--==========================orignal english content==========================
<title>BRIN Indexes</title>
____________________________________________________________________________-->
<title>BRIN 索引</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>index</primary>
    <secondary>BRIN</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>index</primary>
    <secondary>BRIN</secondary>
   </indexterm>

<sect1 id="brin-intro">
<!--==========================orignal english content==========================
 <title>Introduction</title>
____________________________________________________________________________-->
 <title>简介</title>

<!--==========================orignal english content==========================
 <para>
  <acronym>BRIN</acronym> stands for Block Range Index.
  <acronym>BRIN</acronym> is designed for handling very large tables
  in which certain columns have some natural correlation with their
  physical location within the table.
  A <firstterm>block range</firstterm> is a group of pages that are physically
  adjacent in the table; for each block range, some summary info is stored
  by the index.
  For example, a table storing a store's sale orders might have
  a date column on which each order was placed, and most of the time
  the entries for earlier orders will appear earlier in the table as well;
  a table storing a ZIP code column might have all codes for a city
  grouped together naturally.
 </para>
____________________________________________________________________________-->
 <para>
  <acronym>BRIN</acronym>表示块范围索引。 <acronym>BRIN</acronym>是为处理这样的表而设计的：表的规模非常大，并且其中某些列与它们在表中的物理位置存在某种自然关联。一个<firstterm>块范围</firstterm>是一组在表中物理上相邻的页面，对于每一个块范围在
  索引中存储了一些摘要信息。例如，一个存储商店销售订单的表可能有一个日期
  列记录每个订单产生的时间，并且很多时候较早的订单项也将出现在表中较早的
  地方。一个存储 ZIP 代码列的表中一个城市的所有代码可能自然地聚在一起。
 </para>

<!--==========================orignal english content==========================
 <para>
  <acronym>BRIN</acronym> indexes can satisfy queries via regular bitmap
  index scans, and will return all tuples in all pages within each range if
  the summary info stored by the index is <firstterm>consistent</firstterm> with the
  query conditions.
  The query executor is in charge of rechecking these tuples and discarding
  those that do not match the query conditions &mdash; in other words, these
  indexes are lossy.
  Because a <acronym>BRIN</acronym> index is very small, scanning the index
  adds little overhead compared to a sequential scan, but may avoid scanning
  large parts of the table that are known not to contain matching tuples.
 </para>
____________________________________________________________________________-->
 <para>
  如果索引中存储的摘要信息与查询条件<firstterm>一致</firstterm>，<acronym>BRIN</acronym>
  索引可以通过常规的位图索引扫描满足查询，并且将会返回每个范围中所有页面
  中的所有元组。查询执行器负责再次检查这些元组并且抛弃掉那些不匹配查询条
  件的元组 &mdash; 换句话说，这些索引是有损的。由于一个<acronym>BRIN</acronym>
  索引很小，扫描这种索引虽然比使用顺序扫描多出了一点点开销，但是可能会避
  免扫描表中很多已知不包含匹配元组的部分。
 </para>

<!--==========================orignal english content==========================
 <para>
  The specific data that a <acronym>BRIN</acronym> index will store,
  as well as the specific queries that the index will be able to satisfy,
  depend on the operator class selected for each column of the index.
  Data types having a linear sort order can have operator classes that
  store the minimum and maximum value within each block range, for instance;
  geometrical types might store the bounding box for all the objects
  in the block range.
 </para>
____________________________________________________________________________-->
 <para>
  一个<acronym>BRIN</acronym>索引将存储的特定数据以及该索引将能
  满足的特定查询，都依赖于为该索引的每一列所选择的操作符类。具有一种
  线性排序顺序的数据类型的操作符类可以存储在每个块范围内的最小和最大
  值，例如几何类型可能会存储在块范围内的所有对象的外包盒。
 </para>

<!--==========================orignal english content==========================
 <para>
  The size of the block range is determined at index creation time by
  the <literal>pages_per_range</literal> storage parameter.  The number of index
  entries will be equal to the size of the relation in pages divided by
  the selected value for <literal>pages_per_range</literal>.  Therefore, the smaller
  the number, the larger the index becomes (because of the need to
  store more index entries), but at the same time the summary data stored can
  be more precise and more data blocks can be skipped during an index scan.
 </para>
____________________________________________________________________________-->
 <para>
  块范围的尺寸在索引创建时由<literal>pages_per_range</literal>存储参数决定。
  索引项的数量将等于该关系的尺寸（以页面计）除以为
  <literal>pages_per_range</literal>选择的值。因此，该值越小，索引会变得越大
  （因为需要存储更多索引项），但是与此同时存储的摘要数据可以更加精确并
  且在索引扫描期间可以跳过更多数据块。
 </para>

 <sect2 id="brin-operation">
<!--==========================orignal english content==========================
  <title>Index Maintenance</title>
____________________________________________________________________________-->
  <title>索引维护</title>

<!--==========================orignal english content==========================
  <para>
   At the time of creation, all existing heap pages are scanned and a
   summary index tuple is created for each range, including the
   possibly-incomplete range at the end.
   As new pages are filled with data, page ranges that are already
   summarized will cause the summary information to be updated with data
   from the new tuples.
   When a new page is created that does not fall within the last
   summarized range, that range does not automatically acquire a summary
   tuple; those tuples remain unsummarized until a summarization run is
   invoked later, creating initial summaries.
   This process can be invoked manually using the
   <function>brin_summarize_range(regclass, bigint)</function> or
   <function>brin_summarize_new_values(regclass)</function> functions;
   automatically when <command>VACUUM</command> processes the table;
   or by automatic summarization executed by autovacuum, as insertions
   occur.  (This last trigger is disabled by default and can be enabled
   with the <literal>autosummarize</literal> parameter.)
   Conversely, a range can be de-summarized using the
   <function>brin_desummarize_range(regclass, bigint)</function> function,
   which is useful when the index tuple is no longer a very good
   representation because the existing values have changed.
  </para>
____________________________________________________________________________-->
  <para>
   在创建时，所有已有的堆页面将被扫描并且会为每一个范围创建一个摘要
   索引元组，对于末尾的可能不完整的范围也是这样做。随着新页面被数据填
   充，已经被创建摘要的页面范围的摘要信息会被来自新元组的数据所更新。
   当一个被创建的新页面没有落在最后一个被摘要的范围内时，该范围不会自
   动获得一个摘要元组，那些元组将保持未被摘要的状态，直到后面调用一次
   摘要操作来创建初始的摘要。可以使用<function>brin_summarize_range(regclass, bigint)</function>或<function>brin_summarize_new_values(regclass)</function>函数手动调用这种处理，而当<command>VACUUM</command>处理表时或者插入发生时由autovacuum执行的自动摘要过程都会自动调用这种处理（最后这一个触发器默认是被禁用的，可以用<literal>autosummarize</literal>参数启用。相对地，可以用<function>brin_desummarize_range(regclass, bigint)</function>函数解除一个范围的摘要，在现有值发生变化导致索引元组不再是一个很好的表达式，这样做是很有用的。
  </para>

<!--==========================orignal english content==========================
  <para>
   When autosummarization is enabled, each time a page range is filled a
   request is sent to autovacuum for it to execute a targeted summarization
   for that range, to be fulfilled at the end of the next worker run on the
   same database.  If the request queue is full, the request is not recorded
   and a message is sent to the server log:
<screen>
LOG:  request for BRIN range summarization for index "brin_wi_idx" page 128 was not recorded
</screen>
   When this happens, the range will be summarized normally during the next
   regular vacuum of the table.
  </para>
____________________________________________________________________________-->
  <para>
   当自动摘要被启用时，每次一个页面范围会被装进一个请求中发送给autovacuum，以便autovacuum为那个范围执行定向的摘要，这个请求会在运行在同一个数据库的下一个工作者的末尾被满足。如果请求队列满了，该请求不会被记录，并且在服务器日志中会有一条消息：
<screen>
LOG:  request for BRIN range summarization for index "brin_wi_idx" page 128 was not recorded
</screen>
   如果这种情况发生，在该表的下一次常规vacuum时将会正常对这个范围做摘要。
  </para>
 </sect2>
</sect1>

<sect1 id="brin-builtin-opclasses">
<!--==========================orignal english content==========================
 <title>Built-in Operator Classes</title>
____________________________________________________________________________-->
 <title>内建操作符类</title>

<!--==========================orignal english content==========================
 <para>
  The core <productname>PostgreSQL</productname> distribution
  includes the <acronym>BRIN</acronym> operator classes shown in
  <xref linkend="brin-builtin-opclasses-table"/>.
 </para>
____________________________________________________________________________-->
 <para>
  核心<productname>PostgreSQL</productname>发布包括了
  <xref linkend="brin-builtin-opclasses-table"/>中所示的
  <acronym>BRIN</acronym>操作符类。
 </para>

<!--==========================orignal english content==========================
 <para>
  The <firstterm>minmax</firstterm>
  operator classes store the minimum and the maximum values appearing
  in the indexed column within the range.  The <firstterm>inclusion</firstterm>
  operator classes store a value which includes the values in the indexed
  column within the range.
 </para>
____________________________________________________________________________-->
 <para>
  <firstterm>minmax</firstterm>操作符类存储范围内被索引列中出现的最小和最大值。
  <firstterm>inclusion</firstterm>操作符类存储包括了范围内被索引列中值的一个值。
 </para>

 <table id="brin-builtin-opclasses-table">
<!--==========================orignal english content==========================
  <title>Built-in <acronym>BRIN</acronym> Operator Classes</title>
____________________________________________________________________________-->
  <title>内建 <acronym>BRIN</acronym> 操作符类</title>
  <tgroup cols="3">
   <thead>
<!--==========================orignal english content==========================
    <row>
     <entry>Name</entry>
     <entry>Indexed Data Type</entry>
     <entry>Indexable Operators</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>名称</entry>
     <entry>被索引数据类型</entry>
     <entry>可索引操作符</entry>
    </row>
   </thead>
   <tbody>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>abstime_minmax_ops</literal></entry>
     <entry><type>abstime</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>abstime_minmax_ops</literal></entry>
     <entry><type>abstime</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>int8_minmax_ops</literal></entry>
     <entry><type>bigint</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>int8_minmax_ops</literal></entry>
     <entry><type>bigint</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>bit_minmax_ops</literal></entry>
     <entry><type>bit</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>bit_minmax_ops</literal></entry>
     <entry><type>bit</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>varbit_minmax_ops</literal></entry>
     <entry><type>bit varying</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>varbit_minmax_ops</literal></entry>
     <entry><type>bit varying</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>box_inclusion_ops</literal></entry>
     <entry><type>box</type></entry>
     <entry>
      <literal>&lt;&lt;</literal>
      <literal>&amp;&lt;</literal>
      <literal>&amp;&amp;</literal>
      <literal>&amp;&gt;</literal>
      <literal>&gt;&gt;</literal>
      <literal>~=</literal>
      <literal>@&gt;</literal>
      <literal>&lt;@</literal>
      <literal>&amp;&lt;|</literal>
      <literal>&lt;&lt;|</literal>
      <literal>|&gt;&gt;</literal>
      <literal>|&amp;&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>box_inclusion_ops</literal></entry>
     <entry><type>box</type></entry>
     <entry>
      <literal>&lt;&lt;</literal>
      <literal>&amp;&lt;</literal>
      <literal>&amp;&amp;</literal>
      <literal>&amp;&gt;</literal>
      <literal>&gt;&gt;</literal>
      <literal>~=</literal>
      <literal>@&gt;</literal>
      <literal>&lt;@</literal>
      <literal>&amp;&lt;|</literal>
      <literal>&lt;&lt;|</literal>
      <literal>|&gt;&gt;</literal>
      <literal>|&amp;&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>bytea_minmax_ops</literal></entry>
     <entry><type>bytea</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>bytea_minmax_ops</literal></entry>
     <entry><type>bytea</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>bpchar_minmax_ops</literal></entry>
     <entry><type>character</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>bpchar_minmax_ops</literal></entry>
     <entry><type>character</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>char_minmax_ops</literal></entry>
     <entry><type>"char"</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>char_minmax_ops</literal></entry>
     <entry><type>"char"</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>date_minmax_ops</literal></entry>
     <entry><type>date</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>date_minmax_ops</literal></entry>
     <entry><type>date</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>float8_minmax_ops</literal></entry>
     <entry><type>double precision</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>float8_minmax_ops</literal></entry>
     <entry><type>double precision</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>inet_minmax_ops</literal></entry>
     <entry><type>inet</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>inet_minmax_ops</literal></entry>
     <entry><type>inet</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>network_inclusion_ops</literal></entry>
     <entry><type>inet</type></entry>
     <entry>
      <literal>&amp;&amp;</literal>
      <literal>&gt;&gt;=</literal>
      <literal>&lt;&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;&gt;</literal>
      <literal>&lt;&lt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>network_inclusion_ops</literal></entry>
     <entry><type>inet</type></entry>
     <entry>
      <literal>&amp;&amp;</literal>
      <literal>&gt;&gt;=</literal>
      <literal>&lt;&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;&gt;</literal>
      <literal>&lt;&lt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>int4_minmax_ops</literal></entry>
     <entry><type>integer</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>int4_minmax_ops</literal></entry>
     <entry><type>integer</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>interval_minmax_ops</literal></entry>
     <entry><type>interval</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>interval_minmax_ops</literal></entry>
     <entry><type>interval</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>macaddr_minmax_ops</literal></entry>
     <entry><type>macaddr</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>macaddr_minmax_ops</literal></entry>
     <entry><type>macaddr</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>macaddr8_minmax_ops</literal></entry>
     <entry><type>macaddr8</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>macaddr8_minmax_ops</literal></entry>
     <entry><type>macaddr8</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>name_minmax_ops</literal></entry>
     <entry><type>name</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>name_minmax_ops</literal></entry>
     <entry><type>name</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>numeric_minmax_ops</literal></entry>
     <entry><type>numeric</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>numeric_minmax_ops</literal></entry>
     <entry><type>numeric</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>pg_lsn_minmax_ops</literal></entry>
     <entry><type>pg_lsn</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>pg_lsn_minmax_ops</literal></entry>
     <entry><type>pg_lsn</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>oid_minmax_ops</literal></entry>
     <entry><type>oid</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>oid_minmax_ops</literal></entry>
     <entry><type>oid</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>range_inclusion_ops</literal></entry>
     <entry><type>any range type</type></entry>
     <entry>
      <literal>&lt;&lt;</literal>
      <literal>&amp;&lt;</literal>
      <literal>&amp;&amp;</literal>
      <literal>&amp;&gt;</literal>
      <literal>&gt;&gt;</literal>
      <literal>@&gt;</literal>
      <literal>&lt;@</literal>
      <literal>-|-</literal>
      <literal>=</literal>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;</literal>
      <literal>&gt;=</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>range_inclusion_ops</literal></entry>
     <entry><type>any range type</type></entry>
     <entry>
      <literal>&lt;&lt;</literal>
      <literal>&amp;&lt;</literal>
      <literal>&amp;&amp;</literal>
      <literal>&amp;&gt;</literal>
      <literal>&gt;&gt;</literal>
      <literal>@&gt;</literal>
      <literal>&lt;@</literal>
      <literal>-|-</literal>
      <literal>=</literal>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;</literal>
      <literal>&gt;=</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>float4_minmax_ops</literal></entry>
     <entry><type>real</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>float4_minmax_ops</literal></entry>
     <entry><type>real</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>reltime_minmax_ops</literal></entry>
     <entry><type>reltime</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>reltime_minmax_ops</literal></entry>
     <entry><type>reltime</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>int2_minmax_ops</literal></entry>
     <entry><type>smallint</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>int2_minmax_ops</literal></entry>
     <entry><type>smallint</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>text_minmax_ops</literal></entry>
     <entry><type>text</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>text_minmax_ops</literal></entry>
     <entry><type>text</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>tid_minmax_ops</literal></entry>
     <entry><type>tid</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>tid_minmax_ops</literal></entry>
     <entry><type>tid</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>timestamp_minmax_ops</literal></entry>
     <entry><type>timestamp without time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>timestamp_minmax_ops</literal></entry>
     <entry><type>timestamp without time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>timestamptz_minmax_ops</literal></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>timestamptz_minmax_ops</literal></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>time_minmax_ops</literal></entry>
     <entry><type>time without time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>time_minmax_ops</literal></entry>
     <entry><type>time without time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>timetz_minmax_ops</literal></entry>
     <entry><type>time with time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>timetz_minmax_ops</literal></entry>
     <entry><type>time with time zone</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry><literal>uuid_minmax_ops</literal></entry>
     <entry><type>uuid</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry><literal>uuid_minmax_ops</literal></entry>
     <entry><type>uuid</type></entry>
     <entry>
      <literal>&lt;</literal>
      <literal>&lt;=</literal>
      <literal>=</literal>
      <literal>&gt;=</literal>
      <literal>&gt;</literal>
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
</sect1>

<sect1 id="brin-extensibility">
<!--==========================orignal english content==========================
 <title>Extensibility</title>
____________________________________________________________________________-->
 <title>可扩展性</title>

<!--==========================orignal english content==========================
 <para>
  The <acronym>BRIN</acronym> interface has a high level of abstraction,
  requiring the access method implementer only to implement the semantics
  of the data type being accessed.  The <acronym>BRIN</acronym> layer
  itself takes care of concurrency, logging and searching the index structure.
 </para>
____________________________________________________________________________-->
 <para>
  <acronym>BRIN</acronym>接口具有高层的抽象，要求访问方法实现者只需
  实现被访问的数据类型的语义。<acronym>BRIN</acronym>层本身会负责并
  发、日志以及对索引结构的搜索。
 </para>

<!--==========================orignal english content==========================
 <para>
  All it takes to get a <acronym>BRIN</acronym> access method working is to
  implement a few user-defined methods, which define the behavior of
  summary values stored in the index and the way they interact with
  scan keys.
  In short, <acronym>BRIN</acronym> combines
  extensibility with generality, code reuse, and a clean interface.
 </para>
____________________________________________________________________________-->
 <para>
  让一种<acronym>BRIN</acronym>访问方法能够工作要做的全部事情是实现
  几个用户定义的方法， 它们定义存储在索引中的摘要值的行为以及它们和扫描键
  的交互。简而言之，<acronym>BRIN</acronym>很好地把可扩展性和通用性、
  代码重用以及干净的接口结合在了一起。
 </para>

<!--==========================orignal english content==========================
 <para>
  There are four methods that an operator class for <acronym>BRIN</acronym>
  must provide:

  <variablelist>
   <varlistentry>
    <term><function>BrinOpcInfo *opcInfo(Oid type_oid)</function></term>
    <listitem>
     <para>
      Returns internal information about the indexed columns' summary data.
      The return value must point to a palloc'd <structname>BrinOpcInfo</structname>,
      which has this definition:
<programlisting>
typedef struct BrinOpcInfo
{
    /* Number of columns stored in an index column of this opclass */
    uint16      oi_nstored;

    /* Opaque pointer for the opclass' private use */
    void       *oi_opaque;

    /* Type cache entries of the stored columns */
    TypeCacheEntry *oi_typcache[FLEXIBLE_ARRAY_MEMBER];
} BrinOpcInfo;
</programlisting>
      <structname>BrinOpcInfo</structname>.<structfield>oi_opaque</structfield> can be used by the
      operator class routines to pass information between support functions
      during an index scan.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>bool consistent(BrinDesc *bdesc, BrinValues *column,
       ScanKey key)</function></term>
    <listitem>
     <para>
      Returns whether the ScanKey is consistent with the given indexed
      values for a range.
      The attribute number to use is passed as part of the scan key.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>bool addValue(BrinDesc *bdesc, BrinValues *column,
       Datum newval, bool isnull)</function></term>
    <listitem>
     <para>
      Given an index tuple and an indexed value, modifies the indicated
      attribute of the tuple so that it additionally represents the new value.
      If any modification was done to the tuple, <literal>true</literal> is
      returned.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>bool unionTuples(BrinDesc *bdesc, BrinValues *a,
       BrinValues *b)</function></term>
    <listitem>
     <para>
      Consolidates two index tuples. Given two index tuples, modifies the
      indicated attribute of the first of them so that it represents both tuples.
      The second tuple is not modified.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  The core distribution includes support for two types of operator classes:
  minmax and inclusion.  Operator class definitions using them are shipped for
  in-core data types as appropriate.  Additional operator classes can be
  defined by the user for other data types using equivalent definitions,
  without having to write any source code; appropriate catalog entries being
  declared is enough.  Note that assumptions about the semantics of operator
  strategies are embedded in the support functions' source code.
 </para>
____________________________________________________________________________-->
 <para>
  <acronym>BRIN</acronym>的一个操作符类必须提供四种方法：

  <variablelist>
   <varlistentry>
    <term><function>BrinOpcInfo *opcInfo(Oid type_oid)</function></term>
    <listitem>
     <para>
      返回有关被索引列的摘要数据的内部信息。返回值必须指向一个已经 palloc
      的<structname>BrinOpcInfo</structname>，该结构的定义是：
<programlisting>
typedef struct BrinOpcInfo
{
    /* 这个 opclass 的一个索引列中存储的列数 */
    uint16      oi_nstored;

    /* 该 opclass 私有用途的不透明指针 */
    void       *oi_opaque;

    /* 被存储列的类型缓冲项 */
    TypeCacheEntry *oi_typcache[FLEXIBLE_ARRAY_MEMBER];
} BrinOpcInfo;
</programlisting>
      <structname>BrinOpcInfo</structname>.<structfield>oi_opaque</structfield>可以被操作符类
      例程用来在索引扫描期间在支持函数之间传递信息。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>bool consistent(BrinDesc *bdesc, BrinValues *column,
       ScanKey key)</function></term>
    <listitem>
     <para>
      返回 ScanKey 是否和一个范围的被索引值一致。要使用的索引号作为
      扫描键的一部分传递。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>bool addValue(BrinDesc *bdesc, BrinValues *column,
       Datum newval, bool isnull)</function></term>
    <listitem>
     <para>
      给定一个索引元组和一个被索引值，修改该元组的指示属性让该元组能额外地表
      示新的值。如果对该元组做出了任何修改，就返回<literal>true</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>bool unionTuples(BrinDesc *bdesc, BrinValues *a,
       BrinValues *b)</function></term>
    <listitem>
     <para>
      联合两个索引元组。给定两个索引元组，修改第一个的指示属性让它能表示
      两个元组。第二个元组不会被修改。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  核心发布中包括了对两种类型的操作符类的支持：minmax 和 inclusion。
  发布中也酌情为核心中的数据类型提供了使用它们的操作符类定义。用户可以用等效
  的定义为其他数据类型定义额外的操作符类，而不需要编写任何源代码，只需要声明
  一些适当的目录项就足够了。注意有关操作符策略的语义的假设是嵌在支持函数的源
  代码中的。
 </para>

<!--==========================orignal english content==========================
 <para>
  Operator classes that implement completely different semantics are also
  possible, provided implementations of the four main support functions
  described above are written.  Note that backwards compatibility across major
  releases is not guaranteed: for example, additional support functions might
  be required in later releases.
 </para>
____________________________________________________________________________-->
 <para>
  实现完全不同的语义的操作符类也是可能的，只要提供上述的四个主要支持过程的实
  现即可。注意在主要发行版之间的向后兼容性是不被保证的：例如，在以后的发行中
  可能要求额外的支持过程。
 </para>

<!--==========================orignal english content==========================
 <para>
  To write an operator class for a data type that implements a totally
  ordered set, it is possible to use the minmax support functions
  alongside the corresponding operators, as shown in
  <xref linkend="brin-extensibility-minmax-table"/>.
  All operator class members (functions and operators) are mandatory.
 </para>
____________________________________________________________________________-->
 <para>
  要为一种实现了线性有序集的数据类型编写一个操作符类，可以使用 minmax 支持函数配上对应的操作符（如<xref linkend="brin-extensibility-minmax-table"/>所示）。
  所有的操作符类成员（函数和操作符）都是强制性的。
 </para>

 <table id="brin-extensibility-minmax-table">
<!--==========================orignal english content==========================
  <title>Function and Support Numbers for Minmax Operator Classes</title>
____________________________________________________________________________-->
  <title>Minmax 操作符类的函数和支持编号</title>
  <tgroup cols="2">
   <thead>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator class member</entry>
     <entry>Object</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符类成员</entry>
     <entry>对象</entry>
    </row>
   </thead>
   <tbody>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 1</entry>
     <entry>internal function <function>brin_minmax_opcinfo()</function></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 1</entry>
     <entry>内部函数<function>brin_minmax_opcinfo()</function></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 2</entry>
     <entry>internal function <function>brin_minmax_add_value()</function></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 2</entry>
     <entry>内部函数<function>brin_minmax_add_value()</function></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 3</entry>
     <entry>internal function <function>brin_minmax_consistent()</function></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 3</entry>
     <entry>内部函数<function>brin_minmax_consistent()</function></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 4</entry>
     <entry>internal function <function>brin_minmax_union()</function></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 4</entry>
     <entry>内部函数<function>brin_minmax_union()</function></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 1</entry>
     <entry>operator less-than</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 1</entry>
     <entry>小于操作符</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 2</entry>
     <entry>operator less-than-or-equal-to</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 2</entry>
     <entry>小于等于操作符</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 3</entry>
     <entry>operator equal-to</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 3</entry>
     <entry>等于操作符</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 4</entry>
     <entry>operator greater-than-or-equal-to</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 4</entry>
     <entry>大于等于操作符</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 5</entry>
     <entry>operator greater-than</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 5</entry>
     <entry>大于操作符</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

<!--==========================orignal english content==========================
 <para>
  To write an operator class for a complex data type which has values
  included within another type, it's possible to use the inclusion support
  functions alongside the corresponding operators, as shown
  in <xref linkend="brin-extensibility-inclusion-table"/>.  It requires
  only a single additional function, which can be written in any language.
  More functions can be defined for additional functionality.  All operators
  are optional.  Some operators require other operators, as shown as
  dependencies on the table.
 </para>
____________________________________________________________________________-->
 <para>
  要为值被包括在另一种类型的复杂数据类型编写操作符类，可以使用 inclusion 支持函数配上相应的操作符（如
  <xref linkend="brin-extensibility-inclusion-table"/>所示）。它只要求一个
  可用任何语言编写的附加函数。可以定义更多函数来提供额外的功能。所有的
  操作符都是可选的。如该表中的依赖性所示，某些操作符需要其他操作符。
 </para>

 <table id="brin-extensibility-inclusion-table">
<!--==========================orignal english content==========================
  <title>Function and Support Numbers for Inclusion Operator Classes</title>
____________________________________________________________________________-->
  <title>Inclusion 操作符类的函数和支持编号</title>
  <tgroup cols="3">
   <thead>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator class member</entry>
     <entry>Object</entry>
     <entry>Dependency</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符类成员</entry>
     <entry>对象</entry>
     <entry>依赖性</entry>
    </row>
   </thead>
   <tbody>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 1</entry>
     <entry>internal function <function>brin_inclusion_opcinfo()</function></entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 1</entry>
     <entry>内部函数<function>brin_inclusion_opcinfo()</function></entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 2</entry>
     <entry>internal function <function>brin_inclusion_add_value()</function></entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 2</entry>
     <entry>内部函数<function>brin_inclusion_add_value()</function></entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 3</entry>
     <entry>internal function <function>brin_inclusion_consistent()</function></entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 3</entry>
     <entry>内部函数<function>brin_inclusion_consistent()</function></entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 4</entry>
     <entry>internal function <function>brin_inclusion_union()</function></entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 4</entry>
     <entry>内部函数<function>brin_inclusion_union()</function></entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 11</entry>
     <entry>function to merge two elements</entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 11</entry>
     <entry>合并两个元素的函数</entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 12</entry>
     <entry>optional function to check whether two elements are mergeable</entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 12</entry>
     <entry>可选函数，检查两个元素是否可以合并</entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 13</entry>
     <entry>optional function to check if an element is contained within another</entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 13</entry>
     <entry>可选函数，检查一个元素是否被包含在另一个中</entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Support Function 14</entry>
     <entry>optional function to check whether an element is empty</entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>支持函数 14</entry>
     <entry>optional function to check whether an element is empty</entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 1</entry>
     <entry>operator left-of</entry>
     <entry>Operator Strategy 4</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 1</entry>
     <entry>位于左边操作符 left-of</entry>
     <entry>操作符策略 4</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 2</entry>
     <entry>operator does-not-extend-to-the-right-of</entry>
     <entry>Operator Strategy 5</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 2</entry>
     <entry>不超过左边操作符 does-not-extend-to-the-right-of</entry>
     <entry>操作符策略 5</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 3</entry>
     <entry>operator overlaps</entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 3</entry>
     <entry>重叠操作符</entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 4</entry>
     <entry>operator does-not-extend-to-the-left-of</entry>
     <entry>Operator Strategy 1</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 4</entry>
     <entry>不超过左边操作符 does-not-extend-to-the-left-of</entry>
     <entry>操作符策略 1</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 5</entry>
     <entry>operator right-of</entry>
     <entry>Operator Strategy 2</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 5</entry>
     <entry>位于右边操作符 right-of</entry>
     <entry>操作符策略 2</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 6, 18</entry>
     <entry>operator same-as-or-equal-to</entry>
     <entry>Operator Strategy 7</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 6, 18</entry>
     <entry>相同或者等于操作符</entry>
     <entry>操作符策略 7</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 7, 13, 16, 24, 25</entry>
     <entry>operator contains-or-equal-to</entry>
     <entry></entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 7, 13, 16, 24, 25</entry>
     <entry>包含或等于操作符</entry>
     <entry></entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 8, 14, 26, 27</entry>
     <entry>operator is-contained-by-or-equal-to</entry>
     <entry>Operator Strategy 3</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 8, 14, 26, 27</entry>
     <entry>被包含或等于操作符</entry>
     <entry>操作符策略 3</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 9</entry>
     <entry>operator does-not-extend-above</entry>
     <entry>Operator Strategy 11</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 9</entry>
     <entry>不超过上边操作符 does-not-extend-above</entry>
     <entry>操作符策略 11</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 10</entry>
     <entry>operator is-below</entry>
     <entry>Operator Strategy 12</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 10</entry>
     <entry>操作符 is-below</entry>
     <entry>操作符策略 12</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 11</entry>
     <entry>operator is-above</entry>
     <entry>Operator Strategy 9</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>Operator Strategy 11</entry>
     <entry>在上面操作符 is-above</entry>
     <entry>操作符策略 9</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 12</entry>
     <entry>operator does-not-extend-below</entry>
     <entry>Operator Strategy 10</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 12</entry>
     <entry>不超过下面操作符 does-not-extend-below</entry>
     <entry>操作符策略 10</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 20</entry>
     <entry>operator less-than</entry>
     <entry>Operator Strategy 5</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 20</entry>
     <entry>小于操作符</entry>
     <entry>操作符策略 4</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 21</entry>
     <entry>operator less-than-or-equal-to</entry>
     <entry>Operator Strategy 5</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 21</entry>
     <entry>小于等于操作符</entry>
     <entry>操作符策略 4</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 22</entry>
     <entry>operator greater-than</entry>
     <entry>Operator Strategy 1</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 22</entry>
     <entry>大于操作符</entry>
     <entry>操作符策略 1</entry>
    </row>
<!--==========================orignal english content==========================
    <row>
     <entry>Operator Strategy 23</entry>
     <entry>operator greater-than-or-equal-to</entry>
     <entry>Operator Strategy 1</entry>
    </row>
____________________________________________________________________________-->
    <row>
     <entry>操作符策略 23</entry>
     <entry>大于等于操作符</entry>
     <entry>操作符策略 1</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

<!--==========================orignal english content==========================
 <para>
    Support function numbers 1-10 are reserved for the BRIN internal
    functions, so the SQL level functions start with number 11.  Support
    function number 11 is the main function required to build the index.
    It should accept two arguments with the same data type as the operator class,
    and return the union of them.  The inclusion operator class can store union
    values with different data types if it is defined with the
    <literal>STORAGE</literal> parameter.  The return value of the union
    function should match the <literal>STORAGE</literal> data type.
 </para>
____________________________________________________________________________-->
 <para>
    支持过程编号 1-10 被保留给 BRIN 的内部函数，因此 SQL 层面的函数从
    编号 11 开始。支持函数编号 11 是用于构建该索引的主要函数。它应该接
    受两个具有和操作符类相同数据类型的参数并且返回它们的并集。如果
    inclusion 操作符类定义时用了<literal>STORAGE</literal>参数，则它可以存储具有
    不同数据类型的合并值。该并集函数的返回值应该匹配
    <literal>STORAGE</literal>的数据类型。
 </para>

<!--==========================orignal english content==========================
 <para>
    Support function numbers 12 and 14 are provided to support
    irregularities of built-in data types.  Function number 12
    is used to support network addresses from different families which
    are not mergeable.  Function number 14 is used to support
    empty ranges.  Function number 13 is an optional but
    recommended one, which allows the new value to be checked before
    it is passed to the union function.  As the BRIN framework can shortcut
    some operations when the union is not changed, using this
    function can improve index performance.
 </para>
____________________________________________________________________________-->
 <para>
    支持函数编号 12 和 14 被提供用来支持内建数据类型的不规则性。函数编号
    12 被用来支持来自不同地址族的不能合并的网络地址。函数编号 14 被用来
    支持空范围。函数编号 13 是可选的，但是我们推荐提供它。它允许在新值
    被传递给并集函数前对其进行检查。因为 BRIN 框架在并集没有改变时可以
    越过某些操作，所以使用这个函数可以提升索引性能。
 </para>

<!--==========================orignal english content==========================
 <para>
    Both minmax and inclusion operator classes support cross-data-type
    operators, though with these the dependencies become more complicated.
    The minmax operator class requires a full set of operators to be
    defined with both arguments having the same data type.  It allows
    additional data types to be supported by defining extra sets
    of operators.  Inclusion operator class operator strategies are dependent
    on another operator strategy as shown in
    <xref linkend="brin-extensibility-inclusion-table"/>, or the same
    operator strategy as themselves.  They require the dependency
    operator to be defined with the <literal>STORAGE</literal> data type as the
    left-hand-side argument and the other supported data type to be the
    right-hand-side argument of the supported operator.  See
    <literal>float4_minmax_ops</literal> as an example of minmax, and
    <literal>box_inclusion_ops</literal> as an example of inclusion.
 </para>
____________________________________________________________________________-->
 <para>
    minmax 和 inclusion 操作符类都支持跨数据类型操作符，不过如果要支持
    会让依赖性变得更加复杂。minmax 操作符类要求用具有同样数据类型的
    参数来定义一个完全的操作符集合。它允许通过定义额外的操作符集合来
    支持附加的数据类型。如
    <xref linkend="brin-extensibility-inclusion-table"/>中所示，
    inclusion 操作符类的操作符策略是依赖于另一种操作符策略的（或者和它们
    自身相同的操作符策略）。它们要求定义依赖性操作符时，把
    <literal>STORAGE</literal>数据类型作为左手边参数并且让其他支持的数据类型
    作为右手边的参数。minmax 的例子可见
    <literal>float4_minmax_ops</literal>，inclusion 的例子是
    <literal>box_inclusion_ops</literal>。
 </para>
</sect1>
</chapter>

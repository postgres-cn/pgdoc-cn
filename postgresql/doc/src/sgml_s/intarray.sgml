<!-- doc/src/sgml/intarray.sgml -->

<sect1 id="intarray" xreflabel="intarray">
<!--==========================orignal english content==========================
 <title>intarray</title>
____________________________________________________________________________-->
 <title>intarray</title>

<!--==========================orignal english content==========================
 <indexterm zone="intarray">
  <primary>intarray</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="intarray">
  <primary>intarray</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>intarray</> module provides a number of useful functions
  and operators for manipulating null-free arrays of integers.
  There is also support for indexed searches using some of the operators.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>intarray</filename>模块提供了一些有用的函数和操作符来操纵不含空值的整数数组。也提供了对使用某些操作符的索引搜索的支持。
 </para>

<!--==========================orignal english content==========================
 <para>
  All of these operations will throw an error if a supplied array contains any
  NULL elements.
 </para>
____________________________________________________________________________-->
 <para>
  如果一个提供的数组中包含任何 NULL 元素，所有这些操作都将抛出一个错误。
 </para>

<!--==========================orignal english content==========================
 <para>
  Many of these operations are only sensible for one-dimensional arrays.
  Although they will accept input arrays of more dimensions, the data is
  treated as though it were a linear array in storage order.
 </para>
____________________________________________________________________________-->
 <para>
  很多这些操作只对一维数组有意义。尽管它们将接受更多维数的数组输入，数据将被当作一个按照存储顺序排列的线性数组对待。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title><filename>intarray</> Functions and Operators</title>
____________________________________________________________________________-->
  <title><filename>intarray</filename> 函数和操作符</title>

<!--==========================orignal english content==========================
  <para>
   The functions provided by the <filename>intarray</filename> module
   are shown in <xref linkend="intarray-func-table">, the operators
   in <xref linkend="intarray-op-table">.
  </para>
____________________________________________________________________________-->
  <para>
   <filename>intarray</filename>模块提供的函数被列在<xref linkend="intarray-func-table"/>中，操作符被列在<xref linkend="intarray-op-table"/>中。
  </para>

  <table id="intarray-func-table">
<!--==========================orignal english content==========================
   <title><filename>intarray</> Functions</title>
____________________________________________________________________________-->
   <title><filename>intarray</filename> 函数</title>

   <tgroup cols="5">
    <thead>
<!--==========================orignal english content==========================
     <row>
      <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>函数</entry>
      <entry>返回类型</entry>
      <entry>描述</entry>
      <entry>例子</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
<!--==========================orignal english content==========================
     <row>
      <entry><function>icount(int[])</function><indexterm><primary>icount</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <entry>number of elements in array</entry>
      <entry><literal>icount('{1,2,3}'::int[])</literal></entry>
      <entry><literal>3</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>icount(int[])</function><indexterm><primary>icount</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <entry>数组中元素的数量</entry>
      <entry><literal>icount('{1,2,3}'::int[])</literal></entry>
      <entry><literal>3</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>sort(int[], text dir)</function><indexterm><primary>sort</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>sort array &mdash; <parameter>dir</> must be <literal>asc</> or <literal>desc</></entry>
      <entry><literal>sort('{1,2,3}'::int[], 'desc')</literal></entry>
      <entry><literal>{3,2,1}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>sort(int[], text dir)</function><indexterm><primary>sort</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>排序数组 &mdash; <parameter>dir</parameter>必须是<literal>asc</literal>或<literal>desc</literal></entry>
      <entry><literal>sort('{1,2,3}'::int[], 'desc')</literal></entry>
      <entry><literal>{3,2,1}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>sort(int[])</function></entry>
      <entry><type>int[]</type></entry>
      <entry>sort in ascending order</entry>
      <entry><literal>sort(array[11,77,44])</literal></entry>
      <entry><literal>{11,44,77}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>sort(int[])</function></entry>
      <entry><type>int[]</type></entry>
      <entry>以升序排序</entry>
      <entry><literal>sort(array[11,77,44])</literal></entry>
      <entry><literal>{11,44,77}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>sort_asc(int[])</function><indexterm><primary>sort_asc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>sort in ascending order</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>sort_asc(int[])</function><indexterm><primary>sort_asc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>以升序排序</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>sort_desc(int[])</function><indexterm><primary>sort_desc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>sort in descending order</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>sort_desc(int[])</function><indexterm><primary>sort_desc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>以降序排序</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>uniq(int[])</function><indexterm><primary>uniq</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>remove adjacent duplicates</entry>
      <entry><literal>uniq(sort('{1,2,3,2,1}'::int[]))</literal></entry>
      <entry><literal>{1,2,3}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>uniq(int[])</function><indexterm><primary>uniq</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>移除临近的重复</entry>
      <entry><literal>uniq(sort('{1,2,3,2,1}'::int[]))</literal></entry>
      <entry><literal>{1,2,3}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>idx(int[], int item)</function><indexterm><primary>idx</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <entry>index of first element matching <parameter>item</> (0 if none)</entry>
      <entry><literal>idx(array[11,22,33,22,11], 22)</literal></entry>
      <entry><literal>2</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>idx(int[], int item)</function><indexterm><primary>idx</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <entry>匹配<parameter>item</parameter>的第一个元素的索引（如果没有为 0）</entry>
      <entry><literal>idx(array[11,22,33,22,11], 22)</literal></entry>
      <entry><literal>2</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>subarray(int[], int start, int len)</function><indexterm><primary>subarray</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>portion of array starting at position <parameter>start</>, <parameter>len</> elements</entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2, 3)</literal></entry>
      <entry><literal>{2,3,2}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>subarray(int[], int start, int len)</function><indexterm><primary>subarray</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>从位置<parameter>start</parameter>开始的由<parameter>len</parameter>个元素组成的元组部分</entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2, 3)</literal></entry>
      <entry><literal>{2,3,2}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>subarray(int[], int start)</function></entry>
      <entry><type>int[]</type></entry>
      <entry>portion of array starting at position <parameter>start</></entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2)</literal></entry>
      <entry><literal>{2,3,2,1}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>subarray(int[], int start)</function></entry>
      <entry><type>int[]</type></entry>
      <entry>从位置<parameter>start</parameter>开始的元组部分</entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2)</literal></entry>
      <entry><literal>{2,3,2,1}</literal></entry>
     </row>

<!--==========================orignal english content==========================
     <row>
      <entry><function>intset(int)</function><indexterm><primary>intset</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>make single-element array</entry>
      <entry><literal>intset(42)</literal></entry>
      <entry><literal>{42}</literal></entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><function>intset(int)</function><indexterm><primary>intset</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <entry>创建单一元素数组</entry>
      <entry><literal>intset(42)</literal></entry>
      <entry><literal>{42}</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <table id="intarray-op-table">
<!--==========================orignal english content==========================
   <title><filename>intarray</> Operators</title>
____________________________________________________________________________-->
   <title><filename>intarray</filename> 操作符</title>

   <tgroup cols="3">
    <thead>
<!--==========================orignal english content==========================
     <row>
      <entry>Operator</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry>操作符</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] &amp;&amp; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>overlap &mdash; <literal>true</> if arrays have at least one common element</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] &amp;&amp; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>重叠 &mdash; 如果数组有至少一个公共元素，则为<literal>true</literal></entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] @&gt; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>contains &mdash; <literal>true</> if left array contains right array</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] @&gt; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>包含 &mdash; 如果左数组包含右数组，则为<literal>true</literal></entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] &lt;@ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>contained &mdash; <literal>true</> if left array is contained in right array</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] &lt;@ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>被包含 &mdash; 如果左数组被右数组包含，则为<literal>true</literal></entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal># int[]</literal></entry>
      <entry><type>int</type></entry>
      <entry>number of elements in array</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal># int[]</literal></entry>
      <entry><type>int</type></entry>
      <entry>数组中元素的数目</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] # int</literal></entry>
      <entry><type>int</type></entry>
      <entry>index (same as <function>idx</> function)</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] # int</literal></entry>
      <entry><type>int</type></entry>
      <entry>索引（与<function>idx</function>函数相同）</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] + int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>push element onto array (add it to end of array)</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] + int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>把元素推到数组中（增加到数组末尾）</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] + int[]  </literal></entry>
      <entry><type>int[]</type></entry>
      <entry>array concatenation (right array added to the end of left one)</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] + int[]  </literal></entry>
      <entry><type>int[]</type></entry>
      <entry>数组串接（把右数组增加到左数组的末尾）</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] - int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>remove entries matching right argument from array</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] - int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>从数组中移除匹配右参数的项</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] - int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>remove elements of right array from left</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] - int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>从左数组中移除右数组的元素</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] | int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>union of arguments</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] | int</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>参数的联合</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] | int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>union of arrays</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] | int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>数组的联合</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] &amp; int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>intersection of arrays</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] &amp; int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <entry>数组的交</entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>int[] @@ query_int</literal></entry>
      <entry><type>boolean</type></entry>
      <entry><literal>true</> if array satisfies query (see below)</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>int[] @@ query_int</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>如果数组满足查询（见下文），则为<literal>true</literal></entry>
     </row>
<!--==========================orignal english content==========================
     <row>
      <entry><literal>query_int ~~ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry><literal>true</> if array satisfies query (commutator of <literal>@@</>)</entry>
     </row>
____________________________________________________________________________-->
     <row>
      <entry><literal>query_int ~~ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <entry>如果数组满足查询（<literal>@@</literal>交换子），则为<literal>true</literal></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

<!--==========================orignal english content==========================
  <para>
   (Before PostgreSQL 8.2, the containment operators <literal>@&gt;</> and
   <literal>&lt;@</> were respectively called <literal>@</> and <literal>~</>.
   These names are still available, but are deprecated and will eventually be
   retired.  Notice that the old names are reversed from the convention
   formerly followed by the core geometric data types!)
  </para>
____________________________________________________________________________-->
  <para>
   （在 PostgreSQL 8.2 之前，包含操作符<literal>@&gt;</literal>和<literal>&lt;@</literal>分别被称为<literal>@</literal>和<literal>~</literal>。这些名称仍然有效，但是已被弃用并且将最终被移除。注意旧名称与核心几何数据类型之前所遵循的习惯相反！）
  </para>

<!--==========================orignal english content==========================
  <para>
   The operators <literal>&amp;&amp;</>, <literal>@&gt;</> and
   <literal>&lt;@</> are equivalent to <productname>PostgreSQL</>'s built-in
   operators of the same names, except that they work only on integer arrays
   that do not contain nulls, while the built-in operators work for any array
   type.  This restriction makes them faster than the built-in operators
   in many cases.
  </para>
____________________________________________________________________________-->
  <para>
   操作符<literal>&amp;&amp;</literal>、<literal>@&gt;</literal>和<literal>&lt;@</literal>等效于<productname>PostgreSQL</productname>的内建同名操作符，不过它们只能在不含空值的整数数组上工作，而内建的操作符可以对任何数组类型工作。这种限制使它们在很多情况下比内建操作符更快。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <literal>@@</> and <literal>~~</> operators test whether an array
   satisfies a <firstterm>query</>, which is expressed as a value of a
   specialized data type <type>query_int</>.  A <firstterm>query</>
   consists of integer values that are checked against the elements of
   the array, possibly combined using the operators <literal>&amp;</>
   (AND), <literal>|</> (OR), and <literal>!</> (NOT).  Parentheses
   can be used as needed.  For example,
   the query <literal>1&amp;(2|3)</> matches arrays that contain 1
   and also contain either 2 or 3.
  </para>
____________________________________________________________________________-->
  <para>
   <literal>@@</literal>和<literal>~~</literal>操作符测试一个数组是否满足一个<firstterm>query</firstterm>，它被表示成一种特殊数据类型<type>query_int</type>的一个值。一个由整数值组成的<firstterm>查询</firstterm>会被针对数组的元素检查，可能会组合使用操作符<literal>&amp;</literal>（AND）、<literal>|</literal>（OR）以及<literal>!</literal>（NOT）。根据需要可以使用圆括号。例如，查询<literal>1&amp;(2|3)</literal>匹配包含 1 并且还包括 2 或 3 的数组。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Index Support</title>
____________________________________________________________________________-->
  <title>索引支持</title>

<!--==========================orignal english content==========================
  <para>
   <filename>intarray</> provides index support for the
   <literal>&amp;&amp;</>, <literal>@&gt;</>, <literal>&lt;@</>,
   and <literal>@@</> operators, as well as regular array equality.
  </para>
____________________________________________________________________________-->
  <para>
   <filename>intarray</filename>提供对于<literal>&amp;&amp;</literal>、<literal>@&gt;</literal>、<literal>&lt;@</literal>和<literal>@@</literal>操作符以及常规数组相等的索引支持。
  </para>

<!--==========================orignal english content==========================
  <para>
   Two GiST index operator classes are provided:
   <literal>gist__int_ops</> (used by default) is suitable for
   small- to medium-size data sets, while
   <literal>gist__intbig_ops</> uses a larger signature and is more
   suitable for indexing large data sets (i.e., columns containing
   a large number of distinct array values).
   The implementation uses an RD-tree data structure with
   built-in lossy compression.
  </para>
____________________________________________________________________________-->
  <para>
   提供了两种 GiST 索引操作符类：<literal>gist__int_ops</literal>（被默认使用）适合于中小尺寸的数据集，而<literal>gist__intbig_ops</literal>使用一种更大的签名并且更适合于索引大型数据集（即，包含大量可区分数组值的列）。该实现使用了一种带有内建有损压缩的 RD 树结构。
  </para>

<!--==========================orignal english content==========================
  <para>
   There is also a non-default GIN operator class
   <literal>gin__int_ops</> supporting the same operators.
  </para>
____________________________________________________________________________-->
  <para>
   也有一种非默认的 GIN 操作符类<literal>gin__int_ops</literal>支持相同的操作符。
  </para>

<!--==========================orignal english content==========================
  <para>
   The choice between GiST and GIN indexing depends on the relative
   performance characteristics of GiST and GIN, which are discussed elsewhere.
  </para>
____________________________________________________________________________-->
  <para>
   在 GiST 和 GIN 索引之间的选择取决于 GiST 和 GIN 的相对性能特点，
   这将在其他地方讨论。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Example</title>
____________________________________________________________________________-->
  <title>例子</title>

<!--==========================orignal english content==========================
<programlisting>
-&minus; a message can be in one or more <quote>sections</>
CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);

-&minus; create specialized index
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops);

-&minus; select messages in section 1 OR 2 - OVERLAP operator
SELECT message.mid FROM message WHERE message.sections &amp;&amp; '{1,2}';

-&minus; select messages in sections 1 AND 2 - CONTAINS operator
SELECT message.mid FROM message WHERE message.sections @&gt; '{1,2}';

-&minus; the same, using QUERY operator
SELECT message.mid FROM message WHERE message.sections @@ '1&amp;2'::query_int;
</programlisting>
____________________________________________________________________________-->
<programlisting>
-- 一个消息可以在一个或多个<quote>小节</quote>中
CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);

-- 创建专门的索引
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops);

-- 选择小节 1 或 2 中的消息 - OVERLAP 操作符
SELECT message.mid FROM message WHERE message.sections &amp;&amp; '{1,2}';

-- 选择小节 1 和 2 中的消息 - CONTAINS 操作符
SELECT message.mid FROM message WHERE message.sections @&gt; '{1,2}';

-- 相同，使用 QUERY 操作符
SELECT message.mid FROM message WHERE message.sections @@ '1&amp;2'::query_int;
</programlisting>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Benchmark</title>
____________________________________________________________________________-->
  <title>测试基准</title>

<!--==========================orignal english content==========================
  <para>
   The source directory <filename>contrib/intarray/bench</> contains a
   benchmark test suite, which can be run against an installed
   <productname>PostgreSQL</> server.  (It also requires <filename>DBD::Pg</>
   to be installed.)  To run:
  </para>
____________________________________________________________________________-->
  <para>
   源代码目录<filename>contrib/intarray/bench</filename>包含有一个基准测试套件，可以针对
   一个安装好的<productname>PostgreSQL</productname>服务器运行这个套件（还要求安装
   <filename>DBD::Pg</filename>）。要运行测试基准：
  </para>

<!--==========================orignal english content==========================
<programlisting>
cd .../contrib/intarray/bench
createdb TEST
psql -c "CREATE EXTENSION intarray" TEST
./create_test.pl | psql TEST
./bench.pl
</programlisting>
____________________________________________________________________________-->
<programlisting>
cd .../contrib/intarray/bench
createdb TEST
psql -c "CREATE EXTENSION intarray" TEST
./create_test.pl | psql TEST
./bench.pl
</programlisting>

<!--==========================orignal english content==========================
  <para>
   The <filename>bench.pl</> script has numerous options, which
   are displayed when it is run without any arguments.
  </para>
____________________________________________________________________________-->
  <para>
   <filename>bench.pl</filename>脚本有多个选项，当它不使用任何参数运行时会显示这些选项。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Authors</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   All work was done by Teodor Sigaev (<email>teodor@sigaev.ru</email>) and
   Oleg Bartunov (<email>oleg@sai.msu.su</email>). See
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink> for
   additional information. Andrey Oktyabrski did a great work on adding new
   functions and operations.
  </para>
____________________________________________________________________________-->
  <para>
   所有工作由 Teodor Sigaev（<email>teodor@sigaev.ru</email>）和 Oleg Bartunov（<email>oleg@sai.msu.su</email>）完成。更多信息请见<ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>。Andrey Oktyabrski 完成了一项伟大的工作，他增加了新的函数和操作。
  </para>
 </sect2>

</sect1>

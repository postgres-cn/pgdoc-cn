<!-- doc/src/sgml/extend.sgml -->

 <chapter id="extend">
<!--==========================orignal english content==========================
  <title>Extending <acronym>SQL</acronym></title>
____________________________________________________________________________-->
  <title>扩展 <acronym>SQL</acronym></title>

<!--==========================orignal english content==========================
  <indexterm zone="extend">
   <primary>extending SQL</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="extend">
   <primary>扩展 SQL</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   In  the  sections  that follow, we will discuss how you
   can extend the <productname>PostgreSQL</productname>
   <acronym>SQL</acronym> query language by adding:

   <itemizedlist spacing="compact" mark="bullet">
    <listitem>
     <para>
      functions (starting in <xref linkend="xfunc"/>)
     </para>
    </listitem>
    <listitem>
     <para>
      aggregates (starting in <xref linkend="xaggr"/>)
     </para>
    </listitem>
    <listitem>
     <para>
      data types (starting in <xref linkend="xtypes"/>)
     </para>
    </listitem>
    <listitem>
     <para>
      operators (starting in <xref linkend="xoper"/>)
     </para>
    </listitem>
    <listitem>
     <para>
      operator classes for indexes (starting in <xref linkend="xindex"/>)
     </para>
    </listitem>
    <listitem>
     <para>
      packages of related objects (starting in <xref linkend="extend-extensions"/>)
     </para>
    </listitem>
   </itemizedlist>
  </para>
____________________________________________________________________________-->
  <para>
   在下面的小节中，我们将讨论如何通过增加各种元素来扩展<productname>PostgreSQL</productname>
   <acronym>SQL</acronym> 查询语言：

   <itemizedlist spacing="compact" mark="bullet">
    <listitem>
     <para>
      函数（从<xref linkend="xfunc"/>开始）
     </para>
    </listitem>
    <listitem>
     <para>
      聚集（从<xref linkend="xaggr"/>开始）
     </para>
    </listitem>
    <listitem>
     <para>
      数据类型（从<xref linkend="xtypes"/>开始）
     </para>
    </listitem>
    <listitem>
     <para>
      操作符（从<xref linkend="xoper"/>开始）
     </para>
    </listitem>
    <listitem>
     <para>
      用于索引的操作符类（从<xref linkend="xindex"/>开始）
     </para>
    </listitem>
    <listitem>
     <para>
      相关对象的包（从<xref linkend="extend-extensions"/>开始）
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <sect1 id="extend-how">
<!--==========================orignal english content==========================
   <title>How Extensibility Works</title>
____________________________________________________________________________-->
   <title>扩展性如何工作</title>

<!--==========================orignal english content==========================
   <para>
    <productname>PostgreSQL</productname> is extensible because its operation  is
    catalog-driven.   If  you  are familiar with standard
    relational database systems, you know that  they  store  information
    about  databases,  tables,  columns,  etc., in what are
    commonly known as system catalogs.  (Some systems  call
    this  the data dictionary.)  The catalogs appear to the
    user as tables like any other, but  the  <acronym>DBMS</acronym>  stores
    its  internal  bookkeeping in them.  One key difference
    between <productname>PostgreSQL</productname> and  standard  relational database systems  is
    that <productname>PostgreSQL</productname> stores much more information in its
    catalogs: not only information about tables and  columns,
    but also information about data types, functions, access
    methods, and so on.  These tables can be  modified  by
    the  user, and since <productname>PostgreSQL</productname> bases its operation
    on these tables, this means that <productname>PostgreSQL</productname> can  be
    extended   by   users.    By  comparison,  conventional
    database systems can only be extended by changing hardcoded
    procedures in the source code or by loading modules
    specially written by the <acronym>DBMS</acronym> vendor.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>是可扩展的，因为它的操作是目录驱动的。如果你熟悉标准的关系型数据库系统，你会知道它们把有关数据库、表、列等的信息存储在总所周知的系统目录中（某些系统称之为数据目录）。目录对于用户来说好像其他的表一样，但是<acronym>DBMS</acronym>把自己的内部信息记录在其中。<productname>PostgreSQL</productname>和标准关系型数据库系统的一个关键不同是<productname>PostgreSQL</productname>在其目录中存储更多信息：不只是有关表和列的信息，还有关于数据类型、函数、访问方法等等的信息。这些表可以被用户修改，并且因为<productname>PostgreSQL</productname>的操作是基于这些表的，所以<productname>PostgreSQL</productname>可以被用户扩展。通过比较，传统数据库系统只能通过在源代码中改变硬编码的过程或者载入由<acronym>DBMS</acronym>提供者特殊编写的模块进行扩展。
   </para>

<!--==========================orignal english content==========================
   <para>
    The <productname>PostgreSQL</productname> server can moreover
    incorporate user-written code into itself through dynamic loading.
    That is, the user can specify an object code file (e.g., a shared
    library) that implements a new type or function, and
    <productname>PostgreSQL</productname> will load it as required.
    Code written in <acronym>SQL</acronym> is even more trivial to add
    to the server.  This ability to modify its operation <quote>on the
    fly</quote> makes <productname>PostgreSQL</productname> uniquely
    suited for rapid prototyping of new applications and storage
    structures.
   </para>
____________________________________________________________________________-->
   <para>
    此外，<productname>PostgreSQL</productname>服务器能够通过动态载入把用户编写的代码结合到它自身中。也就是，用户能够指定一个实现了一个新类型或函数的对象代码文件（例如一个共享库），并且<productname>PostgreSQL</productname>将按照要求载入它。把用<acronym>SQL</acronym>编写的代码加入到服务器会更繁琐。这种<quote>即时</quote>修改其操作的能力让<productname>PostgreSQL</productname>独特地适合新应用和存储结构的快速原型设计。
   </para>
  </sect1>

  <sect1 id="extend-type-system">
<!--==========================orignal english content==========================
   <title>The <productname>PostgreSQL</productname> Type System</title>
____________________________________________________________________________-->
   <title><productname>PostgreSQL</productname>类型系统</title>

<!--==========================orignal english content==========================
   <indexterm zone="extend-type-system">
    <primary>base type</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-type-system">
    <primary>基础类型</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm zone="extend-type-system">
    <primary>data type</primary>
    <secondary>base</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-type-system">
    <primary>数据类型</primary>
    <secondary>基础</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm zone="extend-type-system">
    <primary>composite type</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-type-system">
    <primary>组合类型</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm zone="extend-type-system">
    <primary>data type</primary>
    <secondary>composite</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-type-system">
    <primary>数据类型</primary>
    <secondary>组合</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm zone="extend-type-system">
    <primary>container type</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-type-system">
    <primary>container type</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm zone="extend-type-system">
    <primary>data type</primary>
    <secondary>container</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-type-system">
    <primary>data type</primary>
    <secondary>container</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    <productname>PostgreSQL</productname> data types can be divided into base
    types, container types, domains, and pseudo-types.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>数据类型被划分为基础类型、容器类型、域和伪类型。
   </para>

   <sect2>
<!--==========================orignal english content==========================
    <title>Base Types</title>
____________________________________________________________________________-->
    <title>基础类型</title>

<!--==========================orignal english content==========================
    <para>
     Base types are those, like <type>integer</type>, that are
     implemented below the level of the <acronym>SQL</acronym> language
     (typically in a low-level language such as C).  They generally
     correspond to what are often known as abstract data types.
     <productname>PostgreSQL</productname> can only operate on such
     types through functions provided by the user and only understands
     the behavior of such types to the extent that the user describes
     them.
     The built-in base types are described in <xref linkend="datatype"/>.
    </para>
____________________________________________________________________________-->
    <para>
     基础类型是那些被实现在<acronym>SQL</acronym>语言层面之下的类型（通常用一种底层语言，如 C），例如<type>integer</type>。它们通常对应于常说的抽象数据类型。<productname>PostgreSQL</productname>只能通过由用户提供的函数在这类类型上操作，并且只能理解到用户描述这种类型行为的程度。<xref linkend="datatype"/>中描述了内建的基础类型。
    </para>

<!--==========================orignal english content==========================
    <para>
     Enumerated (enum) types can be considered as a subcategory of base
     types.  The main difference is that they can be created using
     just <acronym>SQL</acronym> commands, without any low-level programming.
     Refer to <xref linkend="datatype-enum"/> for more information.
    </para>
____________________________________________________________________________-->
    <para>
     枚举（enum）类型可以被认为是基础类型的一个子类。主要区别是它们可以使用<acronym>SQL</acronym>命令创建，不需要用到底层的编程。更多信息请参考<xref linkend="datatype-enum"/>。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Container Types</title>
____________________________________________________________________________-->
    <title>容器类型</title>

<!--==========================orignal english content==========================
    <para>
     <productname>PostgreSQL</productname> has three kinds
     of <quote>container</quote> types, which are types that contain multiple
     values of other types.  These are arrays, composites, and ranges.
    </para>
____________________________________________________________________________-->
    <para>
     <productname>PostgreSQL</productname>有三种<quote>容器</quote>类型，它们是包含多个其他类型值的类型。它们是数组、组合以及范围。
    </para>

<!--==========================orignal english content==========================
    <para>
     Arrays can hold multiple values that are all of the same type.  An array
     type is automatically created for each base type, composite type, range
     type, and domain type.  But there are no arrays of arrays.  So far as
     the type system is concerned, multi-dimensional arrays are the same as
     one-dimensional arrays.  Refer to <xref linkend="arrays"/> for more
     information.
    </para>
____________________________________________________________________________-->
    <para>
     数组可以保存全部是同种类型的多个值。为每一种基本类型、组合类型、范围类型以及域类型都会自动创建一个数组类型。但是没有数组的数组。就类型系统的认知而言，多维数组就和一维数组一样。更多信息请参考<xref linkend="arrays"/>。
    </para>

<!--==========================orignal english content==========================
    <para>
     Composite types, or row types, are created whenever the user
     creates a table. It is also possible to use <xref
     linkend="sql-createtype"/> to
     define a <quote>stand-alone</quote> composite type with no associated
     table.  A composite type is simply a list of types with
     associated field names.  A value of a composite type is a row or
     record of field values.  Refer to <xref linkend="rowtypes"/>
     for more information.
    </para>
____________________________________________________________________________-->
    <para>
     只要用户创建一个表，就会创建组合类型或者行类型。也可以使用<xref linkend="sql-createtype"/>来定义一个没有关联表的<quote>stand-alone</quote>组合类型。一个组合类型只是一个具有相关域名称的类型列表。一个组合类型的值是一个行或者域值记录。用户可以访问来自<acronym>SQL</acronym>查询的组成域。更多信息请参考<xref linkend="rowtypes"/>。
    </para>

<!--==========================orignal english content==========================
    <para>
     A range type can hold two values of the same type, which are the lower
     and upper bounds of the range.  Range types are user-created, although
     a few built-in ones exist.  Refer to <xref linkend="rangetypes"/>
     for more information.
    </para>
____________________________________________________________________________-->
    <para>
     范围类型可以保存同种类型的两个值，它们是该范围的上下界。范围类型是用户创建的，不过也存在一些内建的范围类型。更多信息请参考<xref linkend="rangetypes"/>。
    </para>
   </sect2>

   <sect2 id="extend-type-system-domains">
<!--==========================orignal english content==========================
    <title>Domains</title>
____________________________________________________________________________-->
    <title>域</title>

<!--==========================orignal english content==========================
    <para>
     A domain is based on a particular underlying type and for many purposes
     is interchangeable with its underlying type.  However, a domain can have
     constraints that restrict its valid values to a subset of what the
     underlying type would allow.  Domains are created using
     the <acronym>SQL</acronym> command <xref linkend="sql-createdomain"/>.
     Refer to <xref linkend="domains"/> for more information.
    </para>
____________________________________________________________________________-->
    <para>
     一个域是基于一种特定底层类型的，并且出于很多目的它可以与其底层类型互换。不过，一个域能够具有约束来限制它的合法值于其底层基础类型允许值的一个子集。可以使用<acronym>SQL</acronym>命令<xref linkend="sql-createdomain"/>创建域。更多信息请参考<xref linkend="domains"/>。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Pseudo-Types</title>
____________________________________________________________________________-->
    <title>伪类型</title>

<!--==========================orignal english content==========================
    <para>
     There are a few <quote>pseudo-types</quote> for special purposes.
     Pseudo-types cannot appear as columns of tables or components of
     container types, but they can be used to declare the argument and
     result types of functions.  This provides a mechanism within the
     type system to identify special classes of functions.  <xref
     linkend="datatype-pseudotypes-table"/> lists the existing
     pseudo-types.
    </para>
____________________________________________________________________________-->
    <para>
     有一些用于特殊目的<quote>伪类型</quote>。伪类型不能作为表列或者容器类型的组件出现，但是它们能被用于声明函数的参数和结果类型。这在类型系统中提供了一种机制来标识函数的特殊分类。<xref linkend="datatype-pseudotypes-table"/>列出了现有的伪类型。
    </para>
   </sect2>

   <sect2 id="extend-types-polymorphic">
<!--==========================orignal english content==========================
    <title>Polymorphic Types</title>
____________________________________________________________________________-->
    <title>多态类型</title>

<!--==========================orignal english content==========================
   <indexterm zone="extend-types-polymorphic">
    <primary>polymorphic type</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-types-polymorphic">
    <primary>多态类型</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm zone="extend-types-polymorphic">
    <primary>polymorphic function</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-types-polymorphic">
    <primary>多态函数</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm zone="extend-types-polymorphic">
    <primary>data type</primary>
    <secondary>polymorphic</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-types-polymorphic">
    <primary>数据类型</primary>
    <secondary>多态</secondary>
   </indexterm>

<!--==========================orignal english content==========================
   <indexterm zone="extend-types-polymorphic">
    <primary>function</primary>
    <secondary>polymorphic</secondary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-types-polymorphic">
    <primary>函数</primary>
    <secondary>多态</secondary>
   </indexterm>

<!--==========================orignal english content==========================
    <para>
     Five pseudo-types of special interest are <type>anyelement</type>,
     <type>anyarray</type>, <type>anynonarray</type>, <type>anyenum</type>,
     and <type>anyrange</type>,
     which are collectively called <firstterm>polymorphic types</firstterm>.
     Any function declared using these types is said to be
     a <firstterm>polymorphic function</firstterm>.  A polymorphic function can
     operate on many different data types, with the specific data type(s)
     being determined by the data types actually passed to it in a particular
     call.
    </para>
____________________________________________________________________________-->
    <para>
     特别让人感兴趣的五种伪类型是<type>anyelement</type>、<type>anyarray</type>、<type>anynonarray</type>、<type>anyenum</type>以及<type>anyrange</type>，它们被统称为<firstterm>多态类型</firstterm>。任何使用这些类型声明的函数被称作是一个<firstterm>多态函数</firstterm>。通过使用根据一次特定调用实际传递的数据类型所决定的相关数据类型，一个多态函数能够在多种不同数据类型上操作。
    </para>

<!--==========================orignal english content==========================
    <para>
     Polymorphic arguments and results are tied to each other and are resolved
     to a specific data type when a query calling a polymorphic function is
     parsed.  Each position (either argument or return value) declared as
     <type>anyelement</type> is allowed to have any specific actual
     data type, but in any given call they must all be the
     <emphasis>same</emphasis> actual type. Each
     position declared as <type>anyarray</type> can have any array data type,
     but similarly they must all be the same type.  And similarly,
     positions declared as <type>anyrange</type> must all be the same range
     type.  Furthermore, if there are
     positions declared <type>anyarray</type> and others declared
     <type>anyelement</type>, the actual array type in the
     <type>anyarray</type> positions must be an array whose elements are
     the same type appearing in the <type>anyelement</type> positions.
     Similarly, if there are positions declared <type>anyrange</type>
     and others declared <type>anyelement</type>, the actual range type in
     the <type>anyrange</type> positions must be a range whose subtype is
     the same type appearing in the <type>anyelement</type> positions.
     <type>anynonarray</type> is treated exactly the same as <type>anyelement</type>,
     but adds the additional constraint that the actual type must not be
     an array type.
     <type>anyenum</type> is treated exactly the same as <type>anyelement</type>,
     but adds the additional constraint that the actual type must
     be an enum type.
    </para>
____________________________________________________________________________-->
    <para>
     多态参数和结果是相互关联的，并且它们在解析调用多态函数的查询时被决定到一种特定的数据类型。每一个被声明为<type>anyelement</type>的位置（参数或返回值）被允许具有任意特定的实际数据类型，但是在任何给定的查询中它们必须全部是<emphasis>相同</emphasis>的实际类型。每一个被声明为<type>anyarray</type>的位置可以有任意数组数据类型，但是相似地，它们必须全部具有相同类型。并且类似地，被声明为<type>anyrange</type>的位置必须是全部是相同的范围类型。此外，如果有位置被声明为<type>anyarray</type>并且其他位置被声明为<type>anyelement</type>，<type>anyarray</type>位置中的实际数组类型必须是一个数组，该数组的元素都是出现在<type>anyelement</type>位置的同一种类型。相似地，如果有位置被声明为<type>anyrange</type>并且其他位置被声明为<type>anyelement</type>，<type>anyrange</type>位置的实际范围类型必须是一个范围，该范围的子类型是出现在<type>anyelement</type>位置的同一种类型。<type>anynonarray</type>被当做和<type>anyelement</type>相同，但是增加了额外的约束要求实际类型不能是一种数组类型。<type>anyenum</type>被当做和<type>anyelement</type>相同，但是增加了额外的约束要求实际类型不能是一种枚举类型。
    </para>

<!--==========================orignal english content==========================
    <para>
     Thus, when more than one argument position is declared with a polymorphic
     type, the net effect is that only certain combinations of actual argument
     types are allowed.  For example, a function declared as
     <literal>equal(anyelement, anyelement)</literal> will take any two input values,
     so long as they are of the same data type.
    </para>
____________________________________________________________________________-->
    <para>
     因此，当使用一种多态类型声明了多于一个参数位置，有效效果是只有实际参数类型的某些组合才被允许。例如，一个被声明为<literal>equal(anyelement, anyelement)</literal>的函数将要求任意两个输入值，只要它们是同一种数据类型。
    </para>

<!--==========================orignal english content==========================
    <para>
     When the return value of a function is declared as a polymorphic type,
     there must be at least one argument position that is also polymorphic,
     and the actual data type supplied as the argument determines the actual
     result type for that call.  For example, if there were not already
     an array subscripting mechanism, one could define a function that
     implements subscripting as <literal>subscript(anyarray, integer)
     returns anyelement</literal>.  This declaration constrains the actual first
     argument to be an array type, and allows the parser to infer the correct
     result type from the actual first argument's type.  Another example
     is that a function declared as <literal>f(anyarray) returns anyenum</literal>
     will only accept arrays of enum types.
    </para>
____________________________________________________________________________-->
    <para>
     当一个函数的返回值被声明为多态类型时，必须至少有一个参数位置也是多态的，并且作为该参数提供的实际数据类型决定了该调用的实际结果类型。例如，如果还没有一种数组下标机制，我们可以定义一个函数来实现下标：<literal>subscript(anyarray, integer) returns anyelement</literal>。这个声明约束了实际的第一个参数是一种数组类型，并且允许解析器从实际的第一个参数类型推断正确的结果类型。另一个例子是一个被声明为<literal>f(anyarray) returns anyenum</literal>的函数将只接受枚举类型的数组。
    </para>

<!--==========================orignal english content==========================
    <para>
     Note that <type>anynonarray</type> and <type>anyenum</type> do not represent
     separate type variables; they are the same type as
     <type>anyelement</type>, just with an additional constraint.  For
     example, declaring a function as <literal>f(anyelement, anyenum)</literal>
     is equivalent to declaring it as <literal>f(anyenum, anyenum)</literal>:
     both actual arguments have to be the same enum type.
    </para>
____________________________________________________________________________-->
    <para>
     注意<type>anynonarray</type>和<type>anyenum</type>并不表示独立的类型变量，它们是和<type>anyelement</type>相同的类型，只是有一个额外的约束。例如，将一个函数声明为<literal>f(anyelement, anyenum)</literal>等效于把它声明为<literal>f(anyenum, anyenum)</literal>：两种实际参数必须是相同的枚举类型。
    </para>

<!--==========================orignal english content==========================
    <para>
     A variadic function (one taking a variable number of arguments, as in
     <xref linkend="xfunc-sql-variadic-functions"/>) can be
     polymorphic: this is accomplished by declaring its last parameter as
     <literal>VARIADIC</literal> <type>anyarray</type>.  For purposes of argument
     matching and determining the actual result type, such a function behaves
     the same as if you had written the appropriate number of
     <type>anynonarray</type> parameters.
    </para>
____________________________________________________________________________-->
    <para>
     一个可变函数（可以有可变数量的参数，如<xref linkend="xfunc-sql-variadic-functions"/>中所述）能够是多态的：这可以通过声明其最后一个参数为<literal>VARIADIC</literal> <type>anyarray</type>来实现。为了匹配和决定实际结果类型的参数，这样一种函数的行为和写了合适数量的<type>anynonarray</type>参数是一样的。
    </para>
   </sect2>
  </sect1>

  &xfunc;
  &xaggr;
  &xtypes;
  &xoper;
  &xindex;


  <sect1 id="extend-extensions">
<!--==========================orignal english content==========================
   <title>Packaging Related Objects into an Extension</title>
____________________________________________________________________________-->
   <title>打包相关对象到一个扩展中</title>

<!--==========================orignal english content==========================
   <indexterm zone="extend-extensions">
    <primary>extension</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-extensions">
    <primary>扩展</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    A useful extension to <productname>PostgreSQL</productname> typically includes
    multiple SQL objects; for example, a new data type will require new
    functions, new operators, and probably new index operator classes.
    It is helpful to collect all these objects into a single package
    to simplify database management.  <productname>PostgreSQL</productname> calls
    such a package an <firstterm>extension</firstterm>.  To define an extension,
    you need at least a <firstterm>script file</firstterm> that contains the
    <acronym>SQL</acronym> commands to create the extension's objects, and a
    <firstterm>control file</firstterm> that specifies a few basic properties
    of the extension itself.  If the extension includes C code, there
    will typically also be a shared library file into which the C code
    has been built.  Once you have these files, a simple
    <xref linkend="sql-createextension"/> command loads the objects into
    your database.
   </para>
____________________________________________________________________________-->
   <para>
    一个对<productname>PostgreSQL</productname>有用的扩展通常包括多个 SQL 对象，例如，一种新的数据类型将需要新函数、新操作符以及可能的新索引操作符类。将所有这些对象收集到一个单一包中有助于简化数据库管理。<productname>PostgreSQL</productname>称这样一个包为一个<firstterm>扩展</firstterm>。要定义一个扩展，你至少需要一个包含创建该扩展的对象的<acronym>SQL</acronym>命令的<firstterm>脚本文件</firstterm>以及一个指定扩展本身的一些基本属性的<firstterm>控制文件</firstterm>。如果扩展包括 C 代码，通常还有一个 C 代码编译而成的共享库文件。一旦你有了这些文件，一个简单的<xref linkend="sql-createextension"/>命令可以把这些对象载入到你的数据库。
   </para>

<!--==========================orignal english content==========================
   <para>
    The main advantage of using an extension, rather than just running the
    <acronym>SQL</acronym> script to load a bunch of <quote>loose</quote> objects
    into your database, is that <productname>PostgreSQL</productname> will then
    understand that the objects of the extension go together.  You can
    drop all the objects with a single <xref linkend="sql-dropextension"/>
    command (no need to maintain a separate <quote>uninstall</quote> script).
    Even more useful, <application>pg_dump</application> knows that it should not
    dump the individual member objects of the extension &mdash; it will
    just include a <command>CREATE EXTENSION</command> command in dumps, instead.
    This vastly simplifies migration to a new version of the extension
    that might contain more or different objects than the old version.
    Note however that you must have the extension's control, script, and
    other files available when loading such a dump into a new database.
   </para>
____________________________________________________________________________-->
   <para>
    使用一个扩展而不是只运行<acronym>SQL</acronym>脚本载入一堆<quote>松散</quote>对象到数据库的主要优点是，<productname>PostgreSQL</productname>将能理解该扩展的对象是一起的。你可以用一个单一的<xref linkend="sql-dropextension"/>命令删除所有的对象（不用维护一个单独的<quote>卸载</quote>脚本）。 甚至更有用的一点是，<application>pg_dump</application>知道它不应该转储该扩展中的个体成员对象 &mdash; 它将只在转储中包括一个<command>CREATE EXTENSION</command>命令。这大大简化了迁移到一个包含不同于旧版扩展中对象的新版扩展的工作。不过，注意在把这样一个转储载入到一个新数据库时，该扩展的控制、脚本和其他文件必须可用。
   </para>

<!--==========================orignal english content==========================
   <para>
    <productname>PostgreSQL</productname> will not let you drop an individual object
    contained in an extension, except by dropping the whole extension.
    Also, while you can change the definition of an extension member object
    (for example, via <command>CREATE OR REPLACE FUNCTION</command> for a
    function), bear in mind that the modified definition will not be dumped
    by <application>pg_dump</application>.  Such a change is usually only sensible if
    you concurrently make the same change in the extension's script file.
    (But there are special provisions for tables containing configuration
    data; see <xref linkend="extend-extensions-config-tables"/>.)
    In production situations, it's generally better to create an extension
    update script to perform changes to extension member objects.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>不会让你删除包含在一个扩展中的个体对象，除非删除整个扩展。还有，虽然你能够改变一个扩展的成员对象的定义（例如，通过<command>CREATE OR REPLACE FUNCTION</command>改变一个函数），记住被修改后的定义将不会被<application>pg_dump</application>转储。这种改变通常只有在你并发地在扩展脚本文件中做出相同更改时才有意义（但是对于包含配置数据的表有特殊的规定，见<xref linkend="extend-extensions-config-tables"/>）。在生产环境中，通常更好的方式是创建一个扩展更新脚本来执行对扩展中成员对象的更改。
   </para>

<!--==========================orignal english content==========================
   <para>
    The extension script may set privileges on objects that are part of the
    extension via <command>GRANT</command> and <command>REVOKE</command>
    statements.  The final set of privileges for each object (if any are set)
    will be stored in the
    <link linkend="catalog-pg-init-privs"><structname>pg_init_privs</structname></link>
    system catalog.  When <application>pg_dump</application> is used, the
    <command>CREATE EXTENSION</command> command will be included in the dump, followed
    by the set of <command>GRANT</command> and <command>REVOKE</command>
    statements necessary to set the privileges on the objects to what they were
    at the time the dump was taken.
   </para>
____________________________________________________________________________-->
   <para>
    扩展脚本可能会通过<command>GRANT</command>和<command>REVOKE</command>语句设置扩展中所含对象的特权。每一个对象的最终特权集合（如果设置了任何特权）将被存储在<link linkend="catalog-pg-init-privs"><structname>pg_init_privs</structname></link>系统目录中。使用<application>pg_dump</application>时，<command>CREATE EXTENSION</command>命令将被包括在转储中，后面会跟着必要的<command>GRANT</command>和<command>REVOKE</command>语句集合来将对象的特权设置成取得该转储时的样子。
   </para>

<!--==========================orignal english content==========================
   <para>
    <productname>PostgreSQL</productname> does not currently support extension scripts
    issuing <command>CREATE POLICY</command> or <command>SECURITY LABEL</command>
    statements.  These are expected to be set after the extension has been
    created.  All RLS policies and security labels on extension objects will be
    included in dumps created by <application>pg_dump</application>.
   </para>
____________________________________________________________________________-->
   <para>
    <productname>PostgreSQL</productname>当前不支持扩展脚本发出<command>CREATE POLICY</command>或者<command>SECURITY LABEL</command>语句。这些东西的设置应该在扩展被创建好之后来进行。所有在扩展对象上创建的 RLS 策略和安全标签都将被包括在<application>pg_dump</application>创建的转储中。
   </para>

<!--==========================orignal english content==========================
   <para>
    The extension mechanism also has provisions for packaging modification
    scripts that adjust the definitions of the SQL objects contained in an
    extension.  For example, if version 1.1 of an extension adds one function
    and changes the body of another function compared to 1.0, the extension
    author can provide an <firstterm>update script</firstterm> that makes just those
    two changes.  The <command>ALTER EXTENSION UPDATE</command> command can then
    be used to apply these changes and track which version of the extension
    is actually installed in a given database.
   </para>
____________________________________________________________________________-->
   <para>
    扩展机制也对打包调整一个扩展中所含 SQL 对象定义的修改脚本有规定。例如，如果一个扩展的 1.1 版本比 1.0 版本增加了一个函数并且更改了另一个函数的函数体，该扩展的作者可以提供一个<firstterm>更新脚本</firstterm>来做这两个更改。那么<command>ALTER EXTENSION UPDATE</command>命令可以被用来应用这些更改并且跟踪在给定数据库中实际安装的是该扩展的哪个版本。
   </para>

<!--==========================orignal english content==========================
   <para>
    The kinds of SQL objects that can be members of an extension are shown in
    the description of <xref linkend="sql-alterextension"/>.  Notably, objects
    that are database-cluster-wide, such as databases, roles, and tablespaces,
    cannot be extension members since an extension is only known within one
    database.  (Although an extension script is not prohibited from creating
    such objects, if it does so they will not be tracked as part of the
    extension.)  Also notice that while a table can be a member of an
    extension, its subsidiary objects such as indexes are not directly
    considered members of the extension.
    Another important point is that schemas can belong to extensions, but not
    vice versa: an extension as such has an unqualified name and does not
    exist <quote>within</quote> any schema.  The extension's member objects,
    however, will belong to schemas whenever appropriate for their object
    types.  It may or may not be appropriate for an extension to own the
    schema(s) its member objects are within.
   </para>
____________________________________________________________________________-->
   <para>
    能作为一个扩展的成员的 SQL 对象的种类如<xref linkend="sql-alterextension"/>所示。尤其是数据库集簇范围的对象（例如数据库、角色和表空间）不能作为扩展成员，因为一个扩展只在一个数据库范围内可见（尽管一个扩展脚本并没有被禁止创建这些对象，但是这样做将无法把它们作为扩展的一部分来跟踪）。还要注意虽然一个表可以是一个扩展的成员，它的扶助对象（例如索引）不会被直接认为是该扩展的成员。另一个重点是模式可以属于扩展，但是反过来不行：一个扩展本身有一个不被限定的名称并且不存在于任何模式<quote>中</quote>。不过，扩展的成员对象只要对象类型合适就可以属于模式。一个扩展拥有包含其成员对象的模式可能合适也可能不合适。
   </para>

<!--==========================orignal english content==========================
   <para>
    If an extension's script creates any temporary objects (such as temp
    tables), those objects are treated as extension members for the
    remainder of the current session, but are automatically dropped at
    session end, as any temporary object would be.  This is an exception
    to the rule that extension member objects cannot be dropped without
    dropping the whole extension.
   </para>
____________________________________________________________________________-->
   <para>
    如果一个扩展的脚本创建任何临时对象（例如临时表），在当前会话的剩余部分会把它们当作扩展的成员，但是在会话结束会自动删除它们，这和任何其他临时对象是一样的。对于不删除整个扩展就不能删除扩展的成员对象的规则来说，这是一种例外。
   </para>

   <sect2 id="extend-extensions-style">
<!--==========================orignal english content==========================
    <title>Defining Extension Objects</title>
____________________________________________________________________________-->
    <title>定义扩展对象</title>

    <!-- XXX 使用限定名称是不够的，因为人们可能会为一个对象写一个限定的名称，但该对象本身会使用未限定的名称。例如，很多information_schema函数就有这个缺点。不过，这是被引用对象中的缺点，相对较少的查询会受到影响。此外，在连接到一个不可信的数据库时，我们会让应用保护好search_path，如果应用那样做了，它们就能免疫已知的攻击，即使有些扩展引用的是有缺陷的对象。因此，指导扩展作者时就好像PostgreSQL核心不包含这类缺点一样。 -->
<!--==========================orignal english content==========================
    <para>
     Widely-distributed extensions should assume little about the database
     they occupy.  In particular, unless you issued <literal>SET search_path =
     pg_temp</literal>, assume each unqualified name could resolve to an
     object that a malicious user has defined.  Beware of constructs that
     depend on <varname>search_path</varname> implicitly: <token>IN</token>
     and <literal>CASE <replaceable>expression</replaceable> WHEN</literal>
     always select an operator using the search path.  In their place, use
     <literal>OPERATOR(<replaceable>schema</replaceable>.=) ANY</literal>
     and <literal>CASE WHEN <replaceable>expression</replaceable></literal>.
    </para>
____________________________________________________________________________-->
    <para>
     广泛分发的扩展应该尽量少地假定它们所占据的数据库。特别是，除非你发出了<literal>SET search_path = pg_temp</literal>，应该假定每一个未限定的名称都可能解析成恶意用户定义的对象。要小心隐式依赖于<varname>search_path</varname>的结构：<token>IN</token>以及<literal>CASE <replaceable>expression</replaceable> WHEN</literal>总是使用搜索路径选择操作符。对于它们，可使用<literal>OPERATOR(<replaceable>schema</replaceable>.=) ANY</literal>和<literal>CASE WHEN <replaceable>expression</replaceable></literal>。
    </para>

   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Extension Files</title>
____________________________________________________________________________-->
    <title>扩展文件</title>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>control file</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>控制文件</primary>
   </indexterm>

<!--==========================orignal english content==========================
    <para>
     The <xref linkend="sql-createextension"/> command relies on a control
     file for each extension, which must be named the same as the extension
     with a suffix of <literal>.control</literal>, and must be placed in the
     installation's <literal>SHAREDIR/extension</literal> directory.  There
     must also be at least one <acronym>SQL</acronym> script file, which follows the
     naming pattern
     <literal><replaceable>extension</replaceable>-&minus;<replaceable>version</replaceable>.sql</literal>
     (for example, <literal>foo-&minus;1.0.sql</literal> for version <literal>1.0</literal> of
     extension <literal>foo</literal>).  By default, the script file(s) are also
     placed in the <literal>SHAREDIR/extension</literal> directory; but the
     control file can specify a different directory for the script file(s).
    </para>
____________________________________________________________________________-->
    <para>
     <xref linkend="sql-createextension"/>命令依赖每一个扩展都有的控制文件，控制文件必须被命名为扩展的名称加上一个后缀<literal>.control</literal>，并且必须被放在安装的<literal>SHAREDIR/extension</literal>目录中。还必须至少有一个<acronym>SQL</acronym>脚本文件，它遵循命名模式<literal><replaceable>extension</replaceable>--<replaceable>version</replaceable>.sql</literal>（例如，<literal>foo--1.0.sql</literal>表示扩展<literal>foo</literal>的<literal>1.0</literal>版本）。默认情况下，脚本文件也被放置在<literal>SHAREDIR/extension</literal>目录中，但是控制文件中可以为脚本文件指定一个不同的目录。
    </para>

<!--==========================orignal english content==========================
    <para>
     The file format for an extension control file is the same as for the
     <filename>postgresql.conf</filename> file, namely a list of
     <replaceable>parameter_name</replaceable> <literal>=</literal> <replaceable>value</replaceable>
     assignments, one per line.  Blank lines and comments introduced by
     <literal>#</literal> are allowed.  Be sure to quote any value that is not
     a single word or number.
    </para>
____________________________________________________________________________-->
    <para>
     一个扩展控制文件的格式与<filename>postgresql.conf</filename>文件相同，即是一个<replaceable>parameter_name</replaceable> <literal>=</literal> <replaceable>value</replaceable>赋值的列表，每行一个。允许空行和<literal>#</literal>引入的注释。注意对任何不是单一词或数字的值加上引号。
    </para>

<!--==========================orignal english content==========================
    <para>
     A control file can set the following parameters:
    </para>
____________________________________________________________________________-->
    <para>
     一个控制文件可以设置下列参数：
    </para>

    <variablelist>
     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>directory</varname> (<type>string</type>)</term>
____________________________________________________________________________-->
      <term><varname>directory</varname> (<type>string</type>)</term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The directory containing the extension's <acronym>SQL</acronym> script
        file(s).  Unless an absolute path is given, the name is relative to
        the installation's <literal>SHAREDIR</literal> directory.  The
        default behavior is equivalent to specifying
        <literal>directory = 'extension'</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        包含扩展的<acronym>SQL</acronym>脚本文件的目录。除非给出一个绝对路径，这个目录名是相对于安装的<literal>SHAREDIR</literal>目录。默认行为等效于指定<literal>directory = 'extension'</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>default_version</varname> (<type>string</type>)</term>
____________________________________________________________________________-->
      <term><varname>default_version</varname> (<type>string</type>)</term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The default version of the extension (the one that will be installed
        if no version is specified in <command>CREATE EXTENSION</command>).  Although
        this can be omitted, that will result in <command>CREATE EXTENSION</command>
        failing if no <literal>VERSION</literal> option appears, so you generally
        don't want to do that.
       </para>
____________________________________________________________________________-->
       <para>
        该扩展的默认版本（就是如果在<command>CREATE EXTENSION</command>中没有指定版本时将会被安装的那一个）。尽管可以忽略这个参数，但如果没有出现<literal>VERSION</literal>选项时那将会导致<command>CREATE EXTENSION</command>失败，因此你通常不会希望这样做。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>comment</varname> (<type>string</type>)</term>
____________________________________________________________________________-->
      <term><varname>comment</varname> (<type>string</type>)</term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        A comment (any string) about the extension.  The comment is applied
        when initially creating an extension, but not during extension updates
        (since that might override user-added comments).  Alternatively,
        the extension's comment can be set by writing
        a <xref linkend="sql-comment"/> command in the script file.
       </para>
____________________________________________________________________________-->
       <para>
        一个关于该扩展的注释（任意字符串）。该注释会在初始创建扩展时应用，但是扩展更新时不会引用该注释（因为可能会覆盖用户增加的注释）。扩展的注释也可以通过在脚本文件中写上<xref linkend="sql-comment"/>命令来设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>encoding</varname> (<type>string</type>)</term>
____________________________________________________________________________-->
      <term><varname>encoding</varname> (<type>string</type>)</term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The character set encoding used by the script file(s).  This should
        be specified if the script files contain any non-ASCII characters.
        Otherwise the files will be assumed to be in the database encoding.
       </para>
____________________________________________________________________________-->
       <para>
        该脚本文件使用的字符集编码。当脚本文件包含任何非 ASCII 字符时，可以指定这个参数。否则文件都会被假定为数据库编码。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>module_pathname</varname> (<type>string</type>)</term>
____________________________________________________________________________-->
      <term><varname>module_pathname</varname> (<type>string</type>)</term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The value of this parameter will be substituted for each occurrence
        of <literal>MODULE_PATHNAME</literal> in the script file(s).  If it is not
        set, no substitution is made.  Typically, this is set to
        <literal>$libdir/<replaceable>shared_library_name</replaceable></literal> and
        then <literal>MODULE_PATHNAME</literal> is used in <command>CREATE
        FUNCTION</command> commands for C-language functions, so that the script
        files do not need to hard-wire the name of the shared library.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数的值将被用于替换脚本文件中每一次出现的<literal>MODULE_PATHNAME</literal>。如果设置，将不会进行替换。通常，这会被设置为<literal>$libdir/<replaceable>shared_library_name</replaceable></literal>并且接着<literal>MODULE_PATHNAME</literal>被用在<command>CREATE FUNCTION</command>命令中进行 C-语言函数的创建，因此该脚本文件不必把共享库的名称硬编码在其中。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>requires</varname> (<type>string</type>)</term>
____________________________________________________________________________-->
      <term><varname>requires</varname> (<type>string</type>)</term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        A list of names of extensions that this extension depends on,
        for example <literal>requires = 'foo, bar'</literal>.  Those
        extensions must be installed before this one can be installed.
       </para>
____________________________________________________________________________-->
       <para>
        这个扩展依赖的其他扩展名的一个列表，例如<literal>requires = 'foo, bar'</literal>。被依赖的扩展必须先于这个扩展安装。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>superuser</varname> (<type>boolean</type>)</term>
____________________________________________________________________________-->
      <term><varname>superuser</varname> (<type>boolean</type>)</term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If this parameter is <literal>true</literal> (which is the default),
        only superusers can create the extension or update it to a new
        version.  If it is set to <literal>false</literal>, just the privileges
        required to execute the commands in the installation or update script
        are required.
       </para>
____________________________________________________________________________-->
       <para>
        如果这个参数为<literal>true</literal>（默认情况），只有超级用户能够创建该扩展或者将它更新到一个新版本。如果被设置为<literal>false</literal>，只需要用来执行安装中命令或者更新脚本的特权。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>relocatable</varname> (<type>boolean</type>)</term>
____________________________________________________________________________-->
      <term><varname>relocatable</varname> (<type>boolean</type>)</term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        An extension is <firstterm>relocatable</firstterm> if it is possible to move
        its contained objects into a different schema after initial creation
        of the extension.  The default is <literal>false</literal>, i.e. the
        extension is not relocatable.
        See <xref linkend="extend-extensions-relocation"/> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        如果一个扩展可能在初始创建之后将其所含的对象移动到一个不同的模式中，它就是<firstterm>relocatable</firstterm>。默认值是<literal>false</literal>，即该扩展是不可重定位的。详见<xref linkend="extend-extensions-relocation"/>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>schema</varname> (<type>string</type>)</term>
____________________________________________________________________________-->
      <term><varname>schema</varname> (<type>string</type>)</term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This parameter can only be set for non-relocatable extensions.
        It forces the extension to be loaded into exactly the named schema
        and not any other.
        The <varname>schema</varname> parameter is consulted only when
        initially creating an extension, not during extension updates.
        See <xref linkend="extend-extensions-relocation"/> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数只能为非可重定位扩展设置。它强制扩展被载入到给定的模式中而非其他模式中。只有在初始创建一个扩展时才会参考<varname>schema</varname>参数，扩展更新时则不会参考这个参数。详见<xref linkend="extend-extensions-relocation"/>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

<!--==========================orignal english content==========================
    <para>
     In addition to the primary control file
     <literal><replaceable>extension</replaceable>.control</literal>,
     an extension can have secondary control files named in the style
     <literal><replaceable>extension</replaceable>-&minus;<replaceable>version</replaceable>.control</literal>.
     If supplied, these must be located in the script file directory.
     Secondary control files follow the same format as the primary control
     file.  Any parameters set in a secondary control file override the
     primary control file when installing or updating to that version of
     the extension.  However, the parameters <varname>directory</varname> and
     <varname>default_version</varname> cannot be set in a secondary control file.
    </para>
____________________________________________________________________________-->
    <para>
     除了主要控制文件<literal><replaceable>extension</replaceable>.control</literal>，一个扩展还可以有二级控制文件，它们以<literal><replaceable>extension</replaceable>--<replaceable>version</replaceable>.control</literal>的风格命名。如果提供了二级控制文件，它们必须被放置在脚本文件的目录中。二级控制文件遵循主要控制文件相同的格式。在安装或更新该扩展的版本时，一个二级控制文件中设置的任何参数将覆盖主要控制文件中的设置。不过，参数<varname>directory</varname>以及<varname>default_version</varname>不能在二级控制文件中设置。
    </para>

<!--==========================orignal english content==========================
    <para>
     An extension's <acronym>SQL</acronym> script files can contain any SQL commands,
     except for transaction control commands (<command>BEGIN</command>,
     <command>COMMIT</command>, etc) and commands that cannot be executed inside a
     transaction block (such as <command>VACUUM</command>).  This is because the
     script files are implicitly executed within a transaction block.
    </para>
____________________________________________________________________________-->
    <para>
     一个扩展的<acronym>SQL</acronym>脚本文件能够包含任何 SQL 命令，除了事务控制命令（<command>BEGIN</command>、<command>COMMIT</command>等）以及不能在一个事务块中执行的命令（如<command>VACUUM</command>）。这是因为脚本文件会被隐式地在一个事务块中被执行。
    </para>

<!--==========================orignal english content==========================
    <para>
     An extension's <acronym>SQL</acronym> script files can also contain lines
     beginning with <literal>\echo</literal>, which will be ignored (treated as
     comments) by the extension mechanism.  This provision is commonly used
     to throw an error if the script file is fed to <application>psql</application>
     rather than being loaded via <command>CREATE EXTENSION</command> (see example
     script in <xref linkend="extend-extensions-example"/>).
     Without that, users might accidentally load the
     extension's contents as <quote>loose</quote> objects rather than as an
     extension, a state of affairs that's a bit tedious to recover from.
    </para>
____________________________________________________________________________-->
    <para>
     一个扩展的<acronym>SQL</acronym>脚本文件也能包含以<literal>\echo</literal>开始的行，它将被扩展机制忽略（当作注释）。如果脚本文件被送给<application>psql</application>而不是由<command>CREATE EXTENSION</command>载入（见<xref linkend="extend-extensions-example"/>中的示例脚本），这种机制通常被用来抛出错误。如果没有这种功能，用户可能会意外地把该扩展的内容作为<quote>松散的</quote>对象而不是一整个扩展载入，这样的状态恢复起来比较麻烦。
    </para>

<!--==========================orignal english content==========================
    <para>
     While the script files can contain any characters allowed by the specified
     encoding, control files should contain only plain ASCII, because there
     is no way for <productname>PostgreSQL</productname> to know what encoding a
     control file is in.  In practice this is only an issue if you want to
     use non-ASCII characters in the extension's comment.  Recommended
     practice in that case is to not use the control file <varname>comment</varname>
     parameter, but instead use <command>COMMENT ON EXTENSION</command>
     within a script file to set the comment.
    </para>
____________________________________________________________________________-->
    <para>
     尽管脚本文件可以包含指定编码允许的任何字符，但是控制文件应该只包含纯 ASCII 字符，因为<productname>PostgreSQL</productname>没有办法知道一个控制文件是什么编码。实际上，如果你想在扩展的注释中使用非 ASCII 字符只有一个问题。推荐的方法是不使用控制文件的<varname>comment</varname>参数，而是使用脚本文件中的<command>COMMENT ON EXTENSION</command>来设置注释。
    </para>

   </sect2>

   <sect2 id="extend-extensions-relocation">
<!--==========================orignal english content==========================
    <title>Extension Relocatability</title>
____________________________________________________________________________-->
    <title>扩展可再定位性</title>

<!--==========================orignal english content==========================
    <para>
     Users often wish to load the objects contained in an extension into a
     different schema than the extension's author had in mind.  There are
     three supported levels of relocatability:
    </para>
____________________________________________________________________________-->
    <para>
     用户常常希望把扩展中包含的对象载入到一个与扩展的作者所设想的不一样的模式中。对于这种可重定位性，有三种支持的级别：
    </para>

    <itemizedlist>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       A fully relocatable extension can be moved into another schema
       at any time, even after it's been loaded into a database.
       This is done with the <command>ALTER EXTENSION SET SCHEMA</command>
       command, which automatically renames all the member objects into
       the new schema.  Normally, this is only possible if the extension
       contains no internal assumptions about what schema any of its
       objects are in.  Also, the extension's objects must all be in one
       schema to begin with (ignoring objects that do not belong to any
       schema, such as procedural languages).  Mark a fully relocatable
       extension by setting <literal>relocatable = true</literal> in its control
       file.
      </para>
____________________________________________________________________________-->
      <para>
       一个完全可重定位的扩展能在任何时候被移动到另一个模式中，即使在它被载入到一个数据库中之后。这种移动通过<command>ALTER EXTENSION SET SCHEMA</command>命令完成，该命令会自动地把所有成员对象重命名到新的模式中。通常，只有扩展不包含任何对其所在模式的内部假设时才可能这样做。还有，该扩展的对象必须全部在同一个模式中（忽略那些不属于任何模式的对象，例如过程语言）。要让一个扩展变成完全可定位，在它的控制文件中设置<literal>relocatable = true</literal>。
      </para>
     </listitem>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       An extension might be relocatable during installation but not
       afterwards.  This is typically the case if the extension's script
       file needs to reference the target schema explicitly, for example
       in setting <literal>search_path</literal> properties for SQL functions.
       For such an extension, set <literal>relocatable = false</literal> in its
       control file, and use <literal>@extschema@</literal> to refer to the target
       schema in the script file.  All occurrences of this string will be
       replaced by the actual target schema's name before the script is
       executed.  The user can set the target schema using the
       <literal>SCHEMA</literal> option of <command>CREATE EXTENSION</command>.
      </para>
____________________________________________________________________________-->
      <para>
       一个扩展可能在安装过程中是可重定位的，但是安装完后就不再可重定位。典型的情况是扩展的脚本文件需要显式地引用目标模式，例如为 SQL 函数设置<literal>search_path</literal>属性。对于这样一种扩展，在其控制文件中设置<literal>relocatable = false</literal>，并且使用<literal>@extschema@</literal>在脚本文件中引用目标模式。在脚本被执行前，所有这个字符串的出现都将被替换为实际的目标模式名。用户可以使用<command>CREATE EXTENSION</command>的<literal>SCHEMA</literal>选项设置目标模式名。
      </para>
     </listitem>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       If the extension does not support relocation at all, set
       <literal>relocatable = false</literal> in its control file, and also set
       <literal>schema</literal> to the name of the intended target schema.  This
       will prevent use of the <literal>SCHEMA</literal> option of <command>CREATE
       EXTENSION</command>, unless it specifies the same schema named in the control
       file.  This choice is typically necessary if the extension contains
       internal assumptions about schema names that can't be replaced by
       uses of <literal>@extschema@</literal>.  The <literal>@extschema@</literal>
       substitution mechanism is available in this case too, although it is
       of limited use since the schema name is determined by the control file.
      </para>
____________________________________________________________________________-->
      <para>
       如果扩展根本就不支持重定位，在它的控制文件中设置<literal>relocatable = false</literal>，并且还设置<literal>schema</literal>为想要的目标模式的名称。这将阻止使用<command>CREATE EXTENSION</command>的<literal>SCHEMA</literal>选项修改目标模式，除非它指定的是和控制文件中相同的模式。如果该扩展包括关于模式名的内部假设且模式名不能使用<literal>@extschema@</literal>的方法替换，这种选择通常是必须的。<literal>@extschema@</literal>替换机制在这种情况中也是可用的，不过由于模式名已经被控制文件所决定，它的使用受到了很大的限制。
      </para>
     </listitem>
    </itemizedlist>

<!--==========================orignal english content==========================
    <para>
     In all cases, the script file will be executed with
     <xref linkend="guc-search-path"/> initially set to point to the target
     schema; that is, <command>CREATE EXTENSION</command> does the equivalent of
     this:
<programlisting>
SET LOCAL search_path TO @extschema@;
</programlisting>
     This allows the objects created by the script file to go into the target
     schema.  The script file can change <varname>search_path</varname> if it wishes,
     but that is generally undesirable.  <varname>search_path</varname> is restored
     to its previous setting upon completion of <command>CREATE EXTENSION</command>.
    </para>
____________________________________________________________________________-->
    <para>
     在所有情况下，脚本文件将被用<xref linkend="guc-search-path"/>执行，它最初会被设置为指向目标模式，也就是说<command>CREATE EXTENSION</command>做的也是等效的工作：
<programlisting>
SET LOCAL search_path TO @extschema@;
</programlisting>
     这允许由这个脚本文件创建的对象进入到目标模式中。如果脚本文件希望，它可以改变<varname>search_path</varname>，但这种用法通常是不受欢迎的。在<command>CREATE EXTENSION</command>结束后，<varname>search_path</varname>会被恢复到之前的设置。
    </para>

<!--==========================orignal english content==========================
    <para>
     The target schema is determined by the <varname>schema</varname> parameter in
     the control file if that is given, otherwise by the <literal>SCHEMA</literal>
     option of <command>CREATE EXTENSION</command> if that is given, otherwise the
     current default object creation schema (the first one in the caller's
     <varname>search_path</varname>).  When the control file <varname>schema</varname>
     parameter is used, the target schema will be created if it doesn't
     already exist, but in the other two cases it must already exist.
    </para>
____________________________________________________________________________-->
    <para>
     如果控制文件中给出了<varname>schema</varname>参数，目标模式就由该参数决定，否则目标模式由<command>CREATE EXTENSION</command>的<literal>SCHEMA</literal>选项给出，如果以上两者都没有给出则会用当前默认的对象创建模式（在调用者<varname>search_path</varname>中的第一个）。当使用扩展文件的<varname>schema</varname>参数时，如果目标模式还不存在将创建它，但是在另外两种情况下它必须已经存在。
    </para>

<!--==========================orignal english content==========================
    <para>
     If any prerequisite extensions are listed in <varname>requires</varname>
     in the control file, their target schemas are appended to the initial
     setting of <varname>search_path</varname>.  This allows their objects to be
     visible to the new extension's script file.
    </para>
____________________________________________________________________________-->
    <para>
     如果在控制文件中的<varname>requires</varname>中列举了任何先导扩展，它们的目标模式会被追加到<varname>search_path</varname>的初始设置中。这允许新扩展的脚本文件能够看到它们的对象。
    </para>

<!--==========================orignal english content==========================
    <para>
     Although a non-relocatable extension can contain objects spread across
     multiple schemas, it is usually desirable to place all the objects meant
     for external use into a single schema, which is considered the extension's
     target schema.  Such an arrangement works conveniently with the default
     setting of <varname>search_path</varname> during creation of dependent
     extensions.
    </para>
____________________________________________________________________________-->
    <para>
     尽管一个不可重定位的扩展能够包含散布在多个模式中的对象，通常还是值得将意图用于外部使用的所有对象放置在一个模式中，这被认为是该扩展的目标模式。这样一种安排可以在依赖的扩展创建过程中方便地与<varname>search_path</varname>的默认设置一起工作。
    </para>
   </sect2>

   <sect2 id="extend-extensions-config-tables">
<!--==========================orignal english content==========================
    <title>Extension Configuration Tables</title>
____________________________________________________________________________-->
    <title>扩展配置表</title>

<!--==========================orignal english content==========================
    <para>
     Some extensions include configuration tables, which contain data that
     might be added or changed by the user after installation of the
     extension.  Ordinarily, if a table is part of an extension, neither
     the table's definition nor its content will be dumped by
     <application>pg_dump</application>.  But that behavior is undesirable for a
     configuration table; any data changes made by the user need to be
     included in dumps, or the extension will behave differently after a dump
     and reload.
    </para>
____________________________________________________________________________-->
    <para>
     某些扩展包括配置表，其中包含可以由用户在扩展安装后增加或修改的数据。通常，如果一个表是一个扩展的一部分，该表的定义和内容都不会被<application>pg_dump</application>转储。但是对于一个配置表来说并不希望是这样的行为，任何用户做出的数据修改都需要被包括在转储中，否则该扩展在重载之后的行为将和转储之前不同。
    </para>

<!--==========================orignal english content==========================
   <indexterm>
    <primary>pg_extension_config_dump</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm>
    <primary>pg_extension_config_dump</primary>
   </indexterm>

<!--==========================orignal english content==========================
    <para>
     To solve this problem, an extension's script file can mark a table
     or a sequence it has created as a configuration relation, which will
     cause <application>pg_dump</application> to include the table's or the sequence's
     contents (not its definition) in dumps.  To do that, call the function
     <function>pg_extension_config_dump(regclass, text)</function> after creating the
     table or the sequence, for example
<programlisting>
CREATE TABLE my_config (key text, value text);
CREATE SEQUENCE my_config_seq;

SELECT pg_catalog.pg_extension_config_dump('my_config', '');
SELECT pg_catalog.pg_extension_config_dump('my_config_seq', '');
</programlisting>
     Any number of tables or sequences can be marked this way. Sequences
     associated with <type>serial</type> or <type>bigserial</type> columns can
     be marked as well.
    </para>
____________________________________________________________________________-->
    <para>
     要解决这个问题，一个扩展的脚本文件可以把一个它创建的表或者序列标记为配置关系，这将导致<application>pg_dump</application>把该表或者序列的内容（而不是它的定义）包括在转储中。要这样做，在创建表或序列之后调用函数<function>pg_extension_config_dump(regclass, text)</function>，例如
<programlisting>
CREATE TABLE my_config (key text, value text);
CREATE SEQUENCE my_config_seq;

SELECT pg_catalog.pg_extension_config_dump('my_config', '');
SELECT pg_catalog.pg_extension_config_dump('my_config_seq', '');
</programlisting>
     可以用这种方法标记任意数量的表或者序列。与<type>serial</type>或者<type>bigserial</type>列相关联的序列也可以被标记。
    </para>

<!--==========================orignal english content==========================
    <para>
     When the second argument of <function>pg_extension_config_dump</function> is
     an empty string, the entire contents of the table are dumped by
     <application>pg_dump</application>.  This is usually only correct if the table
     is initially empty as created by the extension script.  If there is
     a mixture of initial data and user-provided data in the table,
     the second argument of <function>pg_extension_config_dump</function> provides
     a <literal>WHERE</literal> condition that selects the data to be dumped.
     For example, you might do
<programlisting>
CREATE TABLE my_config (key text, value text, standard_entry boolean);

SELECT pg_catalog.pg_extension_config_dump('my_config', 'WHERE NOT standard_entry');
</programlisting>
     and then make sure that <structfield>standard_entry</structfield> is true only
     in the rows created by the extension's script.
    </para>
____________________________________________________________________________-->
    <para>
     当<function>pg_extension_config_dump</function>的第二个参数是一个空字符串时，该表的全部内容都会被<application>pg_dump</application>转储。这通常只有在表被扩展脚本创建为初始为空时才正确。如果在表中混合有初始数据和用户提供的数据，<function>pg_extension_config_dump</function>的第二个参数提供了一种<literal>WHERE</literal>条件来选择要被转储的数据。例如，你可能会做
<programlisting>
CREATE TABLE my_config (key text, value text, standard_entry boolean);

SELECT pg_catalog.pg_extension_config_dump('my_config', 'WHERE NOT standard_entry');
</programlisting>
     并且确保只有扩展脚本创建的行中<structfield>standard_entry</structfield>才为真。
    </para>
    
<!--==========================orignal english content==========================
    <para>
     For sequences, the second argument of <function>pg_extension_config_dump</function>
     has no effect.
    </para>
____________________________________________________________________________-->
    <para>
     对于序列，<function>pg_extension_config_dump</function>的第二个参数没有影响。
    </para>

<!--==========================orignal english content==========================
    <para>
     More complicated situations, such as initially-provided rows that might
     be modified by users, can be handled by creating triggers on the
     configuration table to ensure that modified rows are marked correctly.
    </para>
____________________________________________________________________________-->
    <para>
     更复杂的情况（例如用户可能会修改初始提供的数据）可以通过在配置表上创建触发器来处理，触发器将负责保证被修改的行会被正确地标记。
    </para>

<!--==========================orignal english content==========================
    <para>
     You can alter the filter condition associated with a configuration table
     by calling <function>pg_extension_config_dump</function> again.  (This would
     typically be useful in an extension update script.)  The only way to mark
     a table as no longer a configuration table is to dissociate it from the
     extension with <command>ALTER EXTENSION ... DROP TABLE</command>.
    </para>
____________________________________________________________________________-->
    <para>
     你可通过再次调用<function>pg_extension_config_dump</function>来修改与一个配置表相关的过滤条件（这通常对于一个扩展更新脚本有用）。将一个表标记为不再是一个配置表的方法是用<command>ALTER EXTENSION ... DROP TABLE</command>将它与扩展脱离开。
    </para>

<!--==========================orignal english content==========================
    <para>
     Note that foreign key relationships between these tables will dictate the
     order in which the tables are dumped out by pg_dump.  Specifically, pg_dump
     will attempt to dump the referenced-by table before the referencing table.
     As the foreign key relationships are set up at CREATE EXTENSION time (prior
     to data being loaded into the tables) circular dependencies are not
     supported.  When circular dependencies exist, the data will still be dumped
     out but the dump will not be able to be restored directly and user
     intervention will be required.
    </para>
____________________________________________________________________________-->
    <para>
     注意这些表之间的外键关系将会指导这些表被 pg_dump 转储的顺序。特别地，pg_dump 将尝试
     先转储被引用的表再转储引用表。由于外键关系是在 CREATE EXTENSION 时间（先于数据被载入
     到表中）建立的，环状依赖还没有建立。当环状依赖存在时，数据将仍然被转储，但是该转储无法被
     直接恢复并且必须要用户的介入。
    </para>
    
<!--==========================orignal english content==========================
    <para>
     Sequences associated with <type>serial</type> or <type>bigserial</type> columns
     need to be directly marked to dump their state. Marking their parent
     relation is not enough for this purpose.
    </para>
____________________________________________________________________________-->
    <para>
     与<type>serial</type>或者<type>bigserial</type>列相关联的序列需要被直接标记以转储它们的状态。只标记它们的父关系不足以转储它们的状态。
    </para>

   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Extension Updates</title>
____________________________________________________________________________-->
    <title>扩展更新</title>

<!--==========================orignal english content==========================
    <para>
     One advantage of the extension mechanism is that it provides convenient
     ways to manage updates to the SQL commands that define an extension's
     objects.  This is done by associating a version name or number with
     each released version of the extension's installation script.
     In addition, if you want users to be able to update their databases
     dynamically from one version to the next, you should provide
     <firstterm>update scripts</firstterm> that make the necessary changes to go from
     one version to the next.  Update scripts have names following the pattern
     <literal><replaceable>extension</replaceable>-&minus;<replaceable>oldversion</replaceable>-&minus;<replaceable>newversion</replaceable>.sql</literal>
     (for example, <literal>foo-&minus;1.0-&minus;1.1.sql</literal> contains the commands to modify
     version <literal>1.0</literal> of extension <literal>foo</literal> into version
     <literal>1.1</literal>).
    </para>
____________________________________________________________________________-->
    <para>
     扩展机制的一个优点是它提供了方便的方法来管理那些定义扩展中对象的 SQL 命令的更新。这是通过为扩展的安装脚本的每一个发行版本关联一个版本名称或者版本号实现的。此外，如果你希望用户能够动态地把他们的数据库从一个版本更新到下一个版本，你应该提供<firstterm>更新脚本</firstterm>来做必要的更改。更新脚本的名称遵循<literal><replaceable>extension</replaceable>--<replaceable>oldversion</replaceable>--<replaceable>newversion</replaceable>.sql</literal>模式（例如，<literal>foo--1.0--1.1.sql</literal>包含着把扩展<literal>foo</literal>的版本<literal>1.0</literal>修改成版本<literal>1.1</literal>的命令）。
    </para>

<!--==========================orignal english content==========================
    <para>
     Given that a suitable update script is available, the command
     <command>ALTER EXTENSION UPDATE</command> will update an installed extension
     to the specified new version.  The update script is run in the same
     environment that <command>CREATE EXTENSION</command> provides for installation
     scripts: in particular, <varname>search_path</varname> is set up in the same
     way, and any new objects created by the script are automatically added
     to the extension.  Also, if the script chooses to drop extension member
     objects, they are automatically dissociated from the extension.
    </para>
____________________________________________________________________________-->
    <para>
     假定有一个合适的更新脚本可用，命令<command>ALTER EXTENSION UPDATE</command>将把一个已安装的扩展更新到指定的新版本。更新脚本运行在与<command>CREATE EXTENSION</command>提供给安装脚本相同的环境中：特别是<varname>search_path</varname>会按照相同的方式设置，并且该脚本创建的任何新对象会被自动地加入到扩展中。此外，如果脚本选择删除扩展的成员对象，它们会自动与扩展解除关联。
    </para>

<!--==========================orignal english content==========================
    <para>
     If an extension has secondary control files, the control parameters
     that are used for an update script are those associated with the script's
     target (new) version.
    </para>
____________________________________________________________________________-->
    <para>
     如果一个扩展具有二级控制文件，用于更新脚本的控制参数是那些与新目标版本相关的参数。
    </para>

<!--==========================orignal english content==========================
    <para>
     The update mechanism can be used to solve an important special case:
     converting a <quote>loose</quote> collection of objects into an extension.
     Before the extension mechanism was added to
     <productname>PostgreSQL</productname> (in 9.1), many people wrote
     extension modules that simply created assorted unpackaged objects.
     Given an existing database containing such objects, how can we convert
     the objects into a properly packaged extension?  Dropping them and then
     doing a plain <command>CREATE EXTENSION</command> is one way, but it's not
     desirable if the objects have dependencies (for example, if there are
     table columns of a data type created by the extension).  The way to fix
     this situation is to create an empty extension, then use <command>ALTER
     EXTENSION ADD</command> to attach each pre-existing object to the extension,
     then finally create any new objects that are in the current extension
     version but were not in the unpackaged release.  <command>CREATE
     EXTENSION</command> supports this case with its <literal>FROM</literal> <replaceable
     class="parameter">old_version</replaceable> option, which causes it to not run the
     normal installation script for the target version, but instead the update
     script named
     <literal><replaceable>extension</replaceable>-&minus;<replaceable>old_version</replaceable>-&minus;<replaceable>target_version</replaceable>.sql</literal>.
     The choice of the dummy version name to use as <replaceable
     class="parameter">old_version</replaceable> is up to the extension author, though
     <literal>unpackaged</literal> is a common convention.  If you have multiple
     prior versions you need to be able to update into extension style, use
     multiple dummy version names to identify them.
    </para>
____________________________________________________________________________-->
    <para>
     更新机制可以被用来解决一种重要的特殊情况：将一个<quote>松散的</quote>对象集合转变成一个扩展。在扩展机制被加入到<productname>PostgreSQL</productname>（从 9.1 开始）之前，很多人编写的扩展模块简单地创建各种各样未打包的对象。给定一个包含这类对象的现有数据库，我们怎样才能将这些对象转变成一个正确打包的扩展？将它们全部删除然后做一次<command>CREATE EXTENSION</command>是一种方法，但是如果对象之间有依赖（例如，如果有一些表列使用了扩展创建的数据类型）这就行不通。修正这种情况的方法是创建一个空扩展，然后使用<command>ALTER EXTENSION ADD</command>把每一个以前就存在的对象附着到该扩展，最后创建在当前扩展版本中而不再未打包版本中的任何新对象。<command>CREATE EXTENSION</command>用它的<literal>FROM</literal> <replaceable class="parameter">old_version</replaceable>选项支持这种情况，这会导致它不为目标版本运行正常的安装脚本，而是运行名为<literal><replaceable>extension</replaceable>--<replaceable>old_version</replaceable>--<replaceable>target_version</replaceable>.sql</literal>的更新脚本。选择作为<replaceable class="parameter">old_version</replaceable>使用的虚假版本名称是扩展作者的工作，不过<literal>unpackaged</literal>是一种习惯用法。如果你有多个早期版本需要更新到扩展风格，使用多个虚假版本名称来标识它们。
    </para>

<!--==========================orignal english content==========================
    <para>
     <command>ALTER EXTENSION</command> is able to execute sequences of update
     script files to achieve a requested update.  For example, if only
     <literal>foo-&minus;1.0-&minus;1.1.sql</literal> and <literal>foo-&minus;1.1-&minus;2.0.sql</literal> are
     available, <command>ALTER EXTENSION</command> will apply them in sequence if an
     update to version <literal>2.0</literal> is requested when <literal>1.0</literal> is
     currently installed.
    </para>
____________________________________________________________________________-->
    <para>
     <command>ALTER EXTENSION</command>能够执行更新脚本的序列来实现一个要求的更新。例如，如果只有<literal>foo--1.0--1.1.sql</literal>和<literal>foo--1.1--2.0.sql</literal>可用，当前安装了<literal>1.0</literal>版本并且要求更新到版本<literal>2.0</literal>，<command>ALTER EXTENSION</command>将依次应用它们。
    </para>

<!--==========================orignal english content==========================
    <para>
     <productname>PostgreSQL</productname> doesn't assume anything about the properties
     of version names: for example, it does not know whether <literal>1.1</literal>
     follows <literal>1.0</literal>.  It just matches up the available version names
     and follows the path that requires applying the fewest update scripts.
     (A version name can actually be any string that doesn't contain
     <literal>-&minus;</literal> or leading or trailing <literal>-</literal>.)
    </para>
____________________________________________________________________________-->
    <para>
     <productname>PostgreSQL</productname>并不假定任何有关版本名称的性质：例如，它不知道<literal>1.1</literal>是否跟在<literal>1.0</literal>后面。它只是匹配可用的版本名称并且遵照要求应用最少更新脚本的路径进行（一个版本名称实际上可以是不含<literal>--</literal>或者前导或后缀<literal>-</literal>的字符串）。
    </para>

<!--==========================orignal english content==========================
    <para>
     Sometimes it is useful to provide <quote>downgrade</quote> scripts, for
     example <literal>foo-&minus;1.1-&minus;1.0.sql</literal> to allow reverting the changes
     associated with version <literal>1.1</literal>.  If you do that, be careful
     of the possibility that a downgrade script might unexpectedly
     get applied because it yields a shorter path.  The risky case is where
     there is a <quote>fast path</quote> update script that jumps ahead several
     versions as well as a downgrade script to the fast path's start point.
     It might take fewer steps to apply the downgrade and then the fast
     path than to move ahead one version at a time.  If the downgrade script
     drops any irreplaceable objects, this will yield undesirable results.
    </para>
____________________________________________________________________________-->
    <para>
     有时提供<quote>降级</quote>脚本也有用，例如<literal>foo--1.1--1.0.sql</literal>允许把版本<literal>1.1</literal>相关的改变恢复原状。如果你这样做，要当心降级脚本被意外应用的可能性，因为它会得到一个较短的路径。危险的情况是，有一个跳过几个版本的<quote>快速路径</quote>更新脚本还有一个降级到该快速路径开始点的降级脚本。先应用降级然后再应用快速路径可能比一次升级一个版本需要更少的步骤。如果降级版本删除了任何不可替代的对象，这将会得到意想不到的结果。
    </para>

<!--==========================orignal english content==========================
    <para>
     To check for unexpected update paths, use this command:
<programlisting>
SELECT * FROM pg_extension_update_paths('<replaceable>extension_name</replaceable>');
</programlisting>
     This shows each pair of distinct known version names for the specified
     extension, together with the update path sequence that would be taken to
     get from the source version to the target version, or <literal>NULL</literal> if
     there is no available update path.  The path is shown in textual form
     with <literal>-&minus;</literal> separators.  You can use
     <literal>regexp_split_to_array(path,'-&minus;')</literal> if you prefer an array
     format.
    </para>
____________________________________________________________________________-->
    <para>
     要检查意料之外的更新路径，可使用这个命令：
<programlisting>
SELECT * FROM pg_extension_update_paths('<replaceable>extension_name</replaceable>');
</programlisting>
     这会为指定的扩展显示已知的每一个可区分的版本名对，每一个版本名对还带有一个从源版本到目标版本的更新路径序列，如果没有可用的更新路径则这部份信息为<literal>NULL</literal>。该路径显示为用<literal>--</literal>分隔符的文本形式。如果你更喜欢数组格式，可以使用<literal>regexp_split_to_array(path,'--')</literal>。
    </para>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Installing Extensions using Update Scripts</title>
____________________________________________________________________________-->
    <title>用更新脚本安装扩展</title>

<!--==========================orignal english content==========================
    <para>
     An extension that has been around for awhile will probably exist in
     several versions, for which the author will need to write update scripts.
     For example, if you have released a <literal>foo</literal> extension in
     versions <literal>1.0</literal>, <literal>1.1</literal>, and <literal>1.2</literal>, there
     should be update scripts <filename>foo-&minus;1.0-&minus;1.1.sql</filename>
     and <filename>foo-&minus;1.1-&minus;1.2.sql</filename>.
     Before <productname>PostgreSQL</productname> 10, it was necessary to also create
     new script files <filename>foo-&minus;1.1.sql</filename> and <filename>foo-&minus;1.2.sql</filename>
     that directly build the newer extension versions, or else the newer
     versions could not be installed directly, only by
     installing <literal>1.0</literal> and then updating.  That was tedious and
     duplicative, but now it's unnecessary, because <command>CREATE
     EXTENSION</command> can follow update chains automatically.
     For example, if only the script
     files <filename>foo-&minus;1.0.sql</filename>, <filename>foo-&minus;1.0-&minus;1.1.sql</filename>,
     and <filename>foo-&minus;1.1-&minus;1.2.sql</filename> are available then a request to
     install version <literal>1.2</literal> is honored by running those three
     scripts in sequence.  The processing is the same as if you'd first
     installed <literal>1.0</literal> and then updated to <literal>1.2</literal>.
     (As with <command>ALTER EXTENSION UPDATE</command>, if multiple pathways are
     available then the shortest is preferred.)  Arranging an extension's
     script files in this style can reduce the amount of maintenance effort
     needed to produce small updates.
    </para>
____________________________________________________________________________-->
    <para>
     一个已经存在一段时间的扩展可能存在多个版本，作者将需要为它们编写更新脚本。例如，如果你已经发布了扩展<literal>foo</literal>的版本<literal>1.0</literal>、<literal>1.1</literal>和<literal>1.2</literal>，就应该有更新脚本<filename>foo--1.0--1.1.sql</filename>和<filename>foo--1.1--1.2.sql</filename>。在<productname>PostgreSQL</productname> 10之前，还有必要创建新的脚本文件<filename>foo--1.1.sql</filename>和<filename>foo--1.2.sql</filename>，它们直接构建比较新的扩展版本，或者新的版本无法被直接安装，而是通过先安装<literal>1.0</literal>然后更新。那种方式是无聊的重复性工作，但是现在它是不必要的了，因为<command>CREATE EXTENSION</command>能够自动遵循更新链。例如，如果只有脚本文件<filename>foo--1.0.sql</filename>、<filename>foo--1.0--1.1.sql</filename>和<filename>foo--1.1--1.2.sql</filename>可用，那么安装版本<literal>1.2</literal>的请求会通过按顺序运行上述三个脚本来实现。这种处理和先安装<literal>1.0</literal>然后更新到<literal>1.2</literal>是一样的（和<command>ALTER EXTENSION UPDATE</command>一样，如果有多条路径可用则优先选择最短的）。按这种风格安排扩展 的脚本文件可以减少生产小更新所需的维护工作量。
    </para>

<!--==========================orignal english content==========================
    <para>
     If you use secondary (version-specific) control files with an extension
     maintained in this style, keep in mind that each version needs a control
     file even if it has no stand-alone installation script, as that control
     file will determine how the implicit update to that version is performed.
     For example, if <filename>foo-&minus;1.0.control</filename> specifies <literal>requires
     = 'bar'</literal> but <literal>foo</literal>'s other control files do not, the
     extension's dependency on <literal>bar</literal> will be dropped when updating
     from <literal>1.0</literal> to another version.
    </para>
____________________________________________________________________________-->
    <para>
     如果以这种风格维护的扩展中使用了二级（版本相关的）控制文件，记住每个版本都需要一个控制文件，即使它没有单独的安装脚本，因为该控制文件将决定如何执行到这个版本的隐式更新。例如，如果<filename>foo--1.0.control</filename>指定有<literal>requires
     = 'bar'</literal>，但<literal>foo</literal>的其他控制文件没有这样做，在从<literal>1.0</literal>更新到另一个版本时，该扩展对<literal>bar</literal>的依赖将被删除。
    </para>
   </sect2>

   <sect2 id="extend-extensions-example">
<!--==========================orignal english content==========================
    <title>Extension Example</title>
____________________________________________________________________________-->
    <title>扩展实例</title>

<!--==========================orignal english content==========================
    <para>
     Here is a complete example of an <acronym>SQL</acronym>-only
     extension, a two-element composite type that can store any type of value
     in its slots, which are named <quote>k</quote> and <quote>v</quote>.  Non-text
     values are automatically coerced to text for storage.
    </para>
____________________________________________________________________________-->
    <para>
     这里是一个只用<acronym>SQL</acronym>的扩展的完整例子，一个两个元素的组合类型，它可以在它的槽（命名为<quote>k</quote>和<quote>v</quote>）中存储任何类型的值。非文本值会被自动强制为文本进行存储。
    </para>

<!--==========================orignal english content==========================
    <para>
     The script file <filename>pair-&minus;1.0.sql</filename> looks like this:

<programlisting><![CDATA[
-&minus; complain if script is sourced in psql, rather than via CREATE EXTENSION
\echo Use "CREATE EXTENSION pair" to load this file. \quit

CREATE TYPE pair AS ( k text, v text );

CREATE OR REPLACE FUNCTION pair(text, text)
RETURNS pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::@extschema@.pair;';

CREATE OPERATOR ~> (LEFTARG = text, RIGHTARG = text, FUNCTION = pair);

-&minus; "SET search_path" is easy to get right, but qualified names perform better.
CREATE OR REPLACE FUNCTION lower(pair)
RETURNS pair LANGUAGE SQL
AS 'SELECT ROW(lower($1.k), lower($1.v))::@extschema@.pair;'
SET search_path = pg_temp;

CREATE OR REPLACE FUNCTION pair_concat(pair, pair)
RETURNS pair LANGUAGE SQL
AS 'SELECT ROW($1.k OPERATOR(pg_catalog.||) $2.k,
               $1.v OPERATOR(pg_catalog.||) $2.v)::@extschema@.pair;';
]]>
</programlisting>
    </para>
____________________________________________________________________________-->
    <para>
     脚本文件<filename>pair--1.0.sql</filename>看起来像这样：

<programlisting><![CDATA[
-- 如果脚本是由 psql 而不是 CREATE EXTENSION 执行，则报错
\echo Use "CREATE EXTENSION pair" to load this file. \quit

CREATE TYPE pair AS ( k text, v text );

CREATE OR REPLACE FUNCTION pair(text, text)
RETURNS pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::@extschema@.pair;';

CREATE OPERATOR ~> (LEFTARG = text, RIGHTARG = text, FUNCTION = pair);

-- "SET search_path"容易操作，但限定名称更好。
CREATE OR REPLACE FUNCTION lower(pair)
RETURNS pair LANGUAGE SQL
AS 'SELECT ROW(lower($1.k), lower($1.v))::@extschema@.pair;'
SET search_path = pg_temp;

CREATE OR REPLACE FUNCTION pair_concat(pair, pair)
RETURNS pair LANGUAGE SQL
AS 'SELECT ROW($1.k OPERATOR(pg_catalog.||) $2.k,
               $1.v OPERATOR(pg_catalog.||) $2.v)::@extschema@.pair;';

]]>
</programlisting>
    </para>

<!--==========================orignal english content==========================
    <para>
     The control file <filename>pair.control</filename> looks like this:

<programlisting>
# pair extension
comment = 'A key/value pair data type'
default_version = '1.0'
relocatable = false
</programlisting>
    </para>
____________________________________________________________________________-->
    <para>
     控制文件<filename>pair.control</filename>看起来像这样：

<programlisting>
# pair 扩展
comment = 'A key/value pair data type'
default_version = '1.0'
relocatable = false
</programlisting>
    </para>

<!--==========================orignal english content==========================
    <para>
     While you hardly need a makefile to install these two files into the
     correct directory, you could use a <filename>Makefile</filename> containing this:

<programlisting>
EXTENSION = pair
DATA = pair-&minus;1.0.sql

PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) -&minus;pgxs)
include $(PGXS)
</programlisting>

     This makefile relies on <acronym>PGXS</acronym>, which is described
     in <xref linkend="extend-pgxs"/>.  The command <literal>make install</literal>
     will install the control and script files into the correct
     directory as reported by <application>pg_config</application>.
    </para>
____________________________________________________________________________-->
    <para>
     虽然你几乎不会需要一个 makefile 来安装这两个文件到正确的目录，你还是可以使用一个<filename>Makefile</filename>：

<programlisting>
EXTENSION = pair
DATA = pair--1.0.sql

PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)
</programlisting>

     这个 makefile 依赖于<acronym>PGXS</acronym>，它在<xref linkend="extend-pgxs"/>中描述。命令<literal>make install</literal>将把控制和脚本文件安装到<application>pg_config</application>报告的正确的目录中。
    </para>

<!--==========================orignal english content==========================
    <para>
     Once the files are installed, use the
     <xref linkend="sql-createextension"/> command to load the objects into
     any particular database.
    </para>
____________________________________________________________________________-->
    <para>
     一旦文件被安装，使用<xref linkend="sql-createextension"/>命令就可以把对象载入到任何特定的数据库中。
    </para>
   </sect2>
  </sect1>

  <sect1 id="extend-pgxs">
<!--==========================orignal english content==========================
   <title>Extension Building Infrastructure</title>
____________________________________________________________________________-->
   <title>扩展的构建基础设施</title>

<!--==========================orignal english content==========================
   <indexterm zone="extend-pgxs">
    <primary>pgxs</primary>
   </indexterm>
____________________________________________________________________________-->
   <indexterm zone="extend-pgxs">
    <primary>pgxs</primary>
   </indexterm>

<!--==========================orignal english content==========================
   <para>
    If you are thinking about distributing your
    <productname>PostgreSQL</productname> extension modules, setting up a
    portable build system for them can be fairly difficult.  Therefore
    the <productname>PostgreSQL</productname> installation provides a build
    infrastructure for extensions, called <acronym>PGXS</acronym>, so
    that simple extension modules can be built simply against an
    already installed server.  <acronym>PGXS</acronym> is mainly intended
    for extensions that include C code, although it can be used for
    pure-SQL extensions too.  Note that <acronym>PGXS</acronym> is not
    intended to be a universal build system framework that can be used
    to build any software interfacing to <productname>PostgreSQL</productname>;
    it simply automates common build rules for simple server extension
    modules.  For more complicated packages, you might need to write your
    own build system.
   </para>
____________________________________________________________________________-->
   <para>
    如果你正在考虑发布你的<productname>PostgreSQL</productname>扩展模块，为它们建立一个可移植的构建系统实在是相当困难。因此<productname>PostgreSQL</productname>安装为扩展提供了一种被称为<acronym>PGXS</acronym>构建基础设施，因此简单的扩展模块能够在一个已经安装的服务器上简单地编译。<acronym>PGXS</acronym>主要是为了包括 C 代码的扩展而设计，不过它也能用于纯 SQL 的扩展。注意<acronym>PGXS</acronym>并不想成为一种用于构建任何与<productname>PostgreSQL</productname>交互的软件的通用构建系统框架。它只是简单地把简单服务器扩展模块的公共构建规则自动化。对于更复杂的包，你可能需要编写你自己的构建系统。
   </para>

<!--==========================orignal english content==========================
   <para>
    To use the <acronym>PGXS</acronym> infrastructure for your extension,
    you must write a simple makefile.
    In the makefile, you need to set some variables
    and include the global <acronym>PGXS</acronym> makefile.
    Here is an example that builds an extension module named
    <literal>isbn_issn</literal>, consisting of a shared library containing
    some C code, an extension control file, a SQL script, an include file
    (only needed if other modules might need to access the extension functions
    without going via SQL), and a documentation text file:
<programlisting>
MODULES = isbn_issn
EXTENSION = isbn_issn
DATA = isbn_issn-&minus;1.0.sql
DOCS = README.isbn_issn
HEADERS_isbn_issn = isbn_issn.h

PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) -&minus;pgxs)
include $(PGXS)
</programlisting>
    The last three lines should always be the same.  Earlier in the
    file, you assign variables or add custom
    <application>make</application> rules.
   </para>
____________________________________________________________________________-->
   <para>
    要把<acronym>PGXS</acronym>基础设施用于你的扩展，你必须编写一个简单的 makefile。在这个 makefile 中，你需要设置一些变量并且把它们包括在全局的<acronym>PGXS</acronym> makefile 中。这里有一个例子，它构建一个名为<literal>isbn_issn</literal>的扩展模块，其中包括一个含有 C 代码的共享库、一个扩展控制文件、一个 SQL 脚本、一个包括文件（仅当其他模块可能需要通过调用而不是SQL访问这个扩展的函数时才需要）以及一个文档文件：
<programlisting>
MODULES = isbn_issn
EXTENSION = isbn_issn
DATA = isbn_issn--1.0.sql
DOCS = README.isbn_issn
HEADERS_isbn_issn = isbn_issn.h

PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)
</programlisting>
    最后三行应该总是相同的。在这个文件的前面部分，你要对变量赋值或者增加自定义的<application>make</application>规则。
   </para>

<!--==========================orignal english content==========================
   <para>
    Set one of these three variables to specify what is built:

    <variablelist>
     <varlistentry>
      <term><varname>MODULES</varname></term>
      <listitem>
       <para>
        list of shared-library objects to be built from source files with same
        stem (do not include library suffixes in this list)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>MODULE_big</varname></term>
      <listitem>
       <para>
        a shared library to build from multiple source files
        (list object files in <varname>OBJS</varname>)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PROGRAM</varname></term>
      <listitem>
       <para>
        an executable program to build
        (list object files in <varname>OBJS</varname>)
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    The following variables can also be set:

    <variablelist>
     <varlistentry>
      <term><varname>EXTENSION</varname></term>
      <listitem>
       <para>
        extension name(s); for each name you must provide an
        <literal><replaceable>extension</replaceable>.control</literal> file,
        which will be installed into
        <literal><replaceable>prefix</replaceable>/share/extension</literal>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>MODULEDIR</varname></term>
      <listitem>
       <para>
        subdirectory of <literal><replaceable>prefix</replaceable>/share</literal>
        into which DATA and DOCS files should be installed
        (if not set, default is <literal>extension</literal> if
        <varname>EXTENSION</varname> is set,
        or <literal>contrib</literal> if not)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DATA</varname></term>
      <listitem>
       <para>
        random files to install into <literal><replaceable>prefix</replaceable>/share/$MODULEDIR</literal>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DATA_built</varname></term>
      <listitem>
       <para>
        random files to install into
        <literal><replaceable>prefix</replaceable>/share/$MODULEDIR</literal>,
        which need to be built first
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DATA_TSEARCH</varname></term>
      <listitem>
       <para>
        random files to install under
        <literal><replaceable>prefix</replaceable>/share/tsearch_data</literal>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DOCS</varname></term>
      <listitem>
       <para>
        random files to install under
        <literal><replaceable>prefix</replaceable>/doc/$MODULEDIR</literal>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>HEADERS</varname></term>
      <term><varname>HEADERS_built</varname></term>
      <listitem>
       <para>
        Files to (optionally build and) install under
        <literal><replaceable>prefix</replaceable>/include/server/$MODULEDIR/$MODULE_big</literal>.
       </para>
       <para>
        Unlike <literal>DATA_built</literal>, files in <literal>HEADERS_built</literal>
        are not removed by the <literal>clean</literal> target; if you want them removed,
        also add them to <literal>EXTRA_CLEAN</literal> or add your own rules to do it.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>HEADERS_$MODULE</varname></term>
      <term><varname>HEADERS_built_$MODULE</varname></term>
      <listitem>
       <para>
        Files to install (after building if specified) under
        <literal><replaceable>prefix</replaceable>/include/server/$MODULEDIR/$MODULE</literal>,
        where <literal>$MODULE</literal> must be a module name used
        in <literal>MODULES</literal> or <literal>MODULE_big</literal>.
       </para>
       <para>
        Unlike <literal>DATA_built</literal>, files in <literal>HEADERS_built_$MODULE</literal>
        are not removed by the <literal>clean</literal> target; if you want them removed,
        also add them to <literal>EXTRA_CLEAN</literal> or add your own rules to do it.
       </para>
       <para>
        It is legal to use both variables for the same module, or any
        combination, unless you have two module names in the
        <literal>MODULES</literal> list that differ only by the presence of a
        prefix <literal>built_</literal>, which would cause ambiguity. In
        that (hopefully unlikely) case, you should use only the
        <literal>HEADERS_built_$MODULE</literal> variables.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SCRIPTS</varname></term>
      <listitem>
       <para>
        script files (not binaries) to install into
        <literal><replaceable>prefix</replaceable>/bin</literal>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SCRIPTS_built</varname></term>
      <listitem>
       <para>
        script files (not binaries) to install into
        <literal><replaceable>prefix</replaceable>/bin</literal>,
        which need to be built first
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>REGRESS</varname></term>
      <listitem>
       <para>
        list of regression test cases (without suffix), see below
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>REGRESS_OPTS</varname></term>
      <listitem>
       <para>
        additional switches to pass to <application>pg_regress</application>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>NO_INSTALLCHECK</varname></term>
      <listitem>
       <para>
        don't define an <literal>installcheck</literal> target, useful e.g. if tests require special configuration, or don't use <application>pg_regress</application>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>EXTRA_CLEAN</varname></term>
      <listitem>
       <para>
        extra files to remove in <literal>make clean</literal>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CPPFLAGS</varname></term>
      <listitem>
       <para>
        will be prepended to <varname>CPPFLAGS</varname>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CFLAGS</varname></term>
      <listitem>
       <para>
        will be appended to <varname>CFLAGS</varname>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CXXFLAGS</varname></term>
      <listitem>
       <para>
        will be appended to <varname>CXXFLAGS</varname>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_LDFLAGS</varname></term>
      <listitem>
       <para>
        will be prepended to <varname>LDFLAGS</varname>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_LIBS</varname></term>
      <listitem>
       <para>
        will be added to <varname>PROGRAM</varname> link line
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SHLIB_LINK</varname></term>
      <listitem>
       <para>
        will be added to <varname>MODULE_big</varname> link line
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CONFIG</varname></term>
      <listitem>
       <para>
        path to <application>pg_config</application> program for the
        <productname>PostgreSQL</productname> installation to build against
        (typically just <literal>pg_config</literal> to use the first one in your
        <varname>PATH</varname>)
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
____________________________________________________________________________-->
   <para>
    设置这三个变量之一来指定要构建什么：

    <variablelist>
     <varlistentry>
      <term><varname>MODULES</varname></term>
      <listitem>
       <para>
        要从源文件构建的具有相同词干的共享库对象的列表（不要在这个列表中包括库后缀）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>MODULE_big</varname></term>
      <listitem>
       <para>
        一个要从多个源文件中构建的共享库（在<varname>OBJS</varname>中列出对象文件）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PROGRAM</varname></term>
      <listitem>
       <para>
        一个要构建的可执行程序（在<varname>OBJS</varname>中列出对象文件）
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    还可以设置下列变量：

    <variablelist>
     <varlistentry>
      <term><varname>EXTENSION</varname></term>
      <listitem>
       <para>
        扩展名称；你必须为每一个名称提供一个<literal><replaceable>extension</replaceable>.control</literal>文件，它将被安装到<literal><replaceable>prefix</replaceable>/share/extension</literal>中
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>MODULEDIR</varname></term>
      <listitem>
       <para>
        subdirectory of <literal><replaceable>prefix</replaceable>/share</literal>的子目录，DATA 和 DOCS 文件会被安装到其中（如果没有设置，设置了<varname>EXTENSION</varname>时默认为<literal>extension</literal>，没有设置<varname>EXTENSION</varname>时默认为<literal>contrib</literal>）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DATA</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/share/$MODULEDIR</literal>中的随机文件
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DATA_built</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/share/$MODULEDIR</literal>中的随机文件，它们需要先被构建
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DATA_TSEARCH</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/share/tsearch_data</literal>中的随机文件
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DOCS</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/doc/$MODULEDIR</literal>中的随机文件
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>HEADERS</varname></term>
      <term><varname>HEADERS_built</varname></term>
      <listitem>
       <para>
        要（构建并且）安装在<literal><replaceable>prefix</replaceable>/include/server/$MODULEDIR/$MODULE_big</literal>下面的文件。
       </para>
       <para>
        和<literal>DATA_built</literal>不同，<literal>HEADERS_built</literal>中的文件不会被<literal>clean</literal>目标移除，如果想要移除它们，把它们也加入到<literal>EXTRA_CLEAN</literal>或者增加自己的规则来做这件事。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>HEADERS_$MODULE</varname></term>
      <term><varname>HEADERS_built_$MODULE</varname></term>
      <listitem>
       <para>
        要安装（如果指定了构建则在构建之后安装）在<literal><replaceable>prefix</replaceable>/include/server/$MODULEDIR/$MODULE</literal>之下的文件，这里<literal>$MODULE</literal>必须是一个在<literal>MODULES</literal> or <literal>MODULE_big</literal>中用到的模块名。
       </para>
       <para>
        和<literal>DATA_built</literal>不同，<literal>HEADERS_built_$MODULE</literal>中的文件不会被<literal>clean</literal>目标移除，如果想要移除它们，把它们也加入到<literal>EXTRA_CLEAN</literal>或者增加自己的规则来做这件事。
       </para>
       <para>
        可以为同一个模块同时使用这两个变量或者两者的任意组合，除非你在<literal>MODULES</literal>列表中有两个模块名称仅有前缀<literal>built_</literal>上的区别，因为那样会导致歧义。在那种情况下（还好不太可能），应该仅使用<literal>HEADERS_built_$MODULE</literal>变量。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SCRIPTS</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/bin</literal>中的脚本文件（非二进制）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SCRIPTS_built</varname></term>
      <listitem>
       <para>
        要安装到<literal><replaceable>prefix</replaceable>/bin</literal>中的脚本文件（非二进制），它们需要先被构建
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>REGRESS</varname></term>
      <listitem>
       <para>
        回归测试案例（不带后缀）的列表，见下文
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>REGRESS_OPTS</varname></term>
      <listitem>
       <para>
        要传递给<application>pg_regress</application>的附加开关
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>NO_INSTALLCHECK</varname></term>
      <listitem>
       <para>
        不定义<literal>installcheck</literal>目标，如果测试要求特殊的配置就会很有用，或者不使用<application>pg_regress</application>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>EXTRA_CLEAN</varname></term>
      <listitem>
       <para>
        要在<literal>make clean</literal>中移除的额外文件
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CPPFLAGS</varname></term>
      <listitem>
       <para>
        将被加到<varname>CPPFLAGS</varname>前面
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CFLAGS</varname></term>
      <listitem>
       <para>
        将被加到<varname>CFLAGS</varname>后面
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CXXFLAGS</varname></term>
      <listitem>
       <para>
        将被加到<varname>CXXFLAGS</varname>后面
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_LDFLAGS</varname></term>
      <listitem>
       <para>
        将被加到<varname>LDFLAGS</varname>前面
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_LIBS</varname></term>
      <listitem>
       <para>
        将被加到<varname>PROGRAM</varname>链接行
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SHLIB_LINK</varname></term>
      <listitem>
       <para>
        将被加到<varname>MODULE_big</varname>链接行
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PG_CONFIG</varname></term>
      <listitem>
       <para>
        要在其中构建的<productname>PostgreSQL</productname>安装的<application>pg_config</application>程序的路径（通常只用在你的<varname>PATH</varname>中的第一个<literal>pg_config</literal>）
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

<!--==========================orignal english content==========================
   <para>
    Put this makefile as <literal>Makefile</literal> in the directory
    which holds your extension. Then you can do
    <literal>make</literal> to compile, and then <literal>make
    install</literal> to install your module.  By default, the extension is
    compiled and installed for the
    <productname>PostgreSQL</productname> installation that
    corresponds to the first <command>pg_config</command> program
    found in your <varname>PATH</varname>.  You can use a different installation by
    setting <varname>PG_CONFIG</varname> to point to its
    <command>pg_config</command> program, either within the makefile
    or on the <literal>make</literal> command line.
   </para>
____________________________________________________________________________-->
   <para>
    把这个 makefile 作为<literal>Makefile</literal>放在保存你扩展的目录中。然后你可以执行<literal>make</literal>进行编译，并且接着<literal>make install</literal>来安装你的模块。默认情况下，该模块会为在你的<varname>PATH</varname>中找到的第一个<command>pg_config</command>程序所对应的<productname>PostgreSQL</productname>安装编译和安装。你可以通过在 makefile 中或者<literal>make</literal>命令行中设置<varname>PG_CONFIG</varname>指向另一个<command>pg_config</command>程序来使用一个不同的安装。
   </para>

<!--==========================orignal english content==========================
   <para>
    You can also run <literal>make</literal> in a directory outside the source
    tree of your extension, if you want to keep the build directory separate.
    This procedure is also called a
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>
    build.  Here's how:
<programlisting>
mkdir build_dir
cd build_dir
make -f /path/to/extension/source/tree/Makefile
make -f /path/to/extension/source/tree/Makefile install
</programlisting>
   </para>
____________________________________________________________________________-->
   <para>
    如果你想保持编译目录独立，你也可以在你的扩展所属的源代码树之外的目录中运行
    <literal>make</literal>。 这个过程也被称为一个
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>
    编译。下面是做法：
<programlisting>
mkdir build_dir
cd build_dir
make -f /path/to/extension/source/tree/Makefile
make -f /path/to/extension/source/tree/Makefile install
</programlisting>
   </para>

<!--==========================orignal english content==========================
   <para>
    Alternatively, you can set up a directory for a VPATH build in a similar
    way to how it is done for the core code. One way to do this is using the
    core script <filename>config/prep_buildtree</filename>. Once this has been done
    you can build by setting the <literal>make</literal> variable
    <varname>VPATH</varname> like this:
<programlisting>
make VPATH=/path/to/extension/source/tree
make VPATH=/path/to/extension/source/tree install
</programlisting>
    This procedure can work with a greater variety of directory layouts.
   </para>
____________________________________________________________________________-->
   <para>
    此外，你可以以对核心代码所作的方式一样为 VPATH 设置一个目录。一种方式是使用核心脚本
    <filename>config/prep_buildtree</filename>。一旦这样做，你可以这样设置
    <literal>make</literal>变量<varname>VPATH</varname>：
<programlisting>
make VPATH=/path/to/extension/source/tree
make VPATH=/path/to/extension/source/tree install
</programlisting>
    这个过程可以在很多种目录布局下工作。
   </para>

<!--==========================orignal english content==========================
   <para>
    The scripts listed in the <varname>REGRESS</varname> variable are used for
    regression testing of your module, which can be invoked by <literal>make
    installcheck</literal> after doing <literal>make install</literal>.  For this to
    work you must have a running <productname>PostgreSQL</productname> server.
    The script files listed in <varname>REGRESS</varname> must appear in a
    subdirectory named <literal>sql/</literal> in your extension's directory.
    These files must have extension <literal>.sql</literal>, which must not be
    included in the <varname>REGRESS</varname> list in the makefile.  For each
    test there should also be a file containing the expected output in a
    subdirectory named <literal>expected/</literal>, with the same stem and
    extension <literal>.out</literal>.  <literal>make installcheck</literal>
    executes each test script with <application>psql</application>, and compares the
    resulting output to the matching expected file.  Any differences will be
    written to the file <literal>regression.diffs</literal> in <command>diff
    -c</command> format.  Note that trying to run a test that is missing its
    expected file will be reported as <quote>trouble</quote>, so make sure you
    have all expected files.
   </para>
____________________________________________________________________________-->
   <para>
    列举在<varname>REGRESS</varname>变量中的脚本会被用来对你的扩展进行回归测试，回归测试可以在做完<literal>make install</literal>之后用<literal>make installcheck</literal>调用。要让这能够工作，你必须已经有一个运行着的<productname>PostgreSQL</productname>服务器。列举在<varname>REGRESS</varname>中的脚本文件必须在你扩展目录的名为<literal>sql/</literal>的子目录中出现。这些文件必须带有扩展<literal>.sql</literal>，但扩展不能被包括在 makefile 的<varname>REGRESS</varname>列表中。对每一个测试还应该在名为<literal>expected/</literal>的子目录中有一个包含预期输出的文件，它具有和脚本文件相同的词干并带有扩展<literal>.out</literal>。<literal>make installcheck</literal>会用<application>psql</application>执行每一个测试脚本，并且将得到结果输出与相应的预期输出比较。任何区别都将以<command>diff -c</command>格式写入到文件<literal>regression.diffs</literal>中。注意尝试运行一个不带预期文件的测试将被报告为<quote>故障</quote>，因此确保你拥有所有的预期文件。
   </para>

   <tip>
<!--==========================orignal english content==========================
    <para>
     The easiest way to create the expected files is to create empty files,
     then do a test run (which will of course report differences).  Inspect
     the actual result files found in the <literal>results/</literal>
     directory, then copy them to <literal>expected/</literal> if they match
     what you expect from the test.
    </para>
____________________________________________________________________________-->
    <para>
     创建预期文件最简单的方法是创建空文件，然后做一次测试运行（这当然将报告区别）。检查在<literal>results/</literal>目录中找到的实际结果文件，如果它们符合你的预期则把它们复制到<literal>expected/</literal>中。
    </para>

   </tip>
  </sect1>

 </chapter>

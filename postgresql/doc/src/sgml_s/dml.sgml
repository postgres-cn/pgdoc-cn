<!-- doc/src/sgml/dml.sgml -->

<chapter id="dml">
<!--==========================orignal english content==========================
 <title>Data Manipulation</title>
____________________________________________________________________________-->
 <title>数据操纵</title>

<!--==========================orignal english content==========================
 <para>
  The previous chapter discussed how to create tables and other
  structures to hold your data.  Now it is time to fill the tables
  with data.  This chapter covers how to insert, update, and delete
  table data.  The chapter
  after this will finally explain how to extract your long-lost data
  from the database.
 </para>
____________________________________________________________________________-->
 <para>
  前面的章节讨论了如何创建表和其他结构来保存你的数据。现在是时候给表填充数据了。本章涉及如何插入、更新和删除表数据。在接下来的一章将最终解释如何把你丢失已久的数据从数据库中抽取出来。
 </para>

 <sect1 id="dml-insert">
<!--==========================orignal english content==========================
  <title>Inserting Data</title>
____________________________________________________________________________-->
  <title>插入数据</title>

<!--==========================orignal english content==========================
  <indexterm zone="dml-insert">
   <primary>inserting</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-insert">
   <primary>插入</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm zone="dml-insert">
   <primary>INSERT</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-insert">
   <primary>INSERT</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   When a table is created, it contains no data.  The first thing to
   do before a database can be of much use is to insert data.  Data is
   conceptually inserted one row at a time.  Of course you can also
   insert more than one row, but there is no way to insert less than
   one row.  Even if you know only some column values, a
   complete row must be created.
  </para>
____________________________________________________________________________-->
  <para>
   当一个表被创建后，它不包含数据。在数据库可以有点用之前要做的第一件事就是向里面插入数据。数据在概念上是以每次一行地方式被插入的。你当然可以每次插入多行，但是却没有办法一次插入少于一行的数据。即使你只知道几个列的值，那么你也必须创建一个完整的行。
  </para>

<!--==========================orignal english content==========================
  <para>
   To create a new row, use the <xref linkend="sql-insert">
   command.  The command requires the
   table name and column values.  For
   example, consider the products table from <xref linkend="ddl">:
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric
);
</programlisting>
   An example command to insert a row would be:
<programlisting>
INSERT INTO products VALUES (1, 'Cheese', 9.99);
</programlisting>
   The data values are listed in the order in which the columns appear
   in the table, separated by commas.  Usually, the data values will
   be literals (constants), but scalar expressions are also allowed.
  </para>
____________________________________________________________________________-->
  <para>
   要创建一个新行，使用<xref linkend="sql-insert"/>命令。这条命令要求提供表的名字和其中列的值。例如，考虑<xref linkend="ddl"/>中的产品表：
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric
);
</programlisting>
   一个插入一行的命令将是：
<programlisting>
INSERT INTO products VALUES (1, 'Cheese', 9.99);
</programlisting>
   数据的值是按照这些列在表中出现的顺序列出的，并且用逗号分隔。通常，数据的值是文字（常量），但也允许使用标量表达式。
  </para>

<!--==========================orignal english content==========================
  <para>
   The above syntax has the drawback that you need to know the order
   of the columns in the table.  To avoid this you can also list the
   columns explicitly.  For example, both of the following commands
   have the same effect as the one above:
<programlisting>
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', 9.99);
INSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);
</programlisting>
   Many users consider it good practice to always list the column
   names.
  </para>
____________________________________________________________________________-->
  <para>
   上面的语法的缺点是你必须知道表中列的顺序。要避免这个问题，你也可以显式地列出列。例如，下面的两条命令都有和上文那条 命令一样的效果：
<programlisting>
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', 9.99);
INSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);
</programlisting>
   许多用户认为明确列出列的名字是个好习惯。
  </para>

<!--==========================orignal english content==========================
  <para>
   If you don't have values for all the columns, you can omit some of
   them.  In that case, the columns will be filled with their default
   values.  For example:
<programlisting>
INSERT INTO products (product_no, name) VALUES (1, 'Cheese');
INSERT INTO products VALUES (1, 'Cheese');
</programlisting>
   The second form is a <productname>PostgreSQL</productname>
   extension.  It fills the columns from the left with as many values
   as are given, and the rest will be defaulted.
  </para>
____________________________________________________________________________-->
  <para>
   如果你没有获得所有列的值，那么你可以省略其中的一些。在这种情况下，这些列将被填充为它们的缺省值。例如：
<programlisting>
INSERT INTO products (product_no, name) VALUES (1, 'Cheese');
INSERT INTO products VALUES (1, 'Cheese');
</programlisting>
   第二种形式是<productname>PostgreSQL</productname>的一个扩展。它从使用给出的值从左开始填充列，有多少个给出的列值就填充多少个列，其他列的将使用缺省值。
  </para>

<!--==========================orignal english content==========================
  <para>
   For clarity, you can also request default values explicitly, for
   individual columns or for the entire row:
<programlisting>
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', DEFAULT);
INSERT INTO products DEFAULT VALUES;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   为了保持清晰，你也可以显式地要求缺省值，用于单个的列或者用于整个行：
<programlisting>
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', DEFAULT);
INSERT INTO products DEFAULT VALUES;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   You can insert multiple rows in a single command:
<programlisting>
INSERT INTO products (product_no, name, price) VALUES
    (1, 'Cheese', 9.99),
    (2, 'Bread', 1.99),
    (3, 'Milk', 2.99);
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   你可以在一个命令中插入多行：
<programlisting>
INSERT INTO products (product_no, name, price) VALUES
    (1, 'Cheese', 9.99),
    (2, 'Bread', 1.99),
    (3, 'Milk', 2.99);
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   It is also possible to insert the result of a query (which might be no
   rows, one row, or many rows):
<programlisting>
INSERT INTO products (product_no, name, price)
  SELECT product_no, name, price FROM new_products
    WHERE release_date = 'today';
</programlisting>
   This provides the full power of the SQL query mechanism (<xref
   linkend="queries">) for computing the rows to be inserted.
  </para>
____________________________________________________________________________-->
  <para>
   也可以插入查询的结果（可能没有行、一行或多行）：
<programlisting>
INSERT INTO products (product_no, name, price)
  SELECT product_no, name, price FROM new_products
    WHERE release_date = 'today';
</programlisting>
   这提供了用于计算要插入的行的SQL查询机制（<xref linkend="queries"/>）的全部功能。
  </para>
  <tip>
<!--==========================orignal english content==========================
   <para>
    When inserting a lot of data at the same time, considering using
    the <xref linkend="sql-copy"> command.
    It is not as flexible as the <xref linkend="sql-insert">
    command, but is more efficient. Refer
    to <xref linkend="populate"> for more information on improving
    bulk loading performance.
   </para>
____________________________________________________________________________-->
   <para>
    在一次性插入大量数据时，考虑使用<xref linkend="sql-copy"/>命令。它不如<xref linkend="sql-insert"/>命令那么灵活，但是更高效。 参考<xref linkend="populate"/>获取更多有关批量装载性能的信息。
   </para>
  </tip>
 </sect1>

 <sect1 id="dml-update">
<!--==========================orignal english content==========================
  <title>Updating Data</title>
____________________________________________________________________________-->
  <title>更新数据</title>

<!--==========================orignal english content==========================
  <indexterm zone="dml-update">
   <primary>updating</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-update">
   <primary>更新</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm zone="dml-update">
   <primary>UPDATE</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-update">
   <primary>UPDATE</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   The modification of data that is already in the database is
   referred to as updating.  You can update individual rows, all the
   rows in a table, or a subset of all rows.  Each column can be
   updated separately; the other columns are not affected.
  </para>
____________________________________________________________________________-->
  <para>
   修改已经存储在数据库中的数据的行为叫做更新。你可以更新单个行，也可以更新表中所有的行，还可以更新其中的一部分行。 我们可以独立地更新每个列，而其他的列则不受影响。
  </para>

<!--==========================orignal english content==========================
  <para>
   To update existing rows, use the <xref linkend="sql-update">
   command.  This requires
   three pieces of information:
   <orderedlist spacing="compact">
    <listitem>
     <para>The name of the table and column to update</para>
    </listitem>

    <listitem>
     <para>The new value of the column</para>
    </listitem>

    <listitem>
     <para>Which row(s) to update</para>
    </listitem>
   </orderedlist>
  </para>
____________________________________________________________________________-->
  <para>
   要更新现有的行，使用<xref linkend="sql-update"/>命令。这需要提供三部分信息：
   <orderedlist spacing="compact">
    <listitem>
     <para>表的名字和要更新的列名</para>
    </listitem>

    <listitem>
     <para>列的新值</para>
    </listitem>

    <listitem>
     <para>要更新的是哪（些）行</para>
    </listitem>
   </orderedlist>
  </para>

<!--==========================orignal english content==========================
  <para>
   Recall from <xref linkend="ddl"> that SQL does not, in general,
   provide a unique identifier for rows.  Therefore it is not
   always possible to directly specify which row to update.
   Instead, you specify which conditions a row must meet in order to
   be updated.  Only if you have a primary key in the table (independent of
   whether you declared it or not) can you reliably address individual rows
   by choosing a condition that matches the primary key.
   Graphical database access tools rely on this fact to allow you to
   update rows individually.
  </para>
____________________________________________________________________________-->
  <para>
   我们在<xref linkend="ddl"/>里说过，SQL 通常并不为行提供唯一标识符。因此我们无法总是直接指定需要更新哪一行。但是，我们可以通过指定一个被更新的行必须满足的条件。只有在表里面存在主键的时候（不管你声明它还是不声明它），我们才能可靠地通过选择一个匹配主键的条件来指定一个独立的行。图形化的数据库访问工具就靠这允许我们独立地更新某些行。
  </para>

<!--==========================orignal english content==========================
  <para>
   For example, this command updates all products that have a price of
   5 to have a price of 10:
<programlisting>
UPDATE products SET price = 10 WHERE price = 5;
</programlisting>
    This might cause zero, one, or many rows to be updated.  It is not
    an error to attempt an update that does not match any rows.
  </para>
____________________________________________________________________________-->
  <para>
   例如，这条命令把所有价格为5的产品的价格更新为10：
<programlisting>
UPDATE products SET price = 10 WHERE price = 5;
</programlisting>
    这样做可能导致零行、一行或者更多行被更新。如果我们试图做一个不匹配任何行的更新，那也不算错误。
  </para>

<!--==========================orignal english content==========================
  <para>
   Let's look at that command in detail. First is the key word
   <literal>UPDATE</literal> followed by the table name.  As usual,
   the table name can be schema-qualified, otherwise it is looked up
   in the path.  Next is the key word <literal>SET</literal> followed
   by the column name, an equal sign, and the new column value.  The
   new column value can be any scalar expression, not just a constant.
   For example, if you want to raise the price of all products by 10%
   you could use:
<programlisting>
UPDATE products SET price = price * 1.10;
</programlisting>
   As you see, the expression for the new value can refer to the existing
   value(s) in the row.  We also left out the <literal>WHERE</literal> clause.
   If it is omitted, it means that all rows in the table are updated.
   If it is present, only those rows that match the
   <literal>WHERE</literal> condition are updated.  Note that the equals
   sign in the <literal>SET</literal> clause is an assignment while
   the one in the <literal>WHERE</literal> clause is a comparison, but
   this does not create any ambiguity.  Of course, the
   <literal>WHERE</literal> condition does
   not have to be an equality test.  Many other operators are
   available (see <xref linkend="functions">).  But the expression
   needs to evaluate to a Boolean result.
  </para>
____________________________________________________________________________-->
  <para>
   让我们仔细看看这个命令。首先是关键字<literal>UPDATE</literal>， 然后跟着表名字。和平常一样，表名字也可以是用模式限定的， 否则会从路径中查找它。然后是关键字<literal>SET</literal>， 后面跟着列名、一个等号以及新的列值。新的列值可以是任意标量表达式， 而不仅仅是常量。例如，如果你想把所有产品的价格提高 10%，你可以用：
<programlisting>
UPDATE products SET price = price * 1.10;
</programlisting>
   如你所见，用于新值的表达式也可以引用行中现有的值。我们还忽略了<literal>WHERE</literal>子句。如果我们忽略了这个子句， 那么就意味着表中的所有行都要被更新。如果出现了<literal>WHERE</literal>子句， 那么只有匹配它后面的条件的行被更新。请注意在<literal>SET</literal>子句中的等号是一个赋值， 而在<literal>WHERE</literal>子句中的等号是比较，不过这样并不会导致任何歧义。当然<literal>WHERE</literal>条件不一定非得是等值测试。许多其他操作符也都可以使用（参阅<xref linkend="functions"/>）。但是表达式必须得出一个布尔结果。
  </para>

<!--==========================orignal english content==========================
  <para>
   You can update more than one column in an
   <command>UPDATE</command> command by listing more than one
   assignment in the <literal>SET</literal> clause.  For example:
<programlisting>
UPDATE mytable SET a = 5, b = 3, c = 1 WHERE a &gt; 0;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   你还可以在一个<command>UPDATE</command>命令中更新更多的列， 方法是在<literal>SET</literal>子句中列出更多赋值。例如：
<programlisting>
UPDATE mytable SET a = 5, b = 3, c = 1 WHERE a &gt; 0;
</programlisting>
  </para>
 </sect1>

 <sect1 id="dml-delete">
<!--==========================orignal english content==========================
  <title>Deleting Data</title>
____________________________________________________________________________-->
  <title>删除数据</title>

<!--==========================orignal english content==========================
  <indexterm zone="dml-delete">
   <primary>deleting</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-delete">
   <primary>删除</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm zone="dml-delete">
   <primary>DELETE</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-delete">
   <primary>DELETE</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   So far we have explained how to add data to tables and how to
   change data.  What remains is to discuss how to remove data that is
   no longer needed.  Just as adding data is only possible in whole
   rows, you can only remove entire rows from a table.  In the
   previous section we explained that SQL does not provide a way to
   directly address individual rows.  Therefore, removing rows can
   only be done by specifying conditions that the rows to be removed
   have to match.  If you have a primary key in the table then you can
   specify the exact row.  But you can also remove groups of rows
   matching a condition, or you can remove all rows in the table at
   once.
  </para>
____________________________________________________________________________-->
  <para>
   到目前为止我们已经解释了如何向表中增加数据以及如何改变数据。剩下的是讨论如何删除不再需要的数据。和前面增加数据一样，你也只能从表中整行整行地删除数据。在前面的一节里我们解释了 SQL 不提供直接访问单个行的方法。因此，删除行只能是通过指定被删除行必须匹配的条件进行。如果你在表上有一个主键，那么你可以指定准确的行。但是你也可以删除匹配条件的一组行，或者你可以一次从表中删除所有的行。
  </para>

<!--==========================orignal english content==========================
  <para>
   You use the <xref linkend="sql-delete">
   command to remove rows; the syntax is very similar to the
   <command>UPDATE</command> command.  For instance, to remove all
   rows from the products table that have a price of 10, use:
<programlisting>
DELETE FROM products WHERE price = 10;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   可以使用<xref linkend="sql-delete"/>命令删除行，它的语法和<command>UPDATE</command>命令非常类似。例如，要从产品表中删除所有价格为 10 的产品，使用：
<programlisting>
DELETE FROM products WHERE price = 10;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   If you simply write:
<programlisting>
DELETE FROM products;
</programlisting>
   then all rows in the table will be deleted!  Caveat programmer.
  </para>
____________________________________________________________________________-->
  <para>
   如果你只是写：
<programlisting>
DELETE FROM products;
</programlisting>
   那么表中所有行都会被删除！程序员一定要注意。
  </para>
 </sect1>

 <sect1 id="dml-returning">
<!--==========================orignal english content==========================
  <title>Returning Data From Modified Rows</title>
____________________________________________________________________________-->
  <title>从修改的行中返回数据</title>

<!--==========================orignal english content==========================
  <indexterm zone="dml-returning">
   <primary>RETURNING</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-returning">
   <primary>RETURNING</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm zone="dml-returning">
   <primary>INSERT</primary>
   <secondary>RETURNING</secondary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-returning">
   <primary>INSERT</primary>
   <secondary>RETURNING</secondary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm zone="dml-returning">
   <primary>UPDATE</primary>
   <secondary>RETURNING</secondary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-returning">
   <primary>UPDATE</primary>
   <secondary>RETURNING</secondary>
  </indexterm>

<!--==========================orignal english content==========================
  <indexterm zone="dml-returning">
   <primary>DELETE</primary>
   <secondary>RETURNING</secondary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="dml-returning">
   <primary>DELETE</primary>
   <secondary>RETURNING</secondary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   Sometimes it is useful to obtain data from modified rows while they are
   being manipulated.  The <command>INSERT</>, <command>UPDATE</>,
   and <command>DELETE</> commands all have an
   optional <literal>RETURNING</> clause that supports this.  Use
   of <literal>RETURNING</> avoids performing an extra database query to
   collect the data, and is especially valuable when it would otherwise be
   difficult to identify the modified rows reliably.
  </para>
____________________________________________________________________________-->
  <para>
   有时在修改行的操作过程中获取数据很有用。<command>INSERT</command>、
   <command>UPDATE</command>和<command>DELETE</command>命令都有一个支持这个的可选的
   <literal>RETURNING</literal>子句。使用<literal>RETURNING</literal>
   可以避免执行额外的数据库查询来收集数据，并且在否则难以可靠地识别修改的行时尤其有用。
  </para>

<!--==========================orignal english content==========================
  <para>
   The allowed contents of a <literal>RETURNING</> clause are the same as
   a <command>SELECT</> command's output list
   (see <xref linkend="queries-select-lists">).  It can contain column
   names of the command's target table, or value expressions using those
   columns.  A common shorthand is <literal>RETURNING *</>, which selects
   all columns of the target table in order.
  </para>
____________________________________________________________________________-->
  <para>
   所允许的<literal>RETURNING</literal>子句的内容与<command>SELECT</command>命令的输出列表相同
   （请参阅<xref linkend="queries-select-lists"/>）。它可以包含命令的目标表的列名，
   或者包含使用这些列的值表达式。一个常见的简写是<literal>RETURNING *</literal>，
   它按顺序选择目标表的所有列。
  </para>

<!--==========================orignal english content==========================
  <para>
   In an <command>INSERT</>, the data available to <literal>RETURNING</> is
   the row as it was inserted.  This is not so useful in trivial inserts,
   since it would just repeat the data provided by the client.  But it can
   be very handy when relying on computed default values.  For example,
   when using a <link linkend="datatype-serial"><type>serial</></link>
   column to provide unique identifiers, <literal>RETURNING</> can return
   the ID assigned to a new row:
<programlisting>
CREATE TABLE users (firstname text, lastname text, id serial primary key);

INSERT INTO users (firstname, lastname) VALUES ('Joe', 'Cool') RETURNING id;
</programlisting>
   The <literal>RETURNING</> clause is also very useful
   with <literal>INSERT ... SELECT</>.
  </para>
____________________________________________________________________________-->
  <para>
   在<command>INSERT</command>中，可用于<literal>RETURNING</literal>的数据是插入的行。
   这在琐碎的插入中并不是很有用，因为它只会重复客户端提供的数据。
   但依赖于计算出的默认值时可以非常方便。例如，当使用
   <link linkend="datatype-serial"><type>serial</type></link>列来提供唯一标识符时，
   <literal>RETURNING</literal>可以返回分配给新行的ID：
<programlisting>
CREATE TABLE users (firstname text, lastname text, id serial primary key);

INSERT INTO users (firstname, lastname) VALUES ('Joe', 'Cool') RETURNING id;
</programlisting>
   <literal>RETURNING</literal>子句对于<literal>INSERT ... SELECT</literal>也非常有用。
  </para>

<!--==========================orignal english content==========================
  <para>
   In an <command>UPDATE</>, the data available to <literal>RETURNING</> is
   the new content of the modified row.  For example:
<programlisting>
UPDATE products SET price = price * 1.10
  WHERE price &lt;= 99.99
  RETURNING name, price AS new_price;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   在<command>UPDATE</command>中，可用于<literal>RETURNING</literal>的数据是被修改行的新内容。
   例如：
<programlisting>
UPDATE products SET price = price * 1.10
  WHERE price &lt;= 99.99
  RETURNING name, price AS new_price;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   In a <command>DELETE</>, the data available to <literal>RETURNING</> is
   the content of the deleted row.  For example:
<programlisting>
DELETE FROM products
  WHERE obsoletion_date = 'today'
  RETURNING *;
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   在<command>DELETE</command>中，可用于<literal>RETURNING</literal>的数据是删除行的内容。例如：
<programlisting>
DELETE FROM products
  WHERE obsoletion_date = 'today'
  RETURNING *;
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   If there are triggers (<xref linkend="triggers">) on the target table,
   the data available to <literal>RETURNING</> is the row as modified by
   the triggers.  Thus, inspecting columns computed by triggers is another
   common use-case for <literal>RETURNING</>.
  </para>
____________________________________________________________________________-->
  <para>
   如果目标表上有触发器(<xref linkend="triggers"/>)，可用于<literal>RETURNING</literal>
   的数据是被触发器修改的行。因此，检查由触发器计算的列是
   <literal>RETURNING</literal>的另一个常见用例。
  </para>

 </sect1>
 </chapter>

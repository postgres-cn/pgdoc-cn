<!-- doc/src/sgml/pgstandby.sgml -->

<refentry id="pgstandby">
<!--==========================orignal english content==========================
 <indexterm zone="pgstandby">
  <primary>pg_standby</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="pgstandby">
  <primary>pg_standby</primary>
 </indexterm>
 
<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle><application>pg_standby</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle><application>pg_standby</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>pg_standby</refname>
  <refpurpose>supports the creation of a <productname>PostgreSQL</productname> warm standby server</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>pg_standby</refname>
  <refpurpose>对创建一个<productname>PostgreSQL</productname>温备服务器提供支持</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
  <cmdsynopsis>
   <command>pg_standby</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="plain"><replaceable>archivelocation</replaceable></arg>
   <arg choice="plain"><replaceable>nextwalfile</replaceable></arg>
   <arg choice="plain"><replaceable>walfilepath</replaceable></arg>
   <arg choice="opt"><replaceable>restartwalfile</replaceable></arg>
  </cmdsynopsis>
____________________________________________________________________________-->
  <cmdsynopsis>
   <command>pg_standby</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="plain"><replaceable>archivelocation</replaceable></arg>
   <arg choice="plain"><replaceable>nextwalfile</replaceable></arg>
   <arg choice="plain"><replaceable>walfilepath</replaceable></arg>
   <arg choice="opt"><replaceable>restartwalfile</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
 <para>
  <application>pg_standby</> supports creation of a <quote>warm standby</>
  database server.  It is designed to be a production-ready program, as well
  as a customizable template should you require specific modifications.
 </para>
____________________________________________________________________________-->
 <para>
  <application>pg_standby</application>用于支持创建一个<quote>温备</quote>数据库服务器。它被设计为一个可以随时投入生产的程序，以及一个可定制的模板供你进行特定的修改。
 </para>

<!--==========================orignal english content==========================
 <para>
  <application>pg_standby</> is designed to be a waiting
  <varname>restore_command</>, which is needed to turn a standard
  archive recovery into a warm standby operation.  Other
  configuration is required as well, all of which is described in the main
  server manual (see <xref linkend="warm-standby">).
 </para>
____________________________________________________________________________-->
 <para>
  <application>pg_standby</application>被设计成一个等待着的<varname>restore_command</varname>，它被用来把一次标准的归档恢复变成一次温备操作。还需要一些其他的配置，所有这些配置都在主服务器手册中有相应的描述（见<xref linkend="warm-standby"/>）。
 </para>

<!--==========================orignal english content==========================
  <para>
   To configure a standby
   server to use <application>pg_standby</>, put this into its
   <filename>recovery.conf</filename> configuration file:
<programlisting>
restore_command = 'pg_standby <replaceable>archiveDir</> %f %p %r'
</programlisting>
   where <replaceable>archiveDir</> is the directory from which WAL segment
   files should be restored.
  </para>
____________________________________________________________________________-->
  <para>
   要配置一台后备服务器去使用<application>pg_standby</application>，可以把下面的内容放在<filename>recovery.conf</filename>配置文件中：
<programlisting>
restore_command = 'pg_standby <replaceable>archiveDir</replaceable> %f %p %r'
</programlisting>
   其中<replaceable>archiveDir</replaceable>是 WAL 段文件应该被存储的目录。
  </para>
<!--==========================orignal english content==========================
  <para>
   If <replaceable>restartwalfile</> is specified, normally by using the
   <literal>%r</literal> macro, then all WAL files logically preceding this
   file will be removed from <replaceable>archivelocation</>. This minimizes
   the number of files that need to be retained, while preserving
   crash-restart capability.  Use of this parameter is appropriate if the
   <replaceable>archivelocation</> is a transient staging area for this
   particular standby server, but <emphasis>not</> when the
   <replaceable>archivelocation</> is intended as a long-term WAL archive area.
  </para>
____________________________________________________________________________-->
  <para>
   如果指定了<replaceable>restartwalfile</replaceable>（通常用<literal>%r</literal>宏指定），那么所有在逻辑上位于这个文件之前的 WAL 文件都将被从<replaceable>archivelocation</replaceable>中移除。这使需要被保留的文件数最小化，与此同时能够保持崩溃重启的能力。如果<replaceable>archivelocation</replaceable>对于这个特定后备服务器是一个瞬态区域，使用这个参数是合适的，但当<replaceable>archivelocation</replaceable>是一个长期 WAL 归档区域时则<emphasis>不是</emphasis>合适的。
  </para>
<!--==========================orignal english content==========================
  <para>
   <application>pg_standby</application> assumes that
   <replaceable>archivelocation</> is a directory readable by the
   server-owning user.  If <replaceable>restartwalfile</> (or <literal>-k</>)
   is specified,
   the <replaceable>archivelocation</> directory must be writable too.
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_standby</application>假定<replaceable>archivelocation</replaceable>是一个拥有服务器的用户可读的目录。如果指定了<replaceable>restartwalfile</replaceable>（或者<literal>-k</literal>），<replaceable>archivelocation</replaceable>目录必须也是可写的。
  </para>
<!--==========================orignal english content==========================
  <para>
   There are two ways to fail over to a <quote>warm standby</> database server
   when the master server fails:

   <variablelist>
    <varlistentry>
     <term>Smart Failover</term>
     <listitem>
      <para>
       In smart failover, the server is brought up after applying all WAL
       files available in the archive. This results in zero data loss, even if
       the standby server has fallen behind, but if there is a lot of
       unapplied WAL it can be a long time before the standby server becomes
       ready. To trigger a smart failover, create a trigger file containing
       the word <literal>smart</>, or just create it and leave it empty.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Fast Failover</term>
     <listitem>
      <para>
       In fast failover, the server is brought up immediately. Any WAL files
       in the archive that have not yet been applied will be ignored, and
       all transactions in those files are lost. To trigger a fast failover,
       create a trigger file and write the word <literal>fast</> into it.
       <application>pg_standby</> can also be configured to execute a fast
       failover automatically if no new WAL file appears within a defined
       interval.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
____________________________________________________________________________-->
  <para>
   当主服务器失效时，有两种方式转移到一个<quote>温备</quote>数据库服务器：

   <variablelist>
    <varlistentry>
     <term>智能失效备援</term>
     <listitem>
      <para>
       在智能失效备援中，服务器在应用归档中可用的所有 WAL 文件之后被提升。即便后备服务器落后于主服务器，这也会导致零数据丢失，但是如果有很多未应用的 WAL，在后备服务器准备好之前就需要比较长的时间。要触发一次智能失效备援，创建一个包含单词<literal>smart</literal>的触发文件，或者只创建一个空文件。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>快速失效备援</term>
     <listitem>
      <para>
       在快速失效备援中，服务器被立即提升。归档中任何还未被应用的 WAL 文件将被忽略，并且这些文件中的所有事务都会丢失。要触发一次快速失效备援，创建一个触发文件并且把单词<literal>fast</literal>写在其中。<application>pg_standby</application>也能被配置为在一段定义好的区间内没有新 WAL 文件出现时自动执行一次快速失效备援。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Options</title>
____________________________________________________________________________-->
  <title>选项</title>

<!--==========================orignal english content==========================
   <para>
    <application>pg_standby</application> accepts the following command-line arguments:

    <variablelist>

     <varlistentry>
      <term><option>-c</option></term>
      <listitem>
       <para>
        Use <literal>cp</> or <literal>copy</> command to restore WAL files
        from archive.  This is the only supported behavior so this option is useless.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option></term>
      <listitem>
       <para>
        Print lots of debug logging output on <filename>stderr</>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-k</option></term>
      <listitem>
       <para>
        Remove files from <replaceable>archivelocation</replaceable> so that
        no more than this many WAL files before the current one are kept in the
        archive.  Zero (the default) means not to remove any files from
        <replaceable>archivelocation</replaceable>.
        This parameter will be silently ignored if
        <replaceable>restartwalfile</replaceable> is specified, since that
        specification method is more accurate in determining the correct
        archive cut-off point.
        Use of this parameter is <emphasis>deprecated</> as of
        <productname>PostgreSQL</> 8.3; it is safer and more efficient to
        specify a <replaceable>restartwalfile</replaceable> parameter.  A too
        small setting could result in removal of files that are still needed
        for a restart of the standby server, while a too large setting wastes
        archive space.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option> <replaceable>maxretries</></term>
      <listitem>
       <para>
        Set the maximum number of times to retry the copy command if
        it fails (default 3). After each failure, we wait for
        <replaceable>sleeptime</> * <replaceable>num_retries</>
        so that the wait time increases progressively.  So by default,
        we will wait 5 secs, 10 secs, then 15 secs before reporting
        the failure back to the standby server. This will be
        interpreted as end of recovery and the standby will come
        up fully as a result.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>sleeptime</></term>
      <listitem>
       <para>
        Set the number of seconds (up to 60, default 5) to sleep between
        tests to see if the WAL file to be restored is available in
        the archive yet.  The default setting is not necessarily
        recommended; consult <xref linkend="warm-standby"> for discussion.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t</option> <replaceable>triggerfile</></term>
      <listitem>
       <para>
        Specify a trigger file whose presence should cause failover.
        It is recommended that you use a structured file name to
        avoid confusion as to which server is being triggered
        when multiple servers exist on the same system; for example
        <filename>/tmp/pgsql.trigger.5432</>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</></term>
      <term><option>-&minus;version</></term>
      <listitem>
       <para>
        Print the <application>pg_standby</application> version and exit.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</option> <replaceable>maxwaittime</></term>
      <listitem>
       <para>
        Set the maximum number of seconds to wait for the next WAL file,
        after which a fast failover will be performed.
        A setting of zero (the default) means wait forever.
        The default setting is not necessarily recommended;
        consult <xref linkend="warm-standby"> for discussion.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</></term>
      <term><option>-&minus;help</></term>
      <listitem>
       <para>
        Show help about <application>pg_standby</application> command line
        arguments, and exit.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
____________________________________________________________________________-->
   <para>
    <application>pg_standby</application>接受下列命令行参数：

    <variablelist>

     <varlistentry>
      <term><option>-c</option></term>
      <listitem>
       <para>
        使用<literal>cp</literal>或者<literal>copy</literal>命令来存储来自归档的 WAL 文件。这是唯一支持的行为，因此这个选项是无用的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option></term>
      <listitem>
       <para>
        在<filename>stderr</filename>上打印大量调试日志输出。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-k</option></term>
      <listitem>
       <para>
        从<replaceable>archivelocation</replaceable>移除文件，这样当前 WAL 文件之前不超过这么多个 WAL 文件会被保留在归档中。零（默认值）意味着不从<replaceable>archivelocation</replaceable>移除任何文件。如果指定了<replaceable>restartwalfile</replaceable>，这个参数将被安静地忽略，因为那种说明方法对于决定正确的归档切断点更为精确。从<productname>PostgreSQL</productname> 8.3 开始，这个参数的使用已经被<emphasis>废弃</emphasis>，指定一个<replaceable>restartwalfile</replaceable>参数更加安全和有效。一个太小的值可能导致后备服务器的重启仍需要已经被移除的文件，而一个太大的值则浪费归档空间。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option> <replaceable>maxretries</replaceable></term>
      <listitem>
       <para>
        设定拷贝命令失败时重试的最大次数（默认为 3）。在每一次失败后，我们等待<replaceable>sleeptime</replaceable> * <replaceable>num_retries</replaceable>，这样等待时间会逐步增加。因此默认情况下，我们将等待 5 秒、10 秒、15秒，然后向后备服务器报告失败。这将被解释为恢复的终点并且该后备服务器将会完全被提升。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>sleeptime</replaceable></term>
      <listitem>
       <para>
        设置在检查要被恢复的 WAL 文件在归档中是否可用的测试之间休眠的秒数（最高 60，默认为 5）。默认设置并不一定值得推荐，相关的讨论可参考<xref linkend="warm-standby"/>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t</option> <replaceable>triggerfile</replaceable></term>
      <listitem>
       <para>
        指定一个触发文件，它的出现将会导致失效备援。我们推荐使用一个有结构的文件名，这样可以避免在同一个系统上有多个服务器存在时无法确定是要触发哪个服务器。例如可以用<filename>/tmp/pgsql.trigger.5432</filename>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem>
       <para>
        打印<application>pg_standby</application>版本并退出。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</option> <replaceable>maxwaittime</replaceable></term>
      <listitem>
       <para>
        设置等待下一个 WAL 文件的最大秒数，之后将会执行一次快速失效备援。设置为 0 （默认值）表示永远等待。默认设置并不一定值得推荐，相关讨论可以参考<xref linkend="warm-standby"/>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem>
       <para>
        显示有关<application>pg_standby</application>的命令行参数，然后退出。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   <application>pg_standby</application> is designed to work with
   <productname>PostgreSQL</> 8.2 and later.
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_standby</application>被设计为配合<productname>PostgreSQL</productname> 8.2 及后续版本工作。
  </para>
<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</> 8.3 provides the <literal>%r</literal> macro,
   which is designed to let <application>pg_standby</application> know the
   last file it needs to keep.  With <productname>PostgreSQL</> 8.2, the
   <literal>-k</literal> option must be used if archive cleanup is
   required.  This option remains available in 8.3, but its use is deprecated.
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname> 8.3 提供<literal>%r</literal>宏，它被设计用来让<application>pg_standby</application>知道它需要保留的最后一个文件。在<productname>PostgreSQL</productname> 8.2 中，如果要求归档清理则必须使用<literal>-k</literal>选项。在 8.3 中该选项仍然存在，但是其使用已被废弃。
  </para>
<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</> 8.4 provides the
   <varname>recovery_end_command</> option.  Without this option
   a leftover trigger file can be hazardous.
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname> 8.4 提供<varname>recovery_end_command</varname>选项。没有这个选项一个残留的触发文件能够导致灾难。
  </para>

<!--==========================orignal english content==========================
  <para>
   <application>pg_standby</application> is written in C and has an
   easy-to-modify source code, with specifically designated sections to modify
   for your own needs
  </para>
____________________________________________________________________________-->
  <para>
   <application>pg_standby</application>由 C 写成并且其代码易于修改，其中的小节经过特别设计以便按你的需要修改。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>例子</title>

<!--==========================orignal english content==========================
  <para>On Linux or Unix systems, you might use:

<programlisting>
archive_command = 'cp %p .../archive/%f'

restore_command = 'pg_standby -d -s 2 -t /tmp/pgsql.trigger.5442 .../archive %f %p %r 2>>standby.log'

recovery_end_command = 'rm -f /tmp/pgsql.trigger.5442'
</programlisting>
   where the archive directory is physically located on the standby server,
   so that the <varname>archive_command</> is accessing it across NFS,
   but the files are local to the standby (enabling use of <literal>ln</>).
   This will:
  <itemizedlist>
   <listitem>
    <para>
     produce debugging output in <filename>standby.log</>
    </para>
   </listitem>
   <listitem>
    <para>
     sleep for 2 seconds between checks for next WAL file availability
    </para>
   </listitem>
   <listitem>
    <para>
     stop waiting only when a trigger file called
     <filename>/tmp/pgsql.trigger.5442</> appears,
     and perform failover according to its content
    </para>
   </listitem>
   <listitem>
    <para>
     remove the trigger file when recovery ends
    </para>
   </listitem>
   <listitem>
    <para>
     remove no-longer-needed files from the archive directory
    </para>
   </listitem>
  </itemizedlist>
  </para>
____________________________________________________________________________-->
  <para>在 Linux 或 Unix 系统上，你可能会使用：

<programlisting>
archive_command = 'cp %p .../archive/%f'

restore_command = 'pg_standby -d -s 2 -t /tmp/pgsql.trigger.5442 .../archive %f %p %r 2>>standby.log'

recovery_end_command = 'rm -f /tmp/pgsql.trigger.5442'
</programlisting>
   其中归档目录被物理防止在后备服务器上，因此<varname>archive_command</varname>通过 NFS 访问它，但是那些文件对于后备服务器是本地的（启用<literal>ln</literal>）。这将：
  <itemizedlist>
   <listitem>
    <para>
     在<filename>standby.log</filename>中产生调试输出
    </para>
   </listitem>
   <listitem>
    <para>
     在检查下一个 WAL 文件的可用性之间睡眠 2 秒
    </para>
   </listitem>
   <listitem>
    <para>
     只有当一个名为<filename>/tmp/pgsql.trigger.5442</filename>的触发文件出现时停止等待并且根据其内容执行失效备援
    </para>
   </listitem>
   <listitem>
    <para>
     在恢复结束时移除触发文件
    </para>
   </listitem>
   <listitem>
    <para>
     从归档目录中移除不再需要的文件
    </para>
   </listitem>
  </itemizedlist>
  </para>

<!--==========================orignal english content==========================
  <para>On Windows, you might use:

<programlisting>
archive_command = 'copy %p ...\\archive\\%f'

restore_command = 'pg_standby -d -s 5 -t C:\pgsql.trigger.5442 ...\archive %f %p %r 2>>standby.log'

recovery_end_command = 'del C:\pgsql.trigger.5442'
</programlisting>
   Note that backslashes need to be doubled in the
   <varname>archive_command</>, but <emphasis>not</emphasis> in the
   <varname>restore_command</> or <varname>recovery_end_command</>.
   This will:
  <itemizedlist>
   <listitem>
    <para>
     use the <literal>copy</> command to restore WAL files from archive
    </para>
   </listitem>
   <listitem>
    <para>
     produce debugging output in <filename>standby.log</>
    </para>
   </listitem>
   <listitem>
    <para>
     sleep for 5 seconds between checks for next WAL file availability
    </para>
   </listitem>
   <listitem>
    <para>
     stop waiting only when a trigger file called
     <filename>C:\pgsql.trigger.5442</> appears,
     and perform failover according to its content
    </para>
   </listitem>
   <listitem>
    <para>
     remove the trigger file when recovery ends
    </para>
   </listitem>
   <listitem>
    <para>
     remove no-longer-needed files from the archive directory
    </para>
   </listitem>
  </itemizedlist>
  </para>
____________________________________________________________________________-->
  <para>在 Windows 上，你可能会用：

<programlisting>
archive_command = 'copy %p ...\\archive\\%f'

restore_command = 'pg_standby -d -s 5 -t C:\pgsql.trigger.5442 ...\archive %f %p %r 2>>standby.log'

recovery_end_command = 'del C:\pgsql.trigger.5442'
</programlisting>
   注意<varname>archive_command</varname>中的反斜线需要被双写，但是在<varname>restore_command</varname>或者<varname>recovery_end_command</varname>中<emphasis>不</emphasis>需要。这将：
  <itemizedlist>
   <listitem>
    <para>
     使用<literal>copy</literal>命令恢复来自归档的 WAL 文件
    </para>
   </listitem>
   <listitem>
    <para>
     在<filename>standby.log</filename>中产生调试输出
    </para>
   </listitem>
   <listitem>
    <para>
     在检查下一个 WAL 文件的可用性之间睡眠 5 秒
    </para>
   </listitem>
   <listitem>
    <para>
     只有当一个名为<filename>C:\pgsql.trigger.5442</filename>的触发文件出现时停止等待并且根据其内容执行失效备援
    </para>
   </listitem>
   <listitem>
    <para>
     在恢复结束时移除触发文件
    </para>
   </listitem>
   <listitem>
    <para>
     从归档目录中移除不再需要的文件
    </para>
   </listitem>
  </itemizedlist>
  </para>

<!--==========================orignal english content==========================
  <para>
   The <literal>copy</> command on Windows sets the final file size
   before the file is completely copied, which would ordinarily confuse
   <application>pg_standby</application>.  Therefore
   <application>pg_standby</application> waits <replaceable>sleeptime</>
   seconds once it sees the proper file size.  GNUWin32's <literal>cp</>
   sets the file size only after the file copy is complete.
  </para>
____________________________________________________________________________-->
  <para>
   Windows 上的<literal>copy</literal>命令在文件被完全拷贝之前就会设置最终的文件尺寸，这通常会迷惑<application>pg_standby</application>。因此一旦看到正确的文件尺寸，<application>pg_standby</application>会等待<replaceable>sleeptime</replaceable>秒。GNUWin32 的<literal>cp</literal>只会在文件拷贝完成后设置文件尺寸。
  </para>

<!--==========================orignal english content==========================
  <para>
   Since the Windows example uses <literal>copy</> at both ends, either
   or both servers might be accessing the archive directory across the
   network.
  </para>
____________________________________________________________________________-->
  <para>
   由于 Windows 的例子在两端都使用<literal>copy</literal>，一个或者两个服务器可能通过网络访问归档目录。
  </para>

 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>Author</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   Simon Riggs <email>simon@2ndquadrant.com</email>
  </para>
____________________________________________________________________________-->
  <para>
   Simon Riggs <email>simon@2ndquadrant.com</email>
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="pgarchivecleanup"/></member>
  </simplelist>
 </refsect1>
</refentry>

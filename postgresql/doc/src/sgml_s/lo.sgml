<!-- doc/src/sgml/lo.sgml -->

<sect1 id="lo" xreflabel="lo">
<!--==========================orignal english content==========================
 <title>lo</title>
____________________________________________________________________________-->
 <title>lo</title>

<!--==========================orignal english content==========================
 <indexterm zone="lo">
  <primary>lo</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="lo">
  <primary>lo</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>lo</> module provides support for managing Large Objects
  (also called LOs or BLOBs).  This includes a data type <type>lo</>
  and a trigger <function>lo_manage</>.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>lo</filename>模块提供管理大对象（也被称为 LO 或 BLOB）的支持。这包括一种数据类型<type>lo</type>以及一个触发器<function>lo_manage</function>。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Rationale</title>
____________________________________________________________________________-->
  <title>原理</title>

<!--==========================orignal english content==========================
  <para>
   One of the problems with the JDBC driver (and this affects the ODBC driver
   also), is that the specification assumes that references to BLOBs (Binary
   Large OBjects) are stored within a table, and if that entry is changed, the
   associated BLOB is deleted from the database.
  </para>
____________________________________________________________________________-->
  <para>
   JDBC 驱动的问题之一（并且这也影响 ODBC 驱动）是其说明书假定对 BLOB（二进制大对象）的引用被存储在一个表中，并且如果该项被改变相关的 BLOB 会被从数据库删除。
  </para>

<!--==========================orignal english content==========================
  <para>
   As <productname>PostgreSQL</> stands, this doesn't occur.  Large objects
   are treated as objects in their own right; a table entry can reference a
   large object by OID, but there can be multiple table entries referencing
   the same large object OID, so the system doesn't delete the large object
   just because you change or remove one such entry.
  </para>
____________________________________________________________________________-->
  <para>
   但对于<productname>PostgreSQL</productname>来说这并不会发生。大对象被当做自主的对象，一个表项可以通过 OID 引用一个大对象，但是可以有多个表项引用同一个大对象 OID，因此系统不会因为你改变或者删除这种项而删除大对象。
  </para>

<!--==========================orignal english content==========================
  <para>
   Now this is fine for <productname>PostgreSQL</>-specific applications, but
   standard code using JDBC or ODBC won't delete the objects, resulting in
   orphan objects &mdash; objects that are not referenced by anything, and
   simply occupy disk space.
  </para>
____________________________________________________________________________-->
  <para>
   现在这对<productname>PostgreSQL</productname>-相关的应用挺好的，但是使用 JDBC 或 ODBC 的标准代码不会删除那些对象，从而导致孤立对象 &mdash; 不被任何东西引用的对象，而且会占据磁盘空间。
  </para>

<!--==========================orignal english content==========================
  <para>
   The <filename>lo</> module allows fixing this by attaching a trigger
   to tables that contain LO reference columns.  The trigger essentially just
   does a <function>lo_unlink</> whenever you delete or modify a value
   referencing a large object.  When you use this trigger, you are assuming
   that there is only one database reference to any large object that is
   referenced in a trigger-controlled column!
  </para>
____________________________________________________________________________-->
  <para>
   <filename>lo</filename>允许通过附加一个触发器到包含 LO 引用列的表来修复这种问题。该触发器本质上只是在你删除或修改一个引用大对象的值时做<function>lo_unlink</function>。当你使用这个触发器时，你必须假定在一个触发器控制的列中只有一个对任意大对象的数据库引用！
  </para>

<!--==========================orignal english content==========================
  <para>
   The module also provides a data type <type>lo</>, which is really just
   a domain of the <type>oid</> type.  This is useful for differentiating
   database columns that hold large object references from those that are
   OIDs of other things.  You don't have to use the <type>lo</> type to
   use the trigger, but it may be convenient to use it to keep track of which
   columns in your database represent large objects that you are managing with
   the trigger.  It is also rumored that the ODBC driver gets confused if you
   don't use <type>lo</> for BLOB columns.
  </para>
____________________________________________________________________________-->
  <para>
   这个模块也提供了一种数据类型<type>lo</type>，它实际上只是<type>oid</type>类型的一个域。这有助于区分保存大对象引用的数据库列和保存其他东西 OID 的列。你并不是必须使用<type>lo</type>类型来使用该触发器，但是用它来追踪数据库中哪些列表示你要用触发器管理的大对象非常方便。也有传言说如果你不为 BLOB 列使用<type>lo</type>，ODBC 驱动会感到困惑。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>How to Use It</title>
____________________________________________________________________________-->
  <title>如何使用它</title>

<!--==========================orignal english content==========================
  <para>
   Here's a simple example of usage:
  </para>
____________________________________________________________________________-->
  <para>
   这里是一个简单的用法示例：
  </para>

<!--==========================orignal english content==========================
<programlisting>
CREATE TABLE image (title TEXT, raster lo);

CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
    FOR EACH ROW EXECUTE PROCEDURE lo_manage(raster);
</programlisting>
____________________________________________________________________________-->
<programlisting>
CREATE TABLE image (title TEXT, raster lo);

CREATE TRIGGER t_raster BEFORE UPDATE OR DELETE ON image
    FOR EACH ROW EXECUTE PROCEDURE lo_manage(raster);
</programlisting>

<!--==========================orignal english content==========================
  <para>
   For each column that will contain unique references to large objects,
   create a <literal>BEFORE UPDATE OR DELETE</> trigger, and give the column
   name as the sole trigger argument.  You can also restrict the trigger
   to only execute on updates to the column by using <literal>BEFORE UPDATE
   OF</literal> <replaceable class="parameter">column_name</replaceable>.
   If you need multiple <type>lo</>
   columns in the same table, create a separate trigger for each one,
   remembering to give a different name to each trigger on the same table.
  </para>
____________________________________________________________________________-->
  <para>
   对每一个将包含到大对象唯一引用的列，创建一个<literal>BEFORE UPDATE OR DELETE</literal>触发器，并且将该列名作为唯一的触发器参数。你也可以用<literal>BEFORE UPDATE OF</literal> <replaceable class="parameter">column_name</replaceable>来限制该触发器只对该列上的更新事件执行。如果你需要在同一个表中有多个<type>lo</type>列，为每一个创建一个独立的触发器，记住为同一个表上的每个触发器指定一个不同的名称。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Limitations</title>
____________________________________________________________________________-->
  <title>限制</title>

  <itemizedlist>
   <listitem>
<!--==========================orignal english content==========================
    <para>
     Dropping a table will still orphan any objects it contains, as the trigger
     is not executed.  You can avoid this by preceding the <command>DROP
     TABLE</> with <command>DELETE FROM <replaceable>table</></command>.
    </para>
____________________________________________________________________________-->
    <para>
     删除一个表仍将让它包含的任何对象变成孤立的，因为触发器在这种情况下不会被执行。你可以在<command>DROP TABLE</command>之前放上<command>DELETE FROM <replaceable>table</replaceable></command>来避免这种问题。
    </para>

<!--==========================orignal english content==========================
    <para>
     <command>TRUNCATE</> has the same hazard.
    </para>
____________________________________________________________________________-->
    <para>
     <command>TRUNCATE</command>有同样的危害。
    </para>

<!--==========================orignal english content==========================
    <para>
     If you already have, or suspect you have, orphaned large objects, see the
     <xref linkend="vacuumlo"> module to help
     you clean them up.  It's a good idea to run <application>vacuumlo</>
     occasionally as a back-stop to the <function>lo_manage</> trigger.
    </para>
____________________________________________________________________________-->
    <para>
     如果你已经有或者怀疑有孤立的大对象，参考<xref linkend="vacuumlo"/>模块可以帮助你清理它们。偶尔运行<application>vacuumlo</application>作为<function>lo_manage</function>触发器的后备是个好主意。
    </para>
   </listitem>

   <listitem>
<!--==========================orignal english content==========================
    <para>
     Some frontends may create their own tables, and will not create the
     associated trigger(s).  Also, users may not remember (or know) to create
     the triggers.
    </para>
____________________________________________________________________________-->
    <para>
     有些前端可能会创建它们自己的表，并且将不会创建相关的触发器。另外，用户可能不会记得（或知道）要创建触发器。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Author</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   Peter Mount <email>peter@retep.org.uk</email>
  </para>
____________________________________________________________________________-->
  <para>
   Peter Mount <email>peter@retep.org.uk</email>
  </para>
 </sect2>

</sect1>

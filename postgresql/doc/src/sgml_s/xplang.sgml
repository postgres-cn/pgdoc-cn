<!-- doc/src/sgml/xplang.sgml -->

 <chapter id="xplang">
<!--==========================orignal english content==========================
  <title>Procedural Languages</title>
____________________________________________________________________________-->
  <title>过程语言</title>

<!--==========================orignal english content==========================
  <indexterm zone="xplang">
   <primary>procedural language</primary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm zone="xplang">
   <primary>过程语言</primary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   <productname>PostgreSQL</productname> allows user-defined functions
   to be written in other languages besides SQL and C.  These other
   languages are generically called <firstterm>procedural
   languages</firstterm> (<acronym>PL</>s).  For a function
   written in a procedural language, the database server has
   no built-in knowledge about how to interpret the function's source
   text. Instead, the task is passed to a special handler that knows
   the details of the language.  The handler could either do all the
   work of parsing, syntax analysis, execution, etc. itself, or it
   could serve as <quote>glue</quote> between
   <productname>PostgreSQL</productname> and an existing implementation
   of a programming language.  The handler itself is a
   C language function compiled into a shared object and
   loaded on demand, just like any other C function.
  </para>
____________________________________________________________________________-->
  <para>
   <productname>PostgreSQL</productname>允许使用除了 SQL 和 C 之外的其他语言编写用户定义的函数。这些其他的语言通常被称作<firstterm>过程语言</firstterm>（<acronym>PL</acronym>）。对于一个用过程语言编写的函数，数据库服务器没有关于如何解释该函数的源文本的内建知识。因此，这个任务被交给一个了解语言细节的特殊处理器。该处理器能够自己处理所有的解析、语法分析、执行工作，或者它可以作为一种<productname>PostgreSQL</productname>和编程语言既有实现之间的<quote>粘合剂</quote>。就像任何其他 C 函数一样，处理器本身是一个编译到共享对象并且按需载入的 C 语言函数。
  </para>

<!--==========================orignal english content==========================
  <para>
   There are currently four procedural languages available in the
   standard <productname>PostgreSQL</productname> distribution:
   <application>PL/pgSQL</application> (<xref linkend="plpgsql">),
   <application>PL/Tcl</application> (<xref linkend="pltcl">),
   <application>PL/Perl</application> (<xref linkend="plperl">), and
   <application>PL/Python</application> (<xref linkend="plpython">).
   There are additional procedural languages available that are not
   included in the core distribution. <xref linkend="external-projects">
   has information about finding them. In addition other languages can
   be defined by users; the basics of developing a new procedural
   language are covered in <xref linkend="plhandler">.
  </para>
____________________________________________________________________________-->
  <para>
   在<productname>PostgreSQL</productname>的标准发布中当前有四种过程语言可用：
   <application>PL/pgSQL</application>（<xref linkend="plpgsql"/>）、
   <application>PL/Tcl</application>（<xref linkend="pltcl"/>）、
   <application>PL/Perl</application>（<xref linkend="plperl"/>）以及
   <application>PL/Python</application>（<xref linkend="plpython"/>）。
   还有其他过程语言可用，但是它们没有被包括在核心发布中。在<xref linkend="external-projects"/>中可以了解如何找到它们。另外，用户可以定义其他语言，<xref linkend="plhandler"/>中介绍了开发一种新过程语言的基础知识。
  </para>

  <sect1 id="xplang-install">
<!--==========================orignal english content==========================
   <title>Installing Procedural Languages</title>
____________________________________________________________________________-->
   <title>安装过程语言</title>

<!--==========================orignal english content==========================
   <para>
    A procedural language must be <quote>installed</quote> into each
    database where it is to be used.  But procedural languages installed in
    the database <literal>template1</> are automatically available in all
    subsequently created databases, since their entries in
    <literal>template1</> will be copied by <command>CREATE DATABASE</>.
    So the database administrator can
    decide which languages are available in which databases and can make
    some languages available by default if desired.
   </para>
____________________________________________________________________________-->
   <para>
    在每一个要使用过程语言的数据库中都必须<quote>安装</quote>相应的过程语言。不过安装在数据库<literal>template1</literal>中的过程语言会被后续创建的数据库自动继承，因为<literal>template1</literal>中与过程语言相关的项会被<command>CREATE DATABASE</command>复制。因此，数据库管理员可以决定在哪些数据库中可以使用哪些语言，并且按照选择让一些语言默认可用。
   </para>

<!--==========================orignal english content==========================
   <para>
    For the languages supplied with the standard distribution, it is
    only necessary to execute <command>CREATE EXTENSION</>
    <replaceable>language_name</> to install the language into the
    current database. 
    The manual procedure described below is only recommended for
    installing languages that have not been packaged as extensions.
   </para>
____________________________________________________________________________-->
   <para>
    对于标准发布所提供的语言，只需要执行<command>CREATE EXTENSION</command>
    <replaceable>language_name</replaceable>来把该语言安装在当前数据库中。
    下文所述的手工过程主要是为了安装没有被包装成扩展的语言。
   </para>

   <procedure>
<!--==========================orignal english content==========================
    <title>
     Manual Procedural Language Installation
    </title>
____________________________________________________________________________-->
    <title>
     手工安装过程语言
    </title>

<!--==========================orignal english content==========================
    <para>
     A procedural language is installed in a database in five steps,
     which must be carried out by a database superuser.  In most cases
     the required SQL commands should be packaged as the installation script
     of an <quote>extension</>, so that <command>CREATE EXTENSION</> can be
     used to execute them.
    </para>
____________________________________________________________________________-->
    <para>
     安装一个过程语言到一个数据库中包括五个步骤，且必须由一个数据库超级用户来执行。在大部分情况下，所需的 SQL 命令应该被打包成一个<quote>扩展</quote>的安装脚本，这样可以用<command>CREATE EXTENSION</command>来执行它们。
    </para>

    <step performance="required" id="xplang-install-cr1">
<!--==========================orignal english content==========================
     <para>
      The shared object for the language handler must be compiled and
      installed into an appropriate library directory.  This works in the same
      way as building and installing modules with regular user-defined C
      functions does; see <xref linkend="dfunc">.  Often, the language
      handler will depend on an external library that provides the actual
      programming language engine; if so, that must be installed as well.
     </para>
____________________________________________________________________________-->
     <para>
      用于语言处理器的共享对象必须被编译并安装到一个合适的库目录中。这和编译和安装常规的用户定义 C 函数一样，参见<xref linkend="dfunc"/>。通常，语言处理器将依赖于一个实际提供编程语言引擎的外部库，如果是这样，那些外部库也应该被安装。
     </para>
    </step>

    <step performance="required" id="xplang-install-cr2">
<!--==========================orignal english content==========================
     <para>
      The handler must be declared with the command
<synopsis>
CREATE FUNCTION <replaceable>handler_function_name</replaceable>()
    RETURNS language_handler
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
      The special return type of <type>language_handler</type> tells
      the database system that this function does not return one of
      the defined <acronym>SQL</acronym> data types and is not directly usable
      in <acronym>SQL</acronym> statements.
     </para>
____________________________________________________________________________-->
     <para>
      处理器必须用下面的命令声明
<synopsis>
CREATE FUNCTION <replaceable>handler_function_name</replaceable>()
    RETURNS language_handler
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
      特殊的返回类型<type>language_handler</type>告诉数据库系统，这个函数不返回已定义的<acronym>SQL</acronym>数据类型，并且不能直接在<acronym>SQL</acronym>语句中使用。
     </para>
    </step>

    <step performance="optional" id="xplang-install-cr3">
<!--==========================orignal english content==========================
     <para>
      Optionally, the language handler can provide an <quote>inline</>
      handler function that executes anonymous code blocks
      (<xref linkend="sql-do"> commands)
      written in this language.  If an inline handler function
      is provided by the language, declare it with a command like
<synopsis>
CREATE FUNCTION <replaceable>inline_function_name</replaceable>(internal)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
     </para>
____________________________________________________________________________-->
     <para>
      可选地，语言处理器能提供一个<quote>内联</quote>处理器函数来执行用这种语言编写的匿名代码块（<xref linkend="sql-do"/>命令）。如果该语言提供了一个内联函数，用类似下面的命令声明它
<synopsis>
CREATE FUNCTION <replaceable>inline_function_name</replaceable>(internal)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
     </para>
    </step>

    <step performance="optional" id="xplang-install-cr4">
<!--==========================orignal english content==========================
     <para>
      Optionally, the language handler can provide a <quote>validator</>
      function that checks a function definition for correctness without
      actually executing it.  The validator function is called by
      <command>CREATE FUNCTION</> if it exists.  If a validator function
      is provided by the language, declare it with a command like
<synopsis>
CREATE FUNCTION <replaceable>validator_function_name</replaceable>(oid)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C STRICT;
</synopsis>
     </para>
____________________________________________________________________________-->
     <para>
      可选地，语言处理器能提供一个<quote>验证器</quote>函数用来检查一个函数定义的正确性而无需实际执行它。如果验证器函数存在，它将被<command>CREATE FUNCTION</command>调用。如果该语言提供了一个验证器函数，用类似下面的命令声明它
<synopsis>
CREATE FUNCTION <replaceable>validator_function_name</replaceable>(oid)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C STRICT;
</synopsis>
     </para>
    </step>

    <step performance="required" id="xplang-install-cr5">
<!--==========================orignal english content==========================
     <para>
      Finally, the PL must be declared with the command
<synopsis>
CREATE <optional>TRUSTED</optional> <optional>PROCEDURAL</optional> LANGUAGE <replaceable>language-name</replaceable>
    HANDLER <replaceable>handler_function_name</replaceable>
    <optional>INLINE <replaceable>inline_function_name</replaceable></optional>
    <optional>VALIDATOR <replaceable>validator_function_name</replaceable></optional> ;
</synopsis>
      The optional key word <literal>TRUSTED</literal> specifies that
      the language does not grant access to data that the user would
      not otherwise have.  Trusted languages are designed for ordinary
      database users (those without superuser privilege) and allows them
      to safely create functions and
      procedures. Since PL functions are executed inside the database
      server, the <literal>TRUSTED</literal> flag should only be given
      for languages that do not allow access to database server
      internals or the file system. The languages
      <application>PL/pgSQL</application>,
      <application>PL/Tcl</application>, and
      <application>PL/Perl</application>
      are considered trusted; the languages
      <application>PL/TclU</application>,
      <application>PL/PerlU</application>, and
      <application>PL/PythonU</application>
      are designed to provide unlimited functionality and should
      <emphasis>not</emphasis> be marked trusted.
     </para>
____________________________________________________________________________-->
     <para>
      最后，PL 必须用下面的命令声明
<synopsis>
CREATE <optional>TRUSTED</optional> <optional>PROCEDURAL</optional> LANGUAGE <replaceable>language-name</replaceable>
    HANDLER <replaceable>handler_function_name</replaceable>
    <optional>INLINE <replaceable>inline_function_name</replaceable></optional>
    <optional>VALIDATOR <replaceable>validator_function_name</replaceable></optional> ;
</synopsis>
      可选的关键词<literal>TRUSTED</literal>指定，如果用户不具有访问数据的权限，该语言不会授予对数据的访问。可信的语言是为普通数据库用户（没有超级用户特权）设计的并且允许他们安全地创建函数和过程。由于 PL 函数是在数据库内部执行的，<literal>TRUSTED</literal>标志只应被给予不允许访问数据库服务器内部或文件系统的语言。语言
      <application>PL/pgSQL</application>、
      <application>PL/Tcl</application>以及
      <application>PL/Perl</application>被认为是可信的，语言
      <application>PL/TclU</application>、
      <application>PL/PerlU</application>以及
      <application>PL/PythonU</application>是被设计用来提供无限制功能的并且<emphasis>不</emphasis>应该被标记为可信。
     </para>
    </step>
   </procedure>

<!--==========================orignal english content==========================
   <para>
    <xref linkend="xplang-install-example"> shows how the manual
    installation procedure would work with the language
    <application>PL/Perl</application>.
   </para>
____________________________________________________________________________-->
   <para>
    <xref linkend="xplang-install-example"/>展示了手工安装过程如何安装语言<application>PL/Perl</application>。
   </para>

   <example id="xplang-install-example">
<!--==========================orignal english content==========================
    <title>Manual Installation of <application>PL/Perl</application></title>
____________________________________________________________________________-->
    <title><application>PL/Perl</application>的手工安装</title>

<!--==========================orignal english content==========================
     <para>
      The following command tells the database server where to find the
      shared object for the <application>PL/Perl</application> language's call
      handler function:

<programlisting>
CREATE FUNCTION plperl_call_handler() RETURNS language_handler AS
    '$libdir/plperl' LANGUAGE C;
</programlisting>
     </para>
____________________________________________________________________________-->
     <para>
      下列命令告诉数据库服务器在哪里寻找用于<application>PL/Perl</application>语言调用处理器函数的共享对象：

<programlisting>
CREATE FUNCTION plperl_call_handler() RETURNS language_handler AS
    '$libdir/plperl' LANGUAGE C;
</programlisting>
     </para>

<!--==========================orignal english content==========================
     <para>
      <application>PL/Perl</application> has an inline handler function
      and a validator function, so we declare those too:

<programlisting>
CREATE FUNCTION plperl_inline_handler(internal) RETURNS void AS
    '$libdir/plperl' LANGUAGE C;

CREATE FUNCTION plperl_validator(oid) RETURNS void AS
    '$libdir/plperl' LANGUAGE C STRICT;
</programlisting>
     </para>
____________________________________________________________________________-->
     <para>
      <application>PL/Perl</application>有一个内联处理器函数和一个验证器函数，因此我们也要声明它们：

<programlisting>
CREATE FUNCTION plperl_inline_handler(internal) RETURNS void AS
    '$libdir/plperl' LANGUAGE C;

CREATE FUNCTION plperl_validator(oid) RETURNS void AS
    '$libdir/plperl' LANGUAGE C STRICT;
</programlisting>
     </para>

<!--==========================orignal english content==========================
     <para>
      The command:
<programlisting>
CREATE TRUSTED PROCEDURAL LANGUAGE plperl
    HANDLER plperl_call_handler
    INLINE plperl_inline_handler
    VALIDATOR plperl_validator;
</programlisting>
      then defines that the previously declared functions
      should be invoked for functions and procedures where the
      language attribute is <literal>plperl</literal>.
     </para>
____________________________________________________________________________-->
     <para>
      命令
<programlisting>
CREATE TRUSTED PROCEDURAL LANGUAGE plperl
    HANDLER plperl_call_handler
    INLINE plperl_inline_handler
    VALIDATOR plperl_validator;
</programlisting>
      则定义了前面声明的函数会为语言属性为<literal>plperl</literal>的函数及过程所调用。
     </para>
  </example>

<!--==========================orignal english content==========================
   <para>
    In a default <productname>PostgreSQL</productname> installation,
    the handler for the <application>PL/pgSQL</application> language
    is built and installed into the <quote>library</quote>
    directory; furthermore, the <application>PL/pgSQL</application> language
    itself is installed in all databases.
    If <application>Tcl</> support is configured in, the handlers for
    <application>PL/Tcl</> and <application>PL/TclU</> are built and installed
    in the library directory, but the language itself is not installed in any
    database by default.
    Likewise, the <application>PL/Perl</> and <application>PL/PerlU</>
    handlers are built and installed if Perl support is configured, and the
    <application>PL/PythonU</> handler is installed if Python support is
    configured, but these languages are not installed by default.
   </para>
____________________________________________________________________________-->
   <para>
    在一个默认的<productname>PostgreSQL</productname>安装中，用于<application>PL/pgSQL</application>语言的处理器会被编译并且安装到<quote>library</quote>目录，此外<application>PL/pgSQL</application>语言本身会被安装在所有的数据库中。如果配置了<application>Tcl</application>支持，用于<application>PL/Tcl</application>和<application>PL/TclU</application>的处理器会被编译并且安装到库目录中，但语言本身默认不会被安装在任何数据库中。同样地，<application>PL/Perl</application>和<application>PL/PerlU</application>处理器在配置了 Perl 支持时被编译和安装，并且<application>PL/PythonU</application>处理器在配置了 Python 支持时被安装，但是这些语言默认都不会被安装。
   </para>

  </sect1>

</chapter>

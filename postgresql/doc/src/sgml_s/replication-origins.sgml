<!-- doc/src/sgml/replication-origins.sgml -->
<chapter id="replication-origins">
<!--==========================orignal english content==========================
 <title>Replication Progress Tracking</title>
____________________________________________________________________________-->
 <title>复制进度追踪</title>

<!--==========================orignal english content==========================
 <indexterm zone="replication-origins">
  <primary>Replication Progress Tracking</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="replication-origins">
  <primary>复制进度追踪</primary>
 </indexterm>
<!--==========================orignal english content==========================
 <indexterm zone="replication-origins">
  <primary>Replication Origins</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="replication-origins">
  <primary>复制源</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  Replication origins are intended to make it easier to implement
  logical replication solutions on top
  of <link linkend="logicaldecoding">logical decoding</link>.
  They provide a solution to two common problems:
  <itemizedlist>
   <listitem>
    <para>How to safely keep track of replication progress</para>
   </listitem>
   <listitem>
    <para>How to change replication behavior based on the
     origin of a row; for example, to prevent loops in bi-directional
     replication setups</para>
   </listitem>
  </itemizedlist>
 </para>
____________________________________________________________________________-->
 <para>
  复制源是为了更容易地在<link linkend="logicaldecoding">逻辑解码</link>
  上实现逻辑复制解决方案而设计。它们提供了对两种常见问题的解决方案：
  <itemizedlist>
   <listitem>
    <para>如何安全地跟踪复制进度？</para>
   </listitem>
   <listitem>
    <para>如何基于一行的来源更改复制行为？例如，阻止双向复制
    设置中的循环</para>
   </listitem>
  </itemizedlist>
 </para>

<!--==========================orignal english content==========================
 <para>
  Replication origins have just two properties, a name and an OID. The name,
  which is what should be used to refer to the origin across systems, is
  free-form <type>text</type>. It should be used in a way that makes conflicts
  between replication origins created by different replication solutions
  unlikely; e.g. by prefixing the replication solution's name to it.
  The OID is used only to avoid having to store the long version
  in situations where space efficiency is important. It should never be shared
  across systems.
 </para>
____________________________________________________________________________-->
 <para>
  复制源只有两个属性，名称和 OID。名称应该可以被用来在系统间引用该源，
  它是一种自由形式的<type>文本</type>。为了避免复制源之间的冲突，可以
  在复制源的名称前加上复制解决方案的名称。在空间效率很重要的情况下，OID
  被用来避免不得不存储长版本。OID 不能在系统间被共享。
 </para>

<!--==========================orignal english content==========================
 <para>
  Replication origins can be created using the function
  <link linkend="pg-replication-origin-create"><function>pg_replication_origin_create()</function></link>;
  dropped using
  <link linkend="pg-replication-origin-drop"><function>pg_replication_origin_drop()</function></link>;
  and seen in the
  <link linkend="catalog-pg-replication-origin"><structname>pg_replication_origin</structname></link>
  system catalog.
 </para>
____________________________________________________________________________-->
 <para>
  可以使用函数
  <link linkend="pg-replication-origin-create"><function>pg_replication_origin_create()</function></link>创建复制源，使用函数
  <link linkend="pg-replication-origin-drop"><function>pg_replication_origin_drop()</function></link>删除复制源，并且在系统目录
  <link linkend="catalog-pg-replication-origin"><structname>pg_replication_origin</structname></link>中查看复制源。
 </para>

<!--==========================orignal english content==========================
 <para>
  One nontrivial part of building a replication solution is to keep track of
  replay progress in a safe manner. When the applying process, or the whole
  cluster, dies, it needs to be possible to find out up to where data has
  successfully been replicated. Naive solutions to this, such as updating a
  row in a table for every replayed transaction, have problems like run-time
  overhead and database bloat.
 </para>
____________________________________________________________________________-->
 <para>
  构建一套复制解决方案的一个重要部分是以一种安全的方式跟踪重放进度。当应用
  过程或者整个集簇死掉时，需要能够找出数据被成功地复制到了什么地方。对此的
  简单解决方案（例如为每一个被重放的事务更新一个表行）有运行时负荷和数据库
  膨胀的问题。
 </para>

<!--==========================orignal english content==========================
 <para>
  Using the replication origin infrastructure a session can be
  marked as replaying from a remote node (using the
  <link linkend="pg-replication-origin-session-setup"><function>pg_replication_origin_session_setup()</function></link>
  function). Additionally the <acronym>LSN</acronym> and commit
  time stamp of every source transaction can be configured on a per
  transaction basis using
  <link linkend="pg-replication-origin-xact-setup"><function>pg_replication_origin_xact_setup()</function></link>.
  If that's done replication progress will persist in a crash safe
  manner. Replay progress for all replication origins can be seen in the
  <link linkend="view-pg-replication-origin-status">
   <structname>pg_replication_origin_status</structname>
  </link> view. An individual origin's progress, e.g. when resuming
  replication, can be acquired using
  <link linkend="pg-replication-origin-progress"><function>pg_replication_origin_progress()</function></link>
  for any origin or
  <link linkend="pg-replication-origin-session-progress"><function>pg_replication_origin_session_progress()</function></link>
  for the origin configured in the current session.
 </para>
____________________________________________________________________________-->
 <para>
  通过使用复制源，一个会话可以被标记为从一个远程节点重放（使用
  <link linkend="pg-replication-origin-session-setup"><function>pg_replication_origin_session_setup()</function></link>函数）。此外，
  可以使用
  <link linkend="pg-replication-origin-xact-setup"><function>pg_replication_origin_xact_setup()</function></link>以每一个事务为基础配置每一个源事务的
  <acronym>LSN</acronym>和提交时间戳。如果完成这样的配置，
  复制过程将保持在一种对崩溃安全的方式中。所有复制源的重放进度可以在
  <link linkend="view-pg-replication-origin-status">
   <structname>pg_replication_origin_status</structname>
  </link>视图中看到。一个源的进度（例如在继续复制时）可以使用
  <link linkend="pg-replication-origin-progress"><function>pg_replication_origin_progress()</function></link>（用于任何源）或者
  <link linkend="pg-replication-origin-session-progress"><function>pg_replication_origin_session_progress()</function></link>
  （用于在当前会话中配置的源）获得。
 </para>

<!--==========================orignal english content==========================
 <para>
  In replication topologies more complex than replication from exactly one
  system to one other system, another problem can be that it is hard to avoid
  replicating replayed rows again. That can lead both to cycles in the
  replication and inefficiencies. Replication origins provide an optional
  mechanism to recognize and prevent that. When configured using the functions
  referenced in the previous paragraph, every change and transaction passed to
  output plugin callbacks (see <xref linkend="logicaldecoding-output-plugin">)
  generated by the session is tagged with the replication origin of the
  generating session.  This allows treating them differently in the output
  plugin, e.g. ignoring all but locally-originating rows.  Additionally
  the <link linkend="logicaldecoding-output-plugin-filter-origin">
  <function>filter_by_origin_cb</function></link> callback can be used
  to filter the logical decoding change stream based on the
  source. While less flexible, filtering via that callback is
  considerably more efficient than doing it in the output plugin.
 </para>
____________________________________________________________________________-->
 <para>
  在比从一个系统复制到另一个系统更复杂的复制拓扑中，另一个问题是很难避免再次
  复制已经被重放的行。这可能导致复制中的循环和低效。复制源提供了一种可选的机制
  来识别和阻止这种问题。在使用前一段提到的函数配置时，每一个被传递
  给输出插件回调（见<xref linkend="logicaldecoding-output-plugin"/>）的由该会话
  生成的改变和事务会被标记上该会话的复制源。这使得可以在输出插件中以不同的方式
  对待它们，例如忽略除本地生成的行之外的所有行。此外，
  <link linkend="logicaldecoding-output-plugin-filter-origin">
  <function>filter_by_origin_cb</function></link>回调可以被用来基于来源过滤逻辑
  解码改变流。虽然灵活性较低，通过这种回调进行过滤比用输出插件过滤效率更高。
 </para>
</chapter>

<!-- doc/src/sgml/install-windows.sgml -->

<chapter id="install-windows">
<!--==========================orignal english content==========================
 <title>Installation from Source Code on <productname>Windows</productname></title>
____________________________________________________________________________-->
 <title>在<productname>Windows</productname>上从源代码安装</title>

<!--==========================orignal english content==========================
 <indexterm>
  <primary>installation</primary>
  <secondary>on Windows</secondary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm>
  <primary>installation</primary>
  <secondary>on Windows</secondary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  It is recommended that most users download the binary distribution for
  Windows, available as a graphical installer package
  from the <productname>PostgreSQL</productname> website. Building from source
  is only intended for people developing <productname>PostgreSQL</productname>
  or extensions.
 </para>
____________________________________________________________________________-->
 <para>
  对于大部分用户，推荐下载Windows的二进制发布，它在<productname>PostgreSQL</productname>
  的网站上作为一个图形化安装包可供下载。从源代码构建的方式只适合于希望开发或者扩展
  <productname>PostgreSQL</productname>的人们。
 </para>

<!--==========================orignal english content==========================
 <para>
  There are several different ways of building PostgreSQL on
  <productname>Windows</productname>. The simplest way to build with
  Microsoft tools is to install <productname>Visual Studio Express 2017
  for Windows Desktop</productname> and use the included
  compiler. It is also possible to build with the full
  <productname>Microsoft Visual C++ 2005 to 2017</productname>.
  In some cases that requires the installation of the
  <productname>Windows SDK</productname> in addition to the compiler.
 </para>
____________________________________________________________________________-->
 <para>
  有多种不同的方式可以在<productname>Windows</productname>上构建PostgreSQL。
  用微软工具进行构建的最简单方式是安装
  <productname>Visual Studio Express 2017 for Windows Desktop</productname>并使用其中包含的编译器。
  也可以使用完整的<productname>Microsoft Visual C++ 2005到2017</productname>来构建。
  在某些情况中除了编译器还需要安装<productname>Windows SDK</productname>。
 </para>

<!--==========================orignal english content==========================
 <para>
  It is also possible to build PostgreSQL using the GNU compiler tools
  provided by <productname>MinGW</productname>, or using
  <productname>Cygwin</productname> for older versions of
  <productname>Windows</productname>.
 </para>
____________________________________________________________________________-->
 <para>
  也可以使用由<productname>MinGW</productname>提供的GNU编译器工具来构建PostgreSQL，或者使用适合于旧版本<productname>Windows</productname>的<productname>Cygwin</productname>。
 </para>

<!--==========================orignal english content==========================
 <para>
  Building using <productname>MinGW</productname> or
  <productname>Cygwin</productname> uses the normal build system, see
  <xref linkend="installation"> and the specific notes in
  <xref linkend="installation-notes-mingw"> and <xref linkend="installation-notes-cygwin">.
  To produce native 64 bit binaries in these environments, use the tools from
  <productname>MinGW-w64</productname>. These tools can also be used to
  cross-compile for 32 bit and 64 bit <productname>Windows</productname>
  targets on other hosts, such as <productname>Linux</productname> and
  <productname>macOS</productname>.
  <productname>Cygwin</productname> is not recommended for running a
  production server, and it should only be used for running on
  older versions of <productname>Windows</productname> where
  the native build does not work, such as
  <productname>Windows 98</productname>. The official
  binaries are built using <productname>Visual Studio</productname>.
 </para>
____________________________________________________________________________-->
 <para>
  使用<productname>MinGW</productname>或<productname>Cygwin</productname>的构建用到普通构建系统，见<xref linkend="installation"/>、<xref linkend="installation-notes-mingw"/>和<xref linkend="installation-notes-cygwin"/>。在这些环境下，要产生原生的64位二进制代码，请使用<productname>MinGW-w64</productname>中的工具。这些工具同样可以被用于在32位和64位 <productname>Windows</productname>上交叉编译其他主机上的目标，例如<productname>Linux</productname>和<productname>macOS</productname>。不推荐将<productname>Cygwin</productname>用于一个产品服务器，它只应被用于老版本的<productname>Windows</productname>，因为在这些系统中原生构建无法工作，例如<productname>Windows 98</productname>。官方的二进制代码使用<productname>Visual Studio</productname>构建。
 </para>

<!--==========================orignal english content==========================
 <para>
  Native builds of <application>psql</application> don't support command
  line editing. The <productname>Cygwin</productname> build does support
  command line editing, so it should be used where psql is needed for
  interactive use on  <productname>Windows</productname>.
 </para>
____________________________________________________________________________-->
 <para>
  <application>psql</application>的原生构建不支持命令行编辑。<productname>Cygwin</productname>构建能支持命令行编辑，因此如果需要在<productname>Windows</productname>上交互式地使用psql可以用到它。
 </para>

 <sect1 id="install-windows-full">
<!--==========================orignal english content==========================
  <title>Building with <productname>Visual C++</productname> or the
  <productname>Microsoft Windows SDK</productname></title>
____________________________________________________________________________-->
  <title>使用<productname>Visual C++</productname>或<productname>Microsoft Windows SDK</productname>构建</title>

<!--==========================orignal english content==========================
 <para>
  PostgreSQL can be built using the Visual C++ compiler suite from Microsoft.
  These compilers can be either from <productname>Visual Studio</productname>,
  <productname>Visual Studio Express</productname> or some versions of the
  <productname>Microsoft Windows SDK</productname>. If you do not already have a
  <productname>Visual Studio</productname> environment set up, the easiest
  ways are to use the compilers from <productname>Visual Studio Express 2017
  for Windows Desktop</productname> or those in the <productname>Windows SDK
  8.1</productname>, which are both free downloads from Microsoft.
 </para>
____________________________________________________________________________-->
 <para>
  PostgreSQL可以使用来自微软的Visual C++编译器套件构建。这些编译器可以来自于<productname>Visual Studio</productname>、<productname>Visual Studio Express</productname>或者<productname>Microsoft Windows SDK</productname>的某些版本。如果你还没有准备好一个<productname>Visual Studio</productname>环境设置，最简单的方式是使用<productname>Visual Studio Express 2017 for Windows Desktop</productname>中的编译器，或者<productname>Windows SDK 8.1</productname>中的，两者都可以从微软免费下载。
 </para>

<!--==========================orignal english content==========================
 <para>
  Both 32-bit and 64-bit builds are possible with the Microsoft Compiler suite.
  32-bit PostgreSQL builds are possible with
  <productname>Visual Studio 2005</productname> to
  <productname>Visual Studio 2017</productname> (including Express editions),
  as well as standalone Windows SDK releases 6.0 to 8.1.
  64-bit PostgreSQL builds are supported with
  <productname>Microsoft Windows SDK</productname> version 6.0a to 8.1 or
  <productname>Visual Studio 2008</productname> and above. Compilation
  is supported down to <productname>Windows XP</productname> and
  <productname>Windows Server 2003</> when building with
  <productname>Visual Studio 2005</> to
  <productname>Visual Studio 2013</productname>. Building with
  <productname>Visual Studio 2015</productname> is supported down to
  <productname>Windows Vista</> and <productname>Windows Server 2008</>.
   Building with <productname>Visual Studio 2017</productname> is supported
   down to <productname>Windows 7 SP1</> and <productname>Windows Server 2008 R2 SP1</>.
 </para>
____________________________________________________________________________-->
 <para>
  使用微软编译器套件可以编译得到 32 位和 64 位版本。32 位的 PostgreSQL 可以使用
  <productname>Visual Studio 2005</productname>至
  <productname>Visual Studio 2017</productname>（包括精简版）编译，
  单独的Windows SDK 6.0至8.1亦可。64位PostgreSQL的构建只被
  <productname>Microsoft Windows SDK</productname>版本6.0a至8.1或
  <productname>Visual Studio 2008</productname>及以上版本支持。
  使用<productname>Visual Studio 2005</productname>至
  <productname>Visual Studio 2013</productname>编译时最低支持
  <productname>Windows XP</productname>和
  <productname>Windows Server 2003</productname>。使用
  <productname>Visual Studio 2015</productname>编译时最低支持
  <productname>Windows Vista</productname>和<productname>Windows Server 2008</productname>。
  使用<productname>Visual Studio 2017</productname>编译时最低支持
  <productname>Windows 7 SP1</productname>和<productname>Windows Server 2008 R2 SP1</productname>。
 </para>

<!--==========================orignal english content==========================
 <para>
  The tools for building using <productname>Visual C++</productname> or
  <productname>Platform SDK</productname> are in the
  <filename>src/tools/msvc</filename> directory. When building, make sure
  there are no tools from <productname>MinGW</productname> or
  <productname>Cygwin</productname> present in your system PATH. Also, make
  sure you have all the required Visual C++ tools available in the PATH. In
  <productname>Visual Studio</productname>, start the
  <application>Visual Studio Command Prompt</application>.
  If you wish to build a 64-bit version, you must use the 64-bit version of
  the command, and vice versa.
  In the <productname>Microsoft Windows SDK</productname>, start the
  <application>CMD shell</application> listed under the SDK on the Start Menu.
  In recent SDK versions you can change the targeted CPU architecture, build
  type, and target OS by using the <command>setenv</command> command, e.g.
  <command>setenv /x86 /release /xp</command> to target Windows XP or later
  with a 32-bit release build. See <command>/?</command> for other options to
  <command>setenv</command>.  All commands should be run from the
  <filename>src\tools\msvc</filename> directory.
 </para>
____________________________________________________________________________-->
 <para>
  使用<productname>Visual C++</productname>或<productname>Platform SDK</productname>构建的工具在<filename>src/tools/msvc</filename>目录中。在构建时，请确定在系统路径中没有来自于<productname>MinGW</productname>或的<productname>Cygwin</productname>工具。同样，确保所有需要的Visual C++工具都在PATH中。在<productname>Visual Studio</productname>中，启动<application>Visual Studio Command Prompt</application>。如果你希望构建一个64位版本，你必须使用64位版本的命令，反之亦然。在<productname>Microsoft Windows SDK</productname>中，启动该SDK在启动菜单中的<application>CMD shell</application>。在最近的SDK版本中你可以使用<command>setenv</command>命令改变目标CPU架构、构建类型以及目标OS，例如<command>setenv /x86 /release /xp</command>会设置为Windows XP或更高版本上的32位发布构建。使用<command>/?</command>来了解<command>setenv</command>的其他选项。所有命令应该从<filename>src\tools\msvc</filename>目录运行。
 </para>

<!--==========================orignal english content==========================
 <para>
  Before you build, you may need to edit the file <filename>config.pl</filename>
  to reflect any configuration options you want to change, or the paths to
  any third party libraries to use. The complete configuration is determined
  by first reading and parsing the file <filename>config_default.pl</filename>,
  and then apply any changes from <filename>config.pl</filename>. For example,
  to specify the location of your <productname>Python</productname> installation,
  put the following in <filename>config.pl</filename>:
<programlisting>
$config->{python} = 'c:\python26';
</programlisting>
  You only need to specify those parameters that are different from what's in
  <filename>config_default.pl</filename>.
 </para>
____________________________________________________________________________-->
 <para>
  在开始构建之前，你还需要编辑文件<filename>config.pl</filename>来反映任何你想改变的配置选项，或者要使用的任何第三方库目录。完整的配置在第一次读取并解析文件<filename>config_default.pl</filename>时确定，然后应用<filename>config.pl</filename>中的任何改变。例如，要制定你的<productname>Python</productname>安装的位置，将下面的内容放在<filename>config.pl</filename>中：
<programlisting>
$config->{python} = 'c:\python26';
</programlisting>
  你只需要指定那些和<filename>config_default.pl</filename>中不同的参数即可。
 </para>

<!--==========================orignal english content==========================
 <para>
  If you need to set any other environment variables, create a file called
  <filename>buildenv.pl</filename> and put the required commands there. For
  example, to add the path for bison when it's not in the PATH, create a file
  containing:
<programlisting>
$ENV{PATH}=$ENV{PATH} . ';c:\some\where\bison\bin';
</programlisting>
 </para>
____________________________________________________________________________-->
 <para>
  如果你希望设置任何其他环境变量，可创建一个名为<filename>buildenv.pl</filename>的文件并将需要的命令放在其中。例如，要把不在PATH中的bison路径加上，创建一个包含以下内容的文件：
<programlisting>
$ENV{PATH}=$ENV{PATH} . ';c:\some\where\bison\bin';
</programlisting>
 </para>

<!--==========================orignal english content==========================
 <para>
  To pass additional command line arguments to the Visual Studio build
  command (msbuild or vcbuild):
<programlisting>
$ENV{MSBFLAGS}="/m";
</programlisting>
 </para>
____________________________________________________________________________-->
 <para>
  传递更多的命令行参数到Visual Studio构建命令(msbuild 或 vcbuild):
<programlisting>
$ENV{MSBFLAGS}="/m";
</programlisting>
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Requirements</title>
____________________________________________________________________________-->
  <title>要求</title>
<!--==========================orignal english content==========================
  <para>
   The following additional products are required to build
   <productname>PostgreSQL</productname>. Use the
   <filename>config.pl</filename> file to specify which directories the libraries
   are available in.

   <variablelist>
    <varlistentry>
     <term><productname>Microsoft Windows SDK</productname></term>
     <listitem><para>
      If your build environment doesn't ship with a supported version of the
      <productname>Microsoft Windows SDK</productname> it
      is recommended that you upgrade to the latest version (currently
      version 7.1), available for download from
      <ulink url="https://www.microsoft.com/download"></>.
     </para>
     <para>
      You must always include the
      <application>Windows Headers and Libraries</application> part of the SDK.
      If you install a <productname>Windows SDK</productname>
      including the <application>Visual C++ Compilers</application>,
      you don't need <productname>Visual Studio</productname> to build.
      Note that as of Version 8.0a the Windows SDK no longer ships with a
      complete command-line build environment.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
      ActiveState Perl is required to run the build generation scripts. MinGW
      or Cygwin Perl will not work. It must also be present in the PATH.
      Binaries can be downloaded from
      <ulink url="http://www.activestate.com"></>
      (Note: version 5.8.3 or later is required,
      the free Standard Distribution is sufficient).
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
____________________________________________________________________________-->
  <para>
   构建<productname>PostgreSQL</productname>时需要下列附加产品。使用<filename>config.pl</filename>文件来指定这些库所在的目录。

   <variablelist>
    <varlistentry>
     <term><productname>Microsoft Windows SDK</productname></term>
     <listitem><para>
      如果你的构建环境中没有一个受支持的<productname>Microsoft Windows SDK</productname>版本，推荐你升级到最新版（当前版本为7.1，可从<ulink url="https://www.microsoft.com/download"></ulink>下载）。
     </para>
     <para>
      你必须总是包括SDK中的<application>Windows头文件和库</application>部分。如果你安装的是一个包括<application>Visual C++ 编译器</application>的<productname>Windows SDK</productname>，构建时不需要<productname>Visual Studio</productname>。注意在版本8.0a，Windows SDK中不再包括一个完整的命令行构建环境。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
      ActiveState Perl被用来运行构建生成脚本。MinGW或Cygwin Perl是不符合要求的。AcitveState Perl也必须存在于PATH中。其二进制文件可以从<ulink url="http://www.activestate.com"></ulink>下载（注意：需要版本5.8.3及以上，免费标准发布就足够了）。
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
<!--==========================orignal english content==========================
  <para>
   The following additional products are not required to get started,
   but are required to build the complete package. Use the
   <filename>config.pl</filename> file to specify which directories the libraries
   are available in.

   <variablelist>
    <varlistentry>
     <term><productname>ActiveState TCL</productname></term>
     <listitem><para>
      Required for building <application>PL/Tcl</application> (Note: version
      8.4 is required, the free Standard Distribution is sufficient).
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Bison</productname> and
      <productname>Flex</productname></term>
     <listitem>
     <para>
      <productname>Bison</productname> and <productname>Flex</productname> are
      required to build from Git, but not required when building from a release
      file. Only <productname>Bison</productname> 1.875 or versions 2.2 and later
      will work. <productname>Flex</productname> must be version 2.5.31 or later.
     </para>

     <para>
      Both <productname>Bison</productname> and <productname>Flex</productname>
      are included in the <productname>msys</productname> tool suite, available
      from <ulink url="http://www.mingw.org/wiki/MSYS"></> as part of the
      <productname>MinGW</productname> compiler suite.
     </para>

     <para>
      You will need to add the directory containing
      <filename>flex.exe</filename> and <filename>bison.exe</filename> to the
      PATH environment variable in <filename>buildenv.pl</filename> unless
      they are already in PATH. In the case of MinGW, the directory is the
      <filename>\msys\1.0\bin</filename> subdirectory of your MinGW
      installation directory.
     </para>

     <note>
      <para>
        The Bison distribution from GnuWin32 appears to have a bug that
        causes Bison to malfunction when installed in a directory with
        spaces in the name, such as the default location on English
        installations <filename>C:\Program Files\GnuWin32</filename>.
        Consider installing into <filename>C:\GnuWin32</filename> or use the
        NTFS short name path to GnuWin32 in your PATH environment setting
        (e.g. <filename>C:\PROGRA~1\GnuWin32</filename>).
       </para>
     </note>

     <note>
       <para>
       The obsolete <literal>winflex</literal> binaries distributed on the PostgreSQL FTP site
       and referenced in older documentation will fail with <quote>flex: fatal
       internal error, exec failed</quote> on 64-bit Windows hosts. Use Flex from
       MSYS instead.
       </para>
     </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Diff</productname></term>
     <listitem><para>
      Diff is required to run the regression tests, and can be downloaded
      from <ulink url="http://gnuwin32.sourceforge.net"></>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Gettext</productname></term>
     <listitem><para>
      Gettext is required to build with NLS support, and can be downloaded
      from <ulink url="http://gnuwin32.sourceforge.net"></>. Note that binaries,
      dependencies and developer files are all needed.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>MIT Kerberos</productname></term>
     <listitem><para>
      Required for GSSAPI authentication support. MIT Kerberos can be
      downloaded from
      <ulink url="http://web.mit.edu/Kerberos/dist/index.html"></>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>libxml2</productname> and
      <productname>libxslt</productname></term>
     <listitem><para>
      Required for XML support. Binaries can be downloaded from
      <ulink url="http://zlatkovic.com/pub/libxml"></> or source from
      <ulink url="http://xmlsoft.org"></>. Note that libxml2 requires iconv,
      which is available from the same download location.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>openssl</productname></term>
     <listitem><para>
      Required for SSL support. Binaries can be downloaded from
      <ulink url="http://www.slproweb.com/products/Win32OpenSSL.html"></>
      or source from <ulink url="http://www.openssl.org"></>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ossp-uuid</productname></term>
     <listitem><para>
      Required for UUID-OSSP support (contrib only). Source can be
      downloaded from
      <ulink url="http://www.ossp.org/pkg/lib/uuid/"></>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Python</productname></term>
     <listitem><para>
      Required for building <application>PL/Python</application>. Binaries can
      be downloaded from <ulink url="http://www.python.org"></>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>zlib</productname></term>
     <listitem><para>
      Required for compression support in <application>pg_dump</application>
      and <application>pg_restore</application>. Binaries can be downloaded
      from <ulink url="http://www.zlib.net"></>.
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
____________________________________________________________________________-->
  <para>
   下面的附加产品在开始时并不要求，但是如果要构建完整的包就需要它们。使用<filename>config.pl</filename>文件来指定这些库所在的目录。

   <variablelist>
    <varlistentry>
     <term><productname>ActiveState TCL</productname></term>
     <listitem><para>
      用于构建<application>PL/Tcl</application>（注意：要求版本8.4，免费标准发布即可）。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Bison</productname>和
      <productname>Flex</productname></term>
     <listitem>
     <para>
      <productname>Bison</productname>和<productname>Flex</productname>用来从Git构建，但使用发行文件构建时可以不要求。只有<productname>Bison</productname> 1.875或2.2及以上才能正常工作。<productname>Flex</productname>则必须是版本2.5.31或以上。
     </para>

     <para>
    <productname>Bison</productname>和<productname>Flex</productname>
    都包括在<productname>msys</productname>工具套件中，它作为
    <productname>MinGW</productname>编译器套件的一部分可以从
    <ulink url="http://www.mingw.org/wiki/MSYS"></ulink>得到。
     </para>

     <para>
      你将需要把包含<filename>flex.exe</filename>和<filename>bison.exe</filename>
      的目录加入到<filename>buildenv.pl</filename>中的PATH环境变量中，
      除非它们已经存在于PATH中。在MinGW的情况下，
      目录将是MinGW安装目录的<filename>\msys\1.0\bin</filename>子目录。
     </para>

     <note>
      <para>
        来自GnuWin32的Bison发布似乎有一个故障，它会导致Bison安装于名称中有空格的目录时发生故障，例如英语安装的默认位置<filename>C:\Program Files\GnuWin32</filename>。考虑将它安装到<filename>C:\GnuWin32</filename>或者在PATH环境设置中使用NTFS段路径名（例如<filename>C:\PROGRA~1\GnuWin32</filename>）。
       </para>
     </note>

     <note>
       <para>
       在PostgreSQL的FTP站点上的以及被旧文档引用的老式<literal>winflex</literal>二进制程序在64位Windows主机上会出现<quote>flex: fatal
       internal error, exec failed</quote>的错误。请使用来自 MSYS 的 Flex。
       </para>
     </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Diff</productname></term>
     <listitem><para>
      Diff是回归测试所需要的，可以从<ulink url="http://gnuwin32.sourceforge.net"></ulink>得到。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Gettext</productname></term>
     <listitem><para>
      Gettext用于NLS支持，可以从<ulink url="http://gnuwin32.sourceforge.net"></ulink>得到。注意二进制程序、依赖文件以及开发者文件都需要。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>MIT Kerberos</productname></term>
     <listitem><para>
      用于 GSSAPI 认证支持。MIT Kerberos可以从<ulink url="http://web.mit.edu/Kerberos/dist/index.html"></ulink>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>libxml2</productname> and
      <productname>libxslt</productname></term>
     <listitem><para>
      用于XML支持。二进制文件可以从<ulink url="http://zlatkovic.com/pub/libxml"></ulink>得到，源代码可以从<ulink url="http://xmlsoft.org"></ulink>得到。注意libxml2需要iconv，后者也可以在相同的下载位置得到。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>openssl</productname></term>
     <listitem><para>
      用于SSL支持。二进制文件可以从<ulink url="http://www.slproweb.com/products/Win32OpenSSL.html"></ulink>下载，源代码可以从<ulink url="http://www.openssl.org"></ulink>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ossp-uuid</productname></term>
     <listitem><para>
      用于UUID-OSSP支持（contrib only）。源代码可以从<ulink url="http://www.ossp.org/pkg/lib/uuid/"></ulink>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Python</productname></term>
     <listitem><para>
      用于构建<application>PL/Python</application>。二进制文件可以从<ulink url="http://www.python.org"></ulink>下载。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>zlib</productname></term>
     <listitem><para>
      用于<application>pg_dump</application>和<application>pg_restore</application>中的压缩支持。二进制文件可以从<ulink url="http://www.zlib.net"></ulink>下载。
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Special Considerations for 64-bit Windows</title>
____________________________________________________________________________-->
  <title>针对64位Windows的特殊考虑</title>

<!--==========================orignal english content==========================
  <para>
   PostgreSQL will only build for the x64 architecture on 64-bit Windows, there
   is no support for Itanium processors.
  </para>
____________________________________________________________________________-->
  <para>
   在64位Windows上，PostgreSQL只能为x64架构构建，因此无法支持安腾处理器。
  </para>

<!--==========================orignal english content==========================
  <para>
   Mixing 32- and 64-bit versions in the same build tree is not supported.
   The build system will automatically detect if it's running in a 32- or
   64-bit environment, and build PostgreSQL accordingly. For this reason, it
   is important to start the correct command prompt before building.
  </para>
____________________________________________________________________________-->
  <para>
   不支持在同一个构建树中混合32位和64位版本。构建系统会自动检测它运行在32位还是64位环境中，然后相应地构建PostgreSQL。鉴于此，在构建前启动正确的命令提示很重要。
  </para>

<!--==========================orignal english content==========================
  <para>
   To use a server-side third party library such as <productname>python</> or
   <productname>openssl</>, this library <emphasis>must</emphasis> also be
   64-bit. There is no support for loading a 32-bit library in a 64-bit
   server. Several of the third party libraries that PostgreSQL supports may
   only be available in 32-bit versions, in which case they cannot be used with
   64-bit PostgreSQL.
  </para>
____________________________________________________________________________-->
  <para>
   要使用服务器端的第三方库如<productname>python</productname>或<productname>openssl</productname>，该库<emphasis>必须</emphasis>也是64位。在一个64位服务器上载入一个32位库是不被支持的。PostgreSQL支持的一些第三方库可能只有32位版本，在这种情况下它们就不能被用于64位PostgreSQL。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Building</title>
____________________________________________________________________________-->
  <title>构建</title>

<!--==========================orignal english content==========================
  <para>
   To build all of PostgreSQL in release configuration (the default), run the
   command:
<screen>
<userinput>build</userinput>
</screen>
   To build all of PostgreSQL in debug configuration, run the command:
<screen>
<userinput>build DEBUG</userinput>
</screen>
   To build just a single project, for example psql, run the commands:
<screen>
<userinput>build psql</userinput>
<userinput>build DEBUG psql</userinput>
</screen>
   To change the default build configuration to debug, put the following
   in the <filename>buildenv.pl</filename> file:
<programlisting>
$ENV{CONFIG}="Debug";
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   要在发行配置中构建PostgreSQL的所有部分（默认），运行命令：
<screen>
<userinput>build</userinput>
</screen>
   要在调试配置中构建PostgreSQL的所有部分，运行命令：
<screen>
<userinput>build DEBUG</userinput>
</screen>
   要构建单独一个对象，例如psql，运行命令：
<screen>
<userinput>build psql</userinput>
<userinput>build DEBUG psql</userinput>
</screen>
   要将默认的构建配置改变成调试，将下面的内容放在<filename>buildenv.pl</filename>文件中：
<programlisting>
$ENV{CONFIG}="Debug";
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   It is also possible to build from inside the Visual Studio GUI. In this
   case, you need to run:
<screen>
<userinput>perl mkvcbuild.pl</userinput>
</screen>
   from the command prompt, and then open the generated
   <filename>pgsql.sln</filename> (in the root directory of the source tree)
   in Visual Studio.
  </para>
____________________________________________________________________________-->
  <para>
   也可以在Visual Studio的图形界面中进行构建。在这种情况下，你需要在命令提示符下运行：
<screen>
<userinput>perl mkvcbuild.pl</userinput>
</screen>
   然后在Visual Studio中打开生成的<filename>pgsql.sln</filename>（在源代码树的根目录中）。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Cleaning and Installing</title>
____________________________________________________________________________-->
  <title>清理和安装</title>

<!--==========================orignal english content==========================
  <para>
   Most of the time, the automatic dependency tracking in Visual Studio will
   handle changed files. But if there have been large changes, you may need
   to clean the installation. To do this, simply run the
   <filename>clean.bat</filename> command, which will automatically clean out
   all generated files. You can also run it with the
   <parameter>dist</parameter> parameter, in which case it will behave like
   <userinput>make distclean</userinput> and remove the flex/bison output files
   as well.
  </para>
____________________________________________________________________________-->
  <para>
   在大部分时间里，Visual Studio的自动依赖跟踪会处理发生改变的文件。但是如果发生了大量的改变，你也许需要清理整个安装。为此，只要运行<filename>clean.bat</filename>命令，它将会自动清除所有生成的文件。你也可以使用<parameter>dist</parameter>参数运行它，这种情况下它的效果和<userinput>make distclean</userinput>一样，并且会移除flex/bison的输出文件。
  </para>

<!--==========================orignal english content==========================
  <para>
   By default, all files are written into a subdirectory of the
   <filename>debug</filename> or <filename>release</filename> directories. To
   install these files using the standard layout, and also generate the files
   required to initialize and use the database, run the command:
<screen>
<userinput>install c:\destination\directory</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   默认情况下，所有的文件都被写入到名为<filename>debug</filename>或<filename>release</filename>的子目录中。要将这些文件以标准布局进行安装并且生成初始化和使用数据库所需的文件 ，运行命令：
<screen>
<userinput>install c:\destination\directory</userinput>
</screen>
  </para>
  
<!--==========================orignal english content==========================
  <para>
   If you want to install only the client applications and
   interface libraries, then you can use these commands:
<screen>
<userinput>install c:\destination\directory client</userinput>
</screen>
  </para>
____________________________________________________________________________-->
  <para>
   如果你想只安装客户端应用和接口库，那么你可以使用这些命令：
<screen>
<userinput>install c:\destination\directory client</userinput>
</screen>
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Running the Regression Tests</title>
____________________________________________________________________________-->
  <title>运行回归测试</title>

<!--==========================orignal english content==========================
  <para>
   To run the regression tests, make sure you have completed the build of all
   required parts first. Also, make sure that the DLLs required to load all
   parts of the system (such as the Perl and Python DLLs for the procedural
   languages) are present in the system path. If they are not, set it through
   the <filename>buildenv.pl</filename> file. To run the tests, run one of
   the following commands from the <filename>src\tools\msvc</filename>
   directory:
<screen>
<userinput>vcregress check</userinput>
<userinput>vcregress installcheck</userinput>
<userinput>vcregress plcheck</userinput>
<userinput>vcregress contribcheck</userinput>
<userinput>vcregress modulescheck</userinput>
<userinput>vcregress ecpgcheck</userinput>
<userinput>vcregress isolationcheck</userinput>
<userinput>vcregress bincheck</userinput>
<userinput>vcregress recoverycheck</userinput>
<userinput>vcregress upgradecheck</userinput>
</screen>

   To change the schedule used (default is parallel), append it to the
   command line like:
<screen>
<userinput>vcregress check serial</userinput>
</screen>

   For more information about the regression tests, see
   <xref linkend="regress">.
  </para>
____________________________________________________________________________-->
  <para>
   要运行回归测试，确保你已经完成了所有所需部分的构建。另外，确保载入整个系统所需的DLL（例如Perl和Python过程语言所需的DLL）都在系统路径中。如果它们不在路径中，通过<filename>buildenv.pl</filename>文件设置。要运行测试，可以从<filename>src\tools\msvc</filename>目录运行以下命令之一：
<screen>
<userinput>vcregress check</userinput>
<userinput>vcregress installcheck</userinput>
<userinput>vcregress plcheck</userinput>
<userinput>vcregress contribcheck</userinput>
<userinput>vcregress modulescheck</userinput>
<userinput>vcregress ecpgcheck</userinput>
<userinput>vcregress isolationcheck</userinput>
<userinput>vcregress bincheck</userinput>
<userinput>vcregress recoverycheck</userinput>
<userinput>vcregress upgradecheck</userinput>
</screen>

   要更改使用的调度方式（默认为并行），在命令行后增加调度方式，如：
<screen>
<userinput>vcregress check serial</userinput>
</screen>

   关于回归测试详见<xref linkend="regress"/>。
  </para>
  
<!--==========================orignal english content==========================
  <para>
   Running the regression tests on client programs, with
   <command>vcregress bincheck</>, or on recovery tests, with
   <command>vcregress recoverycheck</>, requires an additional Perl module
   to be installed:
   <variablelist>
    <varlistentry>
     <term><productname>IPC::Run</productname></term>
     <listitem><para>
      As of this writing, <literal>IPC::Run</> is not included in the
      ActiveState Perl installation, nor in the ActiveState Perl Package
      Manager (PPM) library. To install, download the
      <filename>IPC-Run-&lt;version&gt;.tar.gz</> source archive from CPAN,
      at <ulink url="http://search.cpan.org/dist/IPC-Run/"></>, and
      uncompress. Edit the <filename>buildenv.pl</> file, and add a PERL5LIB
      variable to point to the <filename>lib</> subdirectory from the
      extracted archive. For example:
<programlisting>
$ENV{PERL5LIB}=$ENV{PERL5LIB} . ';c:\IPC-Run-0.94\lib';
</programlisting>
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>
____________________________________________________________________________-->
  <para>
   用<command>vcregress bincheck</command>和<command>vcregress recoverycheck</command>
   分别可以运行客户端程序上的回归测试和恢复测试，这要求
   安装了额外的 Perl 模块：
   <variablelist>
    <varlistentry>
     <term><productname>IPC::Run</productname></term>
     <listitem><para>
      从编写这份文档时起，<literal>IPC::Run</literal>没有被包括在
      ActiveState Perl 安装或者 ActiveState Perl Package
      Manager (PPM) 库中。要安装，请从 CPAN （在
      <ulink url="http://search.cpan.org/dist/IPC-Run/"></ulink>）下载
      <filename>IPC-Run-&lt;version&gt;.tar.gz</filename>源代码归档并且解压。
      编辑<filename>buildenv.pl</filename>文件，并且增加一个 PERL5LIB 变量
      指向解压得到的归档中的<filename>lib</filename>子目录。例如：
<programlisting>
$ENV{PERL5LIB}=$ENV{PERL5LIB} . ';c:\IPC-Run-0.94\lib';
</programlisting>
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Building the Documentation</title>
____________________________________________________________________________-->
  <title>构建文档</title>

<!--==========================orignal english content==========================
  <para>
   Building the PostgreSQL documentation in HTML format requires several tools
   and files. Create a root directory for all these files, and store them
   in the subdirectories in the list below.
   <variablelist>
    <varlistentry>
     <term>OpenJade 1.3.1-2</term>
     <listitem><para>
      Download from
      <ulink url="http://sourceforge.net/projects/openjade/files/openjade/1.3.1/openjade-1_3_1-2-bin.zip/download"></>
      and uncompress in the subdirectory <filename>openjade-1.3.1</filename>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DTD 4.2</term>
     <listitem><para>
      Download from
      <ulink url="http://www.oasis-open.org/docbook/sgml/4.2/docbook-4.2.zip"></>
      and uncompress in the subdirectory <filename>docbook</filename>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>ISO character entities</term>
     <listitem><para>
      Download from
      <ulink url="http://www.oasis-open.org/cover/ISOEnts.zip"></> and
      uncompress in the subdirectory <filename>docbook</filename>.
     </para></listitem>
    </varlistentry>
   </variablelist>
   Edit the <filename>buildenv.pl</filename> file, and add a variable for the
   location of the root directory, for example:
<programlisting>
$ENV{DOCROOT}='c:\docbook';
</programlisting>
   To build the documentation, run the command
   <filename>builddoc.bat</filename>. Note that this will actually run the
   build twice, in order to generate the indexes. The generated HTML files
   will be in <filename>doc\src\sgml</filename>.
  </para>
____________________________________________________________________________-->
  <para>
   构建HTML格式的PostgreSQL文档需要一些工具和文件。为所有这些文件创建一个根目录，然后将下面列出的它们分别放在相应子目录中。   <variablelist>
    <varlistentry>
     <term>OpenJade 1.3.1-2</term>
     <listitem><para>
      从<ulink url="http://sourceforge.net/projects/openjade/files/openjade/1.3.1/openjade-1_3_1-2-bin.zip/download"></ulink>下载并解压到<filename>openjade-1.3.1</filename>子目录。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DTD 4.2</term>
     <listitem><para>
      从<ulink url="http://www.oasis-open.org/docbook/sgml/4.2/docbook-4.2.zip"></ulink>下载并解压到<filename>docbook</filename>子目录。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>ISO字符实体</term>
     <listitem><para>
      从<ulink url="http://www.oasis-open.org/cover/ISOEnts.zip"></ulink>下载并解压到<filename>docbook</filename>子目录。
     </para></listitem>
    </varlistentry>
   </variablelist>
   编辑<filename>buildenv.pl</filename>文件，为根目录的位置增加一个变量，例如：
<programlisting>
$ENV{DOCROOT}='c:\docbook';
</programlisting>
   要构建文档，运行命令<filename>builddoc.bat</filename>。注意这实际会运行构建两次以生成索引。生成好的HTML文件将在<filename>doc\src\sgml</filename>中。
  </para>
 </sect2>

 </sect1>
</chapter>
